/*
* Adyen Payment API
*
*
* The version of the OpenAPI document: 68
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.ClassicPayments;
using Newtonsoft.Json;

namespace Adyen.Service.ClassicPayments
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ModificationsService : AbstractService
    {
        private readonly string _baseUrl;
        
        public ModificationsService(Client client) : base(client)
        {
            _baseUrl = client.Config.Endpoint + "/pal/servlet/Payment/" + ClientConfig.ApiVersion;
        }
    
        /// <summary>
        /// Change the authorised amount
        /// </summary>
        /// <param name="adjustAuthorisationRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ModificationResult</returns>
        public ModificationResult ChangeTheAuthorisedAmount(AdjustAuthorisationRequest adjustAuthorisationRequest, RequestOptions requestOptions = default)
        {
            return ChangeTheAuthorisedAmountAsync(adjustAuthorisationRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Change the authorised amount
        /// </summary>
        /// <param name="adjustAuthorisationRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ModificationResult</returns>
        public async Task<ModificationResult> ChangeTheAuthorisedAmountAsync(AdjustAuthorisationRequest adjustAuthorisationRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/adjustAuthorisation";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<ModificationResult>(adjustAuthorisationRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

        /// <summary>
        /// Cancel an authorisation
        /// </summary>
        /// <param name="cancelRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ModificationResult</returns>
        public ModificationResult CancelAuthorisation(CancelRequest cancelRequest, RequestOptions requestOptions = default)
        {
            return CancelAuthorisationAsync(cancelRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Cancel an authorisation
        /// </summary>
        /// <param name="cancelRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ModificationResult</returns>
        public async Task<ModificationResult> CancelAuthorisationAsync(CancelRequest cancelRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/cancel";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<ModificationResult>(cancelRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

        /// <summary>
        /// Cancel or refund a payment
        /// </summary>
        /// <param name="cancelOrRefundRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ModificationResult</returns>
        public ModificationResult CancelOrRefundPayment(CancelOrRefundRequest cancelOrRefundRequest, RequestOptions requestOptions = default)
        {
            return CancelOrRefundPaymentAsync(cancelOrRefundRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Cancel or refund a payment
        /// </summary>
        /// <param name="cancelOrRefundRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ModificationResult</returns>
        public async Task<ModificationResult> CancelOrRefundPaymentAsync(CancelOrRefundRequest cancelOrRefundRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/cancelOrRefund";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<ModificationResult>(cancelOrRefundRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

        /// <summary>
        /// Capture an authorisation
        /// </summary>
        /// <param name="captureRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ModificationResult</returns>
        public ModificationResult CaptureAuthorisation(CaptureRequest captureRequest, RequestOptions requestOptions = default)
        {
            return CaptureAuthorisationAsync(captureRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Capture an authorisation
        /// </summary>
        /// <param name="captureRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ModificationResult</returns>
        public async Task<ModificationResult> CaptureAuthorisationAsync(CaptureRequest captureRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/capture";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<ModificationResult>(captureRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

        /// <summary>
        /// Create a donation
        /// </summary>
        /// <param name="donationRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ModificationResult</returns>
        public ModificationResult CreateDonation(DonationRequest donationRequest, RequestOptions requestOptions = default)
        {
            return CreateDonationAsync(donationRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a donation
        /// </summary>
        /// <param name="donationRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ModificationResult</returns>
        public async Task<ModificationResult> CreateDonationAsync(DonationRequest donationRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/donate";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<ModificationResult>(donationRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

        /// <summary>
        /// Refund a captured payment
        /// </summary>
        /// <param name="refundRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ModificationResult</returns>
        public ModificationResult RefundCapturedPayment(RefundRequest refundRequest, RequestOptions requestOptions = default)
        {
            return RefundCapturedPaymentAsync(refundRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Refund a captured payment
        /// </summary>
        /// <param name="refundRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ModificationResult</returns>
        public async Task<ModificationResult> RefundCapturedPaymentAsync(RefundRequest refundRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/refund";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<ModificationResult>(refundRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

        /// <summary>
        /// Cancel an authorisation using your reference
        /// </summary>
        /// <param name="technicalCancelRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ModificationResult</returns>
        public ModificationResult CancelAuthorisationUsingYourReference(TechnicalCancelRequest technicalCancelRequest, RequestOptions requestOptions = default)
        {
            return CancelAuthorisationUsingYourReferenceAsync(technicalCancelRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Cancel an authorisation using your reference
        /// </summary>
        /// <param name="technicalCancelRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ModificationResult</returns>
        public async Task<ModificationResult> CancelAuthorisationUsingYourReferenceAsync(TechnicalCancelRequest technicalCancelRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/technicalCancel";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<ModificationResult>(technicalCancelRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

        /// <summary>
        /// Cancel an in-person refund
        /// </summary>
        /// <param name="voidPendingRefundRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ModificationResult</returns>
        public ModificationResult CancelInpersonRefund(VoidPendingRefundRequest voidPendingRefundRequest, RequestOptions requestOptions = default)
        {
            return CancelInpersonRefundAsync(voidPendingRefundRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Cancel an in-person refund
        /// </summary>
        /// <param name="voidPendingRefundRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ModificationResult</returns>
        public async Task<ModificationResult> CancelInpersonRefundAsync(VoidPendingRefundRequest voidPendingRefundRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/voidPendingRefund";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<ModificationResult>(voidPendingRefundRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

    }
}
