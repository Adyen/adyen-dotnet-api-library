/*
* Adyen Stored Value API
*
*
* The version of the OpenAPI document: 46
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.StoredValue;

namespace Adyen.Service
{
    /// <summary>
    /// DefaultService Interface
    /// </summary>
    public interface IStoredValueService
    {
        /// <summary>
        /// Changes the status of the payment method.
        /// </summary>
        /// <param name="storedValueStatusChangeRequest"><see cref="StoredValueStatusChangeRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="StoredValueStatusChangeResponse"/>.</returns>
        StoredValueStatusChangeResponse ChangeStatus(StoredValueStatusChangeRequest storedValueStatusChangeRequest, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Changes the status of the payment method.
        /// </summary>
        /// <param name="storedValueStatusChangeRequest"><see cref="StoredValueStatusChangeRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="StoredValueStatusChangeResponse"/>.</returns>
        Task<StoredValueStatusChangeResponse> ChangeStatusAsync(StoredValueStatusChangeRequest storedValueStatusChangeRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Checks the balance.
        /// </summary>
        /// <param name="storedValueBalanceCheckRequest"><see cref="StoredValueBalanceCheckRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="StoredValueBalanceCheckResponse"/>.</returns>
        StoredValueBalanceCheckResponse CheckBalance(StoredValueBalanceCheckRequest storedValueBalanceCheckRequest, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Checks the balance.
        /// </summary>
        /// <param name="storedValueBalanceCheckRequest"><see cref="StoredValueBalanceCheckRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="StoredValueBalanceCheckResponse"/>.</returns>
        Task<StoredValueBalanceCheckResponse> CheckBalanceAsync(StoredValueBalanceCheckRequest storedValueBalanceCheckRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Issues a new card.
        /// </summary>
        /// <param name="storedValueIssueRequest"><see cref="StoredValueIssueRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="StoredValueIssueResponse"/>.</returns>
        StoredValueIssueResponse Issue(StoredValueIssueRequest storedValueIssueRequest, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Issues a new card.
        /// </summary>
        /// <param name="storedValueIssueRequest"><see cref="StoredValueIssueRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="StoredValueIssueResponse"/>.</returns>
        Task<StoredValueIssueResponse> IssueAsync(StoredValueIssueRequest storedValueIssueRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Loads the payment method.
        /// </summary>
        /// <param name="storedValueLoadRequest"><see cref="StoredValueLoadRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="StoredValueLoadResponse"/>.</returns>
        StoredValueLoadResponse Load(StoredValueLoadRequest storedValueLoadRequest, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Loads the payment method.
        /// </summary>
        /// <param name="storedValueLoadRequest"><see cref="StoredValueLoadRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="StoredValueLoadResponse"/>.</returns>
        Task<StoredValueLoadResponse> LoadAsync(StoredValueLoadRequest storedValueLoadRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Merge the balance of two cards.
        /// </summary>
        /// <param name="storedValueBalanceMergeRequest"><see cref="StoredValueBalanceMergeRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="StoredValueBalanceMergeResponse"/>.</returns>
        StoredValueBalanceMergeResponse MergeBalance(StoredValueBalanceMergeRequest storedValueBalanceMergeRequest, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Merge the balance of two cards.
        /// </summary>
        /// <param name="storedValueBalanceMergeRequest"><see cref="StoredValueBalanceMergeRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="StoredValueBalanceMergeResponse"/>.</returns>
        Task<StoredValueBalanceMergeResponse> MergeBalanceAsync(StoredValueBalanceMergeRequest storedValueBalanceMergeRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Voids a transaction.
        /// </summary>
        /// <param name="storedValueVoidRequest"><see cref="StoredValueVoidRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="StoredValueVoidResponse"/>.</returns>
        StoredValueVoidResponse VoidTransaction(StoredValueVoidRequest storedValueVoidRequest, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Voids a transaction.
        /// </summary>
        /// <param name="storedValueVoidRequest"><see cref="StoredValueVoidRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="StoredValueVoidResponse"/>.</returns>
        Task<StoredValueVoidResponse> VoidTransactionAsync(StoredValueVoidRequest storedValueVoidRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the StoredValueService API endpoints
    /// </summary>
    public class StoredValueService : AbstractService, IStoredValueService
    {
        private readonly string _baseUrl;
        
        public StoredValueService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://pal-test.adyen.com/pal/servlet/StoredValue/v46");
        }
        
        public StoredValueStatusChangeResponse ChangeStatus(StoredValueStatusChangeRequest storedValueStatusChangeRequest, RequestOptions requestOptions = default)
        {
            return ChangeStatusAsync(storedValueStatusChangeRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<StoredValueStatusChangeResponse> ChangeStatusAsync(StoredValueStatusChangeRequest storedValueStatusChangeRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/changeStatus";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<StoredValueStatusChangeResponse>(storedValueStatusChangeRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public StoredValueBalanceCheckResponse CheckBalance(StoredValueBalanceCheckRequest storedValueBalanceCheckRequest, RequestOptions requestOptions = default)
        {
            return CheckBalanceAsync(storedValueBalanceCheckRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<StoredValueBalanceCheckResponse> CheckBalanceAsync(StoredValueBalanceCheckRequest storedValueBalanceCheckRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/checkBalance";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<StoredValueBalanceCheckResponse>(storedValueBalanceCheckRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public StoredValueIssueResponse Issue(StoredValueIssueRequest storedValueIssueRequest, RequestOptions requestOptions = default)
        {
            return IssueAsync(storedValueIssueRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<StoredValueIssueResponse> IssueAsync(StoredValueIssueRequest storedValueIssueRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/issue";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<StoredValueIssueResponse>(storedValueIssueRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public StoredValueLoadResponse Load(StoredValueLoadRequest storedValueLoadRequest, RequestOptions requestOptions = default)
        {
            return LoadAsync(storedValueLoadRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<StoredValueLoadResponse> LoadAsync(StoredValueLoadRequest storedValueLoadRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/load";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<StoredValueLoadResponse>(storedValueLoadRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public StoredValueBalanceMergeResponse MergeBalance(StoredValueBalanceMergeRequest storedValueBalanceMergeRequest, RequestOptions requestOptions = default)
        {
            return MergeBalanceAsync(storedValueBalanceMergeRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<StoredValueBalanceMergeResponse> MergeBalanceAsync(StoredValueBalanceMergeRequest storedValueBalanceMergeRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/mergeBalance";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<StoredValueBalanceMergeResponse>(storedValueBalanceMergeRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public StoredValueVoidResponse VoidTransaction(StoredValueVoidRequest storedValueVoidRequest, RequestOptions requestOptions = default)
        {
            return VoidTransactionAsync(storedValueVoidRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<StoredValueVoidResponse> VoidTransactionAsync(StoredValueVoidRequest storedValueVoidRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/voidTransaction";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<StoredValueVoidResponse>(storedValueVoidRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
    }
}