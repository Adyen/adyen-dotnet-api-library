/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PaymentMethodsMerchantLevelApi : AbstractService
    {
        public PaymentMethodsMerchantLevelApi(Client client) : base(client) {}
    
        /// <summary>
        /// Get all payment methods
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="storeId">The unique identifier of the store for which to return the payment methods.</param>
        /// <param name="businessLineId">The unique identifier of the Business Line for which to return the payment methods.</param>
        /// <param name="pageSize">The number of items to have on a page, maximum 100. The default is 10 items on a page.</param>
        /// <param name="pageNumber">The number of the page to fetch.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>PaymentMethodResponse</returns>
        public PaymentMethodResponse GetAllPaymentMethods(string merchantId, string storeId = default, string businessLineId = default, int? pageSize = default, int? pageNumber = default, RequestOptions requestOptions = default)
        {
            return GetAllPaymentMethodsAsync(merchantId, storeId, businessLineId, pageSize, pageNumber, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all payment methods
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="storeId">The unique identifier of the store for which to return the payment methods.</param>
        /// <param name="businessLineId">The unique identifier of the Business Line for which to return the payment methods.</param>
        /// <param name="pageSize">The number of items to have on a page, maximum 100. The default is 10 items on a page.</param>
        /// <param name="pageNumber">The number of the page to fetch.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of PaymentMethodResponse</returns>
        public async Task<PaymentMethodResponse> GetAllPaymentMethodsAsync(string merchantId, string storeId = default, string businessLineId = default, int? pageSize = default, int? pageNumber = default, RequestOptions requestOptions = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (storeId != null) queryParams.Add("storeId", storeId);
            if (businessLineId != null) queryParams.Add("businessLineId", businessLineId);
            if (pageSize != null) queryParams.Add("pageSize", pageSize.ToString());
            if (pageNumber != null) queryParams.Add("pageNumber", pageNumber.ToString());
            var endpoint = $"/merchants/{merchantId}/paymentMethodSettings" + ToQueryString(queryParams);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<PaymentMethodResponse>(jsonResult);
        }

        /// <summary>
        /// Get payment method details
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="paymentMethodId">The unique identifier of the payment method.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>PaymentMethod</returns>
        public PaymentMethod GetPaymentMethodDetails(string merchantId, string paymentMethodId, RequestOptions requestOptions = default)
        {
            return GetPaymentMethodDetailsAsync(merchantId, paymentMethodId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get payment method details
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="paymentMethodId">The unique identifier of the payment method.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of PaymentMethod</returns>
        public async Task<PaymentMethod> GetPaymentMethodDetailsAsync(string merchantId, string paymentMethodId, RequestOptions requestOptions = default)
        {
            var endpoint = $"/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<PaymentMethod>(jsonResult);
        }

        /// <summary>
        /// Get Apple Pay domains
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="paymentMethodId">The unique identifier of the payment method.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ApplePayInfo</returns>
        public ApplePayInfo GetApplePayDomains(string merchantId, string paymentMethodId, RequestOptions requestOptions = default)
        {
            return GetApplePayDomainsAsync(merchantId, paymentMethodId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Apple Pay domains
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="paymentMethodId">The unique identifier of the payment method.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ApplePayInfo</returns>
        public async Task<ApplePayInfo> GetApplePayDomainsAsync(string merchantId, string paymentMethodId, RequestOptions requestOptions = default)
        {
            var endpoint = $"/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/getApplePayDomains";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<ApplePayInfo>(jsonResult);
        }

        /// <summary>
        /// Update a payment method
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="paymentMethodId">The unique identifier of the payment method.</param>
        /// <param name="updatePaymentMethodInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>PaymentMethod</returns>
        public PaymentMethod UpdatePaymentMethod(string merchantId, string paymentMethodId, UpdatePaymentMethodInfo updatePaymentMethodInfo, RequestOptions requestOptions = default)
        {
            return UpdatePaymentMethodAsync(merchantId, paymentMethodId, updatePaymentMethodInfo, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a payment method
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="paymentMethodId">The unique identifier of the payment method.</param>
        /// <param name="updatePaymentMethodInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of PaymentMethod</returns>
        public async Task<PaymentMethod> UpdatePaymentMethodAsync(string merchantId, string paymentMethodId, UpdatePaymentMethodInfo updatePaymentMethodInfo, RequestOptions requestOptions = default)
        {
            var endpoint = $"/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(updatePaymentMethodInfo.ToJson(), requestOptions, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<PaymentMethod>(jsonResult);
        }

        /// <summary>
        /// Request a payment method
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="paymentMethodSetupInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>PaymentMethod</returns>
        public PaymentMethod RequestPaymentMethod(string merchantId, PaymentMethodSetupInfo paymentMethodSetupInfo, RequestOptions requestOptions = default)
        {
            return RequestPaymentMethodAsync(merchantId, paymentMethodSetupInfo, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Request a payment method
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="paymentMethodSetupInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of PaymentMethod</returns>
        public async Task<PaymentMethod> RequestPaymentMethodAsync(string merchantId, PaymentMethodSetupInfo paymentMethodSetupInfo, RequestOptions requestOptions = default)
        {
            var endpoint = $"/merchants/{merchantId}/paymentMethodSettings";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(paymentMethodSetupInfo.ToJson(), requestOptions, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<PaymentMethod>(jsonResult);
        }

        /// <summary>
        /// Add an Apple Pay domain
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="paymentMethodId">The unique identifier of the payment method.</param>
        /// <param name="applePayInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        public void AddApplePayDomain(string merchantId, string paymentMethodId, ApplePayInfo applePayInfo, RequestOptions requestOptions = default)
        {
            AddApplePayDomainAsync(merchantId, paymentMethodId, applePayInfo, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Add an Apple Pay domain
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="paymentMethodId">The unique identifier of the payment method.</param>
        /// <param name="applePayInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        public async Task AddApplePayDomainAsync(string merchantId, string paymentMethodId, ApplePayInfo applePayInfo, RequestOptions requestOptions = default)
        {
            var endpoint = $"/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/addApplePayDomains";
            var resource = new ManagementResource(this, endpoint);
            await resource.RequestAsync(applePayInfo.ToJson(), requestOptions, new HttpMethod("POST"));
        }

    }
}
