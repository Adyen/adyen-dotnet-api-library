/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TerminalSettingsStoreLevelApi : AbstractService
    {
        public TerminalSettingsStoreLevelApi(Client client) : base(client) {}
    
        /// <summary>
        /// Get the terminal logo
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="reference">The reference that identifies the store.</param>
        /// <param name="model">The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Logo</returns>
        public Logo GetMerchantsMerchantIdStoresReferenceTerminalLogos(string merchantId, string reference, string model = default, RequestOptions requestOptions = default)
        {
            return GetMerchantsMerchantIdStoresReferenceTerminalLogosAsync(merchantId, reference, model, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the terminal logo
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="reference">The reference that identifies the store.</param>
        /// <param name="model">The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Logo</returns>
        public async Task<Logo> GetMerchantsMerchantIdStoresReferenceTerminalLogosAsync(string merchantId, string reference, string model = default, RequestOptions requestOptions = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (model != null) queryParams.Add("model", model);
            var endpoint = $"/merchants/{merchantId}/stores/{reference}/terminalLogos" + ToQueryString(queryParams);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<Logo>(jsonResult);
        }

        /// <summary>
        /// Get terminal settings
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="reference">The reference that identifies the store.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TerminalSettings</returns>
        public TerminalSettings GetMerchantsMerchantIdStoresReferenceTerminalSettings(string merchantId, string reference, RequestOptions requestOptions = default)
        {
            return GetMerchantsMerchantIdStoresReferenceTerminalSettingsAsync(merchantId, reference, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get terminal settings
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="reference">The reference that identifies the store.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TerminalSettings</returns>
        public async Task<TerminalSettings> GetMerchantsMerchantIdStoresReferenceTerminalSettingsAsync(string merchantId, string reference, RequestOptions requestOptions = default)
        {
            var endpoint = $"/merchants/{merchantId}/stores/{reference}/terminalSettings";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<TerminalSettings>(jsonResult);
        }

        /// <summary>
        /// Get the terminal logo
        /// </summary>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="model">The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Logo</returns>
        public Logo GetStoresStoreIdTerminalLogos(string storeId, string model = default, RequestOptions requestOptions = default)
        {
            return GetStoresStoreIdTerminalLogosAsync(storeId, model, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the terminal logo
        /// </summary>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="model">The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Logo</returns>
        public async Task<Logo> GetStoresStoreIdTerminalLogosAsync(string storeId, string model = default, RequestOptions requestOptions = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (model != null) queryParams.Add("model", model);
            var endpoint = $"/stores/{storeId}/terminalLogos" + ToQueryString(queryParams);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<Logo>(jsonResult);
        }

        /// <summary>
        /// Get terminal settings
        /// </summary>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TerminalSettings</returns>
        public TerminalSettings GetStoresStoreIdTerminalSettings(string storeId, RequestOptions requestOptions = default)
        {
            return GetStoresStoreIdTerminalSettingsAsync(storeId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get terminal settings
        /// </summary>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TerminalSettings</returns>
        public async Task<TerminalSettings> GetStoresStoreIdTerminalSettingsAsync(string storeId, RequestOptions requestOptions = default)
        {
            var endpoint = $"/stores/{storeId}/terminalSettings";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<TerminalSettings>(jsonResult);
        }

        /// <summary>
        /// Update the terminal logo
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="reference">The reference that identifies the store.</param>
        /// <param name="model">The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T</param>
        /// <param name="logo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Logo</returns>
        public Logo PatchMerchantsMerchantIdStoresReferenceTerminalLogos(string merchantId, string reference, Logo logo, string model = default, RequestOptions requestOptions = default)
        {
            return PatchMerchantsMerchantIdStoresReferenceTerminalLogosAsync(merchantId, reference, logo, model, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the terminal logo
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="reference">The reference that identifies the store.</param>
        /// <param name="model">The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T</param>
        /// <param name="logo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Logo</returns>
        public async Task<Logo> PatchMerchantsMerchantIdStoresReferenceTerminalLogosAsync(string merchantId, string reference, Logo logo, string model = default, RequestOptions requestOptions = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (model != null) queryParams.Add("model", model);
            var endpoint = $"/merchants/{merchantId}/stores/{reference}/terminalLogos" + ToQueryString(queryParams);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(logo.ToJson(), requestOptions, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<Logo>(jsonResult);
        }

        /// <summary>
        /// Update terminal settings
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="reference">The reference that identifies the store.</param>
        /// <param name="terminalSettings"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TerminalSettings</returns>
        public TerminalSettings PatchMerchantsMerchantIdStoresReferenceTerminalSettings(string merchantId, string reference, TerminalSettings terminalSettings, RequestOptions requestOptions = default)
        {
            return PatchMerchantsMerchantIdStoresReferenceTerminalSettingsAsync(merchantId, reference, terminalSettings, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update terminal settings
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="reference">The reference that identifies the store.</param>
        /// <param name="terminalSettings"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TerminalSettings</returns>
        public async Task<TerminalSettings> PatchMerchantsMerchantIdStoresReferenceTerminalSettingsAsync(string merchantId, string reference, TerminalSettings terminalSettings, RequestOptions requestOptions = default)
        {
            var endpoint = $"/merchants/{merchantId}/stores/{reference}/terminalSettings";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(terminalSettings.ToJson(), requestOptions, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<TerminalSettings>(jsonResult);
        }

        /// <summary>
        /// Update the terminal logo
        /// </summary>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="model">The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.</param>
        /// <param name="logo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Logo</returns>
        public Logo PatchStoresStoreIdTerminalLogos(string storeId, Logo logo, string model = default, RequestOptions requestOptions = default)
        {
            return PatchStoresStoreIdTerminalLogosAsync(storeId, logo, model, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the terminal logo
        /// </summary>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="model">The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.</param>
        /// <param name="logo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Logo</returns>
        public async Task<Logo> PatchStoresStoreIdTerminalLogosAsync(string storeId, Logo logo, string model = default, RequestOptions requestOptions = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (model != null) queryParams.Add("model", model);
            var endpoint = $"/stores/{storeId}/terminalLogos" + ToQueryString(queryParams);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(logo.ToJson(), requestOptions, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<Logo>(jsonResult);
        }

        /// <summary>
        /// Update terminal settings
        /// </summary>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="terminalSettings"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TerminalSettings</returns>
        public TerminalSettings PatchStoresStoreIdTerminalSettings(string storeId, TerminalSettings terminalSettings, RequestOptions requestOptions = default)
        {
            return PatchStoresStoreIdTerminalSettingsAsync(storeId, terminalSettings, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update terminal settings
        /// </summary>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="terminalSettings"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TerminalSettings</returns>
        public async Task<TerminalSettings> PatchStoresStoreIdTerminalSettingsAsync(string storeId, TerminalSettings terminalSettings, RequestOptions requestOptions = default)
        {
            var endpoint = $"/stores/{storeId}/terminalSettings";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(terminalSettings.ToJson(), requestOptions, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<TerminalSettings>(jsonResult);
        }

    }
}
