/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AccountMerchantLevelService : AbstractService
    {
        private readonly string _baseUrl;
        
        public AccountMerchantLevelService(Client client) : base(client)
        {
            _baseUrl = client.Config.ManagementEndpoint + "/" + ClientConfig.ManagementVersion;
        }
    
        /// <summary>
        /// Get a list of merchant accounts
        /// </summary>
        /// <param name="pageNumber">The number of the page to fetch.</param>
        /// <param name="pageSize">The number of items to have on a page, maximum 100. The default is 10 items on a page.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ListMerchantResponse</returns>
        public ListMerchantResponse ListMerchantAccounts(int? pageNumber = default, int? pageSize = default, RequestOptions requestOptions = default)
        {
            return ListMerchantAccountsAsync(pageNumber, pageSize, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of merchant accounts
        /// </summary>
        /// <param name="pageNumber">The number of the page to fetch.</param>
        /// <param name="pageSize">The number of items to have on a page, maximum 100. The default is 10 items on a page.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ListMerchantResponse</returns>
        public async Task<ListMerchantResponse> ListMerchantAccountsAsync(int? pageNumber = default, int? pageSize = default, RequestOptions requestOptions = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (pageNumber != null) queryParams.Add("pageNumber", pageNumber.ToString());
            if (pageSize != null) queryParams.Add("pageSize", pageSize.ToString());
            var endpoint = _baseUrl + "/merchants" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<ListMerchantResponse>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Get a merchant account
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Merchant</returns>
        public Merchant GetMerchantAccount(string merchantId, RequestOptions requestOptions = default)
        {
            return GetMerchantAccountAsync(merchantId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a merchant account
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Merchant</returns>
        public async Task<Merchant> GetMerchantAccountAsync(string merchantId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/merchants/{merchantId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Merchant>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Create a merchant account
        /// </summary>
        /// <param name="createMerchantRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>CreateMerchantResponse</returns>
        public CreateMerchantResponse CreateMerchantAccount(CreateMerchantRequest createMerchantRequest, RequestOptions requestOptions = default)
        {
            return CreateMerchantAccountAsync(createMerchantRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a merchant account
        /// </summary>
        /// <param name="createMerchantRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of CreateMerchantResponse</returns>
        public async Task<CreateMerchantResponse> CreateMerchantAccountAsync(CreateMerchantRequest createMerchantRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/merchants";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<CreateMerchantResponse>(createMerchantRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

        /// <summary>
        /// Request to activate a merchant account
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>RequestActivationResponse</returns>
        public RequestActivationResponse RequestToActivateMerchantAccount(string merchantId, RequestOptions requestOptions = default)
        {
            return RequestToActivateMerchantAccountAsync(merchantId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Request to activate a merchant account
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of RequestActivationResponse</returns>
        public async Task<RequestActivationResponse> RequestToActivateMerchantAccountAsync(string merchantId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/merchants/{merchantId}/activate";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<RequestActivationResponse>(null, requestOptions, new HttpMethod("POST"));
        }

    }
}
