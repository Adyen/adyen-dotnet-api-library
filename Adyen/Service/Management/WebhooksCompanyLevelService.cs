/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WebhooksCompanyLevelService : AbstractService
    {
        private readonly string _baseUrl;
        
        public WebhooksCompanyLevelService(Client client) : base(client)
        {
            _baseUrl = client.Config.ManagementEndpoint + "/" + ClientConfig.ManagementVersion;
        }
    
        /// <summary>
        /// Remove a webhook
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="requestOptions">Additional request options.</param>
        public void RemoveWebhook(string companyId, string webhookId, RequestOptions requestOptions = default)
        {
            RemoveWebhookAsync(companyId, webhookId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Remove a webhook
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="requestOptions">Additional request options.</param>
        public async Task RemoveWebhookAsync(string companyId, string webhookId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/companies/{companyId}/webhooks/{webhookId}";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(null, requestOptions, new HttpMethod("DELETE"));
        }

        /// <summary>
        /// List all webhooks
        /// </summary>
        /// <param name="companyId">Unique identifier of the [company account](https://docs.adyen.com/account/account-structure#company-account).</param>
        /// <param name="pageNumber">The number of the page to fetch.</param>
        /// <param name="pageSize">The number of items to have on a page, maximum 100. The default is 10 items on a page.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ListWebhooksResponse</returns>
        public ListWebhooksResponse ListAllWebhooks(string companyId, int? pageNumber = default, int? pageSize = default, RequestOptions requestOptions = default)
        {
            return ListAllWebhooksAsync(companyId, pageNumber, pageSize, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all webhooks
        /// </summary>
        /// <param name="companyId">Unique identifier of the [company account](https://docs.adyen.com/account/account-structure#company-account).</param>
        /// <param name="pageNumber">The number of the page to fetch.</param>
        /// <param name="pageSize">The number of items to have on a page, maximum 100. The default is 10 items on a page.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ListWebhooksResponse</returns>
        public async Task<ListWebhooksResponse> ListAllWebhooksAsync(string companyId, int? pageNumber = default, int? pageSize = default, RequestOptions requestOptions = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (pageNumber != null) queryParams.Add("pageNumber", pageNumber.ToString());
            if (pageSize != null) queryParams.Add("pageSize", pageSize.ToString());
            var endpoint = _baseUrl + $"/companies/{companyId}/webhooks" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<ListWebhooksResponse>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <param name="companyId">Unique identifier of the [company account](https://docs.adyen.com/account/account-structure#company-account).</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Webhook</returns>
        public Webhook GetWebhook(string companyId, string webhookId, RequestOptions requestOptions = default)
        {
            return GetWebhookAsync(companyId, webhookId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <param name="companyId">Unique identifier of the [company account](https://docs.adyen.com/account/account-structure#company-account).</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Webhook</returns>
        public async Task<Webhook> GetWebhookAsync(string companyId, string webhookId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/companies/{companyId}/webhooks/{webhookId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Webhook>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="updateCompanyWebhookRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Webhook</returns>
        public Webhook UpdateWebhook(string companyId, string webhookId, UpdateCompanyWebhookRequest updateCompanyWebhookRequest, RequestOptions requestOptions = default)
        {
            return UpdateWebhookAsync(companyId, webhookId, updateCompanyWebhookRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="updateCompanyWebhookRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Webhook</returns>
        public async Task<Webhook> UpdateWebhookAsync(string companyId, string webhookId, UpdateCompanyWebhookRequest updateCompanyWebhookRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/companies/{companyId}/webhooks/{webhookId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Webhook>(updateCompanyWebhookRequest.ToJson(), requestOptions, new HttpMethod("PATCH"));
        }

        /// <summary>
        /// Set up a webhook
        /// </summary>
        /// <param name="companyId">Unique identifier of the [company account](https://docs.adyen.com/account/account-structure#company-account).</param>
        /// <param name="createCompanyWebhookRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Webhook</returns>
        public Webhook SetUpWebhook(string companyId, CreateCompanyWebhookRequest createCompanyWebhookRequest, RequestOptions requestOptions = default)
        {
            return SetUpWebhookAsync(companyId, createCompanyWebhookRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set up a webhook
        /// </summary>
        /// <param name="companyId">Unique identifier of the [company account](https://docs.adyen.com/account/account-structure#company-account).</param>
        /// <param name="createCompanyWebhookRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Webhook</returns>
        public async Task<Webhook> SetUpWebhookAsync(string companyId, CreateCompanyWebhookRequest createCompanyWebhookRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/companies/{companyId}/webhooks";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Webhook>(createCompanyWebhookRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

        /// <summary>
        /// Generate an HMAC key
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>GenerateHmacKeyResponse</returns>
        public GenerateHmacKeyResponse GenerateHmacKey(string companyId, string webhookId, RequestOptions requestOptions = default)
        {
            return GenerateHmacKeyAsync(companyId, webhookId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Generate an HMAC key
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of GenerateHmacKeyResponse</returns>
        public async Task<GenerateHmacKeyResponse> GenerateHmacKeyAsync(string companyId, string webhookId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/companies/{companyId}/webhooks/{webhookId}/generateHmac";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<GenerateHmacKeyResponse>(null, requestOptions, new HttpMethod("POST"));
        }

        /// <summary>
        /// Test a webhook
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="testCompanyWebhookRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TestWebhookResponse</returns>
        public TestWebhookResponse TestWebhook(string companyId, string webhookId, TestCompanyWebhookRequest testCompanyWebhookRequest, RequestOptions requestOptions = default)
        {
            return TestWebhookAsync(companyId, webhookId, testCompanyWebhookRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Test a webhook
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="testCompanyWebhookRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TestWebhookResponse</returns>
        public async Task<TestWebhookResponse> TestWebhookAsync(string companyId, string webhookId, TestCompanyWebhookRequest testCompanyWebhookRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/companies/{companyId}/webhooks/{webhookId}/test";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<TestWebhookResponse>(testCompanyWebhookRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

    }
}
