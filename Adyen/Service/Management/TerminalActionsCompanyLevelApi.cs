/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TerminalActionsCompanyLevelApi : AbstractService
    {
        public TerminalActionsCompanyLevelApi(Client client) : base(client) {}
    
        /// <summary>
        /// Get a list of Android apps
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 20 items on a page.</description>
        ///     </item>
        /// </list></param>
        /// <returns>AndroidAppsResponse</returns>
        public AndroidAppsResponse GetCompaniesCompanyIdAndroidApps(string companyId, RequestOptions requestOptions = null)
        {
            return GetCompaniesCompanyIdAndroidAppsAsync(companyId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of Android apps
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 20 items on a page.</description>
        ///     </item>
        /// </list></param>
        /// <returns>Task of AndroidAppsResponse</returns>
        public async Task<AndroidAppsResponse> GetCompaniesCompanyIdAndroidAppsAsync(string companyId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/androidApps" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<AndroidAppsResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of Android certificates
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 20 items on a page.</description>
        ///     </item>
        /// </list></param>
        /// <returns>AndroidCertificatesResponse</returns>
        public AndroidCertificatesResponse GetCompaniesCompanyIdAndroidCertificates(string companyId, RequestOptions requestOptions = null)
        {
            return GetCompaniesCompanyIdAndroidCertificatesAsync(companyId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of Android certificates
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 20 items on a page.</description>
        ///     </item>
        /// </list></param>
        /// <returns>Task of AndroidCertificatesResponse</returns>
        public async Task<AndroidCertificatesResponse> GetCompaniesCompanyIdAndroidCertificatesAsync(string companyId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/androidCertificates" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<AndroidCertificatesResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of terminal actions
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 20 items on a page.</description>
        ///     </item>
        ///     <item>
        ///         <term>status</term>
        ///         <description>Returns terminal actions with the specified status.  Allowed values: **pending**, **successful**, **failed**, **cancelled**, **tryLater**.</description>
        ///     </item>
        ///     <item>
        ///         <term>type</term>
        ///         <description>Returns terminal actions of the specified type.  Allowed values: **InstallAndroidApp**, **UninstallAndroidApp**, **InstallAndroidCertificate**, **UninstallAndroidCertificate**.</description>
        ///     </item>
        /// </list></param>
        /// <returns>ListExternalTerminalActionsResponse</returns>
        public ListExternalTerminalActionsResponse GetCompaniesCompanyIdTerminalActions(string companyId, RequestOptions requestOptions = null)
        {
            return GetCompaniesCompanyIdTerminalActionsAsync(companyId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of terminal actions
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 20 items on a page.</description>
        ///     </item>
        ///     <item>
        ///         <term>status</term>
        ///         <description>Returns terminal actions with the specified status.  Allowed values: **pending**, **successful**, **failed**, **cancelled**, **tryLater**.</description>
        ///     </item>
        ///     <item>
        ///         <term>type</term>
        ///         <description>Returns terminal actions of the specified type.  Allowed values: **InstallAndroidApp**, **UninstallAndroidApp**, **InstallAndroidCertificate**, **UninstallAndroidCertificate**.</description>
        ///     </item>
        /// </list></param>
        /// <returns>Task of ListExternalTerminalActionsResponse</returns>
        public async Task<ListExternalTerminalActionsResponse> GetCompaniesCompanyIdTerminalActionsAsync(string companyId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/terminalActions" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<ListExternalTerminalActionsResponse>(jsonResult);
        }

        /// <summary>
        /// Get terminal action
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="actionId">The unique identifier of the terminal action.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ExternalTerminalAction</returns>
        public ExternalTerminalAction GetCompaniesCompanyIdTerminalActionsActionId(string companyId, string actionId, RequestOptions requestOptions = null)
        {
            return GetCompaniesCompanyIdTerminalActionsActionIdAsync(companyId, actionId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get terminal action
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="actionId">The unique identifier of the terminal action.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ExternalTerminalAction</returns>
        public async Task<ExternalTerminalAction> GetCompaniesCompanyIdTerminalActionsActionIdAsync(string companyId, string actionId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/terminalActions/{actionId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<ExternalTerminalAction>(jsonResult);
        }

    }
}
