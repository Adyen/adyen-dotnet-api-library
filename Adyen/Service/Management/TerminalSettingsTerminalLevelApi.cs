/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Adyen.Service.Resource;
using Adyen.Model.Management;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TerminalSettingsTerminalLevelApi : AbstractService
    {
        public TerminalSettingsTerminalLevelApi(Client client) : base(client) {}
    
        /// <summary>
        /// Get the terminal logo Returns the logo that is configured for the payment terminal identified in the path. The logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read * Management API—Terminal settings read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <returns>Logo</returns>
        public Logo GetTerminalsTerminalIdTerminalLogos(string terminalId)
        {
            return GetTerminalsTerminalIdTerminalLogosAsync(terminalId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the terminal logo Returns the logo that is configured for the payment terminal identified in the path. The logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read * Management API—Terminal settings read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <returns>Task of Logo</returns>
        public async Task<Logo> GetTerminalsTerminalIdTerminalLogosAsync(string terminalId)
        {
            var httpMethod = new HttpMethod("GET");
            string jsonRequest = null;
            var resource = new ManagementResource(this, $"/terminals/{terminalId}/terminalLogos");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<Logo>(jsonResult);
        }

        /// <summary>
        /// Get terminal settings Returns the settings that are configured for the payment terminal identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read * Management API—Terminal settings read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <returns>TerminalSettings</returns>
        public TerminalSettings GetTerminalsTerminalIdTerminalSettings(string terminalId)
        {
            return GetTerminalsTerminalIdTerminalSettingsAsync(terminalId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get terminal settings Returns the settings that are configured for the payment terminal identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read * Management API—Terminal settings read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <returns>Task of TerminalSettings</returns>
        public async Task<TerminalSettings> GetTerminalsTerminalIdTerminalSettingsAsync(string terminalId)
        {
            var httpMethod = new HttpMethod("GET");
            string jsonRequest = null;
            var resource = new ManagementResource(this, $"/terminals/{terminalId}/terminalSettings");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<TerminalSettings>(jsonResult);
        }

        /// <summary>
        /// Update the logo Updates the logo for the payment terminal identified in the path.  * To change the logo, specify the image file as a Base64-encoded string. * To restore the logo inherited from a higher level (store, merchant account, or company account), specify an empty logo value.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <param name="logo"> (optional)</param>
        /// <returns>Logo</returns>
        public Logo PatchTerminalsTerminalIdTerminalLogos(string terminalId, Logo logo)
        {
            return PatchTerminalsTerminalIdTerminalLogosAsync(terminalId, logo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the logo Updates the logo for the payment terminal identified in the path.  * To change the logo, specify the image file as a Base64-encoded string. * To restore the logo inherited from a higher level (store, merchant account, or company account), specify an empty logo value.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <param name="logo"> (optional)</param>
        /// <returns>Task of Logo</returns>
        public async Task<Logo> PatchTerminalsTerminalIdTerminalLogosAsync(string terminalId, Logo logo)
        {
            var httpMethod = new HttpMethod("PATCH");
            string jsonRequest = logo.ToJson();
            var resource = new ManagementResource(this, $"/terminals/{terminalId}/terminalLogos");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<Logo>(jsonResult);
        }

        /// <summary>
        /// Update terminal settings Updates the settings that are configured for the payment terminal identified in the path.  * To change a parameter value, include the full object that contains the parameter, even if you don't want to change all parameters in the object. * To restore a parameter value inherited from a higher level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter. * Objects that are not included in the request are not updated.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <param name="terminalSettings"> (optional)</param>
        /// <returns>TerminalSettings</returns>
        public TerminalSettings PatchTerminalsTerminalIdTerminalSettings(string terminalId, TerminalSettings terminalSettings)
        {
            return PatchTerminalsTerminalIdTerminalSettingsAsync(terminalId, terminalSettings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update terminal settings Updates the settings that are configured for the payment terminal identified in the path.  * To change a parameter value, include the full object that contains the parameter, even if you don't want to change all parameters in the object. * To restore a parameter value inherited from a higher level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter. * Objects that are not included in the request are not updated.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <param name="terminalSettings"> (optional)</param>
        /// <returns>Task of TerminalSettings</returns>
        public async Task<TerminalSettings> PatchTerminalsTerminalIdTerminalSettingsAsync(string terminalId, TerminalSettings terminalSettings)
        {
            var httpMethod = new HttpMethod("PATCH");
            string jsonRequest = terminalSettings.ToJson();
            var resource = new ManagementResource(this, $"/terminals/{terminalId}/terminalSettings");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<TerminalSettings>(jsonResult);
        }

    }
}
