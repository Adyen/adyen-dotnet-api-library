/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AccountStoreLevelApi : AbstractService
    {
        public AccountStoreLevelApi(Client client) : base(client) {}
    
        /// <summary>
        /// Get a list of stores
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 10 items on a page.</description>
        ///     </item>
        ///     <item>
        ///         <term>reference</term>
        ///         <description>The reference of the store.</description>
        ///     </item>
        /// </list></param>
        /// <returns>ListStoresResponse</returns>
        public ListStoresResponse GetMerchantsMerchantIdStores(string merchantId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/stores" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = resource.Request(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<ListStoresResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of stores
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 10 items on a page.</description>
        ///     </item>
        ///     <item>
        ///         <term>reference</term>
        ///         <description>The reference of the store.</description>
        ///     </item>
        /// </list></param>
        /// <returns>Task of ListStoresResponse</returns>
        public async Task<ListStoresResponse> GetMerchantsMerchantIdStoresAsync(string merchantId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/stores" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<ListStoresResponse>(jsonResult);
        }

        /// <summary>
        /// Get a store
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Store</returns>
        public Store GetMerchantsMerchantIdStoresStoreId(string merchantId, string storeId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/stores/{storeId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = resource.Request(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<Store>(jsonResult);
        }

        /// <summary>
        /// Get a store
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Store</returns>
        public async Task<Store> GetMerchantsMerchantIdStoresStoreIdAsync(string merchantId, string storeId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/stores/{storeId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<Store>(jsonResult);
        }

        /// <summary>
        /// Get a list of stores
        /// </summary>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 10 items on a page.</description>
        ///     </item>
        ///     <item>
        ///         <term>reference</term>
        ///         <description>The reference of the store.</description>
        ///     </item>
        ///     <item>
        ///         <term>merchantId</term>
        ///         <description>The unique identifier of the merchant account.</description>
        ///     </item>
        /// </list></param>
        /// <returns>ListStoresResponse</returns>
        public ListStoresResponse GetStores(RequestOptions requestOptions = null)
        {
            var endpoint = "/stores" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = resource.Request(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<ListStoresResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of stores
        /// </summary>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 10 items on a page.</description>
        ///     </item>
        ///     <item>
        ///         <term>reference</term>
        ///         <description>The reference of the store.</description>
        ///     </item>
        ///     <item>
        ///         <term>merchantId</term>
        ///         <description>The unique identifier of the merchant account.</description>
        ///     </item>
        /// </list></param>
        /// <returns>Task of ListStoresResponse</returns>
        public async Task<ListStoresResponse> GetStoresAsync(RequestOptions requestOptions = null)
        {
            var endpoint = "/stores" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<ListStoresResponse>(jsonResult);
        }

        /// <summary>
        /// Get a store
        /// </summary>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Store</returns>
        public Store GetStoresStoreId(string storeId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/stores/{storeId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = resource.Request(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<Store>(jsonResult);
        }

        /// <summary>
        /// Get a store
        /// </summary>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Store</returns>
        public async Task<Store> GetStoresStoreIdAsync(string storeId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/stores/{storeId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<Store>(jsonResult);
        }

        /// <summary>
        /// Update a store
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="updateStoreRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Store</returns>
        public Store PatchMerchantsMerchantIdStoresStoreId(string merchantId, string storeId, UpdateStoreRequest updateStoreRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/stores/{storeId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = resource.Request(updateStoreRequest.ToJson(), null, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<Store>(jsonResult);
        }

        /// <summary>
        /// Update a store
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="updateStoreRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Store</returns>
        public async Task<Store> PatchMerchantsMerchantIdStoresStoreIdAsync(string merchantId, string storeId, UpdateStoreRequest updateStoreRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/stores/{storeId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(updateStoreRequest.ToJson(), null, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<Store>(jsonResult);
        }

        /// <summary>
        /// Update a store
        /// </summary>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="updateStoreRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Store</returns>
        public Store PatchStoresStoreId(string storeId, UpdateStoreRequest updateStoreRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/stores/{storeId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = resource.Request(updateStoreRequest.ToJson(), null, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<Store>(jsonResult);
        }

        /// <summary>
        /// Update a store
        /// </summary>
        /// <param name="storeId">The unique identifier of the store.</param>
        /// <param name="updateStoreRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Store</returns>
        public async Task<Store> PatchStoresStoreIdAsync(string storeId, UpdateStoreRequest updateStoreRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/stores/{storeId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(updateStoreRequest.ToJson(), null, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<Store>(jsonResult);
        }

        /// <summary>
        /// Create a store
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="storeCreationRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Store</returns>
        public Store PostMerchantsMerchantIdStores(string merchantId, StoreCreationRequest storeCreationRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/stores";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = resource.Request(storeCreationRequest.ToJson(), null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<Store>(jsonResult);
        }

        /// <summary>
        /// Create a store
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="storeCreationRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Store</returns>
        public async Task<Store> PostMerchantsMerchantIdStoresAsync(string merchantId, StoreCreationRequest storeCreationRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/stores";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(storeCreationRequest.ToJson(), null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<Store>(jsonResult);
        }

        /// <summary>
        /// Create a store
        /// </summary>
        /// <param name="storeCreationWithMerchantCodeRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Store</returns>
        public Store PostStores(StoreCreationWithMerchantCodeRequest storeCreationWithMerchantCodeRequest, RequestOptions requestOptions = null)
        {
            var endpoint = "/stores";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = resource.Request(storeCreationWithMerchantCodeRequest.ToJson(), null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<Store>(jsonResult);
        }

        /// <summary>
        /// Create a store
        /// </summary>
        /// <param name="storeCreationWithMerchantCodeRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Store</returns>
        public async Task<Store> PostStoresAsync(StoreCreationWithMerchantCodeRequest storeCreationWithMerchantCodeRequest, RequestOptions requestOptions = null)
        {
            var endpoint = "/stores";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(storeCreationWithMerchantCodeRequest.ToJson(), null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<Store>(jsonResult);
        }

    }
}
