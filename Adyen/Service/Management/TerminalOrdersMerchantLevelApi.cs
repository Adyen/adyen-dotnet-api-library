/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Adyen.Service.Resource;
using Adyen.Model.Management;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TerminalOrdersMerchantLevelApi : AbstractService
    {
        public TerminalOrdersMerchantLevelApi(Client client) : base(client) {}
    
        /// <summary>
        /// Get a list of billing entities Returns the billing entities of the merchant account identified in the path. A billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="name">The name of the billing entity. (optional)</param>
        /// <returns>BillingEntitiesResponse</returns>
        public BillingEntitiesResponse GetMerchantsMerchantIdBillingEntities(string merchantId, string name = default(string))
        {
            return GetMerchantsMerchantIdBillingEntitiesAsync(merchantId, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of billing entities Returns the billing entities of the merchant account identified in the path. A billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="name">The name of the billing entity. (optional)</param>
        /// <returns>Task of BillingEntitiesResponse</returns>
        public async Task<BillingEntitiesResponse> GetMerchantsMerchantIdBillingEntitiesAsync(string merchantId, string name = default(string))
        {
            var httpMethod = new HttpMethod("GET");
            string jsonRequest = null;
            var resource = new ManagementResource(this, $"/merchants/{merchantId}/billingEntities");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<BillingEntitiesResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of shipping locations Returns the shipping locations for the merchant account identified in the path. A shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="name">The name of the shipping location. (optional)</param>
        /// <param name="offset">The number of locations to skip. (optional)</param>
        /// <param name="limit">The number of locations to return. (optional)</param>
        /// <returns>ShippingLocationsResponse</returns>
        public ShippingLocationsResponse GetMerchantsMerchantIdShippingLocations(string merchantId, string name = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            return GetMerchantsMerchantIdShippingLocationsAsync(merchantId, name, offset, limit).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of shipping locations Returns the shipping locations for the merchant account identified in the path. A shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="name">The name of the shipping location. (optional)</param>
        /// <param name="offset">The number of locations to skip. (optional)</param>
        /// <param name="limit">The number of locations to return. (optional)</param>
        /// <returns>Task of ShippingLocationsResponse</returns>
        public async Task<ShippingLocationsResponse> GetMerchantsMerchantIdShippingLocationsAsync(string merchantId, string name = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            var httpMethod = new HttpMethod("GET");
            string jsonRequest = null;
            var resource = new ManagementResource(this, $"/merchants/{merchantId}/shippingLocations");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<ShippingLocationsResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of terminal models Returns the payment terminal models that merchant account identified in the path has access to. The response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <returns>TerminalModelsResponse</returns>
        public TerminalModelsResponse GetMerchantsMerchantIdTerminalModels(string merchantId)
        {
            return GetMerchantsMerchantIdTerminalModelsAsync(merchantId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of terminal models Returns the payment terminal models that merchant account identified in the path has access to. The response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <returns>Task of TerminalModelsResponse</returns>
        public async Task<TerminalModelsResponse> GetMerchantsMerchantIdTerminalModelsAsync(string merchantId)
        {
            var httpMethod = new HttpMethod("GET");
            string jsonRequest = null;
            var resource = new ManagementResource(this, $"/merchants/{merchantId}/terminalModels");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<TerminalModelsResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of orders Returns a list of terminal products orders for the merchant account identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId"></param>
        /// <param name="customerOrderReference">Your purchase order number. (optional)</param>
        /// <param name="status">The order status. Possible values (not case-sensitive): Placed, Confirmed, Cancelled, Shipped, Delivered. (optional)</param>
        /// <param name="offset">The number of orders to skip. (optional)</param>
        /// <param name="limit">The number of orders to return. (optional)</param>
        /// <returns>TerminalOrdersResponse</returns>
        public TerminalOrdersResponse GetMerchantsMerchantIdTerminalOrders(string merchantId, string customerOrderReference = default(string), string status = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            return GetMerchantsMerchantIdTerminalOrdersAsync(merchantId, customerOrderReference, status, offset, limit).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of orders Returns a list of terminal products orders for the merchant account identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId"></param>
        /// <param name="customerOrderReference">Your purchase order number. (optional)</param>
        /// <param name="status">The order status. Possible values (not case-sensitive): Placed, Confirmed, Cancelled, Shipped, Delivered. (optional)</param>
        /// <param name="offset">The number of orders to skip. (optional)</param>
        /// <param name="limit">The number of orders to return. (optional)</param>
        /// <returns>Task of TerminalOrdersResponse</returns>
        public async Task<TerminalOrdersResponse> GetMerchantsMerchantIdTerminalOrdersAsync(string merchantId, string customerOrderReference = default(string), string status = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            var httpMethod = new HttpMethod("GET");
            string jsonRequest = null;
            var resource = new ManagementResource(this, $"/merchants/{merchantId}/terminalOrders");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<TerminalOrdersResponse>(jsonResult);
        }

        /// <summary>
        /// Get an order Returns the details of the terminal products order identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <returns>TerminalOrder</returns>
        public TerminalOrder GetMerchantsMerchantIdTerminalOrdersOrderId(string merchantId, string orderId)
        {
            return GetMerchantsMerchantIdTerminalOrdersOrderIdAsync(merchantId, orderId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an order Returns the details of the terminal products order identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <returns>Task of TerminalOrder</returns>
        public async Task<TerminalOrder> GetMerchantsMerchantIdTerminalOrdersOrderIdAsync(string merchantId, string orderId)
        {
            var httpMethod = new HttpMethod("GET");
            string jsonRequest = null;
            var resource = new ManagementResource(this, $"/merchants/{merchantId}/terminalOrders/{orderId}");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<TerminalOrder>(jsonResult);
        }

        /// <summary>
        /// Get a list of terminal products Returns a list of payment terminal packages and parts that the merchant account identified in the path has access to. To filter the list, use one or more of the query parameters. The `country` query parameter is required.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="country">The country to return products for, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US** (optional)</param>
        /// <param name="terminalModelId">The terminal model to return products for. Use the ID returned in the [GET &#x60;/terminalModels&#x60;](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/terminalModels) response. For example, **Verifone.M400** (optional)</param>
        /// <param name="offset">The number of products to skip. (optional)</param>
        /// <param name="limit">The number of products to return. (optional)</param>
        /// <returns>TerminalProductsResponse</returns>
        public TerminalProductsResponse GetMerchantsMerchantIdTerminalProducts(string merchantId, string country = default(string), string terminalModelId = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            return GetMerchantsMerchantIdTerminalProductsAsync(merchantId, country, terminalModelId, offset, limit).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of terminal products Returns a list of payment terminal packages and parts that the merchant account identified in the path has access to. To filter the list, use one or more of the query parameters. The `country` query parameter is required.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="country">The country to return products for, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US** (optional)</param>
        /// <param name="terminalModelId">The terminal model to return products for. Use the ID returned in the [GET &#x60;/terminalModels&#x60;](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/terminalModels) response. For example, **Verifone.M400** (optional)</param>
        /// <param name="offset">The number of products to skip. (optional)</param>
        /// <param name="limit">The number of products to return. (optional)</param>
        /// <returns>Task of TerminalProductsResponse</returns>
        public async Task<TerminalProductsResponse> GetMerchantsMerchantIdTerminalProductsAsync(string merchantId, string country = default(string), string terminalModelId = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            var httpMethod = new HttpMethod("GET");
            string jsonRequest = null;
            var resource = new ManagementResource(this, $"/merchants/{merchantId}/terminalProducts");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<TerminalProductsResponse>(jsonResult);
        }

        /// <summary>
        /// Update an order Updates the terminal products order identified in the path. Updating is only possible while the order has the status **Placed**.  The request body only needs to contain what you want to change.  However, to update the products in the `items` array, you must provice the entire array. For example, if the array has three items:  To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <param name="terminalOrderRequest"> (optional)</param>
        /// <returns>TerminalOrder</returns>
        public TerminalOrder PatchMerchantsMerchantIdTerminalOrdersOrderId(string merchantId, string orderId, TerminalOrderRequest terminalOrderRequest)
        {
            return PatchMerchantsMerchantIdTerminalOrdersOrderIdAsync(merchantId, orderId, terminalOrderRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update an order Updates the terminal products order identified in the path. Updating is only possible while the order has the status **Placed**.  The request body only needs to contain what you want to change.  However, to update the products in the `items` array, you must provice the entire array. For example, if the array has three items:  To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <param name="terminalOrderRequest"> (optional)</param>
        /// <returns>Task of TerminalOrder</returns>
        public async Task<TerminalOrder> PatchMerchantsMerchantIdTerminalOrdersOrderIdAsync(string merchantId, string orderId, TerminalOrderRequest terminalOrderRequest)
        {
            var httpMethod = new HttpMethod("PATCH");
            string jsonRequest = terminalOrderRequest.ToJson();
            var resource = new ManagementResource(this, $"/merchants/{merchantId}/terminalOrders/{orderId}");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<TerminalOrder>(jsonResult);
        }

        /// <summary>
        /// Create a shipping location Creates a shipping location for the merchant account identified in the path. A shipping location defines an address where orders can be shipped to.   To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="shippingLocation"> (optional)</param>
        /// <returns>ShippingLocation</returns>
        public ShippingLocation PostMerchantsMerchantIdShippingLocations(string merchantId, ShippingLocation shippingLocation)
        {
            return PostMerchantsMerchantIdShippingLocationsAsync(merchantId, shippingLocation).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a shipping location Creates a shipping location for the merchant account identified in the path. A shipping location defines an address where orders can be shipped to.   To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="shippingLocation"> (optional)</param>
        /// <returns>Task of ShippingLocation</returns>
        public async Task<ShippingLocation> PostMerchantsMerchantIdShippingLocationsAsync(string merchantId, ShippingLocation shippingLocation)
        {
            var httpMethod = new HttpMethod("POST");
            string jsonRequest = shippingLocation.ToJson();
            var resource = new ManagementResource(this, $"/merchants/{merchantId}/shippingLocations");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<ShippingLocation>(jsonResult);
        }

        /// <summary>
        /// Create an order Creates an order for payment terminal products for the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="terminalOrderRequest"> (optional)</param>
        /// <returns>TerminalOrder</returns>
        public TerminalOrder PostMerchantsMerchantIdTerminalOrders(string merchantId, TerminalOrderRequest terminalOrderRequest)
        {
            return PostMerchantsMerchantIdTerminalOrdersAsync(merchantId, terminalOrderRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create an order Creates an order for payment terminal products for the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="terminalOrderRequest"> (optional)</param>
        /// <returns>Task of TerminalOrder</returns>
        public async Task<TerminalOrder> PostMerchantsMerchantIdTerminalOrdersAsync(string merchantId, TerminalOrderRequest terminalOrderRequest)
        {
            var httpMethod = new HttpMethod("POST");
            string jsonRequest = terminalOrderRequest.ToJson();
            var resource = new ManagementResource(this, $"/merchants/{merchantId}/terminalOrders");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<TerminalOrder>(jsonResult);
        }

        /// <summary>
        /// Cancel an order Cancels the terminal products order identified in the path. Cancelling is only possible while the order has the status **Placed**. To cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <returns>TerminalOrder</returns>
        public TerminalOrder PostMerchantsMerchantIdTerminalOrdersOrderIdCancel(string merchantId, string orderId)
        {
            return PostMerchantsMerchantIdTerminalOrdersOrderIdCancelAsync(merchantId, orderId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Cancel an order Cancels the terminal products order identified in the path. Cancelling is only possible while the order has the status **Placed**. To cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <returns>Task of TerminalOrder</returns>
        public async Task<TerminalOrder> PostMerchantsMerchantIdTerminalOrdersOrderIdCancelAsync(string merchantId, string orderId)
        {
            var httpMethod = new HttpMethod("POST");
            string jsonRequest = null;
            var resource = new ManagementResource(this, $"/merchants/{merchantId}/terminalOrders/{orderId}/cancel");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<TerminalOrder>(jsonResult);
        }

    }
}
