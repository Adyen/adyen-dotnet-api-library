/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WebhooksMerchantLevelApi : AbstractService
    {
        public WebhooksMerchantLevelApi(Client client) : base(client) {}
    
        /// <summary>
        /// Remove a webhook
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="requestOptions">Additional request options.</param>
        public void DeleteMerchantsMerchantIdWebhooksWebhookId(string merchantId, string webhookId, RequestOptions requestOptions = null)
        {
            DeleteMerchantsMerchantIdWebhooksWebhookIdAsync(merchantId, webhookId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Remove a webhook
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="requestOptions">Additional request options.</param>
        public async Task DeleteMerchantsMerchantIdWebhooksWebhookIdAsync(string merchantId, string webhookId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/webhooks/{webhookId}";
            var resource = new ManagementResource(this, endpoint);
            await resource.RequestAsync(null, null, new HttpMethod("DELETE"));
        }

        /// <summary>
        /// List all webhooks
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 10 items on a page.</description>
        ///     </item>
        /// </list></param>
        /// <returns>ListWebhooksResponse</returns>
        public ListWebhooksResponse GetMerchantsMerchantIdWebhooks(string merchantId, RequestOptions requestOptions = null)
        {
            return GetMerchantsMerchantIdWebhooksAsync(merchantId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all webhooks
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 10 items on a page.</description>
        ///     </item>
        /// </list></param>
        /// <returns>Task of ListWebhooksResponse</returns>
        public async Task<ListWebhooksResponse> GetMerchantsMerchantIdWebhooksAsync(string merchantId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/webhooks" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<ListWebhooksResponse>(jsonResult);
        }

        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Webhook</returns>
        public Webhook GetMerchantsMerchantIdWebhooksWebhookId(string merchantId, string webhookId, RequestOptions requestOptions = null)
        {
            return GetMerchantsMerchantIdWebhooksWebhookIdAsync(merchantId, webhookId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Webhook</returns>
        public async Task<Webhook> GetMerchantsMerchantIdWebhooksWebhookIdAsync(string merchantId, string webhookId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/webhooks/{webhookId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<Webhook>(jsonResult);
        }

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="updateMerchantWebhookRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Webhook</returns>
        public Webhook PatchMerchantsMerchantIdWebhooksWebhookId(string merchantId, string webhookId, UpdateMerchantWebhookRequest updateMerchantWebhookRequest, RequestOptions requestOptions = null)
        {
            return PatchMerchantsMerchantIdWebhooksWebhookIdAsync(merchantId, webhookId, updateMerchantWebhookRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="updateMerchantWebhookRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Webhook</returns>
        public async Task<Webhook> PatchMerchantsMerchantIdWebhooksWebhookIdAsync(string merchantId, string webhookId, UpdateMerchantWebhookRequest updateMerchantWebhookRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/webhooks/{webhookId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(updateMerchantWebhookRequest.ToJson(), null, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<Webhook>(jsonResult);
        }

        /// <summary>
        /// Set up a webhook
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="createMerchantWebhookRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Webhook</returns>
        public Webhook PostMerchantsMerchantIdWebhooks(string merchantId, CreateMerchantWebhookRequest createMerchantWebhookRequest, RequestOptions requestOptions = null)
        {
            return PostMerchantsMerchantIdWebhooksAsync(merchantId, createMerchantWebhookRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set up a webhook
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="createMerchantWebhookRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Webhook</returns>
        public async Task<Webhook> PostMerchantsMerchantIdWebhooksAsync(string merchantId, CreateMerchantWebhookRequest createMerchantWebhookRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/webhooks";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(createMerchantWebhookRequest.ToJson(), null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<Webhook>(jsonResult);
        }

        /// <summary>
        /// Generate an HMAC key
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="webhookId"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>GenerateHmacKeyResponse</returns>
        public GenerateHmacKeyResponse PostMerchantsMerchantIdWebhooksWebhookIdGenerateHmac(string merchantId, string webhookId, RequestOptions requestOptions = null)
        {
            return PostMerchantsMerchantIdWebhooksWebhookIdGenerateHmacAsync(merchantId, webhookId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Generate an HMAC key
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="webhookId"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of GenerateHmacKeyResponse</returns>
        public async Task<GenerateHmacKeyResponse> PostMerchantsMerchantIdWebhooksWebhookIdGenerateHmacAsync(string merchantId, string webhookId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/webhooks/{webhookId}/generateHmac";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<GenerateHmacKeyResponse>(jsonResult);
        }

        /// <summary>
        /// Test a webhook
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="testWebhookRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TestWebhookResponse</returns>
        public TestWebhookResponse PostMerchantsMerchantIdWebhooksWebhookIdTest(string merchantId, string webhookId, TestWebhookRequest testWebhookRequest, RequestOptions requestOptions = null)
        {
            return PostMerchantsMerchantIdWebhooksWebhookIdTestAsync(merchantId, webhookId, testWebhookRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Test a webhook
        /// </summary>
        /// <param name="merchantId">The unique identifier of the merchant account.</param>
        /// <param name="webhookId">Unique identifier of the webhook configuration.</param>
        /// <param name="testWebhookRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TestWebhookResponse</returns>
        public async Task<TestWebhookResponse> PostMerchantsMerchantIdWebhooksWebhookIdTestAsync(string merchantId, string webhookId, TestWebhookRequest testWebhookRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/merchants/{merchantId}/webhooks/{webhookId}/test";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(testWebhookRequest.ToJson(), null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<TestWebhookResponse>(jsonResult);
        }

    }
}
