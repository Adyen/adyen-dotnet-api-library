/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AllowedOriginsCompanyLevelService : AbstractService
    {
        private readonly string _baseUrl;
        
        public AllowedOriginsCompanyLevelService(Client client) : base(client)
        {
            _baseUrl = client.Config.ManagementEndpoint + "/" + ClientConfig.ManagementVersion;
        }
    
        /// <summary>
        /// Delete an allowed origin
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="apiCredentialId">Unique identifier of the API credential.</param>
        /// <param name="originId">Unique identifier of the allowed origin.</param>
        /// <param name="requestOptions">Additional request options.</param>
        public void DeleteAllowedOrigin(string companyId, string apiCredentialId, string originId, RequestOptions requestOptions = default)
        {
            DeleteAllowedOriginAsync(companyId, apiCredentialId, originId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete an allowed origin
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="apiCredentialId">Unique identifier of the API credential.</param>
        /// <param name="originId">Unique identifier of the allowed origin.</param>
        /// <param name="requestOptions">Additional request options.</param>
        public async Task DeleteAllowedOriginAsync(string companyId, string apiCredentialId, string originId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/companies/{companyId}/apiCredentials/{apiCredentialId}/allowedOrigins/{originId}";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(null, requestOptions, new HttpMethod("DELETE"));
        }

        /// <summary>
        /// Get a list of allowed origins
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="apiCredentialId">Unique identifier of the API credential.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>AllowedOriginsResponse</returns>
        public AllowedOriginsResponse ListAllowedOrigins(string companyId, string apiCredentialId, RequestOptions requestOptions = default)
        {
            return ListAllowedOriginsAsync(companyId, apiCredentialId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of allowed origins
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="apiCredentialId">Unique identifier of the API credential.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of AllowedOriginsResponse</returns>
        public async Task<AllowedOriginsResponse> ListAllowedOriginsAsync(string companyId, string apiCredentialId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/companies/{companyId}/apiCredentials/{apiCredentialId}/allowedOrigins";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<AllowedOriginsResponse>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Get an allowed origin
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="apiCredentialId">Unique identifier of the API credential.</param>
        /// <param name="originId">Unique identifier of the allowed origin.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>AllowedOrigin</returns>
        public AllowedOrigin GetAllowedOrigin(string companyId, string apiCredentialId, string originId, RequestOptions requestOptions = default)
        {
            return GetAllowedOriginAsync(companyId, apiCredentialId, originId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an allowed origin
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="apiCredentialId">Unique identifier of the API credential.</param>
        /// <param name="originId">Unique identifier of the allowed origin.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of AllowedOrigin</returns>
        public async Task<AllowedOrigin> GetAllowedOriginAsync(string companyId, string apiCredentialId, string originId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/companies/{companyId}/apiCredentials/{apiCredentialId}/allowedOrigins/{originId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<AllowedOrigin>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Create an allowed origin
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="apiCredentialId">Unique identifier of the API credential.</param>
        /// <param name="allowedOrigin"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>AllowedOriginsResponse</returns>
        public AllowedOriginsResponse CreateAllowedOrigin(string companyId, string apiCredentialId, AllowedOrigin allowedOrigin, RequestOptions requestOptions = default)
        {
            return CreateAllowedOriginAsync(companyId, apiCredentialId, allowedOrigin, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create an allowed origin
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="apiCredentialId">Unique identifier of the API credential.</param>
        /// <param name="allowedOrigin"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of AllowedOriginsResponse</returns>
        public async Task<AllowedOriginsResponse> CreateAllowedOriginAsync(string companyId, string apiCredentialId, AllowedOrigin allowedOrigin, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/companies/{companyId}/apiCredentials/{apiCredentialId}/allowedOrigins";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<AllowedOriginsResponse>(allowedOrigin.ToJson(), requestOptions, new HttpMethod("POST"));
        }

    }
}
