/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UsersMerchantLevelService : AbstractService
    {
        private readonly string _baseUrl;
        
        public UsersMerchantLevelService(Client client) : base(client)
        {
            _baseUrl = client.Config.ManagementEndpoint + "/" + ClientConfig.ManagementVersion;
        }
    
        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <param name="merchantId">Unique identifier of the merchant.</param>
        /// <param name="pageNumber">The number of the page to fetch.</param>
        /// <param name="pageSize">The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page.</param>
        /// <param name="username">The partial or complete username to select all users that match.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ListMerchantUsersResponse</returns>
        public ListMerchantUsersResponse ListUsers(string merchantId, int? pageNumber = default, int? pageSize = default, string username = default, RequestOptions requestOptions = default)
        {
            return ListUsersAsync(merchantId, pageNumber, pageSize, username, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <param name="merchantId">Unique identifier of the merchant.</param>
        /// <param name="pageNumber">The number of the page to fetch.</param>
        /// <param name="pageSize">The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page.</param>
        /// <param name="username">The partial or complete username to select all users that match.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ListMerchantUsersResponse</returns>
        public async Task<ListMerchantUsersResponse> ListUsersAsync(string merchantId, int? pageNumber = default, int? pageSize = default, string username = default, RequestOptions requestOptions = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (pageNumber != null) queryParams.Add("pageNumber", pageNumber.ToString());
            if (pageSize != null) queryParams.Add("pageSize", pageSize.ToString());
            if (username != null) queryParams.Add("username", username);
            var endpoint = _baseUrl + $"/merchants/{merchantId}/users" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<ListMerchantUsersResponse>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Get user details
        /// </summary>
        /// <param name="merchantId">Unique identifier of the merchant.</param>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>User</returns>
        public User GetUserDetails(string merchantId, string userId, RequestOptions requestOptions = default)
        {
            return GetUserDetailsAsync(merchantId, userId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get user details
        /// </summary>
        /// <param name="merchantId">Unique identifier of the merchant.</param>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of User</returns>
        public async Task<User> GetUserDetailsAsync(string merchantId, string userId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/merchants/{merchantId}/users/{userId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<User>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Update a user
        /// </summary>
        /// <param name="merchantId">Unique identifier of the merchant.</param>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="updateMerchantUserRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>User</returns>
        public User UpdateUser(string merchantId, string userId, UpdateMerchantUserRequest updateMerchantUserRequest, RequestOptions requestOptions = default)
        {
            return UpdateUserAsync(merchantId, userId, updateMerchantUserRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a user
        /// </summary>
        /// <param name="merchantId">Unique identifier of the merchant.</param>
        /// <param name="userId">Unique identifier of the user.</param>
        /// <param name="updateMerchantUserRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of User</returns>
        public async Task<User> UpdateUserAsync(string merchantId, string userId, UpdateMerchantUserRequest updateMerchantUserRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/merchants/{merchantId}/users/{userId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<User>(updateMerchantUserRequest.ToJson(), requestOptions, new HttpMethod("PATCH"));
        }

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <param name="merchantId">Unique identifier of the merchant.</param>
        /// <param name="createMerchantUserRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>CreateUserResponse</returns>
        public CreateUserResponse CreateNewUser(string merchantId, CreateMerchantUserRequest createMerchantUserRequest, RequestOptions requestOptions = default)
        {
            return CreateNewUserAsync(merchantId, createMerchantUserRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <param name="merchantId">Unique identifier of the merchant.</param>
        /// <param name="createMerchantUserRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of CreateUserResponse</returns>
        public async Task<CreateUserResponse> CreateNewUserAsync(string merchantId, CreateMerchantUserRequest createMerchantUserRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/merchants/{merchantId}/users";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<CreateUserResponse>(createMerchantUserRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

    }
}
