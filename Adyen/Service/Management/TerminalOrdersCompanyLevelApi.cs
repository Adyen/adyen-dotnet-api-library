/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Adyen.Service.Resource;
using Adyen.Model.Management;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TerminalOrdersCompanyLevelApi : AbstractService
    {
        public TerminalOrdersCompanyLevelApi(Client client) : base(client) {}
    
        /// <summary>
        /// Get a list of billing entities Returns the billing entities of the company identified in the path and all merchant accounts belonging to the company. A billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="name">The name of the billing entity. (optional)</param>
        /// <returns>BillingEntitiesResponse</returns>
        public BillingEntitiesResponse GetCompaniesCompanyIdBillingEntities(string companyId, string name = default(string))
        {
            return GetCompaniesCompanyIdBillingEntitiesAsync(companyId, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of billing entities Returns the billing entities of the company identified in the path and all merchant accounts belonging to the company. A billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="name">The name of the billing entity. (optional)</param>
        /// <returns>Task of BillingEntitiesResponse</returns>
        public async Task<BillingEntitiesResponse> GetCompaniesCompanyIdBillingEntitiesAsync(string companyId, string name = default(string))
        {
            var endpoint = $"/companies/{companyId}/billingEntities";
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (name != null) queryParams.Add("name", name.ToString());
            var queryString = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={kvp.Value}"));
            if (!string.IsNullOrEmpty(queryString)) endpoint += "?" + queryString;

            string jsonRequest = null;
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(jsonRequest, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<BillingEntitiesResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of shipping locations Returns the shipping locations for the company identified in the path and all merchant accounts belonging to the company. A shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="name">The name of the shipping location. (optional)</param>
        /// <param name="offset">The number of locations to skip. (optional)</param>
        /// <param name="limit">The number of locations to return. (optional)</param>
        /// <returns>ShippingLocationsResponse</returns>
        public ShippingLocationsResponse GetCompaniesCompanyIdShippingLocations(string companyId, string name = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            return GetCompaniesCompanyIdShippingLocationsAsync(companyId, name, offset, limit).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of shipping locations Returns the shipping locations for the company identified in the path and all merchant accounts belonging to the company. A shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="name">The name of the shipping location. (optional)</param>
        /// <param name="offset">The number of locations to skip. (optional)</param>
        /// <param name="limit">The number of locations to return. (optional)</param>
        /// <returns>Task of ShippingLocationsResponse</returns>
        public async Task<ShippingLocationsResponse> GetCompaniesCompanyIdShippingLocationsAsync(string companyId, string name = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            var endpoint = $"/companies/{companyId}/shippingLocations";
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (name != null) queryParams.Add("name", name.ToString());
            if (offset != null) queryParams.Add("offset", offset.ToString());
            if (limit != null) queryParams.Add("limit", limit.ToString());
            var queryString = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={kvp.Value}"));
            if (!string.IsNullOrEmpty(queryString)) endpoint += "?" + queryString;

            string jsonRequest = null;
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(jsonRequest, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<ShippingLocationsResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of terminal models Returns a list of payment terminal models that the company identified in the path has access to. The response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <returns>TerminalModelsResponse</returns>
        public TerminalModelsResponse GetCompaniesCompanyIdTerminalModels(string companyId)
        {
            return GetCompaniesCompanyIdTerminalModelsAsync(companyId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of terminal models Returns a list of payment terminal models that the company identified in the path has access to. The response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <returns>Task of TerminalModelsResponse</returns>
        public async Task<TerminalModelsResponse> GetCompaniesCompanyIdTerminalModelsAsync(string companyId)
        {
            var endpoint = $"/companies/{companyId}/terminalModels";
            string jsonRequest = null;
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(jsonRequest, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<TerminalModelsResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of orders Returns a lists of terminal products orders for the company identified in the path. To filter the list, use one or more of the query parameters.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="customerOrderReference">Your purchase order number. (optional)</param>
        /// <param name="status">The order status. Possible values (not case-sensitive): Placed, Confirmed, Cancelled, Shipped, Delivered. (optional)</param>
        /// <param name="offset">The number of orders to skip. (optional)</param>
        /// <param name="limit">The number of orders to return. (optional)</param>
        /// <returns>TerminalOrdersResponse</returns>
        public TerminalOrdersResponse GetCompaniesCompanyIdTerminalOrders(string companyId, string customerOrderReference = default(string), string status = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            return GetCompaniesCompanyIdTerminalOrdersAsync(companyId, customerOrderReference, status, offset, limit).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of orders Returns a lists of terminal products orders for the company identified in the path. To filter the list, use one or more of the query parameters.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="customerOrderReference">Your purchase order number. (optional)</param>
        /// <param name="status">The order status. Possible values (not case-sensitive): Placed, Confirmed, Cancelled, Shipped, Delivered. (optional)</param>
        /// <param name="offset">The number of orders to skip. (optional)</param>
        /// <param name="limit">The number of orders to return. (optional)</param>
        /// <returns>Task of TerminalOrdersResponse</returns>
        public async Task<TerminalOrdersResponse> GetCompaniesCompanyIdTerminalOrdersAsync(string companyId, string customerOrderReference = default(string), string status = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            var endpoint = $"/companies/{companyId}/terminalOrders";
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (customerOrderReference != null) queryParams.Add("customerOrderReference", customerOrderReference.ToString());
            if (status != null) queryParams.Add("status", status.ToString());
            if (offset != null) queryParams.Add("offset", offset.ToString());
            if (limit != null) queryParams.Add("limit", limit.ToString());
            var queryString = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={kvp.Value}"));
            if (!string.IsNullOrEmpty(queryString)) endpoint += "?" + queryString;

            string jsonRequest = null;
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(jsonRequest, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<TerminalOrdersResponse>(jsonResult);
        }

        /// <summary>
        /// Get an order Returns the details of the terminal products order identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <returns>TerminalOrder</returns>
        public TerminalOrder GetCompaniesCompanyIdTerminalOrdersOrderId(string companyId, string orderId)
        {
            return GetCompaniesCompanyIdTerminalOrdersOrderIdAsync(companyId, orderId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an order Returns the details of the terminal products order identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <returns>Task of TerminalOrder</returns>
        public async Task<TerminalOrder> GetCompaniesCompanyIdTerminalOrdersOrderIdAsync(string companyId, string orderId)
        {
            var endpoint = $"/companies/{companyId}/terminalOrders/{orderId}";
            string jsonRequest = null;
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(jsonRequest, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<TerminalOrder>(jsonResult);
        }

        /// <summary>
        /// Get a list of terminal products Returns a list of payment terminal packages and parts that the company identified in the path has access to.  To filter the list, use one or more of the query parameters. The `country` query parameter is required.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="country">The country to return products for, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US** (optional)</param>
        /// <param name="terminalModelId">The terminal model to return products for. Use the ID returned in the [GET &#x60;/terminalModels&#x60;](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/terminalModels) response. For example, **Verifone.M400** (optional)</param>
        /// <param name="offset">The number of products to skip. (optional)</param>
        /// <param name="limit">The number of products to return. (optional)</param>
        /// <returns>TerminalProductsResponse</returns>
        public TerminalProductsResponse GetCompaniesCompanyIdTerminalProducts(string companyId, string country = default(string), string terminalModelId = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            return GetCompaniesCompanyIdTerminalProductsAsync(companyId, country, terminalModelId, offset, limit).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of terminal products Returns a list of payment terminal packages and parts that the company identified in the path has access to.  To filter the list, use one or more of the query parameters. The `country` query parameter is required.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="country">The country to return products for, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US** (optional)</param>
        /// <param name="terminalModelId">The terminal model to return products for. Use the ID returned in the [GET &#x60;/terminalModels&#x60;](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/terminalModels) response. For example, **Verifone.M400** (optional)</param>
        /// <param name="offset">The number of products to skip. (optional)</param>
        /// <param name="limit">The number of products to return. (optional)</param>
        /// <returns>Task of TerminalProductsResponse</returns>
        public async Task<TerminalProductsResponse> GetCompaniesCompanyIdTerminalProductsAsync(string companyId, string country = default(string), string terminalModelId = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            var endpoint = $"/companies/{companyId}/terminalProducts";
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (country != null) queryParams.Add("country", country.ToString());
            if (terminalModelId != null) queryParams.Add("terminalModelId", terminalModelId.ToString());
            if (offset != null) queryParams.Add("offset", offset.ToString());
            if (limit != null) queryParams.Add("limit", limit.ToString());
            var queryString = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={kvp.Value}"));
            if (!string.IsNullOrEmpty(queryString)) endpoint += "?" + queryString;

            string jsonRequest = null;
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(jsonRequest, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<TerminalProductsResponse>(jsonResult);
        }

        /// <summary>
        /// Update an order Updates the terminal products order identified in the path. Updating is only possible while the order has the status **Placed**.  The request body only needs to contain what you want to change.  However, to update the products in the `items` array, you must provide the entire array. For example, if the array has three items:  To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <param name="terminalOrderRequest"> (optional)</param>
        /// <returns>TerminalOrder</returns>
        public TerminalOrder PatchCompaniesCompanyIdTerminalOrdersOrderId(string companyId, string orderId, TerminalOrderRequest terminalOrderRequest)
        {
            return PatchCompaniesCompanyIdTerminalOrdersOrderIdAsync(companyId, orderId, terminalOrderRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update an order Updates the terminal products order identified in the path. Updating is only possible while the order has the status **Placed**.  The request body only needs to contain what you want to change.  However, to update the products in the `items` array, you must provide the entire array. For example, if the array has three items:  To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <param name="terminalOrderRequest"> (optional)</param>
        /// <returns>Task of TerminalOrder</returns>
        public async Task<TerminalOrder> PatchCompaniesCompanyIdTerminalOrdersOrderIdAsync(string companyId, string orderId, TerminalOrderRequest terminalOrderRequest)
        {
            var endpoint = $"/companies/{companyId}/terminalOrders/{orderId}";
            string jsonRequest = terminalOrderRequest.ToJson();
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(jsonRequest, null, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<TerminalOrder>(jsonResult);
        }

        /// <summary>
        /// Create a shipping location Creates a shipping location for the company identified in the path. A shipping location defines an address where orders can be delivered.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="shippingLocation"> (optional)</param>
        /// <returns>ShippingLocation</returns>
        public ShippingLocation PostCompaniesCompanyIdShippingLocations(string companyId, ShippingLocation shippingLocation)
        {
            return PostCompaniesCompanyIdShippingLocationsAsync(companyId, shippingLocation).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a shipping location Creates a shipping location for the company identified in the path. A shipping location defines an address where orders can be delivered.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="shippingLocation"> (optional)</param>
        /// <returns>Task of ShippingLocation</returns>
        public async Task<ShippingLocation> PostCompaniesCompanyIdShippingLocationsAsync(string companyId, ShippingLocation shippingLocation)
        {
            var endpoint = $"/companies/{companyId}/shippingLocations";
            string jsonRequest = shippingLocation.ToJson();
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(jsonRequest, null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<ShippingLocation>(jsonResult);
        }

        /// <summary>
        /// Create an order Creates an order for payment terminal products for the company identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="terminalOrderRequest"> (optional)</param>
        /// <returns>TerminalOrder</returns>
        public TerminalOrder PostCompaniesCompanyIdTerminalOrders(string companyId, TerminalOrderRequest terminalOrderRequest)
        {
            return PostCompaniesCompanyIdTerminalOrdersAsync(companyId, terminalOrderRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create an order Creates an order for payment terminal products for the company identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="terminalOrderRequest"> (optional)</param>
        /// <returns>Task of TerminalOrder</returns>
        public async Task<TerminalOrder> PostCompaniesCompanyIdTerminalOrdersAsync(string companyId, TerminalOrderRequest terminalOrderRequest)
        {
            var endpoint = $"/companies/{companyId}/terminalOrders";
            string jsonRequest = terminalOrderRequest.ToJson();
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(jsonRequest, null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<TerminalOrder>(jsonResult);
        }

        /// <summary>
        /// Cancel an order Cancels the terminal products order identified in the path. Cancelling is only possible while the order has the status **Placed**. To cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <returns>TerminalOrder</returns>
        public TerminalOrder PostCompaniesCompanyIdTerminalOrdersOrderIdCancel(string companyId, string orderId)
        {
            return PostCompaniesCompanyIdTerminalOrdersOrderIdCancelAsync(companyId, orderId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Cancel an order Cancels the terminal products order identified in the path. Cancelling is only possible while the order has the status **Placed**. To cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
        /// </summary>
        /// <exception cref="Adyen.Service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <returns>Task of TerminalOrder</returns>
        public async Task<TerminalOrder> PostCompaniesCompanyIdTerminalOrdersOrderIdCancelAsync(string companyId, string orderId)
        {
            var endpoint = $"/companies/{companyId}/terminalOrders/{orderId}/cancel";
            string jsonRequest = null;
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(jsonRequest, null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<TerminalOrder>(jsonResult);
        }

    }
}
