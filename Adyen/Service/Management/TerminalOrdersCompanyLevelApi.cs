/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TerminalOrdersCompanyLevelApi : AbstractService
    {
        public TerminalOrdersCompanyLevelApi(Client client) : base(client) {}
    
        /// <summary>
        /// Get a list of billing entities
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>name</term>
        ///         <description>The name of the billing entity.</description>
        ///     </item>
        /// </list></param>
        /// <returns>BillingEntitiesResponse</returns>
        public BillingEntitiesResponse GetCompaniesCompanyIdBillingEntities(string companyId, RequestOptions requestOptions = null)
        {
            return GetCompaniesCompanyIdBillingEntitiesAsync(companyId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of billing entities
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>name</term>
        ///         <description>The name of the billing entity.</description>
        ///     </item>
        /// </list></param>
        /// <returns>Task of BillingEntitiesResponse</returns>
        public async Task<BillingEntitiesResponse> GetCompaniesCompanyIdBillingEntitiesAsync(string companyId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/billingEntities" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<BillingEntitiesResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of shipping locations
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>name</term>
        ///         <description>The name of the shipping location.</description>
        ///     </item>
        ///     <item>
        ///         <term>offset</term>
        ///         <description>The number of locations to skip.</description>
        ///     </item>
        ///     <item>
        ///         <term>limit</term>
        ///         <description>The number of locations to return.</description>
        ///     </item>
        /// </list></param>
        /// <returns>ShippingLocationsResponse</returns>
        public ShippingLocationsResponse GetCompaniesCompanyIdShippingLocations(string companyId, RequestOptions requestOptions = null)
        {
            return GetCompaniesCompanyIdShippingLocationsAsync(companyId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of shipping locations
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>name</term>
        ///         <description>The name of the shipping location.</description>
        ///     </item>
        ///     <item>
        ///         <term>offset</term>
        ///         <description>The number of locations to skip.</description>
        ///     </item>
        ///     <item>
        ///         <term>limit</term>
        ///         <description>The number of locations to return.</description>
        ///     </item>
        /// </list></param>
        /// <returns>Task of ShippingLocationsResponse</returns>
        public async Task<ShippingLocationsResponse> GetCompaniesCompanyIdShippingLocationsAsync(string companyId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/shippingLocations" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<ShippingLocationsResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of terminal models
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TerminalModelsResponse</returns>
        public TerminalModelsResponse GetCompaniesCompanyIdTerminalModels(string companyId, RequestOptions requestOptions = null)
        {
            return GetCompaniesCompanyIdTerminalModelsAsync(companyId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of terminal models
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TerminalModelsResponse</returns>
        public async Task<TerminalModelsResponse> GetCompaniesCompanyIdTerminalModelsAsync(string companyId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/terminalModels";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<TerminalModelsResponse>(jsonResult);
        }

        /// <summary>
        /// Get a list of orders
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>customerOrderReference</term>
        ///         <description>Your purchase order number.</description>
        ///     </item>
        ///     <item>
        ///         <term>status</term>
        ///         <description>The order status. Possible values (not case-sensitive): Placed, Confirmed, Cancelled, Shipped, Delivered.</description>
        ///     </item>
        ///     <item>
        ///         <term>offset</term>
        ///         <description>The number of orders to skip.</description>
        ///     </item>
        ///     <item>
        ///         <term>limit</term>
        ///         <description>The number of orders to return.</description>
        ///     </item>
        /// </list></param>
        /// <returns>TerminalOrdersResponse</returns>
        public TerminalOrdersResponse GetCompaniesCompanyIdTerminalOrders(string companyId, RequestOptions requestOptions = null)
        {
            return GetCompaniesCompanyIdTerminalOrdersAsync(companyId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of orders
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>customerOrderReference</term>
        ///         <description>Your purchase order number.</description>
        ///     </item>
        ///     <item>
        ///         <term>status</term>
        ///         <description>The order status. Possible values (not case-sensitive): Placed, Confirmed, Cancelled, Shipped, Delivered.</description>
        ///     </item>
        ///     <item>
        ///         <term>offset</term>
        ///         <description>The number of orders to skip.</description>
        ///     </item>
        ///     <item>
        ///         <term>limit</term>
        ///         <description>The number of orders to return.</description>
        ///     </item>
        /// </list></param>
        /// <returns>Task of TerminalOrdersResponse</returns>
        public async Task<TerminalOrdersResponse> GetCompaniesCompanyIdTerminalOrdersAsync(string companyId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/terminalOrders" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<TerminalOrdersResponse>(jsonResult);
        }

        /// <summary>
        /// Get an order
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TerminalOrder</returns>
        public TerminalOrder GetCompaniesCompanyIdTerminalOrdersOrderId(string companyId, string orderId, RequestOptions requestOptions = null)
        {
            return GetCompaniesCompanyIdTerminalOrdersOrderIdAsync(companyId, orderId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an order
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TerminalOrder</returns>
        public async Task<TerminalOrder> GetCompaniesCompanyIdTerminalOrdersOrderIdAsync(string companyId, string orderId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/terminalOrders/{orderId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<TerminalOrder>(jsonResult);
        }

        /// <summary>
        /// Get a list of terminal products
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>country</term>
        ///         <description>The country to return products for, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US**</description>
        ///     </item>
        ///     <item>
        ///         <term>terminalModelId</term>
        ///         <description>The terminal model to return products for. Use the ID returned in the [GET &#x60;/terminalModels&#x60;](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/terminalModels) response. For example, **Verifone.M400**</description>
        ///     </item>
        ///     <item>
        ///         <term>offset</term>
        ///         <description>The number of products to skip.</description>
        ///     </item>
        ///     <item>
        ///         <term>limit</term>
        ///         <description>The number of products to return.</description>
        ///     </item>
        /// </list></param>
        /// <returns>TerminalProductsResponse</returns>
        public TerminalProductsResponse GetCompaniesCompanyIdTerminalProducts(string companyId, RequestOptions requestOptions = null)
        {
            return GetCompaniesCompanyIdTerminalProductsAsync(companyId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of terminal products
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>country</term>
        ///         <description>The country to return products for, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US**</description>
        ///     </item>
        ///     <item>
        ///         <term>terminalModelId</term>
        ///         <description>The terminal model to return products for. Use the ID returned in the [GET &#x60;/terminalModels&#x60;](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/terminalModels) response. For example, **Verifone.M400**</description>
        ///     </item>
        ///     <item>
        ///         <term>offset</term>
        ///         <description>The number of products to skip.</description>
        ///     </item>
        ///     <item>
        ///         <term>limit</term>
        ///         <description>The number of products to return.</description>
        ///     </item>
        /// </list></param>
        /// <returns>Task of TerminalProductsResponse</returns>
        public async Task<TerminalProductsResponse> GetCompaniesCompanyIdTerminalProductsAsync(string companyId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/terminalProducts" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<TerminalProductsResponse>(jsonResult);
        }

        /// <summary>
        /// Update an order
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <param name="terminalOrderRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TerminalOrder</returns>
        public TerminalOrder PatchCompaniesCompanyIdTerminalOrdersOrderId(string companyId, string orderId, TerminalOrderRequest terminalOrderRequest, RequestOptions requestOptions = null)
        {
            return PatchCompaniesCompanyIdTerminalOrdersOrderIdAsync(companyId, orderId, terminalOrderRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update an order
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <param name="terminalOrderRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TerminalOrder</returns>
        public async Task<TerminalOrder> PatchCompaniesCompanyIdTerminalOrdersOrderIdAsync(string companyId, string orderId, TerminalOrderRequest terminalOrderRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/terminalOrders/{orderId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(terminalOrderRequest.ToJson(), null, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<TerminalOrder>(jsonResult);
        }

        /// <summary>
        /// Create a shipping location
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="shippingLocation"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ShippingLocation</returns>
        public ShippingLocation PostCompaniesCompanyIdShippingLocations(string companyId, ShippingLocation shippingLocation, RequestOptions requestOptions = null)
        {
            return PostCompaniesCompanyIdShippingLocationsAsync(companyId, shippingLocation, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a shipping location
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="shippingLocation"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ShippingLocation</returns>
        public async Task<ShippingLocation> PostCompaniesCompanyIdShippingLocationsAsync(string companyId, ShippingLocation shippingLocation, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/shippingLocations";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(shippingLocation.ToJson(), null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<ShippingLocation>(jsonResult);
        }

        /// <summary>
        /// Create an order
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="terminalOrderRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TerminalOrder</returns>
        public TerminalOrder PostCompaniesCompanyIdTerminalOrders(string companyId, TerminalOrderRequest terminalOrderRequest, RequestOptions requestOptions = null)
        {
            return PostCompaniesCompanyIdTerminalOrdersAsync(companyId, terminalOrderRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create an order
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="terminalOrderRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TerminalOrder</returns>
        public async Task<TerminalOrder> PostCompaniesCompanyIdTerminalOrdersAsync(string companyId, TerminalOrderRequest terminalOrderRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/terminalOrders";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(terminalOrderRequest.ToJson(), null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<TerminalOrder>(jsonResult);
        }

        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TerminalOrder</returns>
        public TerminalOrder PostCompaniesCompanyIdTerminalOrdersOrderIdCancel(string companyId, string orderId, RequestOptions requestOptions = null)
        {
            return PostCompaniesCompanyIdTerminalOrdersOrderIdCancelAsync(companyId, orderId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TerminalOrder</returns>
        public async Task<TerminalOrder> PostCompaniesCompanyIdTerminalOrdersOrderIdCancelAsync(string companyId, string orderId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/terminalOrders/{orderId}/cancel";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<TerminalOrder>(jsonResult);
        }

    }
}
