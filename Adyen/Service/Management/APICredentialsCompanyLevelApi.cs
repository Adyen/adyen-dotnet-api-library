/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class APICredentialsCompanyLevelApi : AbstractService
    {
        public APICredentialsCompanyLevelApi(Client client) : base(client) {}
    
        /// <summary>
        /// Get a list of API credentials
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 10 items on a page.</description>
        ///     </item>
        /// </list></param>
        /// <returns>ListCompanyApiCredentialsResponse</returns>
        public ListCompanyApiCredentialsResponse GetCompaniesCompanyIdApiCredentials(string companyId, RequestOptions requestOptions = null)
        {
            return GetCompaniesCompanyIdApiCredentialsAsync(companyId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of API credentials
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="requestOptions">Additional request options. Query parameters:
        /// <list type="table">
        ///     <listheader>
        ///         <term>parameter</term>
        ///         <description>description</description>
        ///     </listheader>
        ///     <item>
        ///         <term>pageNumber</term>
        ///         <description>The number of the page to fetch.</description>
        ///     </item>
        ///     <item>
        ///         <term>pageSize</term>
        ///         <description>The number of items to have on a page, maximum 100. The default is 10 items on a page.</description>
        ///     </item>
        /// </list></param>
        /// <returns>Task of ListCompanyApiCredentialsResponse</returns>
        public async Task<ListCompanyApiCredentialsResponse> GetCompaniesCompanyIdApiCredentialsAsync(string companyId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/apiCredentials" + ToQueryString(requestOptions?.QueryParameters);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<ListCompanyApiCredentialsResponse>(jsonResult);
        }

        /// <summary>
        /// Get an API credential
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="apiCredentialId">Unique identifier of the API credential.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>CompanyApiCredential</returns>
        public CompanyApiCredential GetCompaniesCompanyIdApiCredentialsApiCredentialId(string companyId, string apiCredentialId, RequestOptions requestOptions = null)
        {
            return GetCompaniesCompanyIdApiCredentialsApiCredentialIdAsync(companyId, apiCredentialId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an API credential
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="apiCredentialId">Unique identifier of the API credential.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of CompanyApiCredential</returns>
        public async Task<CompanyApiCredential> GetCompaniesCompanyIdApiCredentialsApiCredentialIdAsync(string companyId, string apiCredentialId, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/apiCredentials/{apiCredentialId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, null, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<CompanyApiCredential>(jsonResult);
        }

        /// <summary>
        /// Update an API credential.
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="apiCredentialId">Unique identifier of the API credential.</param>
        /// <param name="updateCompanyApiCredentialRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>CompanyApiCredential</returns>
        public CompanyApiCredential PatchCompaniesCompanyIdApiCredentialsApiCredentialId(string companyId, string apiCredentialId, UpdateCompanyApiCredentialRequest updateCompanyApiCredentialRequest, RequestOptions requestOptions = null)
        {
            return PatchCompaniesCompanyIdApiCredentialsApiCredentialIdAsync(companyId, apiCredentialId, updateCompanyApiCredentialRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update an API credential.
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="apiCredentialId">Unique identifier of the API credential.</param>
        /// <param name="updateCompanyApiCredentialRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of CompanyApiCredential</returns>
        public async Task<CompanyApiCredential> PatchCompaniesCompanyIdApiCredentialsApiCredentialIdAsync(string companyId, string apiCredentialId, UpdateCompanyApiCredentialRequest updateCompanyApiCredentialRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/apiCredentials/{apiCredentialId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(updateCompanyApiCredentialRequest.ToJson(), null, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<CompanyApiCredential>(jsonResult);
        }

        /// <summary>
        /// Create an API credential.
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="createCompanyApiCredentialRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>CreateCompanyApiCredentialResponse</returns>
        public CreateCompanyApiCredentialResponse PostCompaniesCompanyIdApiCredentials(string companyId, CreateCompanyApiCredentialRequest createCompanyApiCredentialRequest, RequestOptions requestOptions = null)
        {
            return PostCompaniesCompanyIdApiCredentialsAsync(companyId, createCompanyApiCredentialRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create an API credential.
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="createCompanyApiCredentialRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of CreateCompanyApiCredentialResponse</returns>
        public async Task<CreateCompanyApiCredentialResponse> PostCompaniesCompanyIdApiCredentialsAsync(string companyId, CreateCompanyApiCredentialRequest createCompanyApiCredentialRequest, RequestOptions requestOptions = null)
        {
            var endpoint = $"/companies/{companyId}/apiCredentials";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(createCompanyApiCredentialRequest.ToJson(), null, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<CreateCompanyApiCredentialResponse>(jsonResult);
        }

    }
}
