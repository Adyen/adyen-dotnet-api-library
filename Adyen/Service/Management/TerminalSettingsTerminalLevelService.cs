/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.Management;

namespace Adyen.Service.Management
{
    /// <summary>
    /// TerminalSettingsTerminalLevelService Interface
    /// </summary>
    public interface ITerminalSettingsTerminalLevelService
    {
        /// <summary>
        /// Get the terminal logo
        /// </summary>
        /// <param name="terminalId"><see cref="string"/> - The unique identifier of the payment terminal.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="Logo"/>.</returns>
        Model.Management.Logo GetTerminalLogo(string terminalId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get the terminal logo
        /// </summary>
        /// <param name="terminalId"><see cref="string"/> - The unique identifier of the payment terminal.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="Logo"/>.</returns>
        Task<Model.Management.Logo> GetTerminalLogoAsync(string terminalId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get terminal settings
        /// </summary>
        /// <param name="terminalId"><see cref="string"/> - The unique identifier of the payment terminal.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TerminalSettings"/>.</returns>
        Model.Management.TerminalSettings GetTerminalSettings(string terminalId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get terminal settings
        /// </summary>
        /// <param name="terminalId"><see cref="string"/> - The unique identifier of the payment terminal.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TerminalSettings"/>.</returns>
        Task<Model.Management.TerminalSettings> GetTerminalSettingsAsync(string terminalId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update the logo
        /// </summary>
        /// <param name="terminalId"><see cref="string"/> - The unique identifier of the payment terminal.</param>
        /// <param name="logo"><see cref="Logo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="Logo"/>.</returns>
        Model.Management.Logo UpdateLogo(string terminalId, Logo logo = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update the logo
        /// </summary>
        /// <param name="terminalId"><see cref="string"/> - The unique identifier of the payment terminal.</param>
        /// <param name="logo"><see cref="Logo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="Logo"/>.</returns>
        Task<Model.Management.Logo> UpdateLogoAsync(string terminalId, Logo logo = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update terminal settings
        /// </summary>
        /// <param name="terminalId"><see cref="string"/> - The unique identifier of the payment terminal.</param>
        /// <param name="terminalSettings"><see cref="TerminalSettings"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TerminalSettings"/>.</returns>
        Model.Management.TerminalSettings UpdateTerminalSettings(string terminalId, TerminalSettings terminalSettings = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update terminal settings
        /// </summary>
        /// <param name="terminalId"><see cref="string"/> - The unique identifier of the payment terminal.</param>
        /// <param name="terminalSettings"><see cref="TerminalSettings"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TerminalSettings"/>.</returns>
        Task<Model.Management.TerminalSettings> UpdateTerminalSettingsAsync(string terminalId, TerminalSettings terminalSettings = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the TerminalSettingsTerminalLevelService API endpoints
    /// </summary>
    public class TerminalSettingsTerminalLevelService : AbstractService, ITerminalSettingsTerminalLevelService
    {
        private readonly string _baseUrl;
        
        public TerminalSettingsTerminalLevelService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://management-test.adyen.com/v3");
        }
        
        public Model.Management.Logo GetTerminalLogo(string terminalId, RequestOptions requestOptions = default)
        {
            return GetTerminalLogoAsync(terminalId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Management.Logo> GetTerminalLogoAsync(string terminalId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/terminals/{terminalId}/terminalLogos";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Management.Logo>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Management.TerminalSettings GetTerminalSettings(string terminalId, RequestOptions requestOptions = default)
        {
            return GetTerminalSettingsAsync(terminalId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Management.TerminalSettings> GetTerminalSettingsAsync(string terminalId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/terminals/{terminalId}/terminalSettings";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Management.TerminalSettings>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Management.Logo UpdateLogo(string terminalId, Logo logo = default, RequestOptions requestOptions = default)
        {
            return UpdateLogoAsync(terminalId, logo, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Management.Logo> UpdateLogoAsync(string terminalId, Logo logo = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/terminals/{terminalId}/terminalLogos";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Management.Logo>(logo.ToJson(), requestOptions, new HttpMethod("PATCH"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Management.TerminalSettings UpdateTerminalSettings(string terminalId, TerminalSettings terminalSettings = default, RequestOptions requestOptions = default)
        {
            return UpdateTerminalSettingsAsync(terminalId, terminalSettings, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Management.TerminalSettings> UpdateTerminalSettingsAsync(string terminalId, TerminalSettings terminalSettings = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/terminals/{terminalId}/terminalSettings";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Management.TerminalSettings>(terminalSettings.ToJson(), requestOptions, new HttpMethod("PATCH"), cancellationToken).ConfigureAwait(false);
        }
    }
}