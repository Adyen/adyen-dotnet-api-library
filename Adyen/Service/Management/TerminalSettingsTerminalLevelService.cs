/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TerminalSettingsTerminalLevelService : AbstractService
    {
        private readonly string _baseUrl;
        
        public TerminalSettingsTerminalLevelService(Client client) : base(client)
        {
            _baseUrl = client.Config.ManagementEndpoint + "/" + ClientConfig.ManagementVersion;
        }
    
        /// <summary>
        /// Get the terminal logo
        /// </summary>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Logo</returns>
        public Logo GetTerminalLogo(string terminalId, RequestOptions requestOptions = default)
        {
            return GetTerminalLogoAsync(terminalId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the terminal logo
        /// </summary>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Logo</returns>
        public async Task<Logo> GetTerminalLogoAsync(string terminalId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/terminals/{terminalId}/terminalLogos";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Logo>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Get terminal settings
        /// </summary>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TerminalSettings</returns>
        public TerminalSettings GetTerminalSettings(string terminalId, RequestOptions requestOptions = default)
        {
            return GetTerminalSettingsAsync(terminalId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get terminal settings
        /// </summary>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TerminalSettings</returns>
        public async Task<TerminalSettings> GetTerminalSettingsAsync(string terminalId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/terminals/{terminalId}/terminalSettings";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<TerminalSettings>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Update the logo
        /// </summary>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <param name="logo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Logo</returns>
        public Logo UpdateLogo(string terminalId, Logo logo, RequestOptions requestOptions = default)
        {
            return UpdateLogoAsync(terminalId, logo, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the logo
        /// </summary>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <param name="logo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Logo</returns>
        public async Task<Logo> UpdateLogoAsync(string terminalId, Logo logo, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/terminals/{terminalId}/terminalLogos";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Logo>(logo.ToJson(), requestOptions, new HttpMethod("PATCH"));
        }

        /// <summary>
        /// Update terminal settings
        /// </summary>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <param name="terminalSettings"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TerminalSettings</returns>
        public TerminalSettings UpdateTerminalSettings(string terminalId, TerminalSettings terminalSettings, RequestOptions requestOptions = default)
        {
            return UpdateTerminalSettingsAsync(terminalId, terminalSettings, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update terminal settings
        /// </summary>
        /// <param name="terminalId">The unique identifier of the payment terminal.</param>
        /// <param name="terminalSettings"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TerminalSettings</returns>
        public async Task<TerminalSettings> UpdateTerminalSettingsAsync(string terminalId, TerminalSettings terminalSettings, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/terminals/{terminalId}/terminalSettings";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<TerminalSettings>(terminalSettings.ToJson(), requestOptions, new HttpMethod("PATCH"));
        }

    }
}
