/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.Management;
using Newtonsoft.Json;

namespace Adyen.Service.Management
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UsersCompanyLevelApi : AbstractService
    {
        public UsersCompanyLevelApi(Client client) : base(client) {}
    
        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="pageNumber">The number of the page to return.</param>
        /// <param name="pageSize">The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>ListCompanyUsersResponse</returns>
        public ListCompanyUsersResponse GetCompaniesCompanyIdUsers(string companyId, int? pageNumber = default, int? pageSize = default, RequestOptions requestOptions = default)
        {
            return GetCompaniesCompanyIdUsersAsync(companyId, pageNumber, pageSize, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="pageNumber">The number of the page to return.</param>
        /// <param name="pageSize">The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of ListCompanyUsersResponse</returns>
        public async Task<ListCompanyUsersResponse> GetCompaniesCompanyIdUsersAsync(string companyId, int? pageNumber = default, int? pageSize = default, RequestOptions requestOptions = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (pageNumber != null) queryParams.Add("pageNumber", pageNumber.ToString());
            if (pageSize != null) queryParams.Add("pageSize", pageSize.ToString());
            var endpoint = $"/companies/{companyId}/users" + ToQueryString(queryParams);
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<ListCompanyUsersResponse>(jsonResult);
        }

        /// <summary>
        /// Get user details
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="userId">The unique identifier of the user.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>CompanyUser</returns>
        public CompanyUser GetCompaniesCompanyIdUsersUserId(string companyId, string userId, RequestOptions requestOptions = default)
        {
            return GetCompaniesCompanyIdUsersUserIdAsync(companyId, userId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get user details
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="userId">The unique identifier of the user.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of CompanyUser</returns>
        public async Task<CompanyUser> GetCompaniesCompanyIdUsersUserIdAsync(string companyId, string userId, RequestOptions requestOptions = default)
        {
            var endpoint = $"/companies/{companyId}/users/{userId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<CompanyUser>(jsonResult);
        }

        /// <summary>
        /// Update user details
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="userId">The unique identifier of the user.</param>
        /// <param name="updateCompanyUserRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>CompanyUser</returns>
        public CompanyUser PatchCompaniesCompanyIdUsersUserId(string companyId, string userId, UpdateCompanyUserRequest updateCompanyUserRequest, RequestOptions requestOptions = default)
        {
            return PatchCompaniesCompanyIdUsersUserIdAsync(companyId, userId, updateCompanyUserRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update user details
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="userId">The unique identifier of the user.</param>
        /// <param name="updateCompanyUserRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of CompanyUser</returns>
        public async Task<CompanyUser> PatchCompaniesCompanyIdUsersUserIdAsync(string companyId, string userId, UpdateCompanyUserRequest updateCompanyUserRequest, RequestOptions requestOptions = default)
        {
            var endpoint = $"/companies/{companyId}/users/{userId}";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(updateCompanyUserRequest.ToJson(), requestOptions, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<CompanyUser>(jsonResult);
        }

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="createCompanyUserRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>CreateCompanyUserResponse</returns>
        public CreateCompanyUserResponse PostCompaniesCompanyIdUsers(string companyId, CreateCompanyUserRequest createCompanyUserRequest, RequestOptions requestOptions = default)
        {
            return PostCompaniesCompanyIdUsersAsync(companyId, createCompanyUserRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account.</param>
        /// <param name="createCompanyUserRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of CreateCompanyUserResponse</returns>
        public async Task<CreateCompanyUserResponse> PostCompaniesCompanyIdUsersAsync(string companyId, CreateCompanyUserRequest createCompanyUserRequest, RequestOptions requestOptions = default)
        {
            var endpoint = $"/companies/{companyId}/users";
            var resource = new ManagementResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(createCompanyUserRequest.ToJson(), requestOptions, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<CreateCompanyUserResponse>(jsonResult);
        }

    }
}
