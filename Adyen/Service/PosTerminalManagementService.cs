/*
* POS Terminal Management API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.PosTerminalManagement;

namespace Adyen.Service
{
    /// <summary>
    /// PosTerminalManagementService Interface
    /// </summary>
    public interface IPosTerminalManagementService
    {
        /// <summary>
        /// Assign terminals
        /// </summary>
        /// <param name="assignTerminalsRequest"><see cref="AssignTerminalsRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="AssignTerminalsResponse"/>.</returns>
        Model.PosTerminalManagement.AssignTerminalsResponse AssignTerminals(AssignTerminalsRequest assignTerminalsRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Assign terminals
        /// </summary>
        /// <param name="assignTerminalsRequest"><see cref="AssignTerminalsRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="AssignTerminalsResponse"/>.</returns>
        Task<Model.PosTerminalManagement.AssignTerminalsResponse> AssignTerminalsAsync(AssignTerminalsRequest assignTerminalsRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get the account or store of a terminal
        /// </summary>
        /// <param name="findTerminalRequest"><see cref="FindTerminalRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="FindTerminalResponse"/>.</returns>
        Model.PosTerminalManagement.FindTerminalResponse FindTerminal(FindTerminalRequest findTerminalRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get the account or store of a terminal
        /// </summary>
        /// <param name="findTerminalRequest"><see cref="FindTerminalRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="FindTerminalResponse"/>.</returns>
        Task<Model.PosTerminalManagement.FindTerminalResponse> FindTerminalAsync(FindTerminalRequest findTerminalRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get the stores of an account
        /// </summary>
        /// <param name="getStoresUnderAccountRequest"><see cref="GetStoresUnderAccountRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GetStoresUnderAccountResponse"/>.</returns>
        Model.PosTerminalManagement.GetStoresUnderAccountResponse GetStoresUnderAccount(GetStoresUnderAccountRequest getStoresUnderAccountRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get the stores of an account
        /// </summary>
        /// <param name="getStoresUnderAccountRequest"><see cref="GetStoresUnderAccountRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GetStoresUnderAccountResponse"/>.</returns>
        Task<Model.PosTerminalManagement.GetStoresUnderAccountResponse> GetStoresUnderAccountAsync(GetStoresUnderAccountRequest getStoresUnderAccountRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get the details of a terminal
        /// </summary>
        /// <param name="getTerminalDetailsRequest"><see cref="GetTerminalDetailsRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GetTerminalDetailsResponse"/>.</returns>
        Model.PosTerminalManagement.GetTerminalDetailsResponse GetTerminalDetails(GetTerminalDetailsRequest getTerminalDetailsRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get the details of a terminal
        /// </summary>
        /// <param name="getTerminalDetailsRequest"><see cref="GetTerminalDetailsRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GetTerminalDetailsResponse"/>.</returns>
        Task<Model.PosTerminalManagement.GetTerminalDetailsResponse> GetTerminalDetailsAsync(GetTerminalDetailsRequest getTerminalDetailsRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get the list of terminals
        /// </summary>
        /// <param name="getTerminalsUnderAccountRequest"><see cref="GetTerminalsUnderAccountRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GetTerminalsUnderAccountResponse"/>.</returns>
        Model.PosTerminalManagement.GetTerminalsUnderAccountResponse GetTerminalsUnderAccount(GetTerminalsUnderAccountRequest getTerminalsUnderAccountRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get the list of terminals
        /// </summary>
        /// <param name="getTerminalsUnderAccountRequest"><see cref="GetTerminalsUnderAccountRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GetTerminalsUnderAccountResponse"/>.</returns>
        Task<Model.PosTerminalManagement.GetTerminalsUnderAccountResponse> GetTerminalsUnderAccountAsync(GetTerminalsUnderAccountRequest getTerminalsUnderAccountRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the PosTerminalManagementService API endpoints
    /// </summary>
    public class PosTerminalManagementService : AbstractService, IPosTerminalManagementService
    {
        private readonly string _baseUrl;
        
        public PosTerminalManagementService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://postfmapi-test.adyen.com/postfmapi/terminal/v1");
        }
        
        public Model.PosTerminalManagement.AssignTerminalsResponse AssignTerminals(AssignTerminalsRequest assignTerminalsRequest = default, RequestOptions requestOptions = default)
        {
            return AssignTerminalsAsync(assignTerminalsRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PosTerminalManagement.AssignTerminalsResponse> AssignTerminalsAsync(AssignTerminalsRequest assignTerminalsRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/assignTerminals";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PosTerminalManagement.AssignTerminalsResponse>(assignTerminalsRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PosTerminalManagement.FindTerminalResponse FindTerminal(FindTerminalRequest findTerminalRequest = default, RequestOptions requestOptions = default)
        {
            return FindTerminalAsync(findTerminalRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PosTerminalManagement.FindTerminalResponse> FindTerminalAsync(FindTerminalRequest findTerminalRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/findTerminal";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PosTerminalManagement.FindTerminalResponse>(findTerminalRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PosTerminalManagement.GetStoresUnderAccountResponse GetStoresUnderAccount(GetStoresUnderAccountRequest getStoresUnderAccountRequest = default, RequestOptions requestOptions = default)
        {
            return GetStoresUnderAccountAsync(getStoresUnderAccountRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PosTerminalManagement.GetStoresUnderAccountResponse> GetStoresUnderAccountAsync(GetStoresUnderAccountRequest getStoresUnderAccountRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/getStoresUnderAccount";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PosTerminalManagement.GetStoresUnderAccountResponse>(getStoresUnderAccountRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PosTerminalManagement.GetTerminalDetailsResponse GetTerminalDetails(GetTerminalDetailsRequest getTerminalDetailsRequest = default, RequestOptions requestOptions = default)
        {
            return GetTerminalDetailsAsync(getTerminalDetailsRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PosTerminalManagement.GetTerminalDetailsResponse> GetTerminalDetailsAsync(GetTerminalDetailsRequest getTerminalDetailsRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/getTerminalDetails";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PosTerminalManagement.GetTerminalDetailsResponse>(getTerminalDetailsRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PosTerminalManagement.GetTerminalsUnderAccountResponse GetTerminalsUnderAccount(GetTerminalsUnderAccountRequest getTerminalsUnderAccountRequest = default, RequestOptions requestOptions = default)
        {
            return GetTerminalsUnderAccountAsync(getTerminalsUnderAccountRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PosTerminalManagement.GetTerminalsUnderAccountResponse> GetTerminalsUnderAccountAsync(GetTerminalsUnderAccountRequest getTerminalsUnderAccountRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/getTerminalsUnderAccount";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PosTerminalManagement.GetTerminalsUnderAccountResponse>(getTerminalsUnderAccountRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
    }
}