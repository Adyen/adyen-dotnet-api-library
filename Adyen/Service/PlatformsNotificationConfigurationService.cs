/*
* Notification Configuration API
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Model.PlatformsNotificationConfiguration;

namespace Adyen.Service
{
    /// <summary>
    /// DefaultService Interface
    /// </summary>
    public interface IPlatformsNotificationConfigurationService
    {
        /// <summary>
        /// Subscribe to notifications
        /// </summary>
        /// <param name="createNotificationConfigurationRequest"><see cref="CreateNotificationConfigurationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GetNotificationConfigurationResponse"/>.</returns>
        Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse CreateNotificationConfiguration(CreateNotificationConfigurationRequest createNotificationConfigurationRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Subscribe to notifications
        /// </summary>
        /// <param name="createNotificationConfigurationRequest"><see cref="CreateNotificationConfigurationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GetNotificationConfigurationResponse"/>.</returns>
        Task<Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse> CreateNotificationConfigurationAsync(CreateNotificationConfigurationRequest createNotificationConfigurationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete a notification subscription configuration
        /// </summary>
        /// <param name="deleteNotificationConfigurationRequest"><see cref="DeleteNotificationConfigurationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GenericResponse"/>.</returns>
        Model.PlatformsNotificationConfiguration.GenericResponse DeleteNotificationConfigurations(DeleteNotificationConfigurationRequest deleteNotificationConfigurationRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete a notification subscription configuration
        /// </summary>
        /// <param name="deleteNotificationConfigurationRequest"><see cref="DeleteNotificationConfigurationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GenericResponse"/>.</returns>
        Task<Model.PlatformsNotificationConfiguration.GenericResponse> DeleteNotificationConfigurationsAsync(DeleteNotificationConfigurationRequest deleteNotificationConfigurationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a notification subscription configuration
        /// </summary>
        /// <param name="getNotificationConfigurationRequest"><see cref="GetNotificationConfigurationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GetNotificationConfigurationResponse"/>.</returns>
        Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse GetNotificationConfiguration(GetNotificationConfigurationRequest getNotificationConfigurationRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a notification subscription configuration
        /// </summary>
        /// <param name="getNotificationConfigurationRequest"><see cref="GetNotificationConfigurationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GetNotificationConfigurationResponse"/>.</returns>
        Task<Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse> GetNotificationConfigurationAsync(GetNotificationConfigurationRequest getNotificationConfigurationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a list of notification subscription configurations
        /// </summary>
        /// <param name="body"><see cref="Object"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GetNotificationConfigurationListResponse"/>.</returns>
        Model.PlatformsNotificationConfiguration.GetNotificationConfigurationListResponse GetNotificationConfigurationList(RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a list of notification subscription configurations
        /// </summary>
        /// <param name="body"><see cref="Object"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GetNotificationConfigurationListResponse"/>.</returns>
        Task<Model.PlatformsNotificationConfiguration.GetNotificationConfigurationListResponse> GetNotificationConfigurationListAsync(RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Test a notification configuration
        /// </summary>
        /// <param name="testNotificationConfigurationRequest"><see cref="TestNotificationConfigurationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TestNotificationConfigurationResponse"/>.</returns>
        Model.PlatformsNotificationConfiguration.TestNotificationConfigurationResponse TestNotificationConfiguration(TestNotificationConfigurationRequest testNotificationConfigurationRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Test a notification configuration
        /// </summary>
        /// <param name="testNotificationConfigurationRequest"><see cref="TestNotificationConfigurationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TestNotificationConfigurationResponse"/>.</returns>
        Task<Model.PlatformsNotificationConfiguration.TestNotificationConfigurationResponse> TestNotificationConfigurationAsync(TestNotificationConfigurationRequest testNotificationConfigurationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update a notification subscription configuration
        /// </summary>
        /// <param name="updateNotificationConfigurationRequest"><see cref="UpdateNotificationConfigurationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GetNotificationConfigurationResponse"/>.</returns>
        Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse UpdateNotificationConfiguration(UpdateNotificationConfigurationRequest updateNotificationConfigurationRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update a notification subscription configuration
        /// </summary>
        /// <param name="updateNotificationConfigurationRequest"><see cref="UpdateNotificationConfigurationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GetNotificationConfigurationResponse"/>.</returns>
        Task<Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse> UpdateNotificationConfigurationAsync(UpdateNotificationConfigurationRequest updateNotificationConfigurationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the PlatformsNotificationConfigurationService API endpoints
    /// </summary>
    public class PlatformsNotificationConfigurationService : AbstractService, IPlatformsNotificationConfigurationService
    {
        private readonly string _baseUrl;
        
        public PlatformsNotificationConfigurationService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://cal-test.adyen.com/cal/services/Notification/v6");
        }
        
        public Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse CreateNotificationConfiguration(CreateNotificationConfigurationRequest createNotificationConfigurationRequest = default, RequestOptions requestOptions = default)
        {
            return CreateNotificationConfigurationAsync(createNotificationConfigurationRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse> CreateNotificationConfigurationAsync(CreateNotificationConfigurationRequest createNotificationConfigurationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/createNotificationConfiguration";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse>(createNotificationConfigurationRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsNotificationConfiguration.GenericResponse DeleteNotificationConfigurations(DeleteNotificationConfigurationRequest deleteNotificationConfigurationRequest = default, RequestOptions requestOptions = default)
        {
            return DeleteNotificationConfigurationsAsync(deleteNotificationConfigurationRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsNotificationConfiguration.GenericResponse> DeleteNotificationConfigurationsAsync(DeleteNotificationConfigurationRequest deleteNotificationConfigurationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/deleteNotificationConfigurations";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsNotificationConfiguration.GenericResponse>(deleteNotificationConfigurationRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse GetNotificationConfiguration(GetNotificationConfigurationRequest getNotificationConfigurationRequest = default, RequestOptions requestOptions = default)
        {
            return GetNotificationConfigurationAsync(getNotificationConfigurationRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse> GetNotificationConfigurationAsync(GetNotificationConfigurationRequest getNotificationConfigurationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/getNotificationConfiguration";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse>(getNotificationConfigurationRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsNotificationConfiguration.GetNotificationConfigurationListResponse GetNotificationConfigurationList(RequestOptions requestOptions = default)
        {
            return GetNotificationConfigurationListAsync(requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsNotificationConfiguration.GetNotificationConfigurationListResponse> GetNotificationConfigurationListAsync(RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/getNotificationConfigurationList";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsNotificationConfiguration.GetNotificationConfigurationListResponse>(null, requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsNotificationConfiguration.TestNotificationConfigurationResponse TestNotificationConfiguration(TestNotificationConfigurationRequest testNotificationConfigurationRequest = default, RequestOptions requestOptions = default)
        {
            return TestNotificationConfigurationAsync(testNotificationConfigurationRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsNotificationConfiguration.TestNotificationConfigurationResponse> TestNotificationConfigurationAsync(TestNotificationConfigurationRequest testNotificationConfigurationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/testNotificationConfiguration";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsNotificationConfiguration.TestNotificationConfigurationResponse>(testNotificationConfigurationRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse UpdateNotificationConfiguration(UpdateNotificationConfigurationRequest updateNotificationConfigurationRequest = default, RequestOptions requestOptions = default)
        {
            return UpdateNotificationConfigurationAsync(updateNotificationConfigurationRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse> UpdateNotificationConfigurationAsync(UpdateNotificationConfigurationRequest updateNotificationConfigurationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/updateNotificationConfiguration";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsNotificationConfiguration.GetNotificationConfigurationResponse>(updateNotificationConfigurationRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
    }
}