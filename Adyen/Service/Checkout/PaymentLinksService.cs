/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.Checkout;

namespace Adyen.Service.Checkout
{
    /// <summary>
    /// PaymentLinksService Interface
    /// </summary>
    public interface IPaymentLinksService
    {
        /// <summary>
        /// Get a payment link
        /// </summary>
        /// <param name="linkId"><see cref="string"/> - Unique identifier of the payment link.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="PaymentLinkResponse"/>.</returns>
        Model.Checkout.PaymentLinkResponse GetPaymentLink(string linkId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a payment link
        /// </summary>
        /// <param name="linkId"><see cref="string"/> - Unique identifier of the payment link.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="PaymentLinkResponse"/>.</returns>
        Task<Model.Checkout.PaymentLinkResponse> GetPaymentLinkAsync(string linkId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Create a payment link
        /// </summary>
        /// <param name="paymentLinkRequest"><see cref="PaymentLinkRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="PaymentLinkResponse"/>.</returns>
        Model.Checkout.PaymentLinkResponse PaymentLinks(PaymentLinkRequest paymentLinkRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create a payment link
        /// </summary>
        /// <param name="paymentLinkRequest"><see cref="PaymentLinkRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="PaymentLinkResponse"/>.</returns>
        Task<Model.Checkout.PaymentLinkResponse> PaymentLinksAsync(PaymentLinkRequest paymentLinkRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update the status of a payment link
        /// </summary>
        /// <param name="linkId"><see cref="string"/> - Unique identifier of the payment link.</param>
        /// <param name="updatePaymentLinkRequest"><see cref="UpdatePaymentLinkRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="PaymentLinkResponse"/>.</returns>
        Model.Checkout.PaymentLinkResponse UpdatePaymentLink(string linkId, UpdatePaymentLinkRequest updatePaymentLinkRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update the status of a payment link
        /// </summary>
        /// <param name="linkId"><see cref="string"/> - Unique identifier of the payment link.</param>
        /// <param name="updatePaymentLinkRequest"><see cref="UpdatePaymentLinkRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="PaymentLinkResponse"/>.</returns>
        Task<Model.Checkout.PaymentLinkResponse> UpdatePaymentLinkAsync(string linkId, UpdatePaymentLinkRequest updatePaymentLinkRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the PaymentLinksService API endpoints
    /// </summary>
    public class PaymentLinksService : AbstractService, IPaymentLinksService
    {
        private readonly string _baseUrl;
        
        public PaymentLinksService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://checkout-test.adyen.com/v71");
        }
        
        public Model.Checkout.PaymentLinkResponse GetPaymentLink(string linkId, RequestOptions requestOptions = default)
        {
            return GetPaymentLinkAsync(linkId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Checkout.PaymentLinkResponse> GetPaymentLinkAsync(string linkId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/paymentLinks/{linkId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Checkout.PaymentLinkResponse>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Checkout.PaymentLinkResponse PaymentLinks(PaymentLinkRequest paymentLinkRequest = default, RequestOptions requestOptions = default)
        {
            return PaymentLinksAsync(paymentLinkRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Checkout.PaymentLinkResponse> PaymentLinksAsync(PaymentLinkRequest paymentLinkRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/paymentLinks";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Checkout.PaymentLinkResponse>(paymentLinkRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Checkout.PaymentLinkResponse UpdatePaymentLink(string linkId, UpdatePaymentLinkRequest updatePaymentLinkRequest = default, RequestOptions requestOptions = default)
        {
            return UpdatePaymentLinkAsync(linkId, updatePaymentLinkRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Checkout.PaymentLinkResponse> UpdatePaymentLinkAsync(string linkId, UpdatePaymentLinkRequest updatePaymentLinkRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/paymentLinks/{linkId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Checkout.PaymentLinkResponse>(updatePaymentLinkRequest.ToJson(), requestOptions, new HttpMethod("PATCH"), cancellationToken).ConfigureAwait(false);
        }
    }
}