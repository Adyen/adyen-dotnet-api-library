/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.Checkout;

namespace Adyen.Service.Checkout
{
    /// <summary>
    /// DonationsService Interface
    /// </summary>
    public interface IDonationsService
    {
        /// <summary>
        /// Get a list of donation campaigns.
        /// </summary>
        /// <param name="donationCampaignsRequest"><see cref="DonationCampaignsRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="DonationCampaignsResponse"/>.</returns>
        Model.Checkout.DonationCampaignsResponse DonationCampaigns(DonationCampaignsRequest donationCampaignsRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a list of donation campaigns.
        /// </summary>
        /// <param name="donationCampaignsRequest"><see cref="DonationCampaignsRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="DonationCampaignsResponse"/>.</returns>
        Task<Model.Checkout.DonationCampaignsResponse> DonationCampaignsAsync(DonationCampaignsRequest donationCampaignsRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Start a transaction for donations
        /// </summary>
        /// <param name="donationPaymentRequest"><see cref="DonationPaymentRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="DonationPaymentResponse"/>.</returns>
        Model.Checkout.DonationPaymentResponse Donations(DonationPaymentRequest donationPaymentRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Start a transaction for donations
        /// </summary>
        /// <param name="donationPaymentRequest"><see cref="DonationPaymentRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="DonationPaymentResponse"/>.</returns>
        Task<Model.Checkout.DonationPaymentResponse> DonationsAsync(DonationPaymentRequest donationPaymentRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the DonationsService API endpoints
    /// </summary>
    public class DonationsService : AbstractService, IDonationsService
    {
        private readonly string _baseUrl;
        
        public DonationsService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://checkout-test.adyen.com/v71");
        }
        
        public Model.Checkout.DonationCampaignsResponse DonationCampaigns(DonationCampaignsRequest donationCampaignsRequest = default, RequestOptions requestOptions = default)
        {
            return DonationCampaignsAsync(donationCampaignsRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Checkout.DonationCampaignsResponse> DonationCampaignsAsync(DonationCampaignsRequest donationCampaignsRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/donationCampaigns";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Checkout.DonationCampaignsResponse>(donationCampaignsRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Checkout.DonationPaymentResponse Donations(DonationPaymentRequest donationPaymentRequest = default, RequestOptions requestOptions = default)
        {
            return DonationsAsync(donationPaymentRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Checkout.DonationPaymentResponse> DonationsAsync(DonationPaymentRequest donationPaymentRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/donations";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Checkout.DonationPaymentResponse>(donationPaymentRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
    }
}