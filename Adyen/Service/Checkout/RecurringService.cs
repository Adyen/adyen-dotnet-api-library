// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Adyen.Client;
using Adyen.Model.Checkout;

namespace Adyen.Service.Checkout
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IRecurringService : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        RecurringServiceEvents Events { get; }

        /// <summary>
        /// Delete a token for stored payment details
        /// </summary>
        /// <remarks>
        /// Deletes the token identified in the path. The token can no longer be used with payment requests.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="storedPaymentMethodId">The unique identifier of the token.</param>
        /// <param name="shopperReference">Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.</param>
        /// <param name="merchantAccount">Your merchant account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTokenForStoredPaymentDetailsApiResponse"/>&gt;</returns>
        Task<IDeleteTokenForStoredPaymentDetailsApiResponse> DeleteTokenForStoredPaymentDetailsAsync(string storedPaymentMethodId, string shopperReference, string merchantAccount, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a token for stored payment details
        /// </summary>
        /// <remarks>
        /// Deletes the token identified in the path. The token can no longer be used with payment requests.
        /// </remarks>
        /// <param name="storedPaymentMethodId">The unique identifier of the token.</param>
        /// <param name="shopperReference">Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.</param>
        /// <param name="merchantAccount">Your merchant account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTokenForStoredPaymentDetailsApiResponse"/>&gt;</returns>
        Task<IDeleteTokenForStoredPaymentDetailsApiResponse> DeleteTokenForStoredPaymentDetailsOrDefaultAsync(string storedPaymentMethodId, string shopperReference, string merchantAccount, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get tokens for stored payment details
        /// </summary>
        /// <remarks>
        /// Lists the tokens for stored payment details for the shopper identified in the path, if there are any available. The token ID can be used with payment requests for the shopper&#39;s payment. A summary of the stored details is included.  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopperReference">Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address. (optional)</param>
        /// <param name="merchantAccount">Your merchant account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTokensForStoredPaymentDetailsApiResponse"/>&gt;</returns>
        Task<IGetTokensForStoredPaymentDetailsApiResponse> GetTokensForStoredPaymentDetailsAsync(Option<string> shopperReference = default, Option<string> merchantAccount = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get tokens for stored payment details
        /// </summary>
        /// <remarks>
        /// Lists the tokens for stored payment details for the shopper identified in the path, if there are any available. The token ID can be used with payment requests for the shopper&#39;s payment. A summary of the stored details is included.  
        /// </remarks>
        /// <param name="shopperReference">Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address. (optional)</param>
        /// <param name="merchantAccount">Your merchant account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTokensForStoredPaymentDetailsApiResponse"/>&gt;</returns>
        Task<IGetTokensForStoredPaymentDetailsApiResponse> GetTokensForStoredPaymentDetailsOrDefaultAsync(Option<string> shopperReference = default, Option<string> merchantAccount = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a token to store payment details
        /// </summary>
        /// <remarks>
        /// Creates a token to store the shopper&#39;s payment details. This token can be used for the shopper&#39;s future payments.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">A unique identifier for the message with a maximum of 64 characters (we recommend a UUID). (optional)</param>
        /// <param name="storedPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStoredPaymentMethodsApiResponse"/>&gt;</returns>
        Task<IStoredPaymentMethodsApiResponse> StoredPaymentMethodsAsync(Option<string> idempotencyKey = default, Option<StoredPaymentMethodRequest> storedPaymentMethodRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a token to store payment details
        /// </summary>
        /// <remarks>
        /// Creates a token to store the shopper&#39;s payment details. This token can be used for the shopper&#39;s future payments.
        /// </remarks>
        /// <param name="idempotencyKey">A unique identifier for the message with a maximum of 64 characters (we recommend a UUID). (optional)</param>
        /// <param name="storedPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStoredPaymentMethodsApiResponse"/>&gt;</returns>
        Task<IStoredPaymentMethodsApiResponse> StoredPaymentMethodsOrDefaultAsync(Option<string> idempotencyKey = default, Option<StoredPaymentMethodRequest> storedPaymentMethodRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteTokenForStoredPaymentDetailsApiResponse"/>
    /// </summary>
    public interface IDeleteTokenForStoredPaymentDetailsApiResponse : Adyen.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetTokensForStoredPaymentDetailsApiResponse"/>
    /// </summary>
    public interface IGetTokensForStoredPaymentDetailsApiResponse : Adyen.Client.IApiResponse, IOk<Adyen.Model.Checkout.ListStoredPaymentMethodsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IStoredPaymentMethodsApiResponse"/>
    /// </summary>
    public interface IStoredPaymentMethodsApiResponse : Adyen.Client.IApiResponse, ICreated<Adyen.Model.Checkout.StoredPaymentMethodResource>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class RecurringServiceEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteTokenForStoredPaymentDetails;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteTokenForStoredPaymentDetails;

        internal void ExecuteOnDeleteTokenForStoredPaymentDetails(RecurringService.DeleteTokenForStoredPaymentDetailsApiResponse apiResponse)
        {
            OnDeleteTokenForStoredPaymentDetails?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteTokenForStoredPaymentDetails(Exception exception)
        {
            OnErrorDeleteTokenForStoredPaymentDetails?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTokensForStoredPaymentDetails;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTokensForStoredPaymentDetails;

        internal void ExecuteOnGetTokensForStoredPaymentDetails(RecurringService.GetTokensForStoredPaymentDetailsApiResponse apiResponse)
        {
            OnGetTokensForStoredPaymentDetails?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTokensForStoredPaymentDetails(Exception exception)
        {
            OnErrorGetTokensForStoredPaymentDetails?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnStoredPaymentMethods;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorStoredPaymentMethods;

        internal void ExecuteOnStoredPaymentMethods(RecurringService.StoredPaymentMethodsApiResponse apiResponse)
        {
            OnStoredPaymentMethods?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStoredPaymentMethods(Exception exception)
        {
            OnErrorStoredPaymentMethods?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class RecurringService : IRecurringService
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<RecurringService> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public System.Net.Http.HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public RecurringServiceEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringService"/> class.
        /// </summary>
        /// <returns></returns>
        public RecurringService(ILogger<RecurringService> logger, ILoggerFactory loggerFactory, System.Net.Http.HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, RecurringServiceEvents recurringServiceEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<RecurringService>();
            HttpClient = httpClient;
            Events = recurringServiceEvents;
            ApiKeyProvider = apiKeyProvider;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatDeleteTokenForStoredPaymentDetails(ref string storedPaymentMethodId, ref string shopperReference, ref string merchantAccount);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="storedPaymentMethodId"></param>
        /// <param name="shopperReference"></param>
        /// <param name="merchantAccount"></param>
        /// <returns></returns>
        private void ValidateDeleteTokenForStoredPaymentDetails(string storedPaymentMethodId, string shopperReference, string merchantAccount)
        {
            if (storedPaymentMethodId == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodId));

            if (shopperReference == null)
                throw new ArgumentNullException(nameof(shopperReference));

            if (merchantAccount == null)
                throw new ArgumentNullException(nameof(merchantAccount));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="storedPaymentMethodId"></param>
        /// <param name="shopperReference"></param>
        /// <param name="merchantAccount"></param>
        private void AfterDeleteTokenForStoredPaymentDetailsDefaultImplementation(IDeleteTokenForStoredPaymentDetailsApiResponse apiResponseLocalVar, string storedPaymentMethodId, string shopperReference, string merchantAccount)
        {
            bool suppressDefaultLog = false;
            AfterDeleteTokenForStoredPaymentDetails(ref suppressDefaultLog, apiResponseLocalVar, storedPaymentMethodId, shopperReference, merchantAccount);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="storedPaymentMethodId"></param>
        /// <param name="shopperReference"></param>
        /// <param name="merchantAccount"></param>
        partial void AfterDeleteTokenForStoredPaymentDetails(ref bool suppressDefaultLog, IDeleteTokenForStoredPaymentDetailsApiResponse apiResponseLocalVar, string storedPaymentMethodId, string shopperReference, string merchantAccount);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="storedPaymentMethodId"></param>
        /// <param name="shopperReference"></param>
        /// <param name="merchantAccount"></param>
        private void OnErrorDeleteTokenForStoredPaymentDetailsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string storedPaymentMethodId, string shopperReference, string merchantAccount)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteTokenForStoredPaymentDetails(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, storedPaymentMethodId, shopperReference, merchantAccount);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="storedPaymentMethodId"></param>
        /// <param name="shopperReference"></param>
        /// <param name="merchantAccount"></param>
        partial void OnErrorDeleteTokenForStoredPaymentDetails(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string storedPaymentMethodId, string shopperReference, string merchantAccount);

        /// <summary>
        /// Delete a token for stored payment details Deletes the token identified in the path. The token can no longer be used with payment requests.
        /// </summary>
        /// <param name="storedPaymentMethodId">The unique identifier of the token.</param>
        /// <param name="shopperReference">Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.</param>
        /// <param name="merchantAccount">Your merchant account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTokenForStoredPaymentDetailsApiResponse"/>&gt;</returns>
        public async Task<IDeleteTokenForStoredPaymentDetailsApiResponse> DeleteTokenForStoredPaymentDetailsOrDefaultAsync(string storedPaymentMethodId, string shopperReference, string merchantAccount, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteTokenForStoredPaymentDetailsAsync(storedPaymentMethodId, shopperReference, merchantAccount, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a token for stored payment details Deletes the token identified in the path. The token can no longer be used with payment requests.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="storedPaymentMethodId">The unique identifier of the token.</param>
        /// <param name="shopperReference">Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.</param>
        /// <param name="merchantAccount">Your merchant account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTokenForStoredPaymentDetailsApiResponse"/>&gt;</returns>
        public async Task<IDeleteTokenForStoredPaymentDetailsApiResponse> DeleteTokenForStoredPaymentDetailsAsync(string storedPaymentMethodId, string shopperReference, string merchantAccount, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteTokenForStoredPaymentDetails(storedPaymentMethodId, shopperReference, merchantAccount);

                FormatDeleteTokenForStoredPaymentDetails(ref storedPaymentMethodId, ref shopperReference, ref merchantAccount);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/storedPaymentMethods/{storedPaymentMethodId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BstoredPaymentMethodId%7D", Uri.EscapeDataString(storedPaymentMethodId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["shopperReference"] = ClientUtils.ParameterToString(shopperReference);
                    parseQueryStringLocalVar["merchantAccount"] = ClientUtils.ParameterToString(merchantAccount);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("X-API-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteTokenForStoredPaymentDetailsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteTokenForStoredPaymentDetailsApiResponse>();

                        DeleteTokenForStoredPaymentDetailsApiResponse apiResponseLocalVar = new DeleteTokenForStoredPaymentDetailsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/storedPaymentMethods/{storedPaymentMethodId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteTokenForStoredPaymentDetailsDefaultImplementation(apiResponseLocalVar, storedPaymentMethodId, shopperReference, merchantAccount);

                        Events.ExecuteOnDeleteTokenForStoredPaymentDetails(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteTokenForStoredPaymentDetailsDefaultImplementation(e, "/storedPaymentMethods/{storedPaymentMethodId}", uriBuilderLocalVar.Path, storedPaymentMethodId, shopperReference, merchantAccount);
                Events.ExecuteOnErrorDeleteTokenForStoredPaymentDetails(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteTokenForStoredPaymentDetailsApiResponse"/>
        /// </summary>
        public partial class DeleteTokenForStoredPaymentDetailsApiResponse : Adyen.Client.ApiResponse, IDeleteTokenForStoredPaymentDetailsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteTokenForStoredPaymentDetailsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteTokenForStoredPaymentDetailsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteTokenForStoredPaymentDetailsApiResponse(ILogger<DeleteTokenForStoredPaymentDetailsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTokensForStoredPaymentDetails(ref string shopperReference, ref string merchantAccount);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="shopperReference"></param>
        /// <param name="merchantAccount"></param>
        /// <returns></returns>
        private void ValidateGetTokensForStoredPaymentDetails(string shopperReference, string merchantAccount)
        {
            if (shopperReference.IsSet && shopperReference.Value == null)
                throw new ArgumentNullException(nameof(shopperReference));

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shopperReference"></param>
        /// <param name="merchantAccount"></param>
        private void AfterGetTokensForStoredPaymentDetailsDefaultImplementation(IGetTokensForStoredPaymentDetailsApiResponse apiResponseLocalVar, string shopperReference, string merchantAccount)
        {
            bool suppressDefaultLog = false;
            AfterGetTokensForStoredPaymentDetails(ref suppressDefaultLog, apiResponseLocalVar, shopperReference, merchantAccount);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shopperReference"></param>
        /// <param name="merchantAccount"></param>
        partial void AfterGetTokensForStoredPaymentDetails(ref bool suppressDefaultLog, IGetTokensForStoredPaymentDetailsApiResponse apiResponseLocalVar, string shopperReference, string merchantAccount);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shopperReference"></param>
        /// <param name="merchantAccount"></param>
        private void OnErrorGetTokensForStoredPaymentDetailsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string shopperReference, string merchantAccount)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTokensForStoredPaymentDetails(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, shopperReference, merchantAccount);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shopperReference"></param>
        /// <param name="merchantAccount"></param>
        partial void OnErrorGetTokensForStoredPaymentDetails(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string shopperReference, string merchantAccount);

        /// <summary>
        /// Get tokens for stored payment details Lists the tokens for stored payment details for the shopper identified in the path, if there are any available. The token ID can be used with payment requests for the shopper&#39;s payment. A summary of the stored details is included.  
        /// </summary>
        /// <param name="shopperReference">Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address. (optional)</param>
        /// <param name="merchantAccount">Your merchant account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTokensForStoredPaymentDetailsApiResponse"/>&gt;</returns>
        public async Task<IGetTokensForStoredPaymentDetailsApiResponse> GetTokensForStoredPaymentDetailsOrDefaultAsync(Option<string> shopperReference = default, Option<string> merchantAccount = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTokensForStoredPaymentDetailsAsync(shopperReference, merchantAccount, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get tokens for stored payment details Lists the tokens for stored payment details for the shopper identified in the path, if there are any available. The token ID can be used with payment requests for the shopper&#39;s payment. A summary of the stored details is included.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopperReference">Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address. (optional)</param>
        /// <param name="merchantAccount">Your merchant account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTokensForStoredPaymentDetailsApiResponse"/>&gt;</returns>
        public async Task<IGetTokensForStoredPaymentDetailsApiResponse> GetTokensForStoredPaymentDetailsAsync(Option<string> shopperReference = default, Option<string> merchantAccount = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTokensForStoredPaymentDetails(shopperReference, merchantAccount);

                FormatGetTokensForStoredPaymentDetails(ref shopperReference, ref merchantAccount);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/storedPaymentMethods";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (shopperReference.IsSet)
                        parseQueryStringLocalVar["shopperReference"] = ClientUtils.ParameterToString(shopperReference.Value);

                    if (merchantAccount.IsSet)
                        parseQueryStringLocalVar["merchantAccount"] = ClientUtils.ParameterToString(merchantAccount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("X-API-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTokensForStoredPaymentDetailsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTokensForStoredPaymentDetailsApiResponse>();

                        GetTokensForStoredPaymentDetailsApiResponse apiResponseLocalVar = new GetTokensForStoredPaymentDetailsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/storedPaymentMethods", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTokensForStoredPaymentDetailsDefaultImplementation(apiResponseLocalVar, shopperReference, merchantAccount);

                        Events.ExecuteOnGetTokensForStoredPaymentDetails(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTokensForStoredPaymentDetailsDefaultImplementation(e, "/storedPaymentMethods", uriBuilderLocalVar.Path, shopperReference, merchantAccount);
                Events.ExecuteOnErrorGetTokensForStoredPaymentDetails(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTokensForStoredPaymentDetailsApiResponse"/>
        /// </summary>
        public partial class GetTokensForStoredPaymentDetailsApiResponse : Adyen.Client.ApiResponse, IGetTokensForStoredPaymentDetailsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTokensForStoredPaymentDetailsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTokensForStoredPaymentDetailsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTokensForStoredPaymentDetailsApiResponse(ILogger<GetTokensForStoredPaymentDetailsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Adyen.Model.Checkout.ListStoredPaymentMethodsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Adyen.Model.Checkout.ListStoredPaymentMethodsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Adyen.Model.Checkout.ListStoredPaymentMethodsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStoredPaymentMethods(ref string idempotencyKey, StoredPaymentMethodRequest storedPaymentMethodRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="idempotencyKey"></param>
        /// <param name="storedPaymentMethodRequest"></param>
        /// <returns></returns>
        private void ValidateStoredPaymentMethods(string idempotencyKey, StoredPaymentMethodRequest storedPaymentMethodRequest)
        {
            if (idempotencyKey.IsSet && idempotencyKey.Value == null)
                throw new ArgumentNullException(nameof(idempotencyKey));

            if (storedPaymentMethodRequest.IsSet && storedPaymentMethodRequest.Value == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="idempotencyKey"></param>
        /// <param name="storedPaymentMethodRequest"></param>
        private void AfterStoredPaymentMethodsDefaultImplementation(IStoredPaymentMethodsApiResponse apiResponseLocalVar, string idempotencyKey, StoredPaymentMethodRequest storedPaymentMethodRequest)
        {
            bool suppressDefaultLog = false;
            AfterStoredPaymentMethods(ref suppressDefaultLog, apiResponseLocalVar, idempotencyKey, storedPaymentMethodRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="idempotencyKey"></param>
        /// <param name="storedPaymentMethodRequest"></param>
        partial void AfterStoredPaymentMethods(ref bool suppressDefaultLog, IStoredPaymentMethodsApiResponse apiResponseLocalVar, string idempotencyKey, StoredPaymentMethodRequest storedPaymentMethodRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="idempotencyKey"></param>
        /// <param name="storedPaymentMethodRequest"></param>
        private void OnErrorStoredPaymentMethodsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string idempotencyKey, StoredPaymentMethodRequest storedPaymentMethodRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorStoredPaymentMethods(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, idempotencyKey, storedPaymentMethodRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="idempotencyKey"></param>
        /// <param name="storedPaymentMethodRequest"></param>
        partial void OnErrorStoredPaymentMethods(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string idempotencyKey, StoredPaymentMethodRequest storedPaymentMethodRequest);

        /// <summary>
        /// Create a token to store payment details Creates a token to store the shopper&#39;s payment details. This token can be used for the shopper&#39;s future payments.
        /// </summary>
        /// <param name="idempotencyKey">A unique identifier for the message with a maximum of 64 characters (we recommend a UUID). (optional)</param>
        /// <param name="storedPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStoredPaymentMethodsApiResponse"/>&gt;</returns>
        public async Task<IStoredPaymentMethodsApiResponse> StoredPaymentMethodsOrDefaultAsync(Option<string> idempotencyKey = default, Option<StoredPaymentMethodRequest> storedPaymentMethodRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StoredPaymentMethodsAsync(idempotencyKey, storedPaymentMethodRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a token to store payment details Creates a token to store the shopper&#39;s payment details. This token can be used for the shopper&#39;s future payments.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">A unique identifier for the message with a maximum of 64 characters (we recommend a UUID). (optional)</param>
        /// <param name="storedPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStoredPaymentMethodsApiResponse"/>&gt;</returns>
        public async Task<IStoredPaymentMethodsApiResponse> StoredPaymentMethodsAsync(Option<string> idempotencyKey = default, Option<StoredPaymentMethodRequest> storedPaymentMethodRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStoredPaymentMethods(idempotencyKey, storedPaymentMethodRequest);

                FormatStoredPaymentMethods(ref idempotencyKey, storedPaymentMethodRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/storedPaymentMethods";

                    if (idempotencyKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Idempotency-Key", ClientUtils.ParameterToString(idempotencyKey.Value));

                    if (storedPaymentMethodRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (storedPaymentMethodRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(storedPaymentMethodRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("X-API-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<StoredPaymentMethodsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StoredPaymentMethodsApiResponse>();

                        StoredPaymentMethodsApiResponse apiResponseLocalVar = new StoredPaymentMethodsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/storedPaymentMethods", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStoredPaymentMethodsDefaultImplementation(apiResponseLocalVar, idempotencyKey, storedPaymentMethodRequest);

                        Events.ExecuteOnStoredPaymentMethods(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStoredPaymentMethodsDefaultImplementation(e, "/storedPaymentMethods", uriBuilderLocalVar.Path, idempotencyKey, storedPaymentMethodRequest);
                Events.ExecuteOnErrorStoredPaymentMethods(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StoredPaymentMethodsApiResponse"/>
        /// </summary>
        public partial class StoredPaymentMethodsApiResponse : Adyen.Client.ApiResponse, IStoredPaymentMethodsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StoredPaymentMethodsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StoredPaymentMethodsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StoredPaymentMethodsApiResponse(ILogger<StoredPaymentMethodsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Adyen.Model.Checkout.StoredPaymentMethodResource Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Adyen.Model.Checkout.StoredPaymentMethodResource>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out Adyen.Model.Checkout.StoredPaymentMethodResource result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
