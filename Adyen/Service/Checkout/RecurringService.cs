/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.Checkout;

namespace Adyen.Service.Checkout
{
    /// <summary>
    /// RecurringService Interface
    /// </summary>
    public interface IRecurringService
    {
        /// <summary>
        /// Delete a token for stored payment details
        /// </summary>
        /// <param name="storedPaymentMethodId"><see cref="string"/> - The unique identifier of the token.</param>
        /// <param name="shopperReference"><see cref="string"/> - Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.</param>
        /// <param name="merchantAccount"><see cref="string"/> - Your merchant account.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        void DeleteTokenForStoredPaymentDetails(string storedPaymentMethodId, string shopperReference, string merchantAccount, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete a token for stored payment details
        /// </summary>
        /// <param name="storedPaymentMethodId"><see cref="string"/> - The unique identifier of the token.</param>
        /// <param name="shopperReference"><see cref="string"/> - Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.</param>
        /// <param name="merchantAccount"><see cref="string"/> - Your merchant account.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        Task DeleteTokenForStoredPaymentDetailsAsync(string storedPaymentMethodId, string shopperReference, string merchantAccount, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get tokens for stored payment details
        /// </summary>
        /// <param name="shopperReference"><see cref="string"/> - Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.</param>
        /// <param name="merchantAccount"><see cref="string"/> - Your merchant account.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="ListStoredPaymentMethodsResponse"/>.</returns>
        Model.Checkout.ListStoredPaymentMethodsResponse GetTokensForStoredPaymentDetails(string shopperReference = default, string merchantAccount = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get tokens for stored payment details
        /// </summary>
        /// <param name="shopperReference"><see cref="string"/> - Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.</param>
        /// <param name="merchantAccount"><see cref="string"/> - Your merchant account.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="ListStoredPaymentMethodsResponse"/>.</returns>
        Task<Model.Checkout.ListStoredPaymentMethodsResponse> GetTokensForStoredPaymentDetailsAsync(string shopperReference = default, string merchantAccount = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Create a token to store payment details
        /// </summary>
        /// <param name="storedPaymentMethodRequest"><see cref="StoredPaymentMethodRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="StoredPaymentMethodResource"/>.</returns>
        Model.Checkout.StoredPaymentMethodResource StoredPaymentMethods(StoredPaymentMethodRequest storedPaymentMethodRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create a token to store payment details
        /// </summary>
        /// <param name="storedPaymentMethodRequest"><see cref="StoredPaymentMethodRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="StoredPaymentMethodResource"/>.</returns>
        Task<Model.Checkout.StoredPaymentMethodResource> StoredPaymentMethodsAsync(StoredPaymentMethodRequest storedPaymentMethodRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the RecurringService API endpoints
    /// </summary>
    public class RecurringService : AbstractService, IRecurringService
    {
        private readonly string _baseUrl;
        
        public RecurringService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://checkout-test.adyen.com/v71");
        }
        
        public void DeleteTokenForStoredPaymentDetails(string storedPaymentMethodId, string shopperReference, string merchantAccount, RequestOptions requestOptions = default)
        {
            DeleteTokenForStoredPaymentDetailsAsync(storedPaymentMethodId, shopperReference, merchantAccount, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task DeleteTokenForStoredPaymentDetailsAsync(string storedPaymentMethodId, string shopperReference, string merchantAccount, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            queryParams.Add("shopperReference", shopperReference);
            queryParams.Add("merchantAccount", merchantAccount);
            var endpoint = _baseUrl + $"/storedPaymentMethods/{storedPaymentMethodId}" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(null, requestOptions, new HttpMethod("DELETE"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Checkout.ListStoredPaymentMethodsResponse GetTokensForStoredPaymentDetails(string shopperReference = default, string merchantAccount = default, RequestOptions requestOptions = default)
        {
            return GetTokensForStoredPaymentDetailsAsync(shopperReference, merchantAccount, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Checkout.ListStoredPaymentMethodsResponse> GetTokensForStoredPaymentDetailsAsync(string shopperReference = default, string merchantAccount = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (shopperReference != null) queryParams.Add("shopperReference", shopperReference);
            if (merchantAccount != null) queryParams.Add("merchantAccount", merchantAccount);
            var endpoint = _baseUrl + "/storedPaymentMethods" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Checkout.ListStoredPaymentMethodsResponse>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Checkout.StoredPaymentMethodResource StoredPaymentMethods(StoredPaymentMethodRequest storedPaymentMethodRequest = default, RequestOptions requestOptions = default)
        {
            return StoredPaymentMethodsAsync(storedPaymentMethodRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Checkout.StoredPaymentMethodResource> StoredPaymentMethodsAsync(StoredPaymentMethodRequest storedPaymentMethodRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/storedPaymentMethods";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Checkout.StoredPaymentMethodResource>(storedPaymentMethodRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
    }
}