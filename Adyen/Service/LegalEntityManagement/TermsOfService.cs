/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 2
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.LegalEntityManagement;
using Newtonsoft.Json;

namespace Adyen.Service.LegalEntityManagement
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TermsOfService : AbstractService
    {
        private readonly string _baseUrl;
        
        public TermsOfService(Client client) : base(client)
        {
            _baseUrl = client.Config.LegalEntityManagementEndpoint + "/" + ClientConfig.LegalEntityManagementVersion;
        }
    
        /// <summary>
        /// Get Terms of Service information for a legal entity
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>GetTermsOfServiceAcceptanceInfosResponse</returns>
        public GetTermsOfServiceAcceptanceInfosResponse GetTermsOfServiceInformationForLegalEntity(string id, RequestOptions requestOptions = default)
        {
            return GetTermsOfServiceInformationForLegalEntityAsync(id, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Terms of Service information for a legal entity
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of GetTermsOfServiceAcceptanceInfosResponse</returns>
        public async Task<GetTermsOfServiceAcceptanceInfosResponse> GetTermsOfServiceInformationForLegalEntityAsync(string id, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/legalEntities/{id}/termsOfServiceAcceptanceInfos";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<GetTermsOfServiceAcceptanceInfosResponse>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Get Terms of Service status
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>CalculateTermsOfServiceStatusResponse</returns>
        public CalculateTermsOfServiceStatusResponse GetTermsOfServiceStatus(string id, RequestOptions requestOptions = default)
        {
            return GetTermsOfServiceStatusAsync(id, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Terms of Service status
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of CalculateTermsOfServiceStatusResponse</returns>
        public async Task<CalculateTermsOfServiceStatusResponse> GetTermsOfServiceStatusAsync(string id, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/legalEntities/{id}/termsOfServiceStatus";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<CalculateTermsOfServiceStatusResponse>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Accept Terms of Service
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="termsofservicedocumentid">The unique identifier of the Terms of Service document.</param>
        /// <param name="acceptTermsOfServiceRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>AcceptTermsOfServiceResponse</returns>
        public AcceptTermsOfServiceResponse AcceptTermsOfService(string id, string termsofservicedocumentid, AcceptTermsOfServiceRequest acceptTermsOfServiceRequest, RequestOptions requestOptions = default)
        {
            return AcceptTermsOfServiceAsync(id, termsofservicedocumentid, acceptTermsOfServiceRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Accept Terms of Service
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="termsofservicedocumentid">The unique identifier of the Terms of Service document.</param>
        /// <param name="acceptTermsOfServiceRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of AcceptTermsOfServiceResponse</returns>
        public async Task<AcceptTermsOfServiceResponse> AcceptTermsOfServiceAsync(string id, string termsofservicedocumentid, AcceptTermsOfServiceRequest acceptTermsOfServiceRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/legalEntities/{id}/termsOfService/{termsofservicedocumentid}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<AcceptTermsOfServiceResponse>(acceptTermsOfServiceRequest.ToJson(), requestOptions, new HttpMethod("PATCH"));
        }

        /// <summary>
        /// Get Terms of Service document
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="getTermsOfServiceDocumentRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>GetTermsOfServiceDocumentResponse</returns>
        public GetTermsOfServiceDocumentResponse GetTermsOfServiceDocument(string id, GetTermsOfServiceDocumentRequest getTermsOfServiceDocumentRequest, RequestOptions requestOptions = default)
        {
            return GetTermsOfServiceDocumentAsync(id, getTermsOfServiceDocumentRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Terms of Service document
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="getTermsOfServiceDocumentRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of GetTermsOfServiceDocumentResponse</returns>
        public async Task<GetTermsOfServiceDocumentResponse> GetTermsOfServiceDocumentAsync(string id, GetTermsOfServiceDocumentRequest getTermsOfServiceDocumentRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/legalEntities/{id}/termsOfService";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<GetTermsOfServiceDocumentResponse>(getTermsOfServiceDocumentRequest.ToJson(), requestOptions, new HttpMethod("POST"));
        }

    }
}
