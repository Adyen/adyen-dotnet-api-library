/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.LegalEntityManagement;

namespace Adyen.Service.LegalEntityManagement
{
    /// <summary>
    /// BusinessLinesService Interface
    /// </summary>
    public interface IBusinessLinesService
    {
        /// <summary>
        /// Create a business line
        /// </summary>
        /// <param name="businessLineInfo"><see cref="BusinessLineInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="BusinessLine"/>.</returns>
        BusinessLine CreateBusinessLine(BusinessLineInfo businessLineInfo, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create a business line
        /// </summary>
        /// <param name="businessLineInfo"><see cref="BusinessLineInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="BusinessLine"/>.</returns>
        Task<BusinessLine> CreateBusinessLineAsync(BusinessLineInfo businessLineInfo, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete a business line
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the business line to be deleted.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        void DeleteBusinessLine(string id, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete a business line
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the business line to be deleted.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        Task DeleteBusinessLineAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a business line
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the business line.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="BusinessLine"/>.</returns>
        BusinessLine GetBusinessLine(string id, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a business line
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the business line.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="BusinessLine"/>.</returns>
        Task<BusinessLine> GetBusinessLineAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update a business line
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the business line.</param>
        /// <param name="businessLineInfoUpdate"><see cref="BusinessLineInfoUpdate"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="BusinessLine"/>.</returns>
        BusinessLine UpdateBusinessLine(string id, BusinessLineInfoUpdate businessLineInfoUpdate, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update a business line
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the business line.</param>
        /// <param name="businessLineInfoUpdate"><see cref="BusinessLineInfoUpdate"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="BusinessLine"/>.</returns>
        Task<BusinessLine> UpdateBusinessLineAsync(string id, BusinessLineInfoUpdate businessLineInfoUpdate, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the BusinessLinesService API endpoints
    /// </summary>
    public class BusinessLinesService : AbstractService, IBusinessLinesService
    {
        private readonly string _baseUrl;
        
        public BusinessLinesService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://kyc-test.adyen.com/lem/v3");
        }
        
        public BusinessLine CreateBusinessLine(BusinessLineInfo businessLineInfo, RequestOptions requestOptions = default)
        {
            return CreateBusinessLineAsync(businessLineInfo, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<BusinessLine> CreateBusinessLineAsync(BusinessLineInfo businessLineInfo, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/businessLines";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<BusinessLine>(businessLineInfo.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public void DeleteBusinessLine(string id, RequestOptions requestOptions = default)
        {
            DeleteBusinessLineAsync(id, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task DeleteBusinessLineAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/businessLines/{id}";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(null, requestOptions, new HttpMethod("DELETE"), cancellationToken).ConfigureAwait(false);
        }
        
        public BusinessLine GetBusinessLine(string id, RequestOptions requestOptions = default)
        {
            return GetBusinessLineAsync(id, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<BusinessLine> GetBusinessLineAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/businessLines/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<BusinessLine>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public BusinessLine UpdateBusinessLine(string id, BusinessLineInfoUpdate businessLineInfoUpdate, RequestOptions requestOptions = default)
        {
            return UpdateBusinessLineAsync(id, businessLineInfoUpdate, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<BusinessLine> UpdateBusinessLineAsync(string id, BusinessLineInfoUpdate businessLineInfoUpdate, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/businessLines/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<BusinessLine>(businessLineInfoUpdate.ToJson(), requestOptions, new HttpMethod("PATCH"), cancellationToken).ConfigureAwait(false);
        }
    }
}