/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.LegalEntityManagement;

namespace Adyen.Service.LegalEntityManagement
{
    /// <summary>
    /// TransferInstrumentsService Interface
    /// </summary>
    public interface ITransferInstrumentsService
    {
        /// <summary>
        /// Create a transfer instrument
        /// </summary>
        /// <param name="transferInstrumentInfo"><see cref="TransferInstrumentInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TransferInstrument"/>.</returns>
        Model.LegalEntityManagement.TransferInstrument CreateTransferInstrument(TransferInstrumentInfo transferInstrumentInfo = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create a transfer instrument
        /// </summary>
        /// <param name="transferInstrumentInfo"><see cref="TransferInstrumentInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TransferInstrument"/>.</returns>
        Task<Model.LegalEntityManagement.TransferInstrument> CreateTransferInstrumentAsync(TransferInstrumentInfo transferInstrumentInfo = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete a transfer instrument
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the transfer instrument to be deleted.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        void DeleteTransferInstrument(string id, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete a transfer instrument
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the transfer instrument to be deleted.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        Task DeleteTransferInstrumentAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a transfer instrument
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the transfer instrument.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TransferInstrument"/>.</returns>
        Model.LegalEntityManagement.TransferInstrument GetTransferInstrument(string id, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a transfer instrument
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the transfer instrument.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TransferInstrument"/>.</returns>
        Task<Model.LegalEntityManagement.TransferInstrument> GetTransferInstrumentAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update a transfer instrument
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the transfer instrument.</param>
        /// <param name="transferInstrumentInfo"><see cref="TransferInstrumentInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TransferInstrument"/>.</returns>
        Model.LegalEntityManagement.TransferInstrument UpdateTransferInstrument(string id, TransferInstrumentInfo transferInstrumentInfo = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update a transfer instrument
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the transfer instrument.</param>
        /// <param name="transferInstrumentInfo"><see cref="TransferInstrumentInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TransferInstrument"/>.</returns>
        Task<Model.LegalEntityManagement.TransferInstrument> UpdateTransferInstrumentAsync(string id, TransferInstrumentInfo transferInstrumentInfo = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the TransferInstrumentsService API endpoints
    /// </summary>
    public class TransferInstrumentsService : AbstractService, ITransferInstrumentsService
    {
        private readonly string _baseUrl;
        
        public TransferInstrumentsService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://kyc-test.adyen.com/lem/v3");
        }
        
        public Model.LegalEntityManagement.TransferInstrument CreateTransferInstrument(TransferInstrumentInfo transferInstrumentInfo = default, RequestOptions requestOptions = default)
        {
            return CreateTransferInstrumentAsync(transferInstrumentInfo, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.LegalEntityManagement.TransferInstrument> CreateTransferInstrumentAsync(TransferInstrumentInfo transferInstrumentInfo = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/transferInstruments";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.LegalEntityManagement.TransferInstrument>(transferInstrumentInfo.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public void DeleteTransferInstrument(string id, RequestOptions requestOptions = default)
        {
            DeleteTransferInstrumentAsync(id, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task DeleteTransferInstrumentAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/transferInstruments/{id}";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(null, requestOptions, new HttpMethod("DELETE"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.LegalEntityManagement.TransferInstrument GetTransferInstrument(string id, RequestOptions requestOptions = default)
        {
            return GetTransferInstrumentAsync(id, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.LegalEntityManagement.TransferInstrument> GetTransferInstrumentAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/transferInstruments/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.LegalEntityManagement.TransferInstrument>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.LegalEntityManagement.TransferInstrument UpdateTransferInstrument(string id, TransferInstrumentInfo transferInstrumentInfo = default, RequestOptions requestOptions = default)
        {
            return UpdateTransferInstrumentAsync(id, transferInstrumentInfo, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.LegalEntityManagement.TransferInstrument> UpdateTransferInstrumentAsync(string id, TransferInstrumentInfo transferInstrumentInfo = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/transferInstruments/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.LegalEntityManagement.TransferInstrument>(transferInstrumentInfo.ToJson(), requestOptions, new HttpMethod("PATCH"), cancellationToken).ConfigureAwait(false);
        }
    }
}