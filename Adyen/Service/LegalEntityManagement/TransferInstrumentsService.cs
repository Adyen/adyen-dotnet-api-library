/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.LegalEntityManagement;
using Newtonsoft.Json;

namespace Adyen.Service.LegalEntityManagement
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TransferInstrumentsService : AbstractService
    {
        private readonly string _baseUrl;
        
        public TransferInstrumentsService(Client client) : base(client)
        {
            _baseUrl = client.Config.LegalEntityManagementEndpoint + "/" + ClientConfig.LegalEntityManagementVersion;
        }
    
        /// <summary>
        /// Delete a transfer instrument
        /// </summary>
        /// <param name="id">The unique identifier of the transfer instrument to be deleted.</param>
        /// <param name="requestOptions">Additional request options.</param>
        public void DeleteTransferInstrument(string id, RequestOptions requestOptions = default)
        {
            DeleteTransferInstrumentAsync(id, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a transfer instrument
        /// </summary>
        /// <param name="id">The unique identifier of the transfer instrument to be deleted.</param>
        /// <param name="requestOptions">Additional request options.</param>
        public async Task DeleteTransferInstrumentAsync(string id, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/transferInstruments/{id}";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(null, requestOptions, new HttpMethod("DELETE"));
        }

        /// <summary>
        /// Get a transfer instrument
        /// </summary>
        /// <param name="id">The unique identifier of the transfer instrument.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TransferInstrument</returns>
        public TransferInstrument GetTransferInstrument(string id, RequestOptions requestOptions = default)
        {
            return GetTransferInstrumentAsync(id, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a transfer instrument
        /// </summary>
        /// <param name="id">The unique identifier of the transfer instrument.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TransferInstrument</returns>
        public async Task<TransferInstrument> GetTransferInstrumentAsync(string id, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/transferInstruments/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<TransferInstrument>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Update a transfer instrument
        /// </summary>
        /// <param name="id">The unique identifier of the transfer instrument.</param>
        /// <param name="transferInstrumentInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TransferInstrument</returns>
        public TransferInstrument UpdateTransferInstrument(string id, TransferInstrumentInfo transferInstrumentInfo, RequestOptions requestOptions = default)
        {
            return UpdateTransferInstrumentAsync(id, transferInstrumentInfo, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a transfer instrument
        /// </summary>
        /// <param name="id">The unique identifier of the transfer instrument.</param>
        /// <param name="transferInstrumentInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TransferInstrument</returns>
        public async Task<TransferInstrument> UpdateTransferInstrumentAsync(string id, TransferInstrumentInfo transferInstrumentInfo, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/transferInstruments/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<TransferInstrument>(transferInstrumentInfo.ToJson(), requestOptions, new HttpMethod("PATCH"));
        }

        /// <summary>
        /// Create a transfer instrument
        /// </summary>
        /// <param name="transferInstrumentInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TransferInstrument</returns>
        public TransferInstrument CreateTransferInstrument(TransferInstrumentInfo transferInstrumentInfo, RequestOptions requestOptions = default)
        {
            return CreateTransferInstrumentAsync(transferInstrumentInfo, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a transfer instrument
        /// </summary>
        /// <param name="transferInstrumentInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TransferInstrument</returns>
        public async Task<TransferInstrument> CreateTransferInstrumentAsync(TransferInstrumentInfo transferInstrumentInfo, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/transferInstruments";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<TransferInstrument>(transferInstrumentInfo.ToJson(), requestOptions, new HttpMethod("POST"));
        }

    }
}
