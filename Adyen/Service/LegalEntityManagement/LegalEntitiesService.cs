/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 2
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.LegalEntityManagement;
using Newtonsoft.Json;

namespace Adyen.Service.LegalEntityManagement
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class LegalEntitiesService : AbstractService
    {
        private readonly string _baseUrl;
        
        public LegalEntitiesService(Client client) : base(client)
        {
            _baseUrl = client.Config.LegalEntityManagementEndpoint + "/" + ClientConfig.LegalEntityManagementVersion;
        }
    
        /// <summary>
        /// Get a legal entity
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>LegalEntity</returns>
        public LegalEntity GetLegalEntity(string id, RequestOptions requestOptions = default)
        {
            return GetLegalEntityAsync(id, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a legal entity
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of LegalEntity</returns>
        public async Task<LegalEntity> GetLegalEntityAsync(string id, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/legalEntities/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<LegalEntity>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Get all business lines under a legal entity
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>BusinessLines</returns>
        public BusinessLines GetAllBusinessLinesUnderLegalEntity(string id, RequestOptions requestOptions = default)
        {
            return GetAllBusinessLinesUnderLegalEntityAsync(id, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all business lines under a legal entity
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of BusinessLines</returns>
        public async Task<BusinessLines> GetAllBusinessLinesUnderLegalEntityAsync(string id, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/legalEntities/{id}/businessLines";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<BusinessLines>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Update a legal entity
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="legalEntityInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>LegalEntity</returns>
        public LegalEntity UpdateLegalEntity(string id, LegalEntityInfo legalEntityInfo, RequestOptions requestOptions = default)
        {
            return UpdateLegalEntityAsync(id, legalEntityInfo, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a legal entity
        /// </summary>
        /// <param name="id">The unique identifier of the legal entity.</param>
        /// <param name="legalEntityInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of LegalEntity</returns>
        public async Task<LegalEntity> UpdateLegalEntityAsync(string id, LegalEntityInfo legalEntityInfo, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/legalEntities/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<LegalEntity>(legalEntityInfo.ToJson(), requestOptions, new HttpMethod("PATCH"));
        }

        /// <summary>
        /// Create a legal entity
        /// </summary>
        /// <param name="legalEntityInfoRequiredType"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>LegalEntity</returns>
        public LegalEntity CreateLegalEntity(LegalEntityInfoRequiredType legalEntityInfoRequiredType, RequestOptions requestOptions = default)
        {
            return CreateLegalEntityAsync(legalEntityInfoRequiredType, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a legal entity
        /// </summary>
        /// <param name="legalEntityInfoRequiredType"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of LegalEntity</returns>
        public async Task<LegalEntity> CreateLegalEntityAsync(LegalEntityInfoRequiredType legalEntityInfoRequiredType, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/legalEntities";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<LegalEntity>(legalEntityInfoRequiredType.ToJson(), requestOptions, new HttpMethod("POST"));
        }

    }
}
