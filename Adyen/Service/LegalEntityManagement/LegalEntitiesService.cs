/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.LegalEntityManagement;

namespace Adyen.Service.LegalEntityManagement
{
    /// <summary>
    /// LegalEntitiesService Interface
    /// </summary>
    public interface ILegalEntitiesService
    {
        /// <summary>
        /// Check a legal entity's verification errors
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the legal entity.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="VerificationErrors"/>.</returns>
        Model.LegalEntityManagement.VerificationErrors CheckLegalEntitysVerificationErrors(string id, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Check a legal entity's verification errors
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the legal entity.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="VerificationErrors"/>.</returns>
        Task<Model.LegalEntityManagement.VerificationErrors> CheckLegalEntitysVerificationErrorsAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Confirm data review
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the legal entity.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="DataReviewConfirmationResponse"/>.</returns>
        Model.LegalEntityManagement.DataReviewConfirmationResponse ConfirmDataReview(string id, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Confirm data review
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the legal entity.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="DataReviewConfirmationResponse"/>.</returns>
        Task<Model.LegalEntityManagement.DataReviewConfirmationResponse> ConfirmDataReviewAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Create a legal entity
        /// </summary>
        /// <param name="legalEntityInfoRequiredType"><see cref="LegalEntityInfoRequiredType"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="LegalEntity"/>.</returns>
        Model.LegalEntityManagement.LegalEntity CreateLegalEntity(LegalEntityInfoRequiredType legalEntityInfoRequiredType = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create a legal entity
        /// </summary>
        /// <param name="legalEntityInfoRequiredType"><see cref="LegalEntityInfoRequiredType"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="LegalEntity"/>.</returns>
        Task<Model.LegalEntityManagement.LegalEntity> CreateLegalEntityAsync(LegalEntityInfoRequiredType legalEntityInfoRequiredType = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get all business lines under a legal entity
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the legal entity.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="BusinessLines"/>.</returns>
        Model.LegalEntityManagement.BusinessLines GetAllBusinessLinesUnderLegalEntity(string id, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get all business lines under a legal entity
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the legal entity.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="BusinessLines"/>.</returns>
        Task<Model.LegalEntityManagement.BusinessLines> GetAllBusinessLinesUnderLegalEntityAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a legal entity
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the legal entity.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="LegalEntity"/>.</returns>
        Model.LegalEntityManagement.LegalEntity GetLegalEntity(string id, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a legal entity
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the legal entity.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="LegalEntity"/>.</returns>
        Task<Model.LegalEntityManagement.LegalEntity> GetLegalEntityAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update a legal entity
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the legal entity.</param>
        /// <param name="legalEntityInfo"><see cref="LegalEntityInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="LegalEntity"/>.</returns>
        Model.LegalEntityManagement.LegalEntity UpdateLegalEntity(string id, LegalEntityInfo legalEntityInfo = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update a legal entity
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the legal entity.</param>
        /// <param name="legalEntityInfo"><see cref="LegalEntityInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="LegalEntity"/>.</returns>
        Task<Model.LegalEntityManagement.LegalEntity> UpdateLegalEntityAsync(string id, LegalEntityInfo legalEntityInfo = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the LegalEntitiesService API endpoints
    /// </summary>
    public class LegalEntitiesService : AbstractService, ILegalEntitiesService
    {
        private readonly string _baseUrl;
        
        public LegalEntitiesService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://kyc-test.adyen.com/lem/v3");
        }
        
        public Model.LegalEntityManagement.VerificationErrors CheckLegalEntitysVerificationErrors(string id, RequestOptions requestOptions = default)
        {
            return CheckLegalEntitysVerificationErrorsAsync(id, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.LegalEntityManagement.VerificationErrors> CheckLegalEntitysVerificationErrorsAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/legalEntities/{id}/checkVerificationErrors";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.LegalEntityManagement.VerificationErrors>(null, requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.LegalEntityManagement.DataReviewConfirmationResponse ConfirmDataReview(string id, RequestOptions requestOptions = default)
        {
            return ConfirmDataReviewAsync(id, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.LegalEntityManagement.DataReviewConfirmationResponse> ConfirmDataReviewAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/legalEntities/{id}/confirmDataReview";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.LegalEntityManagement.DataReviewConfirmationResponse>(null, requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.LegalEntityManagement.LegalEntity CreateLegalEntity(LegalEntityInfoRequiredType legalEntityInfoRequiredType = default, RequestOptions requestOptions = default)
        {
            return CreateLegalEntityAsync(legalEntityInfoRequiredType, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.LegalEntityManagement.LegalEntity> CreateLegalEntityAsync(LegalEntityInfoRequiredType legalEntityInfoRequiredType = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/legalEntities";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.LegalEntityManagement.LegalEntity>(legalEntityInfoRequiredType.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.LegalEntityManagement.BusinessLines GetAllBusinessLinesUnderLegalEntity(string id, RequestOptions requestOptions = default)
        {
            return GetAllBusinessLinesUnderLegalEntityAsync(id, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.LegalEntityManagement.BusinessLines> GetAllBusinessLinesUnderLegalEntityAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/legalEntities/{id}/businessLines";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.LegalEntityManagement.BusinessLines>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.LegalEntityManagement.LegalEntity GetLegalEntity(string id, RequestOptions requestOptions = default)
        {
            return GetLegalEntityAsync(id, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.LegalEntityManagement.LegalEntity> GetLegalEntityAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/legalEntities/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.LegalEntityManagement.LegalEntity>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.LegalEntityManagement.LegalEntity UpdateLegalEntity(string id, LegalEntityInfo legalEntityInfo = default, RequestOptions requestOptions = default)
        {
            return UpdateLegalEntityAsync(id, legalEntityInfo, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.LegalEntityManagement.LegalEntity> UpdateLegalEntityAsync(string id, LegalEntityInfo legalEntityInfo = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/legalEntities/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.LegalEntityManagement.LegalEntity>(legalEntityInfo.ToJson(), requestOptions, new HttpMethod("PATCH"), cancellationToken).ConfigureAwait(false);
        }
    }
}