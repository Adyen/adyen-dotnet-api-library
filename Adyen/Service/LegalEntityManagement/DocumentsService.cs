/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.LegalEntityManagement;
using Newtonsoft.Json;

namespace Adyen.Service.LegalEntityManagement
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DocumentsService : AbstractService
    {
        private readonly string _baseUrl;
        
        public DocumentsService(Client client) : base(client)
        {
            _baseUrl = client.Config.LegalEntityManagementEndpoint + "/" + ClientConfig.LegalEntityManagementVersion;
        }
    
        /// <summary>
        /// Delete a document
        /// </summary>
        /// <param name="id">The unique identifier of the document to be deleted.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Object</returns>
        public Object DeleteDocument(string id, RequestOptions requestOptions = default)
        {
            return DeleteDocumentAsync(id, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a document
        /// </summary>
        /// <param name="id">The unique identifier of the document to be deleted.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Object</returns>
        public async Task<Object> DeleteDocumentAsync(string id, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/documents/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Object>(null, requestOptions, new HttpMethod("DELETE"));
        }

        /// <summary>
        /// Get a document
        /// </summary>
        /// <param name="id">The unique identifier of the document.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Document</returns>
        public Document GetDocument(string id, RequestOptions requestOptions = default)
        {
            return GetDocumentAsync(id, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a document
        /// </summary>
        /// <param name="id">The unique identifier of the document.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Document</returns>
        public async Task<Document> GetDocumentAsync(string id, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/documents/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Document>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Update a document
        /// </summary>
        /// <param name="id">The unique identifier of the document to be updated.</param>
        /// <param name="document"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Document</returns>
        public Document UpdateDocument(string id, Document document, RequestOptions requestOptions = default)
        {
            return UpdateDocumentAsync(id, document, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a document
        /// </summary>
        /// <param name="id">The unique identifier of the document to be updated.</param>
        /// <param name="document"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Document</returns>
        public async Task<Document> UpdateDocumentAsync(string id, Document document, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/documents/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Document>(document.ToJson(), requestOptions, new HttpMethod("PATCH"));
        }

        /// <summary>
        /// Upload a document for verification checks
        /// </summary>
        /// <param name="document"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Document</returns>
        public Document UploadDocumentForVerificationChecks(Document document, RequestOptions requestOptions = default)
        {
            return UploadDocumentForVerificationChecksAsync(document, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Upload a document for verification checks
        /// </summary>
        /// <param name="document"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of Document</returns>
        public async Task<Document> UploadDocumentForVerificationChecksAsync(Document document, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/documents";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Document>(document.ToJson(), requestOptions, new HttpMethod("POST"));
        }

    }
}
