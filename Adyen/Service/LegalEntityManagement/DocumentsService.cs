/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.LegalEntityManagement;

namespace Adyen.Service.LegalEntityManagement
{
    /// <summary>
    /// DocumentsService Interface
    /// </summary>
    public interface IDocumentsService
    {
        /// <summary>
        /// Delete a document
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the document to be deleted.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        void DeleteDocument(string id, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete a document
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the document to be deleted.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        Task DeleteDocumentAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a document
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the document.</param>
        /// <param name="skipContent"><see cref="bool?"/> - Do not load document content while fetching the document.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="Document"/>.</returns>
        Model.LegalEntityManagement.Document GetDocument(string id, bool? skipContent = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a document
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the document.</param>
        /// <param name="skipContent"><see cref="bool?"/> - Do not load document content while fetching the document.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="Document"/>.</returns>
        Task<Model.LegalEntityManagement.Document> GetDocumentAsync(string id, bool? skipContent = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update a document
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the document to be updated.</param>
        /// <param name="document"><see cref="Document"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="Document"/>.</returns>
        Model.LegalEntityManagement.Document UpdateDocument(string id, Document document = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update a document
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the document to be updated.</param>
        /// <param name="document"><see cref="Document"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="Document"/>.</returns>
        Task<Model.LegalEntityManagement.Document> UpdateDocumentAsync(string id, Document document = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Upload a document for verification checks
        /// </summary>
        /// <param name="document"><see cref="Document"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="Document"/>.</returns>
        Model.LegalEntityManagement.Document UploadDocumentForVerificationChecks(Document document = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Upload a document for verification checks
        /// </summary>
        /// <param name="document"><see cref="Document"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="Document"/>.</returns>
        Task<Model.LegalEntityManagement.Document> UploadDocumentForVerificationChecksAsync(Document document = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the DocumentsService API endpoints
    /// </summary>
    public class DocumentsService : AbstractService, IDocumentsService
    {
        private readonly string _baseUrl;
        
        public DocumentsService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://kyc-test.adyen.com/lem/v3");
        }
        
        public void DeleteDocument(string id, RequestOptions requestOptions = default)
        {
            DeleteDocumentAsync(id, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task DeleteDocumentAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/documents/{id}";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(null, requestOptions, new HttpMethod("DELETE"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.LegalEntityManagement.Document GetDocument(string id, bool? skipContent = default, RequestOptions requestOptions = default)
        {
            return GetDocumentAsync(id, skipContent, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.LegalEntityManagement.Document> GetDocumentAsync(string id, bool? skipContent = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (skipContent != null) queryParams.Add("skipContent", skipContent.ToString());
            var endpoint = _baseUrl + $"/documents/{id}" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.LegalEntityManagement.Document>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.LegalEntityManagement.Document UpdateDocument(string id, Document document = default, RequestOptions requestOptions = default)
        {
            return UpdateDocumentAsync(id, document, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.LegalEntityManagement.Document> UpdateDocumentAsync(string id, Document document = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/documents/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.LegalEntityManagement.Document>(document.ToJson(), requestOptions, new HttpMethod("PATCH"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.LegalEntityManagement.Document UploadDocumentForVerificationChecks(Document document = default, RequestOptions requestOptions = default)
        {
            return UploadDocumentForVerificationChecksAsync(document, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.LegalEntityManagement.Document> UploadDocumentForVerificationChecksAsync(Document document = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/documents";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.LegalEntityManagement.Document>(document.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
    }
}