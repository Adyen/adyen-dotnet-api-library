/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.BalancePlatform;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// ManageSCADevicesService Interface
    /// </summary>
    public interface IManageSCADevicesService
    {
        /// <summary>
        /// Complete the registration of an SCA device
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the SCA device. You obtain this &#x60;id&#x60; in the response of a POST&amp;nbsp;[/registeredDevices](https://docs.adyen.com/api-explorer/balanceplatform/2/post/registeredDevices#responses-200-id) request.</param>
        /// <param name="registerSCARequest"><see cref="RegisterSCARequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="RegisterSCAFinalResponse"/>.</returns>
        Model.BalancePlatform.RegisterSCAFinalResponse CompleteRegistrationOfScaDevice(string id, RegisterSCARequest registerSCARequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Complete the registration of an SCA device
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the SCA device. You obtain this &#x60;id&#x60; in the response of a POST&amp;nbsp;[/registeredDevices](https://docs.adyen.com/api-explorer/balanceplatform/2/post/registeredDevices#responses-200-id) request.</param>
        /// <param name="registerSCARequest"><see cref="RegisterSCARequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="RegisterSCAFinalResponse"/>.</returns>
        Task<Model.BalancePlatform.RegisterSCAFinalResponse> CompleteRegistrationOfScaDeviceAsync(string id, RegisterSCARequest registerSCARequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete a registration of an SCA device
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the SCA device.</param>
        /// <param name="paymentInstrumentId"><see cref="string"/> - The unique identifier of the payment instrument linked to the SCA device.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        void DeleteRegistrationOfScaDevice(string id, string paymentInstrumentId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete a registration of an SCA device
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the SCA device.</param>
        /// <param name="paymentInstrumentId"><see cref="string"/> - The unique identifier of the payment instrument linked to the SCA device.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        Task DeleteRegistrationOfScaDeviceAsync(string id, string paymentInstrumentId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Initiate the registration of an SCA device
        /// </summary>
        /// <param name="registerSCARequest"><see cref="RegisterSCARequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="RegisterSCAResponse"/>.</returns>
        Model.BalancePlatform.RegisterSCAResponse InitiateRegistrationOfScaDevice(RegisterSCARequest registerSCARequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Initiate the registration of an SCA device
        /// </summary>
        /// <param name="registerSCARequest"><see cref="RegisterSCARequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="RegisterSCAResponse"/>.</returns>
        Task<Model.BalancePlatform.RegisterSCAResponse> InitiateRegistrationOfScaDeviceAsync(RegisterSCARequest registerSCARequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a list of registered SCA devices
        /// </summary>
        /// <param name="paymentInstrumentId"><see cref="string"/> - The unique identifier of a payment instrument. It limits the returned list to SCA devices associated to this payment instrument.</param>
        /// <param name="pageNumber"><see cref="int?"/> - The index of the page to retrieve. The index of the first page is 0 (zero).  Default: 0.</param>
        /// <param name="pageSize"><see cref="int?"/> - The number of items to have on a page.  Default: 20. Maximum: 100.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="SearchRegisteredDevicesResponse"/>.</returns>
        Model.BalancePlatform.SearchRegisteredDevicesResponse ListRegisteredScaDevices(string paymentInstrumentId, int? pageNumber = default, int? pageSize = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a list of registered SCA devices
        /// </summary>
        /// <param name="paymentInstrumentId"><see cref="string"/> - The unique identifier of a payment instrument. It limits the returned list to SCA devices associated to this payment instrument.</param>
        /// <param name="pageNumber"><see cref="int?"/> - The index of the page to retrieve. The index of the first page is 0 (zero).  Default: 0.</param>
        /// <param name="pageSize"><see cref="int?"/> - The number of items to have on a page.  Default: 20. Maximum: 100.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="SearchRegisteredDevicesResponse"/>.</returns>
        Task<Model.BalancePlatform.SearchRegisteredDevicesResponse> ListRegisteredScaDevicesAsync(string paymentInstrumentId, int? pageNumber = default, int? pageSize = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the ManageSCADevicesService API endpoints
    /// </summary>
    public class ManageSCADevicesService : AbstractService, IManageSCADevicesService
    {
        private readonly string _baseUrl;
        
        public ManageSCADevicesService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://balanceplatform-api-test.adyen.com/bcl/v2");
        }
        
        public Model.BalancePlatform.RegisterSCAFinalResponse CompleteRegistrationOfScaDevice(string id, RegisterSCARequest registerSCARequest = default, RequestOptions requestOptions = default)
        {
            return CompleteRegistrationOfScaDeviceAsync(id, registerSCARequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.RegisterSCAFinalResponse> CompleteRegistrationOfScaDeviceAsync(string id, RegisterSCARequest registerSCARequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/registeredDevices/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.RegisterSCAFinalResponse>(registerSCARequest.ToJson(), requestOptions, new HttpMethod("PATCH"), cancellationToken).ConfigureAwait(false);
        }
        
        public void DeleteRegistrationOfScaDevice(string id, string paymentInstrumentId, RequestOptions requestOptions = default)
        {
            DeleteRegistrationOfScaDeviceAsync(id, paymentInstrumentId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task DeleteRegistrationOfScaDeviceAsync(string id, string paymentInstrumentId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            queryParams.Add("paymentInstrumentId", paymentInstrumentId);
            var endpoint = _baseUrl + $"/registeredDevices/{id}" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(null, requestOptions, new HttpMethod("DELETE"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.BalancePlatform.RegisterSCAResponse InitiateRegistrationOfScaDevice(RegisterSCARequest registerSCARequest = default, RequestOptions requestOptions = default)
        {
            return InitiateRegistrationOfScaDeviceAsync(registerSCARequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.RegisterSCAResponse> InitiateRegistrationOfScaDeviceAsync(RegisterSCARequest registerSCARequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/registeredDevices";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.RegisterSCAResponse>(registerSCARequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.BalancePlatform.SearchRegisteredDevicesResponse ListRegisteredScaDevices(string paymentInstrumentId, int? pageNumber = default, int? pageSize = default, RequestOptions requestOptions = default)
        {
            return ListRegisteredScaDevicesAsync(paymentInstrumentId, pageNumber, pageSize, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.SearchRegisteredDevicesResponse> ListRegisteredScaDevicesAsync(string paymentInstrumentId, int? pageNumber = default, int? pageSize = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            queryParams.Add("paymentInstrumentId", paymentInstrumentId);
            if (pageNumber != null) queryParams.Add("pageNumber", pageNumber.ToString());
            if (pageSize != null) queryParams.Add("pageSize", pageSize.ToString());
            var endpoint = _baseUrl + "/registeredDevices" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.SearchRegisteredDevicesResponse>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
    }
}