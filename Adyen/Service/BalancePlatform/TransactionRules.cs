/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Adyen.Service.Resource;
using Adyen.Model.BalancePlatform;
using Adyen.HttpClient;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionRules : AbstractService
    {
        public TransactionRules(Adyen.Client client) : base(client) {}

        /// <summary>
        /// Delete a transaction rule Deletes a transaction rule.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleId">The unique identifier of the transaction rule.</param>
        /// <returns>TransactionRule</returns>
        public TransactionRule DeleteTransactionRulesTransactionRuleId(string transactionRuleId)
        {
            return DeleteTransactionRulesTransactionRuleIdAsync(transactionRuleId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a transaction rule Deletes a transaction rule.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleId">The unique identifier of the transaction rule.</param>
        /// <returns>Task of TransactionRule</returns>
        public async Task<TransactionRule> DeleteTransactionRulesTransactionRuleIdAsync(string transactionRuleId)
        {
            var resource = new BalancePlatformResource(this, $"/transactionRules/{transactionRuleId}");
            var jsonResult = await resource.RequestAsync(null, null, HttpMethod.Delete);
            return JsonConvert.DeserializeObject<TransactionRule>(jsonResult);
        }

        /// <summary>
        /// Get a transaction rule Returns the details of a transaction rule.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleId">The unique identifier of the transaction rule.</param>
        /// <returns>TransactionRuleResponse</returns>
        public TransactionRuleResponse GetTransactionRulesTransactionRuleId(string transactionRuleId)
        {
            return GetTransactionRulesTransactionRuleIdAsync(transactionRuleId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a transaction rule Returns the details of a transaction rule.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleId">The unique identifier of the transaction rule.</param>
        /// <returns>Task of TransactionRuleResponse</returns>
        public async Task<TransactionRuleResponse> GetTransactionRulesTransactionRuleIdAsync(string transactionRuleId)
        {
            var resource = new BalancePlatformResource(this, $"/transactionRules/{transactionRuleId}");
            var jsonResult = await resource.RequestAsync(null, null, HttpMethod.Get);
            return JsonConvert.DeserializeObject<TransactionRuleResponse>(jsonResult);
        }

        /// <summary>
        /// Update a transaction rule Updates a transaction rule.   * To update only the status of a transaction rule, send only the `status` parameter. All other parameters not provided in the request are left unchanged.  * When updating any other parameter, you need to send all existing resource parameters. If you omit a parameter in the request, that parameter is removed from the resource.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleId">The unique identifier of the transaction rule.</param>
        /// <param name="transactionRuleInfo"> (optional)</param>
        /// <returns>TransactionRule</returns>
        public TransactionRule PatchTransactionRulesTransactionRuleId(string transactionRuleId, TransactionRuleInfo transactionRuleInfo)
        {
            return PatchTransactionRulesTransactionRuleIdAsync(transactionRuleId, transactionRuleInfo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a transaction rule Updates a transaction rule.   * To update only the status of a transaction rule, send only the `status` parameter. All other parameters not provided in the request are left unchanged.  * When updating any other parameter, you need to send all existing resource parameters. If you omit a parameter in the request, that parameter is removed from the resource.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleId">The unique identifier of the transaction rule.</param>
        /// <param name="transactionRuleInfo"> (optional)</param>
        /// <returns>Task of TransactionRule</returns>
        public async Task<TransactionRule> PatchTransactionRulesTransactionRuleIdAsync(string transactionRuleId, TransactionRuleInfo transactionRuleInfo)
        {
            var httpMethod = new HttpMethod("PATCH");
            string jsonRequest = transactionRuleInfo.ToJson();
            var resource = new BalancePlatformResource(this, $"/transactionRules/{transactionRuleId}");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<TransactionRule>(jsonResult);
        }

        /// <summary>
        /// Create a transaction rule Creates a [transaction rule](https://docs.adyen.com/issuing/transaction-rules). When your user makes a transaction with their Adyen-issued card, the transaction is allowed or declined based on the conditions and outcome defined in the transaction rule. You can apply the transaction rule to several cards, such as all the cards in your platform, or to a specific card. For use cases, see [examples](https://docs.adyen.com/issuing/transaction-rules/examples).
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleInfo"> (optional)</param>
        /// <returns>TransactionRule</returns>
        public TransactionRule PostTransactionRules(TransactionRuleInfo transactionRuleInfo)
        {
            return PostTransactionRulesAsync(transactionRuleInfo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a transaction rule Creates a [transaction rule](https://docs.adyen.com/issuing/transaction-rules). When your user makes a transaction with their Adyen-issued card, the transaction is allowed or declined based on the conditions and outcome defined in the transaction rule. You can apply the transaction rule to several cards, such as all the cards in your platform, or to a specific card. For use cases, see [examples](https://docs.adyen.com/issuing/transaction-rules/examples).
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleInfo"> (optional)</param>
        /// <returns>Task of TransactionRule</returns>
        public async Task<TransactionRule> PostTransactionRulesAsync(TransactionRuleInfo transactionRuleInfo)
        {
            string jsonRequest = transactionRuleInfo.ToJson();
            var resource = new BalancePlatformResource(this, $"/transactionRules");
            var jsonResult = await resource.RequestAsync(jsonRequest);
            return JsonConvert.DeserializeObject<TransactionRule>(jsonResult);
        }

    }
}