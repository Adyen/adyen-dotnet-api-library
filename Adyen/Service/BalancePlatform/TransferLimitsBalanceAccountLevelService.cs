/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.BalancePlatform;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// TransferLimitsBalanceAccountLevelService Interface
    /// </summary>
    public interface ITransferLimitsBalanceAccountLevelService
    {
        /// <summary>
        /// Approve pending transfer limits
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the balance account.</param>
        /// <param name="approveTransferLimitRequest"><see cref="ApproveTransferLimitRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        void ApprovePendingTransferLimits(string id, ApproveTransferLimitRequest approveTransferLimitRequest, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Approve pending transfer limits
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the balance account.</param>
        /// <param name="approveTransferLimitRequest"><see cref="ApproveTransferLimitRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        Task ApprovePendingTransferLimitsAsync(string id, ApproveTransferLimitRequest approveTransferLimitRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Create a transfer limit
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the balance account.</param>
        /// <param name="createTransferLimitRequest"><see cref="CreateTransferLimitRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TransferLimit"/>.</returns>
        Model.BalancePlatform.TransferLimit CreateTransferLimit(string id, CreateTransferLimitRequest createTransferLimitRequest, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create a transfer limit
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the balance account.</param>
        /// <param name="createTransferLimitRequest"><see cref="CreateTransferLimitRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TransferLimit"/>.</returns>
        Task<Model.BalancePlatform.TransferLimit> CreateTransferLimitAsync(string id, CreateTransferLimitRequest createTransferLimitRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete a scheduled or pending transfer limit
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the balance account.</param>
        /// <param name="transferLimitId"><see cref="string"/> - The unique identifier of the transfer limit.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        void DeletePendingTransferLimit(string id, string transferLimitId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete a scheduled or pending transfer limit
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the balance account.</param>
        /// <param name="transferLimitId"><see cref="string"/> - The unique identifier of the transfer limit.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        Task DeletePendingTransferLimitAsync(string id, string transferLimitId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get all current transfer limits
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the balance account.</param>
        /// <param name="scope"><see cref="Scope"/> - The scope to which the transfer limit applies. Possible values: * **perTransaction**: you set a maximum amount for each transfer made from the balance account or balance platform. * **perDay**: you set a maximum total amount for all transfers made from the balance account or balance platform in a day.</param>
        /// <param name="transferType"><see cref="TransferType"/> - The type of transfer to which the limit applies. Possible values: * **instant**: the limit applies to transfers with an **instant** priority. * **all**: the limit applies to all transfers, regardless of priority.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TransferLimitListResponse"/>.</returns>
        Model.BalancePlatform.TransferLimitListResponse GetCurrentTransferLimits(string id, Scope scope = default, TransferType transferType = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get all current transfer limits
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the balance account.</param>
        /// <param name="scope"><see cref="Scope"/> - The scope to which the transfer limit applies. Possible values: * **perTransaction**: you set a maximum amount for each transfer made from the balance account or balance platform. * **perDay**: you set a maximum total amount for all transfers made from the balance account or balance platform in a day.</param>
        /// <param name="transferType"><see cref="TransferType"/> - The type of transfer to which the limit applies. Possible values: * **instant**: the limit applies to transfers with an **instant** priority. * **all**: the limit applies to all transfers, regardless of priority.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TransferLimitListResponse"/>.</returns>
        Task<Model.BalancePlatform.TransferLimitListResponse> GetCurrentTransferLimitsAsync(string id, Scope scope = default, TransferType transferType = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get the details of a transfer limit
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the balance account.</param>
        /// <param name="transferLimitId"><see cref="string"/> - The unique identifier of the transfer limit.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TransferLimit"/>.</returns>
        Model.BalancePlatform.TransferLimit GetSpecificTransferLimit(string id, string transferLimitId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get the details of a transfer limit
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the balance account.</param>
        /// <param name="transferLimitId"><see cref="string"/> - The unique identifier of the transfer limit.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TransferLimit"/>.</returns>
        Task<Model.BalancePlatform.TransferLimit> GetSpecificTransferLimitAsync(string id, string transferLimitId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Filter and view the transfer limits
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the balance account.</param>
        /// <param name="scope"><see cref="Scope"/> - The scope to which the transfer limit applies. Possible values: * **perTransaction**: you set a maximum amount for each transfer made from the balance account or balance platform. * **perDay**: you set a maximum total amount for all transfers made from the balance account or balance platform in a day.</param>
        /// <param name="transferType"><see cref="TransferType"/> - The type of transfer to which the limit applies. Possible values: * **instant**: the limit applies to transfers with an **instant** priority. * **all**: the limit applies to all transfers, regardless of priority.</param>
        /// <param name="status"><see cref="LimitStatus"/> - The status of the transfer limit. Possible values:    * **active**: the limit is currently active. * **inactive**: the limit is currently inactive. * **pendingSCA**: the limit is pending until your user performs SCA. * **scheduled**: the limit is scheduled to become active at a future date.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TransferLimitListResponse"/>.</returns>
        Model.BalancePlatform.TransferLimitListResponse GetTransferLimits(string id, Scope scope = default, TransferType transferType = default, LimitStatus status = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Filter and view the transfer limits
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the balance account.</param>
        /// <param name="scope"><see cref="Scope"/> - The scope to which the transfer limit applies. Possible values: * **perTransaction**: you set a maximum amount for each transfer made from the balance account or balance platform. * **perDay**: you set a maximum total amount for all transfers made from the balance account or balance platform in a day.</param>
        /// <param name="transferType"><see cref="TransferType"/> - The type of transfer to which the limit applies. Possible values: * **instant**: the limit applies to transfers with an **instant** priority. * **all**: the limit applies to all transfers, regardless of priority.</param>
        /// <param name="status"><see cref="LimitStatus"/> - The status of the transfer limit. Possible values:    * **active**: the limit is currently active. * **inactive**: the limit is currently inactive. * **pendingSCA**: the limit is pending until your user performs SCA. * **scheduled**: the limit is scheduled to become active at a future date.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TransferLimitListResponse"/>.</returns>
        Task<Model.BalancePlatform.TransferLimitListResponse> GetTransferLimitsAsync(string id, Scope scope = default, TransferType transferType = default, LimitStatus status = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the TransferLimitsBalanceAccountLevelService API endpoints
    /// </summary>
    public class TransferLimitsBalanceAccountLevelService : AbstractService, ITransferLimitsBalanceAccountLevelService
    {
        private readonly string _baseUrl;
        
        public TransferLimitsBalanceAccountLevelService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://balanceplatform-api-test.adyen.com/bcl/v2");
        }
        
        public void ApprovePendingTransferLimits(string id, ApproveTransferLimitRequest approveTransferLimitRequest, RequestOptions requestOptions = default)
        {
            ApprovePendingTransferLimitsAsync(id, approveTransferLimitRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task ApprovePendingTransferLimitsAsync(string id, ApproveTransferLimitRequest approveTransferLimitRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/balanceAccounts/{id}/transferLimits/approve";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(approveTransferLimitRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.BalancePlatform.TransferLimit CreateTransferLimit(string id, CreateTransferLimitRequest createTransferLimitRequest, RequestOptions requestOptions = default)
        {
            return CreateTransferLimitAsync(id, createTransferLimitRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.TransferLimit> CreateTransferLimitAsync(string id, CreateTransferLimitRequest createTransferLimitRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/balanceAccounts/{id}/transferLimits";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.TransferLimit>(createTransferLimitRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public void DeletePendingTransferLimit(string id, string transferLimitId, RequestOptions requestOptions = default)
        {
            DeletePendingTransferLimitAsync(id, transferLimitId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task DeletePendingTransferLimitAsync(string id, string transferLimitId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/balanceAccounts/{id}/transferLimits/{transferLimitId}";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(null, requestOptions, new HttpMethod("DELETE"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.BalancePlatform.TransferLimitListResponse GetCurrentTransferLimits(string id, Scope scope = default, TransferType transferType = default, RequestOptions requestOptions = default)
        {
            return GetCurrentTransferLimitsAsync(id, scope, transferType, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.TransferLimitListResponse> GetCurrentTransferLimitsAsync(string id, Scope scope = default, TransferType transferType = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (scope != null) queryParams.Add("scope", scope.ToString());
            if (transferType != null) queryParams.Add("transferType", transferType.ToString());
            var endpoint = _baseUrl + $"/balanceAccounts/{id}/transferLimits/current" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.TransferLimitListResponse>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.BalancePlatform.TransferLimit GetSpecificTransferLimit(string id, string transferLimitId, RequestOptions requestOptions = default)
        {
            return GetSpecificTransferLimitAsync(id, transferLimitId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.TransferLimit> GetSpecificTransferLimitAsync(string id, string transferLimitId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/balanceAccounts/{id}/transferLimits/{transferLimitId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.TransferLimit>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.BalancePlatform.TransferLimitListResponse GetTransferLimits(string id, Scope scope = default, TransferType transferType = default, LimitStatus status = default, RequestOptions requestOptions = default)
        {
            return GetTransferLimitsAsync(id, scope, transferType, status, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.TransferLimitListResponse> GetTransferLimitsAsync(string id, Scope scope = default, TransferType transferType = default, LimitStatus status = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (scope != null) queryParams.Add("scope", scope.ToString());
            if (transferType != null) queryParams.Add("transferType", transferType.ToString());
            if (status != null) queryParams.Add("status", status.ToString());
            var endpoint = _baseUrl + $"/balanceAccounts/{id}/transferLimits" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.TransferLimitListResponse>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
    }
}