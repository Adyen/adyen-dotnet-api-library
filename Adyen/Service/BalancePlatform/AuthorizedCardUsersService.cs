/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.BalancePlatform;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// AuthorizedCardUsersService Interface
    /// </summary>
    public interface IAuthorizedCardUsersService
    {
        /// <summary>
        /// Create authorized users for a card.
        /// </summary>
        /// <param name="paymentInstrumentId"><see cref="string"/> - </param>
        /// <param name="authorisedCardUsers"><see cref="AuthorisedCardUsers"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        void CreateAuthorisedCardUsers(string paymentInstrumentId, AuthorisedCardUsers authorisedCardUsers, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create authorized users for a card.
        /// </summary>
        /// <param name="paymentInstrumentId"><see cref="string"/> - </param>
        /// <param name="authorisedCardUsers"><see cref="AuthorisedCardUsers"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        Task CreateAuthorisedCardUsersAsync(string paymentInstrumentId, AuthorisedCardUsers authorisedCardUsers, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete the authorized users for a card.
        /// </summary>
        /// <param name="paymentInstrumentId"><see cref="string"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        void DeleteAuthorisedCardUsers(string paymentInstrumentId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete the authorized users for a card.
        /// </summary>
        /// <param name="paymentInstrumentId"><see cref="string"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        Task DeleteAuthorisedCardUsersAsync(string paymentInstrumentId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get authorized users for a card.
        /// </summary>
        /// <param name="paymentInstrumentId"><see cref="string"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="AuthorisedCardUsers"/>.</returns>
        Model.BalancePlatform.AuthorisedCardUsers GetAllAuthorisedCardUsers(string paymentInstrumentId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get authorized users for a card.
        /// </summary>
        /// <param name="paymentInstrumentId"><see cref="string"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="AuthorisedCardUsers"/>.</returns>
        Task<Model.BalancePlatform.AuthorisedCardUsers> GetAllAuthorisedCardUsersAsync(string paymentInstrumentId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update the authorized users for a card.
        /// </summary>
        /// <param name="paymentInstrumentId"><see cref="string"/> - </param>
        /// <param name="authorisedCardUsers"><see cref="AuthorisedCardUsers"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        void UpdateAuthorisedCardUsers(string paymentInstrumentId, AuthorisedCardUsers authorisedCardUsers, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update the authorized users for a card.
        /// </summary>
        /// <param name="paymentInstrumentId"><see cref="string"/> - </param>
        /// <param name="authorisedCardUsers"><see cref="AuthorisedCardUsers"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        Task UpdateAuthorisedCardUsersAsync(string paymentInstrumentId, AuthorisedCardUsers authorisedCardUsers, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the AuthorizedCardUsersService API endpoints
    /// </summary>
    public class AuthorizedCardUsersService : AbstractService, IAuthorizedCardUsersService
    {
        private readonly string _baseUrl;
        
        public AuthorizedCardUsersService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://balanceplatform-api-test.adyen.com/bcl/v2");
        }
        
        public void CreateAuthorisedCardUsers(string paymentInstrumentId, AuthorisedCardUsers authorisedCardUsers, RequestOptions requestOptions = default)
        {
            CreateAuthorisedCardUsersAsync(paymentInstrumentId, authorisedCardUsers, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task CreateAuthorisedCardUsersAsync(string paymentInstrumentId, AuthorisedCardUsers authorisedCardUsers, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/paymentInstruments/{paymentInstrumentId}/authorisedCardUsers";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(authorisedCardUsers.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public void DeleteAuthorisedCardUsers(string paymentInstrumentId, RequestOptions requestOptions = default)
        {
            DeleteAuthorisedCardUsersAsync(paymentInstrumentId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task DeleteAuthorisedCardUsersAsync(string paymentInstrumentId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/paymentInstruments/{paymentInstrumentId}/authorisedCardUsers";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(null, requestOptions, new HttpMethod("DELETE"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.BalancePlatform.AuthorisedCardUsers GetAllAuthorisedCardUsers(string paymentInstrumentId, RequestOptions requestOptions = default)
        {
            return GetAllAuthorisedCardUsersAsync(paymentInstrumentId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.AuthorisedCardUsers> GetAllAuthorisedCardUsersAsync(string paymentInstrumentId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/paymentInstruments/{paymentInstrumentId}/authorisedCardUsers";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.AuthorisedCardUsers>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public void UpdateAuthorisedCardUsers(string paymentInstrumentId, AuthorisedCardUsers authorisedCardUsers, RequestOptions requestOptions = default)
        {
            UpdateAuthorisedCardUsersAsync(paymentInstrumentId, authorisedCardUsers, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task UpdateAuthorisedCardUsersAsync(string paymentInstrumentId, AuthorisedCardUsers authorisedCardUsers, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/paymentInstruments/{paymentInstrumentId}/authorisedCardUsers";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(authorisedCardUsers.ToJson(), requestOptions, new HttpMethod("PATCH"), cancellationToken).ConfigureAwait(false);
        }
    }
}