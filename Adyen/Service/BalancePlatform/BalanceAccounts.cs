/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Adyen.Service.Resource;
using Adyen.Model.BalancePlatform;
using Adyen.HttpClient;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BalanceAccounts : AbstractService
    {
        public BalanceAccounts(Adyen.Client client) : base(client) {}

        /// <summary>
        /// Delete a sweep Deletes a sweep for a balance account.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepId">The unique identifier of the sweep.</param>
        /// <returns></returns>
        public void DeleteBalanceAccountsBalanceAccountIdSweepsSweepId(string balanceAccountId, string sweepId)
        {
            DeleteBalanceAccountsBalanceAccountIdSweepsSweepIdAsync(balanceAccountId, sweepId);
        }

        /// <summary>
        /// Delete a sweep Deletes a sweep for a balance account.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepId">The unique identifier of the sweep.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteBalanceAccountsBalanceAccountIdSweepsSweepIdAsync(string balanceAccountId, string sweepId)
        {
            var resource = new BalancePlatformResource(this, $"/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}");
            await resource.RequestAsync(null, null, HttpMethod.Delete);
        }

        /// <summary>
        /// Get all sweeps for a balance account Returns a list of the sweeps configured for a balance account.  To fetch multiple pages, use the query parameters. For example, to limit the page to 5 sweeps and to skip the first 10, use `/balanceAccounts/{balanceAccountId}/sweeps?limit=5&offset=10`.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="offset">The number of items that you want to skip. (optional)</param>
        /// <param name="limit">The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page. (optional)</param>
        /// <returns>BalanceSweepConfigurationsResponse</returns>
        public BalanceSweepConfigurationsResponse GetBalanceAccountsBalanceAccountIdSweeps(string balanceAccountId, int? offset = default(int?), int? limit = default(int?))
        {
            return GetBalanceAccountsBalanceAccountIdSweepsAsync(balanceAccountId, offset, limit).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all sweeps for a balance account Returns a list of the sweeps configured for a balance account.  To fetch multiple pages, use the query parameters. For example, to limit the page to 5 sweeps and to skip the first 10, use `/balanceAccounts/{balanceAccountId}/sweeps?limit=5&offset=10`.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="offset">The number of items that you want to skip. (optional)</param>
        /// <param name="limit">The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page. (optional)</param>
        /// <returns>Task of BalanceSweepConfigurationsResponse</returns>
        public async Task<BalanceSweepConfigurationsResponse> GetBalanceAccountsBalanceAccountIdSweepsAsync(string balanceAccountId, int? offset = default(int?), int? limit = default(int?))
        {
            var resource = new BalancePlatformResource(this, $"/balanceAccounts/{balanceAccountId}/sweeps");
            var jsonResult = await resource.RequestAsync(null, null, HttpMethod.Get);
            return JsonConvert.DeserializeObject<BalanceSweepConfigurationsResponse>(jsonResult);
        }

        /// <summary>
        /// Get a sweep Returns a sweep.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepId">The unique identifier of the sweep.</param>
        /// <returns>SweepConfigurationV2</returns>
        public SweepConfigurationV2 GetBalanceAccountsBalanceAccountIdSweepsSweepId(string balanceAccountId, string sweepId)
        {
            return GetBalanceAccountsBalanceAccountIdSweepsSweepIdAsync(balanceAccountId, sweepId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a sweep Returns a sweep.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepId">The unique identifier of the sweep.</param>
        /// <returns>Task of SweepConfigurationV2</returns>
        public async Task<SweepConfigurationV2> GetBalanceAccountsBalanceAccountIdSweepsSweepIdAsync(string balanceAccountId, string sweepId)
        {
            var resource = new BalancePlatformResource(this, $"/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}");
            var jsonResult = await resource.RequestAsync(null, null, HttpMethod.Get);
            return JsonConvert.DeserializeObject<SweepConfigurationV2>(jsonResult);
        }

        /// <summary>
        /// Get a balance account Returns a balance account.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the balance account.</param>
        /// <returns>BalanceAccount</returns>
        public BalanceAccount GetBalanceAccountsId(string id)
        {
            return GetBalanceAccountsIdAsync(id).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a balance account Returns a balance account.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the balance account.</param>
        /// <returns>Task of BalanceAccount</returns>
        public async Task<BalanceAccount> GetBalanceAccountsIdAsync(string id)
        {
            var resource = new BalancePlatformResource(this, $"/balanceAccounts/{id}");
            var jsonResult = await resource.RequestAsync(null, null, HttpMethod.Get);
            return JsonConvert.DeserializeObject<BalanceAccount>(jsonResult);
        }

        /// <summary>
        /// Get all payment instruments for a balance account Returns a paginated list of the payment instruments associated with a balance account.   To fetch multiple pages, use the query parameters.For example, to limit the page to 3 payment instruments and to skip the first 6, use `/balanceAccounts/{id}/paymentInstruments?limit=3&offset=6`.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the balance account.</param>
        /// <param name="offset">The number of items that you want to skip. (optional)</param>
        /// <param name="limit">The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page. (optional)</param>
        /// <returns>PaginatedPaymentInstrumentsResponse</returns>
        public PaginatedPaymentInstrumentsResponse GetBalanceAccountsIdPaymentInstruments(string id, int? offset = default(int?), int? limit = default(int?))
        {
            return GetBalanceAccountsIdPaymentInstrumentsAsync(id, offset, limit).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all payment instruments for a balance account Returns a paginated list of the payment instruments associated with a balance account.   To fetch multiple pages, use the query parameters.For example, to limit the page to 3 payment instruments and to skip the first 6, use `/balanceAccounts/{id}/paymentInstruments?limit=3&offset=6`.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the balance account.</param>
        /// <param name="offset">The number of items that you want to skip. (optional)</param>
        /// <param name="limit">The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page. (optional)</param>
        /// <returns>Task of PaginatedPaymentInstrumentsResponse</returns>
        public async Task<PaginatedPaymentInstrumentsResponse> GetBalanceAccountsIdPaymentInstrumentsAsync(string id, int? offset = default(int?), int? limit = default(int?))
        {
            var resource = new BalancePlatformResource(this, $"/balanceAccounts/{id}/paymentInstruments");
            var jsonResult = await resource.RequestAsync(null, null, HttpMethod.Get);
            return JsonConvert.DeserializeObject<PaginatedPaymentInstrumentsResponse>(jsonResult);
        }

        /// <summary>
        /// Update a sweep Updates a sweep. When updating a sweep resource, note that if a request parameter is not provided, the parameter is left unchanged.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepId">The unique identifier of the sweep.</param>
        /// <param name="sweepConfigurationV2"> (optional)</param>
        /// <returns>SweepConfigurationV2</returns>
        public SweepConfigurationV2 PatchBalanceAccountsBalanceAccountIdSweepsSweepId(string balanceAccountId, string sweepId, SweepConfigurationV2 sweepConfigurationV2)
        {
            return PatchBalanceAccountsBalanceAccountIdSweepsSweepIdAsync(balanceAccountId, sweepId, sweepConfigurationV2).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a sweep Updates a sweep. When updating a sweep resource, note that if a request parameter is not provided, the parameter is left unchanged.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepId">The unique identifier of the sweep.</param>
        /// <param name="sweepConfigurationV2"> (optional)</param>
        /// <returns>Task of SweepConfigurationV2</returns>
        public async Task<SweepConfigurationV2> PatchBalanceAccountsBalanceAccountIdSweepsSweepIdAsync(string balanceAccountId, string sweepId, SweepConfigurationV2 sweepConfigurationV2)
        {
            var httpMethod = new HttpMethod("PATCH");
            string jsonRequest = sweepConfigurationV2.ToJson();
            var resource = new BalancePlatformResource(this, $"/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<SweepConfigurationV2>(jsonResult);
        }

        /// <summary>
        /// Update a balance account Updates a balance account.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the balance account.</param>
        /// <param name="balanceAccountUpdateRequest"> (optional)</param>
        /// <returns>BalanceAccount</returns>
        public BalanceAccount PatchBalanceAccountsId(string id, BalanceAccountUpdateRequest balanceAccountUpdateRequest)
        {
            return PatchBalanceAccountsIdAsync(id, balanceAccountUpdateRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a balance account Updates a balance account.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the balance account.</param>
        /// <param name="balanceAccountUpdateRequest"> (optional)</param>
        /// <returns>Task of BalanceAccount</returns>
        public async Task<BalanceAccount> PatchBalanceAccountsIdAsync(string id, BalanceAccountUpdateRequest balanceAccountUpdateRequest)
        {
            var httpMethod = new HttpMethod("PATCH");
            string jsonRequest = balanceAccountUpdateRequest.ToJson();
            var resource = new BalancePlatformResource(this, $"/balanceAccounts/{id}");
            var jsonResult = await resource.RequestAsync(jsonRequest, null, httpMethod);
            return JsonConvert.DeserializeObject<BalanceAccount>(jsonResult);
        }

        /// <summary>
        /// Create a balance account Creates a balance account that holds the funds of the associated account holder.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="balanceAccountInfo"> (optional)</param>
        /// <returns>BalanceAccount</returns>
        public BalanceAccount PostBalanceAccounts(BalanceAccountInfo balanceAccountInfo)
        {
            return PostBalanceAccountsAsync(balanceAccountInfo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a balance account Creates a balance account that holds the funds of the associated account holder.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="balanceAccountInfo"> (optional)</param>
        /// <returns>Task of BalanceAccount</returns>
        public async Task<BalanceAccount> PostBalanceAccountsAsync(BalanceAccountInfo balanceAccountInfo)
        {
            string jsonRequest = balanceAccountInfo.ToJson();
            var resource = new BalancePlatformResource(this, $"/balanceAccounts");
            var jsonResult = await resource.RequestAsync(jsonRequest);
            return JsonConvert.DeserializeObject<BalanceAccount>(jsonResult);
        }

        /// <summary>
        /// Create a sweep Creates a sweep that results in moving funds from or to a balance account.  A sweep pulls in or pushes out funds based on a defined schedule, amount, currency, and a source or a destination.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepConfigurationV2"> (optional)</param>
        /// <returns>SweepConfigurationV2</returns>
        public SweepConfigurationV2 PostBalanceAccountsBalanceAccountIdSweeps(string balanceAccountId, SweepConfigurationV2 sweepConfigurationV2)
        {
            return PostBalanceAccountsBalanceAccountIdSweepsAsync(balanceAccountId, sweepConfigurationV2).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a sweep Creates a sweep that results in moving funds from or to a balance account.  A sweep pulls in or pushes out funds based on a defined schedule, amount, currency, and a source or a destination.
        /// </summary>
        /// <exception cref="HttpClientException">Thrown when fails to make API call</exception>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepConfigurationV2"> (optional)</param>
        /// <returns>Task of SweepConfigurationV2</returns>
        public async Task<SweepConfigurationV2> PostBalanceAccountsBalanceAccountIdSweepsAsync(string balanceAccountId, SweepConfigurationV2 sweepConfigurationV2)
        {
            string jsonRequest = sweepConfigurationV2.ToJson();
            var resource = new BalancePlatformResource(this, $"/balanceAccounts/{balanceAccountId}/sweeps");
            var jsonResult = await resource.RequestAsync(jsonRequest);
            return JsonConvert.DeserializeObject<SweepConfigurationV2>(jsonResult);
        }

    }
}