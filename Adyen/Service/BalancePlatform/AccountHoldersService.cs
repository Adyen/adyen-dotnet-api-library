/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.BalancePlatform;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// AccountHoldersService Interface
    /// </summary>
    public interface IAccountHoldersService
    {
        /// <summary>
        /// Get an account holder
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the account holder.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="AccountHolder"/>.</returns>
        AccountHolder GetAccountHolder(string id, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get an account holder
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the account holder.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="AccountHolder"/>.</returns>
        Task<AccountHolder> GetAccountHolderAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get all balance accounts of an account holder
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the account holder.</param>
        /// <param name="offset"><see cref="int?"/> - The number of items that you want to skip.</param>
        /// <param name="limit"><see cref="int?"/> - The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="PaginatedBalanceAccountsResponse"/>.</returns>
        PaginatedBalanceAccountsResponse GetAllBalanceAccountsOfAccountHolder(string id, int? offset = default, int? limit = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get all balance accounts of an account holder
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the account holder.</param>
        /// <param name="offset"><see cref="int?"/> - The number of items that you want to skip.</param>
        /// <param name="limit"><see cref="int?"/> - The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="PaginatedBalanceAccountsResponse"/>.</returns>
        Task<PaginatedBalanceAccountsResponse> GetAllBalanceAccountsOfAccountHolderAsync(string id, int? offset = default, int? limit = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update an account holder
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the account holder.</param>
        /// <param name="accountHolder"><see cref="AccountHolder"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="AccountHolder"/>.</returns>
        AccountHolder UpdateAccountHolder(string id, AccountHolder accountHolder, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update an account holder
        /// </summary>
        /// <param name="id"><see cref="string"/> - The unique identifier of the account holder.</param>
        /// <param name="accountHolder"><see cref="AccountHolder"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="AccountHolder"/>.</returns>
        Task<AccountHolder> UpdateAccountHolderAsync(string id, AccountHolder accountHolder, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Create an account holder
        /// </summary>
        /// <param name="accountHolderInfo"><see cref="AccountHolderInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="AccountHolder"/>.</returns>
        AccountHolder CreateAccountHolder(AccountHolderInfo accountHolderInfo, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create an account holder
        /// </summary>
        /// <param name="accountHolderInfo"><see cref="AccountHolderInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="AccountHolder"/>.</returns>
        Task<AccountHolder> CreateAccountHolderAsync(AccountHolderInfo accountHolderInfo, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the AccountHoldersService API endpoints
    /// </summary>
    public class AccountHoldersService : AbstractService, IAccountHoldersService
    {
        private readonly string _baseUrl;
        
        public AccountHoldersService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://balanceplatform-api-test.adyen.com/bcl/v2");
        }
        
        public AccountHolder GetAccountHolder(string id, RequestOptions requestOptions = default)
        {
            return GetAccountHolderAsync(id, requestOptions).GetAwaiter().GetResult();
        }

        public async Task<AccountHolder> GetAccountHolderAsync(string id, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/accountHolders/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<AccountHolder>(null, requestOptions, new HttpMethod("GET"), cancellationToken);
        }
        
        public PaginatedBalanceAccountsResponse GetAllBalanceAccountsOfAccountHolder(string id, int? offset = default, int? limit = default, RequestOptions requestOptions = default)
        {
            return GetAllBalanceAccountsOfAccountHolderAsync(id, offset, limit, requestOptions).GetAwaiter().GetResult();
        }

        public async Task<PaginatedBalanceAccountsResponse> GetAllBalanceAccountsOfAccountHolderAsync(string id, int? offset = default, int? limit = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (offset != null) queryParams.Add("offset", offset.ToString());
            if (limit != null) queryParams.Add("limit", limit.ToString());
            var endpoint = _baseUrl + $"/accountHolders/{id}/balanceAccounts" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<PaginatedBalanceAccountsResponse>(null, requestOptions, new HttpMethod("GET"), cancellationToken);
        }
        
        public AccountHolder UpdateAccountHolder(string id, AccountHolder accountHolder, RequestOptions requestOptions = default)
        {
            return UpdateAccountHolderAsync(id, accountHolder, requestOptions).GetAwaiter().GetResult();
        }

        public async Task<AccountHolder> UpdateAccountHolderAsync(string id, AccountHolder accountHolder, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/accountHolders/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<AccountHolder>(accountHolder.ToJson(), requestOptions, new HttpMethod("PATCH"), cancellationToken);
        }
        
        public AccountHolder CreateAccountHolder(AccountHolderInfo accountHolderInfo, RequestOptions requestOptions = default)
        {
            return CreateAccountHolderAsync(accountHolderInfo, requestOptions).GetAwaiter().GetResult();
        }

        public async Task<AccountHolder> CreateAccountHolderAsync(AccountHolderInfo accountHolderInfo, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/accountHolders";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<AccountHolder>(accountHolderInfo.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken);
        }
    }
}