/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.BalancePlatform;
using Newtonsoft.Json;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AccountHoldersService : AbstractService
    {
        private readonly string _baseUrl;
        
        public AccountHoldersService(Client client) : base(client)
        {
            _baseUrl = client.Config.BalancePlatformEndpoint + "/" + ClientConfig.BalancePlatformVersion;
        }
    
        /// <summary>
        /// Get an account holder
        /// </summary>
        /// <param name="id">The unique identifier of the account holder.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>AccountHolder</returns>
        public AccountHolder GetAccountHolder(string id, RequestOptions requestOptions = default)
        {
            return GetAccountHolderAsync(id, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an account holder
        /// </summary>
        /// <param name="id">The unique identifier of the account holder.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of AccountHolder</returns>
        public async Task<AccountHolder> GetAccountHolderAsync(string id, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/accountHolders/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<AccountHolder>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Get all balance accounts of an account holder
        /// </summary>
        /// <param name="id">The unique identifier of the account holder.</param>
        /// <param name="offset">The number of items that you want to skip.</param>
        /// <param name="limit">The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>PaginatedBalanceAccountsResponse</returns>
        public PaginatedBalanceAccountsResponse GetAllBalanceAccountsOfAccountHolder(string id, int? offset = default, int? limit = default, RequestOptions requestOptions = default)
        {
            return GetAllBalanceAccountsOfAccountHolderAsync(id, offset, limit, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all balance accounts of an account holder
        /// </summary>
        /// <param name="id">The unique identifier of the account holder.</param>
        /// <param name="offset">The number of items that you want to skip.</param>
        /// <param name="limit">The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of PaginatedBalanceAccountsResponse</returns>
        public async Task<PaginatedBalanceAccountsResponse> GetAllBalanceAccountsOfAccountHolderAsync(string id, int? offset = default, int? limit = default, RequestOptions requestOptions = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (offset != null) queryParams.Add("offset", offset.ToString());
            if (limit != null) queryParams.Add("limit", limit.ToString());
            var endpoint = _baseUrl + $"/accountHolders/{id}/balanceAccounts" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<PaginatedBalanceAccountsResponse>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Update an account holder
        /// </summary>
        /// <param name="id">The unique identifier of the account holder.</param>
        /// <param name="accountHolder"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>AccountHolder</returns>
        public AccountHolder UpdateAccountHolder(string id, AccountHolder accountHolder, RequestOptions requestOptions = default)
        {
            return UpdateAccountHolderAsync(id, accountHolder, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update an account holder
        /// </summary>
        /// <param name="id">The unique identifier of the account holder.</param>
        /// <param name="accountHolder"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of AccountHolder</returns>
        public async Task<AccountHolder> UpdateAccountHolderAsync(string id, AccountHolder accountHolder, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/accountHolders/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<AccountHolder>(accountHolder.ToJson(), requestOptions, new HttpMethod("PATCH"));
        }

        /// <summary>
        /// Create an account holder
        /// </summary>
        /// <param name="accountHolderInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>AccountHolder</returns>
        public AccountHolder CreateAccountHolder(AccountHolderInfo accountHolderInfo, RequestOptions requestOptions = default)
        {
            return CreateAccountHolderAsync(accountHolderInfo, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create an account holder
        /// </summary>
        /// <param name="accountHolderInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of AccountHolder</returns>
        public async Task<AccountHolder> CreateAccountHolderAsync(AccountHolderInfo accountHolderInfo, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/accountHolders";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<AccountHolder>(accountHolderInfo.ToJson(), requestOptions, new HttpMethod("POST"));
        }

    }
}