/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.BalancePlatform;
using Newtonsoft.Json;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BalanceAccountsApi : AbstractService
    {
        public BalanceAccountsApi(Client client) : base(client) {}
    
        /// <summary>
        /// Delete a sweep
        /// </summary>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepId">The unique identifier of the sweep.</param>
        /// <param name="requestOptions">Additional request options.</param>
        public void DeleteBalanceAccountsBalanceAccountIdSweepsSweepId(string balanceAccountId, string sweepId, RequestOptions requestOptions = default)
        {
            DeleteBalanceAccountsBalanceAccountIdSweepsSweepIdAsync(balanceAccountId, sweepId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a sweep
        /// </summary>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepId">The unique identifier of the sweep.</param>
        /// <param name="requestOptions">Additional request options.</param>
        public async Task DeleteBalanceAccountsBalanceAccountIdSweepsSweepIdAsync(string balanceAccountId, string sweepId, RequestOptions requestOptions = default)
        {
            var endpoint = $"/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}";
            var resource = new BalancePlatformResource(this, endpoint);
            await resource.RequestAsync(null, requestOptions, new HttpMethod("DELETE"));
        }

        /// <summary>
        /// Get all sweeps for a balance account
        /// </summary>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="offset">The number of items that you want to skip.</param>
        /// <param name="limit">The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>BalanceSweepConfigurationsResponse</returns>
        public BalanceSweepConfigurationsResponse GetBalanceAccountsBalanceAccountIdSweeps(string balanceAccountId, int? offset = default, int? limit = default, RequestOptions requestOptions = default)
        {
            return GetBalanceAccountsBalanceAccountIdSweepsAsync(balanceAccountId, offset, limit, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all sweeps for a balance account
        /// </summary>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="offset">The number of items that you want to skip.</param>
        /// <param name="limit">The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of BalanceSweepConfigurationsResponse</returns>
        public async Task<BalanceSweepConfigurationsResponse> GetBalanceAccountsBalanceAccountIdSweepsAsync(string balanceAccountId, int? offset = default, int? limit = default, RequestOptions requestOptions = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (offset != null) queryParams.Add("offset", offset.ToString());
            if (limit != null) queryParams.Add("limit", limit.ToString());
            var endpoint = $"/balanceAccounts/{balanceAccountId}/sweeps" + ToQueryString(queryParams);
            var resource = new BalancePlatformResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<BalanceSweepConfigurationsResponse>(jsonResult);
        }

        /// <summary>
        /// Get a sweep
        /// </summary>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepId">The unique identifier of the sweep.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>SweepConfigurationV2</returns>
        public SweepConfigurationV2 GetBalanceAccountsBalanceAccountIdSweepsSweepId(string balanceAccountId, string sweepId, RequestOptions requestOptions = default)
        {
            return GetBalanceAccountsBalanceAccountIdSweepsSweepIdAsync(balanceAccountId, sweepId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a sweep
        /// </summary>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepId">The unique identifier of the sweep.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of SweepConfigurationV2</returns>
        public async Task<SweepConfigurationV2> GetBalanceAccountsBalanceAccountIdSweepsSweepIdAsync(string balanceAccountId, string sweepId, RequestOptions requestOptions = default)
        {
            var endpoint = $"/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}";
            var resource = new BalancePlatformResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<SweepConfigurationV2>(jsonResult);
        }

        /// <summary>
        /// Get a balance account
        /// </summary>
        /// <param name="id">The unique identifier of the balance account.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>BalanceAccount</returns>
        public BalanceAccount GetBalanceAccountsId(string id, RequestOptions requestOptions = default)
        {
            return GetBalanceAccountsIdAsync(id, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a balance account
        /// </summary>
        /// <param name="id">The unique identifier of the balance account.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of BalanceAccount</returns>
        public async Task<BalanceAccount> GetBalanceAccountsIdAsync(string id, RequestOptions requestOptions = default)
        {
            var endpoint = $"/balanceAccounts/{id}";
            var resource = new BalancePlatformResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<BalanceAccount>(jsonResult);
        }

        /// <summary>
        /// Get all payment instruments for a balance account
        /// </summary>
        /// <param name="id">The unique identifier of the balance account.</param>
        /// <param name="offset">The number of items that you want to skip.</param>
        /// <param name="limit">The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>PaginatedPaymentInstrumentsResponse</returns>
        public PaginatedPaymentInstrumentsResponse GetBalanceAccountsIdPaymentInstruments(string id, int? offset = default, int? limit = default, RequestOptions requestOptions = default)
        {
            return GetBalanceAccountsIdPaymentInstrumentsAsync(id, offset, limit, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all payment instruments for a balance account
        /// </summary>
        /// <param name="id">The unique identifier of the balance account.</param>
        /// <param name="offset">The number of items that you want to skip.</param>
        /// <param name="limit">The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of PaginatedPaymentInstrumentsResponse</returns>
        public async Task<PaginatedPaymentInstrumentsResponse> GetBalanceAccountsIdPaymentInstrumentsAsync(string id, int? offset = default, int? limit = default, RequestOptions requestOptions = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (offset != null) queryParams.Add("offset", offset.ToString());
            if (limit != null) queryParams.Add("limit", limit.ToString());
            var endpoint = $"/balanceAccounts/{id}/paymentInstruments" + ToQueryString(queryParams);
            var resource = new BalancePlatformResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(null, requestOptions, new HttpMethod("GET"));
            return JsonConvert.DeserializeObject<PaginatedPaymentInstrumentsResponse>(jsonResult);
        }

        /// <summary>
        /// Update a sweep
        /// </summary>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepId">The unique identifier of the sweep.</param>
        /// <param name="sweepConfigurationV2"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>SweepConfigurationV2</returns>
        public SweepConfigurationV2 PatchBalanceAccountsBalanceAccountIdSweepsSweepId(string balanceAccountId, string sweepId, SweepConfigurationV2 sweepConfigurationV2, RequestOptions requestOptions = default)
        {
            return PatchBalanceAccountsBalanceAccountIdSweepsSweepIdAsync(balanceAccountId, sweepId, sweepConfigurationV2, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a sweep
        /// </summary>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepId">The unique identifier of the sweep.</param>
        /// <param name="sweepConfigurationV2"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of SweepConfigurationV2</returns>
        public async Task<SweepConfigurationV2> PatchBalanceAccountsBalanceAccountIdSweepsSweepIdAsync(string balanceAccountId, string sweepId, SweepConfigurationV2 sweepConfigurationV2, RequestOptions requestOptions = default)
        {
            var endpoint = $"/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}";
            var resource = new BalancePlatformResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(sweepConfigurationV2.ToJson(), requestOptions, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<SweepConfigurationV2>(jsonResult);
        }

        /// <summary>
        /// Update a balance account
        /// </summary>
        /// <param name="id">The unique identifier of the balance account.</param>
        /// <param name="balanceAccountUpdateRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>BalanceAccount</returns>
        public BalanceAccount PatchBalanceAccountsId(string id, BalanceAccountUpdateRequest balanceAccountUpdateRequest, RequestOptions requestOptions = default)
        {
            return PatchBalanceAccountsIdAsync(id, balanceAccountUpdateRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a balance account
        /// </summary>
        /// <param name="id">The unique identifier of the balance account.</param>
        /// <param name="balanceAccountUpdateRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of BalanceAccount</returns>
        public async Task<BalanceAccount> PatchBalanceAccountsIdAsync(string id, BalanceAccountUpdateRequest balanceAccountUpdateRequest, RequestOptions requestOptions = default)
        {
            var endpoint = $"/balanceAccounts/{id}";
            var resource = new BalancePlatformResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(balanceAccountUpdateRequest.ToJson(), requestOptions, new HttpMethod("PATCH"));
            return JsonConvert.DeserializeObject<BalanceAccount>(jsonResult);
        }

        /// <summary>
        /// Create a balance account
        /// </summary>
        /// <param name="balanceAccountInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>BalanceAccount</returns>
        public BalanceAccount PostBalanceAccounts(BalanceAccountInfo balanceAccountInfo, RequestOptions requestOptions = default)
        {
            return PostBalanceAccountsAsync(balanceAccountInfo, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a balance account
        /// </summary>
        /// <param name="balanceAccountInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of BalanceAccount</returns>
        public async Task<BalanceAccount> PostBalanceAccountsAsync(BalanceAccountInfo balanceAccountInfo, RequestOptions requestOptions = default)
        {
            var endpoint = "/balanceAccounts";
            var resource = new BalancePlatformResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(balanceAccountInfo.ToJson(), requestOptions, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<BalanceAccount>(jsonResult);
        }

        /// <summary>
        /// Create a sweep
        /// </summary>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepConfigurationV2"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>SweepConfigurationV2</returns>
        public SweepConfigurationV2 PostBalanceAccountsBalanceAccountIdSweeps(string balanceAccountId, SweepConfigurationV2 sweepConfigurationV2, RequestOptions requestOptions = default)
        {
            return PostBalanceAccountsBalanceAccountIdSweepsAsync(balanceAccountId, sweepConfigurationV2, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a sweep
        /// </summary>
        /// <param name="balanceAccountId">The unique identifier of the balance account.</param>
        /// <param name="sweepConfigurationV2"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of SweepConfigurationV2</returns>
        public async Task<SweepConfigurationV2> PostBalanceAccountsBalanceAccountIdSweepsAsync(string balanceAccountId, SweepConfigurationV2 sweepConfigurationV2, RequestOptions requestOptions = default)
        {
            var endpoint = $"/balanceAccounts/{balanceAccountId}/sweeps";
            var resource = new BalancePlatformResource(this, endpoint);
            var jsonResult = await resource.RequestAsync(sweepConfigurationV2.ToJson(), requestOptions, new HttpMethod("POST"));
            return JsonConvert.DeserializeObject<SweepConfigurationV2>(jsonResult);
        }

    }
}
