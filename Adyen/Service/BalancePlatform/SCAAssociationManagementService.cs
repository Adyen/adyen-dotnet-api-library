/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.BalancePlatform;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// SCAAssociationManagementService Interface
    /// </summary>
    public interface ISCAAssociationManagementService
    {
        /// <summary>
        /// Approve a pending approval association
        /// </summary>
        /// <param name="approveAssociationRequest"><see cref="ApproveAssociationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="ApproveAssociationResponse"/>.</returns>
        Model.BalancePlatform.ApproveAssociationResponse ApproveAssociation(ApproveAssociationRequest approveAssociationRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Approve a pending approval association
        /// </summary>
        /// <param name="approveAssociationRequest"><see cref="ApproveAssociationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="ApproveAssociationResponse"/>.</returns>
        Task<Model.BalancePlatform.ApproveAssociationResponse> ApproveAssociationAsync(ApproveAssociationRequest approveAssociationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a list of devices associated with an entity
        /// </summary>
        /// <param name="entityType"><see cref="ScaEntityType"/> - The type of entity you want to retrieve a list of associations for.   Possible values: **accountHolder** or **paymentInstrument**.</param>
        /// <param name="entityId"><see cref="string"/> - The unique identifier of the entity.</param>
        /// <param name="pageSize"><see cref="int"/> - The number of items to have on a page.   Default: **5**.</param>
        /// <param name="pageNumber"><see cref="int"/> - The index of the page to retrieve. The index of the first page is **0** (zero).   Default:  **0**.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="ListAssociationsResponse"/>.</returns>
        Model.BalancePlatform.ListAssociationsResponse ListAssociations(ScaEntityType entityType, string entityId, int pageSize, int pageNumber, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a list of devices associated with an entity
        /// </summary>
        /// <param name="entityType"><see cref="ScaEntityType"/> - The type of entity you want to retrieve a list of associations for.   Possible values: **accountHolder** or **paymentInstrument**.</param>
        /// <param name="entityId"><see cref="string"/> - The unique identifier of the entity.</param>
        /// <param name="pageSize"><see cref="int"/> - The number of items to have on a page.   Default: **5**.</param>
        /// <param name="pageNumber"><see cref="int"/> - The index of the page to retrieve. The index of the first page is **0** (zero).   Default:  **0**.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="ListAssociationsResponse"/>.</returns>
        Task<Model.BalancePlatform.ListAssociationsResponse> ListAssociationsAsync(ScaEntityType entityType, string entityId, int pageSize, int pageNumber, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete association to devices
        /// </summary>
        /// <param name="removeAssociationRequest"><see cref="RemoveAssociationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        void RemoveAssociation(RemoveAssociationRequest removeAssociationRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete association to devices
        /// </summary>
        /// <param name="removeAssociationRequest"><see cref="RemoveAssociationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        Task RemoveAssociationAsync(RemoveAssociationRequest removeAssociationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the SCAAssociationManagementService API endpoints
    /// </summary>
    public class SCAAssociationManagementService : AbstractService, ISCAAssociationManagementService
    {
        private readonly string _baseUrl;
        
        public SCAAssociationManagementService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://balanceplatform-api-test.adyen.com/bcl/v2");
        }
        
        public Model.BalancePlatform.ApproveAssociationResponse ApproveAssociation(ApproveAssociationRequest approveAssociationRequest = default, RequestOptions requestOptions = default)
        {
            return ApproveAssociationAsync(approveAssociationRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.ApproveAssociationResponse> ApproveAssociationAsync(ApproveAssociationRequest approveAssociationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/scaAssociations";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.ApproveAssociationResponse>(approveAssociationRequest.ToJson(), requestOptions, new HttpMethod("PATCH"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.BalancePlatform.ListAssociationsResponse ListAssociations(ScaEntityType entityType, string entityId, int pageSize, int pageNumber, RequestOptions requestOptions = default)
        {
            return ListAssociationsAsync(entityType, entityId, pageSize, pageNumber, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.ListAssociationsResponse> ListAssociationsAsync(ScaEntityType entityType, string entityId, int pageSize, int pageNumber, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            queryParams.Add("entityType", entityType.ToString());
            queryParams.Add("entityId", entityId);
            queryParams.Add("pageSize", pageSize.ToString());
            queryParams.Add("pageNumber", pageNumber.ToString());
            var endpoint = _baseUrl + "/scaAssociations" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.ListAssociationsResponse>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public void RemoveAssociation(RemoveAssociationRequest removeAssociationRequest = default, RequestOptions requestOptions = default)
        {
            RemoveAssociationAsync(removeAssociationRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task RemoveAssociationAsync(RemoveAssociationRequest removeAssociationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/scaAssociations";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(removeAssociationRequest.ToJson(), requestOptions, new HttpMethod("DELETE"), cancellationToken).ConfigureAwait(false);
        }
    }
}