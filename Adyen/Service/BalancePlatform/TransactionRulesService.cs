/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.BalancePlatform;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// TransactionRulesService Interface
    /// </summary>
    public interface ITransactionRulesService
    {
        /// <summary>
        /// Create a transaction rule
        /// </summary>
        /// <param name="transactionRuleInfo"><see cref="TransactionRuleInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TransactionRule"/>.</returns>
        Model.BalancePlatform.TransactionRule CreateTransactionRule(TransactionRuleInfo transactionRuleInfo = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create a transaction rule
        /// </summary>
        /// <param name="transactionRuleInfo"><see cref="TransactionRuleInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TransactionRule"/>.</returns>
        Task<Model.BalancePlatform.TransactionRule> CreateTransactionRuleAsync(TransactionRuleInfo transactionRuleInfo = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete a transaction rule
        /// </summary>
        /// <param name="transactionRuleId"><see cref="string"/> - The unique identifier of the transaction rule.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TransactionRule"/>.</returns>
        Model.BalancePlatform.TransactionRule DeleteTransactionRule(string transactionRuleId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete a transaction rule
        /// </summary>
        /// <param name="transactionRuleId"><see cref="string"/> - The unique identifier of the transaction rule.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TransactionRule"/>.</returns>
        Task<Model.BalancePlatform.TransactionRule> DeleteTransactionRuleAsync(string transactionRuleId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a transaction rule
        /// </summary>
        /// <param name="transactionRuleId"><see cref="string"/> - The unique identifier of the transaction rule.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TransactionRuleResponse"/>.</returns>
        Model.BalancePlatform.TransactionRuleResponse GetTransactionRule(string transactionRuleId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a transaction rule
        /// </summary>
        /// <param name="transactionRuleId"><see cref="string"/> - The unique identifier of the transaction rule.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TransactionRuleResponse"/>.</returns>
        Task<Model.BalancePlatform.TransactionRuleResponse> GetTransactionRuleAsync(string transactionRuleId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update a transaction rule
        /// </summary>
        /// <param name="transactionRuleId"><see cref="string"/> - The unique identifier of the transaction rule.</param>
        /// <param name="transactionRuleInfo"><see cref="TransactionRuleInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TransactionRule"/>.</returns>
        Model.BalancePlatform.TransactionRule UpdateTransactionRule(string transactionRuleId, TransactionRuleInfo transactionRuleInfo = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update a transaction rule
        /// </summary>
        /// <param name="transactionRuleId"><see cref="string"/> - The unique identifier of the transaction rule.</param>
        /// <param name="transactionRuleInfo"><see cref="TransactionRuleInfo"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TransactionRule"/>.</returns>
        Task<Model.BalancePlatform.TransactionRule> UpdateTransactionRuleAsync(string transactionRuleId, TransactionRuleInfo transactionRuleInfo = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the TransactionRulesService API endpoints
    /// </summary>
    public class TransactionRulesService : AbstractService, ITransactionRulesService
    {
        private readonly string _baseUrl;
        
        public TransactionRulesService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://balanceplatform-api-test.adyen.com/bcl/v2");
        }
        
        public Model.BalancePlatform.TransactionRule CreateTransactionRule(TransactionRuleInfo transactionRuleInfo = default, RequestOptions requestOptions = default)
        {
            return CreateTransactionRuleAsync(transactionRuleInfo, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.TransactionRule> CreateTransactionRuleAsync(TransactionRuleInfo transactionRuleInfo = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/transactionRules";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.TransactionRule>(transactionRuleInfo.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.BalancePlatform.TransactionRule DeleteTransactionRule(string transactionRuleId, RequestOptions requestOptions = default)
        {
            return DeleteTransactionRuleAsync(transactionRuleId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.TransactionRule> DeleteTransactionRuleAsync(string transactionRuleId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/transactionRules/{transactionRuleId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.TransactionRule>(null, requestOptions, new HttpMethod("DELETE"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.BalancePlatform.TransactionRuleResponse GetTransactionRule(string transactionRuleId, RequestOptions requestOptions = default)
        {
            return GetTransactionRuleAsync(transactionRuleId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.TransactionRuleResponse> GetTransactionRuleAsync(string transactionRuleId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/transactionRules/{transactionRuleId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.TransactionRuleResponse>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.BalancePlatform.TransactionRule UpdateTransactionRule(string transactionRuleId, TransactionRuleInfo transactionRuleInfo = default, RequestOptions requestOptions = default)
        {
            return UpdateTransactionRuleAsync(transactionRuleId, transactionRuleInfo, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.TransactionRule> UpdateTransactionRuleAsync(string transactionRuleId, TransactionRuleInfo transactionRuleInfo = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/transactionRules/{transactionRuleId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.TransactionRule>(transactionRuleInfo.ToJson(), requestOptions, new HttpMethod("PATCH"), cancellationToken).ConfigureAwait(false);
        }
    }
}