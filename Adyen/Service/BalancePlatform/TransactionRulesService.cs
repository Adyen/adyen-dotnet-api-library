/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.BalancePlatform;
using Newtonsoft.Json;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TransactionRulesService : AbstractService
    {
        private readonly string _baseUrl;
        
        public TransactionRulesService(Client client) : base(client)
        {
            _baseUrl = client.Config.BalancePlatformEndpoint + "/" + ClientConfig.BalancePlatformVersion;
        }
    
        /// <summary>
        /// Delete a transaction rule
        /// </summary>
        /// <param name="transactionRuleId">The unique identifier of the transaction rule.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TransactionRule</returns>
        public TransactionRule DeleteTransactionRule(string transactionRuleId, RequestOptions requestOptions = default)
        {
            return DeleteTransactionRuleAsync(transactionRuleId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a transaction rule
        /// </summary>
        /// <param name="transactionRuleId">The unique identifier of the transaction rule.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TransactionRule</returns>
        public async Task<TransactionRule> DeleteTransactionRuleAsync(string transactionRuleId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/transactionRules/{transactionRuleId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<TransactionRule>(null, requestOptions, new HttpMethod("DELETE"));
        }

        /// <summary>
        /// Get a transaction rule
        /// </summary>
        /// <param name="transactionRuleId">The unique identifier of the transaction rule.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TransactionRuleResponse</returns>
        public TransactionRuleResponse GetTransactionRule(string transactionRuleId, RequestOptions requestOptions = default)
        {
            return GetTransactionRuleAsync(transactionRuleId, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a transaction rule
        /// </summary>
        /// <param name="transactionRuleId">The unique identifier of the transaction rule.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TransactionRuleResponse</returns>
        public async Task<TransactionRuleResponse> GetTransactionRuleAsync(string transactionRuleId, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/transactionRules/{transactionRuleId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<TransactionRuleResponse>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Update a transaction rule
        /// </summary>
        /// <param name="transactionRuleId">The unique identifier of the transaction rule.</param>
        /// <param name="transactionRuleInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TransactionRule</returns>
        public TransactionRule UpdateTransactionRule(string transactionRuleId, TransactionRuleInfo transactionRuleInfo, RequestOptions requestOptions = default)
        {
            return UpdateTransactionRuleAsync(transactionRuleId, transactionRuleInfo, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a transaction rule
        /// </summary>
        /// <param name="transactionRuleId">The unique identifier of the transaction rule.</param>
        /// <param name="transactionRuleInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TransactionRule</returns>
        public async Task<TransactionRule> UpdateTransactionRuleAsync(string transactionRuleId, TransactionRuleInfo transactionRuleInfo, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/transactionRules/{transactionRuleId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<TransactionRule>(transactionRuleInfo.ToJson(), requestOptions, new HttpMethod("PATCH"));
        }

        /// <summary>
        /// Create a transaction rule
        /// </summary>
        /// <param name="transactionRuleInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TransactionRule</returns>
        public TransactionRule CreateTransactionRule(TransactionRuleInfo transactionRuleInfo, RequestOptions requestOptions = default)
        {
            return CreateTransactionRuleAsync(transactionRuleInfo, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a transaction rule
        /// </summary>
        /// <param name="transactionRuleInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TransactionRule</returns>
        public async Task<TransactionRule> CreateTransactionRuleAsync(TransactionRuleInfo transactionRuleInfo, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/transactionRules";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<TransactionRule>(transactionRuleInfo.ToJson(), requestOptions, new HttpMethod("POST"));
        }

    }
}