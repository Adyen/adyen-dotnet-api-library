/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.BalancePlatform;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// GrantOffersService Interface
    /// </summary>
    public interface IGrantOffersService
    {
        /// <summary>
        /// Get all available grant offers
        /// </summary>
        /// <param name="accountHolderId"><see cref="string"/> - The unique identifier of the grant account.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GrantOffers"/>.</returns>
        Model.BalancePlatform.GrantOffers GetAllAvailableGrantOffers(string accountHolderId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get all available grant offers
        /// </summary>
        /// <param name="accountHolderId"><see cref="string"/> - The unique identifier of the grant account.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GrantOffers"/>.</returns>
        Task<Model.BalancePlatform.GrantOffers> GetAllAvailableGrantOffersAsync(string accountHolderId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a grant offer
        /// </summary>
        /// <param name="grantOfferId"><see cref="string"/> - The unique identifier of the grant offer.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GrantOffer"/>.</returns>
        Model.BalancePlatform.GrantOffer GetGrantOffer(string grantOfferId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a grant offer
        /// </summary>
        /// <param name="grantOfferId"><see cref="string"/> - The unique identifier of the grant offer.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GrantOffer"/>.</returns>
        Task<Model.BalancePlatform.GrantOffer> GetGrantOfferAsync(string grantOfferId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the GrantOffersService API endpoints
    /// </summary>
    public class GrantOffersService : AbstractService, IGrantOffersService
    {
        private readonly string _baseUrl;
        
        public GrantOffersService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://balanceplatform-api-test.adyen.com/bcl/v2");
        }
        
        public Model.BalancePlatform.GrantOffers GetAllAvailableGrantOffers(string accountHolderId, RequestOptions requestOptions = default)
        {
            return GetAllAvailableGrantOffersAsync(accountHolderId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.GrantOffers> GetAllAvailableGrantOffersAsync(string accountHolderId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            queryParams.Add("accountHolderId", accountHolderId);
            var endpoint = _baseUrl + "/grantOffers" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.GrantOffers>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.BalancePlatform.GrantOffer GetGrantOffer(string grantOfferId, RequestOptions requestOptions = default)
        {
            return GetGrantOfferAsync(grantOfferId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.BalancePlatform.GrantOffer> GetGrantOfferAsync(string grantOfferId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/grantOffers/{grantOfferId}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.BalancePlatform.GrantOffer>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
    }
}