/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
using Adyen.Model.BalancePlatform;
using Newtonsoft.Json;

namespace Adyen.Service.BalancePlatform
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PaymentInstrumentsApi : AbstractService
    {
        private readonly string _baseUrl;
        
        public PaymentInstrumentsApi(Client client) : base(client)
        {
            _baseUrl = client.Config.CheckoutEndpoint + "/" + ClientConfig.CheckoutVersion;
        }
    
        /// <summary>
        /// Get a payment instrument
        /// </summary>
        /// <param name="id">The unique identifier of the payment instrument.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>PaymentInstrument</returns>
        public PaymentInstrument (string id, RequestOptions requestOptions = default)
        {
            return Async(id, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a payment instrument
        /// </summary>
        /// <param name="id">The unique identifier of the payment instrument.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of PaymentInstrument</returns>
        public async Task<PaymentInstrument> Async(string id, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/paymentInstruments/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<PaymentInstrument>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Get all transaction rules for a payment instrument
        /// </summary>
        /// <param name="id">The unique identifier of the payment instrument.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>TransactionRulesResponse</returns>
        public TransactionRulesResponse (string id, RequestOptions requestOptions = default)
        {
            return Async(id, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all transaction rules for a payment instrument
        /// </summary>
        /// <param name="id">The unique identifier of the payment instrument.</param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of TransactionRulesResponse</returns>
        public async Task<TransactionRulesResponse> Async(string id, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/paymentInstruments/{id}/transactionRules";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<TransactionRulesResponse>(null, requestOptions, new HttpMethod("GET"));
        }

        /// <summary>
        /// Update a payment instrument
        /// </summary>
        /// <param name="id">The unique identifier of the payment instrument.</param>
        /// <param name="paymentInstrumentUpdateRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>PaymentInstrument</returns>
        public PaymentInstrument (string id, PaymentInstrumentUpdateRequest paymentInstrumentUpdateRequest, RequestOptions requestOptions = default)
        {
            return Async(id, paymentInstrumentUpdateRequest, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a payment instrument
        /// </summary>
        /// <param name="id">The unique identifier of the payment instrument.</param>
        /// <param name="paymentInstrumentUpdateRequest"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of PaymentInstrument</returns>
        public async Task<PaymentInstrument> Async(string id, PaymentInstrumentUpdateRequest paymentInstrumentUpdateRequest, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + $"/paymentInstruments/{id}";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<PaymentInstrument>(paymentInstrumentUpdateRequest.ToJson(), requestOptions, new HttpMethod("PATCH"));
        }

        /// <summary>
        /// Create a payment instrument
        /// </summary>
        /// <param name="paymentInstrumentInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>PaymentInstrument</returns>
        public PaymentInstrument (PaymentInstrumentInfo paymentInstrumentInfo, RequestOptions requestOptions = default)
        {
            return Async(paymentInstrumentInfo, requestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a payment instrument
        /// </summary>
        /// <param name="paymentInstrumentInfo"></param>
        /// <param name="requestOptions">Additional request options.</param>
        /// <returns>Task of PaymentInstrument</returns>
        public async Task<PaymentInstrument> Async(PaymentInstrumentInfo paymentInstrumentInfo, RequestOptions requestOptions = default)
        {
            var endpoint = _baseUrl + "/paymentInstruments";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<PaymentInstrument>(paymentInstrumentInfo.ToJson(), requestOptions, new HttpMethod("POST"));
        }

    }
}