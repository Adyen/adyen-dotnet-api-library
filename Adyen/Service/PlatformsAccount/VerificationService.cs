/*
* Account API
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.PlatformsAccount;

namespace Adyen.Service.PlatformsAccount
{
    /// <summary>
    /// VerificationService Interface
    /// </summary>
    public interface IVerificationService
    {
        /// <summary>
        /// Trigger verification
        /// </summary>
        /// <param name="performVerificationRequest"><see cref="PerformVerificationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GenericResponse"/>.</returns>
        Model.PlatformsAccount.GenericResponse CheckAccountHolder(PerformVerificationRequest performVerificationRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Trigger verification
        /// </summary>
        /// <param name="performVerificationRequest"><see cref="PerformVerificationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GenericResponse"/>.</returns>
        Task<Model.PlatformsAccount.GenericResponse> CheckAccountHolderAsync(PerformVerificationRequest performVerificationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete bank accounts
        /// </summary>
        /// <param name="deleteBankAccountRequest"><see cref="DeleteBankAccountRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GenericResponse"/>.</returns>
        Model.PlatformsAccount.GenericResponse DeleteBankAccounts(DeleteBankAccountRequest deleteBankAccountRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete bank accounts
        /// </summary>
        /// <param name="deleteBankAccountRequest"><see cref="DeleteBankAccountRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GenericResponse"/>.</returns>
        Task<Model.PlatformsAccount.GenericResponse> DeleteBankAccountsAsync(DeleteBankAccountRequest deleteBankAccountRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete legal arrangements
        /// </summary>
        /// <param name="deleteLegalArrangementRequest"><see cref="DeleteLegalArrangementRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GenericResponse"/>.</returns>
        Model.PlatformsAccount.GenericResponse DeleteLegalArrangements(DeleteLegalArrangementRequest deleteLegalArrangementRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete legal arrangements
        /// </summary>
        /// <param name="deleteLegalArrangementRequest"><see cref="DeleteLegalArrangementRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GenericResponse"/>.</returns>
        Task<Model.PlatformsAccount.GenericResponse> DeleteLegalArrangementsAsync(DeleteLegalArrangementRequest deleteLegalArrangementRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete payout methods
        /// </summary>
        /// <param name="deletePayoutMethodRequest"><see cref="DeletePayoutMethodRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GenericResponse"/>.</returns>
        Model.PlatformsAccount.GenericResponse DeletePayoutMethods(DeletePayoutMethodRequest deletePayoutMethodRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete payout methods
        /// </summary>
        /// <param name="deletePayoutMethodRequest"><see cref="DeletePayoutMethodRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GenericResponse"/>.</returns>
        Task<Model.PlatformsAccount.GenericResponse> DeletePayoutMethodsAsync(DeletePayoutMethodRequest deletePayoutMethodRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete shareholders
        /// </summary>
        /// <param name="deleteShareholderRequest"><see cref="DeleteShareholderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GenericResponse"/>.</returns>
        Model.PlatformsAccount.GenericResponse DeleteShareholders(DeleteShareholderRequest deleteShareholderRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete shareholders
        /// </summary>
        /// <param name="deleteShareholderRequest"><see cref="DeleteShareholderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GenericResponse"/>.</returns>
        Task<Model.PlatformsAccount.GenericResponse> DeleteShareholdersAsync(DeleteShareholderRequest deleteShareholderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete signatories
        /// </summary>
        /// <param name="deleteSignatoriesRequest"><see cref="DeleteSignatoriesRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GenericResponse"/>.</returns>
        Model.PlatformsAccount.GenericResponse DeleteSignatories(DeleteSignatoriesRequest deleteSignatoriesRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete signatories
        /// </summary>
        /// <param name="deleteSignatoriesRequest"><see cref="DeleteSignatoriesRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GenericResponse"/>.</returns>
        Task<Model.PlatformsAccount.GenericResponse> DeleteSignatoriesAsync(DeleteSignatoriesRequest deleteSignatoriesRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get documents
        /// </summary>
        /// <param name="getUploadedDocumentsRequest"><see cref="GetUploadedDocumentsRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GetUploadedDocumentsResponse"/>.</returns>
        Model.PlatformsAccount.GetUploadedDocumentsResponse GetUploadedDocuments(GetUploadedDocumentsRequest getUploadedDocumentsRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get documents
        /// </summary>
        /// <param name="getUploadedDocumentsRequest"><see cref="GetUploadedDocumentsRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GetUploadedDocumentsResponse"/>.</returns>
        Task<Model.PlatformsAccount.GetUploadedDocumentsResponse> GetUploadedDocumentsAsync(GetUploadedDocumentsRequest getUploadedDocumentsRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Upload a document
        /// </summary>
        /// <param name="uploadDocumentRequest"><see cref="UploadDocumentRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="UpdateAccountHolderResponse"/>.</returns>
        Model.PlatformsAccount.UpdateAccountHolderResponse UploadDocument(UploadDocumentRequest uploadDocumentRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Upload a document
        /// </summary>
        /// <param name="uploadDocumentRequest"><see cref="UploadDocumentRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="UpdateAccountHolderResponse"/>.</returns>
        Task<Model.PlatformsAccount.UpdateAccountHolderResponse> UploadDocumentAsync(UploadDocumentRequest uploadDocumentRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the VerificationService API endpoints
    /// </summary>
    public class VerificationService : AbstractService, IVerificationService
    {
        private readonly string _baseUrl;
        
        public VerificationService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://cal-test.adyen.com/cal/services/Account/v6");
        }
        
        public Model.PlatformsAccount.GenericResponse CheckAccountHolder(PerformVerificationRequest performVerificationRequest = default, RequestOptions requestOptions = default)
        {
            return CheckAccountHolderAsync(performVerificationRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.GenericResponse> CheckAccountHolderAsync(PerformVerificationRequest performVerificationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/checkAccountHolder";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.GenericResponse>(performVerificationRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.GenericResponse DeleteBankAccounts(DeleteBankAccountRequest deleteBankAccountRequest = default, RequestOptions requestOptions = default)
        {
            return DeleteBankAccountsAsync(deleteBankAccountRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.GenericResponse> DeleteBankAccountsAsync(DeleteBankAccountRequest deleteBankAccountRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/deleteBankAccounts";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.GenericResponse>(deleteBankAccountRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.GenericResponse DeleteLegalArrangements(DeleteLegalArrangementRequest deleteLegalArrangementRequest = default, RequestOptions requestOptions = default)
        {
            return DeleteLegalArrangementsAsync(deleteLegalArrangementRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.GenericResponse> DeleteLegalArrangementsAsync(DeleteLegalArrangementRequest deleteLegalArrangementRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/deleteLegalArrangements";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.GenericResponse>(deleteLegalArrangementRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.GenericResponse DeletePayoutMethods(DeletePayoutMethodRequest deletePayoutMethodRequest = default, RequestOptions requestOptions = default)
        {
            return DeletePayoutMethodsAsync(deletePayoutMethodRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.GenericResponse> DeletePayoutMethodsAsync(DeletePayoutMethodRequest deletePayoutMethodRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/deletePayoutMethods";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.GenericResponse>(deletePayoutMethodRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.GenericResponse DeleteShareholders(DeleteShareholderRequest deleteShareholderRequest = default, RequestOptions requestOptions = default)
        {
            return DeleteShareholdersAsync(deleteShareholderRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.GenericResponse> DeleteShareholdersAsync(DeleteShareholderRequest deleteShareholderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/deleteShareholders";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.GenericResponse>(deleteShareholderRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.GenericResponse DeleteSignatories(DeleteSignatoriesRequest deleteSignatoriesRequest = default, RequestOptions requestOptions = default)
        {
            return DeleteSignatoriesAsync(deleteSignatoriesRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.GenericResponse> DeleteSignatoriesAsync(DeleteSignatoriesRequest deleteSignatoriesRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/deleteSignatories";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.GenericResponse>(deleteSignatoriesRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.GetUploadedDocumentsResponse GetUploadedDocuments(GetUploadedDocumentsRequest getUploadedDocumentsRequest = default, RequestOptions requestOptions = default)
        {
            return GetUploadedDocumentsAsync(getUploadedDocumentsRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.GetUploadedDocumentsResponse> GetUploadedDocumentsAsync(GetUploadedDocumentsRequest getUploadedDocumentsRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/getUploadedDocuments";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.GetUploadedDocumentsResponse>(getUploadedDocumentsRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.UpdateAccountHolderResponse UploadDocument(UploadDocumentRequest uploadDocumentRequest = default, RequestOptions requestOptions = default)
        {
            return UploadDocumentAsync(uploadDocumentRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.UpdateAccountHolderResponse> UploadDocumentAsync(UploadDocumentRequest uploadDocumentRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/uploadDocument";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.UpdateAccountHolderResponse>(uploadDocumentRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
    }
}