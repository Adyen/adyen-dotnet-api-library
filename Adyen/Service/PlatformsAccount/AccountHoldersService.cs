/*
* Account API
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.PlatformsAccount;

namespace Adyen.Service.PlatformsAccount
{
    /// <summary>
    /// AccountHoldersService Interface
    /// </summary>
    public interface IAccountHoldersService
    {
        /// <summary>
        /// Close an account holder
        /// </summary>
        /// <param name="closeAccountHolderRequest"><see cref="CloseAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="CloseAccountHolderResponse"/>.</returns>
        Model.PlatformsAccount.CloseAccountHolderResponse CloseAccountHolder(CloseAccountHolderRequest closeAccountHolderRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Close an account holder
        /// </summary>
        /// <param name="closeAccountHolderRequest"><see cref="CloseAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="CloseAccountHolderResponse"/>.</returns>
        Task<Model.PlatformsAccount.CloseAccountHolderResponse> CloseAccountHolderAsync(CloseAccountHolderRequest closeAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Close stores
        /// </summary>
        /// <param name="closeStoresRequest"><see cref="CloseStoresRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GenericResponse"/>.</returns>
        Model.PlatformsAccount.GenericResponse CloseStores(CloseStoresRequest closeStoresRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Close stores
        /// </summary>
        /// <param name="closeStoresRequest"><see cref="CloseStoresRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GenericResponse"/>.</returns>
        Task<Model.PlatformsAccount.GenericResponse> CloseStoresAsync(CloseStoresRequest closeStoresRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Create an account holder
        /// </summary>
        /// <param name="createAccountHolderRequest"><see cref="CreateAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="CreateAccountHolderResponse"/>.</returns>
        Model.PlatformsAccount.CreateAccountHolderResponse CreateAccountHolder(CreateAccountHolderRequest createAccountHolderRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create an account holder
        /// </summary>
        /// <param name="createAccountHolderRequest"><see cref="CreateAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="CreateAccountHolderResponse"/>.</returns>
        Task<Model.PlatformsAccount.CreateAccountHolderResponse> CreateAccountHolderAsync(CreateAccountHolderRequest createAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get an account holder
        /// </summary>
        /// <param name="getAccountHolderRequest"><see cref="GetAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GetAccountHolderResponse"/>.</returns>
        Model.PlatformsAccount.GetAccountHolderResponse GetAccountHolder(GetAccountHolderRequest getAccountHolderRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get an account holder
        /// </summary>
        /// <param name="getAccountHolderRequest"><see cref="GetAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GetAccountHolderResponse"/>.</returns>
        Task<Model.PlatformsAccount.GetAccountHolderResponse> GetAccountHolderAsync(GetAccountHolderRequest getAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a tax form
        /// </summary>
        /// <param name="getTaxFormRequest"><see cref="GetTaxFormRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GetTaxFormResponse"/>.</returns>
        Model.PlatformsAccount.GetTaxFormResponse GetTaxForm(GetTaxFormRequest getTaxFormRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a tax form
        /// </summary>
        /// <param name="getTaxFormRequest"><see cref="GetTaxFormRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GetTaxFormResponse"/>.</returns>
        Task<Model.PlatformsAccount.GetTaxFormResponse> GetTaxFormAsync(GetTaxFormRequest getTaxFormRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Suspend an account holder
        /// </summary>
        /// <param name="suspendAccountHolderRequest"><see cref="SuspendAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="SuspendAccountHolderResponse"/>.</returns>
        Model.PlatformsAccount.SuspendAccountHolderResponse SuspendAccountHolder(SuspendAccountHolderRequest suspendAccountHolderRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Suspend an account holder
        /// </summary>
        /// <param name="suspendAccountHolderRequest"><see cref="SuspendAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="SuspendAccountHolderResponse"/>.</returns>
        Task<Model.PlatformsAccount.SuspendAccountHolderResponse> SuspendAccountHolderAsync(SuspendAccountHolderRequest suspendAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Unsuspend an account holder
        /// </summary>
        /// <param name="unSuspendAccountHolderRequest"><see cref="UnSuspendAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="UnSuspendAccountHolderResponse"/>.</returns>
        Model.PlatformsAccount.UnSuspendAccountHolderResponse UnSuspendAccountHolder(UnSuspendAccountHolderRequest unSuspendAccountHolderRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Unsuspend an account holder
        /// </summary>
        /// <param name="unSuspendAccountHolderRequest"><see cref="UnSuspendAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="UnSuspendAccountHolderResponse"/>.</returns>
        Task<Model.PlatformsAccount.UnSuspendAccountHolderResponse> UnSuspendAccountHolderAsync(UnSuspendAccountHolderRequest unSuspendAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update an account holder
        /// </summary>
        /// <param name="updateAccountHolderRequest"><see cref="UpdateAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="UpdateAccountHolderResponse"/>.</returns>
        Model.PlatformsAccount.UpdateAccountHolderResponse UpdateAccountHolder(UpdateAccountHolderRequest updateAccountHolderRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update an account holder
        /// </summary>
        /// <param name="updateAccountHolderRequest"><see cref="UpdateAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="UpdateAccountHolderResponse"/>.</returns>
        Task<Model.PlatformsAccount.UpdateAccountHolderResponse> UpdateAccountHolderAsync(UpdateAccountHolderRequest updateAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Update payout or processing state
        /// </summary>
        /// <param name="updateAccountHolderStateRequest"><see cref="UpdateAccountHolderStateRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="GetAccountHolderStatusResponse"/>.</returns>
        Model.PlatformsAccount.GetAccountHolderStatusResponse UpdateAccountHolderState(UpdateAccountHolderStateRequest updateAccountHolderStateRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Update payout or processing state
        /// </summary>
        /// <param name="updateAccountHolderStateRequest"><see cref="UpdateAccountHolderStateRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="GetAccountHolderStatusResponse"/>.</returns>
        Task<Model.PlatformsAccount.GetAccountHolderStatusResponse> UpdateAccountHolderStateAsync(UpdateAccountHolderStateRequest updateAccountHolderStateRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the AccountHoldersService API endpoints
    /// </summary>
    public class AccountHoldersService : AbstractService, IAccountHoldersService
    {
        private readonly string _baseUrl;
        
        public AccountHoldersService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://cal-test.adyen.com/cal/services/Account/v6");
        }
        
        public Model.PlatformsAccount.CloseAccountHolderResponse CloseAccountHolder(CloseAccountHolderRequest closeAccountHolderRequest = default, RequestOptions requestOptions = default)
        {
            return CloseAccountHolderAsync(closeAccountHolderRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.CloseAccountHolderResponse> CloseAccountHolderAsync(CloseAccountHolderRequest closeAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/closeAccountHolder";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.CloseAccountHolderResponse>(closeAccountHolderRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.GenericResponse CloseStores(CloseStoresRequest closeStoresRequest = default, RequestOptions requestOptions = default)
        {
            return CloseStoresAsync(closeStoresRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.GenericResponse> CloseStoresAsync(CloseStoresRequest closeStoresRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/closeStores";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.GenericResponse>(closeStoresRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.CreateAccountHolderResponse CreateAccountHolder(CreateAccountHolderRequest createAccountHolderRequest = default, RequestOptions requestOptions = default)
        {
            return CreateAccountHolderAsync(createAccountHolderRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.CreateAccountHolderResponse> CreateAccountHolderAsync(CreateAccountHolderRequest createAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/createAccountHolder";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.CreateAccountHolderResponse>(createAccountHolderRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.GetAccountHolderResponse GetAccountHolder(GetAccountHolderRequest getAccountHolderRequest = default, RequestOptions requestOptions = default)
        {
            return GetAccountHolderAsync(getAccountHolderRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.GetAccountHolderResponse> GetAccountHolderAsync(GetAccountHolderRequest getAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/getAccountHolder";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.GetAccountHolderResponse>(getAccountHolderRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.GetTaxFormResponse GetTaxForm(GetTaxFormRequest getTaxFormRequest = default, RequestOptions requestOptions = default)
        {
            return GetTaxFormAsync(getTaxFormRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.GetTaxFormResponse> GetTaxFormAsync(GetTaxFormRequest getTaxFormRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/getTaxForm";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.GetTaxFormResponse>(getTaxFormRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.SuspendAccountHolderResponse SuspendAccountHolder(SuspendAccountHolderRequest suspendAccountHolderRequest = default, RequestOptions requestOptions = default)
        {
            return SuspendAccountHolderAsync(suspendAccountHolderRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.SuspendAccountHolderResponse> SuspendAccountHolderAsync(SuspendAccountHolderRequest suspendAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/suspendAccountHolder";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.SuspendAccountHolderResponse>(suspendAccountHolderRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.UnSuspendAccountHolderResponse UnSuspendAccountHolder(UnSuspendAccountHolderRequest unSuspendAccountHolderRequest = default, RequestOptions requestOptions = default)
        {
            return UnSuspendAccountHolderAsync(unSuspendAccountHolderRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.UnSuspendAccountHolderResponse> UnSuspendAccountHolderAsync(UnSuspendAccountHolderRequest unSuspendAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/unSuspendAccountHolder";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.UnSuspendAccountHolderResponse>(unSuspendAccountHolderRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.UpdateAccountHolderResponse UpdateAccountHolder(UpdateAccountHolderRequest updateAccountHolderRequest = default, RequestOptions requestOptions = default)
        {
            return UpdateAccountHolderAsync(updateAccountHolderRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.UpdateAccountHolderResponse> UpdateAccountHolderAsync(UpdateAccountHolderRequest updateAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/updateAccountHolder";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.UpdateAccountHolderResponse>(updateAccountHolderRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsAccount.GetAccountHolderStatusResponse UpdateAccountHolderState(UpdateAccountHolderStateRequest updateAccountHolderStateRequest = default, RequestOptions requestOptions = default)
        {
            return UpdateAccountHolderStateAsync(updateAccountHolderStateRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsAccount.GetAccountHolderStatusResponse> UpdateAccountHolderStateAsync(UpdateAccountHolderStateRequest updateAccountHolderStateRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/updateAccountHolderState";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsAccount.GetAccountHolderStatusResponse>(updateAccountHolderStateRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
    }
}