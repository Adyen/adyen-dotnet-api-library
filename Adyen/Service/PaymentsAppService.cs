/*
* Payments App API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.PaymentsApp;

namespace Adyen.Service
{
    /// <summary>
    /// PaymentsAppService Interface
    /// </summary>
    public interface IPaymentsAppService
    {
        /// <summary>
        /// Create a boarding token - merchant level
        /// </summary>
        /// <param name="merchantId"><see cref="string"/> - The unique identifier of the merchant account.</param>
        /// <param name="boardingTokenRequest"><see cref="BoardingTokenRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="BoardingTokenResponse"/>.</returns>
        Model.PaymentsApp.BoardingTokenResponse GeneratePaymentsAppBoardingTokenForMerchant(string merchantId, BoardingTokenRequest boardingTokenRequest, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create a boarding token - merchant level
        /// </summary>
        /// <param name="merchantId"><see cref="string"/> - The unique identifier of the merchant account.</param>
        /// <param name="boardingTokenRequest"><see cref="BoardingTokenRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="BoardingTokenResponse"/>.</returns>
        Task<Model.PaymentsApp.BoardingTokenResponse> GeneratePaymentsAppBoardingTokenForMerchantAsync(string merchantId, BoardingTokenRequest boardingTokenRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Create a boarding token - store level
        /// </summary>
        /// <param name="merchantId"><see cref="string"/> - The unique identifier of the merchant account.</param>
        /// <param name="storeId"><see cref="string"/> - The unique identifier of the store.</param>
        /// <param name="boardingTokenRequest"><see cref="BoardingTokenRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="BoardingTokenResponse"/>.</returns>
        Model.PaymentsApp.BoardingTokenResponse GeneratePaymentsAppBoardingTokenForStore(string merchantId, string storeId, BoardingTokenRequest boardingTokenRequest, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create a boarding token - store level
        /// </summary>
        /// <param name="merchantId"><see cref="string"/> - The unique identifier of the merchant account.</param>
        /// <param name="storeId"><see cref="string"/> - The unique identifier of the store.</param>
        /// <param name="boardingTokenRequest"><see cref="BoardingTokenRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="BoardingTokenResponse"/>.</returns>
        Task<Model.PaymentsApp.BoardingTokenResponse> GeneratePaymentsAppBoardingTokenForStoreAsync(string merchantId, string storeId, BoardingTokenRequest boardingTokenRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a list of Payments Apps - merchant level
        /// </summary>
        /// <param name="merchantId"><see cref="string"/> - The unique identifier of the merchant account.</param>
        /// <param name="statuses"><see cref="string"/> - The status of the Payments App. Comma-separated list of one or more values. If no value is provided, the list returns all statuses.   Possible values:  * **BOARDING**   * **BOARDED**   * **REVOKED**</param>
        /// <param name="limit"><see cref="int?"/> - The number of items to return.</param>
        /// <param name="offset"><see cref="long?"/> - The number of items to skip.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="PaymentsAppResponse"/>.</returns>
        Model.PaymentsApp.PaymentsAppResponse ListPaymentsAppForMerchant(string merchantId, string statuses = default, int? limit = default, long? offset = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a list of Payments Apps - merchant level
        /// </summary>
        /// <param name="merchantId"><see cref="string"/> - The unique identifier of the merchant account.</param>
        /// <param name="statuses"><see cref="string"/> - The status of the Payments App. Comma-separated list of one or more values. If no value is provided, the list returns all statuses.   Possible values:  * **BOARDING**   * **BOARDED**   * **REVOKED**</param>
        /// <param name="limit"><see cref="int?"/> - The number of items to return.</param>
        /// <param name="offset"><see cref="long?"/> - The number of items to skip.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="PaymentsAppResponse"/>.</returns>
        Task<Model.PaymentsApp.PaymentsAppResponse> ListPaymentsAppForMerchantAsync(string merchantId, string statuses = default, int? limit = default, long? offset = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a list of Payments Apps - store level
        /// </summary>
        /// <param name="merchantId"><see cref="string"/> - The unique identifier of the merchant account.</param>
        /// <param name="storeId"><see cref="string"/> - The unique identifier of the store.</param>
        /// <param name="statuses"><see cref="string"/> - The status of the Payments App. Comma-separated list of one or more values. If no value is provided, the list returns all statuses.   Possible values:  * **BOARDING**   * **BOARDED**   * **REVOKED**</param>
        /// <param name="limit"><see cref="int?"/> - The number of items to return.</param>
        /// <param name="offset"><see cref="long?"/> - The number of items to skip.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="PaymentsAppResponse"/>.</returns>
        Model.PaymentsApp.PaymentsAppResponse ListPaymentsAppForStore(string merchantId, string storeId, string statuses = default, int? limit = default, long? offset = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a list of Payments Apps - store level
        /// </summary>
        /// <param name="merchantId"><see cref="string"/> - The unique identifier of the merchant account.</param>
        /// <param name="storeId"><see cref="string"/> - The unique identifier of the store.</param>
        /// <param name="statuses"><see cref="string"/> - The status of the Payments App. Comma-separated list of one or more values. If no value is provided, the list returns all statuses.   Possible values:  * **BOARDING**   * **BOARDED**   * **REVOKED**</param>
        /// <param name="limit"><see cref="int?"/> - The number of items to return.</param>
        /// <param name="offset"><see cref="long?"/> - The number of items to skip.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="PaymentsAppResponse"/>.</returns>
        Task<Model.PaymentsApp.PaymentsAppResponse> ListPaymentsAppForStoreAsync(string merchantId, string storeId, string statuses = default, int? limit = default, long? offset = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Revoke Payments App instance authentication
        /// </summary>
        /// <param name="merchantId"><see cref="string"/> - The unique identifier of the merchant account.</param>
        /// <param name="installationId"><see cref="string"/> - The unique identifier of the Payments App instance on a device.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        void RevokePaymentsApp(string merchantId, string installationId, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Revoke Payments App instance authentication
        /// </summary>
        /// <param name="merchantId"><see cref="string"/> - The unique identifier of the merchant account.</param>
        /// <param name="installationId"><see cref="string"/> - The unique identifier of the Payments App instance on a device.</param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        Task RevokePaymentsAppAsync(string merchantId, string installationId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the PaymentsAppService API endpoints
    /// </summary>
    public class PaymentsAppService : AbstractService, IPaymentsAppService
    {
        private readonly string _baseUrl;
        
        public PaymentsAppService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://management-live.adyen.com/v1");
        }
        
        public Model.PaymentsApp.BoardingTokenResponse GeneratePaymentsAppBoardingTokenForMerchant(string merchantId, BoardingTokenRequest boardingTokenRequest, RequestOptions requestOptions = default)
        {
            return GeneratePaymentsAppBoardingTokenForMerchantAsync(merchantId, boardingTokenRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PaymentsApp.BoardingTokenResponse> GeneratePaymentsAppBoardingTokenForMerchantAsync(string merchantId, BoardingTokenRequest boardingTokenRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/merchants/{merchantId}/generatePaymentsAppBoardingToken";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PaymentsApp.BoardingTokenResponse>(boardingTokenRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PaymentsApp.BoardingTokenResponse GeneratePaymentsAppBoardingTokenForStore(string merchantId, string storeId, BoardingTokenRequest boardingTokenRequest, RequestOptions requestOptions = default)
        {
            return GeneratePaymentsAppBoardingTokenForStoreAsync(merchantId, storeId, boardingTokenRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PaymentsApp.BoardingTokenResponse> GeneratePaymentsAppBoardingTokenForStoreAsync(string merchantId, string storeId, BoardingTokenRequest boardingTokenRequest, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/merchants/{merchantId}/stores/{storeId}/generatePaymentsAppBoardingToken";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PaymentsApp.BoardingTokenResponse>(boardingTokenRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PaymentsApp.PaymentsAppResponse ListPaymentsAppForMerchant(string merchantId, string statuses = default, int? limit = default, long? offset = default, RequestOptions requestOptions = default)
        {
            return ListPaymentsAppForMerchantAsync(merchantId, statuses, limit, offset, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PaymentsApp.PaymentsAppResponse> ListPaymentsAppForMerchantAsync(string merchantId, string statuses = default, int? limit = default, long? offset = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (statuses != null) queryParams.Add("statuses", statuses);
            if (limit != null) queryParams.Add("limit", limit.ToString());
            if (offset != null) queryParams.Add("offset", offset.ToString());
            var endpoint = _baseUrl + $"/merchants/{merchantId}/paymentsApps" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PaymentsApp.PaymentsAppResponse>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PaymentsApp.PaymentsAppResponse ListPaymentsAppForStore(string merchantId, string storeId, string statuses = default, int? limit = default, long? offset = default, RequestOptions requestOptions = default)
        {
            return ListPaymentsAppForStoreAsync(merchantId, storeId, statuses, limit, offset, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PaymentsApp.PaymentsAppResponse> ListPaymentsAppForStoreAsync(string merchantId, string storeId, string statuses = default, int? limit = default, long? offset = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            if (statuses != null) queryParams.Add("statuses", statuses);
            if (limit != null) queryParams.Add("limit", limit.ToString());
            if (offset != null) queryParams.Add("offset", offset.ToString());
            var endpoint = _baseUrl + $"/merchants/{merchantId}/stores/{storeId}/paymentsApps" + ToQueryString(queryParams);
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PaymentsApp.PaymentsAppResponse>(null, requestOptions, new HttpMethod("GET"), cancellationToken).ConfigureAwait(false);
        }
        
        public void RevokePaymentsApp(string merchantId, string installationId, RequestOptions requestOptions = default)
        {
            RevokePaymentsAppAsync(merchantId, installationId, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task RevokePaymentsAppAsync(string merchantId, string installationId, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + $"/merchants/{merchantId}/paymentsApps/{installationId}/revoke";
            var resource = new ServiceResource(this, endpoint);
            await resource.RequestAsync(null, requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
    }
}