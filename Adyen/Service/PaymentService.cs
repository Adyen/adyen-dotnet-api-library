/*
* Adyen Payment API
*
*
* The version of the OpenAPI document: 68
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.Payment;

namespace Adyen.Service
{
    /// <summary>
    /// PaymentService Interface
    /// </summary>
    public interface IPaymentService
    {
        /// <summary>
        /// Change the authorised amount
        /// </summary>
        /// <param name="adjustAuthorisationRequest"><see cref="AdjustAuthorisationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="ModificationResult"/>.</returns>
        Model.Payment.ModificationResult AdjustAuthorisation(AdjustAuthorisationRequest adjustAuthorisationRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Change the authorised amount
        /// </summary>
        /// <param name="adjustAuthorisationRequest"><see cref="AdjustAuthorisationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="ModificationResult"/>.</returns>
        Task<Model.Payment.ModificationResult> AdjustAuthorisationAsync(AdjustAuthorisationRequest adjustAuthorisationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Create an authorisation
        /// </summary>
        /// <param name="paymentRequest"><see cref="PaymentRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="PaymentResult"/>.</returns>
        Model.Payment.PaymentResult Authorise(PaymentRequest paymentRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create an authorisation
        /// </summary>
        /// <param name="paymentRequest"><see cref="PaymentRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="PaymentResult"/>.</returns>
        Task<Model.Payment.PaymentResult> AuthoriseAsync(PaymentRequest paymentRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Complete a 3DS authorisation
        /// </summary>
        /// <param name="paymentRequest3d"><see cref="PaymentRequest3d"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="PaymentResult"/>.</returns>
        Model.Payment.PaymentResult Authorise3d(PaymentRequest3d paymentRequest3d = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Complete a 3DS authorisation
        /// </summary>
        /// <param name="paymentRequest3d"><see cref="PaymentRequest3d"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="PaymentResult"/>.</returns>
        Task<Model.Payment.PaymentResult> Authorise3dAsync(PaymentRequest3d paymentRequest3d = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Complete a 3DS2 authorisation
        /// </summary>
        /// <param name="paymentRequest3ds2"><see cref="PaymentRequest3ds2"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="PaymentResult"/>.</returns>
        Model.Payment.PaymentResult Authorise3ds2(PaymentRequest3ds2 paymentRequest3ds2 = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Complete a 3DS2 authorisation
        /// </summary>
        /// <param name="paymentRequest3ds2"><see cref="PaymentRequest3ds2"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="PaymentResult"/>.</returns>
        Task<Model.Payment.PaymentResult> Authorise3ds2Async(PaymentRequest3ds2 paymentRequest3ds2 = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Cancel an authorisation
        /// </summary>
        /// <param name="cancelRequest"><see cref="CancelRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="ModificationResult"/>.</returns>
        Model.Payment.ModificationResult Cancel(CancelRequest cancelRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Cancel an authorisation
        /// </summary>
        /// <param name="cancelRequest"><see cref="CancelRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="ModificationResult"/>.</returns>
        Task<Model.Payment.ModificationResult> CancelAsync(CancelRequest cancelRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Cancel or refund a payment
        /// </summary>
        /// <param name="cancelOrRefundRequest"><see cref="CancelOrRefundRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="ModificationResult"/>.</returns>
        Model.Payment.ModificationResult CancelOrRefund(CancelOrRefundRequest cancelOrRefundRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Cancel or refund a payment
        /// </summary>
        /// <param name="cancelOrRefundRequest"><see cref="CancelOrRefundRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="ModificationResult"/>.</returns>
        Task<Model.Payment.ModificationResult> CancelOrRefundAsync(CancelOrRefundRequest cancelOrRefundRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Capture an authorisation
        /// </summary>
        /// <param name="captureRequest"><see cref="CaptureRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="ModificationResult"/>.</returns>
        Model.Payment.ModificationResult Capture(CaptureRequest captureRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Capture an authorisation
        /// </summary>
        /// <param name="captureRequest"><see cref="CaptureRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="ModificationResult"/>.</returns>
        Task<Model.Payment.ModificationResult> CaptureAsync(CaptureRequest captureRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Create a donation
        /// </summary>
        /// <param name="donationRequest"><see cref="DonationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="ModificationResult"/>.</returns>
        [Obsolete]
        Model.Payment.ModificationResult Donate(DonationRequest donationRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Create a donation
        /// </summary>
        /// <param name="donationRequest"><see cref="DonationRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="ModificationResult"/>.</returns>
        [Obsolete]
        Task<Model.Payment.ModificationResult> DonateAsync(DonationRequest donationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get the 3DS authentication result
        /// </summary>
        /// <param name="authenticationResultRequest"><see cref="AuthenticationResultRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="AuthenticationResultResponse"/>.</returns>
        Model.Payment.AuthenticationResultResponse GetAuthenticationResult(AuthenticationResultRequest authenticationResultRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get the 3DS authentication result
        /// </summary>
        /// <param name="authenticationResultRequest"><see cref="AuthenticationResultRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="AuthenticationResultResponse"/>.</returns>
        Task<Model.Payment.AuthenticationResultResponse> GetAuthenticationResultAsync(AuthenticationResultRequest authenticationResultRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Refund a captured payment
        /// </summary>
        /// <param name="refundRequest"><see cref="RefundRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="ModificationResult"/>.</returns>
        Model.Payment.ModificationResult Refund(RefundRequest refundRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Refund a captured payment
        /// </summary>
        /// <param name="refundRequest"><see cref="RefundRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="ModificationResult"/>.</returns>
        Task<Model.Payment.ModificationResult> RefundAsync(RefundRequest refundRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get the 3DS2 authentication result
        /// </summary>
        /// <param name="threeDS2ResultRequest"><see cref="ThreeDS2ResultRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="ThreeDS2ResultResponse"/>.</returns>
        Model.Payment.ThreeDS2ResultResponse Retrieve3ds2Result(ThreeDS2ResultRequest threeDS2ResultRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get the 3DS2 authentication result
        /// </summary>
        /// <param name="threeDS2ResultRequest"><see cref="ThreeDS2ResultRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="ThreeDS2ResultResponse"/>.</returns>
        Task<Model.Payment.ThreeDS2ResultResponse> Retrieve3ds2ResultAsync(ThreeDS2ResultRequest threeDS2ResultRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Cancel an authorisation using your reference
        /// </summary>
        /// <param name="technicalCancelRequest"><see cref="TechnicalCancelRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="ModificationResult"/>.</returns>
        Model.Payment.ModificationResult TechnicalCancel(TechnicalCancelRequest technicalCancelRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Cancel an authorisation using your reference
        /// </summary>
        /// <param name="technicalCancelRequest"><see cref="TechnicalCancelRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="ModificationResult"/>.</returns>
        Task<Model.Payment.ModificationResult> TechnicalCancelAsync(TechnicalCancelRequest technicalCancelRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Cancel an in-person refund
        /// </summary>
        /// <param name="voidPendingRefundRequest"><see cref="VoidPendingRefundRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="ModificationResult"/>.</returns>
        Model.Payment.ModificationResult VoidPendingRefund(VoidPendingRefundRequest voidPendingRefundRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Cancel an in-person refund
        /// </summary>
        /// <param name="voidPendingRefundRequest"><see cref="VoidPendingRefundRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="ModificationResult"/>.</returns>
        Task<Model.Payment.ModificationResult> VoidPendingRefundAsync(VoidPendingRefundRequest voidPendingRefundRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the PaymentService API endpoints
    /// </summary>
    public class PaymentService : AbstractService, IPaymentService
    {
        private readonly string _baseUrl;
        
        public PaymentService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://pal-test.adyen.com/pal/servlet/Payment/v68");
        }
        
        public Model.Payment.ModificationResult AdjustAuthorisation(AdjustAuthorisationRequest adjustAuthorisationRequest = default, RequestOptions requestOptions = default)
        {
            return AdjustAuthorisationAsync(adjustAuthorisationRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Payment.ModificationResult> AdjustAuthorisationAsync(AdjustAuthorisationRequest adjustAuthorisationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/adjustAuthorisation";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.ModificationResult>(adjustAuthorisationRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Payment.PaymentResult Authorise(PaymentRequest paymentRequest = default, RequestOptions requestOptions = default)
        {
            return AuthoriseAsync(paymentRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Payment.PaymentResult> AuthoriseAsync(PaymentRequest paymentRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/authorise";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.PaymentResult>(paymentRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Payment.PaymentResult Authorise3d(PaymentRequest3d paymentRequest3d = default, RequestOptions requestOptions = default)
        {
            return Authorise3dAsync(paymentRequest3d, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Payment.PaymentResult> Authorise3dAsync(PaymentRequest3d paymentRequest3d = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/authorise3d";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.PaymentResult>(paymentRequest3d.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Payment.PaymentResult Authorise3ds2(PaymentRequest3ds2 paymentRequest3ds2 = default, RequestOptions requestOptions = default)
        {
            return Authorise3ds2Async(paymentRequest3ds2, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Payment.PaymentResult> Authorise3ds2Async(PaymentRequest3ds2 paymentRequest3ds2 = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/authorise3ds2";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.PaymentResult>(paymentRequest3ds2.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Payment.ModificationResult Cancel(CancelRequest cancelRequest = default, RequestOptions requestOptions = default)
        {
            return CancelAsync(cancelRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Payment.ModificationResult> CancelAsync(CancelRequest cancelRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/cancel";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.ModificationResult>(cancelRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Payment.ModificationResult CancelOrRefund(CancelOrRefundRequest cancelOrRefundRequest = default, RequestOptions requestOptions = default)
        {
            return CancelOrRefundAsync(cancelOrRefundRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Payment.ModificationResult> CancelOrRefundAsync(CancelOrRefundRequest cancelOrRefundRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/cancelOrRefund";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.ModificationResult>(cancelOrRefundRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Payment.ModificationResult Capture(CaptureRequest captureRequest = default, RequestOptions requestOptions = default)
        {
            return CaptureAsync(captureRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Payment.ModificationResult> CaptureAsync(CaptureRequest captureRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/capture";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.ModificationResult>(captureRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        [Obsolete]
        public Model.Payment.ModificationResult Donate(DonationRequest donationRequest = default, RequestOptions requestOptions = default)
        {
            return DonateAsync(donationRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        [Obsolete]
        public async Task<Model.Payment.ModificationResult> DonateAsync(DonationRequest donationRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/donate";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.ModificationResult>(donationRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Payment.AuthenticationResultResponse GetAuthenticationResult(AuthenticationResultRequest authenticationResultRequest = default, RequestOptions requestOptions = default)
        {
            return GetAuthenticationResultAsync(authenticationResultRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Payment.AuthenticationResultResponse> GetAuthenticationResultAsync(AuthenticationResultRequest authenticationResultRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/getAuthenticationResult";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.AuthenticationResultResponse>(authenticationResultRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Payment.ModificationResult Refund(RefundRequest refundRequest = default, RequestOptions requestOptions = default)
        {
            return RefundAsync(refundRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Payment.ModificationResult> RefundAsync(RefundRequest refundRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/refund";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.ModificationResult>(refundRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Payment.ThreeDS2ResultResponse Retrieve3ds2Result(ThreeDS2ResultRequest threeDS2ResultRequest = default, RequestOptions requestOptions = default)
        {
            return Retrieve3ds2ResultAsync(threeDS2ResultRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Payment.ThreeDS2ResultResponse> Retrieve3ds2ResultAsync(ThreeDS2ResultRequest threeDS2ResultRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/retrieve3ds2Result";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.ThreeDS2ResultResponse>(threeDS2ResultRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Payment.ModificationResult TechnicalCancel(TechnicalCancelRequest technicalCancelRequest = default, RequestOptions requestOptions = default)
        {
            return TechnicalCancelAsync(technicalCancelRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Payment.ModificationResult> TechnicalCancelAsync(TechnicalCancelRequest technicalCancelRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/technicalCancel";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.ModificationResult>(technicalCancelRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Payment.ModificationResult VoidPendingRefund(VoidPendingRefundRequest voidPendingRefundRequest = default, RequestOptions requestOptions = default)
        {
            return VoidPendingRefundAsync(voidPendingRefundRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Payment.ModificationResult> VoidPendingRefundAsync(VoidPendingRefundRequest voidPendingRefundRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/voidPendingRefund";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Payment.ModificationResult>(voidPendingRefundRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
    }
}