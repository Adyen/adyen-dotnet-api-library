/*
* Disputes API
*
*
* The version of the OpenAPI document: 30
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Model;
using Adyen.Model.Disputes;

namespace Adyen.Service
{
    /// <summary>
    /// DisputesService Interface
    /// </summary>
    public interface IDisputesService
    {
        /// <summary>
        /// Accept a dispute
        /// </summary>
        /// <param name="acceptDisputeRequest"><see cref="AcceptDisputeRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="AcceptDisputeResponse"/>.</returns>
        Model.Disputes.AcceptDisputeResponse AcceptDispute(AcceptDisputeRequest acceptDisputeRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Accept a dispute
        /// </summary>
        /// <param name="acceptDisputeRequest"><see cref="AcceptDisputeRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="AcceptDisputeResponse"/>.</returns>
        Task<Model.Disputes.AcceptDisputeResponse> AcceptDisputeAsync(AcceptDisputeRequest acceptDisputeRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Defend a dispute
        /// </summary>
        /// <param name="defendDisputeRequest"><see cref="DefendDisputeRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="DefendDisputeResponse"/>.</returns>
        Model.Disputes.DefendDisputeResponse DefendDispute(DefendDisputeRequest defendDisputeRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Defend a dispute
        /// </summary>
        /// <param name="defendDisputeRequest"><see cref="DefendDisputeRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="DefendDisputeResponse"/>.</returns>
        Task<Model.Disputes.DefendDisputeResponse> DefendDisputeAsync(DefendDisputeRequest defendDisputeRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Delete a defense document
        /// </summary>
        /// <param name="deleteDefenseDocumentRequest"><see cref="DeleteDefenseDocumentRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="DeleteDefenseDocumentResponse"/>.</returns>
        Model.Disputes.DeleteDefenseDocumentResponse DeleteDisputeDefenseDocument(DeleteDefenseDocumentRequest deleteDefenseDocumentRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Delete a defense document
        /// </summary>
        /// <param name="deleteDefenseDocumentRequest"><see cref="DeleteDefenseDocumentRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="DeleteDefenseDocumentResponse"/>.</returns>
        Task<Model.Disputes.DeleteDefenseDocumentResponse> DeleteDisputeDefenseDocumentAsync(DeleteDefenseDocumentRequest deleteDefenseDocumentRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get applicable defense reasons
        /// </summary>
        /// <param name="defenseReasonsRequest"><see cref="DefenseReasonsRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="DefenseReasonsResponse"/>.</returns>
        Model.Disputes.DefenseReasonsResponse RetrieveApplicableDefenseReasons(DefenseReasonsRequest defenseReasonsRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get applicable defense reasons
        /// </summary>
        /// <param name="defenseReasonsRequest"><see cref="DefenseReasonsRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="DefenseReasonsResponse"/>.</returns>
        Task<Model.Disputes.DefenseReasonsResponse> RetrieveApplicableDefenseReasonsAsync(DefenseReasonsRequest defenseReasonsRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Supply a defense document
        /// </summary>
        /// <param name="supplyDefenseDocumentRequest"><see cref="SupplyDefenseDocumentRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="SupplyDefenseDocumentResponse"/>.</returns>
        Model.Disputes.SupplyDefenseDocumentResponse SupplyDefenseDocument(SupplyDefenseDocumentRequest supplyDefenseDocumentRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Supply a defense document
        /// </summary>
        /// <param name="supplyDefenseDocumentRequest"><see cref="SupplyDefenseDocumentRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="SupplyDefenseDocumentResponse"/>.</returns>
        Task<Model.Disputes.SupplyDefenseDocumentResponse> SupplyDefenseDocumentAsync(SupplyDefenseDocumentRequest supplyDefenseDocumentRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the DisputesService API endpoints
    /// </summary>
    public class DisputesService : AbstractService, IDisputesService
    {
        private readonly string _baseUrl;
        
        public DisputesService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://ca-test.adyen.com/ca/services/DisputeService/v30");
        }
        
        public Model.Disputes.AcceptDisputeResponse AcceptDispute(AcceptDisputeRequest acceptDisputeRequest = default, RequestOptions requestOptions = default)
        {
            return AcceptDisputeAsync(acceptDisputeRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Disputes.AcceptDisputeResponse> AcceptDisputeAsync(AcceptDisputeRequest acceptDisputeRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/acceptDispute";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Disputes.AcceptDisputeResponse>(acceptDisputeRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Disputes.DefendDisputeResponse DefendDispute(DefendDisputeRequest defendDisputeRequest = default, RequestOptions requestOptions = default)
        {
            return DefendDisputeAsync(defendDisputeRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Disputes.DefendDisputeResponse> DefendDisputeAsync(DefendDisputeRequest defendDisputeRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/defendDispute";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Disputes.DefendDisputeResponse>(defendDisputeRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Disputes.DeleteDefenseDocumentResponse DeleteDisputeDefenseDocument(DeleteDefenseDocumentRequest deleteDefenseDocumentRequest = default, RequestOptions requestOptions = default)
        {
            return DeleteDisputeDefenseDocumentAsync(deleteDefenseDocumentRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Disputes.DeleteDefenseDocumentResponse> DeleteDisputeDefenseDocumentAsync(DeleteDefenseDocumentRequest deleteDefenseDocumentRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/deleteDisputeDefenseDocument";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Disputes.DeleteDefenseDocumentResponse>(deleteDefenseDocumentRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Disputes.DefenseReasonsResponse RetrieveApplicableDefenseReasons(DefenseReasonsRequest defenseReasonsRequest = default, RequestOptions requestOptions = default)
        {
            return RetrieveApplicableDefenseReasonsAsync(defenseReasonsRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Disputes.DefenseReasonsResponse> RetrieveApplicableDefenseReasonsAsync(DefenseReasonsRequest defenseReasonsRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/retrieveApplicableDefenseReasons";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Disputes.DefenseReasonsResponse>(defenseReasonsRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.Disputes.SupplyDefenseDocumentResponse SupplyDefenseDocument(SupplyDefenseDocumentRequest supplyDefenseDocumentRequest = default, RequestOptions requestOptions = default)
        {
            return SupplyDefenseDocumentAsync(supplyDefenseDocumentRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.Disputes.SupplyDefenseDocumentResponse> SupplyDefenseDocumentAsync(SupplyDefenseDocumentRequest supplyDefenseDocumentRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/supplyDefenseDocument";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.Disputes.SupplyDefenseDocumentResponse>(supplyDefenseDocumentRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
    }
}