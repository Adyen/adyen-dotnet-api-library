/*
* Fund API
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Model.PlatformsFund;

namespace Adyen.Service
{
    /// <summary>
    /// DefaultService Interface
    /// </summary>
    public interface IPlatformsFundService
    {
        /// <summary>
        /// Get the balances of an account holder
        /// </summary>
        /// <param name="accountHolderBalanceRequest"><see cref="AccountHolderBalanceRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="AccountHolderBalanceResponse"/>.</returns>
        Model.PlatformsFund.AccountHolderBalanceResponse AccountHolderBalance(AccountHolderBalanceRequest accountHolderBalanceRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get the balances of an account holder
        /// </summary>
        /// <param name="accountHolderBalanceRequest"><see cref="AccountHolderBalanceRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="AccountHolderBalanceResponse"/>.</returns>
        Task<Model.PlatformsFund.AccountHolderBalanceResponse> AccountHolderBalanceAsync(AccountHolderBalanceRequest accountHolderBalanceRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Get a list of transactions
        /// </summary>
        /// <param name="accountHolderTransactionListRequest"><see cref="AccountHolderTransactionListRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="AccountHolderTransactionListResponse"/>.</returns>
        Model.PlatformsFund.AccountHolderTransactionListResponse AccountHolderTransactionList(AccountHolderTransactionListRequest accountHolderTransactionListRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Get a list of transactions
        /// </summary>
        /// <param name="accountHolderTransactionListRequest"><see cref="AccountHolderTransactionListRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="AccountHolderTransactionListResponse"/>.</returns>
        Task<Model.PlatformsFund.AccountHolderTransactionListResponse> AccountHolderTransactionListAsync(AccountHolderTransactionListRequest accountHolderTransactionListRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Send a direct debit request
        /// </summary>
        /// <param name="debitAccountHolderRequest"><see cref="DebitAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="DebitAccountHolderResponse"/>.</returns>
        Model.PlatformsFund.DebitAccountHolderResponse DebitAccountHolder(DebitAccountHolderRequest debitAccountHolderRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Send a direct debit request
        /// </summary>
        /// <param name="debitAccountHolderRequest"><see cref="DebitAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="DebitAccountHolderResponse"/>.</returns>
        Task<Model.PlatformsFund.DebitAccountHolderResponse> DebitAccountHolderAsync(DebitAccountHolderRequest debitAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Pay out from an account to the account holder
        /// </summary>
        /// <param name="payoutAccountHolderRequest"><see cref="PayoutAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="PayoutAccountHolderResponse"/>.</returns>
        Model.PlatformsFund.PayoutAccountHolderResponse PayoutAccountHolder(PayoutAccountHolderRequest payoutAccountHolderRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Pay out from an account to the account holder
        /// </summary>
        /// <param name="payoutAccountHolderRequest"><see cref="PayoutAccountHolderRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="PayoutAccountHolderResponse"/>.</returns>
        Task<Model.PlatformsFund.PayoutAccountHolderResponse> PayoutAccountHolderAsync(PayoutAccountHolderRequest payoutAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Refund a funds transfer
        /// </summary>
        /// <param name="refundFundsTransferRequest"><see cref="RefundFundsTransferRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="RefundFundsTransferResponse"/>.</returns>
        Model.PlatformsFund.RefundFundsTransferResponse RefundFundsTransfer(RefundFundsTransferRequest refundFundsTransferRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Refund a funds transfer
        /// </summary>
        /// <param name="refundFundsTransferRequest"><see cref="RefundFundsTransferRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="RefundFundsTransferResponse"/>.</returns>
        Task<Model.PlatformsFund.RefundFundsTransferResponse> RefundFundsTransferAsync(RefundFundsTransferRequest refundFundsTransferRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Refund all transactions of an account since the most recent payout
        /// </summary>
        /// <param name="refundNotPaidOutTransfersRequest"><see cref="RefundNotPaidOutTransfersRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="RefundNotPaidOutTransfersResponse"/>.</returns>
        Model.PlatformsFund.RefundNotPaidOutTransfersResponse RefundNotPaidOutTransfers(RefundNotPaidOutTransfersRequest refundNotPaidOutTransfersRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Refund all transactions of an account since the most recent payout
        /// </summary>
        /// <param name="refundNotPaidOutTransfersRequest"><see cref="RefundNotPaidOutTransfersRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="RefundNotPaidOutTransfersResponse"/>.</returns>
        Task<Model.PlatformsFund.RefundNotPaidOutTransfersResponse> RefundNotPaidOutTransfersAsync(RefundNotPaidOutTransfersRequest refundNotPaidOutTransfersRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Designate a beneficiary account and transfer the benefactor's current balance
        /// </summary>
        /// <param name="setupBeneficiaryRequest"><see cref="SetupBeneficiaryRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="SetupBeneficiaryResponse"/>.</returns>
        Model.PlatformsFund.SetupBeneficiaryResponse SetupBeneficiary(SetupBeneficiaryRequest setupBeneficiaryRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Designate a beneficiary account and transfer the benefactor's current balance
        /// </summary>
        /// <param name="setupBeneficiaryRequest"><see cref="SetupBeneficiaryRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="SetupBeneficiaryResponse"/>.</returns>
        Task<Model.PlatformsFund.SetupBeneficiaryResponse> SetupBeneficiaryAsync(SetupBeneficiaryRequest setupBeneficiaryRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
        /// <summary>
        /// Transfer funds between platform accounts
        /// </summary>
        /// <param name="transferFundsRequest"><see cref="TransferFundsRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <returns><see cref="TransferFundsResponse"/>.</returns>
        Model.PlatformsFund.TransferFundsResponse TransferFunds(TransferFundsRequest transferFundsRequest = default, RequestOptions requestOptions = default);
        
        /// <summary>
        /// Transfer funds between platform accounts
        /// </summary>
        /// <param name="transferFundsRequest"><see cref="TransferFundsRequest"/> - </param>
        /// <param name="requestOptions"><see cref="RequestOptions"/> - Additional request options.</param>
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>
        /// <returns>Task of <see cref="TransferFundsResponse"/>.</returns>
        Task<Model.PlatformsFund.TransferFundsResponse> TransferFundsAsync(TransferFundsRequest transferFundsRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default);
        
    }
    
    /// <summary>
    /// Represents a collection of functions to interact with the PlatformsFundService API endpoints
    /// </summary>
    public class PlatformsFundService : AbstractService, IPlatformsFundService
    {
        private readonly string _baseUrl;
        
        public PlatformsFundService(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("https://cal-test.adyen.com/cal/services/Fund/v6");
        }
        
        public Model.PlatformsFund.AccountHolderBalanceResponse AccountHolderBalance(AccountHolderBalanceRequest accountHolderBalanceRequest = default, RequestOptions requestOptions = default)
        {
            return AccountHolderBalanceAsync(accountHolderBalanceRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsFund.AccountHolderBalanceResponse> AccountHolderBalanceAsync(AccountHolderBalanceRequest accountHolderBalanceRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/accountHolderBalance";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsFund.AccountHolderBalanceResponse>(accountHolderBalanceRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsFund.AccountHolderTransactionListResponse AccountHolderTransactionList(AccountHolderTransactionListRequest accountHolderTransactionListRequest = default, RequestOptions requestOptions = default)
        {
            return AccountHolderTransactionListAsync(accountHolderTransactionListRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsFund.AccountHolderTransactionListResponse> AccountHolderTransactionListAsync(AccountHolderTransactionListRequest accountHolderTransactionListRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/accountHolderTransactionList";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsFund.AccountHolderTransactionListResponse>(accountHolderTransactionListRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsFund.DebitAccountHolderResponse DebitAccountHolder(DebitAccountHolderRequest debitAccountHolderRequest = default, RequestOptions requestOptions = default)
        {
            return DebitAccountHolderAsync(debitAccountHolderRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsFund.DebitAccountHolderResponse> DebitAccountHolderAsync(DebitAccountHolderRequest debitAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/debitAccountHolder";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsFund.DebitAccountHolderResponse>(debitAccountHolderRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsFund.PayoutAccountHolderResponse PayoutAccountHolder(PayoutAccountHolderRequest payoutAccountHolderRequest = default, RequestOptions requestOptions = default)
        {
            return PayoutAccountHolderAsync(payoutAccountHolderRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsFund.PayoutAccountHolderResponse> PayoutAccountHolderAsync(PayoutAccountHolderRequest payoutAccountHolderRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/payoutAccountHolder";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsFund.PayoutAccountHolderResponse>(payoutAccountHolderRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsFund.RefundFundsTransferResponse RefundFundsTransfer(RefundFundsTransferRequest refundFundsTransferRequest = default, RequestOptions requestOptions = default)
        {
            return RefundFundsTransferAsync(refundFundsTransferRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsFund.RefundFundsTransferResponse> RefundFundsTransferAsync(RefundFundsTransferRequest refundFundsTransferRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/refundFundsTransfer";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsFund.RefundFundsTransferResponse>(refundFundsTransferRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsFund.RefundNotPaidOutTransfersResponse RefundNotPaidOutTransfers(RefundNotPaidOutTransfersRequest refundNotPaidOutTransfersRequest = default, RequestOptions requestOptions = default)
        {
            return RefundNotPaidOutTransfersAsync(refundNotPaidOutTransfersRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsFund.RefundNotPaidOutTransfersResponse> RefundNotPaidOutTransfersAsync(RefundNotPaidOutTransfersRequest refundNotPaidOutTransfersRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/refundNotPaidOutTransfers";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsFund.RefundNotPaidOutTransfersResponse>(refundNotPaidOutTransfersRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsFund.SetupBeneficiaryResponse SetupBeneficiary(SetupBeneficiaryRequest setupBeneficiaryRequest = default, RequestOptions requestOptions = default)
        {
            return SetupBeneficiaryAsync(setupBeneficiaryRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsFund.SetupBeneficiaryResponse> SetupBeneficiaryAsync(SetupBeneficiaryRequest setupBeneficiaryRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/setupBeneficiary";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsFund.SetupBeneficiaryResponse>(setupBeneficiaryRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
        
        public Model.PlatformsFund.TransferFundsResponse TransferFunds(TransferFundsRequest transferFundsRequest = default, RequestOptions requestOptions = default)
        {
            return TransferFundsAsync(transferFundsRequest, requestOptions).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Model.PlatformsFund.TransferFundsResponse> TransferFundsAsync(TransferFundsRequest transferFundsRequest = default, RequestOptions requestOptions = default, CancellationToken cancellationToken = default)
        {
            var endpoint = _baseUrl + "/transferFunds";
            var resource = new ServiceResource(this, endpoint);
            return await resource.RequestAsync<Model.PlatformsFund.TransferFundsResponse>(transferFundsRequest.ToJson(), requestOptions, new HttpMethod("POST"), cancellationToken).ConfigureAwait(false);
        }
    }
}