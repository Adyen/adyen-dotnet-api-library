/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// DocumentPage
    /// </summary>
    [DataContract(Name = "DocumentPage")]
    public partial class DocumentPage : IEquatable<DocumentPage>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum BACK for value: BACK
            /// </summary>
            [EnumMember(Value = "BACK")]
            BACK = 1,

            /// <summary>
            /// Enum FRONT for value: FRONT
            /// </summary>
            [EnumMember(Value = "FRONT")]
            FRONT = 2,

            /// <summary>
            /// Enum UNDEFINED for value: UNDEFINED
            /// </summary>
            [EnumMember(Value = "UNDEFINED")]
            UNDEFINED = 3

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentPage" /> class.
        /// </summary>
        /// <param name="pageName">pageName.</param>
        /// <param name="pageNumber">pageNumber.</param>
        /// <param name="type">type.</param>
        public DocumentPage(string pageName = default(string), int? pageNumber = default(int?), TypeEnum? type = default(TypeEnum?))
        {
            this.PageName = pageName;
            this.PageNumber = pageNumber;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets PageName
        /// </summary>
        [DataMember(Name = "pageName", EmitDefaultValue = false)]
        public string PageName { get; set; }

        /// <summary>
        /// Gets or Sets PageNumber
        /// </summary>
        [DataMember(Name = "pageNumber", EmitDefaultValue = false)]
        public int? PageNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentPage {\n");
            sb.Append("  PageName: ").Append(PageName).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentPage);
        }

        /// <summary>
        /// Returns true if DocumentPage instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentPage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PageName == input.PageName ||
                    (this.PageName != null &&
                    this.PageName.Equals(input.PageName))
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    this.PageNumber.Equals(input.PageNumber)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PageName != null)
                {
                    hashCode = (hashCode * 59) + this.PageName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PageNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
