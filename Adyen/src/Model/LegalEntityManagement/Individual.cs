/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// Individual
    /// </summary>
    [DataContract(Name = "Individual")]
    public partial class Individual : IEquatable<Individual>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Individual" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Individual() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Individual" /> class.
        /// </summary>
        /// <param name="birthData">birthData.</param>
        /// <param name="email">The email address of the legal entity..</param>
        /// <param name="identificationData">identificationData.</param>
        /// <param name="name">name (required).</param>
        /// <param name="nationality">The individual&#39;s nationality..</param>
        /// <param name="phone">phone.</param>
        /// <param name="residentialAddress">residentialAddress (required).</param>
        /// <param name="taxInformation">The tax information of the individual..</param>
        /// <param name="webData">webData.</param>
        public Individual(BirthData birthData = default(BirthData), string email = default(string), IdentificationData identificationData = default(IdentificationData), Name name = default(Name), string nationality = default(string), PhoneNumber phone = default(PhoneNumber), Address residentialAddress = default(Address), List<TaxInformation> taxInformation = default(List<TaxInformation>), WebData webData = default(WebData))
        {
            this.Name = name;
            this.ResidentialAddress = residentialAddress;
            this.BirthData = birthData;
            this.Email = email;
            this.IdentificationData = identificationData;
            this.Nationality = nationality;
            this.Phone = phone;
            this.TaxInformation = taxInformation;
            this.WebData = webData;
        }

        /// <summary>
        /// Gets or Sets BirthData
        /// </summary>
        [DataMember(Name = "birthData", EmitDefaultValue = false)]
        public BirthData BirthData { get; set; }

        /// <summary>
        /// The email address of the legal entity.
        /// </summary>
        /// <value>The email address of the legal entity.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets IdentificationData
        /// </summary>
        [DataMember(Name = "identificationData", EmitDefaultValue = false)]
        public IdentificationData IdentificationData { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = false, EmitDefaultValue = false)]
        public Name Name { get; set; }

        /// <summary>
        /// The individual&#39;s nationality.
        /// </summary>
        /// <value>The individual&#39;s nationality.</value>
        [DataMember(Name = "nationality", EmitDefaultValue = false)]
        public string Nationality { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public PhoneNumber Phone { get; set; }

        /// <summary>
        /// Gets or Sets ResidentialAddress
        /// </summary>
        [DataMember(Name = "residentialAddress", IsRequired = false, EmitDefaultValue = false)]
        public Address ResidentialAddress { get; set; }

        /// <summary>
        /// The tax information of the individual.
        /// </summary>
        /// <value>The tax information of the individual.</value>
        [DataMember(Name = "taxInformation", EmitDefaultValue = false)]
        public List<TaxInformation> TaxInformation { get; set; }

        /// <summary>
        /// Gets or Sets WebData
        /// </summary>
        [DataMember(Name = "webData", EmitDefaultValue = false)]
        public WebData WebData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Individual {\n");
            sb.Append("  BirthData: ").Append(BirthData).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IdentificationData: ").Append(IdentificationData).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  ResidentialAddress: ").Append(ResidentialAddress).Append("\n");
            sb.Append("  TaxInformation: ").Append(TaxInformation).Append("\n");
            sb.Append("  WebData: ").Append(WebData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Individual);
        }

        /// <summary>
        /// Returns true if Individual instances are equal
        /// </summary>
        /// <param name="input">Instance of Individual to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Individual input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BirthData == input.BirthData ||
                    (this.BirthData != null &&
                    this.BirthData.Equals(input.BirthData))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.IdentificationData == input.IdentificationData ||
                    (this.IdentificationData != null &&
                    this.IdentificationData.Equals(input.IdentificationData))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Nationality == input.Nationality ||
                    (this.Nationality != null &&
                    this.Nationality.Equals(input.Nationality))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.ResidentialAddress == input.ResidentialAddress ||
                    (this.ResidentialAddress != null &&
                    this.ResidentialAddress.Equals(input.ResidentialAddress))
                ) && 
                (
                    this.TaxInformation == input.TaxInformation ||
                    this.TaxInformation != null &&
                    input.TaxInformation != null &&
                    this.TaxInformation.SequenceEqual(input.TaxInformation)
                ) && 
                (
                    this.WebData == input.WebData ||
                    (this.WebData != null &&
                    this.WebData.Equals(input.WebData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BirthData != null)
                {
                    hashCode = (hashCode * 59) + this.BirthData.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.IdentificationData != null)
                {
                    hashCode = (hashCode * 59) + this.IdentificationData.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Nationality != null)
                {
                    hashCode = (hashCode * 59) + this.Nationality.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.ResidentialAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ResidentialAddress.GetHashCode();
                }
                if (this.TaxInformation != null)
                {
                    hashCode = (hashCode * 59) + this.TaxInformation.GetHashCode();
                }
                if (this.WebData != null)
                {
                    hashCode = (hashCode * 59) + this.WebData.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
