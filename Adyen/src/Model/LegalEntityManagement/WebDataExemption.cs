/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// WebDataExemption
    /// </summary>
    [DataContract(Name = "WebDataExemption")]
    public partial class WebDataExemption : IEquatable<WebDataExemption>, IValidatableObject
    {
        /// <summary>
        /// The reason why the web data was not provided. Possible value: **noOnlinePresence**.
        /// </summary>
        /// <value>The reason why the web data was not provided. Possible value: **noOnlinePresence**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum NoOnlinePresence for value: noOnlinePresence
            /// </summary>
            [EnumMember(Value = "noOnlinePresence")]
            NoOnlinePresence = 1,

            /// <summary>
            /// Enum NotCollectedDuringOnboarding for value: notCollectedDuringOnboarding
            /// </summary>
            [EnumMember(Value = "notCollectedDuringOnboarding")]
            NotCollectedDuringOnboarding = 2

        }


        /// <summary>
        /// The reason why the web data was not provided. Possible value: **noOnlinePresence**.
        /// </summary>
        /// <value>The reason why the web data was not provided. Possible value: **noOnlinePresence**.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebDataExemption" /> class.
        /// </summary>
        /// <param name="reason">The reason why the web data was not provided. Possible value: **noOnlinePresence**..</param>
        public WebDataExemption(ReasonEnum? reason = default(ReasonEnum?))
        {
            this.Reason = reason;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebDataExemption {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebDataExemption);
        }

        /// <summary>
        /// Returns true if WebDataExemption instances are equal
        /// </summary>
        /// <param name="input">Instance of WebDataExemption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebDataExemption input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Reason == input.Reason ||
                    this.Reason.Equals(input.Reason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
