/*
* Transfer webhooks
*
*
* The version of the OpenAPI document: 4
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.TransferWebhooks
{
    /// <summary>
    /// TransactionRuleReference
    /// </summary>
    [DataContract(Name = "TransactionRuleReference")]
    public partial class TransactionRuleReference : IEquatable<TransactionRuleReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRuleReference" /> class.
        /// </summary>
        /// <param name="description">The description of the resource..</param>
        /// <param name="id">The unique identifier of the resource..</param>
        /// <param name="outcomeType">The outcome type of the rule..</param>
        /// <param name="reference">The reference for the resource..</param>
        /// <param name="score">The score of the rule in case it&#39;s a scoreBased rule..</param>
        public TransactionRuleReference(string description = default(string), string id = default(string), string outcomeType = default(string), string reference = default(string), int? score = default(int?))
        {
            this.Description = description;
            this.Id = id;
            this.OutcomeType = outcomeType;
            this.Reference = reference;
            this.Score = score;
        }

        /// <summary>
        /// The description of the resource.
        /// </summary>
        /// <value>The description of the resource.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier of the resource.
        /// </summary>
        /// <value>The unique identifier of the resource.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The outcome type of the rule.
        /// </summary>
        /// <value>The outcome type of the rule.</value>
        [DataMember(Name = "outcomeType", EmitDefaultValue = false)]
        public string OutcomeType { get; set; }

        /// <summary>
        /// The reference for the resource.
        /// </summary>
        /// <value>The reference for the resource.</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// The score of the rule in case it&#39;s a scoreBased rule.
        /// </summary>
        /// <value>The score of the rule in case it&#39;s a scoreBased rule.</value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public int? Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionRuleReference {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OutcomeType: ").Append(OutcomeType).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionRuleReference);
        }

        /// <summary>
        /// Returns true if TransactionRuleReference instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionRuleReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionRuleReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OutcomeType == input.OutcomeType ||
                    (this.OutcomeType != null &&
                    this.OutcomeType.Equals(input.OutcomeType))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.OutcomeType != null)
                {
                    hashCode = (hashCode * 59) + this.OutcomeType.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Score.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
