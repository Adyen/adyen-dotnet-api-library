/*
* Classic Platforms - Notifications
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsWebhooks
{
    /// <summary>
    /// DirectDebitInitiatedNotificationContent
    /// </summary>
    [DataContract(Name = "DirectDebitInitiatedNotificationContent")]
    public partial class DirectDebitInitiatedNotificationContent : IEquatable<DirectDebitInitiatedNotificationContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DirectDebitInitiatedNotificationContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DirectDebitInitiatedNotificationContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DirectDebitInitiatedNotificationContent" /> class.
        /// </summary>
        /// <param name="accountCode">The code of the account. (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="debitInitiationDate">debitInitiationDate.</param>
        /// <param name="invalidFields">Invalid fields list..</param>
        /// <param name="merchantAccountCode">The code of the merchant account. (required).</param>
        /// <param name="splits">The split data for the debit request..</param>
        /// <param name="status">status.</param>
        public DirectDebitInitiatedNotificationContent(string accountCode = default(string), Amount amount = default(Amount), LocalDate debitInitiationDate = default(LocalDate), List<ErrorFieldType> invalidFields = default(List<ErrorFieldType>), string merchantAccountCode = default(string), List<Split> splits = default(List<Split>), OperationStatus status = default(OperationStatus))
        {
            this.AccountCode = accountCode;
            this.Amount = amount;
            this.MerchantAccountCode = merchantAccountCode;
            this.DebitInitiationDate = debitInitiationDate;
            this.InvalidFields = invalidFields;
            this.Splits = splits;
            this.Status = status;
        }

        /// <summary>
        /// The code of the account.
        /// </summary>
        /// <value>The code of the account.</value>
        [DataMember(Name = "accountCode", IsRequired = false, EmitDefaultValue = false)]
        public string AccountCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = false, EmitDefaultValue = false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets DebitInitiationDate
        /// </summary>
        [DataMember(Name = "debitInitiationDate", EmitDefaultValue = false)]
        public LocalDate DebitInitiationDate { get; set; }

        /// <summary>
        /// Invalid fields list.
        /// </summary>
        /// <value>Invalid fields list.</value>
        [DataMember(Name = "invalidFields", EmitDefaultValue = false)]
        public List<ErrorFieldType> InvalidFields { get; set; }

        /// <summary>
        /// The code of the merchant account.
        /// </summary>
        /// <value>The code of the merchant account.</value>
        [DataMember(Name = "merchantAccountCode", IsRequired = false, EmitDefaultValue = false)]
        public string MerchantAccountCode { get; set; }

        /// <summary>
        /// The split data for the debit request.
        /// </summary>
        /// <value>The split data for the debit request.</value>
        [DataMember(Name = "splits", EmitDefaultValue = false)]
        public List<Split> Splits { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public OperationStatus Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DirectDebitInitiatedNotificationContent {\n");
            sb.Append("  AccountCode: ").Append(AccountCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  DebitInitiationDate: ").Append(DebitInitiationDate).Append("\n");
            sb.Append("  InvalidFields: ").Append(InvalidFields).Append("\n");
            sb.Append("  MerchantAccountCode: ").Append(MerchantAccountCode).Append("\n");
            sb.Append("  Splits: ").Append(Splits).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DirectDebitInitiatedNotificationContent);
        }

        /// <summary>
        /// Returns true if DirectDebitInitiatedNotificationContent instances are equal
        /// </summary>
        /// <param name="input">Instance of DirectDebitInitiatedNotificationContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirectDebitInitiatedNotificationContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountCode == input.AccountCode ||
                    (this.AccountCode != null &&
                    this.AccountCode.Equals(input.AccountCode))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.DebitInitiationDate == input.DebitInitiationDate ||
                    (this.DebitInitiationDate != null &&
                    this.DebitInitiationDate.Equals(input.DebitInitiationDate))
                ) && 
                (
                    this.InvalidFields == input.InvalidFields ||
                    this.InvalidFields != null &&
                    input.InvalidFields != null &&
                    this.InvalidFields.SequenceEqual(input.InvalidFields)
                ) && 
                (
                    this.MerchantAccountCode == input.MerchantAccountCode ||
                    (this.MerchantAccountCode != null &&
                    this.MerchantAccountCode.Equals(input.MerchantAccountCode))
                ) && 
                (
                    this.Splits == input.Splits ||
                    this.Splits != null &&
                    input.Splits != null &&
                    this.Splits.SequenceEqual(input.Splits)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountCode != null)
                {
                    hashCode = (hashCode * 59) + this.AccountCode.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.DebitInitiationDate != null)
                {
                    hashCode = (hashCode * 59) + this.DebitInitiationDate.GetHashCode();
                }
                if (this.InvalidFields != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidFields.GetHashCode();
                }
                if (this.MerchantAccountCode != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantAccountCode.GetHashCode();
                }
                if (this.Splits != null)
                {
                    hashCode = (hashCode * 59) + this.Splits.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
