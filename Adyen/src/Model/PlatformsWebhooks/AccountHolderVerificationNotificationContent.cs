/*
* Classic Platforms - Notifications
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsWebhooks
{
    /// <summary>
    /// AccountHolderVerificationNotificationContent
    /// </summary>
    [DataContract(Name = "AccountHolderVerificationNotificationContent")]
    public partial class AccountHolderVerificationNotificationContent : IEquatable<AccountHolderVerificationNotificationContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountHolderVerificationNotificationContent" /> class.
        /// </summary>
        /// <param name="accountHolderCode">The code of the account holder..</param>
        /// <param name="kycCheckStatusData">kycCheckStatusData.</param>
        /// <param name="legalArrangementCode">The unique ID of the legal arrangement that has been verified..</param>
        /// <param name="legalArrangementEntityCode">The unique ID of the legal arrangement entity that has been verified..</param>
        /// <param name="payoutMethodCode">The unique code of the payout method that has been verified..</param>
        /// <param name="shareholderCode">The code of the shareholder that has been verified..</param>
        /// <param name="signatoryCode">The code of the signatory that has been verified..</param>
        public AccountHolderVerificationNotificationContent(string accountHolderCode = default(string), KYCCheckStatusData kycCheckStatusData = default(KYCCheckStatusData), string legalArrangementCode = default(string), string legalArrangementEntityCode = default(string), string payoutMethodCode = default(string), string shareholderCode = default(string), string signatoryCode = default(string))
        {
            this.AccountHolderCode = accountHolderCode;
            this.KycCheckStatusData = kycCheckStatusData;
            this.LegalArrangementCode = legalArrangementCode;
            this.LegalArrangementEntityCode = legalArrangementEntityCode;
            this.PayoutMethodCode = payoutMethodCode;
            this.ShareholderCode = shareholderCode;
            this.SignatoryCode = signatoryCode;
        }

        /// <summary>
        /// The code of the account holder.
        /// </summary>
        /// <value>The code of the account holder.</value>
        [DataMember(Name = "accountHolderCode", EmitDefaultValue = false)]
        public string AccountHolderCode { get; set; }

        /// <summary>
        /// Gets or Sets KycCheckStatusData
        /// </summary>
        [DataMember(Name = "kycCheckStatusData", EmitDefaultValue = false)]
        public KYCCheckStatusData KycCheckStatusData { get; set; }

        /// <summary>
        /// The unique ID of the legal arrangement that has been verified.
        /// </summary>
        /// <value>The unique ID of the legal arrangement that has been verified.</value>
        [DataMember(Name = "legalArrangementCode", EmitDefaultValue = false)]
        public string LegalArrangementCode { get; set; }

        /// <summary>
        /// The unique ID of the legal arrangement entity that has been verified.
        /// </summary>
        /// <value>The unique ID of the legal arrangement entity that has been verified.</value>
        [DataMember(Name = "legalArrangementEntityCode", EmitDefaultValue = false)]
        public string LegalArrangementEntityCode { get; set; }

        /// <summary>
        /// The unique code of the payout method that has been verified.
        /// </summary>
        /// <value>The unique code of the payout method that has been verified.</value>
        [DataMember(Name = "payoutMethodCode", EmitDefaultValue = false)]
        public string PayoutMethodCode { get; set; }

        /// <summary>
        /// The code of the shareholder that has been verified.
        /// </summary>
        /// <value>The code of the shareholder that has been verified.</value>
        [DataMember(Name = "shareholderCode", EmitDefaultValue = false)]
        public string ShareholderCode { get; set; }

        /// <summary>
        /// The code of the signatory that has been verified.
        /// </summary>
        /// <value>The code of the signatory that has been verified.</value>
        [DataMember(Name = "signatoryCode", EmitDefaultValue = false)]
        public string SignatoryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountHolderVerificationNotificationContent {\n");
            sb.Append("  AccountHolderCode: ").Append(AccountHolderCode).Append("\n");
            sb.Append("  KycCheckStatusData: ").Append(KycCheckStatusData).Append("\n");
            sb.Append("  LegalArrangementCode: ").Append(LegalArrangementCode).Append("\n");
            sb.Append("  LegalArrangementEntityCode: ").Append(LegalArrangementEntityCode).Append("\n");
            sb.Append("  PayoutMethodCode: ").Append(PayoutMethodCode).Append("\n");
            sb.Append("  ShareholderCode: ").Append(ShareholderCode).Append("\n");
            sb.Append("  SignatoryCode: ").Append(SignatoryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountHolderVerificationNotificationContent);
        }

        /// <summary>
        /// Returns true if AccountHolderVerificationNotificationContent instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountHolderVerificationNotificationContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountHolderVerificationNotificationContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountHolderCode == input.AccountHolderCode ||
                    (this.AccountHolderCode != null &&
                    this.AccountHolderCode.Equals(input.AccountHolderCode))
                ) && 
                (
                    this.KycCheckStatusData == input.KycCheckStatusData ||
                    (this.KycCheckStatusData != null &&
                    this.KycCheckStatusData.Equals(input.KycCheckStatusData))
                ) && 
                (
                    this.LegalArrangementCode == input.LegalArrangementCode ||
                    (this.LegalArrangementCode != null &&
                    this.LegalArrangementCode.Equals(input.LegalArrangementCode))
                ) && 
                (
                    this.LegalArrangementEntityCode == input.LegalArrangementEntityCode ||
                    (this.LegalArrangementEntityCode != null &&
                    this.LegalArrangementEntityCode.Equals(input.LegalArrangementEntityCode))
                ) && 
                (
                    this.PayoutMethodCode == input.PayoutMethodCode ||
                    (this.PayoutMethodCode != null &&
                    this.PayoutMethodCode.Equals(input.PayoutMethodCode))
                ) && 
                (
                    this.ShareholderCode == input.ShareholderCode ||
                    (this.ShareholderCode != null &&
                    this.ShareholderCode.Equals(input.ShareholderCode))
                ) && 
                (
                    this.SignatoryCode == input.SignatoryCode ||
                    (this.SignatoryCode != null &&
                    this.SignatoryCode.Equals(input.SignatoryCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountHolderCode != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolderCode.GetHashCode();
                }
                if (this.KycCheckStatusData != null)
                {
                    hashCode = (hashCode * 59) + this.KycCheckStatusData.GetHashCode();
                }
                if (this.LegalArrangementCode != null)
                {
                    hashCode = (hashCode * 59) + this.LegalArrangementCode.GetHashCode();
                }
                if (this.LegalArrangementEntityCode != null)
                {
                    hashCode = (hashCode * 59) + this.LegalArrangementEntityCode.GetHashCode();
                }
                if (this.PayoutMethodCode != null)
                {
                    hashCode = (hashCode * 59) + this.PayoutMethodCode.GetHashCode();
                }
                if (this.ShareholderCode != null)
                {
                    hashCode = (hashCode * 59) + this.ShareholderCode.GetHashCode();
                }
                if (this.SignatoryCode != null)
                {
                    hashCode = (hashCode * 59) + this.SignatoryCode.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
