/*
* Classic Platforms - Notifications
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsWebhooks
{
    /// <summary>
    /// CompensateNegativeBalanceNotificationRecord
    /// </summary>
    [DataContract(Name = "CompensateNegativeBalanceNotificationRecord")]
    public partial class CompensateNegativeBalanceNotificationRecord : IEquatable<CompensateNegativeBalanceNotificationRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompensateNegativeBalanceNotificationRecord" /> class.
        /// </summary>
        /// <param name="accountCode">The code of the account whose negative balance has been compensated..</param>
        /// <param name="amount">amount.</param>
        /// <param name="transferDate">The date on which the compensation took place..</param>
        public CompensateNegativeBalanceNotificationRecord(string accountCode = default(string), Amount amount = default(Amount), DateTime transferDate = default(DateTime))
        {
            this.AccountCode = accountCode;
            this.Amount = amount;
            this.TransferDate = transferDate;
        }

        /// <summary>
        /// The code of the account whose negative balance has been compensated.
        /// </summary>
        /// <value>The code of the account whose negative balance has been compensated.</value>
        [DataMember(Name = "accountCode", EmitDefaultValue = false)]
        public string AccountCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// The date on which the compensation took place.
        /// </summary>
        /// <value>The date on which the compensation took place.</value>
        [DataMember(Name = "transferDate", EmitDefaultValue = false)]
        public DateTime TransferDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompensateNegativeBalanceNotificationRecord {\n");
            sb.Append("  AccountCode: ").Append(AccountCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TransferDate: ").Append(TransferDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompensateNegativeBalanceNotificationRecord);
        }

        /// <summary>
        /// Returns true if CompensateNegativeBalanceNotificationRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of CompensateNegativeBalanceNotificationRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompensateNegativeBalanceNotificationRecord input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountCode == input.AccountCode ||
                    (this.AccountCode != null &&
                    this.AccountCode.Equals(input.AccountCode))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.TransferDate == input.TransferDate ||
                    (this.TransferDate != null &&
                    this.TransferDate.Equals(input.TransferDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountCode != null)
                {
                    hashCode = (hashCode * 59) + this.AccountCode.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.TransferDate != null)
                {
                    hashCode = (hashCode * 59) + this.TransferDate.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
