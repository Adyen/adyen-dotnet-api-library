/*
* Adyen BinLookup API
*
*
* The version of the OpenAPI document: 54
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BinLookup
{
    /// <summary>
    /// CardBin
    /// </summary>
    [DataContract(Name = "CardBin")]
    public partial class CardBin : IEquatable<CardBin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardBin" /> class.
        /// </summary>
        /// <param name="bin">The first 6 digit of the card number. Enable this field via merchant account settings..</param>
        /// <param name="commercial">If true, it indicates a commercial card. Enable this field via merchant account settings..</param>
        /// <param name="fundingSource">The card funding source. Valid values are: * CHARGE * CREDIT * DEBIT * DEFERRED_DEBIT * PREPAID * PREPAID_RELOADABLE * PREPAID_NONRELOADABLE &gt; Enable this field via merchant account settings..</param>
        /// <param name="fundsAvailability">Indicates availability of funds.  Visa: * \&quot;I\&quot; (fast funds are supported) * \&quot;N\&quot; (otherwise)  Mastercard: * \&quot;I\&quot; (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \&quot;N\&quot; (otherwise) &gt; Returned when you verify a card BIN or estimate costs, and only if &#x60;payoutEligible&#x60; is different from \&quot;N\&quot; or \&quot;U\&quot;..</param>
        /// <param name="issuerBin">The first 8 digit of the card number. Enable this field via merchant account settings..</param>
        /// <param name="issuingBank">The issuing bank of the card..</param>
        /// <param name="issuingCountry">The country where the card was issued from..</param>
        /// <param name="issuingCurrency">The currency of the card..</param>
        /// <param name="paymentMethod">The payment method associated with the card (e.g. visa, mc, or amex)..</param>
        /// <param name="payoutEligible">Indicates whether a payout is eligible or not for this card.  Visa: * \&quot;Y\&quot; * \&quot;N\&quot;  Mastercard: * \&quot;Y\&quot; (domestic and cross-border) * \&quot;D\&quot; (only domestic) * \&quot;N\&quot; (no MoneySend) * \&quot;U\&quot; (unknown) &gt; Returned when you verify a card BIN or estimate costs, and only if &#x60;payoutEligible&#x60; is different from \&quot;N\&quot; or \&quot;U\&quot;..</param>
        /// <param name="summary">The last four digits of the card number..</param>
        public CardBin(string bin = default(string), bool? commercial = default(bool?), string fundingSource = default(string), string fundsAvailability = default(string), string issuerBin = default(string), string issuingBank = default(string), string issuingCountry = default(string), string issuingCurrency = default(string), string paymentMethod = default(string), string payoutEligible = default(string), string summary = default(string))
        {
            this.Bin = bin;
            this.Commercial = commercial;
            this.FundingSource = fundingSource;
            this.FundsAvailability = fundsAvailability;
            this.IssuerBin = issuerBin;
            this.IssuingBank = issuingBank;
            this.IssuingCountry = issuingCountry;
            this.IssuingCurrency = issuingCurrency;
            this.PaymentMethod = paymentMethod;
            this.PayoutEligible = payoutEligible;
            this.Summary = summary;
        }

        /// <summary>
        /// The first 6 digit of the card number. Enable this field via merchant account settings.
        /// </summary>
        /// <value>The first 6 digit of the card number. Enable this field via merchant account settings.</value>
        [DataMember(Name = "bin", EmitDefaultValue = false)]
        public string Bin { get; set; }

        /// <summary>
        /// If true, it indicates a commercial card. Enable this field via merchant account settings.
        /// </summary>
        /// <value>If true, it indicates a commercial card. Enable this field via merchant account settings.</value>
        [DataMember(Name = "commercial", EmitDefaultValue = false)]
        public bool? Commercial { get; set; }

        /// <summary>
        /// The card funding source. Valid values are: * CHARGE * CREDIT * DEBIT * DEFERRED_DEBIT * PREPAID * PREPAID_RELOADABLE * PREPAID_NONRELOADABLE &gt; Enable this field via merchant account settings.
        /// </summary>
        /// <value>The card funding source. Valid values are: * CHARGE * CREDIT * DEBIT * DEFERRED_DEBIT * PREPAID * PREPAID_RELOADABLE * PREPAID_NONRELOADABLE &gt; Enable this field via merchant account settings.</value>
        [DataMember(Name = "fundingSource", EmitDefaultValue = false)]
        public string FundingSource { get; set; }

        /// <summary>
        /// Indicates availability of funds.  Visa: * \&quot;I\&quot; (fast funds are supported) * \&quot;N\&quot; (otherwise)  Mastercard: * \&quot;I\&quot; (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \&quot;N\&quot; (otherwise) &gt; Returned when you verify a card BIN or estimate costs, and only if &#x60;payoutEligible&#x60; is different from \&quot;N\&quot; or \&quot;U\&quot;.
        /// </summary>
        /// <value>Indicates availability of funds.  Visa: * \&quot;I\&quot; (fast funds are supported) * \&quot;N\&quot; (otherwise)  Mastercard: * \&quot;I\&quot; (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \&quot;N\&quot; (otherwise) &gt; Returned when you verify a card BIN or estimate costs, and only if &#x60;payoutEligible&#x60; is different from \&quot;N\&quot; or \&quot;U\&quot;.</value>
        [DataMember(Name = "fundsAvailability", EmitDefaultValue = false)]
        public string FundsAvailability { get; set; }

        /// <summary>
        /// The first 8 digit of the card number. Enable this field via merchant account settings.
        /// </summary>
        /// <value>The first 8 digit of the card number. Enable this field via merchant account settings.</value>
        [DataMember(Name = "issuerBin", EmitDefaultValue = false)]
        public string IssuerBin { get; set; }

        /// <summary>
        /// The issuing bank of the card.
        /// </summary>
        /// <value>The issuing bank of the card.</value>
        [DataMember(Name = "issuingBank", EmitDefaultValue = false)]
        public string IssuingBank { get; set; }

        /// <summary>
        /// The country where the card was issued from.
        /// </summary>
        /// <value>The country where the card was issued from.</value>
        [DataMember(Name = "issuingCountry", EmitDefaultValue = false)]
        public string IssuingCountry { get; set; }

        /// <summary>
        /// The currency of the card.
        /// </summary>
        /// <value>The currency of the card.</value>
        [DataMember(Name = "issuingCurrency", EmitDefaultValue = false)]
        public string IssuingCurrency { get; set; }

        /// <summary>
        /// The payment method associated with the card (e.g. visa, mc, or amex).
        /// </summary>
        /// <value>The payment method associated with the card (e.g. visa, mc, or amex).</value>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Indicates whether a payout is eligible or not for this card.  Visa: * \&quot;Y\&quot; * \&quot;N\&quot;  Mastercard: * \&quot;Y\&quot; (domestic and cross-border) * \&quot;D\&quot; (only domestic) * \&quot;N\&quot; (no MoneySend) * \&quot;U\&quot; (unknown) &gt; Returned when you verify a card BIN or estimate costs, and only if &#x60;payoutEligible&#x60; is different from \&quot;N\&quot; or \&quot;U\&quot;.
        /// </summary>
        /// <value>Indicates whether a payout is eligible or not for this card.  Visa: * \&quot;Y\&quot; * \&quot;N\&quot;  Mastercard: * \&quot;Y\&quot; (domestic and cross-border) * \&quot;D\&quot; (only domestic) * \&quot;N\&quot; (no MoneySend) * \&quot;U\&quot; (unknown) &gt; Returned when you verify a card BIN or estimate costs, and only if &#x60;payoutEligible&#x60; is different from \&quot;N\&quot; or \&quot;U\&quot;.</value>
        [DataMember(Name = "payoutEligible", EmitDefaultValue = false)]
        public string PayoutEligible { get; set; }

        /// <summary>
        /// The last four digits of the card number.
        /// </summary>
        /// <value>The last four digits of the card number.</value>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public string Summary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardBin {\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  Commercial: ").Append(Commercial).Append("\n");
            sb.Append("  FundingSource: ").Append(FundingSource).Append("\n");
            sb.Append("  FundsAvailability: ").Append(FundsAvailability).Append("\n");
            sb.Append("  IssuerBin: ").Append(IssuerBin).Append("\n");
            sb.Append("  IssuingBank: ").Append(IssuingBank).Append("\n");
            sb.Append("  IssuingCountry: ").Append(IssuingCountry).Append("\n");
            sb.Append("  IssuingCurrency: ").Append(IssuingCurrency).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PayoutEligible: ").Append(PayoutEligible).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardBin);
        }

        /// <summary>
        /// Returns true if CardBin instances are equal
        /// </summary>
        /// <param name="input">Instance of CardBin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardBin input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Bin == input.Bin ||
                    (this.Bin != null &&
                    this.Bin.Equals(input.Bin))
                ) && 
                (
                    this.Commercial == input.Commercial ||
                    this.Commercial.Equals(input.Commercial)
                ) && 
                (
                    this.FundingSource == input.FundingSource ||
                    (this.FundingSource != null &&
                    this.FundingSource.Equals(input.FundingSource))
                ) && 
                (
                    this.FundsAvailability == input.FundsAvailability ||
                    (this.FundsAvailability != null &&
                    this.FundsAvailability.Equals(input.FundsAvailability))
                ) && 
                (
                    this.IssuerBin == input.IssuerBin ||
                    (this.IssuerBin != null &&
                    this.IssuerBin.Equals(input.IssuerBin))
                ) && 
                (
                    this.IssuingBank == input.IssuingBank ||
                    (this.IssuingBank != null &&
                    this.IssuingBank.Equals(input.IssuingBank))
                ) && 
                (
                    this.IssuingCountry == input.IssuingCountry ||
                    (this.IssuingCountry != null &&
                    this.IssuingCountry.Equals(input.IssuingCountry))
                ) && 
                (
                    this.IssuingCurrency == input.IssuingCurrency ||
                    (this.IssuingCurrency != null &&
                    this.IssuingCurrency.Equals(input.IssuingCurrency))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PayoutEligible == input.PayoutEligible ||
                    (this.PayoutEligible != null &&
                    this.PayoutEligible.Equals(input.PayoutEligible))
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bin != null)
                {
                    hashCode = (hashCode * 59) + this.Bin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Commercial.GetHashCode();
                if (this.FundingSource != null)
                {
                    hashCode = (hashCode * 59) + this.FundingSource.GetHashCode();
                }
                if (this.FundsAvailability != null)
                {
                    hashCode = (hashCode * 59) + this.FundsAvailability.GetHashCode();
                }
                if (this.IssuerBin != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerBin.GetHashCode();
                }
                if (this.IssuingBank != null)
                {
                    hashCode = (hashCode * 59) + this.IssuingBank.GetHashCode();
                }
                if (this.IssuingCountry != null)
                {
                    hashCode = (hashCode * 59) + this.IssuingCountry.GetHashCode();
                }
                if (this.IssuingCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.IssuingCurrency.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.PayoutEligible != null)
                {
                    hashCode = (hashCode * 59) + this.PayoutEligible.GetHashCode();
                }
                if (this.Summary != null)
                {
                    hashCode = (hashCode * 59) + this.Summary.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
