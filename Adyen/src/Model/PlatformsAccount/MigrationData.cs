/*
* Account API
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsAccount
{
    /// <summary>
    /// MigrationData
    /// </summary>
    [DataContract(Name = "MigrationData")]
    public partial class MigrationData : IEquatable<MigrationData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MigrationData" /> class.
        /// </summary>
        /// <param name="accountHolderId">The unique identifier of the account holder in the balance platform..</param>
        /// <param name="balancePlatform">The unique identifier of the balance platfrom to which the account holder was migrated..</param>
        /// <param name="migrated">Set to **true** if the account holder has been migrated..</param>
        /// <param name="migratedAccounts">Contains the mapping of virtual account codes (classic integration) to the balance account codes (balance platform) associated with the migrated account holder..</param>
        /// <param name="migratedShareholders">Contains the mapping of shareholders associated with the migrated legal entities..</param>
        /// <param name="migratedStores">Contains the mapping of business lines and stores associated with the migrated account holder..</param>
        /// <param name="migrationDate">The date when account holder was migrated..</param>
        public MigrationData(string accountHolderId = default(string), string balancePlatform = default(string), bool? migrated = default(bool?), List<MigratedAccounts> migratedAccounts = default(List<MigratedAccounts>), List<MigratedShareholders> migratedShareholders = default(List<MigratedShareholders>), List<MigratedStores> migratedStores = default(List<MigratedStores>), DateTime migrationDate = default(DateTime))
        {
            this.AccountHolderId = accountHolderId;
            this.BalancePlatform = balancePlatform;
            this.Migrated = migrated;
            this.MigratedAccounts = migratedAccounts;
            this.MigratedShareholders = migratedShareholders;
            this.MigratedStores = migratedStores;
            this.MigrationDate = migrationDate;
        }

        /// <summary>
        /// The unique identifier of the account holder in the balance platform.
        /// </summary>
        /// <value>The unique identifier of the account holder in the balance platform.</value>
        [DataMember(Name = "accountHolderId", EmitDefaultValue = false)]
        public string AccountHolderId { get; set; }

        /// <summary>
        /// The unique identifier of the balance platfrom to which the account holder was migrated.
        /// </summary>
        /// <value>The unique identifier of the balance platfrom to which the account holder was migrated.</value>
        [DataMember(Name = "balancePlatform", EmitDefaultValue = false)]
        public string BalancePlatform { get; set; }

        /// <summary>
        /// Set to **true** if the account holder has been migrated.
        /// </summary>
        /// <value>Set to **true** if the account holder has been migrated.</value>
        [DataMember(Name = "migrated", EmitDefaultValue = false)]
        public bool? Migrated { get; set; }

        /// <summary>
        /// Contains the mapping of virtual account codes (classic integration) to the balance account codes (balance platform) associated with the migrated account holder.
        /// </summary>
        /// <value>Contains the mapping of virtual account codes (classic integration) to the balance account codes (balance platform) associated with the migrated account holder.</value>
        [DataMember(Name = "migratedAccounts", EmitDefaultValue = false)]
        public List<MigratedAccounts> MigratedAccounts { get; set; }

        /// <summary>
        /// Contains the mapping of shareholders associated with the migrated legal entities.
        /// </summary>
        /// <value>Contains the mapping of shareholders associated with the migrated legal entities.</value>
        [DataMember(Name = "migratedShareholders", EmitDefaultValue = false)]
        public List<MigratedShareholders> MigratedShareholders { get; set; }

        /// <summary>
        /// Contains the mapping of business lines and stores associated with the migrated account holder.
        /// </summary>
        /// <value>Contains the mapping of business lines and stores associated with the migrated account holder.</value>
        [DataMember(Name = "migratedStores", EmitDefaultValue = false)]
        public List<MigratedStores> MigratedStores { get; set; }

        /// <summary>
        /// The date when account holder was migrated.
        /// </summary>
        /// <value>The date when account holder was migrated.</value>
        [DataMember(Name = "migrationDate", EmitDefaultValue = false)]
        public DateTime MigrationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MigrationData {\n");
            sb.Append("  AccountHolderId: ").Append(AccountHolderId).Append("\n");
            sb.Append("  BalancePlatform: ").Append(BalancePlatform).Append("\n");
            sb.Append("  Migrated: ").Append(Migrated).Append("\n");
            sb.Append("  MigratedAccounts: ").Append(MigratedAccounts).Append("\n");
            sb.Append("  MigratedShareholders: ").Append(MigratedShareholders).Append("\n");
            sb.Append("  MigratedStores: ").Append(MigratedStores).Append("\n");
            sb.Append("  MigrationDate: ").Append(MigrationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MigrationData);
        }

        /// <summary>
        /// Returns true if MigrationData instances are equal
        /// </summary>
        /// <param name="input">Instance of MigrationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MigrationData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountHolderId == input.AccountHolderId ||
                    (this.AccountHolderId != null &&
                    this.AccountHolderId.Equals(input.AccountHolderId))
                ) && 
                (
                    this.BalancePlatform == input.BalancePlatform ||
                    (this.BalancePlatform != null &&
                    this.BalancePlatform.Equals(input.BalancePlatform))
                ) && 
                (
                    this.Migrated == input.Migrated ||
                    this.Migrated.Equals(input.Migrated)
                ) && 
                (
                    this.MigratedAccounts == input.MigratedAccounts ||
                    this.MigratedAccounts != null &&
                    input.MigratedAccounts != null &&
                    this.MigratedAccounts.SequenceEqual(input.MigratedAccounts)
                ) && 
                (
                    this.MigratedShareholders == input.MigratedShareholders ||
                    this.MigratedShareholders != null &&
                    input.MigratedShareholders != null &&
                    this.MigratedShareholders.SequenceEqual(input.MigratedShareholders)
                ) && 
                (
                    this.MigratedStores == input.MigratedStores ||
                    this.MigratedStores != null &&
                    input.MigratedStores != null &&
                    this.MigratedStores.SequenceEqual(input.MigratedStores)
                ) && 
                (
                    this.MigrationDate == input.MigrationDate ||
                    (this.MigrationDate != null &&
                    this.MigrationDate.Equals(input.MigrationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountHolderId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolderId.GetHashCode();
                }
                if (this.BalancePlatform != null)
                {
                    hashCode = (hashCode * 59) + this.BalancePlatform.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Migrated.GetHashCode();
                if (this.MigratedAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.MigratedAccounts.GetHashCode();
                }
                if (this.MigratedShareholders != null)
                {
                    hashCode = (hashCode * 59) + this.MigratedShareholders.GetHashCode();
                }
                if (this.MigratedStores != null)
                {
                    hashCode = (hashCode * 59) + this.MigratedStores.GetHashCode();
                }
                if (this.MigrationDate != null)
                {
                    hashCode = (hashCode * 59) + this.MigrationDate.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
