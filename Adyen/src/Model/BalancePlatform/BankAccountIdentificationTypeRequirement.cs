/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BalancePlatform
{
    /// <summary>
    /// BankAccountIdentificationTypeRequirement
    /// </summary>
    [DataContract(Name = "BankAccountIdentificationTypeRequirement")]
    public partial class BankAccountIdentificationTypeRequirement : IEquatable<BankAccountIdentificationTypeRequirement>, IValidatableObject
    {
        /// <summary>
        /// Defines BankAccountIdentificationTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BankAccountIdentificationTypesEnum
        {
            /// <summary>
            /// Enum AuLocal for value: auLocal
            /// </summary>
            [EnumMember(Value = "auLocal")]
            AuLocal = 1,

            /// <summary>
            /// Enum BrLocal for value: brLocal
            /// </summary>
            [EnumMember(Value = "brLocal")]
            BrLocal = 2,

            /// <summary>
            /// Enum CaLocal for value: caLocal
            /// </summary>
            [EnumMember(Value = "caLocal")]
            CaLocal = 3,

            /// <summary>
            /// Enum CzLocal for value: czLocal
            /// </summary>
            [EnumMember(Value = "czLocal")]
            CzLocal = 4,

            /// <summary>
            /// Enum DkLocal for value: dkLocal
            /// </summary>
            [EnumMember(Value = "dkLocal")]
            DkLocal = 5,

            /// <summary>
            /// Enum HkLocal for value: hkLocal
            /// </summary>
            [EnumMember(Value = "hkLocal")]
            HkLocal = 6,

            /// <summary>
            /// Enum HuLocal for value: huLocal
            /// </summary>
            [EnumMember(Value = "huLocal")]
            HuLocal = 7,

            /// <summary>
            /// Enum Iban for value: iban
            /// </summary>
            [EnumMember(Value = "iban")]
            Iban = 8,

            /// <summary>
            /// Enum Legacy for value: legacy
            /// </summary>
            [EnumMember(Value = "legacy")]
            Legacy = 9,

            /// <summary>
            /// Enum NoLocal for value: noLocal
            /// </summary>
            [EnumMember(Value = "noLocal")]
            NoLocal = 10,

            /// <summary>
            /// Enum NumberAndBic for value: numberAndBic
            /// </summary>
            [EnumMember(Value = "numberAndBic")]
            NumberAndBic = 11,

            /// <summary>
            /// Enum NzLocal for value: nzLocal
            /// </summary>
            [EnumMember(Value = "nzLocal")]
            NzLocal = 12,

            /// <summary>
            /// Enum PlLocal for value: plLocal
            /// </summary>
            [EnumMember(Value = "plLocal")]
            PlLocal = 13,

            /// <summary>
            /// Enum SeLocal for value: seLocal
            /// </summary>
            [EnumMember(Value = "seLocal")]
            SeLocal = 14,

            /// <summary>
            /// Enum SgLocal for value: sgLocal
            /// </summary>
            [EnumMember(Value = "sgLocal")]
            SgLocal = 15,

            /// <summary>
            /// Enum UkLocal for value: ukLocal
            /// </summary>
            [EnumMember(Value = "ukLocal")]
            UkLocal = 16,

            /// <summary>
            /// Enum UsLocal for value: usLocal
            /// </summary>
            [EnumMember(Value = "usLocal")]
            UsLocal = 17

        }



        /// <summary>
        /// List of bank account identification types: eg.; [iban , numberAndBic]
        /// </summary>
        /// <value>List of bank account identification types: eg.; [iban , numberAndBic]</value>
        [DataMember(Name = "bankAccountIdentificationTypes", EmitDefaultValue = false)]
        public List<BankAccountIdentificationTypesEnum> BankAccountIdentificationTypes { get; set; }
        /// <summary>
        /// **bankAccountIdentificationTypeRequirement**
        /// </summary>
        /// <value>**bankAccountIdentificationTypeRequirement**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum BankAccountIdentificationTypeRequirement for value: bankAccountIdentificationTypeRequirement
            /// </summary>
            [EnumMember(Value = "bankAccountIdentificationTypeRequirement")]
            BankAccountIdentificationTypeRequirement = 1

        }


        /// <summary>
        /// **bankAccountIdentificationTypeRequirement**
        /// </summary>
        /// <value>**bankAccountIdentificationTypeRequirement**</value>
        [DataMember(Name = "type", IsRequired = false, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountIdentificationTypeRequirement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankAccountIdentificationTypeRequirement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountIdentificationTypeRequirement" /> class.
        /// </summary>
        /// <param name="bankAccountIdentificationTypes">List of bank account identification types: eg.; [iban , numberAndBic].</param>
        /// <param name="description">Specifies the bank account details for a particular route per required field in this object depending on the country of the bank account and the currency of the transfer..</param>
        /// <param name="type">**bankAccountIdentificationTypeRequirement** (required) (default to TypeEnum.BankAccountIdentificationTypeRequirement).</param>
        public BankAccountIdentificationTypeRequirement(List<BankAccountIdentificationTypesEnum> bankAccountIdentificationTypes = default(List<BankAccountIdentificationTypesEnum>), string description = default(string), TypeEnum type = TypeEnum.BankAccountIdentificationTypeRequirement)
        {
            this.Type = type;
            this.BankAccountIdentificationTypes = bankAccountIdentificationTypes;
            this.Description = description;
        }

        /// <summary>
        /// Specifies the bank account details for a particular route per required field in this object depending on the country of the bank account and the currency of the transfer.
        /// </summary>
        /// <value>Specifies the bank account details for a particular route per required field in this object depending on the country of the bank account and the currency of the transfer.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankAccountIdentificationTypeRequirement {\n");
            sb.Append("  BankAccountIdentificationTypes: ").Append(BankAccountIdentificationTypes).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankAccountIdentificationTypeRequirement);
        }

        /// <summary>
        /// Returns true if BankAccountIdentificationTypeRequirement instances are equal
        /// </summary>
        /// <param name="input">Instance of BankAccountIdentificationTypeRequirement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankAccountIdentificationTypeRequirement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BankAccountIdentificationTypes == input.BankAccountIdentificationTypes ||
                    this.BankAccountIdentificationTypes.SequenceEqual(input.BankAccountIdentificationTypes)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BankAccountIdentificationTypes.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
