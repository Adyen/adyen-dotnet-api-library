/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BalancePlatform
{
    /// <summary>
    /// RegisterSCAResponse
    /// </summary>
    [DataContract(Name = "RegisterSCAResponse")]
    public partial class RegisterSCAResponse : IEquatable<RegisterSCAResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterSCAResponse" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the SCA device you are registering..</param>
        /// <param name="paymentInstrumentId">The unique identifier of the payment instrument for which you are registering the SCA device..</param>
        /// <param name="sdkInput">A string that you must pass to the authentication SDK to continue with the registration process..</param>
        /// <param name="success">Specifies if the registration was initiated successfully..</param>
        public RegisterSCAResponse(string id = default(string), string paymentInstrumentId = default(string), string sdkInput = default(string), bool? success = default(bool?))
        {
            this.Id = id;
            this.PaymentInstrumentId = paymentInstrumentId;
            this.SdkInput = sdkInput;
            this.Success = success;
        }

        /// <summary>
        /// The unique identifier of the SCA device you are registering.
        /// </summary>
        /// <value>The unique identifier of the SCA device you are registering.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the payment instrument for which you are registering the SCA device.
        /// </summary>
        /// <value>The unique identifier of the payment instrument for which you are registering the SCA device.</value>
        [DataMember(Name = "paymentInstrumentId", EmitDefaultValue = false)]
        public string PaymentInstrumentId { get; set; }

        /// <summary>
        /// A string that you must pass to the authentication SDK to continue with the registration process.
        /// </summary>
        /// <value>A string that you must pass to the authentication SDK to continue with the registration process.</value>
        [DataMember(Name = "sdkInput", EmitDefaultValue = false)]
        public string SdkInput { get; set; }

        /// <summary>
        /// Specifies if the registration was initiated successfully.
        /// </summary>
        /// <value>Specifies if the registration was initiated successfully.</value>
        [DataMember(Name = "success", EmitDefaultValue = false)]
        public bool? Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterSCAResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PaymentInstrumentId: ").Append(PaymentInstrumentId).Append("\n");
            sb.Append("  SdkInput: ").Append(SdkInput).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterSCAResponse);
        }

        /// <summary>
        /// Returns true if RegisterSCAResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterSCAResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterSCAResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PaymentInstrumentId == input.PaymentInstrumentId ||
                    (this.PaymentInstrumentId != null &&
                    this.PaymentInstrumentId.Equals(input.PaymentInstrumentId))
                ) && 
                (
                    this.SdkInput == input.SdkInput ||
                    (this.SdkInput != null &&
                    this.SdkInput.Equals(input.SdkInput))
                ) && 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PaymentInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInstrumentId.GetHashCode();
                }
                if (this.SdkInput != null)
                {
                    hashCode = (hashCode * 59) + this.SdkInput.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Success.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SdkInput (string) maxLength
            if (this.SdkInput != null && this.SdkInput.Length > 20000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SdkInput, length must be less than 20000.", new [] { "SdkInput" });
            }

            yield break;
        }
    }

}
