/*
* Transfers API
*
*
* The version of the OpenAPI document: 4
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Transfers
{
    /// <summary>
    /// TransferRequestReview
    /// </summary>
    [DataContract(Name = "TransferRequestReview")]
    public partial class TransferRequestReview : IEquatable<TransferRequestReview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferRequestReview" /> class.
        /// </summary>
        /// <param name="numberOfApprovalsRequired">Specifies the number of [approvals](https://docs.adyen.com/api-explorer/transfers/latest/post/transfers/approve) required to process the transfer..</param>
        /// <param name="scaOnApproval">Specifies whether you will initiate Strong Customer Authentication (SCA) in thePOST [/transfers/approve](https://docs.adyen.com/api-explorer/transfers/latest/post/transfers/approve) request.  Only applies to transfers made with an Adyen [business account](https://docs.adyen.com/platforms/business-accounts)..</param>
        public TransferRequestReview(int? numberOfApprovalsRequired = default(int?), bool? scaOnApproval = default(bool?))
        {
            this.NumberOfApprovalsRequired = numberOfApprovalsRequired;
            this.ScaOnApproval = scaOnApproval;
        }

        /// <summary>
        /// Specifies the number of [approvals](https://docs.adyen.com/api-explorer/transfers/latest/post/transfers/approve) required to process the transfer.
        /// </summary>
        /// <value>Specifies the number of [approvals](https://docs.adyen.com/api-explorer/transfers/latest/post/transfers/approve) required to process the transfer.</value>
        [DataMember(Name = "numberOfApprovalsRequired", EmitDefaultValue = false)]
        public int? NumberOfApprovalsRequired { get; set; }

        /// <summary>
        /// Specifies whether you will initiate Strong Customer Authentication (SCA) in thePOST [/transfers/approve](https://docs.adyen.com/api-explorer/transfers/latest/post/transfers/approve) request.  Only applies to transfers made with an Adyen [business account](https://docs.adyen.com/platforms/business-accounts).
        /// </summary>
        /// <value>Specifies whether you will initiate Strong Customer Authentication (SCA) in thePOST [/transfers/approve](https://docs.adyen.com/api-explorer/transfers/latest/post/transfers/approve) request.  Only applies to transfers made with an Adyen [business account](https://docs.adyen.com/platforms/business-accounts).</value>
        [DataMember(Name = "scaOnApproval", EmitDefaultValue = false)]
        public bool? ScaOnApproval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferRequestReview {\n");
            sb.Append("  NumberOfApprovalsRequired: ").Append(NumberOfApprovalsRequired).Append("\n");
            sb.Append("  ScaOnApproval: ").Append(ScaOnApproval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferRequestReview);
        }

        /// <summary>
        /// Returns true if TransferRequestReview instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferRequestReview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferRequestReview input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NumberOfApprovalsRequired == input.NumberOfApprovalsRequired ||
                    this.NumberOfApprovalsRequired.Equals(input.NumberOfApprovalsRequired)
                ) && 
                (
                    this.ScaOnApproval == input.ScaOnApproval ||
                    this.ScaOnApproval.Equals(input.ScaOnApproval)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.NumberOfApprovalsRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.ScaOnApproval.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
