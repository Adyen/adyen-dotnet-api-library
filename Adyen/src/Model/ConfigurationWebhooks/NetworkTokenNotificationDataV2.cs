/*
* Configuration webhooks
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.ConfigurationWebhooks
{
    /// <summary>
    /// NetworkTokenNotificationDataV2
    /// </summary>
    [DataContract(Name = "NetworkTokenNotificationDataV2")]
    public partial class NetworkTokenNotificationDataV2 : IEquatable<NetworkTokenNotificationDataV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkTokenNotificationDataV2" /> class.
        /// </summary>
        /// <param name="authentication">authentication.</param>
        /// <param name="authenticationApplied">Specifies whether the authentication process was triggered during token provisioning..</param>
        /// <param name="balancePlatform">The unique identifier of the balance platform..</param>
        /// <param name="decision">The decision about the network token provisioning.  Possible values: **approved**, **declined**, **requiresAuthentication**..</param>
        /// <param name="id">The unique identifier of the network token..</param>
        /// <param name="paymentInstrumentId">The unique identifier of the payment instrument to which the network token is associated..</param>
        /// <param name="status">The status of the network token..</param>
        /// <param name="tokenLastFour">The last four digits of the network token. Use this value to help your user to identify their network token..</param>
        /// <param name="tokenRequestor">tokenRequestor.</param>
        /// <param name="type">The type of network token..</param>
        /// <param name="validationFacts">The rules used to validate the request for provisioning the network token..</param>
        /// <param name="wallet">wallet.</param>
        public NetworkTokenNotificationDataV2(TokenAuthentication authentication = default(TokenAuthentication), bool? authenticationApplied = default(bool?), string balancePlatform = default(string), string decision = default(string), string id = default(string), string paymentInstrumentId = default(string), string status = default(string), string tokenLastFour = default(string), NetworkTokenRequestor tokenRequestor = default(NetworkTokenRequestor), string type = default(string), List<ValidationFacts> validationFacts = default(List<ValidationFacts>), Wallet wallet = default(Wallet))
        {
            this.Authentication = authentication;
            this.AuthenticationApplied = authenticationApplied;
            this.BalancePlatform = balancePlatform;
            this.Decision = decision;
            this.Id = id;
            this.PaymentInstrumentId = paymentInstrumentId;
            this.Status = status;
            this.TokenLastFour = tokenLastFour;
            this.TokenRequestor = tokenRequestor;
            this.Type = type;
            this.ValidationFacts = validationFacts;
            this.Wallet = wallet;
        }

        /// <summary>
        /// Gets or Sets Authentication
        /// </summary>
        [DataMember(Name = "authentication", EmitDefaultValue = false)]
        public TokenAuthentication Authentication { get; set; }

        /// <summary>
        /// Specifies whether the authentication process was triggered during token provisioning.
        /// </summary>
        /// <value>Specifies whether the authentication process was triggered during token provisioning.</value>
        [DataMember(Name = "authenticationApplied", EmitDefaultValue = false)]
        public bool? AuthenticationApplied { get; set; }

        /// <summary>
        /// The unique identifier of the balance platform.
        /// </summary>
        /// <value>The unique identifier of the balance platform.</value>
        [DataMember(Name = "balancePlatform", EmitDefaultValue = false)]
        public string BalancePlatform { get; set; }

        /// <summary>
        /// The decision about the network token provisioning.  Possible values: **approved**, **declined**, **requiresAuthentication**.
        /// </summary>
        /// <value>The decision about the network token provisioning.  Possible values: **approved**, **declined**, **requiresAuthentication**.</value>
        [DataMember(Name = "decision", EmitDefaultValue = false)]
        public string Decision { get; set; }

        /// <summary>
        /// The unique identifier of the network token.
        /// </summary>
        /// <value>The unique identifier of the network token.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the payment instrument to which the network token is associated.
        /// </summary>
        /// <value>The unique identifier of the payment instrument to which the network token is associated.</value>
        [DataMember(Name = "paymentInstrumentId", EmitDefaultValue = false)]
        public string PaymentInstrumentId { get; set; }

        /// <summary>
        /// The status of the network token.
        /// </summary>
        /// <value>The status of the network token.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The last four digits of the network token. Use this value to help your user to identify their network token.
        /// </summary>
        /// <value>The last four digits of the network token. Use this value to help your user to identify their network token.</value>
        [DataMember(Name = "tokenLastFour", EmitDefaultValue = false)]
        public string TokenLastFour { get; set; }

        /// <summary>
        /// Gets or Sets TokenRequestor
        /// </summary>
        [DataMember(Name = "tokenRequestor", EmitDefaultValue = false)]
        public NetworkTokenRequestor TokenRequestor { get; set; }

        /// <summary>
        /// The type of network token.
        /// </summary>
        /// <value>The type of network token.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The rules used to validate the request for provisioning the network token.
        /// </summary>
        /// <value>The rules used to validate the request for provisioning the network token.</value>
        [DataMember(Name = "validationFacts", EmitDefaultValue = false)]
        public List<ValidationFacts> ValidationFacts { get; set; }

        /// <summary>
        /// Gets or Sets Wallet
        /// </summary>
        [DataMember(Name = "wallet", EmitDefaultValue = false)]
        public Wallet Wallet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NetworkTokenNotificationDataV2 {\n");
            sb.Append("  Authentication: ").Append(Authentication).Append("\n");
            sb.Append("  AuthenticationApplied: ").Append(AuthenticationApplied).Append("\n");
            sb.Append("  BalancePlatform: ").Append(BalancePlatform).Append("\n");
            sb.Append("  Decision: ").Append(Decision).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PaymentInstrumentId: ").Append(PaymentInstrumentId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TokenLastFour: ").Append(TokenLastFour).Append("\n");
            sb.Append("  TokenRequestor: ").Append(TokenRequestor).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ValidationFacts: ").Append(ValidationFacts).Append("\n");
            sb.Append("  Wallet: ").Append(Wallet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NetworkTokenNotificationDataV2);
        }

        /// <summary>
        /// Returns true if NetworkTokenNotificationDataV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of NetworkTokenNotificationDataV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkTokenNotificationDataV2 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Authentication == input.Authentication ||
                    (this.Authentication != null &&
                    this.Authentication.Equals(input.Authentication))
                ) && 
                (
                    this.AuthenticationApplied == input.AuthenticationApplied ||
                    this.AuthenticationApplied.Equals(input.AuthenticationApplied)
                ) && 
                (
                    this.BalancePlatform == input.BalancePlatform ||
                    (this.BalancePlatform != null &&
                    this.BalancePlatform.Equals(input.BalancePlatform))
                ) && 
                (
                    this.Decision == input.Decision ||
                    (this.Decision != null &&
                    this.Decision.Equals(input.Decision))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PaymentInstrumentId == input.PaymentInstrumentId ||
                    (this.PaymentInstrumentId != null &&
                    this.PaymentInstrumentId.Equals(input.PaymentInstrumentId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TokenLastFour == input.TokenLastFour ||
                    (this.TokenLastFour != null &&
                    this.TokenLastFour.Equals(input.TokenLastFour))
                ) && 
                (
                    this.TokenRequestor == input.TokenRequestor ||
                    (this.TokenRequestor != null &&
                    this.TokenRequestor.Equals(input.TokenRequestor))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ValidationFacts == input.ValidationFacts ||
                    this.ValidationFacts != null &&
                    input.ValidationFacts != null &&
                    this.ValidationFacts.SequenceEqual(input.ValidationFacts)
                ) && 
                (
                    this.Wallet == input.Wallet ||
                    (this.Wallet != null &&
                    this.Wallet.Equals(input.Wallet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Authentication != null)
                {
                    hashCode = (hashCode * 59) + this.Authentication.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AuthenticationApplied.GetHashCode();
                if (this.BalancePlatform != null)
                {
                    hashCode = (hashCode * 59) + this.BalancePlatform.GetHashCode();
                }
                if (this.Decision != null)
                {
                    hashCode = (hashCode * 59) + this.Decision.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PaymentInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInstrumentId.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.TokenLastFour != null)
                {
                    hashCode = (hashCode * 59) + this.TokenLastFour.GetHashCode();
                }
                if (this.TokenRequestor != null)
                {
                    hashCode = (hashCode * 59) + this.TokenRequestor.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.ValidationFacts != null)
                {
                    hashCode = (hashCode * 59) + this.ValidationFacts.GetHashCode();
                }
                if (this.Wallet != null)
                {
                    hashCode = (hashCode * 59) + this.Wallet.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
