/*
* Configuration webhooks
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.ConfigurationWebhooks
{
    /// <summary>
    /// ValidationFacts
    /// </summary>
    [DataContract(Name = "ValidationFacts")]
    public partial class ValidationFacts : IEquatable<ValidationFacts>, IValidatableObject
    {
        /// <summary>
        /// The evaluation result of the validation facts.  Possible values: **valid**, **invalid**, **notValidated**, **notApplicable**.
        /// </summary>
        /// <value>The evaluation result of the validation facts.  Possible values: **valid**, **invalid**, **notValidated**, **notApplicable**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultEnum
        {
            /// <summary>
            /// Enum Invalid for value: invalid
            /// </summary>
            [EnumMember(Value = "invalid")]
            Invalid = 1,

            /// <summary>
            /// Enum NotApplicable for value: notApplicable
            /// </summary>
            [EnumMember(Value = "notApplicable")]
            NotApplicable = 2,

            /// <summary>
            /// Enum NotValidated for value: notValidated
            /// </summary>
            [EnumMember(Value = "notValidated")]
            NotValidated = 3,

            /// <summary>
            /// Enum Valid for value: valid
            /// </summary>
            [EnumMember(Value = "valid")]
            Valid = 4

        }


        /// <summary>
        /// The evaluation result of the validation facts.  Possible values: **valid**, **invalid**, **notValidated**, **notApplicable**.
        /// </summary>
        /// <value>The evaluation result of the validation facts.  Possible values: **valid**, **invalid**, **notValidated**, **notApplicable**.</value>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public ResultEnum? Result { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationFacts" /> class.
        /// </summary>
        /// <param name="reasons">The reason for the &#x60;result&#x60; of the validations.  This field is only sent for &#x60;validationFacts.type&#x60; **walletValidation**, when &#x60;validationFacts.result&#x60; is **invalid**..</param>
        /// <param name="result">The evaluation result of the validation facts.  Possible values: **valid**, **invalid**, **notValidated**, **notApplicable**..</param>
        /// <param name="type">The type of the validation fact..</param>
        public ValidationFacts(List<string> reasons = default(List<string>), ResultEnum? result = default(ResultEnum?), string type = default(string))
        {
            this.Reasons = reasons;
            this.Result = result;
            this.Type = type;
        }

        /// <summary>
        /// The reason for the &#x60;result&#x60; of the validations.  This field is only sent for &#x60;validationFacts.type&#x60; **walletValidation**, when &#x60;validationFacts.result&#x60; is **invalid**.
        /// </summary>
        /// <value>The reason for the &#x60;result&#x60; of the validations.  This field is only sent for &#x60;validationFacts.type&#x60; **walletValidation**, when &#x60;validationFacts.result&#x60; is **invalid**.</value>
        [DataMember(Name = "reasons", EmitDefaultValue = false)]
        public List<string> Reasons { get; set; }

        /// <summary>
        /// The type of the validation fact.
        /// </summary>
        /// <value>The type of the validation fact.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidationFacts {\n");
            sb.Append("  Reasons: ").Append(Reasons).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidationFacts);
        }

        /// <summary>
        /// Returns true if ValidationFacts instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidationFacts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidationFacts input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Reasons == input.Reasons ||
                    this.Reasons != null &&
                    input.Reasons != null &&
                    this.Reasons.SequenceEqual(input.Reasons)
                ) && 
                (
                    this.Result == input.Result ||
                    this.Result.Equals(input.Result)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reasons != null)
                {
                    hashCode = (hashCode * 59) + this.Reasons.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Result.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
