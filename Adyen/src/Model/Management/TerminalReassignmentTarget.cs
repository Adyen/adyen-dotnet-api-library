/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// TerminalReassignmentTarget
    /// </summary>
    [DataContract(Name = "TerminalReassignmentTarget")]
    public partial class TerminalReassignmentTarget : IEquatable<TerminalReassignmentTarget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalReassignmentTarget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TerminalReassignmentTarget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalReassignmentTarget" /> class.
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account to which the terminal is reassigned..</param>
        /// <param name="inventory">Indicates if the terminal is reassigned to the inventory of the merchant account. - If **true**, the terminal is in the inventory of the merchant account and cannot process transactions. - If **false**, the terminal is reassigned directly to the merchant account and can process transactions. (required).</param>
        /// <param name="merchantId">The unique identifier of the merchant account to which the terminal is reassigned..</param>
        /// <param name="storeId">The unique identifier of the store to which the terminal is reassigned..</param>
        public TerminalReassignmentTarget(string companyId = default(string), bool? inventory = default(bool?), string merchantId = default(string), string storeId = default(string))
        {
            this.Inventory = inventory;
            this.CompanyId = companyId;
            this.MerchantId = merchantId;
            this.StoreId = storeId;
        }

        /// <summary>
        /// The unique identifier of the company account to which the terminal is reassigned.
        /// </summary>
        /// <value>The unique identifier of the company account to which the terminal is reassigned.</value>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public string CompanyId { get; set; }

        /// <summary>
        /// Indicates if the terminal is reassigned to the inventory of the merchant account. - If **true**, the terminal is in the inventory of the merchant account and cannot process transactions. - If **false**, the terminal is reassigned directly to the merchant account and can process transactions.
        /// </summary>
        /// <value>Indicates if the terminal is reassigned to the inventory of the merchant account. - If **true**, the terminal is in the inventory of the merchant account and cannot process transactions. - If **false**, the terminal is reassigned directly to the merchant account and can process transactions.</value>
        [DataMember(Name = "inventory", IsRequired = false, EmitDefaultValue = false)]
        public bool? Inventory { get; set; }

        /// <summary>
        /// The unique identifier of the merchant account to which the terminal is reassigned.
        /// </summary>
        /// <value>The unique identifier of the merchant account to which the terminal is reassigned.</value>
        [DataMember(Name = "merchantId", EmitDefaultValue = false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// The unique identifier of the store to which the terminal is reassigned.
        /// </summary>
        /// <value>The unique identifier of the store to which the terminal is reassigned.</value>
        [DataMember(Name = "storeId", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TerminalReassignmentTarget {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TerminalReassignmentTarget);
        }

        /// <summary>
        /// Returns true if TerminalReassignmentTarget instances are equal
        /// </summary>
        /// <param name="input">Instance of TerminalReassignmentTarget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TerminalReassignmentTarget input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.Inventory == input.Inventory ||
                    this.Inventory.Equals(input.Inventory)
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyId != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Inventory.GetHashCode();
                if (this.MerchantId != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantId.GetHashCode();
                }
                if (this.StoreId != null)
                {
                    hashCode = (hashCode * 59) + this.StoreId.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
