/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// SupportedCardTypes
    /// </summary>
    [DataContract(Name = "SupportedCardTypes")]
    public partial class SupportedCardTypes : IEquatable<SupportedCardTypes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedCardTypes" /> class.
        /// </summary>
        /// <param name="credit">Set to **true** to accept credit cards..</param>
        /// <param name="debit">Set to **true** to accept debit cards..</param>
        /// <param name="deferredDebit">Set to **true** to accept cards that allow deferred debit..</param>
        /// <param name="prepaid">Set to **true** to accept prepaid cards..</param>
        /// <param name="unknown">Set to **true** to accept card types for which the terminal can&#39;t determine the funding source while offline..</param>
        public SupportedCardTypes(bool? credit = default(bool?), bool? debit = default(bool?), bool? deferredDebit = default(bool?), bool? prepaid = default(bool?), bool? unknown = default(bool?))
        {
            this.Credit = credit;
            this.Debit = debit;
            this.DeferredDebit = deferredDebit;
            this.Prepaid = prepaid;
            this.Unknown = unknown;
        }

        /// <summary>
        /// Set to **true** to accept credit cards.
        /// </summary>
        /// <value>Set to **true** to accept credit cards.</value>
        [DataMember(Name = "credit", EmitDefaultValue = false)]
        public bool? Credit { get; set; }

        /// <summary>
        /// Set to **true** to accept debit cards.
        /// </summary>
        /// <value>Set to **true** to accept debit cards.</value>
        [DataMember(Name = "debit", EmitDefaultValue = false)]
        public bool? Debit { get; set; }

        /// <summary>
        /// Set to **true** to accept cards that allow deferred debit.
        /// </summary>
        /// <value>Set to **true** to accept cards that allow deferred debit.</value>
        [DataMember(Name = "deferredDebit", EmitDefaultValue = false)]
        public bool? DeferredDebit { get; set; }

        /// <summary>
        /// Set to **true** to accept prepaid cards.
        /// </summary>
        /// <value>Set to **true** to accept prepaid cards.</value>
        [DataMember(Name = "prepaid", EmitDefaultValue = false)]
        public bool? Prepaid { get; set; }

        /// <summary>
        /// Set to **true** to accept card types for which the terminal can&#39;t determine the funding source while offline.
        /// </summary>
        /// <value>Set to **true** to accept card types for which the terminal can&#39;t determine the funding source while offline.</value>
        [DataMember(Name = "unknown", EmitDefaultValue = false)]
        public bool? Unknown { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupportedCardTypes {\n");
            sb.Append("  Credit: ").Append(Credit).Append("\n");
            sb.Append("  Debit: ").Append(Debit).Append("\n");
            sb.Append("  DeferredDebit: ").Append(DeferredDebit).Append("\n");
            sb.Append("  Prepaid: ").Append(Prepaid).Append("\n");
            sb.Append("  Unknown: ").Append(Unknown).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupportedCardTypes);
        }

        /// <summary>
        /// Returns true if SupportedCardTypes instances are equal
        /// </summary>
        /// <param name="input">Instance of SupportedCardTypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupportedCardTypes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Credit == input.Credit ||
                    this.Credit.Equals(input.Credit)
                ) && 
                (
                    this.Debit == input.Debit ||
                    this.Debit.Equals(input.Debit)
                ) && 
                (
                    this.DeferredDebit == input.DeferredDebit ||
                    this.DeferredDebit.Equals(input.DeferredDebit)
                ) && 
                (
                    this.Prepaid == input.Prepaid ||
                    this.Prepaid.Equals(input.Prepaid)
                ) && 
                (
                    this.Unknown == input.Unknown ||
                    this.Unknown.Equals(input.Unknown)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Credit.GetHashCode();
                hashCode = (hashCode * 59) + this.Debit.GetHashCode();
                hashCode = (hashCode * 59) + this.DeferredDebit.GetHashCode();
                hashCode = (hashCode * 59) + this.Prepaid.GetHashCode();
                hashCode = (hashCode * 59) + this.Unknown.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
