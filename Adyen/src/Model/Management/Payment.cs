/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// Payment
    /// </summary>
    [DataContract(Name = "Payment")]
    public partial class Payment : IEquatable<Payment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="contactlessCurrency">The default currency for contactless payments on the payment terminal, as the three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code..</param>
        /// <param name="hideMinorUnitsInCurrencies">Hides the minor units for the listed [ISO currency codes](https://en.wikipedia.org/wiki/ISO_4217)..</param>
        public Payment(string contactlessCurrency = default(string), List<string> hideMinorUnitsInCurrencies = default(List<string>))
        {
            this.ContactlessCurrency = contactlessCurrency;
            this.HideMinorUnitsInCurrencies = hideMinorUnitsInCurrencies;
        }

        /// <summary>
        /// The default currency for contactless payments on the payment terminal, as the three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
        /// </summary>
        /// <value>The default currency for contactless payments on the payment terminal, as the three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.</value>
        [DataMember(Name = "contactlessCurrency", EmitDefaultValue = false)]
        public string ContactlessCurrency { get; set; }

        /// <summary>
        /// Hides the minor units for the listed [ISO currency codes](https://en.wikipedia.org/wiki/ISO_4217).
        /// </summary>
        /// <value>Hides the minor units for the listed [ISO currency codes](https://en.wikipedia.org/wiki/ISO_4217).</value>
        [DataMember(Name = "hideMinorUnitsInCurrencies", EmitDefaultValue = false)]
        public List<string> HideMinorUnitsInCurrencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  ContactlessCurrency: ").Append(ContactlessCurrency).Append("\n");
            sb.Append("  HideMinorUnitsInCurrencies: ").Append(HideMinorUnitsInCurrencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Payment);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="input">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContactlessCurrency == input.ContactlessCurrency ||
                    (this.ContactlessCurrency != null &&
                    this.ContactlessCurrency.Equals(input.ContactlessCurrency))
                ) && 
                (
                    this.HideMinorUnitsInCurrencies == input.HideMinorUnitsInCurrencies ||
                    this.HideMinorUnitsInCurrencies != null &&
                    input.HideMinorUnitsInCurrencies != null &&
                    this.HideMinorUnitsInCurrencies.SequenceEqual(input.HideMinorUnitsInCurrencies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactlessCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.ContactlessCurrency.GetHashCode();
                }
                if (this.HideMinorUnitsInCurrencies != null)
                {
                    hashCode = (hashCode * 59) + this.HideMinorUnitsInCurrencies.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ContactlessCurrency (string) maxLength
            if (this.ContactlessCurrency != null && this.ContactlessCurrency.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactlessCurrency, length must be less than 3.", new [] { "ContactlessCurrency" });
            }

            // ContactlessCurrency (string) minLength
            if (this.ContactlessCurrency != null && this.ContactlessCurrency.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactlessCurrency, length must be greater than 3.", new [] { "ContactlessCurrency" });
            }

            yield break;
        }
    }

}
