/*
* Balance webhook
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BalanceWebhooks
{
    /// <summary>
    /// Balances
    /// </summary>
    [DataContract(Name = "Balances")]
    public partial class Balances : IEquatable<Balances>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Balances" /> class.
        /// </summary>
        /// <param name="available">The balance that is available for use..</param>
        /// <param name="balance">The sum of transactions that have already been settled..</param>
        /// <param name="pending">The sum of transactions that will be settled in the future..</param>
        /// <param name="reserved">The balance currently held in reserve..</param>
        public Balances(long? available = default(long?), long? balance = default(long?), long? pending = default(long?), long? reserved = default(long?))
        {
            this.Available = available;
            this.Balance = balance;
            this.Pending = pending;
            this.Reserved = reserved;
        }

        /// <summary>
        /// The balance that is available for use.
        /// </summary>
        /// <value>The balance that is available for use.</value>
        [DataMember(Name = "available", EmitDefaultValue = false)]
        public long? Available { get; set; }

        /// <summary>
        /// The sum of transactions that have already been settled.
        /// </summary>
        /// <value>The sum of transactions that have already been settled.</value>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public long? Balance { get; set; }

        /// <summary>
        /// The sum of transactions that will be settled in the future.
        /// </summary>
        /// <value>The sum of transactions that will be settled in the future.</value>
        [DataMember(Name = "pending", EmitDefaultValue = false)]
        public long? Pending { get; set; }

        /// <summary>
        /// The balance currently held in reserve.
        /// </summary>
        /// <value>The balance currently held in reserve.</value>
        [DataMember(Name = "reserved", EmitDefaultValue = false)]
        public long? Reserved { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Balances {\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  Reserved: ").Append(Reserved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Balances);
        }

        /// <summary>
        /// Returns true if Balances instances are equal
        /// </summary>
        /// <param name="input">Instance of Balances to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Balances input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Available == input.Available ||
                    this.Available.Equals(input.Available)
                ) && 
                (
                    this.Balance == input.Balance ||
                    this.Balance.Equals(input.Balance)
                ) && 
                (
                    this.Pending == input.Pending ||
                    this.Pending.Equals(input.Pending)
                ) && 
                (
                    this.Reserved == input.Reserved ||
                    this.Reserved.Equals(input.Reserved)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Available.GetHashCode();
                hashCode = (hashCode * 59) + this.Balance.GetHashCode();
                hashCode = (hashCode * 59) + this.Pending.GetHashCode();
                hashCode = (hashCode * 59) + this.Reserved.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
