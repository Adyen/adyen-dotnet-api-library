/*
* Notification Configuration API
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsNotificationConfiguration
{
    /// <summary>
    /// TestNotificationConfigurationResponse
    /// </summary>
    [DataContract(Name = "TestNotificationConfigurationResponse")]
    public partial class TestNotificationConfigurationResponse : IEquatable<TestNotificationConfigurationResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines EventTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypesEnum
        {
            /// <summary>
            /// Enum ACCOUNTCLOSED for value: ACCOUNT_CLOSED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_CLOSED")]
            ACCOUNTCLOSED = 1,

            /// <summary>
            /// Enum ACCOUNTCREATED for value: ACCOUNT_CREATED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_CREATED")]
            ACCOUNTCREATED = 2,

            /// <summary>
            /// Enum ACCOUNTFUNDSBELOWTHRESHOLD for value: ACCOUNT_FUNDS_BELOW_THRESHOLD
            /// </summary>
            [EnumMember(Value = "ACCOUNT_FUNDS_BELOW_THRESHOLD")]
            ACCOUNTFUNDSBELOWTHRESHOLD = 3,

            /// <summary>
            /// Enum ACCOUNTHOLDERCREATED for value: ACCOUNT_HOLDER_CREATED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_CREATED")]
            ACCOUNTHOLDERCREATED = 4,

            /// <summary>
            /// Enum ACCOUNTHOLDERLIMITREACHED for value: ACCOUNT_HOLDER_LIMIT_REACHED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_LIMIT_REACHED")]
            ACCOUNTHOLDERLIMITREACHED = 5,

            /// <summary>
            /// Enum ACCOUNTHOLDERMIGRATED for value: ACCOUNT_HOLDER_MIGRATED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_MIGRATED")]
            ACCOUNTHOLDERMIGRATED = 6,

            /// <summary>
            /// Enum ACCOUNTHOLDERPAYOUT for value: ACCOUNT_HOLDER_PAYOUT
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_PAYOUT")]
            ACCOUNTHOLDERPAYOUT = 7,

            /// <summary>
            /// Enum ACCOUNTHOLDERSTATUSCHANGE for value: ACCOUNT_HOLDER_STATUS_CHANGE
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_STATUS_CHANGE")]
            ACCOUNTHOLDERSTATUSCHANGE = 8,

            /// <summary>
            /// Enum ACCOUNTHOLDERSTORESTATUSCHANGE for value: ACCOUNT_HOLDER_STORE_STATUS_CHANGE
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_STORE_STATUS_CHANGE")]
            ACCOUNTHOLDERSTORESTATUSCHANGE = 9,

            /// <summary>
            /// Enum ACCOUNTHOLDERUPCOMINGDEADLINE for value: ACCOUNT_HOLDER_UPCOMING_DEADLINE
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_UPCOMING_DEADLINE")]
            ACCOUNTHOLDERUPCOMINGDEADLINE = 10,

            /// <summary>
            /// Enum ACCOUNTHOLDERUPDATED for value: ACCOUNT_HOLDER_UPDATED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_UPDATED")]
            ACCOUNTHOLDERUPDATED = 11,

            /// <summary>
            /// Enum ACCOUNTHOLDERVERIFICATION for value: ACCOUNT_HOLDER_VERIFICATION
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_VERIFICATION")]
            ACCOUNTHOLDERVERIFICATION = 12,

            /// <summary>
            /// Enum ACCOUNTUPDATED for value: ACCOUNT_UPDATED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_UPDATED")]
            ACCOUNTUPDATED = 13,

            /// <summary>
            /// Enum BENEFICIARYSETUP for value: BENEFICIARY_SETUP
            /// </summary>
            [EnumMember(Value = "BENEFICIARY_SETUP")]
            BENEFICIARYSETUP = 14,

            /// <summary>
            /// Enum COMPENSATENEGATIVEBALANCE for value: COMPENSATE_NEGATIVE_BALANCE
            /// </summary>
            [EnumMember(Value = "COMPENSATE_NEGATIVE_BALANCE")]
            COMPENSATENEGATIVEBALANCE = 15,

            /// <summary>
            /// Enum DIRECTDEBITINITIATED for value: DIRECT_DEBIT_INITIATED
            /// </summary>
            [EnumMember(Value = "DIRECT_DEBIT_INITIATED")]
            DIRECTDEBITINITIATED = 16,

            /// <summary>
            /// Enum FUNDSMIGRATED for value: FUNDS_MIGRATED
            /// </summary>
            [EnumMember(Value = "FUNDS_MIGRATED")]
            FUNDSMIGRATED = 17,

            /// <summary>
            /// Enum PAYMENTFAILURE for value: PAYMENT_FAILURE
            /// </summary>
            [EnumMember(Value = "PAYMENT_FAILURE")]
            PAYMENTFAILURE = 18,

            /// <summary>
            /// Enum PENDINGCREDIT for value: PENDING_CREDIT
            /// </summary>
            [EnumMember(Value = "PENDING_CREDIT")]
            PENDINGCREDIT = 19,

            /// <summary>
            /// Enum REFUNDFUNDSTRANSFER for value: REFUND_FUNDS_TRANSFER
            /// </summary>
            [EnumMember(Value = "REFUND_FUNDS_TRANSFER")]
            REFUNDFUNDSTRANSFER = 20,

            /// <summary>
            /// Enum REPORTAVAILABLE for value: REPORT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "REPORT_AVAILABLE")]
            REPORTAVAILABLE = 21,

            /// <summary>
            /// Enum SCHEDULEDREFUNDS for value: SCHEDULED_REFUNDS
            /// </summary>
            [EnumMember(Value = "SCHEDULED_REFUNDS")]
            SCHEDULEDREFUNDS = 22,

            /// <summary>
            /// Enum SCORESIGNALTRIGGERED for value: SCORE_SIGNAL_TRIGGERED
            /// </summary>
            [EnumMember(Value = "SCORE_SIGNAL_TRIGGERED")]
            SCORESIGNALTRIGGERED = 23,

            /// <summary>
            /// Enum TRANSFERFUNDS for value: TRANSFER_FUNDS
            /// </summary>
            [EnumMember(Value = "TRANSFER_FUNDS")]
            TRANSFERFUNDS = 24,

            /// <summary>
            /// Enum TRANSFERNOTPAIDOUTTRANSFERS for value: TRANSFER_NOT_PAIDOUT_TRANSFERS
            /// </summary>
            [EnumMember(Value = "TRANSFER_NOT_PAIDOUT_TRANSFERS")]
            TRANSFERNOTPAIDOUTTRANSFERS = 25

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestNotificationConfigurationResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestNotificationConfigurationResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestNotificationConfigurationResponse" /> class.
        /// </summary>
        /// <param name="errorMessages">Any error messages encountered..</param>
        /// <param name="eventTypes">The event types that were tested. &gt;Permitted values: &#x60;ACCOUNT_HOLDER_CREATED&#x60;, &#x60;ACCOUNT_CREATED&#x60;, &#x60;ACCOUNT_UPDATED&#x60;, &#x60;ACCOUNT_HOLDER_UPDATED&#x60;, &#x60;ACCOUNT_HOLDER_STATUS_CHANGE&#x60;, &#x60;ACCOUNT_HOLDER_STORE_STATUS_CHANGE&#x60; &#x60;ACCOUNT_HOLDER_VERIFICATION&#x60;, &#x60;ACCOUNT_HOLDER_LIMIT_REACHED&#x60;, &#x60;ACCOUNT_HOLDER_PAYOUT&#x60;, &#x60;PAYMENT_FAILURE&#x60;, &#x60;SCHEDULED_REFUNDS&#x60;, &#x60;REPORT_AVAILABLE&#x60;, &#x60;TRANSFER_FUNDS&#x60;, &#x60;BENEFICIARY_SETUP&#x60;, &#x60;COMPENSATE_NEGATIVE_BALANCE&#x60;..</param>
        /// <param name="exchangeMessages">The notification message and related response messages..</param>
        /// <param name="invalidFields">Contains field validation errors that would prevent requests from being processed..</param>
        /// <param name="notificationId">The ID of the notification subscription configuration. (required).</param>
        /// <param name="okMessages">A list of messages describing the testing steps..</param>
        /// <param name="pspReference">The reference of a request. Can be used to uniquely identify the request..</param>
        /// <param name="resultCode">The result code..</param>
        public TestNotificationConfigurationResponse(List<string> errorMessages = default(List<string>), List<EventTypesEnum> eventTypes = default(List<EventTypesEnum>), List<ExchangeMessage> exchangeMessages = default(List<ExchangeMessage>), List<ErrorFieldType> invalidFields = default(List<ErrorFieldType>), long? notificationId = default(long?), List<string> okMessages = default(List<string>), string pspReference = default(string), string resultCode = default(string))
        {
            this.NotificationId = notificationId;
            this.ErrorMessages = errorMessages;
            this.EventTypes = eventTypes;
            this.ExchangeMessages = exchangeMessages;
            this.InvalidFields = invalidFields;
            this.OkMessages = okMessages;
            this.PspReference = pspReference;
            this.ResultCode = resultCode;
        }

        /// <summary>
        /// Any error messages encountered.
        /// </summary>
        /// <value>Any error messages encountered.</value>
        [DataMember(Name = "errorMessages", EmitDefaultValue = false)]
        public List<string> ErrorMessages { get; set; }

        /// <summary>
        /// The event types that were tested. &gt;Permitted values: &#x60;ACCOUNT_HOLDER_CREATED&#x60;, &#x60;ACCOUNT_CREATED&#x60;, &#x60;ACCOUNT_UPDATED&#x60;, &#x60;ACCOUNT_HOLDER_UPDATED&#x60;, &#x60;ACCOUNT_HOLDER_STATUS_CHANGE&#x60;, &#x60;ACCOUNT_HOLDER_STORE_STATUS_CHANGE&#x60; &#x60;ACCOUNT_HOLDER_VERIFICATION&#x60;, &#x60;ACCOUNT_HOLDER_LIMIT_REACHED&#x60;, &#x60;ACCOUNT_HOLDER_PAYOUT&#x60;, &#x60;PAYMENT_FAILURE&#x60;, &#x60;SCHEDULED_REFUNDS&#x60;, &#x60;REPORT_AVAILABLE&#x60;, &#x60;TRANSFER_FUNDS&#x60;, &#x60;BENEFICIARY_SETUP&#x60;, &#x60;COMPENSATE_NEGATIVE_BALANCE&#x60;.
        /// </summary>
        /// <value>The event types that were tested. &gt;Permitted values: &#x60;ACCOUNT_HOLDER_CREATED&#x60;, &#x60;ACCOUNT_CREATED&#x60;, &#x60;ACCOUNT_UPDATED&#x60;, &#x60;ACCOUNT_HOLDER_UPDATED&#x60;, &#x60;ACCOUNT_HOLDER_STATUS_CHANGE&#x60;, &#x60;ACCOUNT_HOLDER_STORE_STATUS_CHANGE&#x60; &#x60;ACCOUNT_HOLDER_VERIFICATION&#x60;, &#x60;ACCOUNT_HOLDER_LIMIT_REACHED&#x60;, &#x60;ACCOUNT_HOLDER_PAYOUT&#x60;, &#x60;PAYMENT_FAILURE&#x60;, &#x60;SCHEDULED_REFUNDS&#x60;, &#x60;REPORT_AVAILABLE&#x60;, &#x60;TRANSFER_FUNDS&#x60;, &#x60;BENEFICIARY_SETUP&#x60;, &#x60;COMPENSATE_NEGATIVE_BALANCE&#x60;.</value>
        [DataMember(Name = "eventTypes", EmitDefaultValue = false)]
        public List<TestNotificationConfigurationResponse.EventTypesEnum> EventTypes { get; set; }

        /// <summary>
        /// The notification message and related response messages.
        /// </summary>
        /// <value>The notification message and related response messages.</value>
        [DataMember(Name = "exchangeMessages", EmitDefaultValue = false)]
        public List<ExchangeMessage> ExchangeMessages { get; set; }

        /// <summary>
        /// Contains field validation errors that would prevent requests from being processed.
        /// </summary>
        /// <value>Contains field validation errors that would prevent requests from being processed.</value>
        [DataMember(Name = "invalidFields", EmitDefaultValue = false)]
        public List<ErrorFieldType> InvalidFields { get; set; }

        /// <summary>
        /// The ID of the notification subscription configuration.
        /// </summary>
        /// <value>The ID of the notification subscription configuration.</value>
        [DataMember(Name = "notificationId", IsRequired = false, EmitDefaultValue = false)]
        public long? NotificationId { get; set; }

        /// <summary>
        /// A list of messages describing the testing steps.
        /// </summary>
        /// <value>A list of messages describing the testing steps.</value>
        [DataMember(Name = "okMessages", EmitDefaultValue = false)]
        public List<string> OkMessages { get; set; }

        /// <summary>
        /// The reference of a request. Can be used to uniquely identify the request.
        /// </summary>
        /// <value>The reference of a request. Can be used to uniquely identify the request.</value>
        [DataMember(Name = "pspReference", EmitDefaultValue = false)]
        public string PspReference { get; set; }

        /// <summary>
        /// The result code.
        /// </summary>
        /// <value>The result code.</value>
        [DataMember(Name = "resultCode", EmitDefaultValue = false)]
        public string ResultCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestNotificationConfigurationResponse {\n");
            sb.Append("  ErrorMessages: ").Append(ErrorMessages).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("  ExchangeMessages: ").Append(ExchangeMessages).Append("\n");
            sb.Append("  InvalidFields: ").Append(InvalidFields).Append("\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  OkMessages: ").Append(OkMessages).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestNotificationConfigurationResponse);
        }

        /// <summary>
        /// Returns true if TestNotificationConfigurationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TestNotificationConfigurationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestNotificationConfigurationResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ErrorMessages == input.ErrorMessages ||
                    this.ErrorMessages != null &&
                    input.ErrorMessages != null &&
                    this.ErrorMessages.SequenceEqual(input.ErrorMessages)
                ) && 
                (
                    this.EventTypes == input.EventTypes ||
                    this.EventTypes != null &&
                    input.EventTypes != null &&
                    this.EventTypes.SequenceEqual(input.EventTypes)
                ) && 
                (
                    this.ExchangeMessages == input.ExchangeMessages ||
                    this.ExchangeMessages != null &&
                    input.ExchangeMessages != null &&
                    this.ExchangeMessages.SequenceEqual(input.ExchangeMessages)
                ) && 
                (
                    this.InvalidFields == input.InvalidFields ||
                    this.InvalidFields != null &&
                    input.InvalidFields != null &&
                    this.InvalidFields.SequenceEqual(input.InvalidFields)
                ) && 
                (
                    this.NotificationId == input.NotificationId ||
                    this.NotificationId.Equals(input.NotificationId)
                ) && 
                (
                    this.OkMessages == input.OkMessages ||
                    this.OkMessages != null &&
                    input.OkMessages != null &&
                    this.OkMessages.SequenceEqual(input.OkMessages)
                ) && 
                (
                    this.PspReference == input.PspReference ||
                    (this.PspReference != null &&
                    this.PspReference.Equals(input.PspReference))
                ) && 
                (
                    this.ResultCode == input.ResultCode ||
                    (this.ResultCode != null &&
                    this.ResultCode.Equals(input.ResultCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorMessages != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMessages.GetHashCode();
                }
                if (this.EventTypes != null)
                {
                    hashCode = (hashCode * 59) + this.EventTypes.GetHashCode();
                }
                if (this.ExchangeMessages != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeMessages.GetHashCode();
                }
                if (this.InvalidFields != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidFields.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotificationId.GetHashCode();
                if (this.OkMessages != null)
                {
                    hashCode = (hashCode * 59) + this.OkMessages.GetHashCode();
                }
                if (this.PspReference != null)
                {
                    hashCode = (hashCode * 59) + this.PspReference.GetHashCode();
                }
                if (this.ResultCode != null)
                {
                    hashCode = (hashCode * 59) + this.ResultCode.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
