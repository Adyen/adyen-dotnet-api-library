/*
* Notification Configuration API
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsNotificationConfiguration
{
    /// <summary>
    /// NotificationEventConfiguration
    /// </summary>
    [DataContract(Name = "NotificationEventConfiguration")]
    public partial class NotificationEventConfiguration : IEquatable<NotificationEventConfiguration>, IValidatableObject
    {
        /// <summary>
        /// The type of event.  Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.
        /// </summary>
        /// <value>The type of event.  Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypeEnum
        {
            /// <summary>
            /// Enum ACCOUNTCLOSED for value: ACCOUNT_CLOSED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_CLOSED")]
            ACCOUNTCLOSED = 1,

            /// <summary>
            /// Enum ACCOUNTCREATED for value: ACCOUNT_CREATED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_CREATED")]
            ACCOUNTCREATED = 2,

            /// <summary>
            /// Enum ACCOUNTFUNDSBELOWTHRESHOLD for value: ACCOUNT_FUNDS_BELOW_THRESHOLD
            /// </summary>
            [EnumMember(Value = "ACCOUNT_FUNDS_BELOW_THRESHOLD")]
            ACCOUNTFUNDSBELOWTHRESHOLD = 3,

            /// <summary>
            /// Enum ACCOUNTHOLDERCREATED for value: ACCOUNT_HOLDER_CREATED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_CREATED")]
            ACCOUNTHOLDERCREATED = 4,

            /// <summary>
            /// Enum ACCOUNTHOLDERLIMITREACHED for value: ACCOUNT_HOLDER_LIMIT_REACHED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_LIMIT_REACHED")]
            ACCOUNTHOLDERLIMITREACHED = 5,

            /// <summary>
            /// Enum ACCOUNTHOLDERMIGRATED for value: ACCOUNT_HOLDER_MIGRATED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_MIGRATED")]
            ACCOUNTHOLDERMIGRATED = 6,

            /// <summary>
            /// Enum ACCOUNTHOLDERPAYOUT for value: ACCOUNT_HOLDER_PAYOUT
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_PAYOUT")]
            ACCOUNTHOLDERPAYOUT = 7,

            /// <summary>
            /// Enum ACCOUNTHOLDERSTATUSCHANGE for value: ACCOUNT_HOLDER_STATUS_CHANGE
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_STATUS_CHANGE")]
            ACCOUNTHOLDERSTATUSCHANGE = 8,

            /// <summary>
            /// Enum ACCOUNTHOLDERSTORESTATUSCHANGE for value: ACCOUNT_HOLDER_STORE_STATUS_CHANGE
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_STORE_STATUS_CHANGE")]
            ACCOUNTHOLDERSTORESTATUSCHANGE = 9,

            /// <summary>
            /// Enum ACCOUNTHOLDERUPCOMINGDEADLINE for value: ACCOUNT_HOLDER_UPCOMING_DEADLINE
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_UPCOMING_DEADLINE")]
            ACCOUNTHOLDERUPCOMINGDEADLINE = 10,

            /// <summary>
            /// Enum ACCOUNTHOLDERUPDATED for value: ACCOUNT_HOLDER_UPDATED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_UPDATED")]
            ACCOUNTHOLDERUPDATED = 11,

            /// <summary>
            /// Enum ACCOUNTHOLDERVERIFICATION for value: ACCOUNT_HOLDER_VERIFICATION
            /// </summary>
            [EnumMember(Value = "ACCOUNT_HOLDER_VERIFICATION")]
            ACCOUNTHOLDERVERIFICATION = 12,

            /// <summary>
            /// Enum ACCOUNTUPDATED for value: ACCOUNT_UPDATED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_UPDATED")]
            ACCOUNTUPDATED = 13,

            /// <summary>
            /// Enum BENEFICIARYSETUP for value: BENEFICIARY_SETUP
            /// </summary>
            [EnumMember(Value = "BENEFICIARY_SETUP")]
            BENEFICIARYSETUP = 14,

            /// <summary>
            /// Enum COMPENSATENEGATIVEBALANCE for value: COMPENSATE_NEGATIVE_BALANCE
            /// </summary>
            [EnumMember(Value = "COMPENSATE_NEGATIVE_BALANCE")]
            COMPENSATENEGATIVEBALANCE = 15,

            /// <summary>
            /// Enum DIRECTDEBITINITIATED for value: DIRECT_DEBIT_INITIATED
            /// </summary>
            [EnumMember(Value = "DIRECT_DEBIT_INITIATED")]
            DIRECTDEBITINITIATED = 16,

            /// <summary>
            /// Enum FUNDSMIGRATED for value: FUNDS_MIGRATED
            /// </summary>
            [EnumMember(Value = "FUNDS_MIGRATED")]
            FUNDSMIGRATED = 17,

            /// <summary>
            /// Enum PAYMENTFAILURE for value: PAYMENT_FAILURE
            /// </summary>
            [EnumMember(Value = "PAYMENT_FAILURE")]
            PAYMENTFAILURE = 18,

            /// <summary>
            /// Enum PENDINGCREDIT for value: PENDING_CREDIT
            /// </summary>
            [EnumMember(Value = "PENDING_CREDIT")]
            PENDINGCREDIT = 19,

            /// <summary>
            /// Enum REFUNDFUNDSTRANSFER for value: REFUND_FUNDS_TRANSFER
            /// </summary>
            [EnumMember(Value = "REFUND_FUNDS_TRANSFER")]
            REFUNDFUNDSTRANSFER = 20,

            /// <summary>
            /// Enum REPORTAVAILABLE for value: REPORT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "REPORT_AVAILABLE")]
            REPORTAVAILABLE = 21,

            /// <summary>
            /// Enum SCHEDULEDREFUNDS for value: SCHEDULED_REFUNDS
            /// </summary>
            [EnumMember(Value = "SCHEDULED_REFUNDS")]
            SCHEDULEDREFUNDS = 22,

            /// <summary>
            /// Enum SCORESIGNALTRIGGERED for value: SCORE_SIGNAL_TRIGGERED
            /// </summary>
            [EnumMember(Value = "SCORE_SIGNAL_TRIGGERED")]
            SCORESIGNALTRIGGERED = 23,

            /// <summary>
            /// Enum TRANSFERFUNDS for value: TRANSFER_FUNDS
            /// </summary>
            [EnumMember(Value = "TRANSFER_FUNDS")]
            TRANSFERFUNDS = 24,

            /// <summary>
            /// Enum TRANSFERNOTPAIDOUTTRANSFERS for value: TRANSFER_NOT_PAIDOUT_TRANSFERS
            /// </summary>
            [EnumMember(Value = "TRANSFER_NOT_PAIDOUT_TRANSFERS")]
            TRANSFERNOTPAIDOUTTRANSFERS = 25

        }


        /// <summary>
        /// The type of event.  Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.
        /// </summary>
        /// <value>The type of event.  Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.</value>
        [DataMember(Name = "eventType", IsRequired = false, EmitDefaultValue = false)]
        public EventTypeEnum EventType { get; set; }
        /// <summary>
        /// Indicates whether the specified &#x60;eventType&#x60; is sent to your webhook endpoint. Possible values: * **INCLUDE**: Send the specified &#x60;eventType&#x60;. * **EXCLUDE**: Send all event types except the specified &#x60;eventType&#x60; and other event types with the &#x60;includeMode&#x60; set to **EXCLUDE**.
        /// </summary>
        /// <value>Indicates whether the specified &#x60;eventType&#x60; is sent to your webhook endpoint. Possible values: * **INCLUDE**: Send the specified &#x60;eventType&#x60;. * **EXCLUDE**: Send all event types except the specified &#x60;eventType&#x60; and other event types with the &#x60;includeMode&#x60; set to **EXCLUDE**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncludeModeEnum
        {
            /// <summary>
            /// Enum EXCLUDE for value: EXCLUDE
            /// </summary>
            [EnumMember(Value = "EXCLUDE")]
            EXCLUDE = 1,

            /// <summary>
            /// Enum INCLUDE for value: INCLUDE
            /// </summary>
            [EnumMember(Value = "INCLUDE")]
            INCLUDE = 2

        }


        /// <summary>
        /// Indicates whether the specified &#x60;eventType&#x60; is sent to your webhook endpoint. Possible values: * **INCLUDE**: Send the specified &#x60;eventType&#x60;. * **EXCLUDE**: Send all event types except the specified &#x60;eventType&#x60; and other event types with the &#x60;includeMode&#x60; set to **EXCLUDE**.
        /// </summary>
        /// <value>Indicates whether the specified &#x60;eventType&#x60; is sent to your webhook endpoint. Possible values: * **INCLUDE**: Send the specified &#x60;eventType&#x60;. * **EXCLUDE**: Send all event types except the specified &#x60;eventType&#x60; and other event types with the &#x60;includeMode&#x60; set to **EXCLUDE**.</value>
        [DataMember(Name = "includeMode", IsRequired = false, EmitDefaultValue = false)]
        public IncludeModeEnum IncludeMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationEventConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotificationEventConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationEventConfiguration" /> class.
        /// </summary>
        /// <param name="eventType">The type of event.  Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**. (required).</param>
        /// <param name="includeMode">Indicates whether the specified &#x60;eventType&#x60; is sent to your webhook endpoint. Possible values: * **INCLUDE**: Send the specified &#x60;eventType&#x60;. * **EXCLUDE**: Send all event types except the specified &#x60;eventType&#x60; and other event types with the &#x60;includeMode&#x60; set to **EXCLUDE**. (required).</param>
        public NotificationEventConfiguration(EventTypeEnum eventType = default(EventTypeEnum), IncludeModeEnum includeMode = default(IncludeModeEnum))
        {
            this.EventType = eventType;
            this.IncludeMode = includeMode;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotificationEventConfiguration {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  IncludeMode: ").Append(IncludeMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationEventConfiguration);
        }

        /// <summary>
        /// Returns true if NotificationEventConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationEventConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationEventConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventType == input.EventType ||
                    this.EventType.Equals(input.EventType)
                ) && 
                (
                    this.IncludeMode == input.IncludeMode ||
                    this.IncludeMode.Equals(input.IncludeMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeMode.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
