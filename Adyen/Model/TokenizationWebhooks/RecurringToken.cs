/*
* Tokenization webhooks
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.TokenizationWebhooks
{
    /// <summary>
    /// RecurringToken
    /// </summary>
    [DataContract(Name = "RecurringToken")]
    public partial class RecurringToken : IEquatable<RecurringToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecurringToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringToken" /> class.
        /// </summary>
        /// <param name="merchantAccount">The identifier of the merchant account related to the event that triggered the webhook. (required).</param>
        /// <param name="shopperReference">Your unique shopper reference that is associated with the &#x60;storedPaymentMethodId&#x60;. (required).</param>
        /// <param name="storedPaymentMethodId">The ID of the token. (required).</param>
        /// <param name="type">The type of the payment method. (required).</param>
        public RecurringToken(string merchantAccount = default(string), string shopperReference = default(string), string storedPaymentMethodId = default(string), string type = default(string))
        {
            this.MerchantAccount = merchantAccount;
            this.ShopperReference = shopperReference;
            this.StoredPaymentMethodId = storedPaymentMethodId;
            this.Type = type;
        }

        /// <summary>
        /// The identifier of the merchant account related to the event that triggered the webhook.
        /// </summary>
        /// <value>The identifier of the merchant account related to the event that triggered the webhook.</value>
        [DataMember(Name = "merchantAccount", IsRequired = false, EmitDefaultValue = false)]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// Your unique shopper reference that is associated with the &#x60;storedPaymentMethodId&#x60;.
        /// </summary>
        /// <value>Your unique shopper reference that is associated with the &#x60;storedPaymentMethodId&#x60;.</value>
        [DataMember(Name = "shopperReference", IsRequired = false, EmitDefaultValue = false)]
        public string ShopperReference { get; set; }

        /// <summary>
        /// The ID of the token.
        /// </summary>
        /// <value>The ID of the token.</value>
        [DataMember(Name = "storedPaymentMethodId", IsRequired = false, EmitDefaultValue = false)]
        public string StoredPaymentMethodId { get; set; }

        /// <summary>
        /// The type of the payment method.
        /// </summary>
        /// <value>The type of the payment method.</value>
        [DataMember(Name = "type", IsRequired = false, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecurringToken {\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("  StoredPaymentMethodId: ").Append(StoredPaymentMethodId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecurringToken);
        }

        /// <summary>
        /// Returns true if RecurringToken instances are equal
        /// </summary>
        /// <param name="input">Instance of RecurringToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecurringToken input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MerchantAccount == input.MerchantAccount ||
                    (this.MerchantAccount != null &&
                    this.MerchantAccount.Equals(input.MerchantAccount))
                ) && 
                (
                    this.ShopperReference == input.ShopperReference ||
                    (this.ShopperReference != null &&
                    this.ShopperReference.Equals(input.ShopperReference))
                ) && 
                (
                    this.StoredPaymentMethodId == input.StoredPaymentMethodId ||
                    (this.StoredPaymentMethodId != null &&
                    this.StoredPaymentMethodId.Equals(input.StoredPaymentMethodId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantAccount != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantAccount.GetHashCode();
                }
                if (this.ShopperReference != null)
                {
                    hashCode = (hashCode * 59) + this.ShopperReference.GetHashCode();
                }
                if (this.StoredPaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.StoredPaymentMethodId.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
