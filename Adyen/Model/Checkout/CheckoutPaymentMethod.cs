/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;
using System.Reflection;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// The type and required details of a payment method to use.
    /// </summary>
    [JsonConverter(typeof(CheckoutPaymentMethodJsonConverter))]
    [DataContract(Name = "CheckoutPaymentMethod")]
    public partial class CheckoutPaymentMethod : AbstractOpenAPISchema, IEquatable<CheckoutPaymentMethod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="AchDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AchDetails.</param>
        public CheckoutPaymentMethod(AchDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="AfterpayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AfterpayDetails.</param>
        public CheckoutPaymentMethod(AfterpayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="AmazonPayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AmazonPayDetails.</param>
        public CheckoutPaymentMethod(AmazonPayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="AncvDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AncvDetails.</param>
        public CheckoutPaymentMethod(AncvDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="AndroidPayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AndroidPayDetails.</param>
        public CheckoutPaymentMethod(AndroidPayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="ApplePayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ApplePayDetails.</param>
        public CheckoutPaymentMethod(ApplePayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="BacsDirectDebitDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of BacsDirectDebitDetails.</param>
        public CheckoutPaymentMethod(BacsDirectDebitDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="BillDeskDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of BillDeskDetails.</param>
        public CheckoutPaymentMethod(BillDeskDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="BlikDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of BlikDetails.</param>
        public CheckoutPaymentMethod(BlikDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="CardDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CardDetails.</param>
        public CheckoutPaymentMethod(CardDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="CashAppDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CashAppDetails.</param>
        public CheckoutPaymentMethod(CashAppDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="CellulantDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CellulantDetails.</param>
        public CheckoutPaymentMethod(CellulantDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="DokuDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DokuDetails.</param>
        public CheckoutPaymentMethod(DokuDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="DotpayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DotpayDetails.</param>
        public CheckoutPaymentMethod(DotpayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="DragonpayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DragonpayDetails.</param>
        public CheckoutPaymentMethod(DragonpayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="EcontextVoucherDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EcontextVoucherDetails.</param>
        public CheckoutPaymentMethod(EcontextVoucherDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="EftDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EftDetails.</param>
        public CheckoutPaymentMethod(EftDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="GenericIssuerPaymentMethodDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GenericIssuerPaymentMethodDetails.</param>
        public CheckoutPaymentMethod(GenericIssuerPaymentMethodDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="GiropayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GiropayDetails.</param>
        public CheckoutPaymentMethod(GiropayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="GooglePayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GooglePayDetails.</param>
        public CheckoutPaymentMethod(GooglePayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="IdealDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of IdealDetails.</param>
        public CheckoutPaymentMethod(IdealDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="KlarnaDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of KlarnaDetails.</param>
        public CheckoutPaymentMethod(KlarnaDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="MasterpassDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MasterpassDetails.</param>
        public CheckoutPaymentMethod(MasterpassDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="MbwayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MbwayDetails.</param>
        public CheckoutPaymentMethod(MbwayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="MobilePayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MobilePayDetails.</param>
        public CheckoutPaymentMethod(MobilePayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="MolPayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MolPayDetails.</param>
        public CheckoutPaymentMethod(MolPayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="OpenInvoiceDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of OpenInvoiceDetails.</param>
        public CheckoutPaymentMethod(OpenInvoiceDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="PayByBankDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PayByBankDetails.</param>
        public CheckoutPaymentMethod(PayByBankDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="PayPalDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PayPalDetails.</param>
        public CheckoutPaymentMethod(PayPalDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="PayToDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PayToDetails.</param>
        public CheckoutPaymentMethod(PayToDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="PayUUpiDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PayUUpiDetails.</param>
        public CheckoutPaymentMethod(PayUUpiDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="PayWithGoogleDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PayWithGoogleDetails.</param>
        public CheckoutPaymentMethod(PayWithGoogleDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="PaymentDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PaymentDetails.</param>
        public CheckoutPaymentMethod(PaymentDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="RatepayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RatepayDetails.</param>
        public CheckoutPaymentMethod(RatepayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="SamsungPayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SamsungPayDetails.</param>
        public CheckoutPaymentMethod(SamsungPayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="SepaDirectDebitDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SepaDirectDebitDetails.</param>
        public CheckoutPaymentMethod(SepaDirectDebitDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="StoredPaymentMethodDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of StoredPaymentMethodDetails.</param>
        public CheckoutPaymentMethod(StoredPaymentMethodDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="UpiCollectDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UpiCollectDetails.</param>
        public CheckoutPaymentMethod(UpiCollectDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="UpiIntentDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UpiIntentDetails.</param>
        public CheckoutPaymentMethod(UpiIntentDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="VippsDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VippsDetails.</param>
        public CheckoutPaymentMethod(VippsDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="VisaCheckoutDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VisaCheckoutDetails.</param>
        public CheckoutPaymentMethod(VisaCheckoutDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="WeChatPayDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of WeChatPayDetails.</param>
        public CheckoutPaymentMethod(WeChatPayDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="WeChatPayMiniProgramDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of WeChatPayMiniProgramDetails.</param>
        public CheckoutPaymentMethod(WeChatPayMiniProgramDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
        /// with the <see cref="ZipDetails" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ZipDetails.</param>
        public CheckoutPaymentMethod(ZipDetails actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AchDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AfterpayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AmazonPayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AncvDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AndroidPayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ApplePayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(BacsDirectDebitDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(BillDeskDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(BlikDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CardDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CashAppDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CellulantDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DokuDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DotpayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DragonpayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EcontextVoucherDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EftDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GenericIssuerPaymentMethodDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GiropayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GooglePayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(IdealDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(KlarnaDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MasterpassDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MbwayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MobilePayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MolPayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(OpenInvoiceDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PayByBankDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PayPalDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PayToDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PayUUpiDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PayWithGoogleDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PaymentDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RatepayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SamsungPayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SepaDirectDebitDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(StoredPaymentMethodDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UpiCollectDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UpiIntentDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VippsDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VisaCheckoutDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(WeChatPayDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(WeChatPayMiniProgramDetails))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ZipDetails))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AchDetails, AfterpayDetails, AmazonPayDetails, AncvDetails, AndroidPayDetails, ApplePayDetails, BacsDirectDebitDetails, BillDeskDetails, BlikDetails, CardDetails, CashAppDetails, CellulantDetails, DokuDetails, DotpayDetails, DragonpayDetails, EcontextVoucherDetails, EftDetails, GenericIssuerPaymentMethodDetails, GiropayDetails, GooglePayDetails, IdealDetails, KlarnaDetails, MasterpassDetails, MbwayDetails, MobilePayDetails, MolPayDetails, OpenInvoiceDetails, PayByBankDetails, PayPalDetails, PayToDetails, PayUUpiDetails, PayWithGoogleDetails, PaymentDetails, RatepayDetails, SamsungPayDetails, SepaDirectDebitDetails, StoredPaymentMethodDetails, UpiCollectDetails, UpiIntentDetails, VippsDetails, VisaCheckoutDetails, WeChatPayDetails, WeChatPayMiniProgramDetails, ZipDetails");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `AchDetails`. If the actual instance is not `AchDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AchDetails</returns>
        public AchDetails GetAchDetails()
        {
            return (AchDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AfterpayDetails`. If the actual instance is not `AfterpayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AfterpayDetails</returns>
        public AfterpayDetails GetAfterpayDetails()
        {
            return (AfterpayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AmazonPayDetails`. If the actual instance is not `AmazonPayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AmazonPayDetails</returns>
        public AmazonPayDetails GetAmazonPayDetails()
        {
            return (AmazonPayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AncvDetails`. If the actual instance is not `AncvDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AncvDetails</returns>
        public AncvDetails GetAncvDetails()
        {
            return (AncvDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AndroidPayDetails`. If the actual instance is not `AndroidPayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AndroidPayDetails</returns>
        public AndroidPayDetails GetAndroidPayDetails()
        {
            return (AndroidPayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ApplePayDetails`. If the actual instance is not `ApplePayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ApplePayDetails</returns>
        public ApplePayDetails GetApplePayDetails()
        {
            return (ApplePayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `BacsDirectDebitDetails`. If the actual instance is not `BacsDirectDebitDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of BacsDirectDebitDetails</returns>
        public BacsDirectDebitDetails GetBacsDirectDebitDetails()
        {
            return (BacsDirectDebitDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `BillDeskDetails`. If the actual instance is not `BillDeskDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of BillDeskDetails</returns>
        public BillDeskDetails GetBillDeskDetails()
        {
            return (BillDeskDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `BlikDetails`. If the actual instance is not `BlikDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of BlikDetails</returns>
        public BlikDetails GetBlikDetails()
        {
            return (BlikDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CardDetails`. If the actual instance is not `CardDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CardDetails</returns>
        public CardDetails GetCardDetails()
        {
            return (CardDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CashAppDetails`. If the actual instance is not `CashAppDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CashAppDetails</returns>
        public CashAppDetails GetCashAppDetails()
        {
            return (CashAppDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CellulantDetails`. If the actual instance is not `CellulantDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CellulantDetails</returns>
        public CellulantDetails GetCellulantDetails()
        {
            return (CellulantDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DokuDetails`. If the actual instance is not `DokuDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DokuDetails</returns>
        public DokuDetails GetDokuDetails()
        {
            return (DokuDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DotpayDetails`. If the actual instance is not `DotpayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DotpayDetails</returns>
        public DotpayDetails GetDotpayDetails()
        {
            return (DotpayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DragonpayDetails`. If the actual instance is not `DragonpayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DragonpayDetails</returns>
        public DragonpayDetails GetDragonpayDetails()
        {
            return (DragonpayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EcontextVoucherDetails`. If the actual instance is not `EcontextVoucherDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EcontextVoucherDetails</returns>
        public EcontextVoucherDetails GetEcontextVoucherDetails()
        {
            return (EcontextVoucherDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EftDetails`. If the actual instance is not `EftDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EftDetails</returns>
        public EftDetails GetEftDetails()
        {
            return (EftDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GenericIssuerPaymentMethodDetails`. If the actual instance is not `GenericIssuerPaymentMethodDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GenericIssuerPaymentMethodDetails</returns>
        public GenericIssuerPaymentMethodDetails GetGenericIssuerPaymentMethodDetails()
        {
            return (GenericIssuerPaymentMethodDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GiropayDetails`. If the actual instance is not `GiropayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GiropayDetails</returns>
        public GiropayDetails GetGiropayDetails()
        {
            return (GiropayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GooglePayDetails`. If the actual instance is not `GooglePayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GooglePayDetails</returns>
        public GooglePayDetails GetGooglePayDetails()
        {
            return (GooglePayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `IdealDetails`. If the actual instance is not `IdealDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of IdealDetails</returns>
        public IdealDetails GetIdealDetails()
        {
            return (IdealDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `KlarnaDetails`. If the actual instance is not `KlarnaDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of KlarnaDetails</returns>
        public KlarnaDetails GetKlarnaDetails()
        {
            return (KlarnaDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MasterpassDetails`. If the actual instance is not `MasterpassDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MasterpassDetails</returns>
        public MasterpassDetails GetMasterpassDetails()
        {
            return (MasterpassDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MbwayDetails`. If the actual instance is not `MbwayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MbwayDetails</returns>
        public MbwayDetails GetMbwayDetails()
        {
            return (MbwayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MobilePayDetails`. If the actual instance is not `MobilePayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MobilePayDetails</returns>
        public MobilePayDetails GetMobilePayDetails()
        {
            return (MobilePayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MolPayDetails`. If the actual instance is not `MolPayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MolPayDetails</returns>
        public MolPayDetails GetMolPayDetails()
        {
            return (MolPayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `OpenInvoiceDetails`. If the actual instance is not `OpenInvoiceDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of OpenInvoiceDetails</returns>
        public OpenInvoiceDetails GetOpenInvoiceDetails()
        {
            return (OpenInvoiceDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PayByBankDetails`. If the actual instance is not `PayByBankDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PayByBankDetails</returns>
        public PayByBankDetails GetPayByBankDetails()
        {
            return (PayByBankDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PayPalDetails`. If the actual instance is not `PayPalDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PayPalDetails</returns>
        public PayPalDetails GetPayPalDetails()
        {
            return (PayPalDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PayToDetails`. If the actual instance is not `PayToDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PayToDetails</returns>
        public PayToDetails GetPayToDetails()
        {
            return (PayToDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PayUUpiDetails`. If the actual instance is not `PayUUpiDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PayUUpiDetails</returns>
        public PayUUpiDetails GetPayUUpiDetails()
        {
            return (PayUUpiDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PayWithGoogleDetails`. If the actual instance is not `PayWithGoogleDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PayWithGoogleDetails</returns>
        public PayWithGoogleDetails GetPayWithGoogleDetails()
        {
            return (PayWithGoogleDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PaymentDetails`. If the actual instance is not `PaymentDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PaymentDetails</returns>
        public PaymentDetails GetPaymentDetails()
        {
            return (PaymentDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RatepayDetails`. If the actual instance is not `RatepayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RatepayDetails</returns>
        public RatepayDetails GetRatepayDetails()
        {
            return (RatepayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `SamsungPayDetails`. If the actual instance is not `SamsungPayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SamsungPayDetails</returns>
        public SamsungPayDetails GetSamsungPayDetails()
        {
            return (SamsungPayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `SepaDirectDebitDetails`. If the actual instance is not `SepaDirectDebitDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SepaDirectDebitDetails</returns>
        public SepaDirectDebitDetails GetSepaDirectDebitDetails()
        {
            return (SepaDirectDebitDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `StoredPaymentMethodDetails`. If the actual instance is not `StoredPaymentMethodDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of StoredPaymentMethodDetails</returns>
        public StoredPaymentMethodDetails GetStoredPaymentMethodDetails()
        {
            return (StoredPaymentMethodDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UpiCollectDetails`. If the actual instance is not `UpiCollectDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UpiCollectDetails</returns>
        public UpiCollectDetails GetUpiCollectDetails()
        {
            return (UpiCollectDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UpiIntentDetails`. If the actual instance is not `UpiIntentDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UpiIntentDetails</returns>
        public UpiIntentDetails GetUpiIntentDetails()
        {
            return (UpiIntentDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VippsDetails`. If the actual instance is not `VippsDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VippsDetails</returns>
        public VippsDetails GetVippsDetails()
        {
            return (VippsDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VisaCheckoutDetails`. If the actual instance is not `VisaCheckoutDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VisaCheckoutDetails</returns>
        public VisaCheckoutDetails GetVisaCheckoutDetails()
        {
            return (VisaCheckoutDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `WeChatPayDetails`. If the actual instance is not `WeChatPayDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of WeChatPayDetails</returns>
        public WeChatPayDetails GetWeChatPayDetails()
        {
            return (WeChatPayDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `WeChatPayMiniProgramDetails`. If the actual instance is not `WeChatPayMiniProgramDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of WeChatPayMiniProgramDetails</returns>
        public WeChatPayMiniProgramDetails GetWeChatPayMiniProgramDetails()
        {
            return (WeChatPayMiniProgramDetails)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ZipDetails`. If the actual instance is not `ZipDetails`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ZipDetails</returns>
        public ZipDetails GetZipDetails()
        {
            return (ZipDetails)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckoutPaymentMethod {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, CheckoutPaymentMethod.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of CheckoutPaymentMethod
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of CheckoutPaymentMethod</returns>
        public static CheckoutPaymentMethod FromJson(string jsonString)
        {
            CheckoutPaymentMethod newCheckoutPaymentMethod = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newCheckoutPaymentMethod;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();
            JToken typeToken = JObject.Parse(jsonString).GetValue("type");
            string type = typeToken?.Value<string>();
            // Throw exception if jsonString does not contain type param
            if (type == null)
            {
                throw new InvalidDataException("JsonString does not contain required enum type for deserialization.");
            }
            try
            {
                // Check if the jsonString type enum matches the AchDetails type enums
                if (ContainsValue<AchDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<AchDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("AchDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the AfterpayDetails type enums
                if (ContainsValue<AfterpayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<AfterpayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("AfterpayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the AmazonPayDetails type enums
                if (ContainsValue<AmazonPayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<AmazonPayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("AmazonPayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the AncvDetails type enums
                if (ContainsValue<AncvDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<AncvDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("AncvDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the AndroidPayDetails type enums
                if (ContainsValue<AndroidPayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<AndroidPayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("AndroidPayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the ApplePayDetails type enums
                if (ContainsValue<ApplePayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<ApplePayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("ApplePayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the BacsDirectDebitDetails type enums
                if (ContainsValue<BacsDirectDebitDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<BacsDirectDebitDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("BacsDirectDebitDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the BillDeskDetails type enums
                if (ContainsValue<BillDeskDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<BillDeskDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("BillDeskDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the BlikDetails type enums
                if (ContainsValue<BlikDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<BlikDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("BlikDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the CardDetails type enums
                if (ContainsValue<CardDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<CardDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("CardDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the CashAppDetails type enums
                if (ContainsValue<CashAppDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<CashAppDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("CashAppDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the CellulantDetails type enums
                if (ContainsValue<CellulantDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<CellulantDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("CellulantDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the DokuDetails type enums
                if (ContainsValue<DokuDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<DokuDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("DokuDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the DotpayDetails type enums
                if (ContainsValue<DotpayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<DotpayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("DotpayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the DragonpayDetails type enums
                if (ContainsValue<DragonpayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<DragonpayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("DragonpayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the EcontextVoucherDetails type enums
                if (ContainsValue<EcontextVoucherDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<EcontextVoucherDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("EcontextVoucherDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the EftDetails type enums
                if (ContainsValue<EftDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<EftDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("EftDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the GenericIssuerPaymentMethodDetails type enums
                if (ContainsValue<GenericIssuerPaymentMethodDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<GenericIssuerPaymentMethodDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("GenericIssuerPaymentMethodDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the GiropayDetails type enums
                if (ContainsValue<GiropayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<GiropayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("GiropayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the GooglePayDetails type enums
                if (ContainsValue<GooglePayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<GooglePayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("GooglePayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the IdealDetails type enums
                if (ContainsValue<IdealDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<IdealDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("IdealDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the KlarnaDetails type enums
                if (ContainsValue<KlarnaDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<KlarnaDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("KlarnaDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the MasterpassDetails type enums
                if (ContainsValue<MasterpassDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<MasterpassDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("MasterpassDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the MbwayDetails type enums
                if (ContainsValue<MbwayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<MbwayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("MbwayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the MobilePayDetails type enums
                if (ContainsValue<MobilePayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<MobilePayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("MobilePayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the MolPayDetails type enums
                if (ContainsValue<MolPayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<MolPayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("MolPayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the OpenInvoiceDetails type enums
                if (ContainsValue<OpenInvoiceDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<OpenInvoiceDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("OpenInvoiceDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the PayByBankDetails type enums
                if (ContainsValue<PayByBankDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<PayByBankDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("PayByBankDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the PayPalDetails type enums
                if (ContainsValue<PayPalDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<PayPalDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("PayPalDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the PayToDetails type enums
                if (ContainsValue<PayToDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<PayToDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("PayToDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the PayUUpiDetails type enums
                if (ContainsValue<PayUUpiDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<PayUUpiDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("PayUUpiDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the PayWithGoogleDetails type enums
                if (ContainsValue<PayWithGoogleDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<PayWithGoogleDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("PayWithGoogleDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the PaymentDetails type enums
                if (ContainsValue<PaymentDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<PaymentDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("PaymentDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the RatepayDetails type enums
                if (ContainsValue<RatepayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<RatepayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("RatepayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the SamsungPayDetails type enums
                if (ContainsValue<SamsungPayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<SamsungPayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("SamsungPayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the SepaDirectDebitDetails type enums
                if (ContainsValue<SepaDirectDebitDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<SepaDirectDebitDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("SepaDirectDebitDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the StoredPaymentMethodDetails type enums
                if (ContainsValue<StoredPaymentMethodDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<StoredPaymentMethodDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("StoredPaymentMethodDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the UpiCollectDetails type enums
                if (ContainsValue<UpiCollectDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<UpiCollectDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("UpiCollectDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the UpiIntentDetails type enums
                if (ContainsValue<UpiIntentDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<UpiIntentDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("UpiIntentDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the VippsDetails type enums
                if (ContainsValue<VippsDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<VippsDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("VippsDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the VisaCheckoutDetails type enums
                if (ContainsValue<VisaCheckoutDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<VisaCheckoutDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("VisaCheckoutDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the WeChatPayDetails type enums
                if (ContainsValue<WeChatPayDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<WeChatPayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("WeChatPayDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the WeChatPayMiniProgramDetails type enums
                if (ContainsValue<WeChatPayMiniProgramDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<WeChatPayMiniProgramDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("WeChatPayMiniProgramDetails");
                    match++;
                }
                // Check if the jsonString type enum matches the ZipDetails type enums
                if (ContainsValue<ZipDetails.TypeEnum>(type))
                {
                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<ZipDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
                    matchedTypes.Add("ZipDetails");
                    match++;
                }
            } 
            catch (Exception ex)
            {
                if (!(ex is JsonSerializationException))
                {
                     throw new InvalidDataException(string.Format("Failed to deserialize `{0}` into target: {1}", jsonString, ex.ToString()));
                }
            }

            if (match != 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined. MatchedTypes are: " + matchedTypes);
            }
            
            // deserialization is considered successful at this point if no exception has been thrown.
            return newCheckoutPaymentMethod;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckoutPaymentMethod);
        }

        /// <summary>
        /// Returns true if CheckoutPaymentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckoutPaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckoutPaymentMethod input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for CheckoutPaymentMethod
    /// </summary>
    public class CheckoutPaymentMethodJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(CheckoutPaymentMethod).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return CheckoutPaymentMethod.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
