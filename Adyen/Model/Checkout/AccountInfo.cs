// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AccountInfo
    /// </summary>
    public partial class AccountInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInfo" /> class.
        /// </summary>
        /// <param name="accountAgeIndicator">Indicator for the length of time since this shopper account was created in the merchant&#39;s environment. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</param>
        /// <param name="accountChangeDate">Date when the shopper&#39;s account was last changed.</param>
        /// <param name="accountChangeIndicator">Indicator for the length of time since the shopper&#39;s account was last updated. Allowed values: * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</param>
        /// <param name="accountCreationDate">Date when the shopper&#39;s account was created.</param>
        /// <param name="accountType">Indicates the type of account. For example, for a multi-account card product. Allowed values: * notApplicable * credit * debit</param>
        /// <param name="addCardAttemptsDay">Number of attempts the shopper tried to add a card to their account in the last day.</param>
        /// <param name="deliveryAddressUsageDate">Date the selected delivery address was first used.</param>
        /// <param name="deliveryAddressUsageIndicator">Indicator for the length of time since this delivery address was first used. Allowed values: * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</param>
        /// <param name="homePhone">Shopper&#39;s home phone number (including the country code).</param>
        /// <param name="mobilePhone">Shopper&#39;s mobile phone number (including the country code).</param>
        /// <param name="passwordChangeDate">Date when the shopper last changed their password.</param>
        /// <param name="passwordChangeIndicator">Indicator when the shopper has changed their password. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</param>
        /// <param name="pastTransactionsDay">Number of all transactions (successful and abandoned) from this shopper in the past 24 hours.</param>
        /// <param name="pastTransactionsYear">Number of all transactions (successful and abandoned) from this shopper in the past year.</param>
        /// <param name="paymentAccountAge">Date this payment method was added to the shopper&#39;s account.</param>
        /// <param name="paymentAccountIndicator">Indicator for the length of time since this payment method was added to this shopper&#39;s account. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</param>
        /// <param name="purchasesLast6Months">Number of successful purchases in the last six months.</param>
        /// <param name="suspiciousActivity">Whether suspicious activity was recorded on this account.</param>
        /// <param name="workPhone">Shopper&#39;s work phone number (including the country code).</param>
        [JsonConstructor]
        public AccountInfo(Option<AccountAgeIndicatorEnum?> accountAgeIndicator = default, Option<DateTime?> accountChangeDate = default, Option<AccountChangeIndicatorEnum?> accountChangeIndicator = default, Option<DateTime?> accountCreationDate = default, Option<AccountTypeEnum?> accountType = default, Option<int?> addCardAttemptsDay = default, Option<DateTime?> deliveryAddressUsageDate = default, Option<DeliveryAddressUsageIndicatorEnum?> deliveryAddressUsageIndicator = default, Option<string> homePhone = default, Option<string> mobilePhone = default, Option<DateTime?> passwordChangeDate = default, Option<PasswordChangeIndicatorEnum?> passwordChangeIndicator = default, Option<int?> pastTransactionsDay = default, Option<int?> pastTransactionsYear = default, Option<DateTime?> paymentAccountAge = default, Option<PaymentAccountIndicatorEnum?> paymentAccountIndicator = default, Option<int?> purchasesLast6Months = default, Option<bool?> suspiciousActivity = default, Option<string> workPhone = default)
        {
            AccountAgeIndicatorOption = accountAgeIndicator;
            AccountChangeDateOption = accountChangeDate;
            AccountChangeIndicatorOption = accountChangeIndicator;
            AccountCreationDateOption = accountCreationDate;
            AccountTypeOption = accountType;
            AddCardAttemptsDayOption = addCardAttemptsDay;
            DeliveryAddressUsageDateOption = deliveryAddressUsageDate;
            DeliveryAddressUsageIndicatorOption = deliveryAddressUsageIndicator;
            HomePhoneOption = homePhone;
            MobilePhoneOption = mobilePhone;
            PasswordChangeDateOption = passwordChangeDate;
            PasswordChangeIndicatorOption = passwordChangeIndicator;
            PastTransactionsDayOption = pastTransactionsDay;
            PastTransactionsYearOption = pastTransactionsYear;
            PaymentAccountAgeOption = paymentAccountAge;
            PaymentAccountIndicatorOption = paymentAccountIndicator;
            PurchasesLast6MonthsOption = purchasesLast6Months;
            SuspiciousActivityOption = suspiciousActivity;
            WorkPhoneOption = workPhone;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Indicator for the length of time since this shopper account was created in the merchant&#39;s environment. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
        /// </summary>
        /// <value>Indicator for the length of time since this shopper account was created in the merchant&#39;s environment. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</value>
        public enum AccountAgeIndicatorEnum
        {
            /// <summary>
            /// Enum NotApplicable for value: notApplicable
            /// </summary>
            NotApplicable = 1,

            /// <summary>
            /// Enum ThisTransaction for value: thisTransaction
            /// </summary>
            ThisTransaction = 2,

            /// <summary>
            /// Enum LessThan30Days for value: lessThan30Days
            /// </summary>
            LessThan30Days = 3,

            /// <summary>
            /// Enum From30To60Days for value: from30To60Days
            /// </summary>
            From30To60Days = 4,

            /// <summary>
            /// Enum MoreThan60Days for value: moreThan60Days
            /// </summary>
            MoreThan60Days = 5
        }

        /// <summary>
        /// Returns a <see cref="AccountAgeIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AccountAgeIndicatorEnum AccountAgeIndicatorEnumFromString(string value)
        {
            if (value.Equals("notApplicable"))
                return AccountAgeIndicatorEnum.NotApplicable;

            if (value.Equals("thisTransaction"))
                return AccountAgeIndicatorEnum.ThisTransaction;

            if (value.Equals("lessThan30Days"))
                return AccountAgeIndicatorEnum.LessThan30Days;

            if (value.Equals("from30To60Days"))
                return AccountAgeIndicatorEnum.From30To60Days;

            if (value.Equals("moreThan60Days"))
                return AccountAgeIndicatorEnum.MoreThan60Days;

            throw new NotImplementedException($"Could not convert value to type AccountAgeIndicatorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AccountAgeIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountAgeIndicatorEnum? AccountAgeIndicatorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("notApplicable"))
                return AccountAgeIndicatorEnum.NotApplicable;

            if (value.Equals("thisTransaction"))
                return AccountAgeIndicatorEnum.ThisTransaction;

            if (value.Equals("lessThan30Days"))
                return AccountAgeIndicatorEnum.LessThan30Days;

            if (value.Equals("from30To60Days"))
                return AccountAgeIndicatorEnum.From30To60Days;

            if (value.Equals("moreThan60Days"))
                return AccountAgeIndicatorEnum.MoreThan60Days;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AccountAgeIndicatorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AccountAgeIndicatorEnumToJsonValue(AccountAgeIndicatorEnum? value)
        {
            if (value == AccountAgeIndicatorEnum.NotApplicable)
                return "notApplicable";

            if (value == AccountAgeIndicatorEnum.ThisTransaction)
                return "thisTransaction";

            if (value == AccountAgeIndicatorEnum.LessThan30Days)
                return "lessThan30Days";

            if (value == AccountAgeIndicatorEnum.From30To60Days)
                return "from30To60Days";

            if (value == AccountAgeIndicatorEnum.MoreThan60Days)
                return "moreThan60Days";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AccountAgeIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountAgeIndicatorEnum?> AccountAgeIndicatorOption { get; private set; }

        /// <summary>
        /// Indicator for the length of time since this shopper account was created in the merchant&#39;s environment. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
        /// </summary>
        /// <value>Indicator for the length of time since this shopper account was created in the merchant&#39;s environment. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</value>
        [JsonPropertyName("accountAgeIndicator")]
        public AccountAgeIndicatorEnum? AccountAgeIndicator { get { return this.AccountAgeIndicatorOption; } set { this.AccountAgeIndicatorOption = new Option<AccountAgeIndicatorEnum?>(value); } }

        /// <summary>
        /// Indicator for the length of time since the shopper&#39;s account was last updated. Allowed values: * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
        /// </summary>
        /// <value>Indicator for the length of time since the shopper&#39;s account was last updated. Allowed values: * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</value>
        public enum AccountChangeIndicatorEnum
        {
            /// <summary>
            /// Enum ThisTransaction for value: thisTransaction
            /// </summary>
            ThisTransaction = 1,

            /// <summary>
            /// Enum LessThan30Days for value: lessThan30Days
            /// </summary>
            LessThan30Days = 2,

            /// <summary>
            /// Enum From30To60Days for value: from30To60Days
            /// </summary>
            From30To60Days = 3,

            /// <summary>
            /// Enum MoreThan60Days for value: moreThan60Days
            /// </summary>
            MoreThan60Days = 4
        }

        /// <summary>
        /// Returns a <see cref="AccountChangeIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AccountChangeIndicatorEnum AccountChangeIndicatorEnumFromString(string value)
        {
            if (value.Equals("thisTransaction"))
                return AccountChangeIndicatorEnum.ThisTransaction;

            if (value.Equals("lessThan30Days"))
                return AccountChangeIndicatorEnum.LessThan30Days;

            if (value.Equals("from30To60Days"))
                return AccountChangeIndicatorEnum.From30To60Days;

            if (value.Equals("moreThan60Days"))
                return AccountChangeIndicatorEnum.MoreThan60Days;

            throw new NotImplementedException($"Could not convert value to type AccountChangeIndicatorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AccountChangeIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountChangeIndicatorEnum? AccountChangeIndicatorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("thisTransaction"))
                return AccountChangeIndicatorEnum.ThisTransaction;

            if (value.Equals("lessThan30Days"))
                return AccountChangeIndicatorEnum.LessThan30Days;

            if (value.Equals("from30To60Days"))
                return AccountChangeIndicatorEnum.From30To60Days;

            if (value.Equals("moreThan60Days"))
                return AccountChangeIndicatorEnum.MoreThan60Days;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AccountChangeIndicatorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AccountChangeIndicatorEnumToJsonValue(AccountChangeIndicatorEnum? value)
        {
            if (value == AccountChangeIndicatorEnum.ThisTransaction)
                return "thisTransaction";

            if (value == AccountChangeIndicatorEnum.LessThan30Days)
                return "lessThan30Days";

            if (value == AccountChangeIndicatorEnum.From30To60Days)
                return "from30To60Days";

            if (value == AccountChangeIndicatorEnum.MoreThan60Days)
                return "moreThan60Days";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AccountChangeIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountChangeIndicatorEnum?> AccountChangeIndicatorOption { get; private set; }

        /// <summary>
        /// Indicator for the length of time since the shopper&#39;s account was last updated. Allowed values: * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
        /// </summary>
        /// <value>Indicator for the length of time since the shopper&#39;s account was last updated. Allowed values: * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</value>
        [JsonPropertyName("accountChangeIndicator")]
        public AccountChangeIndicatorEnum? AccountChangeIndicator { get { return this.AccountChangeIndicatorOption; } set { this.AccountChangeIndicatorOption = new Option<AccountChangeIndicatorEnum?>(value); } }

        /// <summary>
        /// Indicates the type of account. For example, for a multi-account card product. Allowed values: * notApplicable * credit * debit
        /// </summary>
        /// <value>Indicates the type of account. For example, for a multi-account card product. Allowed values: * notApplicable * credit * debit</value>
        public enum AccountTypeEnum
        {
            /// <summary>
            /// Enum NotApplicable for value: notApplicable
            /// </summary>
            NotApplicable = 1,

            /// <summary>
            /// Enum Credit for value: credit
            /// </summary>
            Credit = 2,

            /// <summary>
            /// Enum Debit for value: debit
            /// </summary>
            Debit = 3
        }

        /// <summary>
        /// Returns a <see cref="AccountTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AccountTypeEnum AccountTypeEnumFromString(string value)
        {
            if (value.Equals("notApplicable"))
                return AccountTypeEnum.NotApplicable;

            if (value.Equals("credit"))
                return AccountTypeEnum.Credit;

            if (value.Equals("debit"))
                return AccountTypeEnum.Debit;

            throw new NotImplementedException($"Could not convert value to type AccountTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AccountTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountTypeEnum? AccountTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("notApplicable"))
                return AccountTypeEnum.NotApplicable;

            if (value.Equals("credit"))
                return AccountTypeEnum.Credit;

            if (value.Equals("debit"))
                return AccountTypeEnum.Debit;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AccountTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AccountTypeEnumToJsonValue(AccountTypeEnum? value)
        {
            if (value == AccountTypeEnum.NotApplicable)
                return "notApplicable";

            if (value == AccountTypeEnum.Credit)
                return "credit";

            if (value == AccountTypeEnum.Debit)
                return "debit";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AccountType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountTypeEnum?> AccountTypeOption { get; private set; }

        /// <summary>
        /// Indicates the type of account. For example, for a multi-account card product. Allowed values: * notApplicable * credit * debit
        /// </summary>
        /// <value>Indicates the type of account. For example, for a multi-account card product. Allowed values: * notApplicable * credit * debit</value>
        [JsonPropertyName("accountType")]
        public AccountTypeEnum? AccountType { get { return this.AccountTypeOption; } set { this.AccountTypeOption = new Option<AccountTypeEnum?>(value); } }

        /// <summary>
        /// Indicator for the length of time since this delivery address was first used. Allowed values: * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
        /// </summary>
        /// <value>Indicator for the length of time since this delivery address was first used. Allowed values: * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</value>
        public enum DeliveryAddressUsageIndicatorEnum
        {
            /// <summary>
            /// Enum ThisTransaction for value: thisTransaction
            /// </summary>
            ThisTransaction = 1,

            /// <summary>
            /// Enum LessThan30Days for value: lessThan30Days
            /// </summary>
            LessThan30Days = 2,

            /// <summary>
            /// Enum From30To60Days for value: from30To60Days
            /// </summary>
            From30To60Days = 3,

            /// <summary>
            /// Enum MoreThan60Days for value: moreThan60Days
            /// </summary>
            MoreThan60Days = 4
        }

        /// <summary>
        /// Returns a <see cref="DeliveryAddressUsageIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DeliveryAddressUsageIndicatorEnum DeliveryAddressUsageIndicatorEnumFromString(string value)
        {
            if (value.Equals("thisTransaction"))
                return DeliveryAddressUsageIndicatorEnum.ThisTransaction;

            if (value.Equals("lessThan30Days"))
                return DeliveryAddressUsageIndicatorEnum.LessThan30Days;

            if (value.Equals("from30To60Days"))
                return DeliveryAddressUsageIndicatorEnum.From30To60Days;

            if (value.Equals("moreThan60Days"))
                return DeliveryAddressUsageIndicatorEnum.MoreThan60Days;

            throw new NotImplementedException($"Could not convert value to type DeliveryAddressUsageIndicatorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DeliveryAddressUsageIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DeliveryAddressUsageIndicatorEnum? DeliveryAddressUsageIndicatorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("thisTransaction"))
                return DeliveryAddressUsageIndicatorEnum.ThisTransaction;

            if (value.Equals("lessThan30Days"))
                return DeliveryAddressUsageIndicatorEnum.LessThan30Days;

            if (value.Equals("from30To60Days"))
                return DeliveryAddressUsageIndicatorEnum.From30To60Days;

            if (value.Equals("moreThan60Days"))
                return DeliveryAddressUsageIndicatorEnum.MoreThan60Days;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DeliveryAddressUsageIndicatorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DeliveryAddressUsageIndicatorEnumToJsonValue(DeliveryAddressUsageIndicatorEnum? value)
        {
            if (value == DeliveryAddressUsageIndicatorEnum.ThisTransaction)
                return "thisTransaction";

            if (value == DeliveryAddressUsageIndicatorEnum.LessThan30Days)
                return "lessThan30Days";

            if (value == DeliveryAddressUsageIndicatorEnum.From30To60Days)
                return "from30To60Days";

            if (value == DeliveryAddressUsageIndicatorEnum.MoreThan60Days)
                return "moreThan60Days";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of DeliveryAddressUsageIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DeliveryAddressUsageIndicatorEnum?> DeliveryAddressUsageIndicatorOption { get; private set; }

        /// <summary>
        /// Indicator for the length of time since this delivery address was first used. Allowed values: * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
        /// </summary>
        /// <value>Indicator for the length of time since this delivery address was first used. Allowed values: * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</value>
        [JsonPropertyName("deliveryAddressUsageIndicator")]
        public DeliveryAddressUsageIndicatorEnum? DeliveryAddressUsageIndicator { get { return this.DeliveryAddressUsageIndicatorOption; } set { this.DeliveryAddressUsageIndicatorOption = new Option<DeliveryAddressUsageIndicatorEnum?>(value); } }

        /// <summary>
        /// Indicator when the shopper has changed their password. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
        /// </summary>
        /// <value>Indicator when the shopper has changed their password. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</value>
        public enum PasswordChangeIndicatorEnum
        {
            /// <summary>
            /// Enum NotApplicable for value: notApplicable
            /// </summary>
            NotApplicable = 1,

            /// <summary>
            /// Enum ThisTransaction for value: thisTransaction
            /// </summary>
            ThisTransaction = 2,

            /// <summary>
            /// Enum LessThan30Days for value: lessThan30Days
            /// </summary>
            LessThan30Days = 3,

            /// <summary>
            /// Enum From30To60Days for value: from30To60Days
            /// </summary>
            From30To60Days = 4,

            /// <summary>
            /// Enum MoreThan60Days for value: moreThan60Days
            /// </summary>
            MoreThan60Days = 5
        }

        /// <summary>
        /// Returns a <see cref="PasswordChangeIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PasswordChangeIndicatorEnum PasswordChangeIndicatorEnumFromString(string value)
        {
            if (value.Equals("notApplicable"))
                return PasswordChangeIndicatorEnum.NotApplicable;

            if (value.Equals("thisTransaction"))
                return PasswordChangeIndicatorEnum.ThisTransaction;

            if (value.Equals("lessThan30Days"))
                return PasswordChangeIndicatorEnum.LessThan30Days;

            if (value.Equals("from30To60Days"))
                return PasswordChangeIndicatorEnum.From30To60Days;

            if (value.Equals("moreThan60Days"))
                return PasswordChangeIndicatorEnum.MoreThan60Days;

            throw new NotImplementedException($"Could not convert value to type PasswordChangeIndicatorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PasswordChangeIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PasswordChangeIndicatorEnum? PasswordChangeIndicatorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("notApplicable"))
                return PasswordChangeIndicatorEnum.NotApplicable;

            if (value.Equals("thisTransaction"))
                return PasswordChangeIndicatorEnum.ThisTransaction;

            if (value.Equals("lessThan30Days"))
                return PasswordChangeIndicatorEnum.LessThan30Days;

            if (value.Equals("from30To60Days"))
                return PasswordChangeIndicatorEnum.From30To60Days;

            if (value.Equals("moreThan60Days"))
                return PasswordChangeIndicatorEnum.MoreThan60Days;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PasswordChangeIndicatorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PasswordChangeIndicatorEnumToJsonValue(PasswordChangeIndicatorEnum? value)
        {
            if (value == PasswordChangeIndicatorEnum.NotApplicable)
                return "notApplicable";

            if (value == PasswordChangeIndicatorEnum.ThisTransaction)
                return "thisTransaction";

            if (value == PasswordChangeIndicatorEnum.LessThan30Days)
                return "lessThan30Days";

            if (value == PasswordChangeIndicatorEnum.From30To60Days)
                return "from30To60Days";

            if (value == PasswordChangeIndicatorEnum.MoreThan60Days)
                return "moreThan60Days";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of PasswordChangeIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PasswordChangeIndicatorEnum?> PasswordChangeIndicatorOption { get; private set; }

        /// <summary>
        /// Indicator when the shopper has changed their password. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
        /// </summary>
        /// <value>Indicator when the shopper has changed their password. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</value>
        [JsonPropertyName("passwordChangeIndicator")]
        public PasswordChangeIndicatorEnum? PasswordChangeIndicator { get { return this.PasswordChangeIndicatorOption; } set { this.PasswordChangeIndicatorOption = new Option<PasswordChangeIndicatorEnum?>(value); } }

        /// <summary>
        /// Indicator for the length of time since this payment method was added to this shopper&#39;s account. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
        /// </summary>
        /// <value>Indicator for the length of time since this payment method was added to this shopper&#39;s account. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</value>
        public enum PaymentAccountIndicatorEnum
        {
            /// <summary>
            /// Enum NotApplicable for value: notApplicable
            /// </summary>
            NotApplicable = 1,

            /// <summary>
            /// Enum ThisTransaction for value: thisTransaction
            /// </summary>
            ThisTransaction = 2,

            /// <summary>
            /// Enum LessThan30Days for value: lessThan30Days
            /// </summary>
            LessThan30Days = 3,

            /// <summary>
            /// Enum From30To60Days for value: from30To60Days
            /// </summary>
            From30To60Days = 4,

            /// <summary>
            /// Enum MoreThan60Days for value: moreThan60Days
            /// </summary>
            MoreThan60Days = 5
        }

        /// <summary>
        /// Returns a <see cref="PaymentAccountIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PaymentAccountIndicatorEnum PaymentAccountIndicatorEnumFromString(string value)
        {
            if (value.Equals("notApplicable"))
                return PaymentAccountIndicatorEnum.NotApplicable;

            if (value.Equals("thisTransaction"))
                return PaymentAccountIndicatorEnum.ThisTransaction;

            if (value.Equals("lessThan30Days"))
                return PaymentAccountIndicatorEnum.LessThan30Days;

            if (value.Equals("from30To60Days"))
                return PaymentAccountIndicatorEnum.From30To60Days;

            if (value.Equals("moreThan60Days"))
                return PaymentAccountIndicatorEnum.MoreThan60Days;

            throw new NotImplementedException($"Could not convert value to type PaymentAccountIndicatorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PaymentAccountIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PaymentAccountIndicatorEnum? PaymentAccountIndicatorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("notApplicable"))
                return PaymentAccountIndicatorEnum.NotApplicable;

            if (value.Equals("thisTransaction"))
                return PaymentAccountIndicatorEnum.ThisTransaction;

            if (value.Equals("lessThan30Days"))
                return PaymentAccountIndicatorEnum.LessThan30Days;

            if (value.Equals("from30To60Days"))
                return PaymentAccountIndicatorEnum.From30To60Days;

            if (value.Equals("moreThan60Days"))
                return PaymentAccountIndicatorEnum.MoreThan60Days;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PaymentAccountIndicatorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PaymentAccountIndicatorEnumToJsonValue(PaymentAccountIndicatorEnum? value)
        {
            if (value == PaymentAccountIndicatorEnum.NotApplicable)
                return "notApplicable";

            if (value == PaymentAccountIndicatorEnum.ThisTransaction)
                return "thisTransaction";

            if (value == PaymentAccountIndicatorEnum.LessThan30Days)
                return "lessThan30Days";

            if (value == PaymentAccountIndicatorEnum.From30To60Days)
                return "from30To60Days";

            if (value == PaymentAccountIndicatorEnum.MoreThan60Days)
                return "moreThan60Days";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of PaymentAccountIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentAccountIndicatorEnum?> PaymentAccountIndicatorOption { get; private set; }

        /// <summary>
        /// Indicator for the length of time since this payment method was added to this shopper&#39;s account. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
        /// </summary>
        /// <value>Indicator for the length of time since this payment method was added to this shopper&#39;s account. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days</value>
        [JsonPropertyName("paymentAccountIndicator")]
        public PaymentAccountIndicatorEnum? PaymentAccountIndicator { get { return this.PaymentAccountIndicatorOption; } set { this.PaymentAccountIndicatorOption = new Option<PaymentAccountIndicatorEnum?>(value); } }

        /// <summary>
        /// Used to track the state of AccountChangeDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> AccountChangeDateOption { get; private set; }

        /// <summary>
        /// Date when the shopper&#39;s account was last changed.
        /// </summary>
        /// <value>Date when the shopper&#39;s account was last changed.</value>
        [JsonPropertyName("accountChangeDate")]
        public DateTime? AccountChangeDate { get { return this.AccountChangeDateOption; } set { this.AccountChangeDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of AccountCreationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> AccountCreationDateOption { get; private set; }

        /// <summary>
        /// Date when the shopper&#39;s account was created.
        /// </summary>
        /// <value>Date when the shopper&#39;s account was created.</value>
        [JsonPropertyName("accountCreationDate")]
        public DateTime? AccountCreationDate { get { return this.AccountCreationDateOption; } set { this.AccountCreationDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of AddCardAttemptsDay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AddCardAttemptsDayOption { get; private set; }

        /// <summary>
        /// Number of attempts the shopper tried to add a card to their account in the last day.
        /// </summary>
        /// <value>Number of attempts the shopper tried to add a card to their account in the last day.</value>
        [JsonPropertyName("addCardAttemptsDay")]
        public int? AddCardAttemptsDay { get { return this.AddCardAttemptsDayOption; } set { this.AddCardAttemptsDayOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddressUsageDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DeliveryAddressUsageDateOption { get; private set; }

        /// <summary>
        /// Date the selected delivery address was first used.
        /// </summary>
        /// <value>Date the selected delivery address was first used.</value>
        [JsonPropertyName("deliveryAddressUsageDate")]
        public DateTime? DeliveryAddressUsageDate { get { return this.DeliveryAddressUsageDateOption; } set { this.DeliveryAddressUsageDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of HomePhone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> HomePhoneOption { get; private set; }

        /// <summary>
        /// Shopper&#39;s home phone number (including the country code).
        /// </summary>
        /// <value>Shopper&#39;s home phone number (including the country code).</value>
        [JsonPropertyName("homePhone")]
        [Obsolete]
        public string HomePhone { get { return this.HomePhoneOption; } set { this.HomePhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MobilePhone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MobilePhoneOption { get; private set; }

        /// <summary>
        /// Shopper&#39;s mobile phone number (including the country code).
        /// </summary>
        /// <value>Shopper&#39;s mobile phone number (including the country code).</value>
        [JsonPropertyName("mobilePhone")]
        [Obsolete]
        public string MobilePhone { get { return this.MobilePhoneOption; } set { this.MobilePhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PasswordChangeDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> PasswordChangeDateOption { get; private set; }

        /// <summary>
        /// Date when the shopper last changed their password.
        /// </summary>
        /// <value>Date when the shopper last changed their password.</value>
        [JsonPropertyName("passwordChangeDate")]
        public DateTime? PasswordChangeDate { get { return this.PasswordChangeDateOption; } set { this.PasswordChangeDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of PastTransactionsDay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PastTransactionsDayOption { get; private set; }

        /// <summary>
        /// Number of all transactions (successful and abandoned) from this shopper in the past 24 hours.
        /// </summary>
        /// <value>Number of all transactions (successful and abandoned) from this shopper in the past 24 hours.</value>
        [JsonPropertyName("pastTransactionsDay")]
        public int? PastTransactionsDay { get { return this.PastTransactionsDayOption; } set { this.PastTransactionsDayOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of PastTransactionsYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PastTransactionsYearOption { get; private set; }

        /// <summary>
        /// Number of all transactions (successful and abandoned) from this shopper in the past year.
        /// </summary>
        /// <value>Number of all transactions (successful and abandoned) from this shopper in the past year.</value>
        [JsonPropertyName("pastTransactionsYear")]
        public int? PastTransactionsYear { get { return this.PastTransactionsYearOption; } set { this.PastTransactionsYearOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAccountAge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> PaymentAccountAgeOption { get; private set; }

        /// <summary>
        /// Date this payment method was added to the shopper&#39;s account.
        /// </summary>
        /// <value>Date this payment method was added to the shopper&#39;s account.</value>
        [JsonPropertyName("paymentAccountAge")]
        public DateTime? PaymentAccountAge { get { return this.PaymentAccountAgeOption; } set { this.PaymentAccountAgeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of PurchasesLast6Months
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PurchasesLast6MonthsOption { get; private set; }

        /// <summary>
        /// Number of successful purchases in the last six months.
        /// </summary>
        /// <value>Number of successful purchases in the last six months.</value>
        [JsonPropertyName("purchasesLast6Months")]
        public int? PurchasesLast6Months { get { return this.PurchasesLast6MonthsOption; } set { this.PurchasesLast6MonthsOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of SuspiciousActivity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SuspiciousActivityOption { get; private set; }

        /// <summary>
        /// Whether suspicious activity was recorded on this account.
        /// </summary>
        /// <value>Whether suspicious activity was recorded on this account.</value>
        [JsonPropertyName("suspiciousActivity")]
        public bool? SuspiciousActivity { get { return this.SuspiciousActivityOption; } set { this.SuspiciousActivityOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of WorkPhone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> WorkPhoneOption { get; private set; }

        /// <summary>
        /// Shopper&#39;s work phone number (including the country code).
        /// </summary>
        /// <value>Shopper&#39;s work phone number (including the country code).</value>
        [JsonPropertyName("workPhone")]
        [Obsolete]
        public string WorkPhone { get { return this.WorkPhoneOption; } set { this.WorkPhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountInfo {\n");
            sb.Append("  AccountAgeIndicator: ").Append(AccountAgeIndicator).Append("\n");
            sb.Append("  AccountChangeDate: ").Append(AccountChangeDate).Append("\n");
            sb.Append("  AccountChangeIndicator: ").Append(AccountChangeIndicator).Append("\n");
            sb.Append("  AccountCreationDate: ").Append(AccountCreationDate).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AddCardAttemptsDay: ").Append(AddCardAttemptsDay).Append("\n");
            sb.Append("  DeliveryAddressUsageDate: ").Append(DeliveryAddressUsageDate).Append("\n");
            sb.Append("  DeliveryAddressUsageIndicator: ").Append(DeliveryAddressUsageIndicator).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  PasswordChangeDate: ").Append(PasswordChangeDate).Append("\n");
            sb.Append("  PasswordChangeIndicator: ").Append(PasswordChangeIndicator).Append("\n");
            sb.Append("  PastTransactionsDay: ").Append(PastTransactionsDay).Append("\n");
            sb.Append("  PastTransactionsYear: ").Append(PastTransactionsYear).Append("\n");
            sb.Append("  PaymentAccountAge: ").Append(PaymentAccountAge).Append("\n");
            sb.Append("  PaymentAccountIndicator: ").Append(PaymentAccountIndicator).Append("\n");
            sb.Append("  PurchasesLast6Months: ").Append(PurchasesLast6Months).Append("\n");
            sb.Append("  SuspiciousActivity: ").Append(SuspiciousActivity).Append("\n");
            sb.Append("  WorkPhone: ").Append(WorkPhone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountInfo" />
    /// </summary>
    public class AccountInfoJsonConverter : JsonConverter<AccountInfo>
    {
        /// <summary>
        /// The format to use to serialize AccountChangeDate
        /// </summary>
        public static string AccountChangeDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize AccountCreationDate
        /// </summary>
        public static string AccountCreationDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeliveryAddressUsageDate
        /// </summary>
        public static string DeliveryAddressUsageDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PasswordChangeDate
        /// </summary>
        public static string PasswordChangeDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PaymentAccountAge
        /// </summary>
        public static string PaymentAccountAgeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AccountInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AccountInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AccountInfo.AccountAgeIndicatorEnum?> accountAgeIndicator = default;
            Option<DateTime?> accountChangeDate = default;
            Option<AccountInfo.AccountChangeIndicatorEnum?> accountChangeIndicator = default;
            Option<DateTime?> accountCreationDate = default;
            Option<AccountInfo.AccountTypeEnum?> accountType = default;
            Option<int?> addCardAttemptsDay = default;
            Option<DateTime?> deliveryAddressUsageDate = default;
            Option<AccountInfo.DeliveryAddressUsageIndicatorEnum?> deliveryAddressUsageIndicator = default;
            Option<string> homePhone = default;
            Option<string> mobilePhone = default;
            Option<DateTime?> passwordChangeDate = default;
            Option<AccountInfo.PasswordChangeIndicatorEnum?> passwordChangeIndicator = default;
            Option<int?> pastTransactionsDay = default;
            Option<int?> pastTransactionsYear = default;
            Option<DateTime?> paymentAccountAge = default;
            Option<AccountInfo.PaymentAccountIndicatorEnum?> paymentAccountIndicator = default;
            Option<int?> purchasesLast6Months = default;
            Option<bool?> suspiciousActivity = default;
            Option<string> workPhone = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountAgeIndicator":
                            string accountAgeIndicatorRawValue = utf8JsonReader.GetString();
                            if (accountAgeIndicatorRawValue != null)
                                accountAgeIndicator = new Option<AccountInfo.AccountAgeIndicatorEnum?>(AccountInfo.AccountAgeIndicatorEnumFromStringOrDefault(accountAgeIndicatorRawValue));
                            break;
                        case "accountChangeDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountChangeDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "accountChangeIndicator":
                            string accountChangeIndicatorRawValue = utf8JsonReader.GetString();
                            if (accountChangeIndicatorRawValue != null)
                                accountChangeIndicator = new Option<AccountInfo.AccountChangeIndicatorEnum?>(AccountInfo.AccountChangeIndicatorEnumFromStringOrDefault(accountChangeIndicatorRawValue));
                            break;
                        case "accountCreationDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountCreationDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "accountType":
                            string accountTypeRawValue = utf8JsonReader.GetString();
                            if (accountTypeRawValue != null)
                                accountType = new Option<AccountInfo.AccountTypeEnum?>(AccountInfo.AccountTypeEnumFromStringOrDefault(accountTypeRawValue));
                            break;
                        case "addCardAttemptsDay":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                addCardAttemptsDay = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "deliveryAddressUsageDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryAddressUsageDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryAddressUsageIndicator":
                            string deliveryAddressUsageIndicatorRawValue = utf8JsonReader.GetString();
                            if (deliveryAddressUsageIndicatorRawValue != null)
                                deliveryAddressUsageIndicator = new Option<AccountInfo.DeliveryAddressUsageIndicatorEnum?>(AccountInfo.DeliveryAddressUsageIndicatorEnumFromStringOrDefault(deliveryAddressUsageIndicatorRawValue));
                            break;
                        case "homePhone":
                            homePhone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mobilePhone":
                            mobilePhone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "passwordChangeDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passwordChangeDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "passwordChangeIndicator":
                            string passwordChangeIndicatorRawValue = utf8JsonReader.GetString();
                            if (passwordChangeIndicatorRawValue != null)
                                passwordChangeIndicator = new Option<AccountInfo.PasswordChangeIndicatorEnum?>(AccountInfo.PasswordChangeIndicatorEnumFromStringOrDefault(passwordChangeIndicatorRawValue));
                            break;
                        case "pastTransactionsDay":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pastTransactionsDay = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "pastTransactionsYear":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pastTransactionsYear = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "paymentAccountAge":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentAccountAge = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "paymentAccountIndicator":
                            string paymentAccountIndicatorRawValue = utf8JsonReader.GetString();
                            if (paymentAccountIndicatorRawValue != null)
                                paymentAccountIndicator = new Option<AccountInfo.PaymentAccountIndicatorEnum?>(AccountInfo.PaymentAccountIndicatorEnumFromStringOrDefault(paymentAccountIndicatorRawValue));
                            break;
                        case "purchasesLast6Months":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                purchasesLast6Months = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "suspiciousActivity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                suspiciousActivity = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "workPhone":
                            workPhone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accountAgeIndicator.IsSet && accountAgeIndicator.Value == null)
                throw new ArgumentNullException(nameof(accountAgeIndicator), "Property is not nullable for class AccountInfo.");

            if (accountChangeDate.IsSet && accountChangeDate.Value == null)
                throw new ArgumentNullException(nameof(accountChangeDate), "Property is not nullable for class AccountInfo.");

            if (accountChangeIndicator.IsSet && accountChangeIndicator.Value == null)
                throw new ArgumentNullException(nameof(accountChangeIndicator), "Property is not nullable for class AccountInfo.");

            if (accountCreationDate.IsSet && accountCreationDate.Value == null)
                throw new ArgumentNullException(nameof(accountCreationDate), "Property is not nullable for class AccountInfo.");

            if (accountType.IsSet && accountType.Value == null)
                throw new ArgumentNullException(nameof(accountType), "Property is not nullable for class AccountInfo.");

            if (addCardAttemptsDay.IsSet && addCardAttemptsDay.Value == null)
                throw new ArgumentNullException(nameof(addCardAttemptsDay), "Property is not nullable for class AccountInfo.");

            if (deliveryAddressUsageDate.IsSet && deliveryAddressUsageDate.Value == null)
                throw new ArgumentNullException(nameof(deliveryAddressUsageDate), "Property is not nullable for class AccountInfo.");

            if (deliveryAddressUsageIndicator.IsSet && deliveryAddressUsageIndicator.Value == null)
                throw new ArgumentNullException(nameof(deliveryAddressUsageIndicator), "Property is not nullable for class AccountInfo.");

            if (homePhone.IsSet && homePhone.Value == null)
                throw new ArgumentNullException(nameof(homePhone), "Property is not nullable for class AccountInfo.");

            if (mobilePhone.IsSet && mobilePhone.Value == null)
                throw new ArgumentNullException(nameof(mobilePhone), "Property is not nullable for class AccountInfo.");

            if (passwordChangeDate.IsSet && passwordChangeDate.Value == null)
                throw new ArgumentNullException(nameof(passwordChangeDate), "Property is not nullable for class AccountInfo.");

            if (passwordChangeIndicator.IsSet && passwordChangeIndicator.Value == null)
                throw new ArgumentNullException(nameof(passwordChangeIndicator), "Property is not nullable for class AccountInfo.");

            if (pastTransactionsDay.IsSet && pastTransactionsDay.Value == null)
                throw new ArgumentNullException(nameof(pastTransactionsDay), "Property is not nullable for class AccountInfo.");

            if (pastTransactionsYear.IsSet && pastTransactionsYear.Value == null)
                throw new ArgumentNullException(nameof(pastTransactionsYear), "Property is not nullable for class AccountInfo.");

            if (paymentAccountAge.IsSet && paymentAccountAge.Value == null)
                throw new ArgumentNullException(nameof(paymentAccountAge), "Property is not nullable for class AccountInfo.");

            if (paymentAccountIndicator.IsSet && paymentAccountIndicator.Value == null)
                throw new ArgumentNullException(nameof(paymentAccountIndicator), "Property is not nullable for class AccountInfo.");

            if (purchasesLast6Months.IsSet && purchasesLast6Months.Value == null)
                throw new ArgumentNullException(nameof(purchasesLast6Months), "Property is not nullable for class AccountInfo.");

            if (suspiciousActivity.IsSet && suspiciousActivity.Value == null)
                throw new ArgumentNullException(nameof(suspiciousActivity), "Property is not nullable for class AccountInfo.");

            if (workPhone.IsSet && workPhone.Value == null)
                throw new ArgumentNullException(nameof(workPhone), "Property is not nullable for class AccountInfo.");

            return new AccountInfo(accountAgeIndicator, accountChangeDate, accountChangeIndicator, accountCreationDate, accountType, addCardAttemptsDay, deliveryAddressUsageDate, deliveryAddressUsageIndicator, homePhone, mobilePhone, passwordChangeDate, passwordChangeIndicator, pastTransactionsDay, pastTransactionsYear, paymentAccountAge, paymentAccountIndicator, purchasesLast6Months, suspiciousActivity, workPhone);
        }

        /// <summary>
        /// Serializes a <see cref="AccountInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AccountInfo accountInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, accountInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AccountInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AccountInfo accountInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (accountInfo.HomePhoneOption.IsSet && accountInfo.HomePhone == null)
                throw new ArgumentNullException(nameof(accountInfo.HomePhone), "Property is required for class AccountInfo.");

            if (accountInfo.MobilePhoneOption.IsSet && accountInfo.MobilePhone == null)
                throw new ArgumentNullException(nameof(accountInfo.MobilePhone), "Property is required for class AccountInfo.");

            if (accountInfo.WorkPhoneOption.IsSet && accountInfo.WorkPhone == null)
                throw new ArgumentNullException(nameof(accountInfo.WorkPhone), "Property is required for class AccountInfo.");

            var accountAgeIndicatorRawValue = AccountInfo.AccountAgeIndicatorEnumToJsonValue(accountInfo.AccountAgeIndicatorOption.Value.Value);
            writer.WriteString("accountAgeIndicator", accountAgeIndicatorRawValue);
            if (accountInfo.AccountChangeDateOption.IsSet)
                writer.WriteString("accountChangeDate", accountInfo.AccountChangeDateOption.Value.Value.ToString(AccountChangeDateFormat));

            var accountChangeIndicatorRawValue = AccountInfo.AccountChangeIndicatorEnumToJsonValue(accountInfo.AccountChangeIndicatorOption.Value.Value);
            writer.WriteString("accountChangeIndicator", accountChangeIndicatorRawValue);
            if (accountInfo.AccountCreationDateOption.IsSet)
                writer.WriteString("accountCreationDate", accountInfo.AccountCreationDateOption.Value.Value.ToString(AccountCreationDateFormat));

            var accountTypeRawValue = AccountInfo.AccountTypeEnumToJsonValue(accountInfo.AccountTypeOption.Value.Value);
            writer.WriteString("accountType", accountTypeRawValue);
            if (accountInfo.AddCardAttemptsDayOption.IsSet)
                writer.WriteNumber("addCardAttemptsDay", accountInfo.AddCardAttemptsDayOption.Value.Value);

            if (accountInfo.DeliveryAddressUsageDateOption.IsSet)
                writer.WriteString("deliveryAddressUsageDate", accountInfo.DeliveryAddressUsageDateOption.Value.Value.ToString(DeliveryAddressUsageDateFormat));

            var deliveryAddressUsageIndicatorRawValue = AccountInfo.DeliveryAddressUsageIndicatorEnumToJsonValue(accountInfo.DeliveryAddressUsageIndicatorOption.Value.Value);
            writer.WriteString("deliveryAddressUsageIndicator", deliveryAddressUsageIndicatorRawValue);
            if (accountInfo.HomePhoneOption.IsSet)
                writer.WriteString("homePhone", accountInfo.HomePhone);

            if (accountInfo.MobilePhoneOption.IsSet)
                writer.WriteString("mobilePhone", accountInfo.MobilePhone);

            if (accountInfo.PasswordChangeDateOption.IsSet)
                writer.WriteString("passwordChangeDate", accountInfo.PasswordChangeDateOption.Value.Value.ToString(PasswordChangeDateFormat));

            var passwordChangeIndicatorRawValue = AccountInfo.PasswordChangeIndicatorEnumToJsonValue(accountInfo.PasswordChangeIndicatorOption.Value.Value);
            writer.WriteString("passwordChangeIndicator", passwordChangeIndicatorRawValue);
            if (accountInfo.PastTransactionsDayOption.IsSet)
                writer.WriteNumber("pastTransactionsDay", accountInfo.PastTransactionsDayOption.Value.Value);

            if (accountInfo.PastTransactionsYearOption.IsSet)
                writer.WriteNumber("pastTransactionsYear", accountInfo.PastTransactionsYearOption.Value.Value);

            if (accountInfo.PaymentAccountAgeOption.IsSet)
                writer.WriteString("paymentAccountAge", accountInfo.PaymentAccountAgeOption.Value.Value.ToString(PaymentAccountAgeFormat));

            var paymentAccountIndicatorRawValue = AccountInfo.PaymentAccountIndicatorEnumToJsonValue(accountInfo.PaymentAccountIndicatorOption.Value.Value);
            writer.WriteString("paymentAccountIndicator", paymentAccountIndicatorRawValue);
            if (accountInfo.PurchasesLast6MonthsOption.IsSet)
                writer.WriteNumber("purchasesLast6Months", accountInfo.PurchasesLast6MonthsOption.Value.Value);

            if (accountInfo.SuspiciousActivityOption.IsSet)
                writer.WriteBoolean("suspiciousActivity", accountInfo.SuspiciousActivityOption.Value.Value);

            if (accountInfo.WorkPhoneOption.IsSet)
                writer.WriteString("workPhone", accountInfo.WorkPhone);
        }
    }
}
