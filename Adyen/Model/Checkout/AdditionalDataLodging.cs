// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataLodging
    /// </summary>
    public partial class AdditionalDataLodging : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataLodging" /> class.
        /// </summary>
        /// <param name="lodgingSpecialProgramCode">A code that corresponds to the category of lodging charges for the payment. Possible values: * 1: Lodging * 2: No show reservation * 3: Advanced deposit</param>
        /// <param name="lodgingCheckInDate">The arrival date. * Date format: **yyyyMmDd**. For example, for 2023 April 22, **20230422**.</param>
        /// <param name="lodgingCheckOutDate">The departure date. * Date format: **yyyyMmDd**. For example, for 2023 April 22, **20230422**.</param>
        /// <param name="lodgingCustomerServiceTollFreeNumber">The toll-free phone number for the lodging. * Format: numeric * Max length: 17 characters. * For US and CA numbers must be 10 characters in length * Must not start with a space * Must not contain any special characters such as + or - * Must not be all zeros.</param>
        /// <param name="lodgingFireSafetyActIndicator">Identifies that the facility complies with the Hotel and Motel Fire Safety Act of 1990. Must be &#39;Y&#39; or &#39;N&#39;. * Format: alphabetic * Max length: 1 character</param>
        /// <param name="lodgingFolioCashAdvances">The folio cash advances, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters</param>
        /// <param name="lodgingFolioNumber">The card acceptorâ€™s internal invoice or billing ID reference number. * Max length: 25 characters * Must not start with a space * Must not contain any special characters * Must not be all zeros.</param>
        /// <param name="lodgingFoodBeverageCharges">Any charges for food and beverages associated with the booking, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters</param>
        /// <param name="lodgingNoShowIndicator">Indicates if the customer didn&#39;t check in for their booking.  Possible values:  * **Y**: the customer didn&#39;t check in  * **N**: the customer checked in</param>
        /// <param name="lodgingPrepaidExpenses">The prepaid expenses for the booking. * Format: numeric * Max length: 12 characters</param>
        /// <param name="lodgingPropertyPhoneNumber">The lodging property location&#39;s phone number. * Format: numeric * Min length: 10 characters * Max length: 17 characters * For US and CA numbers must be 10 characters in length * Must not start with a space * Must not contain any special characters such as + or - * Must not be all zeros.</param>
        /// <param name="lodgingRoom1NumberOfNights">The total number of nights the room is booked for. * Format: numeric * Must be a number between 0 and 99 * Max length: 4 characters</param>
        /// <param name="lodgingRoom1Rate">The rate for the room, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters * Must not be a negative number</param>
        /// <param name="lodgingTotalRoomTax">The total room tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters * Must not be a negative number</param>
        /// <param name="lodgingTotalTax">The total tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters * Must not be a negative number</param>
        /// <param name="travelEntertainmentAuthDataDuration">The number of nights. This should be included in the auth message. * Format: numeric * Max length: 4 characters</param>
        /// <param name="travelEntertainmentAuthDataMarket">Indicates what market-specific dataset will be submitted. Must be &#39;H&#39; for Hotel. This should be included in the auth message.  * Format: alphanumeric * Max length: 1 character</param>
        [JsonConstructor]
        public AdditionalDataLodging(Option<string> lodgingSpecialProgramCode = default, Option<string> lodgingCheckInDate = default, Option<string> lodgingCheckOutDate = default, Option<string> lodgingCustomerServiceTollFreeNumber = default, Option<string> lodgingFireSafetyActIndicator = default, Option<string> lodgingFolioCashAdvances = default, Option<string> lodgingFolioNumber = default, Option<string> lodgingFoodBeverageCharges = default, Option<string> lodgingNoShowIndicator = default, Option<string> lodgingPrepaidExpenses = default, Option<string> lodgingPropertyPhoneNumber = default, Option<string> lodgingRoom1NumberOfNights = default, Option<string> lodgingRoom1Rate = default, Option<string> lodgingTotalRoomTax = default, Option<string> lodgingTotalTax = default, Option<string> travelEntertainmentAuthDataDuration = default, Option<string> travelEntertainmentAuthDataMarket = default)
        {
            LodgingSpecialProgramCodeOption = lodgingSpecialProgramCode;
            LodgingCheckInDateOption = lodgingCheckInDate;
            LodgingCheckOutDateOption = lodgingCheckOutDate;
            LodgingCustomerServiceTollFreeNumberOption = lodgingCustomerServiceTollFreeNumber;
            LodgingFireSafetyActIndicatorOption = lodgingFireSafetyActIndicator;
            LodgingFolioCashAdvancesOption = lodgingFolioCashAdvances;
            LodgingFolioNumberOption = lodgingFolioNumber;
            LodgingFoodBeverageChargesOption = lodgingFoodBeverageCharges;
            LodgingNoShowIndicatorOption = lodgingNoShowIndicator;
            LodgingPrepaidExpensesOption = lodgingPrepaidExpenses;
            LodgingPropertyPhoneNumberOption = lodgingPropertyPhoneNumber;
            LodgingRoom1NumberOfNightsOption = lodgingRoom1NumberOfNights;
            LodgingRoom1RateOption = lodgingRoom1Rate;
            LodgingTotalRoomTaxOption = lodgingTotalRoomTax;
            LodgingTotalTaxOption = lodgingTotalTax;
            TravelEntertainmentAuthDataDurationOption = travelEntertainmentAuthDataDuration;
            TravelEntertainmentAuthDataMarketOption = travelEntertainmentAuthDataMarket;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of LodgingSpecialProgramCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingSpecialProgramCodeOption { get; private set; }

        /// <summary>
        /// A code that corresponds to the category of lodging charges for the payment. Possible values: * 1: Lodging * 2: No show reservation * 3: Advanced deposit
        /// </summary>
        /// <value>A code that corresponds to the category of lodging charges for the payment. Possible values: * 1: Lodging * 2: No show reservation * 3: Advanced deposit</value>
        [JsonPropertyName("lodging.SpecialProgramCode")]
        public string LodgingSpecialProgramCode { get { return this.LodgingSpecialProgramCodeOption; } set { this.LodgingSpecialProgramCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingCheckInDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingCheckInDateOption { get; private set; }

        /// <summary>
        /// The arrival date. * Date format: **yyyyMmDd**. For example, for 2023 April 22, **20230422**.
        /// </summary>
        /// <value>The arrival date. * Date format: **yyyyMmDd**. For example, for 2023 April 22, **20230422**.</value>
        [JsonPropertyName("lodging.checkInDate")]
        public string LodgingCheckInDate { get { return this.LodgingCheckInDateOption; } set { this.LodgingCheckInDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingCheckOutDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingCheckOutDateOption { get; private set; }

        /// <summary>
        /// The departure date. * Date format: **yyyyMmDd**. For example, for 2023 April 22, **20230422**.
        /// </summary>
        /// <value>The departure date. * Date format: **yyyyMmDd**. For example, for 2023 April 22, **20230422**.</value>
        [JsonPropertyName("lodging.checkOutDate")]
        public string LodgingCheckOutDate { get { return this.LodgingCheckOutDateOption; } set { this.LodgingCheckOutDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingCustomerServiceTollFreeNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingCustomerServiceTollFreeNumberOption { get; private set; }

        /// <summary>
        /// The toll-free phone number for the lodging. * Format: numeric * Max length: 17 characters. * For US and CA numbers must be 10 characters in length * Must not start with a space * Must not contain any special characters such as + or - * Must not be all zeros.
        /// </summary>
        /// <value>The toll-free phone number for the lodging. * Format: numeric * Max length: 17 characters. * For US and CA numbers must be 10 characters in length * Must not start with a space * Must not contain any special characters such as + or - * Must not be all zeros.</value>
        [JsonPropertyName("lodging.customerServiceTollFreeNumber")]
        public string LodgingCustomerServiceTollFreeNumber { get { return this.LodgingCustomerServiceTollFreeNumberOption; } set { this.LodgingCustomerServiceTollFreeNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingFireSafetyActIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingFireSafetyActIndicatorOption { get; private set; }

        /// <summary>
        /// Identifies that the facility complies with the Hotel and Motel Fire Safety Act of 1990. Must be &#39;Y&#39; or &#39;N&#39;. * Format: alphabetic * Max length: 1 character
        /// </summary>
        /// <value>Identifies that the facility complies with the Hotel and Motel Fire Safety Act of 1990. Must be &#39;Y&#39; or &#39;N&#39;. * Format: alphabetic * Max length: 1 character</value>
        [JsonPropertyName("lodging.fireSafetyActIndicator")]
        public string LodgingFireSafetyActIndicator { get { return this.LodgingFireSafetyActIndicatorOption; } set { this.LodgingFireSafetyActIndicatorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingFolioCashAdvances
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingFolioCashAdvancesOption { get; private set; }

        /// <summary>
        /// The folio cash advances, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters
        /// </summary>
        /// <value>The folio cash advances, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters</value>
        [JsonPropertyName("lodging.folioCashAdvances")]
        public string LodgingFolioCashAdvances { get { return this.LodgingFolioCashAdvancesOption; } set { this.LodgingFolioCashAdvancesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingFolioNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingFolioNumberOption { get; private set; }

        /// <summary>
        /// The card acceptorâ€™s internal invoice or billing ID reference number. * Max length: 25 characters * Must not start with a space * Must not contain any special characters * Must not be all zeros.
        /// </summary>
        /// <value>The card acceptorâ€™s internal invoice or billing ID reference number. * Max length: 25 characters * Must not start with a space * Must not contain any special characters * Must not be all zeros.</value>
        [JsonPropertyName("lodging.folioNumber")]
        public string LodgingFolioNumber { get { return this.LodgingFolioNumberOption; } set { this.LodgingFolioNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingFoodBeverageCharges
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingFoodBeverageChargesOption { get; private set; }

        /// <summary>
        /// Any charges for food and beverages associated with the booking, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters
        /// </summary>
        /// <value>Any charges for food and beverages associated with the booking, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters</value>
        [JsonPropertyName("lodging.foodBeverageCharges")]
        public string LodgingFoodBeverageCharges { get { return this.LodgingFoodBeverageChargesOption; } set { this.LodgingFoodBeverageChargesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingNoShowIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingNoShowIndicatorOption { get; private set; }

        /// <summary>
        /// Indicates if the customer didn&#39;t check in for their booking.  Possible values:  * **Y**: the customer didn&#39;t check in  * **N**: the customer checked in
        /// </summary>
        /// <value>Indicates if the customer didn&#39;t check in for their booking.  Possible values:  * **Y**: the customer didn&#39;t check in  * **N**: the customer checked in</value>
        [JsonPropertyName("lodging.noShowIndicator")]
        public string LodgingNoShowIndicator { get { return this.LodgingNoShowIndicatorOption; } set { this.LodgingNoShowIndicatorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingPrepaidExpenses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingPrepaidExpensesOption { get; private set; }

        /// <summary>
        /// The prepaid expenses for the booking. * Format: numeric * Max length: 12 characters
        /// </summary>
        /// <value>The prepaid expenses for the booking. * Format: numeric * Max length: 12 characters</value>
        [JsonPropertyName("lodging.prepaidExpenses")]
        public string LodgingPrepaidExpenses { get { return this.LodgingPrepaidExpensesOption; } set { this.LodgingPrepaidExpensesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingPropertyPhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingPropertyPhoneNumberOption { get; private set; }

        /// <summary>
        /// The lodging property location&#39;s phone number. * Format: numeric * Min length: 10 characters * Max length: 17 characters * For US and CA numbers must be 10 characters in length * Must not start with a space * Must not contain any special characters such as + or - * Must not be all zeros.
        /// </summary>
        /// <value>The lodging property location&#39;s phone number. * Format: numeric * Min length: 10 characters * Max length: 17 characters * For US and CA numbers must be 10 characters in length * Must not start with a space * Must not contain any special characters such as + or - * Must not be all zeros.</value>
        [JsonPropertyName("lodging.propertyPhoneNumber")]
        public string LodgingPropertyPhoneNumber { get { return this.LodgingPropertyPhoneNumberOption; } set { this.LodgingPropertyPhoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingRoom1NumberOfNights
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingRoom1NumberOfNightsOption { get; private set; }

        /// <summary>
        /// The total number of nights the room is booked for. * Format: numeric * Must be a number between 0 and 99 * Max length: 4 characters
        /// </summary>
        /// <value>The total number of nights the room is booked for. * Format: numeric * Must be a number between 0 and 99 * Max length: 4 characters</value>
        [JsonPropertyName("lodging.room1.numberOfNights")]
        public string LodgingRoom1NumberOfNights { get { return this.LodgingRoom1NumberOfNightsOption; } set { this.LodgingRoom1NumberOfNightsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingRoom1Rate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingRoom1RateOption { get; private set; }

        /// <summary>
        /// The rate for the room, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters * Must not be a negative number
        /// </summary>
        /// <value>The rate for the room, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters * Must not be a negative number</value>
        [JsonPropertyName("lodging.room1.rate")]
        public string LodgingRoom1Rate { get { return this.LodgingRoom1RateOption; } set { this.LodgingRoom1RateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingTotalRoomTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingTotalRoomTaxOption { get; private set; }

        /// <summary>
        /// The total room tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters * Must not be a negative number
        /// </summary>
        /// <value>The total room tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters * Must not be a negative number</value>
        [JsonPropertyName("lodging.totalRoomTax")]
        public string LodgingTotalRoomTax { get { return this.LodgingTotalRoomTaxOption; } set { this.LodgingTotalRoomTaxOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LodgingTotalTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LodgingTotalTaxOption { get; private set; }

        /// <summary>
        /// The total tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters * Must not be a negative number
        /// </summary>
        /// <value>The total tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: numeric * Max length: 12 characters * Must not be a negative number</value>
        [JsonPropertyName("lodging.totalTax")]
        public string LodgingTotalTax { get { return this.LodgingTotalTaxOption; } set { this.LodgingTotalTaxOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TravelEntertainmentAuthDataDuration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TravelEntertainmentAuthDataDurationOption { get; private set; }

        /// <summary>
        /// The number of nights. This should be included in the auth message. * Format: numeric * Max length: 4 characters
        /// </summary>
        /// <value>The number of nights. This should be included in the auth message. * Format: numeric * Max length: 4 characters</value>
        [JsonPropertyName("travelEntertainmentAuthData.duration")]
        public string TravelEntertainmentAuthDataDuration { get { return this.TravelEntertainmentAuthDataDurationOption; } set { this.TravelEntertainmentAuthDataDurationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TravelEntertainmentAuthDataMarket
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TravelEntertainmentAuthDataMarketOption { get; private set; }

        /// <summary>
        /// Indicates what market-specific dataset will be submitted. Must be &#39;H&#39; for Hotel. This should be included in the auth message.  * Format: alphanumeric * Max length: 1 character
        /// </summary>
        /// <value>Indicates what market-specific dataset will be submitted. Must be &#39;H&#39; for Hotel. This should be included in the auth message.  * Format: alphanumeric * Max length: 1 character</value>
        [JsonPropertyName("travelEntertainmentAuthData.market")]
        public string TravelEntertainmentAuthDataMarket { get { return this.TravelEntertainmentAuthDataMarketOption; } set { this.TravelEntertainmentAuthDataMarketOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataLodging {\n");
            sb.Append("  LodgingSpecialProgramCode: ").Append(LodgingSpecialProgramCode).Append("\n");
            sb.Append("  LodgingCheckInDate: ").Append(LodgingCheckInDate).Append("\n");
            sb.Append("  LodgingCheckOutDate: ").Append(LodgingCheckOutDate).Append("\n");
            sb.Append("  LodgingCustomerServiceTollFreeNumber: ").Append(LodgingCustomerServiceTollFreeNumber).Append("\n");
            sb.Append("  LodgingFireSafetyActIndicator: ").Append(LodgingFireSafetyActIndicator).Append("\n");
            sb.Append("  LodgingFolioCashAdvances: ").Append(LodgingFolioCashAdvances).Append("\n");
            sb.Append("  LodgingFolioNumber: ").Append(LodgingFolioNumber).Append("\n");
            sb.Append("  LodgingFoodBeverageCharges: ").Append(LodgingFoodBeverageCharges).Append("\n");
            sb.Append("  LodgingNoShowIndicator: ").Append(LodgingNoShowIndicator).Append("\n");
            sb.Append("  LodgingPrepaidExpenses: ").Append(LodgingPrepaidExpenses).Append("\n");
            sb.Append("  LodgingPropertyPhoneNumber: ").Append(LodgingPropertyPhoneNumber).Append("\n");
            sb.Append("  LodgingRoom1NumberOfNights: ").Append(LodgingRoom1NumberOfNights).Append("\n");
            sb.Append("  LodgingRoom1Rate: ").Append(LodgingRoom1Rate).Append("\n");
            sb.Append("  LodgingTotalRoomTax: ").Append(LodgingTotalRoomTax).Append("\n");
            sb.Append("  LodgingTotalTax: ").Append(LodgingTotalTax).Append("\n");
            sb.Append("  TravelEntertainmentAuthDataDuration: ").Append(TravelEntertainmentAuthDataDuration).Append("\n");
            sb.Append("  TravelEntertainmentAuthDataMarket: ").Append(TravelEntertainmentAuthDataMarket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalDataLodging" />
    /// </summary>
    public class AdditionalDataLodgingJsonConverter : JsonConverter<AdditionalDataLodging>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalDataLodging" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalDataLodging Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> lodgingSpecialProgramCode = default;
            Option<string> lodgingCheckInDate = default;
            Option<string> lodgingCheckOutDate = default;
            Option<string> lodgingCustomerServiceTollFreeNumber = default;
            Option<string> lodgingFireSafetyActIndicator = default;
            Option<string> lodgingFolioCashAdvances = default;
            Option<string> lodgingFolioNumber = default;
            Option<string> lodgingFoodBeverageCharges = default;
            Option<string> lodgingNoShowIndicator = default;
            Option<string> lodgingPrepaidExpenses = default;
            Option<string> lodgingPropertyPhoneNumber = default;
            Option<string> lodgingRoom1NumberOfNights = default;
            Option<string> lodgingRoom1Rate = default;
            Option<string> lodgingTotalRoomTax = default;
            Option<string> lodgingTotalTax = default;
            Option<string> travelEntertainmentAuthDataDuration = default;
            Option<string> travelEntertainmentAuthDataMarket = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "lodging.SpecialProgramCode":
                            lodgingSpecialProgramCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.checkInDate":
                            lodgingCheckInDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.checkOutDate":
                            lodgingCheckOutDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.customerServiceTollFreeNumber":
                            lodgingCustomerServiceTollFreeNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.fireSafetyActIndicator":
                            lodgingFireSafetyActIndicator = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.folioCashAdvances":
                            lodgingFolioCashAdvances = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.folioNumber":
                            lodgingFolioNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.foodBeverageCharges":
                            lodgingFoodBeverageCharges = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.noShowIndicator":
                            lodgingNoShowIndicator = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.prepaidExpenses":
                            lodgingPrepaidExpenses = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.propertyPhoneNumber":
                            lodgingPropertyPhoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.room1.numberOfNights":
                            lodgingRoom1NumberOfNights = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.room1.rate":
                            lodgingRoom1Rate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.totalRoomTax":
                            lodgingTotalRoomTax = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lodging.totalTax":
                            lodgingTotalTax = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "travelEntertainmentAuthData.duration":
                            travelEntertainmentAuthDataDuration = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "travelEntertainmentAuthData.market":
                            travelEntertainmentAuthDataMarket = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (lodgingSpecialProgramCode.IsSet && lodgingSpecialProgramCode.Value == null)
                throw new ArgumentNullException(nameof(lodgingSpecialProgramCode), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingCheckInDate.IsSet && lodgingCheckInDate.Value == null)
                throw new ArgumentNullException(nameof(lodgingCheckInDate), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingCheckOutDate.IsSet && lodgingCheckOutDate.Value == null)
                throw new ArgumentNullException(nameof(lodgingCheckOutDate), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingCustomerServiceTollFreeNumber.IsSet && lodgingCustomerServiceTollFreeNumber.Value == null)
                throw new ArgumentNullException(nameof(lodgingCustomerServiceTollFreeNumber), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingFireSafetyActIndicator.IsSet && lodgingFireSafetyActIndicator.Value == null)
                throw new ArgumentNullException(nameof(lodgingFireSafetyActIndicator), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingFolioCashAdvances.IsSet && lodgingFolioCashAdvances.Value == null)
                throw new ArgumentNullException(nameof(lodgingFolioCashAdvances), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingFolioNumber.IsSet && lodgingFolioNumber.Value == null)
                throw new ArgumentNullException(nameof(lodgingFolioNumber), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingFoodBeverageCharges.IsSet && lodgingFoodBeverageCharges.Value == null)
                throw new ArgumentNullException(nameof(lodgingFoodBeverageCharges), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingNoShowIndicator.IsSet && lodgingNoShowIndicator.Value == null)
                throw new ArgumentNullException(nameof(lodgingNoShowIndicator), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingPrepaidExpenses.IsSet && lodgingPrepaidExpenses.Value == null)
                throw new ArgumentNullException(nameof(lodgingPrepaidExpenses), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingPropertyPhoneNumber.IsSet && lodgingPropertyPhoneNumber.Value == null)
                throw new ArgumentNullException(nameof(lodgingPropertyPhoneNumber), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingRoom1NumberOfNights.IsSet && lodgingRoom1NumberOfNights.Value == null)
                throw new ArgumentNullException(nameof(lodgingRoom1NumberOfNights), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingRoom1Rate.IsSet && lodgingRoom1Rate.Value == null)
                throw new ArgumentNullException(nameof(lodgingRoom1Rate), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingTotalRoomTax.IsSet && lodgingTotalRoomTax.Value == null)
                throw new ArgumentNullException(nameof(lodgingTotalRoomTax), "Property is not nullable for class AdditionalDataLodging.");

            if (lodgingTotalTax.IsSet && lodgingTotalTax.Value == null)
                throw new ArgumentNullException(nameof(lodgingTotalTax), "Property is not nullable for class AdditionalDataLodging.");

            if (travelEntertainmentAuthDataDuration.IsSet && travelEntertainmentAuthDataDuration.Value == null)
                throw new ArgumentNullException(nameof(travelEntertainmentAuthDataDuration), "Property is not nullable for class AdditionalDataLodging.");

            if (travelEntertainmentAuthDataMarket.IsSet && travelEntertainmentAuthDataMarket.Value == null)
                throw new ArgumentNullException(nameof(travelEntertainmentAuthDataMarket), "Property is not nullable for class AdditionalDataLodging.");

            return new AdditionalDataLodging(lodgingSpecialProgramCode, lodgingCheckInDate, lodgingCheckOutDate, lodgingCustomerServiceTollFreeNumber, lodgingFireSafetyActIndicator, lodgingFolioCashAdvances, lodgingFolioNumber, lodgingFoodBeverageCharges, lodgingNoShowIndicator, lodgingPrepaidExpenses, lodgingPropertyPhoneNumber, lodgingRoom1NumberOfNights, lodgingRoom1Rate, lodgingTotalRoomTax, lodgingTotalTax, travelEntertainmentAuthDataDuration, travelEntertainmentAuthDataMarket);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalDataLodging" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataLodging"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalDataLodging additionalDataLodging, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalDataLodging, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalDataLodging" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataLodging"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalDataLodging additionalDataLodging, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalDataLodging.LodgingSpecialProgramCodeOption.IsSet && additionalDataLodging.LodgingSpecialProgramCode == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingSpecialProgramCode), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingCheckInDateOption.IsSet && additionalDataLodging.LodgingCheckInDate == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingCheckInDate), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingCheckOutDateOption.IsSet && additionalDataLodging.LodgingCheckOutDate == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingCheckOutDate), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingCustomerServiceTollFreeNumberOption.IsSet && additionalDataLodging.LodgingCustomerServiceTollFreeNumber == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingCustomerServiceTollFreeNumber), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingFireSafetyActIndicatorOption.IsSet && additionalDataLodging.LodgingFireSafetyActIndicator == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingFireSafetyActIndicator), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingFolioCashAdvancesOption.IsSet && additionalDataLodging.LodgingFolioCashAdvances == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingFolioCashAdvances), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingFolioNumberOption.IsSet && additionalDataLodging.LodgingFolioNumber == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingFolioNumber), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingFoodBeverageChargesOption.IsSet && additionalDataLodging.LodgingFoodBeverageCharges == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingFoodBeverageCharges), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingNoShowIndicatorOption.IsSet && additionalDataLodging.LodgingNoShowIndicator == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingNoShowIndicator), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingPrepaidExpensesOption.IsSet && additionalDataLodging.LodgingPrepaidExpenses == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingPrepaidExpenses), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingPropertyPhoneNumberOption.IsSet && additionalDataLodging.LodgingPropertyPhoneNumber == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingPropertyPhoneNumber), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingRoom1NumberOfNightsOption.IsSet && additionalDataLodging.LodgingRoom1NumberOfNights == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingRoom1NumberOfNights), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingRoom1RateOption.IsSet && additionalDataLodging.LodgingRoom1Rate == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingRoom1Rate), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingTotalRoomTaxOption.IsSet && additionalDataLodging.LodgingTotalRoomTax == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingTotalRoomTax), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingTotalTaxOption.IsSet && additionalDataLodging.LodgingTotalTax == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.LodgingTotalTax), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.TravelEntertainmentAuthDataDurationOption.IsSet && additionalDataLodging.TravelEntertainmentAuthDataDuration == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.TravelEntertainmentAuthDataDuration), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.TravelEntertainmentAuthDataMarketOption.IsSet && additionalDataLodging.TravelEntertainmentAuthDataMarket == null)
                throw new ArgumentNullException(nameof(additionalDataLodging.TravelEntertainmentAuthDataMarket), "Property is required for class AdditionalDataLodging.");

            if (additionalDataLodging.LodgingSpecialProgramCodeOption.IsSet)
                writer.WriteString("lodging.SpecialProgramCode", additionalDataLodging.LodgingSpecialProgramCode);

            if (additionalDataLodging.LodgingCheckInDateOption.IsSet)
                writer.WriteString("lodging.checkInDate", additionalDataLodging.LodgingCheckInDate);

            if (additionalDataLodging.LodgingCheckOutDateOption.IsSet)
                writer.WriteString("lodging.checkOutDate", additionalDataLodging.LodgingCheckOutDate);

            if (additionalDataLodging.LodgingCustomerServiceTollFreeNumberOption.IsSet)
                writer.WriteString("lodging.customerServiceTollFreeNumber", additionalDataLodging.LodgingCustomerServiceTollFreeNumber);

            if (additionalDataLodging.LodgingFireSafetyActIndicatorOption.IsSet)
                writer.WriteString("lodging.fireSafetyActIndicator", additionalDataLodging.LodgingFireSafetyActIndicator);

            if (additionalDataLodging.LodgingFolioCashAdvancesOption.IsSet)
                writer.WriteString("lodging.folioCashAdvances", additionalDataLodging.LodgingFolioCashAdvances);

            if (additionalDataLodging.LodgingFolioNumberOption.IsSet)
                writer.WriteString("lodging.folioNumber", additionalDataLodging.LodgingFolioNumber);

            if (additionalDataLodging.LodgingFoodBeverageChargesOption.IsSet)
                writer.WriteString("lodging.foodBeverageCharges", additionalDataLodging.LodgingFoodBeverageCharges);

            if (additionalDataLodging.LodgingNoShowIndicatorOption.IsSet)
                writer.WriteString("lodging.noShowIndicator", additionalDataLodging.LodgingNoShowIndicator);

            if (additionalDataLodging.LodgingPrepaidExpensesOption.IsSet)
                writer.WriteString("lodging.prepaidExpenses", additionalDataLodging.LodgingPrepaidExpenses);

            if (additionalDataLodging.LodgingPropertyPhoneNumberOption.IsSet)
                writer.WriteString("lodging.propertyPhoneNumber", additionalDataLodging.LodgingPropertyPhoneNumber);

            if (additionalDataLodging.LodgingRoom1NumberOfNightsOption.IsSet)
                writer.WriteString("lodging.room1.numberOfNights", additionalDataLodging.LodgingRoom1NumberOfNights);

            if (additionalDataLodging.LodgingRoom1RateOption.IsSet)
                writer.WriteString("lodging.room1.rate", additionalDataLodging.LodgingRoom1Rate);

            if (additionalDataLodging.LodgingTotalRoomTaxOption.IsSet)
                writer.WriteString("lodging.totalRoomTax", additionalDataLodging.LodgingTotalRoomTax);

            if (additionalDataLodging.LodgingTotalTaxOption.IsSet)
                writer.WriteString("lodging.totalTax", additionalDataLodging.LodgingTotalTax);

            if (additionalDataLodging.TravelEntertainmentAuthDataDurationOption.IsSet)
                writer.WriteString("travelEntertainmentAuthData.duration", additionalDataLodging.TravelEntertainmentAuthDataDuration);

            if (additionalDataLodging.TravelEntertainmentAuthDataMarketOption.IsSet)
                writer.WriteString("travelEntertainmentAuthData.market", additionalDataLodging.TravelEntertainmentAuthDataMarket);
        }
    }
}
