// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// The type and required details of a payment method to use.
    /// </summary>
    public partial class DonationPaymentMethod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DonationPaymentMethod" /> class.
        /// </summary>
        /// <param name="applePayDonations"></param>
        public DonationPaymentMethod(ApplePayDonations applePayDonations)
        {
            ApplePayDonations = applePayDonations;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DonationPaymentMethod" /> class.
        /// </summary>
        /// <param name="cardDonations"></param>
        public DonationPaymentMethod(CardDonations cardDonations)
        {
            CardDonations = cardDonations;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DonationPaymentMethod" /> class.
        /// </summary>
        /// <param name="googlePayDonations"></param>
        public DonationPaymentMethod(GooglePayDonations googlePayDonations)
        {
            GooglePayDonations = googlePayDonations;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DonationPaymentMethod" /> class.
        /// </summary>
        /// <param name="idealDonations"></param>
        public DonationPaymentMethod(IdealDonations idealDonations)
        {
            IdealDonations = idealDonations;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DonationPaymentMethod" /> class.
        /// </summary>
        /// <param name="payWithGoogleDonations"></param>
        public DonationPaymentMethod(PayWithGoogleDonations payWithGoogleDonations)
        {
            PayWithGoogleDonations = payWithGoogleDonations;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ApplePayDonations
        /// </summary>
        public ApplePayDonations ApplePayDonations { get; set; }

        /// <summary>
        /// Gets or Sets CardDonations
        /// </summary>
        public CardDonations CardDonations { get; set; }

        /// <summary>
        /// Gets or Sets GooglePayDonations
        /// </summary>
        public GooglePayDonations GooglePayDonations { get; set; }

        /// <summary>
        /// Gets or Sets IdealDonations
        /// </summary>
        public IdealDonations IdealDonations { get; set; }

        /// <summary>
        /// Gets or Sets PayWithGoogleDonations
        /// </summary>
        public PayWithGoogleDonations PayWithGoogleDonations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DonationPaymentMethod {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DonationPaymentMethod" />
    /// </summary>
    public class DonationPaymentMethodJsonConverter : JsonConverter<DonationPaymentMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="DonationPaymentMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DonationPaymentMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            ApplePayDonations applePayDonations = default;
            CardDonations cardDonations = default;
            GooglePayDonations googlePayDonations = default;
            IdealDonations idealDonations = default;
            PayWithGoogleDonations payWithGoogleDonations = default;

            Utf8JsonReader utf8JsonReaderOneOf = utf8JsonReader;
            while (utf8JsonReaderOneOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (utf8JsonReaderOneOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderOneOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderApplePayDonations = utf8JsonReader;
                    ClientUtils.TryDeserialize<ApplePayDonations>(ref utf8JsonReaderApplePayDonations, jsonSerializerOptions, out applePayDonations);

                    Utf8JsonReader utf8JsonReaderCardDonations = utf8JsonReader;
                    ClientUtils.TryDeserialize<CardDonations>(ref utf8JsonReaderCardDonations, jsonSerializerOptions, out cardDonations);

                    Utf8JsonReader utf8JsonReaderGooglePayDonations = utf8JsonReader;
                    ClientUtils.TryDeserialize<GooglePayDonations>(ref utf8JsonReaderGooglePayDonations, jsonSerializerOptions, out googlePayDonations);

                    Utf8JsonReader utf8JsonReaderIdealDonations = utf8JsonReader;
                    ClientUtils.TryDeserialize<IdealDonations>(ref utf8JsonReaderIdealDonations, jsonSerializerOptions, out idealDonations);

                    Utf8JsonReader utf8JsonReaderPayWithGoogleDonations = utf8JsonReader;
                    ClientUtils.TryDeserialize<PayWithGoogleDonations>(ref utf8JsonReaderPayWithGoogleDonations, jsonSerializerOptions, out payWithGoogleDonations);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            if (applePayDonations != null)
                return new DonationPaymentMethod(applePayDonations);

            if (cardDonations != null)
                return new DonationPaymentMethod(cardDonations);

            if (googlePayDonations != null)
                return new DonationPaymentMethod(googlePayDonations);

            if (idealDonations != null)
                return new DonationPaymentMethod(idealDonations);

            if (payWithGoogleDonations != null)
                return new DonationPaymentMethod(payWithGoogleDonations);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="DonationPaymentMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="donationPaymentMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DonationPaymentMethod donationPaymentMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, donationPaymentMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DonationPaymentMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="donationPaymentMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DonationPaymentMethod donationPaymentMethod, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
