// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Installments
    /// </summary>
    public partial class Installments : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Installments" /> class.
        /// </summary>
        /// <param name="value">Defines the number of installments. Usually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary. This value can be zero for Installments processed in Mexico.</param>
        /// <param name="extra">Defines the bonus percentage, refund percentage or if the transaction is Buy now Pay later. Used for [card installments in Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico) </param>
        /// <param name="plan">The installment plan, used for [card installments in Japan](https://docs.adyen.com/payment-methods/cards/credit-card-installments#make-a-payment-japan). and [Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico). By default, this is set to **regular**. </param>
        [JsonConstructor]
        public Installments(int value, Option<int?> extra = default, Option<PlanEnum?> plan = default)
        {
            Value = value;
            ExtraOption = extra;
            PlanOption = plan;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The installment plan, used for [card installments in Japan](https://docs.adyen.com/payment-methods/cards/credit-card-installments#make-a-payment-japan). and [Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico). By default, this is set to **regular**. 
        /// </summary>
        /// <value>The installment plan, used for [card installments in Japan](https://docs.adyen.com/payment-methods/cards/credit-card-installments#make-a-payment-japan). and [Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico). By default, this is set to **regular**. </value>
        public enum PlanEnum
        {
            /// <summary>
            /// Enum Bonus for value: bonus
            /// </summary>
            Bonus = 1,

            /// <summary>
            /// Enum BuynowPaylater for value: buynow_paylater
            /// </summary>
            BuynowPaylater = 2,

            /// <summary>
            /// Enum InteresRefundPrctg for value: interes_refund_prctg
            /// </summary>
            InteresRefundPrctg = 3,

            /// <summary>
            /// Enum InterestBonus for value: interest_bonus
            /// </summary>
            InterestBonus = 4,

            /// <summary>
            /// Enum NointeresRefundPrctg for value: nointeres_refund_prctg
            /// </summary>
            NointeresRefundPrctg = 5,

            /// <summary>
            /// Enum NointerestBonus for value: nointerest_bonus
            /// </summary>
            NointerestBonus = 6,

            /// <summary>
            /// Enum RefundPrctg for value: refund_prctg
            /// </summary>
            RefundPrctg = 7,

            /// <summary>
            /// Enum Regular for value: regular
            /// </summary>
            Regular = 8,

            /// <summary>
            /// Enum Revolving for value: revolving
            /// </summary>
            Revolving = 9,

            /// <summary>
            /// Enum WithInterest for value: with_interest
            /// </summary>
            WithInterest = 10
        }

        /// <summary>
        /// Returns a <see cref="PlanEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PlanEnum PlanEnumFromString(string value)
        {
            if (value.Equals("bonus"))
                return PlanEnum.Bonus;

            if (value.Equals("buynow_paylater"))
                return PlanEnum.BuynowPaylater;

            if (value.Equals("interes_refund_prctg"))
                return PlanEnum.InteresRefundPrctg;

            if (value.Equals("interest_bonus"))
                return PlanEnum.InterestBonus;

            if (value.Equals("nointeres_refund_prctg"))
                return PlanEnum.NointeresRefundPrctg;

            if (value.Equals("nointerest_bonus"))
                return PlanEnum.NointerestBonus;

            if (value.Equals("refund_prctg"))
                return PlanEnum.RefundPrctg;

            if (value.Equals("regular"))
                return PlanEnum.Regular;

            if (value.Equals("revolving"))
                return PlanEnum.Revolving;

            if (value.Equals("with_interest"))
                return PlanEnum.WithInterest;

            throw new NotImplementedException($"Could not convert value to type PlanEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PlanEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PlanEnum? PlanEnumFromStringOrDefault(string value)
        {
            if (value.Equals("bonus"))
                return PlanEnum.Bonus;

            if (value.Equals("buynow_paylater"))
                return PlanEnum.BuynowPaylater;

            if (value.Equals("interes_refund_prctg"))
                return PlanEnum.InteresRefundPrctg;

            if (value.Equals("interest_bonus"))
                return PlanEnum.InterestBonus;

            if (value.Equals("nointeres_refund_prctg"))
                return PlanEnum.NointeresRefundPrctg;

            if (value.Equals("nointerest_bonus"))
                return PlanEnum.NointerestBonus;

            if (value.Equals("refund_prctg"))
                return PlanEnum.RefundPrctg;

            if (value.Equals("regular"))
                return PlanEnum.Regular;

            if (value.Equals("revolving"))
                return PlanEnum.Revolving;

            if (value.Equals("with_interest"))
                return PlanEnum.WithInterest;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PlanEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PlanEnumToJsonValue(PlanEnum? value)
        {
            if (value == PlanEnum.Bonus)
                return "bonus";

            if (value == PlanEnum.BuynowPaylater)
                return "buynow_paylater";

            if (value == PlanEnum.InteresRefundPrctg)
                return "interes_refund_prctg";

            if (value == PlanEnum.InterestBonus)
                return "interest_bonus";

            if (value == PlanEnum.NointeresRefundPrctg)
                return "nointeres_refund_prctg";

            if (value == PlanEnum.NointerestBonus)
                return "nointerest_bonus";

            if (value == PlanEnum.RefundPrctg)
                return "refund_prctg";

            if (value == PlanEnum.Regular)
                return "regular";

            if (value == PlanEnum.Revolving)
                return "revolving";

            if (value == PlanEnum.WithInterest)
                return "with_interest";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Plan
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PlanEnum?> PlanOption { get; private set; }

        /// <summary>
        /// The installment plan, used for [card installments in Japan](https://docs.adyen.com/payment-methods/cards/credit-card-installments#make-a-payment-japan). and [Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico). By default, this is set to **regular**. 
        /// </summary>
        /// <value>The installment plan, used for [card installments in Japan](https://docs.adyen.com/payment-methods/cards/credit-card-installments#make-a-payment-japan). and [Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico). By default, this is set to **regular**. </value>
        [JsonPropertyName("plan")]
        public PlanEnum? Plan { get { return this.PlanOption; } set { this.PlanOption = new Option<PlanEnum?>(value); } }

        /// <summary>
        /// Defines the number of installments. Usually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary. This value can be zero for Installments processed in Mexico.
        /// </summary>
        /// <value>Defines the number of installments. Usually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary. This value can be zero for Installments processed in Mexico.</value>
        [JsonPropertyName("value")]
        public int Value { get; set; }

        /// <summary>
        /// Used to track the state of Extra
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExtraOption { get; private set; }

        /// <summary>
        /// Defines the bonus percentage, refund percentage or if the transaction is Buy now Pay later. Used for [card installments in Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico) 
        /// </summary>
        /// <value>Defines the bonus percentage, refund percentage or if the transaction is Buy now Pay later. Used for [card installments in Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico) </value>
        [JsonPropertyName("extra")]
        public int? Extra { get { return this.ExtraOption; } set { this.ExtraOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Installments {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Extra: ").Append(Extra).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Installments" />
    /// </summary>
    public class InstallmentsJsonConverter : JsonConverter<Installments>
    {
        /// <summary>
        /// Deserializes json to <see cref="Installments" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Installments Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> value = default;
            Option<int?> extra = default;
            Option<Installments.PlanEnum?> plan = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "value":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                value = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "extra":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                extra = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "plan":
                            string planRawValue = utf8JsonReader.GetString();
                            if (planRawValue != null)
                                plan = new Option<Installments.PlanEnum?>(Installments.PlanEnumFromStringOrDefault(planRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class Installments.", nameof(value));

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class Installments.");

            if (extra.IsSet && extra.Value == null)
                throw new ArgumentNullException(nameof(extra), "Property is not nullable for class Installments.");

            if (plan.IsSet && plan.Value == null)
                throw new ArgumentNullException(nameof(plan), "Property is not nullable for class Installments.");

            return new Installments(value.Value.Value, extra, plan);
        }

        /// <summary>
        /// Serializes a <see cref="Installments" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installments"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Installments installments, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, installments, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Installments" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installments"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Installments installments, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("value", installments.Value);

            if (installments.ExtraOption.IsSet)
                writer.WriteNumber("extra", installments.ExtraOption.Value.Value);

            var planRawValue = Installments.PlanEnumToJsonValue(installments.PlanOption.Value.Value);
            writer.WriteString("plan", planRawValue);
        }
    }
}
