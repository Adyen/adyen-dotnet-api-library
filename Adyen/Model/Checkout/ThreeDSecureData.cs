// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ThreeDSecureData
    /// </summary>
    public partial class ThreeDSecureData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDSecureData" /> class.
        /// </summary>
        /// <param name="authenticationResponse">In 3D Secure 2, this is the &#x60;transStatus&#x60; from the challenge result. If the transaction was frictionless, omit this parameter.  </param>
        /// <param name="cavv">The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).</param>
        /// <param name="cavvAlgorithm">The CAVV algorithm used. Include this only for 3D Secure 1.</param>
        /// <param name="challengeCancel">Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).</param>
        /// <param name="directoryResponse">In 3D Secure 2, this is the &#x60;transStatus&#x60; from the &#x60;ARes&#x60;.  </param>
        /// <param name="dsTransID">Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.</param>
        /// <param name="eci">The electronic commerce indicator.</param>
        /// <param name="riskScore">Risk score calculated by Directory Server (DS). Required for Cartes Bancaires integrations.</param>
        /// <param name="threeDSVersion">The version of the 3D Secure protocol.</param>
        /// <param name="tokenAuthenticationVerificationValue">Network token authentication verification value (TAVV). The network token cryptogram.</param>
        /// <param name="transStatusReason">Provides information on why the &#x60;transStatus&#x60; field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).</param>
        /// <param name="xid">Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form).</param>
        [JsonConstructor]
        public ThreeDSecureData(Option<AuthenticationResponseEnum?> authenticationResponse = default, Option<byte[]> cavv = default, Option<string> cavvAlgorithm = default, Option<ChallengeCancelEnum?> challengeCancel = default, Option<DirectoryResponseEnum?> directoryResponse = default, Option<string> dsTransID = default, Option<string> eci = default, Option<string> riskScore = default, Option<string> threeDSVersion = default, Option<byte[]> tokenAuthenticationVerificationValue = default, Option<string> transStatusReason = default, Option<byte[]> xid = default)
        {
            AuthenticationResponseOption = authenticationResponse;
            CavvOption = cavv;
            CavvAlgorithmOption = cavvAlgorithm;
            ChallengeCancelOption = challengeCancel;
            DirectoryResponseOption = directoryResponse;
            DsTransIDOption = dsTransID;
            EciOption = eci;
            RiskScoreOption = riskScore;
            ThreeDSVersionOption = threeDSVersion;
            TokenAuthenticationVerificationValueOption = tokenAuthenticationVerificationValue;
            TransStatusReasonOption = transStatusReason;
            XidOption = xid;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// In 3D Secure 2, this is the &#x60;transStatus&#x60; from the challenge result. If the transaction was frictionless, omit this parameter.  
        /// </summary>
        /// <value>In 3D Secure 2, this is the &#x60;transStatus&#x60; from the challenge result. If the transaction was frictionless, omit this parameter.  </value>
        public enum AuthenticationResponseEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            N = 2,

            /// <summary>
            /// Enum U for value: U
            /// </summary>
            U = 3,

            /// <summary>
            /// Enum A for value: A
            /// </summary>
            A = 4
        }

        /// <summary>
        /// Returns a <see cref="AuthenticationResponseEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AuthenticationResponseEnum AuthenticationResponseEnumFromString(string value)
        {
            if (value.Equals("Y"))
                return AuthenticationResponseEnum.Y;

            if (value.Equals("N"))
                return AuthenticationResponseEnum.N;

            if (value.Equals("U"))
                return AuthenticationResponseEnum.U;

            if (value.Equals("A"))
                return AuthenticationResponseEnum.A;

            throw new NotImplementedException($"Could not convert value to type AuthenticationResponseEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AuthenticationResponseEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AuthenticationResponseEnum? AuthenticationResponseEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Y"))
                return AuthenticationResponseEnum.Y;

            if (value.Equals("N"))
                return AuthenticationResponseEnum.N;

            if (value.Equals("U"))
                return AuthenticationResponseEnum.U;

            if (value.Equals("A"))
                return AuthenticationResponseEnum.A;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AuthenticationResponseEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AuthenticationResponseEnumToJsonValue(AuthenticationResponseEnum? value)
        {
            if (value == AuthenticationResponseEnum.Y)
                return "Y";

            if (value == AuthenticationResponseEnum.N)
                return "N";

            if (value == AuthenticationResponseEnum.U)
                return "U";

            if (value == AuthenticationResponseEnum.A)
                return "A";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AuthenticationResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AuthenticationResponseEnum?> AuthenticationResponseOption { get; private set; }

        /// <summary>
        /// In 3D Secure 2, this is the &#x60;transStatus&#x60; from the challenge result. If the transaction was frictionless, omit this parameter.  
        /// </summary>
        /// <value>In 3D Secure 2, this is the &#x60;transStatus&#x60; from the challenge result. If the transaction was frictionless, omit this parameter.  </value>
        [JsonPropertyName("authenticationResponse")]
        public AuthenticationResponseEnum? AuthenticationResponse { get { return this.AuthenticationResponseOption; } set { this.AuthenticationResponseOption = new Option<AuthenticationResponseEnum?>(value); } }

        /// <summary>
        /// Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).
        /// </summary>
        /// <value>Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).</value>
        public enum ChallengeCancelEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            _05 = 5,

            /// <summary>
            /// Enum _06 for value: 06
            /// </summary>
            _06 = 6,

            /// <summary>
            /// Enum _07 for value: 07
            /// </summary>
            _07 = 7
        }

        /// <summary>
        /// Returns a <see cref="ChallengeCancelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ChallengeCancelEnum ChallengeCancelEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ChallengeCancelEnum._01;

            if (value.Equals("02"))
                return ChallengeCancelEnum._02;

            if (value.Equals("03"))
                return ChallengeCancelEnum._03;

            if (value.Equals("04"))
                return ChallengeCancelEnum._04;

            if (value.Equals("05"))
                return ChallengeCancelEnum._05;

            if (value.Equals("06"))
                return ChallengeCancelEnum._06;

            if (value.Equals("07"))
                return ChallengeCancelEnum._07;

            throw new NotImplementedException($"Could not convert value to type ChallengeCancelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ChallengeCancelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChallengeCancelEnum? ChallengeCancelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ChallengeCancelEnum._01;

            if (value.Equals("02"))
                return ChallengeCancelEnum._02;

            if (value.Equals("03"))
                return ChallengeCancelEnum._03;

            if (value.Equals("04"))
                return ChallengeCancelEnum._04;

            if (value.Equals("05"))
                return ChallengeCancelEnum._05;

            if (value.Equals("06"))
                return ChallengeCancelEnum._06;

            if (value.Equals("07"))
                return ChallengeCancelEnum._07;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChallengeCancelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ChallengeCancelEnumToJsonValue(ChallengeCancelEnum? value)
        {
            if (value == ChallengeCancelEnum._01)
                return "01";

            if (value == ChallengeCancelEnum._02)
                return "02";

            if (value == ChallengeCancelEnum._03)
                return "03";

            if (value == ChallengeCancelEnum._04)
                return "04";

            if (value == ChallengeCancelEnum._05)
                return "05";

            if (value == ChallengeCancelEnum._06)
                return "06";

            if (value == ChallengeCancelEnum._07)
                return "07";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ChallengeCancel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChallengeCancelEnum?> ChallengeCancelOption { get; private set; }

        /// <summary>
        /// Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).
        /// </summary>
        /// <value>Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).</value>
        [JsonPropertyName("challengeCancel")]
        public ChallengeCancelEnum? ChallengeCancel { get { return this.ChallengeCancelOption; } set { this.ChallengeCancelOption = new Option<ChallengeCancelEnum?>(value); } }

        /// <summary>
        /// In 3D Secure 2, this is the &#x60;transStatus&#x60; from the &#x60;ARes&#x60;.  
        /// </summary>
        /// <value>In 3D Secure 2, this is the &#x60;transStatus&#x60; from the &#x60;ARes&#x60;.  </value>
        public enum DirectoryResponseEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            A = 1,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            C = 2,

            /// <summary>
            /// Enum D for value: D
            /// </summary>
            D = 3,

            /// <summary>
            /// Enum I for value: I
            /// </summary>
            I = 4,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            N = 5,

            /// <summary>
            /// Enum R for value: R
            /// </summary>
            R = 6,

            /// <summary>
            /// Enum U for value: U
            /// </summary>
            U = 7,

            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            Y = 8
        }

        /// <summary>
        /// Returns a <see cref="DirectoryResponseEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DirectoryResponseEnum DirectoryResponseEnumFromString(string value)
        {
            if (value.Equals("A"))
                return DirectoryResponseEnum.A;

            if (value.Equals("C"))
                return DirectoryResponseEnum.C;

            if (value.Equals("D"))
                return DirectoryResponseEnum.D;

            if (value.Equals("I"))
                return DirectoryResponseEnum.I;

            if (value.Equals("N"))
                return DirectoryResponseEnum.N;

            if (value.Equals("R"))
                return DirectoryResponseEnum.R;

            if (value.Equals("U"))
                return DirectoryResponseEnum.U;

            if (value.Equals("Y"))
                return DirectoryResponseEnum.Y;

            throw new NotImplementedException($"Could not convert value to type DirectoryResponseEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DirectoryResponseEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DirectoryResponseEnum? DirectoryResponseEnumFromStringOrDefault(string value)
        {
            if (value.Equals("A"))
                return DirectoryResponseEnum.A;

            if (value.Equals("C"))
                return DirectoryResponseEnum.C;

            if (value.Equals("D"))
                return DirectoryResponseEnum.D;

            if (value.Equals("I"))
                return DirectoryResponseEnum.I;

            if (value.Equals("N"))
                return DirectoryResponseEnum.N;

            if (value.Equals("R"))
                return DirectoryResponseEnum.R;

            if (value.Equals("U"))
                return DirectoryResponseEnum.U;

            if (value.Equals("Y"))
                return DirectoryResponseEnum.Y;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DirectoryResponseEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DirectoryResponseEnumToJsonValue(DirectoryResponseEnum? value)
        {
            if (value == DirectoryResponseEnum.A)
                return "A";

            if (value == DirectoryResponseEnum.C)
                return "C";

            if (value == DirectoryResponseEnum.D)
                return "D";

            if (value == DirectoryResponseEnum.I)
                return "I";

            if (value == DirectoryResponseEnum.N)
                return "N";

            if (value == DirectoryResponseEnum.R)
                return "R";

            if (value == DirectoryResponseEnum.U)
                return "U";

            if (value == DirectoryResponseEnum.Y)
                return "Y";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of DirectoryResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DirectoryResponseEnum?> DirectoryResponseOption { get; private set; }

        /// <summary>
        /// In 3D Secure 2, this is the &#x60;transStatus&#x60; from the &#x60;ARes&#x60;.  
        /// </summary>
        /// <value>In 3D Secure 2, this is the &#x60;transStatus&#x60; from the &#x60;ARes&#x60;.  </value>
        [JsonPropertyName("directoryResponse")]
        public DirectoryResponseEnum? DirectoryResponse { get { return this.DirectoryResponseOption; } set { this.DirectoryResponseOption = new Option<DirectoryResponseEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Cavv
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<byte[]> CavvOption { get; private set; }

        /// <summary>
        /// The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).
        /// </summary>
        /// <value>The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).</value>
        [JsonPropertyName("cavv")]
        public byte[] Cavv { get { return this.CavvOption; } set { this.CavvOption = new Option<byte[]>(value); } }

        /// <summary>
        /// Used to track the state of CavvAlgorithm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CavvAlgorithmOption { get; private set; }

        /// <summary>
        /// The CAVV algorithm used. Include this only for 3D Secure 1.
        /// </summary>
        /// <value>The CAVV algorithm used. Include this only for 3D Secure 1.</value>
        [JsonPropertyName("cavvAlgorithm")]
        public string CavvAlgorithm { get { return this.CavvAlgorithmOption; } set { this.CavvAlgorithmOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DsTransID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DsTransIDOption { get; private set; }

        /// <summary>
        /// Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
        /// </summary>
        /// <value>Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.</value>
        [JsonPropertyName("dsTransID")]
        public string DsTransID { get { return this.DsTransIDOption; } set { this.DsTransIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Eci
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EciOption { get; private set; }

        /// <summary>
        /// The electronic commerce indicator.
        /// </summary>
        /// <value>The electronic commerce indicator.</value>
        [JsonPropertyName("eci")]
        public string Eci { get { return this.EciOption; } set { this.EciOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskScoreOption { get; private set; }

        /// <summary>
        /// Risk score calculated by Directory Server (DS). Required for Cartes Bancaires integrations.
        /// </summary>
        /// <value>Risk score calculated by Directory Server (DS). Required for Cartes Bancaires integrations.</value>
        [JsonPropertyName("riskScore")]
        public string RiskScore { get { return this.RiskScoreOption; } set { this.RiskScoreOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSVersionOption { get; private set; }

        /// <summary>
        /// The version of the 3D Secure protocol.
        /// </summary>
        /// <value>The version of the 3D Secure protocol.</value>
        [JsonPropertyName("threeDSVersion")]
        public string ThreeDSVersion { get { return this.ThreeDSVersionOption; } set { this.ThreeDSVersionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TokenAuthenticationVerificationValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<byte[]> TokenAuthenticationVerificationValueOption { get; private set; }

        /// <summary>
        /// Network token authentication verification value (TAVV). The network token cryptogram.
        /// </summary>
        /// <value>Network token authentication verification value (TAVV). The network token cryptogram.</value>
        [JsonPropertyName("tokenAuthenticationVerificationValue")]
        public byte[] TokenAuthenticationVerificationValue { get { return this.TokenAuthenticationVerificationValueOption; } set { this.TokenAuthenticationVerificationValueOption = new Option<byte[]>(value); } }

        /// <summary>
        /// Used to track the state of TransStatusReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TransStatusReasonOption { get; private set; }

        /// <summary>
        /// Provides information on why the &#x60;transStatus&#x60; field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).
        /// </summary>
        /// <value>Provides information on why the &#x60;transStatus&#x60; field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).</value>
        [JsonPropertyName("transStatusReason")]
        public string TransStatusReason { get { return this.TransStatusReasonOption; } set { this.TransStatusReasonOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Xid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<byte[]> XidOption { get; private set; }

        /// <summary>
        /// Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form).
        /// </summary>
        /// <value>Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form).</value>
        [JsonPropertyName("xid")]
        public byte[] Xid { get { return this.XidOption; } set { this.XidOption = new Option<byte[]>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDSecureData {\n");
            sb.Append("  AuthenticationResponse: ").Append(AuthenticationResponse).Append("\n");
            sb.Append("  Cavv: ").Append(Cavv).Append("\n");
            sb.Append("  CavvAlgorithm: ").Append(CavvAlgorithm).Append("\n");
            sb.Append("  ChallengeCancel: ").Append(ChallengeCancel).Append("\n");
            sb.Append("  DirectoryResponse: ").Append(DirectoryResponse).Append("\n");
            sb.Append("  DsTransID: ").Append(DsTransID).Append("\n");
            sb.Append("  Eci: ").Append(Eci).Append("\n");
            sb.Append("  RiskScore: ").Append(RiskScore).Append("\n");
            sb.Append("  ThreeDSVersion: ").Append(ThreeDSVersion).Append("\n");
            sb.Append("  TokenAuthenticationVerificationValue: ").Append(TokenAuthenticationVerificationValue).Append("\n");
            sb.Append("  TransStatusReason: ").Append(TransStatusReason).Append("\n");
            sb.Append("  Xid: ").Append(Xid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ThreeDSecureData" />
    /// </summary>
    public class ThreeDSecureDataJsonConverter : JsonConverter<ThreeDSecureData>
    {
        /// <summary>
        /// Deserializes json to <see cref="ThreeDSecureData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ThreeDSecureData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ThreeDSecureData.AuthenticationResponseEnum?> authenticationResponse = default;
            Option<byte[]> cavv = default;
            Option<string> cavvAlgorithm = default;
            Option<ThreeDSecureData.ChallengeCancelEnum?> challengeCancel = default;
            Option<ThreeDSecureData.DirectoryResponseEnum?> directoryResponse = default;
            Option<string> dsTransID = default;
            Option<string> eci = default;
            Option<string> riskScore = default;
            Option<string> threeDSVersion = default;
            Option<byte[]> tokenAuthenticationVerificationValue = default;
            Option<string> transStatusReason = default;
            Option<byte[]> xid = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "authenticationResponse":
                            string authenticationResponseRawValue = utf8JsonReader.GetString();
                            if (authenticationResponseRawValue != null)
                                authenticationResponse = new Option<ThreeDSecureData.AuthenticationResponseEnum?>(ThreeDSecureData.AuthenticationResponseEnumFromStringOrDefault(authenticationResponseRawValue));
                            break;
                        case "cavv":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cavv = new Option<byte[]>(JsonSerializer.Deserialize<byte[]>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cavvAlgorithm":
                            cavvAlgorithm = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "challengeCancel":
                            string challengeCancelRawValue = utf8JsonReader.GetString();
                            if (challengeCancelRawValue != null)
                                challengeCancel = new Option<ThreeDSecureData.ChallengeCancelEnum?>(ThreeDSecureData.ChallengeCancelEnumFromStringOrDefault(challengeCancelRawValue));
                            break;
                        case "directoryResponse":
                            string directoryResponseRawValue = utf8JsonReader.GetString();
                            if (directoryResponseRawValue != null)
                                directoryResponse = new Option<ThreeDSecureData.DirectoryResponseEnum?>(ThreeDSecureData.DirectoryResponseEnumFromStringOrDefault(directoryResponseRawValue));
                            break;
                        case "dsTransID":
                            dsTransID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "eci":
                            eci = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskScore":
                            riskScore = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDSVersion":
                            threeDSVersion = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tokenAuthenticationVerificationValue":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tokenAuthenticationVerificationValue = new Option<byte[]>(JsonSerializer.Deserialize<byte[]>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "transStatusReason":
                            transStatusReason = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "xid":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                xid = new Option<byte[]>(JsonSerializer.Deserialize<byte[]>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (authenticationResponse.IsSet && authenticationResponse.Value == null)
                throw new ArgumentNullException(nameof(authenticationResponse), "Property is not nullable for class ThreeDSecureData.");

            if (cavv.IsSet && cavv.Value == null)
                throw new ArgumentNullException(nameof(cavv), "Property is not nullable for class ThreeDSecureData.");

            if (cavvAlgorithm.IsSet && cavvAlgorithm.Value == null)
                throw new ArgumentNullException(nameof(cavvAlgorithm), "Property is not nullable for class ThreeDSecureData.");

            if (challengeCancel.IsSet && challengeCancel.Value == null)
                throw new ArgumentNullException(nameof(challengeCancel), "Property is not nullable for class ThreeDSecureData.");

            if (directoryResponse.IsSet && directoryResponse.Value == null)
                throw new ArgumentNullException(nameof(directoryResponse), "Property is not nullable for class ThreeDSecureData.");

            if (dsTransID.IsSet && dsTransID.Value == null)
                throw new ArgumentNullException(nameof(dsTransID), "Property is not nullable for class ThreeDSecureData.");

            if (eci.IsSet && eci.Value == null)
                throw new ArgumentNullException(nameof(eci), "Property is not nullable for class ThreeDSecureData.");

            if (riskScore.IsSet && riskScore.Value == null)
                throw new ArgumentNullException(nameof(riskScore), "Property is not nullable for class ThreeDSecureData.");

            if (threeDSVersion.IsSet && threeDSVersion.Value == null)
                throw new ArgumentNullException(nameof(threeDSVersion), "Property is not nullable for class ThreeDSecureData.");

            if (tokenAuthenticationVerificationValue.IsSet && tokenAuthenticationVerificationValue.Value == null)
                throw new ArgumentNullException(nameof(tokenAuthenticationVerificationValue), "Property is not nullable for class ThreeDSecureData.");

            if (transStatusReason.IsSet && transStatusReason.Value == null)
                throw new ArgumentNullException(nameof(transStatusReason), "Property is not nullable for class ThreeDSecureData.");

            if (xid.IsSet && xid.Value == null)
                throw new ArgumentNullException(nameof(xid), "Property is not nullable for class ThreeDSecureData.");

            return new ThreeDSecureData(authenticationResponse, cavv, cavvAlgorithm, challengeCancel, directoryResponse, dsTransID, eci, riskScore, threeDSVersion, tokenAuthenticationVerificationValue, transStatusReason, xid);
        }

        /// <summary>
        /// Serializes a <see cref="ThreeDSecureData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="threeDSecureData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ThreeDSecureData threeDSecureData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, threeDSecureData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ThreeDSecureData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="threeDSecureData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ThreeDSecureData threeDSecureData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (threeDSecureData.CavvOption.IsSet && threeDSecureData.Cavv == null)
                throw new ArgumentNullException(nameof(threeDSecureData.Cavv), "Property is required for class ThreeDSecureData.");

            if (threeDSecureData.CavvAlgorithmOption.IsSet && threeDSecureData.CavvAlgorithm == null)
                throw new ArgumentNullException(nameof(threeDSecureData.CavvAlgorithm), "Property is required for class ThreeDSecureData.");

            if (threeDSecureData.DsTransIDOption.IsSet && threeDSecureData.DsTransID == null)
                throw new ArgumentNullException(nameof(threeDSecureData.DsTransID), "Property is required for class ThreeDSecureData.");

            if (threeDSecureData.EciOption.IsSet && threeDSecureData.Eci == null)
                throw new ArgumentNullException(nameof(threeDSecureData.Eci), "Property is required for class ThreeDSecureData.");

            if (threeDSecureData.RiskScoreOption.IsSet && threeDSecureData.RiskScore == null)
                throw new ArgumentNullException(nameof(threeDSecureData.RiskScore), "Property is required for class ThreeDSecureData.");

            if (threeDSecureData.ThreeDSVersionOption.IsSet && threeDSecureData.ThreeDSVersion == null)
                throw new ArgumentNullException(nameof(threeDSecureData.ThreeDSVersion), "Property is required for class ThreeDSecureData.");

            if (threeDSecureData.TokenAuthenticationVerificationValueOption.IsSet && threeDSecureData.TokenAuthenticationVerificationValue == null)
                throw new ArgumentNullException(nameof(threeDSecureData.TokenAuthenticationVerificationValue), "Property is required for class ThreeDSecureData.");

            if (threeDSecureData.TransStatusReasonOption.IsSet && threeDSecureData.TransStatusReason == null)
                throw new ArgumentNullException(nameof(threeDSecureData.TransStatusReason), "Property is required for class ThreeDSecureData.");

            if (threeDSecureData.XidOption.IsSet && threeDSecureData.Xid == null)
                throw new ArgumentNullException(nameof(threeDSecureData.Xid), "Property is required for class ThreeDSecureData.");

            var authenticationResponseRawValue = ThreeDSecureData.AuthenticationResponseEnumToJsonValue(threeDSecureData.AuthenticationResponseOption.Value.Value);
            writer.WriteString("authenticationResponse", authenticationResponseRawValue);
            if (threeDSecureData.CavvOption.IsSet)
            {
                writer.WritePropertyName("cavv");
                JsonSerializer.Serialize(writer, threeDSecureData.Cavv, jsonSerializerOptions);
            }
            if (threeDSecureData.CavvAlgorithmOption.IsSet)
                writer.WriteString("cavvAlgorithm", threeDSecureData.CavvAlgorithm);

            var challengeCancelRawValue = ThreeDSecureData.ChallengeCancelEnumToJsonValue(threeDSecureData.ChallengeCancelOption.Value.Value);
            writer.WriteString("challengeCancel", challengeCancelRawValue);
            var directoryResponseRawValue = ThreeDSecureData.DirectoryResponseEnumToJsonValue(threeDSecureData.DirectoryResponseOption.Value.Value);
            writer.WriteString("directoryResponse", directoryResponseRawValue);
            if (threeDSecureData.DsTransIDOption.IsSet)
                writer.WriteString("dsTransID", threeDSecureData.DsTransID);

            if (threeDSecureData.EciOption.IsSet)
                writer.WriteString("eci", threeDSecureData.Eci);

            if (threeDSecureData.RiskScoreOption.IsSet)
                writer.WriteString("riskScore", threeDSecureData.RiskScore);

            if (threeDSecureData.ThreeDSVersionOption.IsSet)
                writer.WriteString("threeDSVersion", threeDSecureData.ThreeDSVersion);

            if (threeDSecureData.TokenAuthenticationVerificationValueOption.IsSet)
            {
                writer.WritePropertyName("tokenAuthenticationVerificationValue");
                JsonSerializer.Serialize(writer, threeDSecureData.TokenAuthenticationVerificationValue, jsonSerializerOptions);
            }
            if (threeDSecureData.TransStatusReasonOption.IsSet)
                writer.WriteString("transStatusReason", threeDSecureData.TransStatusReason);

            if (threeDSecureData.XidOption.IsSet)
            {
                writer.WritePropertyName("xid");
                JsonSerializer.Serialize(writer, threeDSecureData.Xid, jsonSerializerOptions);
            }
        }
    }
}
