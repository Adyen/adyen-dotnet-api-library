// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// CheckoutBankTransferAction
    /// </summary>
    public partial class CheckoutBankTransferAction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutBankTransferAction" /> class.
        /// </summary>
        /// <param name="type">The type of the action.</param>
        /// <param name="accountNumber">The account number of the bank transfer.</param>
        /// <param name="beneficiary">The name of the account holder.</param>
        /// <param name="bic">The BIC of the IBAN.</param>
        /// <param name="downloadUrl">The url to download payment details with.</param>
        /// <param name="iban">The IBAN of the bank transfer.</param>
        /// <param name="paymentMethodType">Specifies the payment method.</param>
        /// <param name="reference">The transfer reference.</param>
        /// <param name="routingNumber">The routing number of the bank transfer.</param>
        /// <param name="shopperEmail">The e-mail of the shopper, included if an e-mail was sent to the shopper.</param>
        /// <param name="sortCode">The sort code of the bank transfer.</param>
        /// <param name="totalAmount">totalAmount</param>
        /// <param name="url">Specifies the URL to redirect to.</param>
        [JsonConstructor]
        public CheckoutBankTransferAction(TypeEnum type, Option<string> accountNumber = default, Option<string> beneficiary = default, Option<string> bic = default, Option<string> downloadUrl = default, Option<string> iban = default, Option<string> paymentMethodType = default, Option<string> reference = default, Option<string> routingNumber = default, Option<string> shopperEmail = default, Option<string> sortCode = default, Option<Amount> totalAmount = default, Option<string> url = default)
        {
            Type = type;
            AccountNumberOption = accountNumber;
            BeneficiaryOption = beneficiary;
            BicOption = bic;
            DownloadUrlOption = downloadUrl;
            IbanOption = iban;
            PaymentMethodTypeOption = paymentMethodType;
            ReferenceOption = reference;
            RoutingNumberOption = routingNumber;
            ShopperEmailOption = shopperEmail;
            SortCodeOption = sortCode;
            TotalAmountOption = totalAmount;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of the action.
        /// </summary>
        /// <value>The type of the action.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum BankTransfer for value: bankTransfer
            /// </summary>
            BankTransfer = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("bankTransfer"))
                return TypeEnum.BankTransfer;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("bankTransfer"))
                return TypeEnum.BankTransfer;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.BankTransfer)
                return "bankTransfer";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The type of the action.
        /// </summary>
        /// <value>The type of the action.</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Used to track the state of AccountNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AccountNumberOption { get; private set; }

        /// <summary>
        /// The account number of the bank transfer.
        /// </summary>
        /// <value>The account number of the bank transfer.</value>
        [JsonPropertyName("accountNumber")]
        public string AccountNumber { get { return this.AccountNumberOption; } set { this.AccountNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Beneficiary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BeneficiaryOption { get; private set; }

        /// <summary>
        /// The name of the account holder.
        /// </summary>
        /// <value>The name of the account holder.</value>
        [JsonPropertyName("beneficiary")]
        public string Beneficiary { get { return this.BeneficiaryOption; } set { this.BeneficiaryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Bic
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BicOption { get; private set; }

        /// <summary>
        /// The BIC of the IBAN.
        /// </summary>
        /// <value>The BIC of the IBAN.</value>
        [JsonPropertyName("bic")]
        public string Bic { get { return this.BicOption; } set { this.BicOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DownloadUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DownloadUrlOption { get; private set; }

        /// <summary>
        /// The url to download payment details with.
        /// </summary>
        /// <value>The url to download payment details with.</value>
        [JsonPropertyName("downloadUrl")]
        public string DownloadUrl { get { return this.DownloadUrlOption; } set { this.DownloadUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Iban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IbanOption { get; private set; }

        /// <summary>
        /// The IBAN of the bank transfer.
        /// </summary>
        /// <value>The IBAN of the bank transfer.</value>
        [JsonPropertyName("iban")]
        public string Iban { get { return this.IbanOption; } set { this.IbanOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethodType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentMethodTypeOption { get; private set; }

        /// <summary>
        /// Specifies the payment method.
        /// </summary>
        /// <value>Specifies the payment method.</value>
        [JsonPropertyName("paymentMethodType")]
        public string PaymentMethodType { get { return this.PaymentMethodTypeOption; } set { this.PaymentMethodTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// The transfer reference.
        /// </summary>
        /// <value>The transfer reference.</value>
        [JsonPropertyName("reference")]
        public string Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RoutingNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RoutingNumberOption { get; private set; }

        /// <summary>
        /// The routing number of the bank transfer.
        /// </summary>
        /// <value>The routing number of the bank transfer.</value>
        [JsonPropertyName("routingNumber")]
        public string RoutingNumber { get { return this.RoutingNumberOption; } set { this.RoutingNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperEmailOption { get; private set; }

        /// <summary>
        /// The e-mail of the shopper, included if an e-mail was sent to the shopper.
        /// </summary>
        /// <value>The e-mail of the shopper, included if an e-mail was sent to the shopper.</value>
        [JsonPropertyName("shopperEmail")]
        public string ShopperEmail { get { return this.ShopperEmailOption; } set { this.ShopperEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SortCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SortCodeOption { get; private set; }

        /// <summary>
        /// The sort code of the bank transfer.
        /// </summary>
        /// <value>The sort code of the bank transfer.</value>
        [JsonPropertyName("sortCode")]
        public string SortCode { get { return this.SortCodeOption; } set { this.SortCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TotalAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> TotalAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [JsonPropertyName("totalAmount")]
        public Amount TotalAmount { get { return this.TotalAmountOption; } set { this.TotalAmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UrlOption { get; private set; }

        /// <summary>
        /// Specifies the URL to redirect to.
        /// </summary>
        /// <value>Specifies the URL to redirect to.</value>
        [JsonPropertyName("url")]
        public string Url { get { return this.UrlOption; } set { this.UrlOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutBankTransferAction {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Beneficiary: ").Append(Beneficiary).Append("\n");
            sb.Append("  Bic: ").Append(Bic).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  PaymentMethodType: ").Append(PaymentMethodType).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("  SortCode: ").Append(SortCode).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheckoutBankTransferAction" />
    /// </summary>
    public class CheckoutBankTransferActionJsonConverter : JsonConverter<CheckoutBankTransferAction>
    {
        /// <summary>
        /// Deserializes json to <see cref="CheckoutBankTransferAction" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CheckoutBankTransferAction Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CheckoutBankTransferAction.TypeEnum?> type = default;
            Option<string> accountNumber = default;
            Option<string> beneficiary = default;
            Option<string> bic = default;
            Option<string> downloadUrl = default;
            Option<string> iban = default;
            Option<string> paymentMethodType = default;
            Option<string> reference = default;
            Option<string> routingNumber = default;
            Option<string> shopperEmail = default;
            Option<string> sortCode = default;
            Option<Amount> totalAmount = default;
            Option<string> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CheckoutBankTransferAction.TypeEnum?>(CheckoutBankTransferAction.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "accountNumber":
                            accountNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "beneficiary":
                            beneficiary = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bic":
                            bic = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "downloadUrl":
                            downloadUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "iban":
                            iban = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentMethodType":
                            paymentMethodType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "routingNumber":
                            routingNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperEmail":
                            shopperEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sortCode":
                            sortCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "totalAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalAmount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class CheckoutBankTransferAction.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CheckoutBankTransferAction.");

            if (accountNumber.IsSet && accountNumber.Value == null)
                throw new ArgumentNullException(nameof(accountNumber), "Property is not nullable for class CheckoutBankTransferAction.");

            if (beneficiary.IsSet && beneficiary.Value == null)
                throw new ArgumentNullException(nameof(beneficiary), "Property is not nullable for class CheckoutBankTransferAction.");

            if (bic.IsSet && bic.Value == null)
                throw new ArgumentNullException(nameof(bic), "Property is not nullable for class CheckoutBankTransferAction.");

            if (downloadUrl.IsSet && downloadUrl.Value == null)
                throw new ArgumentNullException(nameof(downloadUrl), "Property is not nullable for class CheckoutBankTransferAction.");

            if (iban.IsSet && iban.Value == null)
                throw new ArgumentNullException(nameof(iban), "Property is not nullable for class CheckoutBankTransferAction.");

            if (paymentMethodType.IsSet && paymentMethodType.Value == null)
                throw new ArgumentNullException(nameof(paymentMethodType), "Property is not nullable for class CheckoutBankTransferAction.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class CheckoutBankTransferAction.");

            if (routingNumber.IsSet && routingNumber.Value == null)
                throw new ArgumentNullException(nameof(routingNumber), "Property is not nullable for class CheckoutBankTransferAction.");

            if (shopperEmail.IsSet && shopperEmail.Value == null)
                throw new ArgumentNullException(nameof(shopperEmail), "Property is not nullable for class CheckoutBankTransferAction.");

            if (sortCode.IsSet && sortCode.Value == null)
                throw new ArgumentNullException(nameof(sortCode), "Property is not nullable for class CheckoutBankTransferAction.");

            if (totalAmount.IsSet && totalAmount.Value == null)
                throw new ArgumentNullException(nameof(totalAmount), "Property is not nullable for class CheckoutBankTransferAction.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class CheckoutBankTransferAction.");

            return new CheckoutBankTransferAction(type.Value.Value, accountNumber, beneficiary, bic, downloadUrl, iban, paymentMethodType, reference, routingNumber, shopperEmail, sortCode, totalAmount, url);
        }

        /// <summary>
        /// Serializes a <see cref="CheckoutBankTransferAction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkoutBankTransferAction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CheckoutBankTransferAction checkoutBankTransferAction, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, checkoutBankTransferAction, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CheckoutBankTransferAction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkoutBankTransferAction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CheckoutBankTransferAction checkoutBankTransferAction, JsonSerializerOptions jsonSerializerOptions)
        {
            if (checkoutBankTransferAction.AccountNumberOption.IsSet && checkoutBankTransferAction.AccountNumber == null)
                throw new ArgumentNullException(nameof(checkoutBankTransferAction.AccountNumber), "Property is required for class CheckoutBankTransferAction.");

            if (checkoutBankTransferAction.BeneficiaryOption.IsSet && checkoutBankTransferAction.Beneficiary == null)
                throw new ArgumentNullException(nameof(checkoutBankTransferAction.Beneficiary), "Property is required for class CheckoutBankTransferAction.");

            if (checkoutBankTransferAction.BicOption.IsSet && checkoutBankTransferAction.Bic == null)
                throw new ArgumentNullException(nameof(checkoutBankTransferAction.Bic), "Property is required for class CheckoutBankTransferAction.");

            if (checkoutBankTransferAction.DownloadUrlOption.IsSet && checkoutBankTransferAction.DownloadUrl == null)
                throw new ArgumentNullException(nameof(checkoutBankTransferAction.DownloadUrl), "Property is required for class CheckoutBankTransferAction.");

            if (checkoutBankTransferAction.IbanOption.IsSet && checkoutBankTransferAction.Iban == null)
                throw new ArgumentNullException(nameof(checkoutBankTransferAction.Iban), "Property is required for class CheckoutBankTransferAction.");

            if (checkoutBankTransferAction.PaymentMethodTypeOption.IsSet && checkoutBankTransferAction.PaymentMethodType == null)
                throw new ArgumentNullException(nameof(checkoutBankTransferAction.PaymentMethodType), "Property is required for class CheckoutBankTransferAction.");

            if (checkoutBankTransferAction.ReferenceOption.IsSet && checkoutBankTransferAction.Reference == null)
                throw new ArgumentNullException(nameof(checkoutBankTransferAction.Reference), "Property is required for class CheckoutBankTransferAction.");

            if (checkoutBankTransferAction.RoutingNumberOption.IsSet && checkoutBankTransferAction.RoutingNumber == null)
                throw new ArgumentNullException(nameof(checkoutBankTransferAction.RoutingNumber), "Property is required for class CheckoutBankTransferAction.");

            if (checkoutBankTransferAction.ShopperEmailOption.IsSet && checkoutBankTransferAction.ShopperEmail == null)
                throw new ArgumentNullException(nameof(checkoutBankTransferAction.ShopperEmail), "Property is required for class CheckoutBankTransferAction.");

            if (checkoutBankTransferAction.SortCodeOption.IsSet && checkoutBankTransferAction.SortCode == null)
                throw new ArgumentNullException(nameof(checkoutBankTransferAction.SortCode), "Property is required for class CheckoutBankTransferAction.");

            if (checkoutBankTransferAction.TotalAmountOption.IsSet && checkoutBankTransferAction.TotalAmount == null)
                throw new ArgumentNullException(nameof(checkoutBankTransferAction.TotalAmount), "Property is required for class CheckoutBankTransferAction.");

            if (checkoutBankTransferAction.UrlOption.IsSet && checkoutBankTransferAction.Url == null)
                throw new ArgumentNullException(nameof(checkoutBankTransferAction.Url), "Property is required for class CheckoutBankTransferAction.");

            var typeRawValue = CheckoutBankTransferAction.TypeEnumToJsonValue(checkoutBankTransferAction.Type);
            writer.WriteString("type", typeRawValue);
            if (checkoutBankTransferAction.AccountNumberOption.IsSet)
                writer.WriteString("accountNumber", checkoutBankTransferAction.AccountNumber);

            if (checkoutBankTransferAction.BeneficiaryOption.IsSet)
                writer.WriteString("beneficiary", checkoutBankTransferAction.Beneficiary);

            if (checkoutBankTransferAction.BicOption.IsSet)
                writer.WriteString("bic", checkoutBankTransferAction.Bic);

            if (checkoutBankTransferAction.DownloadUrlOption.IsSet)
                writer.WriteString("downloadUrl", checkoutBankTransferAction.DownloadUrl);

            if (checkoutBankTransferAction.IbanOption.IsSet)
                writer.WriteString("iban", checkoutBankTransferAction.Iban);

            if (checkoutBankTransferAction.PaymentMethodTypeOption.IsSet)
                writer.WriteString("paymentMethodType", checkoutBankTransferAction.PaymentMethodType);

            if (checkoutBankTransferAction.ReferenceOption.IsSet)
                writer.WriteString("reference", checkoutBankTransferAction.Reference);

            if (checkoutBankTransferAction.RoutingNumberOption.IsSet)
                writer.WriteString("routingNumber", checkoutBankTransferAction.RoutingNumber);

            if (checkoutBankTransferAction.ShopperEmailOption.IsSet)
                writer.WriteString("shopperEmail", checkoutBankTransferAction.ShopperEmail);

            if (checkoutBankTransferAction.SortCodeOption.IsSet)
                writer.WriteString("sortCode", checkoutBankTransferAction.SortCode);

            if (checkoutBankTransferAction.TotalAmountOption.IsSet)
            {
                writer.WritePropertyName("totalAmount");
                JsonSerializer.Serialize(writer, checkoutBankTransferAction.TotalAmount, jsonSerializerOptions);
            }
            if (checkoutBankTransferAction.UrlOption.IsSet)
                writer.WriteString("url", checkoutBankTransferAction.Url);
        }
    }
}
