// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PixRecurring
    /// </summary>
    public partial class PixRecurring : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PixRecurring" /> class.
        /// </summary>
        /// <param name="billingDate">The date on which the shopper&#39;s payment method will be charged, in YYYY-MM-DD format.</param>
        /// <param name="endsAt">End date of the billing plan, in YYYY-MM-DD format. The end date must align with the frequency and the start date of the billing plan. If left blank, the subscription will continue indefinitely unless it is cancelled by the shopper.</param>
        /// <param name="frequency">The frequency at which the shopper will be charged.</param>
        /// <param name="minAmount">minAmount</param>
        /// <param name="originalPspReference">The pspReference for the failed recurring payment. Find this in AUTHORISATION webhook you received after the billing date.</param>
        /// <param name="recurringAmount">recurringAmount</param>
        /// <param name="recurringStatement">The text that that will be shown on the shopper&#39;s bank statement for the recurring payments. We recommend to add a descriptive text about the subscription to let your shoppers recognize your recurring payments. Maximum length: 35 characters.</param>
        /// <param name="retryPolicy">When set to true, you can retry for failed recurring payments. The default value is true.</param>
        /// <param name="startsAt">Start date of the billing plan, in YYYY-MM-DD format. The default value is the transaction date.</param>
        [JsonConstructor]
        public PixRecurring(Option<string> billingDate = default, Option<string> endsAt = default, Option<FrequencyEnum?> frequency = default, Option<Amount> minAmount = default, Option<string> originalPspReference = default, Option<Amount> recurringAmount = default, Option<string> recurringStatement = default, Option<bool?> retryPolicy = default, Option<string> startsAt = default)
        {
            BillingDateOption = billingDate;
            EndsAtOption = endsAt;
            FrequencyOption = frequency;
            MinAmountOption = minAmount;
            OriginalPspReferenceOption = originalPspReference;
            RecurringAmountOption = recurringAmount;
            RecurringStatementOption = recurringStatement;
            RetryPolicyOption = retryPolicy;
            StartsAtOption = startsAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The frequency at which the shopper will be charged.
        /// </summary>
        /// <value>The frequency at which the shopper will be charged.</value>
        public enum FrequencyEnum
        {
            /// <summary>
            /// Enum Weekly for value: weekly
            /// </summary>
            Weekly = 1,

            /// <summary>
            /// Enum Monthly for value: monthly
            /// </summary>
            Monthly = 2,

            /// <summary>
            /// Enum Quarterly for value: quarterly
            /// </summary>
            Quarterly = 3,

            /// <summary>
            /// Enum HalfYearly for value: half-yearly
            /// </summary>
            HalfYearly = 4,

            /// <summary>
            /// Enum Yearly for value: yearly
            /// </summary>
            Yearly = 5
        }

        /// <summary>
        /// Returns a <see cref="FrequencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FrequencyEnum FrequencyEnumFromString(string value)
        {
            if (value.Equals("weekly"))
                return FrequencyEnum.Weekly;

            if (value.Equals("monthly"))
                return FrequencyEnum.Monthly;

            if (value.Equals("quarterly"))
                return FrequencyEnum.Quarterly;

            if (value.Equals("half-yearly"))
                return FrequencyEnum.HalfYearly;

            if (value.Equals("yearly"))
                return FrequencyEnum.Yearly;

            throw new NotImplementedException($"Could not convert value to type FrequencyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FrequencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FrequencyEnum? FrequencyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("weekly"))
                return FrequencyEnum.Weekly;

            if (value.Equals("monthly"))
                return FrequencyEnum.Monthly;

            if (value.Equals("quarterly"))
                return FrequencyEnum.Quarterly;

            if (value.Equals("half-yearly"))
                return FrequencyEnum.HalfYearly;

            if (value.Equals("yearly"))
                return FrequencyEnum.Yearly;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FrequencyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FrequencyEnumToJsonValue(FrequencyEnum? value)
        {
            if (value == FrequencyEnum.Weekly)
                return "weekly";

            if (value == FrequencyEnum.Monthly)
                return "monthly";

            if (value == FrequencyEnum.Quarterly)
                return "quarterly";

            if (value == FrequencyEnum.HalfYearly)
                return "half-yearly";

            if (value == FrequencyEnum.Yearly)
                return "yearly";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Frequency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FrequencyEnum?> FrequencyOption { get; private set; }

        /// <summary>
        /// The frequency at which the shopper will be charged.
        /// </summary>
        /// <value>The frequency at which the shopper will be charged.</value>
        [JsonPropertyName("frequency")]
        public FrequencyEnum? Frequency { get { return this.FrequencyOption; } set { this.FrequencyOption = new Option<FrequencyEnum?>(value); } }

        /// <summary>
        /// Used to track the state of BillingDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BillingDateOption { get; private set; }

        /// <summary>
        /// The date on which the shopper&#39;s payment method will be charged, in YYYY-MM-DD format.
        /// </summary>
        /// <value>The date on which the shopper&#39;s payment method will be charged, in YYYY-MM-DD format.</value>
        [JsonPropertyName("billingDate")]
        public string BillingDate { get { return this.BillingDateOption; } set { this.BillingDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EndsAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EndsAtOption { get; private set; }

        /// <summary>
        /// End date of the billing plan, in YYYY-MM-DD format. The end date must align with the frequency and the start date of the billing plan. If left blank, the subscription will continue indefinitely unless it is cancelled by the shopper.
        /// </summary>
        /// <value>End date of the billing plan, in YYYY-MM-DD format. The end date must align with the frequency and the start date of the billing plan. If left blank, the subscription will continue indefinitely unless it is cancelled by the shopper.</value>
        [JsonPropertyName("endsAt")]
        public string EndsAt { get { return this.EndsAtOption; } set { this.EndsAtOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MinAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> MinAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets MinAmount
        /// </summary>
        [JsonPropertyName("minAmount")]
        public Amount MinAmount { get { return this.MinAmountOption; } set { this.MinAmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of OriginalPspReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OriginalPspReferenceOption { get; private set; }

        /// <summary>
        /// The pspReference for the failed recurring payment. Find this in AUTHORISATION webhook you received after the billing date.
        /// </summary>
        /// <value>The pspReference for the failed recurring payment. Find this in AUTHORISATION webhook you received after the billing date.</value>
        [JsonPropertyName("originalPspReference")]
        public string OriginalPspReference { get { return this.OriginalPspReferenceOption; } set { this.OriginalPspReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecurringAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> RecurringAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets RecurringAmount
        /// </summary>
        [JsonPropertyName("recurringAmount")]
        public Amount RecurringAmount { get { return this.RecurringAmountOption; } set { this.RecurringAmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of RecurringStatement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringStatementOption { get; private set; }

        /// <summary>
        /// The text that that will be shown on the shopper&#39;s bank statement for the recurring payments. We recommend to add a descriptive text about the subscription to let your shoppers recognize your recurring payments. Maximum length: 35 characters.
        /// </summary>
        /// <value>The text that that will be shown on the shopper&#39;s bank statement for the recurring payments. We recommend to add a descriptive text about the subscription to let your shoppers recognize your recurring payments. Maximum length: 35 characters.</value>
        [JsonPropertyName("recurringStatement")]
        public string RecurringStatement { get { return this.RecurringStatementOption; } set { this.RecurringStatementOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RetryPolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RetryPolicyOption { get; private set; }

        /// <summary>
        /// When set to true, you can retry for failed recurring payments. The default value is true.
        /// </summary>
        /// <value>When set to true, you can retry for failed recurring payments. The default value is true.</value>
        [JsonPropertyName("retryPolicy")]
        public bool? RetryPolicy { get { return this.RetryPolicyOption; } set { this.RetryPolicyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of StartsAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StartsAtOption { get; private set; }

        /// <summary>
        /// Start date of the billing plan, in YYYY-MM-DD format. The default value is the transaction date.
        /// </summary>
        /// <value>Start date of the billing plan, in YYYY-MM-DD format. The default value is the transaction date.</value>
        [JsonPropertyName("startsAt")]
        public string StartsAt { get { return this.StartsAtOption; } set { this.StartsAtOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PixRecurring {\n");
            sb.Append("  BillingDate: ").Append(BillingDate).Append("\n");
            sb.Append("  EndsAt: ").Append(EndsAt).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  MinAmount: ").Append(MinAmount).Append("\n");
            sb.Append("  OriginalPspReference: ").Append(OriginalPspReference).Append("\n");
            sb.Append("  RecurringAmount: ").Append(RecurringAmount).Append("\n");
            sb.Append("  RecurringStatement: ").Append(RecurringStatement).Append("\n");
            sb.Append("  RetryPolicy: ").Append(RetryPolicy).Append("\n");
            sb.Append("  StartsAt: ").Append(StartsAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PixRecurring" />
    /// </summary>
    public class PixRecurringJsonConverter : JsonConverter<PixRecurring>
    {
        /// <summary>
        /// Deserializes json to <see cref="PixRecurring" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PixRecurring Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> billingDate = default;
            Option<string> endsAt = default;
            Option<PixRecurring.FrequencyEnum?> frequency = default;
            Option<Amount> minAmount = default;
            Option<string> originalPspReference = default;
            Option<Amount> recurringAmount = default;
            Option<string> recurringStatement = default;
            Option<bool?> retryPolicy = default;
            Option<string> startsAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "billingDate":
                            billingDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "endsAt":
                            endsAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "frequency":
                            string frequencyRawValue = utf8JsonReader.GetString();
                            if (frequencyRawValue != null)
                                frequency = new Option<PixRecurring.FrequencyEnum?>(PixRecurring.FrequencyEnumFromStringOrDefault(frequencyRawValue));
                            break;
                        case "minAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minAmount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "originalPspReference":
                            originalPspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurringAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                recurringAmount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recurringStatement":
                            recurringStatement = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "retryPolicy":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                retryPolicy = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "startsAt":
                            startsAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (billingDate.IsSet && billingDate.Value == null)
                throw new ArgumentNullException(nameof(billingDate), "Property is not nullable for class PixRecurring.");

            if (endsAt.IsSet && endsAt.Value == null)
                throw new ArgumentNullException(nameof(endsAt), "Property is not nullable for class PixRecurring.");

            if (frequency.IsSet && frequency.Value == null)
                throw new ArgumentNullException(nameof(frequency), "Property is not nullable for class PixRecurring.");

            if (minAmount.IsSet && minAmount.Value == null)
                throw new ArgumentNullException(nameof(minAmount), "Property is not nullable for class PixRecurring.");

            if (originalPspReference.IsSet && originalPspReference.Value == null)
                throw new ArgumentNullException(nameof(originalPspReference), "Property is not nullable for class PixRecurring.");

            if (recurringAmount.IsSet && recurringAmount.Value == null)
                throw new ArgumentNullException(nameof(recurringAmount), "Property is not nullable for class PixRecurring.");

            if (recurringStatement.IsSet && recurringStatement.Value == null)
                throw new ArgumentNullException(nameof(recurringStatement), "Property is not nullable for class PixRecurring.");

            if (retryPolicy.IsSet && retryPolicy.Value == null)
                throw new ArgumentNullException(nameof(retryPolicy), "Property is not nullable for class PixRecurring.");

            if (startsAt.IsSet && startsAt.Value == null)
                throw new ArgumentNullException(nameof(startsAt), "Property is not nullable for class PixRecurring.");

            return new PixRecurring(billingDate, endsAt, frequency, minAmount, originalPspReference, recurringAmount, recurringStatement, retryPolicy, startsAt);
        }

        /// <summary>
        /// Serializes a <see cref="PixRecurring" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pixRecurring"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PixRecurring pixRecurring, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pixRecurring, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PixRecurring" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pixRecurring"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PixRecurring pixRecurring, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pixRecurring.BillingDateOption.IsSet && pixRecurring.BillingDate == null)
                throw new ArgumentNullException(nameof(pixRecurring.BillingDate), "Property is required for class PixRecurring.");

            if (pixRecurring.EndsAtOption.IsSet && pixRecurring.EndsAt == null)
                throw new ArgumentNullException(nameof(pixRecurring.EndsAt), "Property is required for class PixRecurring.");

            if (pixRecurring.MinAmountOption.IsSet && pixRecurring.MinAmount == null)
                throw new ArgumentNullException(nameof(pixRecurring.MinAmount), "Property is required for class PixRecurring.");

            if (pixRecurring.OriginalPspReferenceOption.IsSet && pixRecurring.OriginalPspReference == null)
                throw new ArgumentNullException(nameof(pixRecurring.OriginalPspReference), "Property is required for class PixRecurring.");

            if (pixRecurring.RecurringAmountOption.IsSet && pixRecurring.RecurringAmount == null)
                throw new ArgumentNullException(nameof(pixRecurring.RecurringAmount), "Property is required for class PixRecurring.");

            if (pixRecurring.RecurringStatementOption.IsSet && pixRecurring.RecurringStatement == null)
                throw new ArgumentNullException(nameof(pixRecurring.RecurringStatement), "Property is required for class PixRecurring.");

            if (pixRecurring.StartsAtOption.IsSet && pixRecurring.StartsAt == null)
                throw new ArgumentNullException(nameof(pixRecurring.StartsAt), "Property is required for class PixRecurring.");

            if (pixRecurring.BillingDateOption.IsSet)
                writer.WriteString("billingDate", pixRecurring.BillingDate);

            if (pixRecurring.EndsAtOption.IsSet)
                writer.WriteString("endsAt", pixRecurring.EndsAt);

            var frequencyRawValue = PixRecurring.FrequencyEnumToJsonValue(pixRecurring.FrequencyOption.Value.Value);
            writer.WriteString("frequency", frequencyRawValue);
            if (pixRecurring.MinAmountOption.IsSet)
            {
                writer.WritePropertyName("minAmount");
                JsonSerializer.Serialize(writer, pixRecurring.MinAmount, jsonSerializerOptions);
            }
            if (pixRecurring.OriginalPspReferenceOption.IsSet)
                writer.WriteString("originalPspReference", pixRecurring.OriginalPspReference);

            if (pixRecurring.RecurringAmountOption.IsSet)
            {
                writer.WritePropertyName("recurringAmount");
                JsonSerializer.Serialize(writer, pixRecurring.RecurringAmount, jsonSerializerOptions);
            }
            if (pixRecurring.RecurringStatementOption.IsSet)
                writer.WriteString("recurringStatement", pixRecurring.RecurringStatement);

            if (pixRecurring.RetryPolicyOption.IsSet)
                writer.WriteBoolean("retryPolicy", pixRecurring.RetryPolicyOption.Value.Value);

            if (pixRecurring.StartsAtOption.IsSet)
                writer.WriteString("startsAt", pixRecurring.StartsAt);
        }
    }
}
