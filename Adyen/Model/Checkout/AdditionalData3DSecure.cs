// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalData3DSecure
    /// </summary>
    public partial class AdditionalData3DSecure : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalData3DSecure" /> class.
        /// </summary>
        /// <param name="allow3DS2">Indicates if you are able to process 3D Secure 2 transactions natively on your payment page. Send this parameter when you are using &#x60;/payments&#x60; endpoint with any of our [native 3D Secure 2 solutions](https://docs.adyen.com/online-payments/3d-secure/native-3ds2).   &gt; This parameter only indicates readiness to support native 3D Secure 2 authentication. To specify if you _want_ to perform 3D Secure, use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) or send the &#x60;executeThreeD&#x60; parameter.  Possible values: * **true** - Ready to support native 3D Secure 2 authentication. Setting this to true does not mean always applying 3D Secure 2. Adyen selects redirect or native authentication based on your configuration to optimize authorization rates and improve the shopper&#39;s experience. * **false** – Not ready to support native 3D Secure 2 authentication. Adyen offers redirect 3D Secure 2 authentication instead, based on your configuration. </param>
        /// <param name="challengeWindowSize">Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen</param>
        /// <param name="executeThreeD">Indicates if you want to perform 3D Secure authentication on a transaction.   &gt; Alternatively, you can use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) to configure rules for applying 3D Secure.  Possible values: * **true** – Perform 3D Secure authentication. * **false** – Don&#39;t perform 3D Secure authentication. Note that this setting results in refusals if the issuer mandates 3D Secure because of the PSD2 directive  or other, national regulations.  </param>
        /// <param name="mpiImplementationType">In case of Secure+, this field must be set to **CUPSecurePlus**.</param>
        /// <param name="scaExemption">Indicates the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that you want to request for the transaction.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** </param>
        /// <param name="threeDSVersion">Indicates your preference for the 3D Secure version.  &gt; If you use this parameter, you override the checks from Adyen&#39;s Authentication Engine. We recommend to use this field only if you have an extensive knowledge of 3D Secure.  Possible values: * **2.1.0**: Apply 3D Secure version 2.1.0.  * **2.2.0**: Apply 3D Secure version 2.2.0. If the issuer does not support version 2.2.0, we will fall back to 2.1.0.  The following rules apply: * If you prefer 2.1.0 or 2.2.0 but we receive a negative &#x60;transStatus&#x60; in the &#x60;ARes&#x60;, we will apply the fallback policy configured in your account. * If you the BIN is not enrolled, you will receive an error.  </param>
        [JsonConstructor]
        public AdditionalData3DSecure(Option<string> allow3DS2 = default, Option<ChallengeWindowSizeEnum?> challengeWindowSize = default, Option<string> executeThreeD = default, Option<string> mpiImplementationType = default, Option<string> scaExemption = default, Option<string> threeDSVersion = default)
        {
            Allow3DS2Option = allow3DS2;
            ChallengeWindowSizeOption = challengeWindowSize;
            ExecuteThreeDOption = executeThreeD;
            MpiImplementationTypeOption = mpiImplementationType;
            ScaExemptionOption = scaExemption;
            ThreeDSVersionOption = threeDSVersion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen
        /// </summary>
        /// <value>Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen</value>
        public enum ChallengeWindowSizeEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            _05 = 5
        }

        /// <summary>
        /// Returns a <see cref="ChallengeWindowSizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ChallengeWindowSizeEnum ChallengeWindowSizeEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ChallengeWindowSizeEnum._01;

            if (value.Equals("02"))
                return ChallengeWindowSizeEnum._02;

            if (value.Equals("03"))
                return ChallengeWindowSizeEnum._03;

            if (value.Equals("04"))
                return ChallengeWindowSizeEnum._04;

            if (value.Equals("05"))
                return ChallengeWindowSizeEnum._05;

            throw new NotImplementedException($"Could not convert value to type ChallengeWindowSizeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ChallengeWindowSizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChallengeWindowSizeEnum? ChallengeWindowSizeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ChallengeWindowSizeEnum._01;

            if (value.Equals("02"))
                return ChallengeWindowSizeEnum._02;

            if (value.Equals("03"))
                return ChallengeWindowSizeEnum._03;

            if (value.Equals("04"))
                return ChallengeWindowSizeEnum._04;

            if (value.Equals("05"))
                return ChallengeWindowSizeEnum._05;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChallengeWindowSizeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ChallengeWindowSizeEnumToJsonValue(ChallengeWindowSizeEnum? value)
        {
            if (value == ChallengeWindowSizeEnum._01)
                return "01";

            if (value == ChallengeWindowSizeEnum._02)
                return "02";

            if (value == ChallengeWindowSizeEnum._03)
                return "03";

            if (value == ChallengeWindowSizeEnum._04)
                return "04";

            if (value == ChallengeWindowSizeEnum._05)
                return "05";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ChallengeWindowSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChallengeWindowSizeEnum?> ChallengeWindowSizeOption { get; private set; }

        /// <summary>
        /// Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen
        /// </summary>
        /// <value>Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen</value>
        [JsonPropertyName("challengeWindowSize")]
        public ChallengeWindowSizeEnum? ChallengeWindowSize { get { return this.ChallengeWindowSizeOption; } set { this.ChallengeWindowSizeOption = new Option<ChallengeWindowSizeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Allow3DS2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> Allow3DS2Option { get; private set; }

        /// <summary>
        /// Indicates if you are able to process 3D Secure 2 transactions natively on your payment page. Send this parameter when you are using &#x60;/payments&#x60; endpoint with any of our [native 3D Secure 2 solutions](https://docs.adyen.com/online-payments/3d-secure/native-3ds2).   &gt; This parameter only indicates readiness to support native 3D Secure 2 authentication. To specify if you _want_ to perform 3D Secure, use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) or send the &#x60;executeThreeD&#x60; parameter.  Possible values: * **true** - Ready to support native 3D Secure 2 authentication. Setting this to true does not mean always applying 3D Secure 2. Adyen selects redirect or native authentication based on your configuration to optimize authorization rates and improve the shopper&#39;s experience. * **false** – Not ready to support native 3D Secure 2 authentication. Adyen offers redirect 3D Secure 2 authentication instead, based on your configuration. 
        /// </summary>
        /// <value>Indicates if you are able to process 3D Secure 2 transactions natively on your payment page. Send this parameter when you are using &#x60;/payments&#x60; endpoint with any of our [native 3D Secure 2 solutions](https://docs.adyen.com/online-payments/3d-secure/native-3ds2).   &gt; This parameter only indicates readiness to support native 3D Secure 2 authentication. To specify if you _want_ to perform 3D Secure, use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) or send the &#x60;executeThreeD&#x60; parameter.  Possible values: * **true** - Ready to support native 3D Secure 2 authentication. Setting this to true does not mean always applying 3D Secure 2. Adyen selects redirect or native authentication based on your configuration to optimize authorization rates and improve the shopper&#39;s experience. * **false** – Not ready to support native 3D Secure 2 authentication. Adyen offers redirect 3D Secure 2 authentication instead, based on your configuration. </value>
        [JsonPropertyName("allow3DS2")]
        [Obsolete]
        public string Allow3DS2 { get { return this.Allow3DS2Option; } set { this.Allow3DS2Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExecuteThreeD
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExecuteThreeDOption { get; private set; }

        /// <summary>
        /// Indicates if you want to perform 3D Secure authentication on a transaction.   &gt; Alternatively, you can use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) to configure rules for applying 3D Secure.  Possible values: * **true** – Perform 3D Secure authentication. * **false** – Don&#39;t perform 3D Secure authentication. Note that this setting results in refusals if the issuer mandates 3D Secure because of the PSD2 directive  or other, national regulations.  
        /// </summary>
        /// <value>Indicates if you want to perform 3D Secure authentication on a transaction.   &gt; Alternatively, you can use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) to configure rules for applying 3D Secure.  Possible values: * **true** – Perform 3D Secure authentication. * **false** – Don&#39;t perform 3D Secure authentication. Note that this setting results in refusals if the issuer mandates 3D Secure because of the PSD2 directive  or other, national regulations.  </value>
        [JsonPropertyName("executeThreeD")]
        [Obsolete]
        public string ExecuteThreeD { get { return this.ExecuteThreeDOption; } set { this.ExecuteThreeDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MpiImplementationType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MpiImplementationTypeOption { get; private set; }

        /// <summary>
        /// In case of Secure+, this field must be set to **CUPSecurePlus**.
        /// </summary>
        /// <value>In case of Secure+, this field must be set to **CUPSecurePlus**.</value>
        [JsonPropertyName("mpiImplementationType")]
        public string MpiImplementationType { get { return this.MpiImplementationTypeOption; } set { this.MpiImplementationTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ScaExemption
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ScaExemptionOption { get; private set; }

        /// <summary>
        /// Indicates the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that you want to request for the transaction.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** 
        /// </summary>
        /// <value>Indicates the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that you want to request for the transaction.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** </value>
        [JsonPropertyName("scaExemption")]
        public string ScaExemption { get { return this.ScaExemptionOption; } set { this.ScaExemptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSVersionOption { get; private set; }

        /// <summary>
        /// Indicates your preference for the 3D Secure version.  &gt; If you use this parameter, you override the checks from Adyen&#39;s Authentication Engine. We recommend to use this field only if you have an extensive knowledge of 3D Secure.  Possible values: * **2.1.0**: Apply 3D Secure version 2.1.0.  * **2.2.0**: Apply 3D Secure version 2.2.0. If the issuer does not support version 2.2.0, we will fall back to 2.1.0.  The following rules apply: * If you prefer 2.1.0 or 2.2.0 but we receive a negative &#x60;transStatus&#x60; in the &#x60;ARes&#x60;, we will apply the fallback policy configured in your account. * If you the BIN is not enrolled, you will receive an error.  
        /// </summary>
        /// <value>Indicates your preference for the 3D Secure version.  &gt; If you use this parameter, you override the checks from Adyen&#39;s Authentication Engine. We recommend to use this field only if you have an extensive knowledge of 3D Secure.  Possible values: * **2.1.0**: Apply 3D Secure version 2.1.0.  * **2.2.0**: Apply 3D Secure version 2.2.0. If the issuer does not support version 2.2.0, we will fall back to 2.1.0.  The following rules apply: * If you prefer 2.1.0 or 2.2.0 but we receive a negative &#x60;transStatus&#x60; in the &#x60;ARes&#x60;, we will apply the fallback policy configured in your account. * If you the BIN is not enrolled, you will receive an error.  </value>
        [JsonPropertyName("threeDSVersion")]
        public string ThreeDSVersion { get { return this.ThreeDSVersionOption; } set { this.ThreeDSVersionOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalData3DSecure {\n");
            sb.Append("  Allow3DS2: ").Append(Allow3DS2).Append("\n");
            sb.Append("  ChallengeWindowSize: ").Append(ChallengeWindowSize).Append("\n");
            sb.Append("  ExecuteThreeD: ").Append(ExecuteThreeD).Append("\n");
            sb.Append("  MpiImplementationType: ").Append(MpiImplementationType).Append("\n");
            sb.Append("  ScaExemption: ").Append(ScaExemption).Append("\n");
            sb.Append("  ThreeDSVersion: ").Append(ThreeDSVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalData3DSecure" />
    /// </summary>
    public class AdditionalData3DSecureJsonConverter : JsonConverter<AdditionalData3DSecure>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalData3DSecure" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalData3DSecure Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> allow3DS2 = default;
            Option<AdditionalData3DSecure.ChallengeWindowSizeEnum?> challengeWindowSize = default;
            Option<string> executeThreeD = default;
            Option<string> mpiImplementationType = default;
            Option<string> scaExemption = default;
            Option<string> threeDSVersion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "allow3DS2":
                            allow3DS2 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "challengeWindowSize":
                            string challengeWindowSizeRawValue = utf8JsonReader.GetString();
                            if (challengeWindowSizeRawValue != null)
                                challengeWindowSize = new Option<AdditionalData3DSecure.ChallengeWindowSizeEnum?>(AdditionalData3DSecure.ChallengeWindowSizeEnumFromStringOrDefault(challengeWindowSizeRawValue));
                            break;
                        case "executeThreeD":
                            executeThreeD = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mpiImplementationType":
                            mpiImplementationType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "scaExemption":
                            scaExemption = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDSVersion":
                            threeDSVersion = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (allow3DS2.IsSet && allow3DS2.Value == null)
                throw new ArgumentNullException(nameof(allow3DS2), "Property is not nullable for class AdditionalData3DSecure.");

            if (challengeWindowSize.IsSet && challengeWindowSize.Value == null)
                throw new ArgumentNullException(nameof(challengeWindowSize), "Property is not nullable for class AdditionalData3DSecure.");

            if (executeThreeD.IsSet && executeThreeD.Value == null)
                throw new ArgumentNullException(nameof(executeThreeD), "Property is not nullable for class AdditionalData3DSecure.");

            if (mpiImplementationType.IsSet && mpiImplementationType.Value == null)
                throw new ArgumentNullException(nameof(mpiImplementationType), "Property is not nullable for class AdditionalData3DSecure.");

            if (scaExemption.IsSet && scaExemption.Value == null)
                throw new ArgumentNullException(nameof(scaExemption), "Property is not nullable for class AdditionalData3DSecure.");

            if (threeDSVersion.IsSet && threeDSVersion.Value == null)
                throw new ArgumentNullException(nameof(threeDSVersion), "Property is not nullable for class AdditionalData3DSecure.");

            return new AdditionalData3DSecure(allow3DS2, challengeWindowSize, executeThreeD, mpiImplementationType, scaExemption, threeDSVersion);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalData3DSecure" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalData3DSecure"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalData3DSecure additionalData3DSecure, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalData3DSecure, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalData3DSecure" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalData3DSecure"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalData3DSecure additionalData3DSecure, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalData3DSecure.Allow3DS2Option.IsSet && additionalData3DSecure.Allow3DS2 == null)
                throw new ArgumentNullException(nameof(additionalData3DSecure.Allow3DS2), "Property is required for class AdditionalData3DSecure.");

            if (additionalData3DSecure.ExecuteThreeDOption.IsSet && additionalData3DSecure.ExecuteThreeD == null)
                throw new ArgumentNullException(nameof(additionalData3DSecure.ExecuteThreeD), "Property is required for class AdditionalData3DSecure.");

            if (additionalData3DSecure.MpiImplementationTypeOption.IsSet && additionalData3DSecure.MpiImplementationType == null)
                throw new ArgumentNullException(nameof(additionalData3DSecure.MpiImplementationType), "Property is required for class AdditionalData3DSecure.");

            if (additionalData3DSecure.ScaExemptionOption.IsSet && additionalData3DSecure.ScaExemption == null)
                throw new ArgumentNullException(nameof(additionalData3DSecure.ScaExemption), "Property is required for class AdditionalData3DSecure.");

            if (additionalData3DSecure.ThreeDSVersionOption.IsSet && additionalData3DSecure.ThreeDSVersion == null)
                throw new ArgumentNullException(nameof(additionalData3DSecure.ThreeDSVersion), "Property is required for class AdditionalData3DSecure.");

            if (additionalData3DSecure.Allow3DS2Option.IsSet)
                writer.WriteString("allow3DS2", additionalData3DSecure.Allow3DS2);

            var challengeWindowSizeRawValue = AdditionalData3DSecure.ChallengeWindowSizeEnumToJsonValue(additionalData3DSecure.ChallengeWindowSizeOption.Value.Value);
            writer.WriteString("challengeWindowSize", challengeWindowSizeRawValue);
            if (additionalData3DSecure.ExecuteThreeDOption.IsSet)
                writer.WriteString("executeThreeD", additionalData3DSecure.ExecuteThreeD);

            if (additionalData3DSecure.MpiImplementationTypeOption.IsSet)
                writer.WriteString("mpiImplementationType", additionalData3DSecure.MpiImplementationType);

            if (additionalData3DSecure.ScaExemptionOption.IsSet)
                writer.WriteString("scaExemption", additionalData3DSecure.ScaExemption);

            if (additionalData3DSecure.ThreeDSVersionOption.IsSet)
                writer.WriteString("threeDSVersion", additionalData3DSecure.ThreeDSVersion);
        }
    }
}
