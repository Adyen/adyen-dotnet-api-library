/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Leg
    /// </summary>
    [DataContract(Name = "Leg")]
    public partial class Leg : IEquatable<Leg>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Leg" /> class.
        /// </summary>
        /// <param name="carrierCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not start with a space or be all spaces. * Must not be all zeros..</param>
        /// <param name="classOfTravel">A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not start with a space or be all spaces. * Must not be all zeros..</param>
        /// <param name="dateOfTravel">Date and time of travel in format &#x60;yyyy-MM-ddTHH:mm&#x60;. * Use local time of departure airport. * minLength: 16 characters * maxLength: 16 characters.</param>
        /// <param name="departureAirportCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros..</param>
        /// <param name="departureTax">The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 11 * Must not be all zeros..</param>
        /// <param name="destinationAirportCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros..</param>
        /// <param name="fareBasisCode">The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 15 characters * Must not start with a space or be all spaces. * Must not be all zeros..</param>
        /// <param name="flightNumber">The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not start with a space or be all spaces. * Must not be all zeros..</param>
        /// <param name="stopOverCode">A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character.</param>
        public Leg(string carrierCode = default(string), string classOfTravel = default(string), DateTime dateOfTravel = default(DateTime), string departureAirportCode = default(string), long? departureTax = default(long?), string destinationAirportCode = default(string), string fareBasisCode = default(string), string flightNumber = default(string), string stopOverCode = default(string))
        {
            this.CarrierCode = carrierCode;
            this.ClassOfTravel = classOfTravel;
            this.DateOfTravel = dateOfTravel;
            this.DepartureAirportCode = departureAirportCode;
            this.DepartureTax = departureTax;
            this.DestinationAirportCode = destinationAirportCode;
            this.FareBasisCode = fareBasisCode;
            this.FlightNumber = flightNumber;
            this.StopOverCode = stopOverCode;
        }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [DataMember(Name = "carrierCode", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [DataMember(Name = "classOfTravel", EmitDefaultValue = false)]
        public string ClassOfTravel { get; set; }

        /// <summary>
        /// Date and time of travel in format &#x60;yyyy-MM-ddTHH:mm&#x60;. * Use local time of departure airport. * minLength: 16 characters * maxLength: 16 characters
        /// </summary>
        /// <value>Date and time of travel in format &#x60;yyyy-MM-ddTHH:mm&#x60;. * Use local time of departure airport. * minLength: 16 characters * maxLength: 16 characters</value>
        [DataMember(Name = "dateOfTravel", EmitDefaultValue = false)]
        public DateTime DateOfTravel { get; set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [DataMember(Name = "departureAirportCode", EmitDefaultValue = false)]
        public string DepartureAirportCode { get; set; }

        /// <summary>
        /// The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 11 * Must not be all zeros.
        /// </summary>
        /// <value>The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 11 * Must not be all zeros.</value>
        [DataMember(Name = "departureTax", EmitDefaultValue = false)]
        public long? DepartureTax { get; set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [DataMember(Name = "destinationAirportCode", EmitDefaultValue = false)]
        public string DestinationAirportCode { get; set; }

        /// <summary>
        /// The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 15 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 15 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [DataMember(Name = "fareBasisCode", EmitDefaultValue = false)]
        public string FareBasisCode { get; set; }

        /// <summary>
        /// The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [DataMember(Name = "flightNumber", EmitDefaultValue = false)]
        public string FlightNumber { get; set; }

        /// <summary>
        /// A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character
        /// </summary>
        /// <value>A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character</value>
        [DataMember(Name = "stopOverCode", EmitDefaultValue = false)]
        public string StopOverCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Leg {\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  ClassOfTravel: ").Append(ClassOfTravel).Append("\n");
            sb.Append("  DateOfTravel: ").Append(DateOfTravel).Append("\n");
            sb.Append("  DepartureAirportCode: ").Append(DepartureAirportCode).Append("\n");
            sb.Append("  DepartureTax: ").Append(DepartureTax).Append("\n");
            sb.Append("  DestinationAirportCode: ").Append(DestinationAirportCode).Append("\n");
            sb.Append("  FareBasisCode: ").Append(FareBasisCode).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  StopOverCode: ").Append(StopOverCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Leg);
        }

        /// <summary>
        /// Returns true if Leg instances are equal
        /// </summary>
        /// <param name="input">Instance of Leg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Leg input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CarrierCode == input.CarrierCode ||
                    (this.CarrierCode != null &&
                    this.CarrierCode.Equals(input.CarrierCode))
                ) && 
                (
                    this.ClassOfTravel == input.ClassOfTravel ||
                    (this.ClassOfTravel != null &&
                    this.ClassOfTravel.Equals(input.ClassOfTravel))
                ) && 
                (
                    this.DateOfTravel == input.DateOfTravel ||
                    (this.DateOfTravel != null &&
                    this.DateOfTravel.Equals(input.DateOfTravel))
                ) && 
                (
                    this.DepartureAirportCode == input.DepartureAirportCode ||
                    (this.DepartureAirportCode != null &&
                    this.DepartureAirportCode.Equals(input.DepartureAirportCode))
                ) && 
                (
                    this.DepartureTax == input.DepartureTax ||
                    this.DepartureTax.Equals(input.DepartureTax)
                ) && 
                (
                    this.DestinationAirportCode == input.DestinationAirportCode ||
                    (this.DestinationAirportCode != null &&
                    this.DestinationAirportCode.Equals(input.DestinationAirportCode))
                ) && 
                (
                    this.FareBasisCode == input.FareBasisCode ||
                    (this.FareBasisCode != null &&
                    this.FareBasisCode.Equals(input.FareBasisCode))
                ) && 
                (
                    this.FlightNumber == input.FlightNumber ||
                    (this.FlightNumber != null &&
                    this.FlightNumber.Equals(input.FlightNumber))
                ) && 
                (
                    this.StopOverCode == input.StopOverCode ||
                    (this.StopOverCode != null &&
                    this.StopOverCode.Equals(input.StopOverCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CarrierCode != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierCode.GetHashCode();
                }
                if (this.ClassOfTravel != null)
                {
                    hashCode = (hashCode * 59) + this.ClassOfTravel.GetHashCode();
                }
                if (this.DateOfTravel != null)
                {
                    hashCode = (hashCode * 59) + this.DateOfTravel.GetHashCode();
                }
                if (this.DepartureAirportCode != null)
                {
                    hashCode = (hashCode * 59) + this.DepartureAirportCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DepartureTax.GetHashCode();
                if (this.DestinationAirportCode != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationAirportCode.GetHashCode();
                }
                if (this.FareBasisCode != null)
                {
                    hashCode = (hashCode * 59) + this.FareBasisCode.GetHashCode();
                }
                if (this.FlightNumber != null)
                {
                    hashCode = (hashCode * 59) + this.FlightNumber.GetHashCode();
                }
                if (this.StopOverCode != null)
                {
                    hashCode = (hashCode * 59) + this.StopOverCode.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
