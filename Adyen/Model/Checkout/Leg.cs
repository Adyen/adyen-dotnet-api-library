// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Leg
    /// </summary>
    public partial class Leg : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Leg" /> class.
        /// </summary>
        /// <param name="carrierCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="classOfTravel">A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="dateOfTravel">Date and time of travel in format &#x60;yyyy-MM-ddTHH:mm&#x60;. * Use local time of departure airport. * minLength: 16 characters * maxLength: 16 characters</param>
        /// <param name="departureAirportCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="departureTax">The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 11 * Must not be all zeros.</param>
        /// <param name="destinationAirportCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="fareBasisCode">The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="flightNumber">The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="stopOverCode">A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character</param>
        [JsonConstructor]
        public Leg(Option<string> carrierCode = default, Option<string> classOfTravel = default, Option<DateTime?> dateOfTravel = default, Option<string> departureAirportCode = default, Option<long?> departureTax = default, Option<string> destinationAirportCode = default, Option<string> fareBasisCode = default, Option<string> flightNumber = default, Option<string> stopOverCode = default)
        {
            CarrierCodeOption = carrierCode;
            ClassOfTravelOption = classOfTravel;
            DateOfTravelOption = dateOfTravel;
            DepartureAirportCodeOption = departureAirportCode;
            DepartureTaxOption = departureTax;
            DestinationAirportCodeOption = destinationAirportCode;
            FareBasisCodeOption = fareBasisCode;
            FlightNumberOption = flightNumber;
            StopOverCodeOption = stopOverCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CarrierCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarrierCodeOption { get; private set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("carrierCode")]
        public string CarrierCode { get { return this.CarrierCodeOption; } set { this.CarrierCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ClassOfTravel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ClassOfTravelOption { get; private set; }

        /// <summary>
        /// A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("classOfTravel")]
        public string ClassOfTravel { get { return this.ClassOfTravelOption; } set { this.ClassOfTravelOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DateOfTravel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateOfTravelOption { get; private set; }

        /// <summary>
        /// Date and time of travel in format &#x60;yyyy-MM-ddTHH:mm&#x60;. * Use local time of departure airport. * minLength: 16 characters * maxLength: 16 characters
        /// </summary>
        /// <value>Date and time of travel in format &#x60;yyyy-MM-ddTHH:mm&#x60;. * Use local time of departure airport. * minLength: 16 characters * maxLength: 16 characters</value>
        [JsonPropertyName("dateOfTravel")]
        public DateTime? DateOfTravel { get { return this.DateOfTravelOption; } set { this.DateOfTravelOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DepartureAirportCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DepartureAirportCodeOption { get; private set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("departureAirportCode")]
        public string DepartureAirportCode { get { return this.DepartureAirportCodeOption; } set { this.DepartureAirportCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DepartureTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartureTaxOption { get; private set; }

        /// <summary>
        /// The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 11 * Must not be all zeros.
        /// </summary>
        /// <value>The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 11 * Must not be all zeros.</value>
        [JsonPropertyName("departureTax")]
        public long? DepartureTax { get { return this.DepartureTaxOption; } set { this.DepartureTaxOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of DestinationAirportCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DestinationAirportCodeOption { get; private set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("destinationAirportCode")]
        public string DestinationAirportCode { get { return this.DestinationAirportCodeOption; } set { this.DestinationAirportCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FareBasisCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FareBasisCodeOption { get; private set; }

        /// <summary>
        /// The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("fareBasisCode")]
        public string FareBasisCode { get { return this.FareBasisCodeOption; } set { this.FareBasisCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FlightNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FlightNumberOption { get; private set; }

        /// <summary>
        /// The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("flightNumber")]
        public string FlightNumber { get { return this.FlightNumberOption; } set { this.FlightNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StopOverCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StopOverCodeOption { get; private set; }

        /// <summary>
        /// A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character
        /// </summary>
        /// <value>A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character</value>
        [JsonPropertyName("stopOverCode")]
        public string StopOverCode { get { return this.StopOverCodeOption; } set { this.StopOverCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Leg {\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  ClassOfTravel: ").Append(ClassOfTravel).Append("\n");
            sb.Append("  DateOfTravel: ").Append(DateOfTravel).Append("\n");
            sb.Append("  DepartureAirportCode: ").Append(DepartureAirportCode).Append("\n");
            sb.Append("  DepartureTax: ").Append(DepartureTax).Append("\n");
            sb.Append("  DestinationAirportCode: ").Append(DestinationAirportCode).Append("\n");
            sb.Append("  FareBasisCode: ").Append(FareBasisCode).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  StopOverCode: ").Append(StopOverCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Leg" />
    /// </summary>
    public class LegJsonConverter : JsonConverter<Leg>
    {
        /// <summary>
        /// The format to use to serialize DateOfTravel
        /// </summary>
        public static string DateOfTravelFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Leg" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Leg Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> carrierCode = default;
            Option<string> classOfTravel = default;
            Option<DateTime?> dateOfTravel = default;
            Option<string> departureAirportCode = default;
            Option<long?> departureTax = default;
            Option<string> destinationAirportCode = default;
            Option<string> fareBasisCode = default;
            Option<string> flightNumber = default;
            Option<string> stopOverCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "carrierCode":
                            carrierCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "classOfTravel":
                            classOfTravel = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dateOfTravel":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateOfTravel = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "departureAirportCode":
                            departureAirportCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "departureTax":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departureTax = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "destinationAirportCode":
                            destinationAirportCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fareBasisCode":
                            fareBasisCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "flightNumber":
                            flightNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "stopOverCode":
                            stopOverCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (carrierCode.IsSet && carrierCode.Value == null)
                throw new ArgumentNullException(nameof(carrierCode), "Property is not nullable for class Leg.");

            if (classOfTravel.IsSet && classOfTravel.Value == null)
                throw new ArgumentNullException(nameof(classOfTravel), "Property is not nullable for class Leg.");

            if (dateOfTravel.IsSet && dateOfTravel.Value == null)
                throw new ArgumentNullException(nameof(dateOfTravel), "Property is not nullable for class Leg.");

            if (departureAirportCode.IsSet && departureAirportCode.Value == null)
                throw new ArgumentNullException(nameof(departureAirportCode), "Property is not nullable for class Leg.");

            if (departureTax.IsSet && departureTax.Value == null)
                throw new ArgumentNullException(nameof(departureTax), "Property is not nullable for class Leg.");

            if (destinationAirportCode.IsSet && destinationAirportCode.Value == null)
                throw new ArgumentNullException(nameof(destinationAirportCode), "Property is not nullable for class Leg.");

            if (fareBasisCode.IsSet && fareBasisCode.Value == null)
                throw new ArgumentNullException(nameof(fareBasisCode), "Property is not nullable for class Leg.");

            if (flightNumber.IsSet && flightNumber.Value == null)
                throw new ArgumentNullException(nameof(flightNumber), "Property is not nullable for class Leg.");

            if (stopOverCode.IsSet && stopOverCode.Value == null)
                throw new ArgumentNullException(nameof(stopOverCode), "Property is not nullable for class Leg.");

            return new Leg(carrierCode, classOfTravel, dateOfTravel, departureAirportCode, departureTax, destinationAirportCode, fareBasisCode, flightNumber, stopOverCode);
        }

        /// <summary>
        /// Serializes a <see cref="Leg" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="leg"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Leg leg, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, leg, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Leg" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="leg"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Leg leg, JsonSerializerOptions jsonSerializerOptions)
        {
            if (leg.CarrierCodeOption.IsSet && leg.CarrierCode == null)
                throw new ArgumentNullException(nameof(leg.CarrierCode), "Property is required for class Leg.");

            if (leg.ClassOfTravelOption.IsSet && leg.ClassOfTravel == null)
                throw new ArgumentNullException(nameof(leg.ClassOfTravel), "Property is required for class Leg.");

            if (leg.DepartureAirportCodeOption.IsSet && leg.DepartureAirportCode == null)
                throw new ArgumentNullException(nameof(leg.DepartureAirportCode), "Property is required for class Leg.");

            if (leg.DestinationAirportCodeOption.IsSet && leg.DestinationAirportCode == null)
                throw new ArgumentNullException(nameof(leg.DestinationAirportCode), "Property is required for class Leg.");

            if (leg.FareBasisCodeOption.IsSet && leg.FareBasisCode == null)
                throw new ArgumentNullException(nameof(leg.FareBasisCode), "Property is required for class Leg.");

            if (leg.FlightNumberOption.IsSet && leg.FlightNumber == null)
                throw new ArgumentNullException(nameof(leg.FlightNumber), "Property is required for class Leg.");

            if (leg.StopOverCodeOption.IsSet && leg.StopOverCode == null)
                throw new ArgumentNullException(nameof(leg.StopOverCode), "Property is required for class Leg.");

            if (leg.CarrierCodeOption.IsSet)
                writer.WriteString("carrierCode", leg.CarrierCode);

            if (leg.ClassOfTravelOption.IsSet)
                writer.WriteString("classOfTravel", leg.ClassOfTravel);

            if (leg.DateOfTravelOption.IsSet)
                writer.WriteString("dateOfTravel", leg.DateOfTravelOption.Value.Value.ToString(DateOfTravelFormat));

            if (leg.DepartureAirportCodeOption.IsSet)
                writer.WriteString("departureAirportCode", leg.DepartureAirportCode);

            if (leg.DepartureTaxOption.IsSet)
                writer.WriteNumber("departureTax", leg.DepartureTaxOption.Value.Value);

            if (leg.DestinationAirportCodeOption.IsSet)
                writer.WriteString("destinationAirportCode", leg.DestinationAirportCode);

            if (leg.FareBasisCodeOption.IsSet)
                writer.WriteString("fareBasisCode", leg.FareBasisCode);

            if (leg.FlightNumberOption.IsSet)
                writer.WriteString("flightNumber", leg.FlightNumber);

            if (leg.StopOverCodeOption.IsSet)
                writer.WriteString("stopOverCode", leg.StopOverCode);
        }
    }
}
