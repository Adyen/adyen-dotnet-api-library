// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// CreateCheckoutSessionResponse
    /// </summary>
    public partial class CreateCheckoutSessionResponse : IEquatable<CreateCheckoutSessionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCheckoutSessionResponse" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="expiresAt">The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation.</param>
        /// <param name="id">A unique identifier of the session.</param>
        /// <param name="merchantAccount">The merchant account identifier, with which you want to process the transaction.</param>
        /// <param name="reference">The reference to uniquely identify a payment.</param>
        /// <param name="returnUrl">The URL to return to in case of a redirection. The format depends on the channel.  * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;  If the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value. &gt; The URL must not include personally identifiable information (PII), for example name or email address.</param>
        /// <param name="accountInfo">accountInfo</param>
        /// <param name="additionalAmount">additionalAmount</param>
        /// <param name="additionalData">This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value.</param>
        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</param>
        /// <param name="applicationInfo">applicationInfo</param>
        /// <param name="authenticationData">authenticationData</param>
        /// <param name="billingAddress">billingAddress</param>
        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</param>
        /// <param name="captureDelayHours">The delay between the authorisation and scheduled auto-capture, specified in hours.</param>
        /// <param name="channel">The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * **iOS** * **Android** * **Web**</param>
        /// <param name="company">company</param>
        /// <param name="countryCode">The shopper&#39;s two-letter country code.</param>
        /// <param name="dateOfBirth">The shopper&#39;s date of birth in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.</param>
        /// <param name="deliverAt">The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.</param>
        /// <param name="deliveryAddress">deliveryAddress</param>
        /// <param name="enableOneClick">When true and &#x60;shopperReference&#x60; is provided, the shopper will be asked if the payment details should be stored for future [one-click payments](https://docs.adyen.com/get-started-with-adyen/payment-glossary/#one-click-payments-definition).</param>
        /// <param name="enablePayOut">When true and &#x60;shopperReference&#x60; is provided, the payment details will be tokenized for payouts.</param>
        /// <param name="enableRecurring">When true and &#x60;shopperReference&#x60; is provided, the payment details will be stored for [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types) where the shopper is not present, such as subscription or automatic top-up payments.</param>
        /// <param name="fundOrigin">fundOrigin</param>
        /// <param name="fundRecipient">fundRecipient</param>
        /// <param name="installmentOptions">A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.</param>
        /// <param name="lineItems">Price and product information about the purchased items, to be included on the invoice sent to the shopper. &gt; This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, Riverty, and Zip.</param>
        /// <param name="mandate">mandate</param>
        /// <param name="mcc">The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.</param>
        /// <param name="merchantOrderReference">This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. &gt; We strongly recommend you send the &#x60;merchantOrderReference&#x60; value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide &#x60;retry.orderAttemptNumber&#x60;, &#x60;retry.chainAttemptNumber&#x60;, and &#x60;retry.skipRetry&#x60; values in &#x60;PaymentRequest.additionalData&#x60;.</param>
        /// <param name="metadata">Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. * Maximum 20 characters per key. * Maximum 80 characters per value. </param>
        /// <param name="mode">Indicates the type of front end integration. Possible values: * **embedded** (default): Drop-in or Components integration * **hosted**: Hosted Checkout integration (default to ModeEnum.Embedded)</param>
        /// <param name="mpiData">mpiData</param>
        /// <param name="platformChargebackLogic">platformChargebackLogic</param>
        /// <param name="recurringExpiry">Date after which no further authorisations shall be performed. Only for 3D Secure 2.</param>
        /// <param name="recurringFrequency">Minimum number of days between authorisations. Only for 3D Secure 2.</param>
        /// <param name="recurringProcessingModel">Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </param>
        /// <param name="redirectFromIssuerMethod">Specifies the redirect method (GET or POST) when redirecting back from the issuer.</param>
        /// <param name="redirectToIssuerMethod">Specifies the redirect method (GET or POST) when redirecting to the issuer.</param>
        /// <param name="riskData">riskData</param>
        /// <param name="sessionData">The payment session data you need to pass to your front end.</param>
        /// <param name="shopperEmail">The shopper&#39;s email address.</param>
        /// <param name="shopperIP">The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).</param>
        /// <param name="shopperInteraction">Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.</param>
        /// <param name="shopperLocale">The combination of a language code and a country code to specify the language to be used in the payment.</param>
        /// <param name="shopperName">shopperName</param>
        /// <param name="shopperReference">Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.</param>
        /// <param name="shopperStatement">The text to be shown on the shopper&#39;s bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , &#39; _ - ? + * /_**.</param>
        /// <param name="showInstallmentAmount">Set to true to show the payment amount per installment.</param>
        /// <param name="showRemovePaymentMethodButton">Set to **true** to show a button that lets the shopper remove a stored payment method.</param>
        /// <param name="socialSecurityNumber">The shopper&#39;s social security number.</param>
        /// <param name="splitCardFundingSources">Boolean value indicating whether the card payment method should be split into separate debit and credit options. (default to false)</param>
        /// <param name="splits">An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/platforms/process-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/classic-platforms/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).</param>
        /// <param name="store">Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.</param>
        /// <param name="storeFiltrationMode">Specifies how payment methods should be filtered based on the &#39;store&#39; parameter:   - &#39;exclusive&#39;: Only payment methods belonging to the specified &#39;store&#39; are returned.   - &#39;inclusive&#39;: Payment methods from the &#39;store&#39; and those not associated with any other store are returned.</param>
        /// <param name="storePaymentMethod">When true and &#x60;shopperReference&#x60; is provided, the payment details will be stored for future [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types).</param>
        /// <param name="storePaymentMethodMode">Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the &#x60;shopperReference&#x60; is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the &#x60;shopperReference&#x60; is provided, the details will be stored without asking the shopper for consent.</param>
        /// <param name="telephoneNumber">The shopper&#39;s telephone number.</param>
        /// <param name="themeId">Sets a custom theme for [Hosted Checkout](https://docs.adyen.com/online-payments/build-your-integration/?platform&#x3D;Web&amp;integration&#x3D;Hosted+Checkout). The value can be any of the **Theme ID** values from your Customer Area.</param>
        /// <param name="threeDS2RequestData">threeDS2RequestData</param>
        /// <param name="threeDSAuthenticationOnly">If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. (default to false)</param>
        /// <param name="trustedShopper">Set to true if the payment should be routed to a trusted MID.</param>
        /// <param name="url">The URL for the Hosted Checkout page. Redirect the shopper to this URL so they can make the payment.</param>
        [JsonConstructor]
        public CreateCheckoutSessionResponse(Amount amount, DateTime expiresAt, string id, string merchantAccount, string reference, string returnUrl, Option<AccountInfo> accountInfo = default, Option<Amount> additionalAmount = default, Option<Dictionary<string, string>> additionalData = default, Option<List<string>> allowedPaymentMethods = default, Option<ApplicationInfo> applicationInfo = default, Option<AuthenticationData> authenticationData = default, Option<BillingAddress> billingAddress = default, Option<List<string>> blockedPaymentMethods = default, Option<int?> captureDelayHours = default, Option<ChannelEnum?> channel = default, Option<Company> company = default, Option<string> countryCode = default, Option<DateTime?> dateOfBirth = default, Option<DateTime?> deliverAt = default, Option<DeliveryAddress> deliveryAddress = default, Option<bool?> enableOneClick = default, Option<bool?> enablePayOut = default, Option<bool?> enableRecurring = default, Option<FundOrigin> fundOrigin = default, Option<FundRecipient> fundRecipient = default, Option<Dictionary<string, CheckoutSessionInstallmentOption>> installmentOptions = default, Option<List<LineItem>> lineItems = default, Option<Mandate> mandate = default, Option<string> mcc = default, Option<string> merchantOrderReference = default, Option<Dictionary<string, string>> metadata = default, Option<ModeEnum?> mode = default, Option<ThreeDSecureData> mpiData = default, Option<PlatformChargebackLogic> platformChargebackLogic = default, Option<string> recurringExpiry = default, Option<string> recurringFrequency = default, Option<RecurringProcessingModelEnum?> recurringProcessingModel = default, Option<string> redirectFromIssuerMethod = default, Option<string> redirectToIssuerMethod = default, Option<RiskData> riskData = default, Option<string> sessionData = default, Option<string> shopperEmail = default, Option<string> shopperIP = default, Option<ShopperInteractionEnum?> shopperInteraction = default, Option<string> shopperLocale = default, Option<Name> shopperName = default, Option<string> shopperReference = default, Option<string> shopperStatement = default, Option<bool?> showInstallmentAmount = default, Option<bool?> showRemovePaymentMethodButton = default, Option<string> socialSecurityNumber = default, Option<bool?> splitCardFundingSources = default, Option<List<Split>> splits = default, Option<string> store = default, Option<StoreFiltrationModeEnum?> storeFiltrationMode = default, Option<bool?> storePaymentMethod = default, Option<StorePaymentMethodModeEnum?> storePaymentMethodMode = default, Option<string> telephoneNumber = default, Option<string> themeId = default, Option<CheckoutSessionThreeDS2RequestData> threeDS2RequestData = default, Option<bool?> threeDSAuthenticationOnly = default, Option<bool?> trustedShopper = default, Option<string> url = default)
        {
            Amount = amount;
            ExpiresAt = expiresAt;
            Id = id;
            MerchantAccount = merchantAccount;
            Reference = reference;
            ReturnUrl = returnUrl;
            AccountInfoOption = accountInfo;
            AdditionalAmountOption = additionalAmount;
            AdditionalDataOption = additionalData;
            AllowedPaymentMethodsOption = allowedPaymentMethods;
            ApplicationInfoOption = applicationInfo;
            AuthenticationDataOption = authenticationData;
            BillingAddressOption = billingAddress;
            BlockedPaymentMethodsOption = blockedPaymentMethods;
            CaptureDelayHoursOption = captureDelayHours;
            ChannelOption = channel;
            CompanyOption = company;
            CountryCodeOption = countryCode;
            DateOfBirthOption = dateOfBirth;
            DeliverAtOption = deliverAt;
            DeliveryAddressOption = deliveryAddress;
            EnableOneClickOption = enableOneClick;
            EnablePayOutOption = enablePayOut;
            EnableRecurringOption = enableRecurring;
            FundOriginOption = fundOrigin;
            FundRecipientOption = fundRecipient;
            InstallmentOptionsOption = installmentOptions;
            LineItemsOption = lineItems;
            MandateOption = mandate;
            MccOption = mcc;
            MerchantOrderReferenceOption = merchantOrderReference;
            MetadataOption = metadata;
            ModeOption = mode;
            MpiDataOption = mpiData;
            PlatformChargebackLogicOption = platformChargebackLogic;
            RecurringExpiryOption = recurringExpiry;
            RecurringFrequencyOption = recurringFrequency;
            RecurringProcessingModelOption = recurringProcessingModel;
            RedirectFromIssuerMethodOption = redirectFromIssuerMethod;
            RedirectToIssuerMethodOption = redirectToIssuerMethod;
            RiskDataOption = riskData;
            SessionDataOption = sessionData;
            ShopperEmailOption = shopperEmail;
            ShopperIPOption = shopperIP;
            ShopperInteractionOption = shopperInteraction;
            ShopperLocaleOption = shopperLocale;
            ShopperNameOption = shopperName;
            ShopperReferenceOption = shopperReference;
            ShopperStatementOption = shopperStatement;
            ShowInstallmentAmountOption = showInstallmentAmount;
            ShowRemovePaymentMethodButtonOption = showRemovePaymentMethodButton;
            SocialSecurityNumberOption = socialSecurityNumber;
            SplitCardFundingSourcesOption = splitCardFundingSources;
            SplitsOption = splits;
            StoreOption = store;
            StoreFiltrationModeOption = storeFiltrationMode;
            StorePaymentMethodOption = storePaymentMethod;
            StorePaymentMethodModeOption = storePaymentMethodMode;
            TelephoneNumberOption = telephoneNumber;
            ThemeIdOption = themeId;
            ThreeDS2RequestDataOption = threeDS2RequestData;
            ThreeDSAuthenticationOnlyOption = threeDSAuthenticationOnly;
            TrustedShopperOption = trustedShopper;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * **iOS** * **Android** * **Web**
        /// </summary>
        /// <value>The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * **iOS** * **Android** * **Web**</value>
        public enum ChannelEnum
        {
            /// <summary>
            /// Enum IOS for value: iOS
            /// </summary>
            IOS = 1,

            /// <summary>
            /// Enum Android for value: Android
            /// </summary>
            Android = 2,

            /// <summary>
            /// Enum Web for value: Web
            /// </summary>
            Web = 3
        }

        /// <summary>
        /// Returns a <see cref="ChannelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ChannelEnum ChannelEnumFromString(string value)
        {
            if (value.Equals("iOS"))
                return ChannelEnum.IOS;

            if (value.Equals("Android"))
                return ChannelEnum.Android;

            if (value.Equals("Web"))
                return ChannelEnum.Web;

            throw new NotImplementedException($"Could not convert value to type ChannelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ChannelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChannelEnum? ChannelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("iOS"))
                return ChannelEnum.IOS;

            if (value.Equals("Android"))
                return ChannelEnum.Android;

            if (value.Equals("Web"))
                return ChannelEnum.Web;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChannelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ChannelEnumToJsonValue(ChannelEnum? value)
        {
            if (value == ChannelEnum.IOS)
                return "iOS";

            if (value == ChannelEnum.Android)
                return "Android";

            if (value == ChannelEnum.Web)
                return "Web";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Channel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChannelEnum?> ChannelOption { get; private set; }

        /// <summary>
        /// The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * **iOS** * **Android** * **Web**
        /// </summary>
        /// <value>The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * **iOS** * **Android** * **Web**</value>
        [JsonPropertyName("channel")]
        public ChannelEnum? Channel { get { return this.ChannelOption; } set { this.ChannelOption = new Option<ChannelEnum?>(value); } }

        /// <summary>
        /// Indicates the type of front end integration. Possible values: * **embedded** (default): Drop-in or Components integration * **hosted**: Hosted Checkout integration
        /// </summary>
        /// <value>Indicates the type of front end integration. Possible values: * **embedded** (default): Drop-in or Components integration * **hosted**: Hosted Checkout integration</value>
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Embedded for value: embedded
            /// </summary>
            Embedded = 1,

            /// <summary>
            /// Enum Hosted for value: hosted
            /// </summary>
            Hosted = 2
        }

        /// <summary>
        /// Returns a <see cref="ModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ModeEnum ModeEnumFromString(string value)
        {
            if (value.Equals("embedded"))
                return ModeEnum.Embedded;

            if (value.Equals("hosted"))
                return ModeEnum.Hosted;

            throw new NotImplementedException($"Could not convert value to type ModeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ModeEnum? ModeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("embedded"))
                return ModeEnum.Embedded;

            if (value.Equals("hosted"))
                return ModeEnum.Hosted;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ModeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ModeEnumToJsonValue(ModeEnum? value)
        {
            if (value == ModeEnum.Embedded)
                return "embedded";

            if (value == ModeEnum.Hosted)
                return "hosted";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Mode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ModeEnum?> ModeOption { get; private set; }

        /// <summary>
        /// Indicates the type of front end integration. Possible values: * **embedded** (default): Drop-in or Components integration * **hosted**: Hosted Checkout integration
        /// </summary>
        /// <value>Indicates the type of front end integration. Possible values: * **embedded** (default): Drop-in or Components integration * **hosted**: Hosted Checkout integration</value>
        [JsonPropertyName("mode")]
        public ModeEnum? Mode { get { return this.ModeOption; } set { this.ModeOption = new Option<ModeEnum?>(value); } }

        /// <summary>
        /// Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. 
        /// </summary>
        /// <value>Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </value>
        public enum RecurringProcessingModelEnum
        {
            /// <summary>
            /// Enum CardOnFile for value: CardOnFile
            /// </summary>
            CardOnFile = 1,

            /// <summary>
            /// Enum Subscription for value: Subscription
            /// </summary>
            Subscription = 2,

            /// <summary>
            /// Enum UnscheduledCardOnFile for value: UnscheduledCardOnFile
            /// </summary>
            UnscheduledCardOnFile = 3
        }

        /// <summary>
        /// Returns a <see cref="RecurringProcessingModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RecurringProcessingModelEnum RecurringProcessingModelEnumFromString(string value)
        {
            if (value.Equals("CardOnFile"))
                return RecurringProcessingModelEnum.CardOnFile;

            if (value.Equals("Subscription"))
                return RecurringProcessingModelEnum.Subscription;

            if (value.Equals("UnscheduledCardOnFile"))
                return RecurringProcessingModelEnum.UnscheduledCardOnFile;

            throw new NotImplementedException($"Could not convert value to type RecurringProcessingModelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RecurringProcessingModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RecurringProcessingModelEnum? RecurringProcessingModelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CardOnFile"))
                return RecurringProcessingModelEnum.CardOnFile;

            if (value.Equals("Subscription"))
                return RecurringProcessingModelEnum.Subscription;

            if (value.Equals("UnscheduledCardOnFile"))
                return RecurringProcessingModelEnum.UnscheduledCardOnFile;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RecurringProcessingModelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RecurringProcessingModelEnumToJsonValue(RecurringProcessingModelEnum? value)
        {
            if (value == RecurringProcessingModelEnum.CardOnFile)
                return "CardOnFile";

            if (value == RecurringProcessingModelEnum.Subscription)
                return "Subscription";

            if (value == RecurringProcessingModelEnum.UnscheduledCardOnFile)
                return "UnscheduledCardOnFile";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of RecurringProcessingModel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RecurringProcessingModelEnum?> RecurringProcessingModelOption { get; private set; }

        /// <summary>
        /// Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. 
        /// </summary>
        /// <value>Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </value>
        [JsonPropertyName("recurringProcessingModel")]
        public RecurringProcessingModelEnum? RecurringProcessingModel { get { return this.RecurringProcessingModelOption; } set { this.RecurringProcessingModelOption = new Option<RecurringProcessingModelEnum?>(value); } }

        /// <summary>
        /// Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
        /// </summary>
        /// <value>Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.</value>
        public enum ShopperInteractionEnum
        {
            /// <summary>
            /// Enum Ecommerce for value: Ecommerce
            /// </summary>
            Ecommerce = 1,

            /// <summary>
            /// Enum ContAuth for value: ContAuth
            /// </summary>
            ContAuth = 2,

            /// <summary>
            /// Enum Moto for value: Moto
            /// </summary>
            Moto = 3,

            /// <summary>
            /// Enum POS for value: POS
            /// </summary>
            POS = 4
        }

        /// <summary>
        /// Returns a <see cref="ShopperInteractionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ShopperInteractionEnum ShopperInteractionEnumFromString(string value)
        {
            if (value.Equals("Ecommerce"))
                return ShopperInteractionEnum.Ecommerce;

            if (value.Equals("ContAuth"))
                return ShopperInteractionEnum.ContAuth;

            if (value.Equals("Moto"))
                return ShopperInteractionEnum.Moto;

            if (value.Equals("POS"))
                return ShopperInteractionEnum.POS;

            throw new NotImplementedException($"Could not convert value to type ShopperInteractionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ShopperInteractionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ShopperInteractionEnum? ShopperInteractionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Ecommerce"))
                return ShopperInteractionEnum.Ecommerce;

            if (value.Equals("ContAuth"))
                return ShopperInteractionEnum.ContAuth;

            if (value.Equals("Moto"))
                return ShopperInteractionEnum.Moto;

            if (value.Equals("POS"))
                return ShopperInteractionEnum.POS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ShopperInteractionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ShopperInteractionEnumToJsonValue(ShopperInteractionEnum? value)
        {
            if (value == ShopperInteractionEnum.Ecommerce)
                return "Ecommerce";

            if (value == ShopperInteractionEnum.ContAuth)
                return "ContAuth";

            if (value == ShopperInteractionEnum.Moto)
                return "Moto";

            if (value == ShopperInteractionEnum.POS)
                return "POS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ShopperInteraction
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShopperInteractionEnum?> ShopperInteractionOption { get; private set; }

        /// <summary>
        /// Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
        /// </summary>
        /// <value>Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.</value>
        [JsonPropertyName("shopperInteraction")]
        public ShopperInteractionEnum? ShopperInteraction { get { return this.ShopperInteractionOption; } set { this.ShopperInteractionOption = new Option<ShopperInteractionEnum?>(value); } }

        /// <summary>
        /// Specifies how payment methods should be filtered based on the &#39;store&#39; parameter:   - &#39;exclusive&#39;: Only payment methods belonging to the specified &#39;store&#39; are returned.   - &#39;inclusive&#39;: Payment methods from the &#39;store&#39; and those not associated with any other store are returned.
        /// </summary>
        /// <value>Specifies how payment methods should be filtered based on the &#39;store&#39; parameter:   - &#39;exclusive&#39;: Only payment methods belonging to the specified &#39;store&#39; are returned.   - &#39;inclusive&#39;: Payment methods from the &#39;store&#39; and those not associated with any other store are returned.</value>
        public enum StoreFiltrationModeEnum
        {
            /// <summary>
            /// Enum Exclusive for value: exclusive
            /// </summary>
            Exclusive = 1,

            /// <summary>
            /// Enum Inclusive for value: inclusive
            /// </summary>
            Inclusive = 2,

            /// <summary>
            /// Enum SkipFilter for value: skipFilter
            /// </summary>
            SkipFilter = 3
        }

        /// <summary>
        /// Returns a <see cref="StoreFiltrationModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StoreFiltrationModeEnum StoreFiltrationModeEnumFromString(string value)
        {
            if (value.Equals("exclusive"))
                return StoreFiltrationModeEnum.Exclusive;

            if (value.Equals("inclusive"))
                return StoreFiltrationModeEnum.Inclusive;

            if (value.Equals("skipFilter"))
                return StoreFiltrationModeEnum.SkipFilter;

            throw new NotImplementedException($"Could not convert value to type StoreFiltrationModeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StoreFiltrationModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StoreFiltrationModeEnum? StoreFiltrationModeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("exclusive"))
                return StoreFiltrationModeEnum.Exclusive;

            if (value.Equals("inclusive"))
                return StoreFiltrationModeEnum.Inclusive;

            if (value.Equals("skipFilter"))
                return StoreFiltrationModeEnum.SkipFilter;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StoreFiltrationModeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StoreFiltrationModeEnumToJsonValue(StoreFiltrationModeEnum? value)
        {
            if (value == StoreFiltrationModeEnum.Exclusive)
                return "exclusive";

            if (value == StoreFiltrationModeEnum.Inclusive)
                return "inclusive";

            if (value == StoreFiltrationModeEnum.SkipFilter)
                return "skipFilter";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of StoreFiltrationMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StoreFiltrationModeEnum?> StoreFiltrationModeOption { get; private set; }

        /// <summary>
        /// Specifies how payment methods should be filtered based on the &#39;store&#39; parameter:   - &#39;exclusive&#39;: Only payment methods belonging to the specified &#39;store&#39; are returned.   - &#39;inclusive&#39;: Payment methods from the &#39;store&#39; and those not associated with any other store are returned.
        /// </summary>
        /// <value>Specifies how payment methods should be filtered based on the &#39;store&#39; parameter:   - &#39;exclusive&#39;: Only payment methods belonging to the specified &#39;store&#39; are returned.   - &#39;inclusive&#39;: Payment methods from the &#39;store&#39; and those not associated with any other store are returned.</value>
        [JsonPropertyName("storeFiltrationMode")]
        public StoreFiltrationModeEnum? StoreFiltrationMode { get { return this.StoreFiltrationModeOption; } set { this.StoreFiltrationModeOption = new Option<StoreFiltrationModeEnum?>(value); } }

        /// <summary>
        /// Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the &#x60;shopperReference&#x60; is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the &#x60;shopperReference&#x60; is provided, the details will be stored without asking the shopper for consent.
        /// </summary>
        /// <value>Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the &#x60;shopperReference&#x60; is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the &#x60;shopperReference&#x60; is provided, the details will be stored without asking the shopper for consent.</value>
        public enum StorePaymentMethodModeEnum
        {
            /// <summary>
            /// Enum AskForConsent for value: askForConsent
            /// </summary>
            AskForConsent = 1,

            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            Disabled = 2,

            /// <summary>
            /// Enum Enabled for value: enabled
            /// </summary>
            Enabled = 3
        }

        /// <summary>
        /// Returns a <see cref="StorePaymentMethodModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StorePaymentMethodModeEnum StorePaymentMethodModeEnumFromString(string value)
        {
            if (value.Equals("askForConsent"))
                return StorePaymentMethodModeEnum.AskForConsent;

            if (value.Equals("disabled"))
                return StorePaymentMethodModeEnum.Disabled;

            if (value.Equals("enabled"))
                return StorePaymentMethodModeEnum.Enabled;

            throw new NotImplementedException($"Could not convert value to type StorePaymentMethodModeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StorePaymentMethodModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StorePaymentMethodModeEnum? StorePaymentMethodModeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("askForConsent"))
                return StorePaymentMethodModeEnum.AskForConsent;

            if (value.Equals("disabled"))
                return StorePaymentMethodModeEnum.Disabled;

            if (value.Equals("enabled"))
                return StorePaymentMethodModeEnum.Enabled;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StorePaymentMethodModeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StorePaymentMethodModeEnumToJsonValue(StorePaymentMethodModeEnum? value)
        {
            if (value == StorePaymentMethodModeEnum.AskForConsent)
                return "askForConsent";

            if (value == StorePaymentMethodModeEnum.Disabled)
                return "disabled";

            if (value == StorePaymentMethodModeEnum.Enabled)
                return "enabled";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of StorePaymentMethodMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StorePaymentMethodModeEnum?> StorePaymentMethodModeOption { get; private set; }

        /// <summary>
        /// Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the &#x60;shopperReference&#x60; is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the &#x60;shopperReference&#x60; is provided, the details will be stored without asking the shopper for consent.
        /// </summary>
        /// <value>Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the &#x60;shopperReference&#x60; is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the &#x60;shopperReference&#x60; is provided, the details will be stored without asking the shopper for consent.</value>
        [JsonPropertyName("storePaymentMethodMode")]
        public StorePaymentMethodModeEnum? StorePaymentMethodMode { get { return this.StorePaymentMethodModeOption; } set { this.StorePaymentMethodModeOption = new Option<StorePaymentMethodModeEnum?>(value); } }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public Amount Amount { get; set; }

        /// <summary>
        /// The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation.
        /// </summary>
        /// <value>The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation.</value>
        [JsonPropertyName("expiresAt")]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// A unique identifier of the session.
        /// </summary>
        /// <value>A unique identifier of the session.</value>
        [JsonPropertyName("id")]
        public string Id { get; }

        /// <summary>
        /// The merchant account identifier, with which you want to process the transaction.
        /// </summary>
        /// <value>The merchant account identifier, with which you want to process the transaction.</value>
        [JsonPropertyName("merchantAccount")]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// The reference to uniquely identify a payment.
        /// </summary>
        /// <value>The reference to uniquely identify a payment.</value>
        [JsonPropertyName("reference")]
        public string Reference { get; set; }

        /// <summary>
        /// The URL to return to in case of a redirection. The format depends on the channel.  * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;  If the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value. &gt; The URL must not include personally identifiable information (PII), for example name or email address.
        /// </summary>
        /// <value>The URL to return to in case of a redirection. The format depends on the channel.  * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;  If the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value. &gt; The URL must not include personally identifiable information (PII), for example name or email address.</value>
        [JsonPropertyName("returnUrl")]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Used to track the state of AccountInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountInfo> AccountInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccountInfo
        /// </summary>
        [JsonPropertyName("accountInfo")]
        public AccountInfo AccountInfo { get { return this.AccountInfoOption; } set { this.AccountInfoOption = new Option<AccountInfo>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> AdditionalAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets AdditionalAmount
        /// </summary>
        [JsonPropertyName("additionalAmount")]
        public Amount AdditionalAmount { get { return this.AdditionalAmountOption; } set { this.AdditionalAmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> AdditionalDataOption { get; private set; }

        /// <summary>
        /// This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value.
        /// </summary>
        /// <value>This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value.</value>
        [JsonPropertyName("additionalData")]
        public Dictionary<string, string> AdditionalData { get { return this.AdditionalDataOption; } set { this.AdditionalDataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of AllowedPaymentMethods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> AllowedPaymentMethodsOption { get; private set; }

        /// <summary>
        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
        /// </summary>
        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
        [JsonPropertyName("allowedPaymentMethods")]
        public List<string> AllowedPaymentMethods { get { return this.AllowedPaymentMethodsOption; } set { this.AllowedPaymentMethodsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of ApplicationInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApplicationInfo> ApplicationInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets ApplicationInfo
        /// </summary>
        [JsonPropertyName("applicationInfo")]
        public ApplicationInfo ApplicationInfo { get { return this.ApplicationInfoOption; } set { this.ApplicationInfoOption = new Option<ApplicationInfo>(value); } }

        /// <summary>
        /// Used to track the state of AuthenticationData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AuthenticationData> AuthenticationDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthenticationData
        /// </summary>
        [JsonPropertyName("authenticationData")]
        public AuthenticationData AuthenticationData { get { return this.AuthenticationDataOption; } set { this.AuthenticationDataOption = new Option<AuthenticationData>(value); } }

        /// <summary>
        /// Used to track the state of BillingAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BillingAddress> BillingAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [JsonPropertyName("billingAddress")]
        public BillingAddress BillingAddress { get { return this.BillingAddressOption; } set { this.BillingAddressOption = new Option<BillingAddress>(value); } }

        /// <summary>
        /// Used to track the state of BlockedPaymentMethods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BlockedPaymentMethodsOption { get; private set; }

        /// <summary>
        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
        /// </summary>
        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
        [JsonPropertyName("blockedPaymentMethods")]
        public List<string> BlockedPaymentMethods { get { return this.BlockedPaymentMethodsOption; } set { this.BlockedPaymentMethodsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of CaptureDelayHours
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CaptureDelayHoursOption { get; private set; }

        /// <summary>
        /// The delay between the authorisation and scheduled auto-capture, specified in hours.
        /// </summary>
        /// <value>The delay between the authorisation and scheduled auto-capture, specified in hours.</value>
        [JsonPropertyName("captureDelayHours")]
        public int? CaptureDelayHours { get { return this.CaptureDelayHoursOption; } set { this.CaptureDelayHoursOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Company> CompanyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [JsonPropertyName("company")]
        public Company Company { get { return this.CompanyOption; } set { this.CompanyOption = new Option<Company>(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryCodeOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s two-letter country code.
        /// </summary>
        /// <value>The shopper&#39;s two-letter country code.</value>
        [JsonPropertyName("countryCode")]
        public string CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DateOfBirth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateOfBirthOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s date of birth in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.
        /// </summary>
        /// <value>The shopper&#39;s date of birth in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.</value>
        [JsonPropertyName("dateOfBirth")]
        public DateTime? DateOfBirth { get { return this.DateOfBirthOption; } set { this.DateOfBirthOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DeliverAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DeliverAtOption { get; private set; }

        /// <summary>
        /// The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.
        /// </summary>
        /// <value>The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.</value>
        [JsonPropertyName("deliverAt")]
        public DateTime? DeliverAt { get { return this.DeliverAtOption; } set { this.DeliverAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DeliveryAddress> DeliveryAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [JsonPropertyName("deliveryAddress")]
        public DeliveryAddress DeliveryAddress { get { return this.DeliveryAddressOption; } set { this.DeliveryAddressOption = new Option<DeliveryAddress>(value); } }

        /// <summary>
        /// Used to track the state of EnableOneClick
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableOneClickOption { get; private set; }

        /// <summary>
        /// When true and &#x60;shopperReference&#x60; is provided, the shopper will be asked if the payment details should be stored for future [one-click payments](https://docs.adyen.com/get-started-with-adyen/payment-glossary/#one-click-payments-definition).
        /// </summary>
        /// <value>When true and &#x60;shopperReference&#x60; is provided, the shopper will be asked if the payment details should be stored for future [one-click payments](https://docs.adyen.com/get-started-with-adyen/payment-glossary/#one-click-payments-definition).</value>
        [JsonPropertyName("enableOneClick")]
        public bool? EnableOneClick { get { return this.EnableOneClickOption; } set { this.EnableOneClickOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EnablePayOut
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnablePayOutOption { get; private set; }

        /// <summary>
        /// When true and &#x60;shopperReference&#x60; is provided, the payment details will be tokenized for payouts.
        /// </summary>
        /// <value>When true and &#x60;shopperReference&#x60; is provided, the payment details will be tokenized for payouts.</value>
        [JsonPropertyName("enablePayOut")]
        public bool? EnablePayOut { get { return this.EnablePayOutOption; } set { this.EnablePayOutOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EnableRecurring
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableRecurringOption { get; private set; }

        /// <summary>
        /// When true and &#x60;shopperReference&#x60; is provided, the payment details will be stored for [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types) where the shopper is not present, such as subscription or automatic top-up payments.
        /// </summary>
        /// <value>When true and &#x60;shopperReference&#x60; is provided, the payment details will be stored for [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types) where the shopper is not present, such as subscription or automatic top-up payments.</value>
        [JsonPropertyName("enableRecurring")]
        public bool? EnableRecurring { get { return this.EnableRecurringOption; } set { this.EnableRecurringOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of FundOrigin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FundOrigin> FundOriginOption { get; private set; }

        /// <summary>
        /// Gets or Sets FundOrigin
        /// </summary>
        [JsonPropertyName("fundOrigin")]
        public FundOrigin FundOrigin { get { return this.FundOriginOption; } set { this.FundOriginOption = new Option<FundOrigin>(value); } }

        /// <summary>
        /// Used to track the state of FundRecipient
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FundRecipient> FundRecipientOption { get; private set; }

        /// <summary>
        /// Gets or Sets FundRecipient
        /// </summary>
        [JsonPropertyName("fundRecipient")]
        public FundRecipient FundRecipient { get { return this.FundRecipientOption; } set { this.FundRecipientOption = new Option<FundRecipient>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, CheckoutSessionInstallmentOption>> InstallmentOptionsOption { get; private set; }

        /// <summary>
        /// A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.
        /// </summary>
        /// <value>A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.</value>
        [JsonPropertyName("installmentOptions")]
        public Dictionary<string, CheckoutSessionInstallmentOption> InstallmentOptions { get { return this.InstallmentOptionsOption; } set { this.InstallmentOptionsOption = new Option<Dictionary<string, CheckoutSessionInstallmentOption>>(value); } }

        /// <summary>
        /// Used to track the state of LineItems
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LineItem>> LineItemsOption { get; private set; }

        /// <summary>
        /// Price and product information about the purchased items, to be included on the invoice sent to the shopper. &gt; This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, Riverty, and Zip.
        /// </summary>
        /// <value>Price and product information about the purchased items, to be included on the invoice sent to the shopper. &gt; This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, Riverty, and Zip.</value>
        [JsonPropertyName("lineItems")]
        public List<LineItem> LineItems { get { return this.LineItemsOption; } set { this.LineItemsOption = new Option<List<LineItem>>(value); } }

        /// <summary>
        /// Used to track the state of Mandate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Mandate> MandateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mandate
        /// </summary>
        [JsonPropertyName("mandate")]
        public Mandate Mandate { get { return this.MandateOption; } set { this.MandateOption = new Option<Mandate>(value); } }

        /// <summary>
        /// Used to track the state of Mcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MccOption { get; private set; }

        /// <summary>
        /// The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
        /// </summary>
        /// <value>The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.</value>
        [JsonPropertyName("mcc")]
        public string Mcc { get { return this.MccOption; } set { this.MccOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MerchantOrderReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MerchantOrderReferenceOption { get; private set; }

        /// <summary>
        /// This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. &gt; We strongly recommend you send the &#x60;merchantOrderReference&#x60; value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide &#x60;retry.orderAttemptNumber&#x60;, &#x60;retry.chainAttemptNumber&#x60;, and &#x60;retry.skipRetry&#x60; values in &#x60;PaymentRequest.additionalData&#x60;.
        /// </summary>
        /// <value>This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. &gt; We strongly recommend you send the &#x60;merchantOrderReference&#x60; value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide &#x60;retry.orderAttemptNumber&#x60;, &#x60;retry.chainAttemptNumber&#x60;, and &#x60;retry.skipRetry&#x60; values in &#x60;PaymentRequest.additionalData&#x60;.</value>
        [JsonPropertyName("merchantOrderReference")]
        public string MerchantOrderReference { get { return this.MerchantOrderReferenceOption; } set { this.MerchantOrderReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> MetadataOption { get; private set; }

        /// <summary>
        /// Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. * Maximum 20 characters per key. * Maximum 80 characters per value. 
        /// </summary>
        /// <value>Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. * Maximum 20 characters per key. * Maximum 80 characters per value. </value>
        [JsonPropertyName("metadata")]
        public Dictionary<string, string> Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of MpiData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDSecureData> MpiDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets MpiData
        /// </summary>
        [JsonPropertyName("mpiData")]
        public ThreeDSecureData MpiData { get { return this.MpiDataOption; } set { this.MpiDataOption = new Option<ThreeDSecureData>(value); } }

        /// <summary>
        /// Used to track the state of PlatformChargebackLogic
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PlatformChargebackLogic> PlatformChargebackLogicOption { get; private set; }

        /// <summary>
        /// Gets or Sets PlatformChargebackLogic
        /// </summary>
        [JsonPropertyName("platformChargebackLogic")]
        public PlatformChargebackLogic PlatformChargebackLogic { get { return this.PlatformChargebackLogicOption; } set { this.PlatformChargebackLogicOption = new Option<PlatformChargebackLogic>(value); } }

        /// <summary>
        /// Used to track the state of RecurringExpiry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringExpiryOption { get; private set; }

        /// <summary>
        /// Date after which no further authorisations shall be performed. Only for 3D Secure 2.
        /// </summary>
        /// <value>Date after which no further authorisations shall be performed. Only for 3D Secure 2.</value>
        [JsonPropertyName("recurringExpiry")]
        public string RecurringExpiry { get { return this.RecurringExpiryOption; } set { this.RecurringExpiryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecurringFrequency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringFrequencyOption { get; private set; }

        /// <summary>
        /// Minimum number of days between authorisations. Only for 3D Secure 2.
        /// </summary>
        /// <value>Minimum number of days between authorisations. Only for 3D Secure 2.</value>
        [JsonPropertyName("recurringFrequency")]
        public string RecurringFrequency { get { return this.RecurringFrequencyOption; } set { this.RecurringFrequencyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RedirectFromIssuerMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RedirectFromIssuerMethodOption { get; private set; }

        /// <summary>
        /// Specifies the redirect method (GET or POST) when redirecting back from the issuer.
        /// </summary>
        /// <value>Specifies the redirect method (GET or POST) when redirecting back from the issuer.</value>
        [JsonPropertyName("redirectFromIssuerMethod")]
        public string RedirectFromIssuerMethod { get { return this.RedirectFromIssuerMethodOption; } set { this.RedirectFromIssuerMethodOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RedirectToIssuerMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RedirectToIssuerMethodOption { get; private set; }

        /// <summary>
        /// Specifies the redirect method (GET or POST) when redirecting to the issuer.
        /// </summary>
        /// <value>Specifies the redirect method (GET or POST) when redirecting to the issuer.</value>
        [JsonPropertyName("redirectToIssuerMethod")]
        public string RedirectToIssuerMethod { get { return this.RedirectToIssuerMethodOption; } set { this.RedirectToIssuerMethodOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RiskData> RiskDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets RiskData
        /// </summary>
        [JsonPropertyName("riskData")]
        public RiskData RiskData { get { return this.RiskDataOption; } set { this.RiskDataOption = new Option<RiskData>(value); } }

        /// <summary>
        /// Used to track the state of SessionData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SessionDataOption { get; private set; }

        /// <summary>
        /// The payment session data you need to pass to your front end.
        /// </summary>
        /// <value>The payment session data you need to pass to your front end.</value>
        [JsonPropertyName("sessionData")]
        public string SessionData { get { return this.SessionDataOption; } set { this.SessionDataOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperEmailOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s email address.
        /// </summary>
        /// <value>The shopper&#39;s email address.</value>
        [JsonPropertyName("shopperEmail")]
        public string ShopperEmail { get { return this.ShopperEmailOption; } set { this.ShopperEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperIP
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperIPOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
        /// </summary>
        /// <value>The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).</value>
        [JsonPropertyName("shopperIP")]
        public string ShopperIP { get { return this.ShopperIPOption; } set { this.ShopperIPOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperLocale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperLocaleOption { get; private set; }

        /// <summary>
        /// The combination of a language code and a country code to specify the language to be used in the payment.
        /// </summary>
        /// <value>The combination of a language code and a country code to specify the language to be used in the payment.</value>
        [JsonPropertyName("shopperLocale")]
        public string ShopperLocale { get { return this.ShopperLocaleOption; } set { this.ShopperLocaleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Name> ShopperNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShopperName
        /// </summary>
        [JsonPropertyName("shopperName")]
        public Name ShopperName { get { return this.ShopperNameOption; } set { this.ShopperNameOption = new Option<Name>(value); } }

        /// <summary>
        /// Used to track the state of ShopperReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperReferenceOption { get; private set; }

        /// <summary>
        /// Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.
        /// </summary>
        /// <value>Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.</value>
        [JsonPropertyName("shopperReference")]
        public string ShopperReference { get { return this.ShopperReferenceOption; } set { this.ShopperReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperStatement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperStatementOption { get; private set; }

        /// <summary>
        /// The text to be shown on the shopper&#39;s bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , &#39; _ - ? + * /_**.
        /// </summary>
        /// <value>The text to be shown on the shopper&#39;s bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , &#39; _ - ? + * /_**.</value>
        [JsonPropertyName("shopperStatement")]
        public string ShopperStatement { get { return this.ShopperStatementOption; } set { this.ShopperStatementOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShowInstallmentAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowInstallmentAmountOption { get; private set; }

        /// <summary>
        /// Set to true to show the payment amount per installment.
        /// </summary>
        /// <value>Set to true to show the payment amount per installment.</value>
        [JsonPropertyName("showInstallmentAmount")]
        public bool? ShowInstallmentAmount { get { return this.ShowInstallmentAmountOption; } set { this.ShowInstallmentAmountOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ShowRemovePaymentMethodButton
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowRemovePaymentMethodButtonOption { get; private set; }

        /// <summary>
        /// Set to **true** to show a button that lets the shopper remove a stored payment method.
        /// </summary>
        /// <value>Set to **true** to show a button that lets the shopper remove a stored payment method.</value>
        [JsonPropertyName("showRemovePaymentMethodButton")]
        public bool? ShowRemovePaymentMethodButton { get { return this.ShowRemovePaymentMethodButtonOption; } set { this.ShowRemovePaymentMethodButtonOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SocialSecurityNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SocialSecurityNumberOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s social security number.
        /// </summary>
        /// <value>The shopper&#39;s social security number.</value>
        [JsonPropertyName("socialSecurityNumber")]
        public string SocialSecurityNumber { get { return this.SocialSecurityNumberOption; } set { this.SocialSecurityNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SplitCardFundingSources
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SplitCardFundingSourcesOption { get; private set; }

        /// <summary>
        /// Boolean value indicating whether the card payment method should be split into separate debit and credit options.
        /// </summary>
        /// <value>Boolean value indicating whether the card payment method should be split into separate debit and credit options.</value>
        [JsonPropertyName("splitCardFundingSources")]
        public bool? SplitCardFundingSources { get { return this.SplitCardFundingSourcesOption; } set { this.SplitCardFundingSourcesOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Splits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Split>> SplitsOption { get; private set; }

        /// <summary>
        /// An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/platforms/process-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/classic-platforms/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).
        /// </summary>
        /// <value>An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/platforms/process-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/classic-platforms/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).</value>
        [JsonPropertyName("splits")]
        public List<Split> Splits { get { return this.SplitsOption; } set { this.SplitsOption = new Option<List<Split>>(value); } }

        /// <summary>
        /// Used to track the state of Store
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StoreOption { get; private set; }

        /// <summary>
        /// Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.
        /// </summary>
        /// <value>Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.</value>
        [JsonPropertyName("store")]
        public string Store { get { return this.StoreOption; } set { this.StoreOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StorePaymentMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StorePaymentMethodOption { get; private set; }

        /// <summary>
        /// When true and &#x60;shopperReference&#x60; is provided, the payment details will be stored for future [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types).
        /// </summary>
        /// <value>When true and &#x60;shopperReference&#x60; is provided, the payment details will be stored for future [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types).</value>
        [JsonPropertyName("storePaymentMethod")]
        public bool? StorePaymentMethod { get { return this.StorePaymentMethodOption; } set { this.StorePaymentMethodOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TelephoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TelephoneNumberOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s telephone number.
        /// </summary>
        /// <value>The shopper&#39;s telephone number.</value>
        [JsonPropertyName("telephoneNumber")]
        public string TelephoneNumber { get { return this.TelephoneNumberOption; } set { this.TelephoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThemeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThemeIdOption { get; private set; }

        /// <summary>
        /// Sets a custom theme for [Hosted Checkout](https://docs.adyen.com/online-payments/build-your-integration/?platform&#x3D;Web&amp;integration&#x3D;Hosted+Checkout). The value can be any of the **Theme ID** values from your Customer Area.
        /// </summary>
        /// <value>Sets a custom theme for [Hosted Checkout](https://docs.adyen.com/online-payments/build-your-integration/?platform&#x3D;Web&amp;integration&#x3D;Hosted+Checkout). The value can be any of the **Theme ID** values from your Customer Area.</value>
        [JsonPropertyName("themeId")]
        public string ThemeId { get { return this.ThemeIdOption; } set { this.ThemeIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDS2RequestData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CheckoutSessionThreeDS2RequestData> ThreeDS2RequestDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreeDS2RequestData
        /// </summary>
        [JsonPropertyName("threeDS2RequestData")]
        public CheckoutSessionThreeDS2RequestData ThreeDS2RequestData { get { return this.ThreeDS2RequestDataOption; } set { this.ThreeDS2RequestDataOption = new Option<CheckoutSessionThreeDS2RequestData>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSAuthenticationOnly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ThreeDSAuthenticationOnlyOption { get; private set; }

        /// <summary>
        /// If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
        /// </summary>
        /// <value>If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.</value>
        [JsonPropertyName("threeDSAuthenticationOnly")]
        [Obsolete]
        public bool? ThreeDSAuthenticationOnly { get { return this.ThreeDSAuthenticationOnlyOption; } set { this.ThreeDSAuthenticationOnlyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TrustedShopper
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TrustedShopperOption { get; private set; }

        /// <summary>
        /// Set to true if the payment should be routed to a trusted MID.
        /// </summary>
        /// <value>Set to true if the payment should be routed to a trusted MID.</value>
        [JsonPropertyName("trustedShopper")]
        public bool? TrustedShopper { get { return this.TrustedShopperOption; } set { this.TrustedShopperOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UrlOption { get; private set; }

        /// <summary>
        /// The URL for the Hosted Checkout page. Redirect the shopper to this URL so they can make the payment.
        /// </summary>
        /// <value>The URL for the Hosted Checkout page. Redirect the shopper to this URL so they can make the payment.</value>
        [JsonPropertyName("url")]
        public string Url { get { return this.UrlOption; } set { this.UrlOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCheckoutSessionResponse {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  AccountInfo: ").Append(AccountInfo).Append("\n");
            sb.Append("  AdditionalAmount: ").Append(AdditionalAmount).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  AllowedPaymentMethods: ").Append(AllowedPaymentMethods).Append("\n");
            sb.Append("  ApplicationInfo: ").Append(ApplicationInfo).Append("\n");
            sb.Append("  AuthenticationData: ").Append(AuthenticationData).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  BlockedPaymentMethods: ").Append(BlockedPaymentMethods).Append("\n");
            sb.Append("  CaptureDelayHours: ").Append(CaptureDelayHours).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DeliverAt: ").Append(DeliverAt).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  EnableOneClick: ").Append(EnableOneClick).Append("\n");
            sb.Append("  EnablePayOut: ").Append(EnablePayOut).Append("\n");
            sb.Append("  EnableRecurring: ").Append(EnableRecurring).Append("\n");
            sb.Append("  FundOrigin: ").Append(FundOrigin).Append("\n");
            sb.Append("  FundRecipient: ").Append(FundRecipient).Append("\n");
            sb.Append("  InstallmentOptions: ").Append(InstallmentOptions).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Mandate: ").Append(Mandate).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  MerchantOrderReference: ").Append(MerchantOrderReference).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  MpiData: ").Append(MpiData).Append("\n");
            sb.Append("  PlatformChargebackLogic: ").Append(PlatformChargebackLogic).Append("\n");
            sb.Append("  RecurringExpiry: ").Append(RecurringExpiry).Append("\n");
            sb.Append("  RecurringFrequency: ").Append(RecurringFrequency).Append("\n");
            sb.Append("  RecurringProcessingModel: ").Append(RecurringProcessingModel).Append("\n");
            sb.Append("  RedirectFromIssuerMethod: ").Append(RedirectFromIssuerMethod).Append("\n");
            sb.Append("  RedirectToIssuerMethod: ").Append(RedirectToIssuerMethod).Append("\n");
            sb.Append("  RiskData: ").Append(RiskData).Append("\n");
            sb.Append("  SessionData: ").Append(SessionData).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("  ShopperIP: ").Append(ShopperIP).Append("\n");
            sb.Append("  ShopperInteraction: ").Append(ShopperInteraction).Append("\n");
            sb.Append("  ShopperLocale: ").Append(ShopperLocale).Append("\n");
            sb.Append("  ShopperName: ").Append(ShopperName).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("  ShopperStatement: ").Append(ShopperStatement).Append("\n");
            sb.Append("  ShowInstallmentAmount: ").Append(ShowInstallmentAmount).Append("\n");
            sb.Append("  ShowRemovePaymentMethodButton: ").Append(ShowRemovePaymentMethodButton).Append("\n");
            sb.Append("  SocialSecurityNumber: ").Append(SocialSecurityNumber).Append("\n");
            sb.Append("  SplitCardFundingSources: ").Append(SplitCardFundingSources).Append("\n");
            sb.Append("  Splits: ").Append(Splits).Append("\n");
            sb.Append("  Store: ").Append(Store).Append("\n");
            sb.Append("  StoreFiltrationMode: ").Append(StoreFiltrationMode).Append("\n");
            sb.Append("  StorePaymentMethod: ").Append(StorePaymentMethod).Append("\n");
            sb.Append("  StorePaymentMethodMode: ").Append(StorePaymentMethodMode).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  ThemeId: ").Append(ThemeId).Append("\n");
            sb.Append("  ThreeDS2RequestData: ").Append(ThreeDS2RequestData).Append("\n");
            sb.Append("  ThreeDSAuthenticationOnly: ").Append(ThreeDSAuthenticationOnly).Append("\n");
            sb.Append("  TrustedShopper: ").Append(TrustedShopper).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCheckoutSessionResponse);
        }

        /// <summary>
        /// Returns true if CreateCheckoutSessionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCheckoutSessionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCheckoutSessionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + Id.GetHashCode();

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReturnUrl (string) maxLength
            if (this.ReturnUrl != null && this.ReturnUrl.Length > 8000)
            {
                yield return new ValidationResult("Invalid value for ReturnUrl, length must be less than 8000.", new [] { "ReturnUrl" });
            }

            // ShopperReference (string) maxLength
            if (this.ShopperReference != null && this.ShopperReference.Length > 256)
            {
                yield return new ValidationResult("Invalid value for ShopperReference, length must be less than 256.", new [] { "ShopperReference" });
            }

            // ShopperReference (string) minLength
            if (this.ShopperReference != null && this.ShopperReference.Length < 3)
            {
                yield return new ValidationResult("Invalid value for ShopperReference, length must be greater than 3.", new [] { "ShopperReference" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateCheckoutSessionResponse" />
    /// </summary>
    public class CreateCheckoutSessionResponseJsonConverter : JsonConverter<CreateCheckoutSessionResponse>
    {
        /// <summary>
        /// The format to use to serialize ExpiresAt
        /// </summary>
        public static string ExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DateOfBirth
        /// </summary>
        public static string DateOfBirthFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeliverAt
        /// </summary>
        public static string DeliverAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CreateCheckoutSessionResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateCheckoutSessionResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Amount> amount = default;
            Option<DateTime?> expiresAt = default;
            Option<string> id = default;
            Option<string> merchantAccount = default;
            Option<string> reference = default;
            Option<string> returnUrl = default;
            Option<AccountInfo> accountInfo = default;
            Option<Amount> additionalAmount = default;
            Option<Dictionary<string, string>> additionalData = default;
            Option<List<string>> allowedPaymentMethods = default;
            Option<ApplicationInfo> applicationInfo = default;
            Option<AuthenticationData> authenticationData = default;
            Option<BillingAddress> billingAddress = default;
            Option<List<string>> blockedPaymentMethods = default;
            Option<int?> captureDelayHours = default;
            Option<CreateCheckoutSessionResponse.ChannelEnum?> channel = default;
            Option<Company> company = default;
            Option<string> countryCode = default;
            Option<DateTime?> dateOfBirth = default;
            Option<DateTime?> deliverAt = default;
            Option<DeliveryAddress> deliveryAddress = default;
            Option<bool?> enableOneClick = default;
            Option<bool?> enablePayOut = default;
            Option<bool?> enableRecurring = default;
            Option<FundOrigin> fundOrigin = default;
            Option<FundRecipient> fundRecipient = default;
            Option<Dictionary<string, CheckoutSessionInstallmentOption>> installmentOptions = default;
            Option<List<LineItem>> lineItems = default;
            Option<Mandate> mandate = default;
            Option<string> mcc = default;
            Option<string> merchantOrderReference = default;
            Option<Dictionary<string, string>> metadata = default;
            Option<CreateCheckoutSessionResponse.ModeEnum?> mode = default;
            Option<ThreeDSecureData> mpiData = default;
            Option<PlatformChargebackLogic> platformChargebackLogic = default;
            Option<string> recurringExpiry = default;
            Option<string> recurringFrequency = default;
            Option<CreateCheckoutSessionResponse.RecurringProcessingModelEnum?> recurringProcessingModel = default;
            Option<string> redirectFromIssuerMethod = default;
            Option<string> redirectToIssuerMethod = default;
            Option<RiskData> riskData = default;
            Option<string> sessionData = default;
            Option<string> shopperEmail = default;
            Option<string> shopperIP = default;
            Option<CreateCheckoutSessionResponse.ShopperInteractionEnum?> shopperInteraction = default;
            Option<string> shopperLocale = default;
            Option<Name> shopperName = default;
            Option<string> shopperReference = default;
            Option<string> shopperStatement = default;
            Option<bool?> showInstallmentAmount = default;
            Option<bool?> showRemovePaymentMethodButton = default;
            Option<string> socialSecurityNumber = default;
            Option<bool?> splitCardFundingSources = default;
            Option<List<Split>> splits = default;
            Option<string> store = default;
            Option<CreateCheckoutSessionResponse.StoreFiltrationModeEnum?> storeFiltrationMode = default;
            Option<bool?> storePaymentMethod = default;
            Option<CreateCheckoutSessionResponse.StorePaymentMethodModeEnum?> storePaymentMethodMode = default;
            Option<string> telephoneNumber = default;
            Option<string> themeId = default;
            Option<CheckoutSessionThreeDS2RequestData> threeDS2RequestData = default;
            Option<bool?> threeDSAuthenticationOnly = default;
            Option<bool?> trustedShopper = default;
            Option<string> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "expiresAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantAccount":
                            merchantAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "returnUrl":
                            returnUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "accountInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountInfo = new Option<AccountInfo>(JsonSerializer.Deserialize<AccountInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "additionalAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalAmount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "additionalData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalData = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "allowedPaymentMethods":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowedPaymentMethods = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "applicationInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                applicationInfo = new Option<ApplicationInfo>(JsonSerializer.Deserialize<ApplicationInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "authenticationData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                authenticationData = new Option<AuthenticationData>(JsonSerializer.Deserialize<AuthenticationData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "billingAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                billingAddress = new Option<BillingAddress>(JsonSerializer.Deserialize<BillingAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "blockedPaymentMethods":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                blockedPaymentMethods = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "captureDelayHours":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                captureDelayHours = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "channel":
                            string channelRawValue = utf8JsonReader.GetString();
                            if (channelRawValue != null)
                                channel = new Option<CreateCheckoutSessionResponse.ChannelEnum?>(CreateCheckoutSessionResponse.ChannelEnumFromStringOrDefault(channelRawValue));
                            break;
                        case "company":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                company = new Option<Company>(JsonSerializer.Deserialize<Company>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "countryCode":
                            countryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dateOfBirth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateOfBirth = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliverAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliverAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryAddress = new Option<DeliveryAddress>(JsonSerializer.Deserialize<DeliveryAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "enableOneClick":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enableOneClick = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "enablePayOut":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enablePayOut = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "enableRecurring":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enableRecurring = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "fundOrigin":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fundOrigin = new Option<FundOrigin>(JsonSerializer.Deserialize<FundOrigin>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fundRecipient":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fundRecipient = new Option<FundRecipient>(JsonSerializer.Deserialize<FundRecipient>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "installmentOptions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                installmentOptions = new Option<Dictionary<string, CheckoutSessionInstallmentOption>>(JsonSerializer.Deserialize<Dictionary<string, CheckoutSessionInstallmentOption>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "lineItems":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lineItems = new Option<List<LineItem>>(JsonSerializer.Deserialize<List<LineItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mandate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mandate = new Option<Mandate>(JsonSerializer.Deserialize<Mandate>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mcc":
                            mcc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantOrderReference":
                            merchantOrderReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "metadata":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                metadata = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mode":
                            string modeRawValue = utf8JsonReader.GetString();
                            if (modeRawValue != null)
                                mode = new Option<CreateCheckoutSessionResponse.ModeEnum?>(CreateCheckoutSessionResponse.ModeEnumFromStringOrDefault(modeRawValue));
                            break;
                        case "mpiData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mpiData = new Option<ThreeDSecureData>(JsonSerializer.Deserialize<ThreeDSecureData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "platformChargebackLogic":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                platformChargebackLogic = new Option<PlatformChargebackLogic>(JsonSerializer.Deserialize<PlatformChargebackLogic>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recurringExpiry":
                            recurringExpiry = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurringFrequency":
                            recurringFrequency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurringProcessingModel":
                            string recurringProcessingModelRawValue = utf8JsonReader.GetString();
                            if (recurringProcessingModelRawValue != null)
                                recurringProcessingModel = new Option<CreateCheckoutSessionResponse.RecurringProcessingModelEnum?>(CreateCheckoutSessionResponse.RecurringProcessingModelEnumFromStringOrDefault(recurringProcessingModelRawValue));
                            break;
                        case "redirectFromIssuerMethod":
                            redirectFromIssuerMethod = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "redirectToIssuerMethod":
                            redirectToIssuerMethod = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                riskData = new Option<RiskData>(JsonSerializer.Deserialize<RiskData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sessionData":
                            sessionData = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperEmail":
                            shopperEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperIP":
                            shopperIP = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperInteraction":
                            string shopperInteractionRawValue = utf8JsonReader.GetString();
                            if (shopperInteractionRawValue != null)
                                shopperInteraction = new Option<CreateCheckoutSessionResponse.ShopperInteractionEnum?>(CreateCheckoutSessionResponse.ShopperInteractionEnumFromStringOrDefault(shopperInteractionRawValue));
                            break;
                        case "shopperLocale":
                            shopperLocale = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperName":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shopperName = new Option<Name>(JsonSerializer.Deserialize<Name>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shopperReference":
                            shopperReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperStatement":
                            shopperStatement = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "showInstallmentAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                showInstallmentAmount = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "showRemovePaymentMethodButton":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                showRemovePaymentMethodButton = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "socialSecurityNumber":
                            socialSecurityNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "splitCardFundingSources":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                splitCardFundingSources = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "splits":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                splits = new Option<List<Split>>(JsonSerializer.Deserialize<List<Split>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "store":
                            store = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "storeFiltrationMode":
                            string storeFiltrationModeRawValue = utf8JsonReader.GetString();
                            if (storeFiltrationModeRawValue != null)
                                storeFiltrationMode = new Option<CreateCheckoutSessionResponse.StoreFiltrationModeEnum?>(CreateCheckoutSessionResponse.StoreFiltrationModeEnumFromStringOrDefault(storeFiltrationModeRawValue));
                            break;
                        case "storePaymentMethod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                storePaymentMethod = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "storePaymentMethodMode":
                            string storePaymentMethodModeRawValue = utf8JsonReader.GetString();
                            if (storePaymentMethodModeRawValue != null)
                                storePaymentMethodMode = new Option<CreateCheckoutSessionResponse.StorePaymentMethodModeEnum?>(CreateCheckoutSessionResponse.StorePaymentMethodModeEnumFromStringOrDefault(storePaymentMethodModeRawValue));
                            break;
                        case "telephoneNumber":
                            telephoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "themeId":
                            themeId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDS2RequestData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeDS2RequestData = new Option<CheckoutSessionThreeDS2RequestData>(JsonSerializer.Deserialize<CheckoutSessionThreeDS2RequestData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "threeDSAuthenticationOnly":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeDSAuthenticationOnly = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "trustedShopper":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                trustedShopper = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class CreateCheckoutSessionResponse.", nameof(amount));

            if (!expiresAt.IsSet)
                throw new ArgumentException("Property is required for class CreateCheckoutSessionResponse.", nameof(expiresAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class CreateCheckoutSessionResponse.", nameof(id));

            if (!merchantAccount.IsSet)
                throw new ArgumentException("Property is required for class CreateCheckoutSessionResponse.", nameof(merchantAccount));

            if (!reference.IsSet)
                throw new ArgumentException("Property is required for class CreateCheckoutSessionResponse.", nameof(reference));

            if (!returnUrl.IsSet)
                throw new ArgumentException("Property is required for class CreateCheckoutSessionResponse.", nameof(returnUrl));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (returnUrl.IsSet && returnUrl.Value == null)
                throw new ArgumentNullException(nameof(returnUrl), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (accountInfo.IsSet && accountInfo.Value == null)
                throw new ArgumentNullException(nameof(accountInfo), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (additionalAmount.IsSet && additionalAmount.Value == null)
                throw new ArgumentNullException(nameof(additionalAmount), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (additionalData.IsSet && additionalData.Value == null)
                throw new ArgumentNullException(nameof(additionalData), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (allowedPaymentMethods.IsSet && allowedPaymentMethods.Value == null)
                throw new ArgumentNullException(nameof(allowedPaymentMethods), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (applicationInfo.IsSet && applicationInfo.Value == null)
                throw new ArgumentNullException(nameof(applicationInfo), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (authenticationData.IsSet && authenticationData.Value == null)
                throw new ArgumentNullException(nameof(authenticationData), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (billingAddress.IsSet && billingAddress.Value == null)
                throw new ArgumentNullException(nameof(billingAddress), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (blockedPaymentMethods.IsSet && blockedPaymentMethods.Value == null)
                throw new ArgumentNullException(nameof(blockedPaymentMethods), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (captureDelayHours.IsSet && captureDelayHours.Value == null)
                throw new ArgumentNullException(nameof(captureDelayHours), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (channel.IsSet && channel.Value == null)
                throw new ArgumentNullException(nameof(channel), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (dateOfBirth.IsSet && dateOfBirth.Value == null)
                throw new ArgumentNullException(nameof(dateOfBirth), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (deliverAt.IsSet && deliverAt.Value == null)
                throw new ArgumentNullException(nameof(deliverAt), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (deliveryAddress.IsSet && deliveryAddress.Value == null)
                throw new ArgumentNullException(nameof(deliveryAddress), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (enableOneClick.IsSet && enableOneClick.Value == null)
                throw new ArgumentNullException(nameof(enableOneClick), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (enablePayOut.IsSet && enablePayOut.Value == null)
                throw new ArgumentNullException(nameof(enablePayOut), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (enableRecurring.IsSet && enableRecurring.Value == null)
                throw new ArgumentNullException(nameof(enableRecurring), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (fundOrigin.IsSet && fundOrigin.Value == null)
                throw new ArgumentNullException(nameof(fundOrigin), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (fundRecipient.IsSet && fundRecipient.Value == null)
                throw new ArgumentNullException(nameof(fundRecipient), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (installmentOptions.IsSet && installmentOptions.Value == null)
                throw new ArgumentNullException(nameof(installmentOptions), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (lineItems.IsSet && lineItems.Value == null)
                throw new ArgumentNullException(nameof(lineItems), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (mandate.IsSet && mandate.Value == null)
                throw new ArgumentNullException(nameof(mandate), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (mcc.IsSet && mcc.Value == null)
                throw new ArgumentNullException(nameof(mcc), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (merchantOrderReference.IsSet && merchantOrderReference.Value == null)
                throw new ArgumentNullException(nameof(merchantOrderReference), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (mode.IsSet && mode.Value == null)
                throw new ArgumentNullException(nameof(mode), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (mpiData.IsSet && mpiData.Value == null)
                throw new ArgumentNullException(nameof(mpiData), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (platformChargebackLogic.IsSet && platformChargebackLogic.Value == null)
                throw new ArgumentNullException(nameof(platformChargebackLogic), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (recurringExpiry.IsSet && recurringExpiry.Value == null)
                throw new ArgumentNullException(nameof(recurringExpiry), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (recurringFrequency.IsSet && recurringFrequency.Value == null)
                throw new ArgumentNullException(nameof(recurringFrequency), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (recurringProcessingModel.IsSet && recurringProcessingModel.Value == null)
                throw new ArgumentNullException(nameof(recurringProcessingModel), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (redirectFromIssuerMethod.IsSet && redirectFromIssuerMethod.Value == null)
                throw new ArgumentNullException(nameof(redirectFromIssuerMethod), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (redirectToIssuerMethod.IsSet && redirectToIssuerMethod.Value == null)
                throw new ArgumentNullException(nameof(redirectToIssuerMethod), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (riskData.IsSet && riskData.Value == null)
                throw new ArgumentNullException(nameof(riskData), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (sessionData.IsSet && sessionData.Value == null)
                throw new ArgumentNullException(nameof(sessionData), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (shopperEmail.IsSet && shopperEmail.Value == null)
                throw new ArgumentNullException(nameof(shopperEmail), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (shopperIP.IsSet && shopperIP.Value == null)
                throw new ArgumentNullException(nameof(shopperIP), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (shopperInteraction.IsSet && shopperInteraction.Value == null)
                throw new ArgumentNullException(nameof(shopperInteraction), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (shopperLocale.IsSet && shopperLocale.Value == null)
                throw new ArgumentNullException(nameof(shopperLocale), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (shopperName.IsSet && shopperName.Value == null)
                throw new ArgumentNullException(nameof(shopperName), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (shopperReference.IsSet && shopperReference.Value == null)
                throw new ArgumentNullException(nameof(shopperReference), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (shopperStatement.IsSet && shopperStatement.Value == null)
                throw new ArgumentNullException(nameof(shopperStatement), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (showInstallmentAmount.IsSet && showInstallmentAmount.Value == null)
                throw new ArgumentNullException(nameof(showInstallmentAmount), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (showRemovePaymentMethodButton.IsSet && showRemovePaymentMethodButton.Value == null)
                throw new ArgumentNullException(nameof(showRemovePaymentMethodButton), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (socialSecurityNumber.IsSet && socialSecurityNumber.Value == null)
                throw new ArgumentNullException(nameof(socialSecurityNumber), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (splitCardFundingSources.IsSet && splitCardFundingSources.Value == null)
                throw new ArgumentNullException(nameof(splitCardFundingSources), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (splits.IsSet && splits.Value == null)
                throw new ArgumentNullException(nameof(splits), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (store.IsSet && store.Value == null)
                throw new ArgumentNullException(nameof(store), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (storeFiltrationMode.IsSet && storeFiltrationMode.Value == null)
                throw new ArgumentNullException(nameof(storeFiltrationMode), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (storePaymentMethod.IsSet && storePaymentMethod.Value == null)
                throw new ArgumentNullException(nameof(storePaymentMethod), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (storePaymentMethodMode.IsSet && storePaymentMethodMode.Value == null)
                throw new ArgumentNullException(nameof(storePaymentMethodMode), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (telephoneNumber.IsSet && telephoneNumber.Value == null)
                throw new ArgumentNullException(nameof(telephoneNumber), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (themeId.IsSet && themeId.Value == null)
                throw new ArgumentNullException(nameof(themeId), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (threeDS2RequestData.IsSet && threeDS2RequestData.Value == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (threeDSAuthenticationOnly.IsSet && threeDSAuthenticationOnly.Value == null)
                throw new ArgumentNullException(nameof(threeDSAuthenticationOnly), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (trustedShopper.IsSet && trustedShopper.Value == null)
                throw new ArgumentNullException(nameof(trustedShopper), "Property is not nullable for class CreateCheckoutSessionResponse.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class CreateCheckoutSessionResponse.");

            return new CreateCheckoutSessionResponse(amount.Value, expiresAt.Value.Value, id.Value, merchantAccount.Value, reference.Value, returnUrl.Value, accountInfo, additionalAmount, additionalData, allowedPaymentMethods, applicationInfo, authenticationData, billingAddress, blockedPaymentMethods, captureDelayHours, channel, company, countryCode, dateOfBirth, deliverAt, deliveryAddress, enableOneClick, enablePayOut, enableRecurring, fundOrigin, fundRecipient, installmentOptions, lineItems, mandate, mcc, merchantOrderReference, metadata, mode, mpiData, platformChargebackLogic, recurringExpiry, recurringFrequency, recurringProcessingModel, redirectFromIssuerMethod, redirectToIssuerMethod, riskData, sessionData, shopperEmail, shopperIP, shopperInteraction, shopperLocale, shopperName, shopperReference, shopperStatement, showInstallmentAmount, showRemovePaymentMethodButton, socialSecurityNumber, splitCardFundingSources, splits, store, storeFiltrationMode, storePaymentMethod, storePaymentMethodMode, telephoneNumber, themeId, threeDS2RequestData, threeDSAuthenticationOnly, trustedShopper, url);
        }

        /// <summary>
        /// Serializes a <see cref="CreateCheckoutSessionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCheckoutSessionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateCheckoutSessionResponse createCheckoutSessionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createCheckoutSessionResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateCheckoutSessionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCheckoutSessionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateCheckoutSessionResponse createCheckoutSessionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createCheckoutSessionResponse.Amount == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.Amount), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.Id == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.Id), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.MerchantAccount == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.MerchantAccount), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.Reference == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.Reference), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.ReturnUrl == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.ReturnUrl), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.AccountInfoOption.IsSet && createCheckoutSessionResponse.AccountInfo == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.AccountInfo), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.AdditionalAmountOption.IsSet && createCheckoutSessionResponse.AdditionalAmount == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.AdditionalAmount), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.AdditionalDataOption.IsSet && createCheckoutSessionResponse.AdditionalData == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.AdditionalData), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.AllowedPaymentMethodsOption.IsSet && createCheckoutSessionResponse.AllowedPaymentMethods == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.AllowedPaymentMethods), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.ApplicationInfoOption.IsSet && createCheckoutSessionResponse.ApplicationInfo == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.ApplicationInfo), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.AuthenticationDataOption.IsSet && createCheckoutSessionResponse.AuthenticationData == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.AuthenticationData), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.BillingAddressOption.IsSet && createCheckoutSessionResponse.BillingAddress == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.BillingAddress), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.BlockedPaymentMethodsOption.IsSet && createCheckoutSessionResponse.BlockedPaymentMethods == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.BlockedPaymentMethods), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.CompanyOption.IsSet && createCheckoutSessionResponse.Company == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.Company), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.CountryCodeOption.IsSet && createCheckoutSessionResponse.CountryCode == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.CountryCode), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.DeliveryAddressOption.IsSet && createCheckoutSessionResponse.DeliveryAddress == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.DeliveryAddress), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.FundOriginOption.IsSet && createCheckoutSessionResponse.FundOrigin == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.FundOrigin), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.FundRecipientOption.IsSet && createCheckoutSessionResponse.FundRecipient == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.FundRecipient), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.InstallmentOptionsOption.IsSet && createCheckoutSessionResponse.InstallmentOptions == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.InstallmentOptions), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.LineItemsOption.IsSet && createCheckoutSessionResponse.LineItems == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.LineItems), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.MandateOption.IsSet && createCheckoutSessionResponse.Mandate == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.Mandate), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.MccOption.IsSet && createCheckoutSessionResponse.Mcc == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.Mcc), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.MerchantOrderReferenceOption.IsSet && createCheckoutSessionResponse.MerchantOrderReference == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.MerchantOrderReference), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.MetadataOption.IsSet && createCheckoutSessionResponse.Metadata == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.Metadata), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.MpiDataOption.IsSet && createCheckoutSessionResponse.MpiData == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.MpiData), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.PlatformChargebackLogicOption.IsSet && createCheckoutSessionResponse.PlatformChargebackLogic == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.PlatformChargebackLogic), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.RecurringExpiryOption.IsSet && createCheckoutSessionResponse.RecurringExpiry == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.RecurringExpiry), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.RecurringFrequencyOption.IsSet && createCheckoutSessionResponse.RecurringFrequency == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.RecurringFrequency), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.RedirectFromIssuerMethodOption.IsSet && createCheckoutSessionResponse.RedirectFromIssuerMethod == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.RedirectFromIssuerMethod), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.RedirectToIssuerMethodOption.IsSet && createCheckoutSessionResponse.RedirectToIssuerMethod == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.RedirectToIssuerMethod), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.RiskDataOption.IsSet && createCheckoutSessionResponse.RiskData == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.RiskData), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.SessionDataOption.IsSet && createCheckoutSessionResponse.SessionData == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.SessionData), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.ShopperEmailOption.IsSet && createCheckoutSessionResponse.ShopperEmail == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.ShopperEmail), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.ShopperIPOption.IsSet && createCheckoutSessionResponse.ShopperIP == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.ShopperIP), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.ShopperLocaleOption.IsSet && createCheckoutSessionResponse.ShopperLocale == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.ShopperLocale), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.ShopperNameOption.IsSet && createCheckoutSessionResponse.ShopperName == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.ShopperName), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.ShopperReferenceOption.IsSet && createCheckoutSessionResponse.ShopperReference == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.ShopperReference), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.ShopperStatementOption.IsSet && createCheckoutSessionResponse.ShopperStatement == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.ShopperStatement), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.SocialSecurityNumberOption.IsSet && createCheckoutSessionResponse.SocialSecurityNumber == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.SocialSecurityNumber), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.SplitsOption.IsSet && createCheckoutSessionResponse.Splits == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.Splits), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.StoreOption.IsSet && createCheckoutSessionResponse.Store == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.Store), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.TelephoneNumberOption.IsSet && createCheckoutSessionResponse.TelephoneNumber == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.TelephoneNumber), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.ThemeIdOption.IsSet && createCheckoutSessionResponse.ThemeId == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.ThemeId), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.ThreeDS2RequestDataOption.IsSet && createCheckoutSessionResponse.ThreeDS2RequestData == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.ThreeDS2RequestData), "Property is required for class CreateCheckoutSessionResponse.");

            if (createCheckoutSessionResponse.UrlOption.IsSet && createCheckoutSessionResponse.Url == null)
                throw new ArgumentNullException(nameof(createCheckoutSessionResponse.Url), "Property is required for class CreateCheckoutSessionResponse.");

            writer.WritePropertyName("amount");
            JsonSerializer.Serialize(writer, createCheckoutSessionResponse.Amount, jsonSerializerOptions);
            writer.WriteString("expiresAt", createCheckoutSessionResponse.ExpiresAt.ToString(ExpiresAtFormat));

            writer.WriteString("id", createCheckoutSessionResponse.Id);

            writer.WriteString("merchantAccount", createCheckoutSessionResponse.MerchantAccount);

            writer.WriteString("reference", createCheckoutSessionResponse.Reference);

            writer.WriteString("returnUrl", createCheckoutSessionResponse.ReturnUrl);

            if (createCheckoutSessionResponse.AccountInfoOption.IsSet)
            {
                writer.WritePropertyName("accountInfo");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.AccountInfo, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.AdditionalAmountOption.IsSet)
            {
                writer.WritePropertyName("additionalAmount");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.AdditionalAmount, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.AdditionalDataOption.IsSet)
            {
                writer.WritePropertyName("additionalData");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.AdditionalData, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.AllowedPaymentMethodsOption.IsSet)
            {
                writer.WritePropertyName("allowedPaymentMethods");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.AllowedPaymentMethods, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.ApplicationInfoOption.IsSet)
            {
                writer.WritePropertyName("applicationInfo");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.ApplicationInfo, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.AuthenticationDataOption.IsSet)
            {
                writer.WritePropertyName("authenticationData");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.AuthenticationData, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.BillingAddressOption.IsSet)
            {
                writer.WritePropertyName("billingAddress");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.BillingAddress, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.BlockedPaymentMethodsOption.IsSet)
            {
                writer.WritePropertyName("blockedPaymentMethods");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.BlockedPaymentMethods, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.CaptureDelayHoursOption.IsSet)
                writer.WriteNumber("captureDelayHours", createCheckoutSessionResponse.CaptureDelayHoursOption.Value.Value);

            var channelRawValue = CreateCheckoutSessionResponse.ChannelEnumToJsonValue(createCheckoutSessionResponse.ChannelOption.Value.Value);
            writer.WriteString("channel", channelRawValue);
            if (createCheckoutSessionResponse.CompanyOption.IsSet)
            {
                writer.WritePropertyName("company");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.Company, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", createCheckoutSessionResponse.CountryCode);

            if (createCheckoutSessionResponse.DateOfBirthOption.IsSet)
                writer.WriteString("dateOfBirth", createCheckoutSessionResponse.DateOfBirthOption.Value.Value.ToString(DateOfBirthFormat));

            if (createCheckoutSessionResponse.DeliverAtOption.IsSet)
                writer.WriteString("deliverAt", createCheckoutSessionResponse.DeliverAtOption.Value.Value.ToString(DeliverAtFormat));

            if (createCheckoutSessionResponse.DeliveryAddressOption.IsSet)
            {
                writer.WritePropertyName("deliveryAddress");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.DeliveryAddress, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.EnableOneClickOption.IsSet)
                writer.WriteBoolean("enableOneClick", createCheckoutSessionResponse.EnableOneClickOption.Value.Value);

            if (createCheckoutSessionResponse.EnablePayOutOption.IsSet)
                writer.WriteBoolean("enablePayOut", createCheckoutSessionResponse.EnablePayOutOption.Value.Value);

            if (createCheckoutSessionResponse.EnableRecurringOption.IsSet)
                writer.WriteBoolean("enableRecurring", createCheckoutSessionResponse.EnableRecurringOption.Value.Value);

            if (createCheckoutSessionResponse.FundOriginOption.IsSet)
            {
                writer.WritePropertyName("fundOrigin");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.FundOrigin, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.FundRecipientOption.IsSet)
            {
                writer.WritePropertyName("fundRecipient");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.FundRecipient, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.InstallmentOptionsOption.IsSet)
            {
                writer.WritePropertyName("installmentOptions");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.InstallmentOptions, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.LineItemsOption.IsSet)
            {
                writer.WritePropertyName("lineItems");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.LineItems, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.MandateOption.IsSet)
            {
                writer.WritePropertyName("mandate");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.Mandate, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.MccOption.IsSet)
                writer.WriteString("mcc", createCheckoutSessionResponse.Mcc);

            if (createCheckoutSessionResponse.MerchantOrderReferenceOption.IsSet)
                writer.WriteString("merchantOrderReference", createCheckoutSessionResponse.MerchantOrderReference);

            if (createCheckoutSessionResponse.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.Metadata, jsonSerializerOptions);
            }
            var modeRawValue = CreateCheckoutSessionResponse.ModeEnumToJsonValue(createCheckoutSessionResponse.ModeOption.Value.Value);
            writer.WriteString("mode", modeRawValue);
            if (createCheckoutSessionResponse.MpiDataOption.IsSet)
            {
                writer.WritePropertyName("mpiData");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.MpiData, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.PlatformChargebackLogicOption.IsSet)
            {
                writer.WritePropertyName("platformChargebackLogic");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.PlatformChargebackLogic, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.RecurringExpiryOption.IsSet)
                writer.WriteString("recurringExpiry", createCheckoutSessionResponse.RecurringExpiry);

            if (createCheckoutSessionResponse.RecurringFrequencyOption.IsSet)
                writer.WriteString("recurringFrequency", createCheckoutSessionResponse.RecurringFrequency);

            var recurringProcessingModelRawValue = CreateCheckoutSessionResponse.RecurringProcessingModelEnumToJsonValue(createCheckoutSessionResponse.RecurringProcessingModelOption.Value.Value);
            writer.WriteString("recurringProcessingModel", recurringProcessingModelRawValue);
            if (createCheckoutSessionResponse.RedirectFromIssuerMethodOption.IsSet)
                writer.WriteString("redirectFromIssuerMethod", createCheckoutSessionResponse.RedirectFromIssuerMethod);

            if (createCheckoutSessionResponse.RedirectToIssuerMethodOption.IsSet)
                writer.WriteString("redirectToIssuerMethod", createCheckoutSessionResponse.RedirectToIssuerMethod);

            if (createCheckoutSessionResponse.RiskDataOption.IsSet)
            {
                writer.WritePropertyName("riskData");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.RiskData, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.SessionDataOption.IsSet)
                writer.WriteString("sessionData", createCheckoutSessionResponse.SessionData);

            if (createCheckoutSessionResponse.ShopperEmailOption.IsSet)
                writer.WriteString("shopperEmail", createCheckoutSessionResponse.ShopperEmail);

            if (createCheckoutSessionResponse.ShopperIPOption.IsSet)
                writer.WriteString("shopperIP", createCheckoutSessionResponse.ShopperIP);

            var shopperInteractionRawValue = CreateCheckoutSessionResponse.ShopperInteractionEnumToJsonValue(createCheckoutSessionResponse.ShopperInteractionOption.Value.Value);
            writer.WriteString("shopperInteraction", shopperInteractionRawValue);
            if (createCheckoutSessionResponse.ShopperLocaleOption.IsSet)
                writer.WriteString("shopperLocale", createCheckoutSessionResponse.ShopperLocale);

            if (createCheckoutSessionResponse.ShopperNameOption.IsSet)
            {
                writer.WritePropertyName("shopperName");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.ShopperName, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.ShopperReferenceOption.IsSet)
                writer.WriteString("shopperReference", createCheckoutSessionResponse.ShopperReference);

            if (createCheckoutSessionResponse.ShopperStatementOption.IsSet)
                writer.WriteString("shopperStatement", createCheckoutSessionResponse.ShopperStatement);

            if (createCheckoutSessionResponse.ShowInstallmentAmountOption.IsSet)
                writer.WriteBoolean("showInstallmentAmount", createCheckoutSessionResponse.ShowInstallmentAmountOption.Value.Value);

            if (createCheckoutSessionResponse.ShowRemovePaymentMethodButtonOption.IsSet)
                writer.WriteBoolean("showRemovePaymentMethodButton", createCheckoutSessionResponse.ShowRemovePaymentMethodButtonOption.Value.Value);

            if (createCheckoutSessionResponse.SocialSecurityNumberOption.IsSet)
                writer.WriteString("socialSecurityNumber", createCheckoutSessionResponse.SocialSecurityNumber);

            if (createCheckoutSessionResponse.SplitCardFundingSourcesOption.IsSet)
                writer.WriteBoolean("splitCardFundingSources", createCheckoutSessionResponse.SplitCardFundingSourcesOption.Value.Value);

            if (createCheckoutSessionResponse.SplitsOption.IsSet)
            {
                writer.WritePropertyName("splits");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.Splits, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.StoreOption.IsSet)
                writer.WriteString("store", createCheckoutSessionResponse.Store);

            var storeFiltrationModeRawValue = CreateCheckoutSessionResponse.StoreFiltrationModeEnumToJsonValue(createCheckoutSessionResponse.StoreFiltrationModeOption.Value.Value);
            writer.WriteString("storeFiltrationMode", storeFiltrationModeRawValue);
            if (createCheckoutSessionResponse.StorePaymentMethodOption.IsSet)
                writer.WriteBoolean("storePaymentMethod", createCheckoutSessionResponse.StorePaymentMethodOption.Value.Value);

            var storePaymentMethodModeRawValue = CreateCheckoutSessionResponse.StorePaymentMethodModeEnumToJsonValue(createCheckoutSessionResponse.StorePaymentMethodModeOption.Value.Value);
            writer.WriteString("storePaymentMethodMode", storePaymentMethodModeRawValue);
            if (createCheckoutSessionResponse.TelephoneNumberOption.IsSet)
                writer.WriteString("telephoneNumber", createCheckoutSessionResponse.TelephoneNumber);

            if (createCheckoutSessionResponse.ThemeIdOption.IsSet)
                writer.WriteString("themeId", createCheckoutSessionResponse.ThemeId);

            if (createCheckoutSessionResponse.ThreeDS2RequestDataOption.IsSet)
            {
                writer.WritePropertyName("threeDS2RequestData");
                JsonSerializer.Serialize(writer, createCheckoutSessionResponse.ThreeDS2RequestData, jsonSerializerOptions);
            }
            if (createCheckoutSessionResponse.ThreeDSAuthenticationOnlyOption.IsSet)
                writer.WriteBoolean("threeDSAuthenticationOnly", createCheckoutSessionResponse.ThreeDSAuthenticationOnlyOption.Value.Value);

            if (createCheckoutSessionResponse.TrustedShopperOption.IsSet)
                writer.WriteBoolean("trustedShopper", createCheckoutSessionResponse.TrustedShopperOption.Value.Value);

            if (createCheckoutSessionResponse.UrlOption.IsSet)
                writer.WriteString("url", createCheckoutSessionResponse.Url);
        }
    }
}
