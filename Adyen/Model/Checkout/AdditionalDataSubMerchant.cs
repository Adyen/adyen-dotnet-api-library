// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataSubMerchant
    /// </summary>
    public partial class AdditionalDataSubMerchant : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataSubMerchant" /> class.
        /// </summary>
        /// <param name="subMerchantNumberOfSubSellers">Required for transactions performed by registered payment facilitators. Indicates the number of sub-merchants contained in the request. For example, **3**.</param>
        /// <param name="subMerchantSubSellerSubSellerNrCity">Required for transactions performed by registered payment facilitators. The city of the sub-merchant&#39;s address. * Format: Alphanumeric * Maximum length: 13 characters</param>
        /// <param name="subMerchantSubSellerSubSellerNrCountry">Required for transactions performed by registered payment facilitators. The three-letter country code of the sub-merchant&#39;s address. For example, **BRA** for Brazil.  * Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) * Fixed length: 3 characters</param>
        /// <param name="subMerchantSubSellerSubSellerNrEmail">Required for transactions performed by registered payment facilitators. The email address of the sub-merchant. * Format: Alphanumeric * Maximum length: 40 characters</param>
        /// <param name="subMerchantSubSellerSubSellerNrId">Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant.  * Format: Alphanumeric * Maximum length: 15 characters</param>
        /// <param name="subMerchantSubSellerSubSellerNrMcc">Required for transactions performed by registered payment facilitators. The sub-merchant&#39;s 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits</param>
        /// <param name="subMerchantSubSellerSubSellerNrName">Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters</param>
        /// <param name="subMerchantSubSellerSubSellerNrPhoneNumber">Required for transactions performed by registered payment facilitators. The phone number of the sub-merchant.* Format: Alphanumeric * Maximum length: 20 characters</param>
        /// <param name="subMerchantSubSellerSubSellerNrPostalCode">Required for transactions performed by registered payment facilitators. The postal code of the sub-merchant&#39;s address, without dashes. * Format: Numeric * Fixed length: 8 digits</param>
        /// <param name="subMerchantSubSellerSubSellerNrState">Required for transactions performed by registered payment facilitators. The state code of the sub-merchant&#39;s address, if applicable to the country. * Format: Alphanumeric * Maximum length: 2 characters</param>
        /// <param name="subMerchantSubSellerSubSellerNrStreet">Required for transactions performed by registered payment facilitators. The street name and house number of the sub-merchant&#39;s address. * Format: Alphanumeric * Maximum length: 60 characters</param>
        /// <param name="subMerchantSubSellerSubSellerNrTaxId">Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ</param>
        [JsonConstructor]
        public AdditionalDataSubMerchant(Option<string> subMerchantNumberOfSubSellers = default, Option<string> subMerchantSubSellerSubSellerNrCity = default, Option<string> subMerchantSubSellerSubSellerNrCountry = default, Option<string> subMerchantSubSellerSubSellerNrEmail = default, Option<string> subMerchantSubSellerSubSellerNrId = default, Option<string> subMerchantSubSellerSubSellerNrMcc = default, Option<string> subMerchantSubSellerSubSellerNrName = default, Option<string> subMerchantSubSellerSubSellerNrPhoneNumber = default, Option<string> subMerchantSubSellerSubSellerNrPostalCode = default, Option<string> subMerchantSubSellerSubSellerNrState = default, Option<string> subMerchantSubSellerSubSellerNrStreet = default, Option<string> subMerchantSubSellerSubSellerNrTaxId = default)
        {
            SubMerchantNumberOfSubSellersOption = subMerchantNumberOfSubSellers;
            SubMerchantSubSellerSubSellerNrCityOption = subMerchantSubSellerSubSellerNrCity;
            SubMerchantSubSellerSubSellerNrCountryOption = subMerchantSubSellerSubSellerNrCountry;
            SubMerchantSubSellerSubSellerNrEmailOption = subMerchantSubSellerSubSellerNrEmail;
            SubMerchantSubSellerSubSellerNrIdOption = subMerchantSubSellerSubSellerNrId;
            SubMerchantSubSellerSubSellerNrMccOption = subMerchantSubSellerSubSellerNrMcc;
            SubMerchantSubSellerSubSellerNrNameOption = subMerchantSubSellerSubSellerNrName;
            SubMerchantSubSellerSubSellerNrPhoneNumberOption = subMerchantSubSellerSubSellerNrPhoneNumber;
            SubMerchantSubSellerSubSellerNrPostalCodeOption = subMerchantSubSellerSubSellerNrPostalCode;
            SubMerchantSubSellerSubSellerNrStateOption = subMerchantSubSellerSubSellerNrState;
            SubMerchantSubSellerSubSellerNrStreetOption = subMerchantSubSellerSubSellerNrStreet;
            SubMerchantSubSellerSubSellerNrTaxIdOption = subMerchantSubSellerSubSellerNrTaxId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SubMerchantNumberOfSubSellers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantNumberOfSubSellersOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. Indicates the number of sub-merchants contained in the request. For example, **3**.
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. Indicates the number of sub-merchants contained in the request. For example, **3**.</value>
        [JsonPropertyName("subMerchant.numberOfSubSellers")]
        public string SubMerchantNumberOfSubSellers { get { return this.SubMerchantNumberOfSubSellersOption; } set { this.SubMerchantNumberOfSubSellersOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantSubSellerSubSellerNrCity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantSubSellerSubSellerNrCityOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The city of the sub-merchant&#39;s address. * Format: Alphanumeric * Maximum length: 13 characters
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The city of the sub-merchant&#39;s address. * Format: Alphanumeric * Maximum length: 13 characters</value>
        [JsonPropertyName("subMerchant.subSeller[subSellerNr].city")]
        public string SubMerchantSubSellerSubSellerNrCity { get { return this.SubMerchantSubSellerSubSellerNrCityOption; } set { this.SubMerchantSubSellerSubSellerNrCityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantSubSellerSubSellerNrCountry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantSubSellerSubSellerNrCountryOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The three-letter country code of the sub-merchant&#39;s address. For example, **BRA** for Brazil.  * Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) * Fixed length: 3 characters
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The three-letter country code of the sub-merchant&#39;s address. For example, **BRA** for Brazil.  * Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) * Fixed length: 3 characters</value>
        [JsonPropertyName("subMerchant.subSeller[subSellerNr].country")]
        public string SubMerchantSubSellerSubSellerNrCountry { get { return this.SubMerchantSubSellerSubSellerNrCountryOption; } set { this.SubMerchantSubSellerSubSellerNrCountryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantSubSellerSubSellerNrEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantSubSellerSubSellerNrEmailOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The email address of the sub-merchant. * Format: Alphanumeric * Maximum length: 40 characters
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The email address of the sub-merchant. * Format: Alphanumeric * Maximum length: 40 characters</value>
        [JsonPropertyName("subMerchant.subSeller[subSellerNr].email")]
        public string SubMerchantSubSellerSubSellerNrEmail { get { return this.SubMerchantSubSellerSubSellerNrEmailOption; } set { this.SubMerchantSubSellerSubSellerNrEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantSubSellerSubSellerNrId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantSubSellerSubSellerNrIdOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant.  * Format: Alphanumeric * Maximum length: 15 characters
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant.  * Format: Alphanumeric * Maximum length: 15 characters</value>
        [JsonPropertyName("subMerchant.subSeller[subSellerNr].id")]
        public string SubMerchantSubSellerSubSellerNrId { get { return this.SubMerchantSubSellerSubSellerNrIdOption; } set { this.SubMerchantSubSellerSubSellerNrIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantSubSellerSubSellerNrMcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantSubSellerSubSellerNrMccOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The sub-merchant&#39;s 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The sub-merchant&#39;s 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits</value>
        [JsonPropertyName("subMerchant.subSeller[subSellerNr].mcc")]
        public string SubMerchantSubSellerSubSellerNrMcc { get { return this.SubMerchantSubSellerSubSellerNrMccOption; } set { this.SubMerchantSubSellerSubSellerNrMccOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantSubSellerSubSellerNrName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantSubSellerSubSellerNrNameOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters</value>
        [JsonPropertyName("subMerchant.subSeller[subSellerNr].name")]
        public string SubMerchantSubSellerSubSellerNrName { get { return this.SubMerchantSubSellerSubSellerNrNameOption; } set { this.SubMerchantSubSellerSubSellerNrNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantSubSellerSubSellerNrPhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantSubSellerSubSellerNrPhoneNumberOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The phone number of the sub-merchant.* Format: Alphanumeric * Maximum length: 20 characters
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The phone number of the sub-merchant.* Format: Alphanumeric * Maximum length: 20 characters</value>
        [JsonPropertyName("subMerchant.subSeller[subSellerNr].phoneNumber")]
        public string SubMerchantSubSellerSubSellerNrPhoneNumber { get { return this.SubMerchantSubSellerSubSellerNrPhoneNumberOption; } set { this.SubMerchantSubSellerSubSellerNrPhoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantSubSellerSubSellerNrPostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantSubSellerSubSellerNrPostalCodeOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The postal code of the sub-merchant&#39;s address, without dashes. * Format: Numeric * Fixed length: 8 digits
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The postal code of the sub-merchant&#39;s address, without dashes. * Format: Numeric * Fixed length: 8 digits</value>
        [JsonPropertyName("subMerchant.subSeller[subSellerNr].postalCode")]
        public string SubMerchantSubSellerSubSellerNrPostalCode { get { return this.SubMerchantSubSellerSubSellerNrPostalCodeOption; } set { this.SubMerchantSubSellerSubSellerNrPostalCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantSubSellerSubSellerNrState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantSubSellerSubSellerNrStateOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The state code of the sub-merchant&#39;s address, if applicable to the country. * Format: Alphanumeric * Maximum length: 2 characters
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The state code of the sub-merchant&#39;s address, if applicable to the country. * Format: Alphanumeric * Maximum length: 2 characters</value>
        [JsonPropertyName("subMerchant.subSeller[subSellerNr].state")]
        public string SubMerchantSubSellerSubSellerNrState { get { return this.SubMerchantSubSellerSubSellerNrStateOption; } set { this.SubMerchantSubSellerSubSellerNrStateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantSubSellerSubSellerNrStreet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantSubSellerSubSellerNrStreetOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The street name and house number of the sub-merchant&#39;s address. * Format: Alphanumeric * Maximum length: 60 characters
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The street name and house number of the sub-merchant&#39;s address. * Format: Alphanumeric * Maximum length: 60 characters</value>
        [JsonPropertyName("subMerchant.subSeller[subSellerNr].street")]
        public string SubMerchantSubSellerSubSellerNrStreet { get { return this.SubMerchantSubSellerSubSellerNrStreetOption; } set { this.SubMerchantSubSellerSubSellerNrStreetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantSubSellerSubSellerNrTaxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantSubSellerSubSellerNrTaxIdOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ</value>
        [JsonPropertyName("subMerchant.subSeller[subSellerNr].taxId")]
        public string SubMerchantSubSellerSubSellerNrTaxId { get { return this.SubMerchantSubSellerSubSellerNrTaxIdOption; } set { this.SubMerchantSubSellerSubSellerNrTaxIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataSubMerchant {\n");
            sb.Append("  SubMerchantNumberOfSubSellers: ").Append(SubMerchantNumberOfSubSellers).Append("\n");
            sb.Append("  SubMerchantSubSellerSubSellerNrCity: ").Append(SubMerchantSubSellerSubSellerNrCity).Append("\n");
            sb.Append("  SubMerchantSubSellerSubSellerNrCountry: ").Append(SubMerchantSubSellerSubSellerNrCountry).Append("\n");
            sb.Append("  SubMerchantSubSellerSubSellerNrEmail: ").Append(SubMerchantSubSellerSubSellerNrEmail).Append("\n");
            sb.Append("  SubMerchantSubSellerSubSellerNrId: ").Append(SubMerchantSubSellerSubSellerNrId).Append("\n");
            sb.Append("  SubMerchantSubSellerSubSellerNrMcc: ").Append(SubMerchantSubSellerSubSellerNrMcc).Append("\n");
            sb.Append("  SubMerchantSubSellerSubSellerNrName: ").Append(SubMerchantSubSellerSubSellerNrName).Append("\n");
            sb.Append("  SubMerchantSubSellerSubSellerNrPhoneNumber: ").Append(SubMerchantSubSellerSubSellerNrPhoneNumber).Append("\n");
            sb.Append("  SubMerchantSubSellerSubSellerNrPostalCode: ").Append(SubMerchantSubSellerSubSellerNrPostalCode).Append("\n");
            sb.Append("  SubMerchantSubSellerSubSellerNrState: ").Append(SubMerchantSubSellerSubSellerNrState).Append("\n");
            sb.Append("  SubMerchantSubSellerSubSellerNrStreet: ").Append(SubMerchantSubSellerSubSellerNrStreet).Append("\n");
            sb.Append("  SubMerchantSubSellerSubSellerNrTaxId: ").Append(SubMerchantSubSellerSubSellerNrTaxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalDataSubMerchant" />
    /// </summary>
    public class AdditionalDataSubMerchantJsonConverter : JsonConverter<AdditionalDataSubMerchant>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalDataSubMerchant" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalDataSubMerchant Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> subMerchantNumberOfSubSellers = default;
            Option<string> subMerchantSubSellerSubSellerNrCity = default;
            Option<string> subMerchantSubSellerSubSellerNrCountry = default;
            Option<string> subMerchantSubSellerSubSellerNrEmail = default;
            Option<string> subMerchantSubSellerSubSellerNrId = default;
            Option<string> subMerchantSubSellerSubSellerNrMcc = default;
            Option<string> subMerchantSubSellerSubSellerNrName = default;
            Option<string> subMerchantSubSellerSubSellerNrPhoneNumber = default;
            Option<string> subMerchantSubSellerSubSellerNrPostalCode = default;
            Option<string> subMerchantSubSellerSubSellerNrState = default;
            Option<string> subMerchantSubSellerSubSellerNrStreet = default;
            Option<string> subMerchantSubSellerSubSellerNrTaxId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "subMerchant.numberOfSubSellers":
                            subMerchantNumberOfSubSellers = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchant.subSeller[subSellerNr].city":
                            subMerchantSubSellerSubSellerNrCity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchant.subSeller[subSellerNr].country":
                            subMerchantSubSellerSubSellerNrCountry = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchant.subSeller[subSellerNr].email":
                            subMerchantSubSellerSubSellerNrEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchant.subSeller[subSellerNr].id":
                            subMerchantSubSellerSubSellerNrId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchant.subSeller[subSellerNr].mcc":
                            subMerchantSubSellerSubSellerNrMcc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchant.subSeller[subSellerNr].name":
                            subMerchantSubSellerSubSellerNrName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchant.subSeller[subSellerNr].phoneNumber":
                            subMerchantSubSellerSubSellerNrPhoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchant.subSeller[subSellerNr].postalCode":
                            subMerchantSubSellerSubSellerNrPostalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchant.subSeller[subSellerNr].state":
                            subMerchantSubSellerSubSellerNrState = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchant.subSeller[subSellerNr].street":
                            subMerchantSubSellerSubSellerNrStreet = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchant.subSeller[subSellerNr].taxId":
                            subMerchantSubSellerSubSellerNrTaxId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (subMerchantNumberOfSubSellers.IsSet && subMerchantNumberOfSubSellers.Value == null)
                throw new ArgumentNullException(nameof(subMerchantNumberOfSubSellers), "Property is not nullable for class AdditionalDataSubMerchant.");

            if (subMerchantSubSellerSubSellerNrCity.IsSet && subMerchantSubSellerSubSellerNrCity.Value == null)
                throw new ArgumentNullException(nameof(subMerchantSubSellerSubSellerNrCity), "Property is not nullable for class AdditionalDataSubMerchant.");

            if (subMerchantSubSellerSubSellerNrCountry.IsSet && subMerchantSubSellerSubSellerNrCountry.Value == null)
                throw new ArgumentNullException(nameof(subMerchantSubSellerSubSellerNrCountry), "Property is not nullable for class AdditionalDataSubMerchant.");

            if (subMerchantSubSellerSubSellerNrEmail.IsSet && subMerchantSubSellerSubSellerNrEmail.Value == null)
                throw new ArgumentNullException(nameof(subMerchantSubSellerSubSellerNrEmail), "Property is not nullable for class AdditionalDataSubMerchant.");

            if (subMerchantSubSellerSubSellerNrId.IsSet && subMerchantSubSellerSubSellerNrId.Value == null)
                throw new ArgumentNullException(nameof(subMerchantSubSellerSubSellerNrId), "Property is not nullable for class AdditionalDataSubMerchant.");

            if (subMerchantSubSellerSubSellerNrMcc.IsSet && subMerchantSubSellerSubSellerNrMcc.Value == null)
                throw new ArgumentNullException(nameof(subMerchantSubSellerSubSellerNrMcc), "Property is not nullable for class AdditionalDataSubMerchant.");

            if (subMerchantSubSellerSubSellerNrName.IsSet && subMerchantSubSellerSubSellerNrName.Value == null)
                throw new ArgumentNullException(nameof(subMerchantSubSellerSubSellerNrName), "Property is not nullable for class AdditionalDataSubMerchant.");

            if (subMerchantSubSellerSubSellerNrPhoneNumber.IsSet && subMerchantSubSellerSubSellerNrPhoneNumber.Value == null)
                throw new ArgumentNullException(nameof(subMerchantSubSellerSubSellerNrPhoneNumber), "Property is not nullable for class AdditionalDataSubMerchant.");

            if (subMerchantSubSellerSubSellerNrPostalCode.IsSet && subMerchantSubSellerSubSellerNrPostalCode.Value == null)
                throw new ArgumentNullException(nameof(subMerchantSubSellerSubSellerNrPostalCode), "Property is not nullable for class AdditionalDataSubMerchant.");

            if (subMerchantSubSellerSubSellerNrState.IsSet && subMerchantSubSellerSubSellerNrState.Value == null)
                throw new ArgumentNullException(nameof(subMerchantSubSellerSubSellerNrState), "Property is not nullable for class AdditionalDataSubMerchant.");

            if (subMerchantSubSellerSubSellerNrStreet.IsSet && subMerchantSubSellerSubSellerNrStreet.Value == null)
                throw new ArgumentNullException(nameof(subMerchantSubSellerSubSellerNrStreet), "Property is not nullable for class AdditionalDataSubMerchant.");

            if (subMerchantSubSellerSubSellerNrTaxId.IsSet && subMerchantSubSellerSubSellerNrTaxId.Value == null)
                throw new ArgumentNullException(nameof(subMerchantSubSellerSubSellerNrTaxId), "Property is not nullable for class AdditionalDataSubMerchant.");

            return new AdditionalDataSubMerchant(subMerchantNumberOfSubSellers, subMerchantSubSellerSubSellerNrCity, subMerchantSubSellerSubSellerNrCountry, subMerchantSubSellerSubSellerNrEmail, subMerchantSubSellerSubSellerNrId, subMerchantSubSellerSubSellerNrMcc, subMerchantSubSellerSubSellerNrName, subMerchantSubSellerSubSellerNrPhoneNumber, subMerchantSubSellerSubSellerNrPostalCode, subMerchantSubSellerSubSellerNrState, subMerchantSubSellerSubSellerNrStreet, subMerchantSubSellerSubSellerNrTaxId);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalDataSubMerchant" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataSubMerchant"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalDataSubMerchant additionalDataSubMerchant, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalDataSubMerchant, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalDataSubMerchant" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataSubMerchant"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalDataSubMerchant additionalDataSubMerchant, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalDataSubMerchant.SubMerchantNumberOfSubSellersOption.IsSet && additionalDataSubMerchant.SubMerchantNumberOfSubSellers == null)
                throw new ArgumentNullException(nameof(additionalDataSubMerchant.SubMerchantNumberOfSubSellers), "Property is required for class AdditionalDataSubMerchant.");

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrCityOption.IsSet && additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrCity == null)
                throw new ArgumentNullException(nameof(additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrCity), "Property is required for class AdditionalDataSubMerchant.");

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrCountryOption.IsSet && additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrCountry == null)
                throw new ArgumentNullException(nameof(additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrCountry), "Property is required for class AdditionalDataSubMerchant.");

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrEmailOption.IsSet && additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrEmail == null)
                throw new ArgumentNullException(nameof(additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrEmail), "Property is required for class AdditionalDataSubMerchant.");

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrIdOption.IsSet && additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrId == null)
                throw new ArgumentNullException(nameof(additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrId), "Property is required for class AdditionalDataSubMerchant.");

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrMccOption.IsSet && additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrMcc == null)
                throw new ArgumentNullException(nameof(additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrMcc), "Property is required for class AdditionalDataSubMerchant.");

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrNameOption.IsSet && additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrName == null)
                throw new ArgumentNullException(nameof(additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrName), "Property is required for class AdditionalDataSubMerchant.");

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrPhoneNumberOption.IsSet && additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrPhoneNumber == null)
                throw new ArgumentNullException(nameof(additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrPhoneNumber), "Property is required for class AdditionalDataSubMerchant.");

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrPostalCodeOption.IsSet && additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrPostalCode == null)
                throw new ArgumentNullException(nameof(additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrPostalCode), "Property is required for class AdditionalDataSubMerchant.");

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrStateOption.IsSet && additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrState == null)
                throw new ArgumentNullException(nameof(additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrState), "Property is required for class AdditionalDataSubMerchant.");

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrStreetOption.IsSet && additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrStreet == null)
                throw new ArgumentNullException(nameof(additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrStreet), "Property is required for class AdditionalDataSubMerchant.");

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrTaxIdOption.IsSet && additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrTaxId == null)
                throw new ArgumentNullException(nameof(additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrTaxId), "Property is required for class AdditionalDataSubMerchant.");

            if (additionalDataSubMerchant.SubMerchantNumberOfSubSellersOption.IsSet)
                writer.WriteString("subMerchant.numberOfSubSellers", additionalDataSubMerchant.SubMerchantNumberOfSubSellers);

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrCityOption.IsSet)
                writer.WriteString("subMerchant.subSeller[subSellerNr].city", additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrCity);

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrCountryOption.IsSet)
                writer.WriteString("subMerchant.subSeller[subSellerNr].country", additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrCountry);

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrEmailOption.IsSet)
                writer.WriteString("subMerchant.subSeller[subSellerNr].email", additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrEmail);

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrIdOption.IsSet)
                writer.WriteString("subMerchant.subSeller[subSellerNr].id", additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrId);

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrMccOption.IsSet)
                writer.WriteString("subMerchant.subSeller[subSellerNr].mcc", additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrMcc);

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrNameOption.IsSet)
                writer.WriteString("subMerchant.subSeller[subSellerNr].name", additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrName);

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrPhoneNumberOption.IsSet)
                writer.WriteString("subMerchant.subSeller[subSellerNr].phoneNumber", additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrPhoneNumber);

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrPostalCodeOption.IsSet)
                writer.WriteString("subMerchant.subSeller[subSellerNr].postalCode", additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrPostalCode);

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrStateOption.IsSet)
                writer.WriteString("subMerchant.subSeller[subSellerNr].state", additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrState);

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrStreetOption.IsSet)
                writer.WriteString("subMerchant.subSeller[subSellerNr].street", additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrStreet);

            if (additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrTaxIdOption.IsSet)
                writer.WriteString("subMerchant.subSeller[subSellerNr].taxId", additionalDataSubMerchant.SubMerchantSubSellerSubSellerNrTaxId);
        }
    }
}
