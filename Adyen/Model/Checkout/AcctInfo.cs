// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AcctInfo
    /// </summary>
    public partial class AcctInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AcctInfo" /> class.
        /// </summary>
        /// <param name="chAccAgeInd">Length of time that the cardholder has had the account with the 3DS Requestor.  Allowed values: * **01** — No account * **02** — Created during this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days</param>
        /// <param name="chAccChange">Date that the cardholder’s account with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added.  Format: **YYYYMMDD**</param>
        /// <param name="chAccChangeInd">Length of time since the cardholder’s account information with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added.  Allowed values: * **01** — Changed during this transaction * **02** — Less than 30 days * **03** — 30–60 days * **04** — More than 60 days</param>
        /// <param name="chAccPwChange">Date that cardholder’s account with the 3DS Requestor had a password change or account reset.  Format: **YYYYMMDD**</param>
        /// <param name="chAccPwChangeInd">Indicates the length of time since the cardholder’s account with the 3DS Requestor had a password change or account reset.  Allowed values: * **01** — No change * **02** — Changed during this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days</param>
        /// <param name="chAccString">Date that the cardholder opened the account with the 3DS Requestor.  Format: **YYYYMMDD**</param>
        /// <param name="nbPurchaseAccount">Number of purchases with this cardholder account during the previous six months. Max length: 4 characters.</param>
        /// <param name="paymentAccAge">String that the payment account was enrolled in the cardholder’s account with the 3DS Requestor.  Format: **YYYYMMDD**</param>
        /// <param name="paymentAccInd">Indicates the length of time that the payment account was enrolled in the cardholder’s account with the 3DS Requestor.  Allowed values: * **01** — No account (guest checkout) * **02** — During this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days</param>
        /// <param name="provisionAttemptsDay">Number of Add Card attempts in the last 24 hours. Max length: 3 characters.</param>
        /// <param name="shipAddressUsage">String when the shipping address used for this transaction was first used with the 3DS Requestor.  Format: **YYYYMMDD**</param>
        /// <param name="shipAddressUsageInd">Indicates when the shipping address used for this transaction was first used with the 3DS Requestor.  Allowed values: * **01** — This transaction * **02** — Less than 30 days * **03** — 30–60 days * **04** — More than 60 days</param>
        /// <param name="shipNameIndicator">Indicates if the Cardholder Name on the account is identical to the shipping Name used for this transaction.  Allowed values: * **01** — Account Name identical to shipping Name * **02** — Account Name different to shipping Name</param>
        /// <param name="suspiciousAccActivity">Indicates whether the 3DS Requestor has experienced suspicious activity (including previous fraud) on the cardholder account.  Allowed values: * **01** — No suspicious activity has been observed * **02** — Suspicious activity has been observed</param>
        /// <param name="txnActivityDay">Number of transactions (successful and abandoned) for this cardholder account with the 3DS Requestor across all payment accounts in the previous 24 hours. Max length: 3 characters.</param>
        /// <param name="txnActivityYear">Number of transactions (successful and abandoned) for this cardholder account with the 3DS Requestor across all payment accounts in the previous year. Max length: 3 characters.</param>
        [JsonConstructor]
        public AcctInfo(Option<ChAccAgeIndEnum?> chAccAgeInd = default, Option<string> chAccChange = default, Option<ChAccChangeIndEnum?> chAccChangeInd = default, Option<string> chAccPwChange = default, Option<ChAccPwChangeIndEnum?> chAccPwChangeInd = default, Option<string> chAccString = default, Option<string> nbPurchaseAccount = default, Option<string> paymentAccAge = default, Option<PaymentAccIndEnum?> paymentAccInd = default, Option<string> provisionAttemptsDay = default, Option<string> shipAddressUsage = default, Option<ShipAddressUsageIndEnum?> shipAddressUsageInd = default, Option<ShipNameIndicatorEnum?> shipNameIndicator = default, Option<SuspiciousAccActivityEnum?> suspiciousAccActivity = default, Option<string> txnActivityDay = default, Option<string> txnActivityYear = default)
        {
            ChAccAgeIndOption = chAccAgeInd;
            ChAccChangeOption = chAccChange;
            ChAccChangeIndOption = chAccChangeInd;
            ChAccPwChangeOption = chAccPwChange;
            ChAccPwChangeIndOption = chAccPwChangeInd;
            ChAccStringOption = chAccString;
            NbPurchaseAccountOption = nbPurchaseAccount;
            PaymentAccAgeOption = paymentAccAge;
            PaymentAccIndOption = paymentAccInd;
            ProvisionAttemptsDayOption = provisionAttemptsDay;
            ShipAddressUsageOption = shipAddressUsage;
            ShipAddressUsageIndOption = shipAddressUsageInd;
            ShipNameIndicatorOption = shipNameIndicator;
            SuspiciousAccActivityOption = suspiciousAccActivity;
            TxnActivityDayOption = txnActivityDay;
            TxnActivityYearOption = txnActivityYear;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Length of time that the cardholder has had the account with the 3DS Requestor.  Allowed values: * **01** — No account * **02** — Created during this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days
        /// </summary>
        /// <value>Length of time that the cardholder has had the account with the 3DS Requestor.  Allowed values: * **01** — No account * **02** — Created during this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days</value>
        public enum ChAccAgeIndEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            _05 = 5
        }

        /// <summary>
        /// Returns a <see cref="ChAccAgeIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ChAccAgeIndEnum ChAccAgeIndEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ChAccAgeIndEnum._01;

            if (value.Equals("02"))
                return ChAccAgeIndEnum._02;

            if (value.Equals("03"))
                return ChAccAgeIndEnum._03;

            if (value.Equals("04"))
                return ChAccAgeIndEnum._04;

            if (value.Equals("05"))
                return ChAccAgeIndEnum._05;

            throw new NotImplementedException($"Could not convert value to type ChAccAgeIndEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ChAccAgeIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChAccAgeIndEnum? ChAccAgeIndEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ChAccAgeIndEnum._01;

            if (value.Equals("02"))
                return ChAccAgeIndEnum._02;

            if (value.Equals("03"))
                return ChAccAgeIndEnum._03;

            if (value.Equals("04"))
                return ChAccAgeIndEnum._04;

            if (value.Equals("05"))
                return ChAccAgeIndEnum._05;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChAccAgeIndEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ChAccAgeIndEnumToJsonValue(ChAccAgeIndEnum? value)
        {
            if (value == ChAccAgeIndEnum._01)
                return "01";

            if (value == ChAccAgeIndEnum._02)
                return "02";

            if (value == ChAccAgeIndEnum._03)
                return "03";

            if (value == ChAccAgeIndEnum._04)
                return "04";

            if (value == ChAccAgeIndEnum._05)
                return "05";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ChAccAgeInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChAccAgeIndEnum?> ChAccAgeIndOption { get; private set; }

        /// <summary>
        /// Length of time that the cardholder has had the account with the 3DS Requestor.  Allowed values: * **01** — No account * **02** — Created during this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days
        /// </summary>
        /// <value>Length of time that the cardholder has had the account with the 3DS Requestor.  Allowed values: * **01** — No account * **02** — Created during this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days</value>
        [JsonPropertyName("chAccAgeInd")]
        public ChAccAgeIndEnum? ChAccAgeInd { get { return this.ChAccAgeIndOption; } set { this.ChAccAgeIndOption = new Option<ChAccAgeIndEnum?>(value); } }

        /// <summary>
        /// Length of time since the cardholder’s account information with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added.  Allowed values: * **01** — Changed during this transaction * **02** — Less than 30 days * **03** — 30–60 days * **04** — More than 60 days
        /// </summary>
        /// <value>Length of time since the cardholder’s account information with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added.  Allowed values: * **01** — Changed during this transaction * **02** — Less than 30 days * **03** — 30–60 days * **04** — More than 60 days</value>
        public enum ChAccChangeIndEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4
        }

        /// <summary>
        /// Returns a <see cref="ChAccChangeIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ChAccChangeIndEnum ChAccChangeIndEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ChAccChangeIndEnum._01;

            if (value.Equals("02"))
                return ChAccChangeIndEnum._02;

            if (value.Equals("03"))
                return ChAccChangeIndEnum._03;

            if (value.Equals("04"))
                return ChAccChangeIndEnum._04;

            throw new NotImplementedException($"Could not convert value to type ChAccChangeIndEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ChAccChangeIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChAccChangeIndEnum? ChAccChangeIndEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ChAccChangeIndEnum._01;

            if (value.Equals("02"))
                return ChAccChangeIndEnum._02;

            if (value.Equals("03"))
                return ChAccChangeIndEnum._03;

            if (value.Equals("04"))
                return ChAccChangeIndEnum._04;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChAccChangeIndEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ChAccChangeIndEnumToJsonValue(ChAccChangeIndEnum? value)
        {
            if (value == ChAccChangeIndEnum._01)
                return "01";

            if (value == ChAccChangeIndEnum._02)
                return "02";

            if (value == ChAccChangeIndEnum._03)
                return "03";

            if (value == ChAccChangeIndEnum._04)
                return "04";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ChAccChangeInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChAccChangeIndEnum?> ChAccChangeIndOption { get; private set; }

        /// <summary>
        /// Length of time since the cardholder’s account information with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added.  Allowed values: * **01** — Changed during this transaction * **02** — Less than 30 days * **03** — 30–60 days * **04** — More than 60 days
        /// </summary>
        /// <value>Length of time since the cardholder’s account information with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added.  Allowed values: * **01** — Changed during this transaction * **02** — Less than 30 days * **03** — 30–60 days * **04** — More than 60 days</value>
        [JsonPropertyName("chAccChangeInd")]
        public ChAccChangeIndEnum? ChAccChangeInd { get { return this.ChAccChangeIndOption; } set { this.ChAccChangeIndOption = new Option<ChAccChangeIndEnum?>(value); } }

        /// <summary>
        /// Indicates the length of time since the cardholder’s account with the 3DS Requestor had a password change or account reset.  Allowed values: * **01** — No change * **02** — Changed during this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days
        /// </summary>
        /// <value>Indicates the length of time since the cardholder’s account with the 3DS Requestor had a password change or account reset.  Allowed values: * **01** — No change * **02** — Changed during this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days</value>
        public enum ChAccPwChangeIndEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            _05 = 5
        }

        /// <summary>
        /// Returns a <see cref="ChAccPwChangeIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ChAccPwChangeIndEnum ChAccPwChangeIndEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ChAccPwChangeIndEnum._01;

            if (value.Equals("02"))
                return ChAccPwChangeIndEnum._02;

            if (value.Equals("03"))
                return ChAccPwChangeIndEnum._03;

            if (value.Equals("04"))
                return ChAccPwChangeIndEnum._04;

            if (value.Equals("05"))
                return ChAccPwChangeIndEnum._05;

            throw new NotImplementedException($"Could not convert value to type ChAccPwChangeIndEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ChAccPwChangeIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChAccPwChangeIndEnum? ChAccPwChangeIndEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ChAccPwChangeIndEnum._01;

            if (value.Equals("02"))
                return ChAccPwChangeIndEnum._02;

            if (value.Equals("03"))
                return ChAccPwChangeIndEnum._03;

            if (value.Equals("04"))
                return ChAccPwChangeIndEnum._04;

            if (value.Equals("05"))
                return ChAccPwChangeIndEnum._05;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChAccPwChangeIndEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ChAccPwChangeIndEnumToJsonValue(ChAccPwChangeIndEnum? value)
        {
            if (value == ChAccPwChangeIndEnum._01)
                return "01";

            if (value == ChAccPwChangeIndEnum._02)
                return "02";

            if (value == ChAccPwChangeIndEnum._03)
                return "03";

            if (value == ChAccPwChangeIndEnum._04)
                return "04";

            if (value == ChAccPwChangeIndEnum._05)
                return "05";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ChAccPwChangeInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChAccPwChangeIndEnum?> ChAccPwChangeIndOption { get; private set; }

        /// <summary>
        /// Indicates the length of time since the cardholder’s account with the 3DS Requestor had a password change or account reset.  Allowed values: * **01** — No change * **02** — Changed during this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days
        /// </summary>
        /// <value>Indicates the length of time since the cardholder’s account with the 3DS Requestor had a password change or account reset.  Allowed values: * **01** — No change * **02** — Changed during this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days</value>
        [JsonPropertyName("chAccPwChangeInd")]
        public ChAccPwChangeIndEnum? ChAccPwChangeInd { get { return this.ChAccPwChangeIndOption; } set { this.ChAccPwChangeIndOption = new Option<ChAccPwChangeIndEnum?>(value); } }

        /// <summary>
        /// Indicates the length of time that the payment account was enrolled in the cardholder’s account with the 3DS Requestor.  Allowed values: * **01** — No account (guest checkout) * **02** — During this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days
        /// </summary>
        /// <value>Indicates the length of time that the payment account was enrolled in the cardholder’s account with the 3DS Requestor.  Allowed values: * **01** — No account (guest checkout) * **02** — During this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days</value>
        public enum PaymentAccIndEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            _05 = 5
        }

        /// <summary>
        /// Returns a <see cref="PaymentAccIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PaymentAccIndEnum PaymentAccIndEnumFromString(string value)
        {
            if (value.Equals("01"))
                return PaymentAccIndEnum._01;

            if (value.Equals("02"))
                return PaymentAccIndEnum._02;

            if (value.Equals("03"))
                return PaymentAccIndEnum._03;

            if (value.Equals("04"))
                return PaymentAccIndEnum._04;

            if (value.Equals("05"))
                return PaymentAccIndEnum._05;

            throw new NotImplementedException($"Could not convert value to type PaymentAccIndEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PaymentAccIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PaymentAccIndEnum? PaymentAccIndEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return PaymentAccIndEnum._01;

            if (value.Equals("02"))
                return PaymentAccIndEnum._02;

            if (value.Equals("03"))
                return PaymentAccIndEnum._03;

            if (value.Equals("04"))
                return PaymentAccIndEnum._04;

            if (value.Equals("05"))
                return PaymentAccIndEnum._05;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PaymentAccIndEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PaymentAccIndEnumToJsonValue(PaymentAccIndEnum? value)
        {
            if (value == PaymentAccIndEnum._01)
                return "01";

            if (value == PaymentAccIndEnum._02)
                return "02";

            if (value == PaymentAccIndEnum._03)
                return "03";

            if (value == PaymentAccIndEnum._04)
                return "04";

            if (value == PaymentAccIndEnum._05)
                return "05";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of PaymentAccInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentAccIndEnum?> PaymentAccIndOption { get; private set; }

        /// <summary>
        /// Indicates the length of time that the payment account was enrolled in the cardholder’s account with the 3DS Requestor.  Allowed values: * **01** — No account (guest checkout) * **02** — During this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days
        /// </summary>
        /// <value>Indicates the length of time that the payment account was enrolled in the cardholder’s account with the 3DS Requestor.  Allowed values: * **01** — No account (guest checkout) * **02** — During this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days</value>
        [JsonPropertyName("paymentAccInd")]
        public PaymentAccIndEnum? PaymentAccInd { get { return this.PaymentAccIndOption; } set { this.PaymentAccIndOption = new Option<PaymentAccIndEnum?>(value); } }

        /// <summary>
        /// Indicates when the shipping address used for this transaction was first used with the 3DS Requestor.  Allowed values: * **01** — This transaction * **02** — Less than 30 days * **03** — 30–60 days * **04** — More than 60 days
        /// </summary>
        /// <value>Indicates when the shipping address used for this transaction was first used with the 3DS Requestor.  Allowed values: * **01** — This transaction * **02** — Less than 30 days * **03** — 30–60 days * **04** — More than 60 days</value>
        public enum ShipAddressUsageIndEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4
        }

        /// <summary>
        /// Returns a <see cref="ShipAddressUsageIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ShipAddressUsageIndEnum ShipAddressUsageIndEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ShipAddressUsageIndEnum._01;

            if (value.Equals("02"))
                return ShipAddressUsageIndEnum._02;

            if (value.Equals("03"))
                return ShipAddressUsageIndEnum._03;

            if (value.Equals("04"))
                return ShipAddressUsageIndEnum._04;

            throw new NotImplementedException($"Could not convert value to type ShipAddressUsageIndEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ShipAddressUsageIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ShipAddressUsageIndEnum? ShipAddressUsageIndEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ShipAddressUsageIndEnum._01;

            if (value.Equals("02"))
                return ShipAddressUsageIndEnum._02;

            if (value.Equals("03"))
                return ShipAddressUsageIndEnum._03;

            if (value.Equals("04"))
                return ShipAddressUsageIndEnum._04;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ShipAddressUsageIndEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ShipAddressUsageIndEnumToJsonValue(ShipAddressUsageIndEnum? value)
        {
            if (value == ShipAddressUsageIndEnum._01)
                return "01";

            if (value == ShipAddressUsageIndEnum._02)
                return "02";

            if (value == ShipAddressUsageIndEnum._03)
                return "03";

            if (value == ShipAddressUsageIndEnum._04)
                return "04";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ShipAddressUsageInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipAddressUsageIndEnum?> ShipAddressUsageIndOption { get; private set; }

        /// <summary>
        /// Indicates when the shipping address used for this transaction was first used with the 3DS Requestor.  Allowed values: * **01** — This transaction * **02** — Less than 30 days * **03** — 30–60 days * **04** — More than 60 days
        /// </summary>
        /// <value>Indicates when the shipping address used for this transaction was first used with the 3DS Requestor.  Allowed values: * **01** — This transaction * **02** — Less than 30 days * **03** — 30–60 days * **04** — More than 60 days</value>
        [JsonPropertyName("shipAddressUsageInd")]
        public ShipAddressUsageIndEnum? ShipAddressUsageInd { get { return this.ShipAddressUsageIndOption; } set { this.ShipAddressUsageIndOption = new Option<ShipAddressUsageIndEnum?>(value); } }

        /// <summary>
        /// Indicates if the Cardholder Name on the account is identical to the shipping Name used for this transaction.  Allowed values: * **01** — Account Name identical to shipping Name * **02** — Account Name different to shipping Name
        /// </summary>
        /// <value>Indicates if the Cardholder Name on the account is identical to the shipping Name used for this transaction.  Allowed values: * **01** — Account Name identical to shipping Name * **02** — Account Name different to shipping Name</value>
        public enum ShipNameIndicatorEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2
        }

        /// <summary>
        /// Returns a <see cref="ShipNameIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ShipNameIndicatorEnum ShipNameIndicatorEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ShipNameIndicatorEnum._01;

            if (value.Equals("02"))
                return ShipNameIndicatorEnum._02;

            throw new NotImplementedException($"Could not convert value to type ShipNameIndicatorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ShipNameIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ShipNameIndicatorEnum? ShipNameIndicatorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ShipNameIndicatorEnum._01;

            if (value.Equals("02"))
                return ShipNameIndicatorEnum._02;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ShipNameIndicatorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ShipNameIndicatorEnumToJsonValue(ShipNameIndicatorEnum? value)
        {
            if (value == ShipNameIndicatorEnum._01)
                return "01";

            if (value == ShipNameIndicatorEnum._02)
                return "02";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ShipNameIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipNameIndicatorEnum?> ShipNameIndicatorOption { get; private set; }

        /// <summary>
        /// Indicates if the Cardholder Name on the account is identical to the shipping Name used for this transaction.  Allowed values: * **01** — Account Name identical to shipping Name * **02** — Account Name different to shipping Name
        /// </summary>
        /// <value>Indicates if the Cardholder Name on the account is identical to the shipping Name used for this transaction.  Allowed values: * **01** — Account Name identical to shipping Name * **02** — Account Name different to shipping Name</value>
        [JsonPropertyName("shipNameIndicator")]
        public ShipNameIndicatorEnum? ShipNameIndicator { get { return this.ShipNameIndicatorOption; } set { this.ShipNameIndicatorOption = new Option<ShipNameIndicatorEnum?>(value); } }

        /// <summary>
        /// Indicates whether the 3DS Requestor has experienced suspicious activity (including previous fraud) on the cardholder account.  Allowed values: * **01** — No suspicious activity has been observed * **02** — Suspicious activity has been observed
        /// </summary>
        /// <value>Indicates whether the 3DS Requestor has experienced suspicious activity (including previous fraud) on the cardholder account.  Allowed values: * **01** — No suspicious activity has been observed * **02** — Suspicious activity has been observed</value>
        public enum SuspiciousAccActivityEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2
        }

        /// <summary>
        /// Returns a <see cref="SuspiciousAccActivityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SuspiciousAccActivityEnum SuspiciousAccActivityEnumFromString(string value)
        {
            if (value.Equals("01"))
                return SuspiciousAccActivityEnum._01;

            if (value.Equals("02"))
                return SuspiciousAccActivityEnum._02;

            throw new NotImplementedException($"Could not convert value to type SuspiciousAccActivityEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SuspiciousAccActivityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SuspiciousAccActivityEnum? SuspiciousAccActivityEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return SuspiciousAccActivityEnum._01;

            if (value.Equals("02"))
                return SuspiciousAccActivityEnum._02;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SuspiciousAccActivityEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SuspiciousAccActivityEnumToJsonValue(SuspiciousAccActivityEnum? value)
        {
            if (value == SuspiciousAccActivityEnum._01)
                return "01";

            if (value == SuspiciousAccActivityEnum._02)
                return "02";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SuspiciousAccActivity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SuspiciousAccActivityEnum?> SuspiciousAccActivityOption { get; private set; }

        /// <summary>
        /// Indicates whether the 3DS Requestor has experienced suspicious activity (including previous fraud) on the cardholder account.  Allowed values: * **01** — No suspicious activity has been observed * **02** — Suspicious activity has been observed
        /// </summary>
        /// <value>Indicates whether the 3DS Requestor has experienced suspicious activity (including previous fraud) on the cardholder account.  Allowed values: * **01** — No suspicious activity has been observed * **02** — Suspicious activity has been observed</value>
        [JsonPropertyName("suspiciousAccActivity")]
        public SuspiciousAccActivityEnum? SuspiciousAccActivity { get { return this.SuspiciousAccActivityOption; } set { this.SuspiciousAccActivityOption = new Option<SuspiciousAccActivityEnum?>(value); } }

        /// <summary>
        /// Used to track the state of ChAccChange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ChAccChangeOption { get; private set; }

        /// <summary>
        /// Date that the cardholder’s account with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added.  Format: **YYYYMMDD**
        /// </summary>
        /// <value>Date that the cardholder’s account with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added.  Format: **YYYYMMDD**</value>
        [JsonPropertyName("chAccChange")]
        public string ChAccChange { get { return this.ChAccChangeOption; } set { this.ChAccChangeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ChAccPwChange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ChAccPwChangeOption { get; private set; }

        /// <summary>
        /// Date that cardholder’s account with the 3DS Requestor had a password change or account reset.  Format: **YYYYMMDD**
        /// </summary>
        /// <value>Date that cardholder’s account with the 3DS Requestor had a password change or account reset.  Format: **YYYYMMDD**</value>
        [JsonPropertyName("chAccPwChange")]
        public string ChAccPwChange { get { return this.ChAccPwChangeOption; } set { this.ChAccPwChangeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ChAccString
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ChAccStringOption { get; private set; }

        /// <summary>
        /// Date that the cardholder opened the account with the 3DS Requestor.  Format: **YYYYMMDD**
        /// </summary>
        /// <value>Date that the cardholder opened the account with the 3DS Requestor.  Format: **YYYYMMDD**</value>
        [JsonPropertyName("chAccString")]
        public string ChAccString { get { return this.ChAccStringOption; } set { this.ChAccStringOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NbPurchaseAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NbPurchaseAccountOption { get; private set; }

        /// <summary>
        /// Number of purchases with this cardholder account during the previous six months. Max length: 4 characters.
        /// </summary>
        /// <value>Number of purchases with this cardholder account during the previous six months. Max length: 4 characters.</value>
        [JsonPropertyName("nbPurchaseAccount")]
        public string NbPurchaseAccount { get { return this.NbPurchaseAccountOption; } set { this.NbPurchaseAccountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAccAge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentAccAgeOption { get; private set; }

        /// <summary>
        /// String that the payment account was enrolled in the cardholder’s account with the 3DS Requestor.  Format: **YYYYMMDD**
        /// </summary>
        /// <value>String that the payment account was enrolled in the cardholder’s account with the 3DS Requestor.  Format: **YYYYMMDD**</value>
        [JsonPropertyName("paymentAccAge")]
        public string PaymentAccAge { get { return this.PaymentAccAgeOption; } set { this.PaymentAccAgeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ProvisionAttemptsDay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ProvisionAttemptsDayOption { get; private set; }

        /// <summary>
        /// Number of Add Card attempts in the last 24 hours. Max length: 3 characters.
        /// </summary>
        /// <value>Number of Add Card attempts in the last 24 hours. Max length: 3 characters.</value>
        [JsonPropertyName("provisionAttemptsDay")]
        public string ProvisionAttemptsDay { get { return this.ProvisionAttemptsDayOption; } set { this.ProvisionAttemptsDayOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShipAddressUsage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShipAddressUsageOption { get; private set; }

        /// <summary>
        /// String when the shipping address used for this transaction was first used with the 3DS Requestor.  Format: **YYYYMMDD**
        /// </summary>
        /// <value>String when the shipping address used for this transaction was first used with the 3DS Requestor.  Format: **YYYYMMDD**</value>
        [JsonPropertyName("shipAddressUsage")]
        public string ShipAddressUsage { get { return this.ShipAddressUsageOption; } set { this.ShipAddressUsageOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TxnActivityDay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TxnActivityDayOption { get; private set; }

        /// <summary>
        /// Number of transactions (successful and abandoned) for this cardholder account with the 3DS Requestor across all payment accounts in the previous 24 hours. Max length: 3 characters.
        /// </summary>
        /// <value>Number of transactions (successful and abandoned) for this cardholder account with the 3DS Requestor across all payment accounts in the previous 24 hours. Max length: 3 characters.</value>
        [JsonPropertyName("txnActivityDay")]
        public string TxnActivityDay { get { return this.TxnActivityDayOption; } set { this.TxnActivityDayOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TxnActivityYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TxnActivityYearOption { get; private set; }

        /// <summary>
        /// Number of transactions (successful and abandoned) for this cardholder account with the 3DS Requestor across all payment accounts in the previous year. Max length: 3 characters.
        /// </summary>
        /// <value>Number of transactions (successful and abandoned) for this cardholder account with the 3DS Requestor across all payment accounts in the previous year. Max length: 3 characters.</value>
        [JsonPropertyName("txnActivityYear")]
        public string TxnActivityYear { get { return this.TxnActivityYearOption; } set { this.TxnActivityYearOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AcctInfo {\n");
            sb.Append("  ChAccAgeInd: ").Append(ChAccAgeInd).Append("\n");
            sb.Append("  ChAccChange: ").Append(ChAccChange).Append("\n");
            sb.Append("  ChAccChangeInd: ").Append(ChAccChangeInd).Append("\n");
            sb.Append("  ChAccPwChange: ").Append(ChAccPwChange).Append("\n");
            sb.Append("  ChAccPwChangeInd: ").Append(ChAccPwChangeInd).Append("\n");
            sb.Append("  ChAccString: ").Append(ChAccString).Append("\n");
            sb.Append("  NbPurchaseAccount: ").Append(NbPurchaseAccount).Append("\n");
            sb.Append("  PaymentAccAge: ").Append(PaymentAccAge).Append("\n");
            sb.Append("  PaymentAccInd: ").Append(PaymentAccInd).Append("\n");
            sb.Append("  ProvisionAttemptsDay: ").Append(ProvisionAttemptsDay).Append("\n");
            sb.Append("  ShipAddressUsage: ").Append(ShipAddressUsage).Append("\n");
            sb.Append("  ShipAddressUsageInd: ").Append(ShipAddressUsageInd).Append("\n");
            sb.Append("  ShipNameIndicator: ").Append(ShipNameIndicator).Append("\n");
            sb.Append("  SuspiciousAccActivity: ").Append(SuspiciousAccActivity).Append("\n");
            sb.Append("  TxnActivityDay: ").Append(TxnActivityDay).Append("\n");
            sb.Append("  TxnActivityYear: ").Append(TxnActivityYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TxnActivityDay (string) maxLength
            if (this.TxnActivityDay != null && this.TxnActivityDay.Length > 3)
            {
                yield return new ValidationResult("Invalid value for TxnActivityDay, length must be less than 3.", new [] { "TxnActivityDay" });
            }

            // TxnActivityYear (string) maxLength
            if (this.TxnActivityYear != null && this.TxnActivityYear.Length > 3)
            {
                yield return new ValidationResult("Invalid value for TxnActivityYear, length must be less than 3.", new [] { "TxnActivityYear" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AcctInfo" />
    /// </summary>
    public class AcctInfoJsonConverter : JsonConverter<AcctInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="AcctInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AcctInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AcctInfo.ChAccAgeIndEnum?> chAccAgeInd = default;
            Option<string> chAccChange = default;
            Option<AcctInfo.ChAccChangeIndEnum?> chAccChangeInd = default;
            Option<string> chAccPwChange = default;
            Option<AcctInfo.ChAccPwChangeIndEnum?> chAccPwChangeInd = default;
            Option<string> chAccString = default;
            Option<string> nbPurchaseAccount = default;
            Option<string> paymentAccAge = default;
            Option<AcctInfo.PaymentAccIndEnum?> paymentAccInd = default;
            Option<string> provisionAttemptsDay = default;
            Option<string> shipAddressUsage = default;
            Option<AcctInfo.ShipAddressUsageIndEnum?> shipAddressUsageInd = default;
            Option<AcctInfo.ShipNameIndicatorEnum?> shipNameIndicator = default;
            Option<AcctInfo.SuspiciousAccActivityEnum?> suspiciousAccActivity = default;
            Option<string> txnActivityDay = default;
            Option<string> txnActivityYear = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "chAccAgeInd":
                            string chAccAgeIndRawValue = utf8JsonReader.GetString();
                            if (chAccAgeIndRawValue != null)
                                chAccAgeInd = new Option<AcctInfo.ChAccAgeIndEnum?>(AcctInfo.ChAccAgeIndEnumFromStringOrDefault(chAccAgeIndRawValue));
                            break;
                        case "chAccChange":
                            chAccChange = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "chAccChangeInd":
                            string chAccChangeIndRawValue = utf8JsonReader.GetString();
                            if (chAccChangeIndRawValue != null)
                                chAccChangeInd = new Option<AcctInfo.ChAccChangeIndEnum?>(AcctInfo.ChAccChangeIndEnumFromStringOrDefault(chAccChangeIndRawValue));
                            break;
                        case "chAccPwChange":
                            chAccPwChange = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "chAccPwChangeInd":
                            string chAccPwChangeIndRawValue = utf8JsonReader.GetString();
                            if (chAccPwChangeIndRawValue != null)
                                chAccPwChangeInd = new Option<AcctInfo.ChAccPwChangeIndEnum?>(AcctInfo.ChAccPwChangeIndEnumFromStringOrDefault(chAccPwChangeIndRawValue));
                            break;
                        case "chAccString":
                            chAccString = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "nbPurchaseAccount":
                            nbPurchaseAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentAccAge":
                            paymentAccAge = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentAccInd":
                            string paymentAccIndRawValue = utf8JsonReader.GetString();
                            if (paymentAccIndRawValue != null)
                                paymentAccInd = new Option<AcctInfo.PaymentAccIndEnum?>(AcctInfo.PaymentAccIndEnumFromStringOrDefault(paymentAccIndRawValue));
                            break;
                        case "provisionAttemptsDay":
                            provisionAttemptsDay = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shipAddressUsage":
                            shipAddressUsage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shipAddressUsageInd":
                            string shipAddressUsageIndRawValue = utf8JsonReader.GetString();
                            if (shipAddressUsageIndRawValue != null)
                                shipAddressUsageInd = new Option<AcctInfo.ShipAddressUsageIndEnum?>(AcctInfo.ShipAddressUsageIndEnumFromStringOrDefault(shipAddressUsageIndRawValue));
                            break;
                        case "shipNameIndicator":
                            string shipNameIndicatorRawValue = utf8JsonReader.GetString();
                            if (shipNameIndicatorRawValue != null)
                                shipNameIndicator = new Option<AcctInfo.ShipNameIndicatorEnum?>(AcctInfo.ShipNameIndicatorEnumFromStringOrDefault(shipNameIndicatorRawValue));
                            break;
                        case "suspiciousAccActivity":
                            string suspiciousAccActivityRawValue = utf8JsonReader.GetString();
                            if (suspiciousAccActivityRawValue != null)
                                suspiciousAccActivity = new Option<AcctInfo.SuspiciousAccActivityEnum?>(AcctInfo.SuspiciousAccActivityEnumFromStringOrDefault(suspiciousAccActivityRawValue));
                            break;
                        case "txnActivityDay":
                            txnActivityDay = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "txnActivityYear":
                            txnActivityYear = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (chAccAgeInd.IsSet && chAccAgeInd.Value == null)
                throw new ArgumentNullException(nameof(chAccAgeInd), "Property is not nullable for class AcctInfo.");

            if (chAccChange.IsSet && chAccChange.Value == null)
                throw new ArgumentNullException(nameof(chAccChange), "Property is not nullable for class AcctInfo.");

            if (chAccChangeInd.IsSet && chAccChangeInd.Value == null)
                throw new ArgumentNullException(nameof(chAccChangeInd), "Property is not nullable for class AcctInfo.");

            if (chAccPwChange.IsSet && chAccPwChange.Value == null)
                throw new ArgumentNullException(nameof(chAccPwChange), "Property is not nullable for class AcctInfo.");

            if (chAccPwChangeInd.IsSet && chAccPwChangeInd.Value == null)
                throw new ArgumentNullException(nameof(chAccPwChangeInd), "Property is not nullable for class AcctInfo.");

            if (chAccString.IsSet && chAccString.Value == null)
                throw new ArgumentNullException(nameof(chAccString), "Property is not nullable for class AcctInfo.");

            if (nbPurchaseAccount.IsSet && nbPurchaseAccount.Value == null)
                throw new ArgumentNullException(nameof(nbPurchaseAccount), "Property is not nullable for class AcctInfo.");

            if (paymentAccAge.IsSet && paymentAccAge.Value == null)
                throw new ArgumentNullException(nameof(paymentAccAge), "Property is not nullable for class AcctInfo.");

            if (paymentAccInd.IsSet && paymentAccInd.Value == null)
                throw new ArgumentNullException(nameof(paymentAccInd), "Property is not nullable for class AcctInfo.");

            if (provisionAttemptsDay.IsSet && provisionAttemptsDay.Value == null)
                throw new ArgumentNullException(nameof(provisionAttemptsDay), "Property is not nullable for class AcctInfo.");

            if (shipAddressUsage.IsSet && shipAddressUsage.Value == null)
                throw new ArgumentNullException(nameof(shipAddressUsage), "Property is not nullable for class AcctInfo.");

            if (shipAddressUsageInd.IsSet && shipAddressUsageInd.Value == null)
                throw new ArgumentNullException(nameof(shipAddressUsageInd), "Property is not nullable for class AcctInfo.");

            if (shipNameIndicator.IsSet && shipNameIndicator.Value == null)
                throw new ArgumentNullException(nameof(shipNameIndicator), "Property is not nullable for class AcctInfo.");

            if (suspiciousAccActivity.IsSet && suspiciousAccActivity.Value == null)
                throw new ArgumentNullException(nameof(suspiciousAccActivity), "Property is not nullable for class AcctInfo.");

            if (txnActivityDay.IsSet && txnActivityDay.Value == null)
                throw new ArgumentNullException(nameof(txnActivityDay), "Property is not nullable for class AcctInfo.");

            if (txnActivityYear.IsSet && txnActivityYear.Value == null)
                throw new ArgumentNullException(nameof(txnActivityYear), "Property is not nullable for class AcctInfo.");

            return new AcctInfo(chAccAgeInd, chAccChange, chAccChangeInd, chAccPwChange, chAccPwChangeInd, chAccString, nbPurchaseAccount, paymentAccAge, paymentAccInd, provisionAttemptsDay, shipAddressUsage, shipAddressUsageInd, shipNameIndicator, suspiciousAccActivity, txnActivityDay, txnActivityYear);
        }

        /// <summary>
        /// Serializes a <see cref="AcctInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="acctInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AcctInfo acctInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, acctInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AcctInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="acctInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AcctInfo acctInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (acctInfo.ChAccChangeOption.IsSet && acctInfo.ChAccChange == null)
                throw new ArgumentNullException(nameof(acctInfo.ChAccChange), "Property is required for class AcctInfo.");

            if (acctInfo.ChAccPwChangeOption.IsSet && acctInfo.ChAccPwChange == null)
                throw new ArgumentNullException(nameof(acctInfo.ChAccPwChange), "Property is required for class AcctInfo.");

            if (acctInfo.ChAccStringOption.IsSet && acctInfo.ChAccString == null)
                throw new ArgumentNullException(nameof(acctInfo.ChAccString), "Property is required for class AcctInfo.");

            if (acctInfo.NbPurchaseAccountOption.IsSet && acctInfo.NbPurchaseAccount == null)
                throw new ArgumentNullException(nameof(acctInfo.NbPurchaseAccount), "Property is required for class AcctInfo.");

            if (acctInfo.PaymentAccAgeOption.IsSet && acctInfo.PaymentAccAge == null)
                throw new ArgumentNullException(nameof(acctInfo.PaymentAccAge), "Property is required for class AcctInfo.");

            if (acctInfo.ProvisionAttemptsDayOption.IsSet && acctInfo.ProvisionAttemptsDay == null)
                throw new ArgumentNullException(nameof(acctInfo.ProvisionAttemptsDay), "Property is required for class AcctInfo.");

            if (acctInfo.ShipAddressUsageOption.IsSet && acctInfo.ShipAddressUsage == null)
                throw new ArgumentNullException(nameof(acctInfo.ShipAddressUsage), "Property is required for class AcctInfo.");

            if (acctInfo.TxnActivityDayOption.IsSet && acctInfo.TxnActivityDay == null)
                throw new ArgumentNullException(nameof(acctInfo.TxnActivityDay), "Property is required for class AcctInfo.");

            if (acctInfo.TxnActivityYearOption.IsSet && acctInfo.TxnActivityYear == null)
                throw new ArgumentNullException(nameof(acctInfo.TxnActivityYear), "Property is required for class AcctInfo.");

            var chAccAgeIndRawValue = AcctInfo.ChAccAgeIndEnumToJsonValue(acctInfo.ChAccAgeIndOption.Value.Value);
            writer.WriteString("chAccAgeInd", chAccAgeIndRawValue);
            if (acctInfo.ChAccChangeOption.IsSet)
                writer.WriteString("chAccChange", acctInfo.ChAccChange);

            var chAccChangeIndRawValue = AcctInfo.ChAccChangeIndEnumToJsonValue(acctInfo.ChAccChangeIndOption.Value.Value);
            writer.WriteString("chAccChangeInd", chAccChangeIndRawValue);
            if (acctInfo.ChAccPwChangeOption.IsSet)
                writer.WriteString("chAccPwChange", acctInfo.ChAccPwChange);

            var chAccPwChangeIndRawValue = AcctInfo.ChAccPwChangeIndEnumToJsonValue(acctInfo.ChAccPwChangeIndOption.Value.Value);
            writer.WriteString("chAccPwChangeInd", chAccPwChangeIndRawValue);
            if (acctInfo.ChAccStringOption.IsSet)
                writer.WriteString("chAccString", acctInfo.ChAccString);

            if (acctInfo.NbPurchaseAccountOption.IsSet)
                writer.WriteString("nbPurchaseAccount", acctInfo.NbPurchaseAccount);

            if (acctInfo.PaymentAccAgeOption.IsSet)
                writer.WriteString("paymentAccAge", acctInfo.PaymentAccAge);

            var paymentAccIndRawValue = AcctInfo.PaymentAccIndEnumToJsonValue(acctInfo.PaymentAccIndOption.Value.Value);
            writer.WriteString("paymentAccInd", paymentAccIndRawValue);
            if (acctInfo.ProvisionAttemptsDayOption.IsSet)
                writer.WriteString("provisionAttemptsDay", acctInfo.ProvisionAttemptsDay);

            if (acctInfo.ShipAddressUsageOption.IsSet)
                writer.WriteString("shipAddressUsage", acctInfo.ShipAddressUsage);

            var shipAddressUsageIndRawValue = AcctInfo.ShipAddressUsageIndEnumToJsonValue(acctInfo.ShipAddressUsageIndOption.Value.Value);
            writer.WriteString("shipAddressUsageInd", shipAddressUsageIndRawValue);
            var shipNameIndicatorRawValue = AcctInfo.ShipNameIndicatorEnumToJsonValue(acctInfo.ShipNameIndicatorOption.Value.Value);
            writer.WriteString("shipNameIndicator", shipNameIndicatorRawValue);
            var suspiciousAccActivityRawValue = AcctInfo.SuspiciousAccActivityEnumToJsonValue(acctInfo.SuspiciousAccActivityOption.Value.Value);
            writer.WriteString("suspiciousAccActivity", suspiciousAccActivityRawValue);
            if (acctInfo.TxnActivityDayOption.IsSet)
                writer.WriteString("txnActivityDay", acctInfo.TxnActivityDay);

            if (acctInfo.TxnActivityYearOption.IsSet)
                writer.WriteString("txnActivityYear", acctInfo.TxnActivityYear);
        }
    }
}
