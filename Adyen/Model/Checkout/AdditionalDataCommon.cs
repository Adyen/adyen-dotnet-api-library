// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataCommon
    /// </summary>
    public partial class AdditionalDataCommon : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataCommon" /> class.
        /// </summary>
        /// <param name="requestedTestAcquirerResponseCode">Triggers test scenarios that allow to replicate certain acquirer response codes. See [Testing result codes and refusal reasons](https://docs.adyen.com/development-resources/testing/result-codes/) to learn about the possible values, and the &#x60;refusalReason&#x60; values you can trigger. </param>
        /// <param name="requestedTestErrorResponseCode">Triggers test scenarios that allow to replicate certain communication errors.  Allowed values: * **NO_CONNECTION_AVAILABLE** – There wasn&#39;t a connection available to service the outgoing communication. This is a transient, retriable error since no messaging could be initiated to an issuing system (or third-party acquiring system). Therefore, the header Transient-Error: true is returned in the response. A subsequent request using the same idempotency key will be processed as if it was the first request. * **IOEXCEPTION_RECEIVED** – Something went wrong during transmission of the message or receiving the response. This is a classified as non-transient because the message could have been received by the issuing party and been acted upon. No transient error header is returned. If using idempotency, the (error) response is stored as the final result for the idempotency key. Subsequent messages with the same idempotency key not be processed beyond returning the stored response.</param>
        /// <param name="allowPartialAuth">Set to true to authorise a part of the requested amount in case the cardholder does not have enough funds on their account.  If a payment was partially authorised, the response includes resultCode: PartiallyAuthorised and the authorised amount in additionalData.authorisedAmountValue. To enable this functionality, contact our Support Team.</param>
        /// <param name="authorisationType">Flags a card payment request for either pre-authorisation or final authorisation. For more information, refer to [Authorisation types](https://docs.adyen.com/online-payments/adjust-authorisation#authorisation-types).  Allowed values: * **PreAuth** – flags the payment request to be handled as a pre-authorisation. * **FinalAuth** – flags the payment request to be handled as a final authorisation.</param>
        /// <param name="autoRescue">Set to **true** to enable [Auto Rescue](https://docs.adyen.com/online-payments/auto-rescue/) for a transaction. Use the &#x60;maxDaysToRescue&#x60; to specify a rescue window.</param>
        /// <param name="customRoutingFlag">Allows you to determine or override the acquirer account that should be used for the transaction.  If you need to process a payment with an acquirer different from a default one, you can set up a corresponding configuration on the Adyen payments platform. Then you can pass a custom routing flag in a payment request&#39;s additional data to target a specific acquirer.  To enable this functionality, contact [Support](https://www.adyen.help/hc/en-us/requests/new).</param>
        /// <param name="industryUsage">In case of [asynchronous authorisation adjustment](https://docs.adyen.com/online-payments/adjust-authorisation#adjust-authorisation), this field denotes why the additional payment is made.  Possible values:   * **NoShow**: An incremental charge is carried out because of a no-show for a guaranteed reservation.   * **DelayedCharge**: An incremental charge is carried out to process an additional payment after the original services have been rendered and the respective payment has been processed.</param>
        /// <param name="manualCapture">Set to **true** to require [manual capture](https://docs.adyen.com/online-payments/capture) for the transaction.</param>
        /// <param name="maxDaysToRescue">The rescue window for a transaction, in days, when &#x60;autoRescue&#x60; is set to **true**. You can specify a value between 1 and 48.  * For [cards](https://docs.adyen.com/online-payments/auto-rescue/cards/), the default is one calendar month.  * For [SEPA](https://docs.adyen.com/online-payments/auto-rescue/sepa/), the default is 42 days.</param>
        /// <param name="networkTxReference">Allows you to link the transaction to the original or previous one in a subscription/card-on-file chain. This field is required for token-based transactions where Adyen does not tokenize the card.  Transaction identifier from card schemes, for example, Mastercard Trace ID or the Visa Transaction ID.  Submit the original transaction ID of the contract in your payment request if you are not tokenizing card details with Adyen and are making a merchant-initiated transaction (MIT) for subsequent charges.  Make sure you are sending &#x60;shopperInteraction&#x60; **ContAuth** and &#x60;recurringProcessingModel&#x60; **Subscription** or **UnscheduledCardOnFile** to ensure that the transaction is classified as MIT.</param>
        /// <param name="overwriteBrand">Boolean indicator that can be optionally used for performing debit transactions on combo cards (for example, combo cards in Brazil). This is not mandatory but we recommend that you set this to true if you want to use the &#x60;selectedBrand&#x60; value to specify how to process the transaction.</param>
        /// <param name="subMerchantCity">This field is required if the transaction is performed by a registered payment facilitator. This field must contain the city of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 13 characters.</param>
        /// <param name="subMerchantCountry">This field is required if the transaction is performed by a registered payment facilitator. This field must contain the three-letter country code of the actual merchant&#39;s address. * Format: alpha-numeric. * Fixed length: 3 characters.</param>
        /// <param name="subMerchantEmail">This field is required for transactions performed by registered payment facilitators. This field contains the email address of the sub-merchant. * Format: Alphanumeric * Maximum length: 40 characters</param>
        /// <param name="subMerchantID">This field contains an identifier of the actual merchant when a transaction is submitted via a payment facilitator. The payment facilitator must send in this unique ID.  A unique identifier per submerchant that is required if the transaction is performed by a registered payment facilitator. * Format: alpha-numeric. * Fixed length: 15 characters.</param>
        /// <param name="subMerchantName">This field is required if the transaction is performed by a registered payment facilitator. This field must contain the name of the actual merchant. * Format: alpha-numeric. * Maximum length: 22 characters.</param>
        /// <param name="subMerchantPhoneNumber">This field is required for transactions performed by registered payment facilitators. This field contains the phone number of the sub-merchant.* Format: Alphanumeric * Maximum length: 20 characters</param>
        /// <param name="subMerchantPostalCode">This field is required if the transaction is performed by a registered payment facilitator. This field must contain the postal code of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 10 characters.</param>
        /// <param name="subMerchantState">This field is required if the transaction is performed by a registered payment facilitator, and if applicable to the country. This field must contain the state code of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 3 characters.</param>
        /// <param name="subMerchantStreet">This field is required if the transaction is performed by a registered payment facilitator. This field must contain the street of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 60 characters.</param>
        /// <param name="subMerchantTaxId">This field is required if the transaction is performed by a registered payment facilitator. This field must contain the tax ID of the actual merchant. * Format: alpha-numeric. * Fixed length: 11 or 14 characters.</param>
        [JsonConstructor]
        public AdditionalDataCommon(Option<string> requestedTestAcquirerResponseCode = default, Option<string> requestedTestErrorResponseCode = default, Option<string> allowPartialAuth = default, Option<string> authorisationType = default, Option<string> autoRescue = default, Option<string> customRoutingFlag = default, Option<IndustryUsageEnum?> industryUsage = default, Option<string> manualCapture = default, Option<string> maxDaysToRescue = default, Option<string> networkTxReference = default, Option<string> overwriteBrand = default, Option<string> subMerchantCity = default, Option<string> subMerchantCountry = default, Option<string> subMerchantEmail = default, Option<string> subMerchantID = default, Option<string> subMerchantName = default, Option<string> subMerchantPhoneNumber = default, Option<string> subMerchantPostalCode = default, Option<string> subMerchantState = default, Option<string> subMerchantStreet = default, Option<string> subMerchantTaxId = default)
        {
            RequestedTestAcquirerResponseCodeOption = requestedTestAcquirerResponseCode;
            RequestedTestErrorResponseCodeOption = requestedTestErrorResponseCode;
            AllowPartialAuthOption = allowPartialAuth;
            AuthorisationTypeOption = authorisationType;
            AutoRescueOption = autoRescue;
            CustomRoutingFlagOption = customRoutingFlag;
            IndustryUsageOption = industryUsage;
            ManualCaptureOption = manualCapture;
            MaxDaysToRescueOption = maxDaysToRescue;
            NetworkTxReferenceOption = networkTxReference;
            OverwriteBrandOption = overwriteBrand;
            SubMerchantCityOption = subMerchantCity;
            SubMerchantCountryOption = subMerchantCountry;
            SubMerchantEmailOption = subMerchantEmail;
            SubMerchantIDOption = subMerchantID;
            SubMerchantNameOption = subMerchantName;
            SubMerchantPhoneNumberOption = subMerchantPhoneNumber;
            SubMerchantPostalCodeOption = subMerchantPostalCode;
            SubMerchantStateOption = subMerchantState;
            SubMerchantStreetOption = subMerchantStreet;
            SubMerchantTaxIdOption = subMerchantTaxId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// In case of [asynchronous authorisation adjustment](https://docs.adyen.com/online-payments/adjust-authorisation#adjust-authorisation), this field denotes why the additional payment is made.  Possible values:   * **NoShow**: An incremental charge is carried out because of a no-show for a guaranteed reservation.   * **DelayedCharge**: An incremental charge is carried out to process an additional payment after the original services have been rendered and the respective payment has been processed.
        /// </summary>
        /// <value>In case of [asynchronous authorisation adjustment](https://docs.adyen.com/online-payments/adjust-authorisation#adjust-authorisation), this field denotes why the additional payment is made.  Possible values:   * **NoShow**: An incremental charge is carried out because of a no-show for a guaranteed reservation.   * **DelayedCharge**: An incremental charge is carried out to process an additional payment after the original services have been rendered and the respective payment has been processed.</value>
        public enum IndustryUsageEnum
        {
            /// <summary>
            /// Enum NoShow for value: NoShow
            /// </summary>
            NoShow = 1,

            /// <summary>
            /// Enum DelayedCharge for value: DelayedCharge
            /// </summary>
            DelayedCharge = 2
        }

        /// <summary>
        /// Returns a <see cref="IndustryUsageEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static IndustryUsageEnum IndustryUsageEnumFromString(string value)
        {
            if (value.Equals("NoShow"))
                return IndustryUsageEnum.NoShow;

            if (value.Equals("DelayedCharge"))
                return IndustryUsageEnum.DelayedCharge;

            throw new NotImplementedException($"Could not convert value to type IndustryUsageEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="IndustryUsageEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IndustryUsageEnum? IndustryUsageEnumFromStringOrDefault(string value)
        {
            if (value.Equals("NoShow"))
                return IndustryUsageEnum.NoShow;

            if (value.Equals("DelayedCharge"))
                return IndustryUsageEnum.DelayedCharge;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="IndustryUsageEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string IndustryUsageEnumToJsonValue(IndustryUsageEnum? value)
        {
            if (value == IndustryUsageEnum.NoShow)
                return "NoShow";

            if (value == IndustryUsageEnum.DelayedCharge)
                return "DelayedCharge";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of IndustryUsage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IndustryUsageEnum?> IndustryUsageOption { get; private set; }

        /// <summary>
        /// In case of [asynchronous authorisation adjustment](https://docs.adyen.com/online-payments/adjust-authorisation#adjust-authorisation), this field denotes why the additional payment is made.  Possible values:   * **NoShow**: An incremental charge is carried out because of a no-show for a guaranteed reservation.   * **DelayedCharge**: An incremental charge is carried out to process an additional payment after the original services have been rendered and the respective payment has been processed.
        /// </summary>
        /// <value>In case of [asynchronous authorisation adjustment](https://docs.adyen.com/online-payments/adjust-authorisation#adjust-authorisation), this field denotes why the additional payment is made.  Possible values:   * **NoShow**: An incremental charge is carried out because of a no-show for a guaranteed reservation.   * **DelayedCharge**: An incremental charge is carried out to process an additional payment after the original services have been rendered and the respective payment has been processed.</value>
        [JsonPropertyName("industryUsage")]
        public IndustryUsageEnum? IndustryUsage { get { return this.IndustryUsageOption; } set { this.IndustryUsageOption = new Option<IndustryUsageEnum?>(value); } }

        /// <summary>
        /// Used to track the state of RequestedTestAcquirerResponseCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RequestedTestAcquirerResponseCodeOption { get; private set; }

        /// <summary>
        /// Triggers test scenarios that allow to replicate certain acquirer response codes. See [Testing result codes and refusal reasons](https://docs.adyen.com/development-resources/testing/result-codes/) to learn about the possible values, and the &#x60;refusalReason&#x60; values you can trigger. 
        /// </summary>
        /// <value>Triggers test scenarios that allow to replicate certain acquirer response codes. See [Testing result codes and refusal reasons](https://docs.adyen.com/development-resources/testing/result-codes/) to learn about the possible values, and the &#x60;refusalReason&#x60; values you can trigger. </value>
        [JsonPropertyName("RequestedTestAcquirerResponseCode")]
        public string RequestedTestAcquirerResponseCode { get { return this.RequestedTestAcquirerResponseCodeOption; } set { this.RequestedTestAcquirerResponseCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RequestedTestErrorResponseCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RequestedTestErrorResponseCodeOption { get; private set; }

        /// <summary>
        /// Triggers test scenarios that allow to replicate certain communication errors.  Allowed values: * **NO_CONNECTION_AVAILABLE** – There wasn&#39;t a connection available to service the outgoing communication. This is a transient, retriable error since no messaging could be initiated to an issuing system (or third-party acquiring system). Therefore, the header Transient-Error: true is returned in the response. A subsequent request using the same idempotency key will be processed as if it was the first request. * **IOEXCEPTION_RECEIVED** – Something went wrong during transmission of the message or receiving the response. This is a classified as non-transient because the message could have been received by the issuing party and been acted upon. No transient error header is returned. If using idempotency, the (error) response is stored as the final result for the idempotency key. Subsequent messages with the same idempotency key not be processed beyond returning the stored response.
        /// </summary>
        /// <value>Triggers test scenarios that allow to replicate certain communication errors.  Allowed values: * **NO_CONNECTION_AVAILABLE** – There wasn&#39;t a connection available to service the outgoing communication. This is a transient, retriable error since no messaging could be initiated to an issuing system (or third-party acquiring system). Therefore, the header Transient-Error: true is returned in the response. A subsequent request using the same idempotency key will be processed as if it was the first request. * **IOEXCEPTION_RECEIVED** – Something went wrong during transmission of the message or receiving the response. This is a classified as non-transient because the message could have been received by the issuing party and been acted upon. No transient error header is returned. If using idempotency, the (error) response is stored as the final result for the idempotency key. Subsequent messages with the same idempotency key not be processed beyond returning the stored response.</value>
        [JsonPropertyName("RequestedTestErrorResponseCode")]
        public string RequestedTestErrorResponseCode { get { return this.RequestedTestErrorResponseCodeOption; } set { this.RequestedTestErrorResponseCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AllowPartialAuth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AllowPartialAuthOption { get; private set; }

        /// <summary>
        /// Set to true to authorise a part of the requested amount in case the cardholder does not have enough funds on their account.  If a payment was partially authorised, the response includes resultCode: PartiallyAuthorised and the authorised amount in additionalData.authorisedAmountValue. To enable this functionality, contact our Support Team.
        /// </summary>
        /// <value>Set to true to authorise a part of the requested amount in case the cardholder does not have enough funds on their account.  If a payment was partially authorised, the response includes resultCode: PartiallyAuthorised and the authorised amount in additionalData.authorisedAmountValue. To enable this functionality, contact our Support Team.</value>
        [JsonPropertyName("allowPartialAuth")]
        public string AllowPartialAuth { get { return this.AllowPartialAuthOption; } set { this.AllowPartialAuthOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AuthorisationType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AuthorisationTypeOption { get; private set; }

        /// <summary>
        /// Flags a card payment request for either pre-authorisation or final authorisation. For more information, refer to [Authorisation types](https://docs.adyen.com/online-payments/adjust-authorisation#authorisation-types).  Allowed values: * **PreAuth** – flags the payment request to be handled as a pre-authorisation. * **FinalAuth** – flags the payment request to be handled as a final authorisation.
        /// </summary>
        /// <value>Flags a card payment request for either pre-authorisation or final authorisation. For more information, refer to [Authorisation types](https://docs.adyen.com/online-payments/adjust-authorisation#authorisation-types).  Allowed values: * **PreAuth** – flags the payment request to be handled as a pre-authorisation. * **FinalAuth** – flags the payment request to be handled as a final authorisation.</value>
        [JsonPropertyName("authorisationType")]
        public string AuthorisationType { get { return this.AuthorisationTypeOption; } set { this.AuthorisationTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AutoRescue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AutoRescueOption { get; private set; }

        /// <summary>
        /// Set to **true** to enable [Auto Rescue](https://docs.adyen.com/online-payments/auto-rescue/) for a transaction. Use the &#x60;maxDaysToRescue&#x60; to specify a rescue window.
        /// </summary>
        /// <value>Set to **true** to enable [Auto Rescue](https://docs.adyen.com/online-payments/auto-rescue/) for a transaction. Use the &#x60;maxDaysToRescue&#x60; to specify a rescue window.</value>
        [JsonPropertyName("autoRescue")]
        public string AutoRescue { get { return this.AutoRescueOption; } set { this.AutoRescueOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CustomRoutingFlag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CustomRoutingFlagOption { get; private set; }

        /// <summary>
        /// Allows you to determine or override the acquirer account that should be used for the transaction.  If you need to process a payment with an acquirer different from a default one, you can set up a corresponding configuration on the Adyen payments platform. Then you can pass a custom routing flag in a payment request&#39;s additional data to target a specific acquirer.  To enable this functionality, contact [Support](https://www.adyen.help/hc/en-us/requests/new).
        /// </summary>
        /// <value>Allows you to determine or override the acquirer account that should be used for the transaction.  If you need to process a payment with an acquirer different from a default one, you can set up a corresponding configuration on the Adyen payments platform. Then you can pass a custom routing flag in a payment request&#39;s additional data to target a specific acquirer.  To enable this functionality, contact [Support](https://www.adyen.help/hc/en-us/requests/new).</value>
        [JsonPropertyName("customRoutingFlag")]
        public string CustomRoutingFlag { get { return this.CustomRoutingFlagOption; } set { this.CustomRoutingFlagOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ManualCapture
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ManualCaptureOption { get; private set; }

        /// <summary>
        /// Set to **true** to require [manual capture](https://docs.adyen.com/online-payments/capture) for the transaction.
        /// </summary>
        /// <value>Set to **true** to require [manual capture](https://docs.adyen.com/online-payments/capture) for the transaction.</value>
        [JsonPropertyName("manualCapture")]
        public string ManualCapture { get { return this.ManualCaptureOption; } set { this.ManualCaptureOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MaxDaysToRescue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MaxDaysToRescueOption { get; private set; }

        /// <summary>
        /// The rescue window for a transaction, in days, when &#x60;autoRescue&#x60; is set to **true**. You can specify a value between 1 and 48.  * For [cards](https://docs.adyen.com/online-payments/auto-rescue/cards/), the default is one calendar month.  * For [SEPA](https://docs.adyen.com/online-payments/auto-rescue/sepa/), the default is 42 days.
        /// </summary>
        /// <value>The rescue window for a transaction, in days, when &#x60;autoRescue&#x60; is set to **true**. You can specify a value between 1 and 48.  * For [cards](https://docs.adyen.com/online-payments/auto-rescue/cards/), the default is one calendar month.  * For [SEPA](https://docs.adyen.com/online-payments/auto-rescue/sepa/), the default is 42 days.</value>
        [JsonPropertyName("maxDaysToRescue")]
        public string MaxDaysToRescue { get { return this.MaxDaysToRescueOption; } set { this.MaxDaysToRescueOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NetworkTxReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NetworkTxReferenceOption { get; private set; }

        /// <summary>
        /// Allows you to link the transaction to the original or previous one in a subscription/card-on-file chain. This field is required for token-based transactions where Adyen does not tokenize the card.  Transaction identifier from card schemes, for example, Mastercard Trace ID or the Visa Transaction ID.  Submit the original transaction ID of the contract in your payment request if you are not tokenizing card details with Adyen and are making a merchant-initiated transaction (MIT) for subsequent charges.  Make sure you are sending &#x60;shopperInteraction&#x60; **ContAuth** and &#x60;recurringProcessingModel&#x60; **Subscription** or **UnscheduledCardOnFile** to ensure that the transaction is classified as MIT.
        /// </summary>
        /// <value>Allows you to link the transaction to the original or previous one in a subscription/card-on-file chain. This field is required for token-based transactions where Adyen does not tokenize the card.  Transaction identifier from card schemes, for example, Mastercard Trace ID or the Visa Transaction ID.  Submit the original transaction ID of the contract in your payment request if you are not tokenizing card details with Adyen and are making a merchant-initiated transaction (MIT) for subsequent charges.  Make sure you are sending &#x60;shopperInteraction&#x60; **ContAuth** and &#x60;recurringProcessingModel&#x60; **Subscription** or **UnscheduledCardOnFile** to ensure that the transaction is classified as MIT.</value>
        [JsonPropertyName("networkTxReference")]
        public string NetworkTxReference { get { return this.NetworkTxReferenceOption; } set { this.NetworkTxReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OverwriteBrand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OverwriteBrandOption { get; private set; }

        /// <summary>
        /// Boolean indicator that can be optionally used for performing debit transactions on combo cards (for example, combo cards in Brazil). This is not mandatory but we recommend that you set this to true if you want to use the &#x60;selectedBrand&#x60; value to specify how to process the transaction.
        /// </summary>
        /// <value>Boolean indicator that can be optionally used for performing debit transactions on combo cards (for example, combo cards in Brazil). This is not mandatory but we recommend that you set this to true if you want to use the &#x60;selectedBrand&#x60; value to specify how to process the transaction.</value>
        [JsonPropertyName("overwriteBrand")]
        public string OverwriteBrand { get { return this.OverwriteBrandOption; } set { this.OverwriteBrandOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantCity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantCityOption { get; private set; }

        /// <summary>
        /// This field is required if the transaction is performed by a registered payment facilitator. This field must contain the city of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 13 characters.
        /// </summary>
        /// <value>This field is required if the transaction is performed by a registered payment facilitator. This field must contain the city of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 13 characters.</value>
        [JsonPropertyName("subMerchantCity")]
        public string SubMerchantCity { get { return this.SubMerchantCityOption; } set { this.SubMerchantCityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantCountry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantCountryOption { get; private set; }

        /// <summary>
        /// This field is required if the transaction is performed by a registered payment facilitator. This field must contain the three-letter country code of the actual merchant&#39;s address. * Format: alpha-numeric. * Fixed length: 3 characters.
        /// </summary>
        /// <value>This field is required if the transaction is performed by a registered payment facilitator. This field must contain the three-letter country code of the actual merchant&#39;s address. * Format: alpha-numeric. * Fixed length: 3 characters.</value>
        [JsonPropertyName("subMerchantCountry")]
        public string SubMerchantCountry { get { return this.SubMerchantCountryOption; } set { this.SubMerchantCountryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantEmailOption { get; private set; }

        /// <summary>
        /// This field is required for transactions performed by registered payment facilitators. This field contains the email address of the sub-merchant. * Format: Alphanumeric * Maximum length: 40 characters
        /// </summary>
        /// <value>This field is required for transactions performed by registered payment facilitators. This field contains the email address of the sub-merchant. * Format: Alphanumeric * Maximum length: 40 characters</value>
        [JsonPropertyName("subMerchantEmail")]
        public string SubMerchantEmail { get { return this.SubMerchantEmailOption; } set { this.SubMerchantEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantIDOption { get; private set; }

        /// <summary>
        /// This field contains an identifier of the actual merchant when a transaction is submitted via a payment facilitator. The payment facilitator must send in this unique ID.  A unique identifier per submerchant that is required if the transaction is performed by a registered payment facilitator. * Format: alpha-numeric. * Fixed length: 15 characters.
        /// </summary>
        /// <value>This field contains an identifier of the actual merchant when a transaction is submitted via a payment facilitator. The payment facilitator must send in this unique ID.  A unique identifier per submerchant that is required if the transaction is performed by a registered payment facilitator. * Format: alpha-numeric. * Fixed length: 15 characters.</value>
        [JsonPropertyName("subMerchantID")]
        public string SubMerchantID { get { return this.SubMerchantIDOption; } set { this.SubMerchantIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantNameOption { get; private set; }

        /// <summary>
        /// This field is required if the transaction is performed by a registered payment facilitator. This field must contain the name of the actual merchant. * Format: alpha-numeric. * Maximum length: 22 characters.
        /// </summary>
        /// <value>This field is required if the transaction is performed by a registered payment facilitator. This field must contain the name of the actual merchant. * Format: alpha-numeric. * Maximum length: 22 characters.</value>
        [JsonPropertyName("subMerchantName")]
        public string SubMerchantName { get { return this.SubMerchantNameOption; } set { this.SubMerchantNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantPhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantPhoneNumberOption { get; private set; }

        /// <summary>
        /// This field is required for transactions performed by registered payment facilitators. This field contains the phone number of the sub-merchant.* Format: Alphanumeric * Maximum length: 20 characters
        /// </summary>
        /// <value>This field is required for transactions performed by registered payment facilitators. This field contains the phone number of the sub-merchant.* Format: Alphanumeric * Maximum length: 20 characters</value>
        [JsonPropertyName("subMerchantPhoneNumber")]
        public string SubMerchantPhoneNumber { get { return this.SubMerchantPhoneNumberOption; } set { this.SubMerchantPhoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantPostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantPostalCodeOption { get; private set; }

        /// <summary>
        /// This field is required if the transaction is performed by a registered payment facilitator. This field must contain the postal code of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 10 characters.
        /// </summary>
        /// <value>This field is required if the transaction is performed by a registered payment facilitator. This field must contain the postal code of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 10 characters.</value>
        [JsonPropertyName("subMerchantPostalCode")]
        public string SubMerchantPostalCode { get { return this.SubMerchantPostalCodeOption; } set { this.SubMerchantPostalCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantStateOption { get; private set; }

        /// <summary>
        /// This field is required if the transaction is performed by a registered payment facilitator, and if applicable to the country. This field must contain the state code of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 3 characters.
        /// </summary>
        /// <value>This field is required if the transaction is performed by a registered payment facilitator, and if applicable to the country. This field must contain the state code of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 3 characters.</value>
        [JsonPropertyName("subMerchantState")]
        public string SubMerchantState { get { return this.SubMerchantStateOption; } set { this.SubMerchantStateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantStreet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantStreetOption { get; private set; }

        /// <summary>
        /// This field is required if the transaction is performed by a registered payment facilitator. This field must contain the street of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 60 characters.
        /// </summary>
        /// <value>This field is required if the transaction is performed by a registered payment facilitator. This field must contain the street of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 60 characters.</value>
        [JsonPropertyName("subMerchantStreet")]
        public string SubMerchantStreet { get { return this.SubMerchantStreetOption; } set { this.SubMerchantStreetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchantTaxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMerchantTaxIdOption { get; private set; }

        /// <summary>
        /// This field is required if the transaction is performed by a registered payment facilitator. This field must contain the tax ID of the actual merchant. * Format: alpha-numeric. * Fixed length: 11 or 14 characters.
        /// </summary>
        /// <value>This field is required if the transaction is performed by a registered payment facilitator. This field must contain the tax ID of the actual merchant. * Format: alpha-numeric. * Fixed length: 11 or 14 characters.</value>
        [JsonPropertyName("subMerchantTaxId")]
        public string SubMerchantTaxId { get { return this.SubMerchantTaxIdOption; } set { this.SubMerchantTaxIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataCommon {\n");
            sb.Append("  RequestedTestAcquirerResponseCode: ").Append(RequestedTestAcquirerResponseCode).Append("\n");
            sb.Append("  RequestedTestErrorResponseCode: ").Append(RequestedTestErrorResponseCode).Append("\n");
            sb.Append("  AllowPartialAuth: ").Append(AllowPartialAuth).Append("\n");
            sb.Append("  AuthorisationType: ").Append(AuthorisationType).Append("\n");
            sb.Append("  AutoRescue: ").Append(AutoRescue).Append("\n");
            sb.Append("  CustomRoutingFlag: ").Append(CustomRoutingFlag).Append("\n");
            sb.Append("  IndustryUsage: ").Append(IndustryUsage).Append("\n");
            sb.Append("  ManualCapture: ").Append(ManualCapture).Append("\n");
            sb.Append("  MaxDaysToRescue: ").Append(MaxDaysToRescue).Append("\n");
            sb.Append("  NetworkTxReference: ").Append(NetworkTxReference).Append("\n");
            sb.Append("  OverwriteBrand: ").Append(OverwriteBrand).Append("\n");
            sb.Append("  SubMerchantCity: ").Append(SubMerchantCity).Append("\n");
            sb.Append("  SubMerchantCountry: ").Append(SubMerchantCountry).Append("\n");
            sb.Append("  SubMerchantEmail: ").Append(SubMerchantEmail).Append("\n");
            sb.Append("  SubMerchantID: ").Append(SubMerchantID).Append("\n");
            sb.Append("  SubMerchantName: ").Append(SubMerchantName).Append("\n");
            sb.Append("  SubMerchantPhoneNumber: ").Append(SubMerchantPhoneNumber).Append("\n");
            sb.Append("  SubMerchantPostalCode: ").Append(SubMerchantPostalCode).Append("\n");
            sb.Append("  SubMerchantState: ").Append(SubMerchantState).Append("\n");
            sb.Append("  SubMerchantStreet: ").Append(SubMerchantStreet).Append("\n");
            sb.Append("  SubMerchantTaxId: ").Append(SubMerchantTaxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalDataCommon" />
    /// </summary>
    public class AdditionalDataCommonJsonConverter : JsonConverter<AdditionalDataCommon>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalDataCommon" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalDataCommon Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> requestedTestAcquirerResponseCode = default;
            Option<string> requestedTestErrorResponseCode = default;
            Option<string> allowPartialAuth = default;
            Option<string> authorisationType = default;
            Option<string> autoRescue = default;
            Option<string> customRoutingFlag = default;
            Option<AdditionalDataCommon.IndustryUsageEnum?> industryUsage = default;
            Option<string> manualCapture = default;
            Option<string> maxDaysToRescue = default;
            Option<string> networkTxReference = default;
            Option<string> overwriteBrand = default;
            Option<string> subMerchantCity = default;
            Option<string> subMerchantCountry = default;
            Option<string> subMerchantEmail = default;
            Option<string> subMerchantID = default;
            Option<string> subMerchantName = default;
            Option<string> subMerchantPhoneNumber = default;
            Option<string> subMerchantPostalCode = default;
            Option<string> subMerchantState = default;
            Option<string> subMerchantStreet = default;
            Option<string> subMerchantTaxId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "RequestedTestAcquirerResponseCode":
                            requestedTestAcquirerResponseCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "RequestedTestErrorResponseCode":
                            requestedTestErrorResponseCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "allowPartialAuth":
                            allowPartialAuth = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "authorisationType":
                            authorisationType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "autoRescue":
                            autoRescue = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "customRoutingFlag":
                            customRoutingFlag = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "industryUsage":
                            string industryUsageRawValue = utf8JsonReader.GetString();
                            if (industryUsageRawValue != null)
                                industryUsage = new Option<AdditionalDataCommon.IndustryUsageEnum?>(AdditionalDataCommon.IndustryUsageEnumFromStringOrDefault(industryUsageRawValue));
                            break;
                        case "manualCapture":
                            manualCapture = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "maxDaysToRescue":
                            maxDaysToRescue = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "networkTxReference":
                            networkTxReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "overwriteBrand":
                            overwriteBrand = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchantCity":
                            subMerchantCity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchantCountry":
                            subMerchantCountry = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchantEmail":
                            subMerchantEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchantID":
                            subMerchantID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchantName":
                            subMerchantName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchantPhoneNumber":
                            subMerchantPhoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchantPostalCode":
                            subMerchantPostalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchantState":
                            subMerchantState = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchantStreet":
                            subMerchantStreet = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchantTaxId":
                            subMerchantTaxId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (requestedTestAcquirerResponseCode.IsSet && requestedTestAcquirerResponseCode.Value == null)
                throw new ArgumentNullException(nameof(requestedTestAcquirerResponseCode), "Property is not nullable for class AdditionalDataCommon.");

            if (requestedTestErrorResponseCode.IsSet && requestedTestErrorResponseCode.Value == null)
                throw new ArgumentNullException(nameof(requestedTestErrorResponseCode), "Property is not nullable for class AdditionalDataCommon.");

            if (allowPartialAuth.IsSet && allowPartialAuth.Value == null)
                throw new ArgumentNullException(nameof(allowPartialAuth), "Property is not nullable for class AdditionalDataCommon.");

            if (authorisationType.IsSet && authorisationType.Value == null)
                throw new ArgumentNullException(nameof(authorisationType), "Property is not nullable for class AdditionalDataCommon.");

            if (autoRescue.IsSet && autoRescue.Value == null)
                throw new ArgumentNullException(nameof(autoRescue), "Property is not nullable for class AdditionalDataCommon.");

            if (customRoutingFlag.IsSet && customRoutingFlag.Value == null)
                throw new ArgumentNullException(nameof(customRoutingFlag), "Property is not nullable for class AdditionalDataCommon.");

            if (industryUsage.IsSet && industryUsage.Value == null)
                throw new ArgumentNullException(nameof(industryUsage), "Property is not nullable for class AdditionalDataCommon.");

            if (manualCapture.IsSet && manualCapture.Value == null)
                throw new ArgumentNullException(nameof(manualCapture), "Property is not nullable for class AdditionalDataCommon.");

            if (maxDaysToRescue.IsSet && maxDaysToRescue.Value == null)
                throw new ArgumentNullException(nameof(maxDaysToRescue), "Property is not nullable for class AdditionalDataCommon.");

            if (networkTxReference.IsSet && networkTxReference.Value == null)
                throw new ArgumentNullException(nameof(networkTxReference), "Property is not nullable for class AdditionalDataCommon.");

            if (overwriteBrand.IsSet && overwriteBrand.Value == null)
                throw new ArgumentNullException(nameof(overwriteBrand), "Property is not nullable for class AdditionalDataCommon.");

            if (subMerchantCity.IsSet && subMerchantCity.Value == null)
                throw new ArgumentNullException(nameof(subMerchantCity), "Property is not nullable for class AdditionalDataCommon.");

            if (subMerchantCountry.IsSet && subMerchantCountry.Value == null)
                throw new ArgumentNullException(nameof(subMerchantCountry), "Property is not nullable for class AdditionalDataCommon.");

            if (subMerchantEmail.IsSet && subMerchantEmail.Value == null)
                throw new ArgumentNullException(nameof(subMerchantEmail), "Property is not nullable for class AdditionalDataCommon.");

            if (subMerchantID.IsSet && subMerchantID.Value == null)
                throw new ArgumentNullException(nameof(subMerchantID), "Property is not nullable for class AdditionalDataCommon.");

            if (subMerchantName.IsSet && subMerchantName.Value == null)
                throw new ArgumentNullException(nameof(subMerchantName), "Property is not nullable for class AdditionalDataCommon.");

            if (subMerchantPhoneNumber.IsSet && subMerchantPhoneNumber.Value == null)
                throw new ArgumentNullException(nameof(subMerchantPhoneNumber), "Property is not nullable for class AdditionalDataCommon.");

            if (subMerchantPostalCode.IsSet && subMerchantPostalCode.Value == null)
                throw new ArgumentNullException(nameof(subMerchantPostalCode), "Property is not nullable for class AdditionalDataCommon.");

            if (subMerchantState.IsSet && subMerchantState.Value == null)
                throw new ArgumentNullException(nameof(subMerchantState), "Property is not nullable for class AdditionalDataCommon.");

            if (subMerchantStreet.IsSet && subMerchantStreet.Value == null)
                throw new ArgumentNullException(nameof(subMerchantStreet), "Property is not nullable for class AdditionalDataCommon.");

            if (subMerchantTaxId.IsSet && subMerchantTaxId.Value == null)
                throw new ArgumentNullException(nameof(subMerchantTaxId), "Property is not nullable for class AdditionalDataCommon.");

            return new AdditionalDataCommon(requestedTestAcquirerResponseCode, requestedTestErrorResponseCode, allowPartialAuth, authorisationType, autoRescue, customRoutingFlag, industryUsage, manualCapture, maxDaysToRescue, networkTxReference, overwriteBrand, subMerchantCity, subMerchantCountry, subMerchantEmail, subMerchantID, subMerchantName, subMerchantPhoneNumber, subMerchantPostalCode, subMerchantState, subMerchantStreet, subMerchantTaxId);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalDataCommon" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataCommon"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalDataCommon additionalDataCommon, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalDataCommon, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalDataCommon" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataCommon"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalDataCommon additionalDataCommon, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalDataCommon.RequestedTestAcquirerResponseCodeOption.IsSet && additionalDataCommon.RequestedTestAcquirerResponseCode == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.RequestedTestAcquirerResponseCode), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.RequestedTestErrorResponseCodeOption.IsSet && additionalDataCommon.RequestedTestErrorResponseCode == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.RequestedTestErrorResponseCode), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.AllowPartialAuthOption.IsSet && additionalDataCommon.AllowPartialAuth == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.AllowPartialAuth), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.AuthorisationTypeOption.IsSet && additionalDataCommon.AuthorisationType == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.AuthorisationType), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.AutoRescueOption.IsSet && additionalDataCommon.AutoRescue == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.AutoRescue), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.CustomRoutingFlagOption.IsSet && additionalDataCommon.CustomRoutingFlag == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.CustomRoutingFlag), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.ManualCaptureOption.IsSet && additionalDataCommon.ManualCapture == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.ManualCapture), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.MaxDaysToRescueOption.IsSet && additionalDataCommon.MaxDaysToRescue == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.MaxDaysToRescue), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.NetworkTxReferenceOption.IsSet && additionalDataCommon.NetworkTxReference == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.NetworkTxReference), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.OverwriteBrandOption.IsSet && additionalDataCommon.OverwriteBrand == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.OverwriteBrand), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.SubMerchantCityOption.IsSet && additionalDataCommon.SubMerchantCity == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.SubMerchantCity), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.SubMerchantCountryOption.IsSet && additionalDataCommon.SubMerchantCountry == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.SubMerchantCountry), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.SubMerchantEmailOption.IsSet && additionalDataCommon.SubMerchantEmail == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.SubMerchantEmail), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.SubMerchantIDOption.IsSet && additionalDataCommon.SubMerchantID == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.SubMerchantID), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.SubMerchantNameOption.IsSet && additionalDataCommon.SubMerchantName == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.SubMerchantName), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.SubMerchantPhoneNumberOption.IsSet && additionalDataCommon.SubMerchantPhoneNumber == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.SubMerchantPhoneNumber), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.SubMerchantPostalCodeOption.IsSet && additionalDataCommon.SubMerchantPostalCode == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.SubMerchantPostalCode), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.SubMerchantStateOption.IsSet && additionalDataCommon.SubMerchantState == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.SubMerchantState), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.SubMerchantStreetOption.IsSet && additionalDataCommon.SubMerchantStreet == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.SubMerchantStreet), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.SubMerchantTaxIdOption.IsSet && additionalDataCommon.SubMerchantTaxId == null)
                throw new ArgumentNullException(nameof(additionalDataCommon.SubMerchantTaxId), "Property is required for class AdditionalDataCommon.");

            if (additionalDataCommon.RequestedTestAcquirerResponseCodeOption.IsSet)
                writer.WriteString("RequestedTestAcquirerResponseCode", additionalDataCommon.RequestedTestAcquirerResponseCode);

            if (additionalDataCommon.RequestedTestErrorResponseCodeOption.IsSet)
                writer.WriteString("RequestedTestErrorResponseCode", additionalDataCommon.RequestedTestErrorResponseCode);

            if (additionalDataCommon.AllowPartialAuthOption.IsSet)
                writer.WriteString("allowPartialAuth", additionalDataCommon.AllowPartialAuth);

            if (additionalDataCommon.AuthorisationTypeOption.IsSet)
                writer.WriteString("authorisationType", additionalDataCommon.AuthorisationType);

            if (additionalDataCommon.AutoRescueOption.IsSet)
                writer.WriteString("autoRescue", additionalDataCommon.AutoRescue);

            if (additionalDataCommon.CustomRoutingFlagOption.IsSet)
                writer.WriteString("customRoutingFlag", additionalDataCommon.CustomRoutingFlag);

            var industryUsageRawValue = AdditionalDataCommon.IndustryUsageEnumToJsonValue(additionalDataCommon.IndustryUsageOption.Value.Value);
            writer.WriteString("industryUsage", industryUsageRawValue);
            if (additionalDataCommon.ManualCaptureOption.IsSet)
                writer.WriteString("manualCapture", additionalDataCommon.ManualCapture);

            if (additionalDataCommon.MaxDaysToRescueOption.IsSet)
                writer.WriteString("maxDaysToRescue", additionalDataCommon.MaxDaysToRescue);

            if (additionalDataCommon.NetworkTxReferenceOption.IsSet)
                writer.WriteString("networkTxReference", additionalDataCommon.NetworkTxReference);

            if (additionalDataCommon.OverwriteBrandOption.IsSet)
                writer.WriteString("overwriteBrand", additionalDataCommon.OverwriteBrand);

            if (additionalDataCommon.SubMerchantCityOption.IsSet)
                writer.WriteString("subMerchantCity", additionalDataCommon.SubMerchantCity);

            if (additionalDataCommon.SubMerchantCountryOption.IsSet)
                writer.WriteString("subMerchantCountry", additionalDataCommon.SubMerchantCountry);

            if (additionalDataCommon.SubMerchantEmailOption.IsSet)
                writer.WriteString("subMerchantEmail", additionalDataCommon.SubMerchantEmail);

            if (additionalDataCommon.SubMerchantIDOption.IsSet)
                writer.WriteString("subMerchantID", additionalDataCommon.SubMerchantID);

            if (additionalDataCommon.SubMerchantNameOption.IsSet)
                writer.WriteString("subMerchantName", additionalDataCommon.SubMerchantName);

            if (additionalDataCommon.SubMerchantPhoneNumberOption.IsSet)
                writer.WriteString("subMerchantPhoneNumber", additionalDataCommon.SubMerchantPhoneNumber);

            if (additionalDataCommon.SubMerchantPostalCodeOption.IsSet)
                writer.WriteString("subMerchantPostalCode", additionalDataCommon.SubMerchantPostalCode);

            if (additionalDataCommon.SubMerchantStateOption.IsSet)
                writer.WriteString("subMerchantState", additionalDataCommon.SubMerchantState);

            if (additionalDataCommon.SubMerchantStreetOption.IsSet)
                writer.WriteString("subMerchantStreet", additionalDataCommon.SubMerchantStreet);

            if (additionalDataCommon.SubMerchantTaxIdOption.IsSet)
                writer.WriteString("subMerchantTaxId", additionalDataCommon.SubMerchantTaxId);
        }
    }
}
