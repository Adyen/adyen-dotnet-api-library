// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// MerchantRiskIndicator
    /// </summary>
    public partial class MerchantRiskIndicator : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantRiskIndicator" /> class.
        /// </summary>
        /// <param name="addressMatch">Whether the chosen delivery address is identical to the billing address.</param>
        /// <param name="deliveryAddressIndicator">Indicator regarding the delivery address. Allowed values: * &#x60;shipToBillingAddress&#x60; * &#x60;shipToVerifiedAddress&#x60; * &#x60;shipToNewAddress&#x60; * &#x60;shipToStore&#x60; * &#x60;digitalGoods&#x60; * &#x60;goodsNotShipped&#x60; * &#x60;other&#x60;</param>
        /// <param name="deliveryEmail">The delivery email address (for digital goods).</param>
        /// <param name="deliveryEmailAddress">For Electronic delivery, the email address to which the merchandise was delivered. Maximum length: 254 characters.</param>
        /// <param name="deliveryTimeframe">The estimated delivery time for the shopper to receive the goods. Allowed values: * &#x60;electronicDelivery&#x60; * &#x60;sameDayShipping&#x60; * &#x60;overnightShipping&#x60; * &#x60;twoOrMoreDaysShipping&#x60;</param>
        /// <param name="giftCardAmount">giftCardAmount</param>
        /// <param name="giftCardCount">For prepaid or gift card purchase, total count of individual prepaid or gift cards/codes purchased.</param>
        /// <param name="giftCardCurr">For prepaid or gift card purchase, [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) three-digit currency code of the gift card, other than those listed in Table A.5 of the EMVCo 3D Secure Protocol and Core Functions Specification.</param>
        /// <param name="preOrderDate">For pre-order purchases, the expected date this product will be available to the shopper.</param>
        /// <param name="preOrderPurchase">Indicator for whether this transaction is for pre-ordering a product.</param>
        /// <param name="preOrderPurchaseInd">Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.</param>
        /// <param name="reorderItems">Indicator for whether the shopper has already purchased the same items in the past.</param>
        /// <param name="reorderItemsInd">Indicates whether the cardholder is reordering previously purchased merchandise.</param>
        /// <param name="shipIndicator">Indicates shipping method chosen for the transaction.</param>
        [JsonConstructor]
        public MerchantRiskIndicator(Option<bool?> addressMatch = default, Option<DeliveryAddressIndicatorEnum?> deliveryAddressIndicator = default, Option<string> deliveryEmail = default, Option<string> deliveryEmailAddress = default, Option<DeliveryTimeframeEnum?> deliveryTimeframe = default, Option<Amount> giftCardAmount = default, Option<int?> giftCardCount = default, Option<string> giftCardCurr = default, Option<DateTime?> preOrderDate = default, Option<bool?> preOrderPurchase = default, Option<string> preOrderPurchaseInd = default, Option<bool?> reorderItems = default, Option<string> reorderItemsInd = default, Option<string> shipIndicator = default)
        {
            AddressMatchOption = addressMatch;
            DeliveryAddressIndicatorOption = deliveryAddressIndicator;
            DeliveryEmailOption = deliveryEmail;
            DeliveryEmailAddressOption = deliveryEmailAddress;
            DeliveryTimeframeOption = deliveryTimeframe;
            GiftCardAmountOption = giftCardAmount;
            GiftCardCountOption = giftCardCount;
            GiftCardCurrOption = giftCardCurr;
            PreOrderDateOption = preOrderDate;
            PreOrderPurchaseOption = preOrderPurchase;
            PreOrderPurchaseIndOption = preOrderPurchaseInd;
            ReorderItemsOption = reorderItems;
            ReorderItemsIndOption = reorderItemsInd;
            ShipIndicatorOption = shipIndicator;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Indicator regarding the delivery address. Allowed values: * &#x60;shipToBillingAddress&#x60; * &#x60;shipToVerifiedAddress&#x60; * &#x60;shipToNewAddress&#x60; * &#x60;shipToStore&#x60; * &#x60;digitalGoods&#x60; * &#x60;goodsNotShipped&#x60; * &#x60;other&#x60;
        /// </summary>
        /// <value>Indicator regarding the delivery address. Allowed values: * &#x60;shipToBillingAddress&#x60; * &#x60;shipToVerifiedAddress&#x60; * &#x60;shipToNewAddress&#x60; * &#x60;shipToStore&#x60; * &#x60;digitalGoods&#x60; * &#x60;goodsNotShipped&#x60; * &#x60;other&#x60;</value>
        public enum DeliveryAddressIndicatorEnum
        {
            /// <summary>
            /// Enum ShipToBillingAddress for value: shipToBillingAddress
            /// </summary>
            ShipToBillingAddress = 1,

            /// <summary>
            /// Enum ShipToVerifiedAddress for value: shipToVerifiedAddress
            /// </summary>
            ShipToVerifiedAddress = 2,

            /// <summary>
            /// Enum ShipToNewAddress for value: shipToNewAddress
            /// </summary>
            ShipToNewAddress = 3,

            /// <summary>
            /// Enum ShipToStore for value: shipToStore
            /// </summary>
            ShipToStore = 4,

            /// <summary>
            /// Enum DigitalGoods for value: digitalGoods
            /// </summary>
            DigitalGoods = 5,

            /// <summary>
            /// Enum GoodsNotShipped for value: goodsNotShipped
            /// </summary>
            GoodsNotShipped = 6,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            Other = 7
        }

        /// <summary>
        /// Returns a <see cref="DeliveryAddressIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DeliveryAddressIndicatorEnum DeliveryAddressIndicatorEnumFromString(string value)
        {
            if (value.Equals("shipToBillingAddress"))
                return DeliveryAddressIndicatorEnum.ShipToBillingAddress;

            if (value.Equals("shipToVerifiedAddress"))
                return DeliveryAddressIndicatorEnum.ShipToVerifiedAddress;

            if (value.Equals("shipToNewAddress"))
                return DeliveryAddressIndicatorEnum.ShipToNewAddress;

            if (value.Equals("shipToStore"))
                return DeliveryAddressIndicatorEnum.ShipToStore;

            if (value.Equals("digitalGoods"))
                return DeliveryAddressIndicatorEnum.DigitalGoods;

            if (value.Equals("goodsNotShipped"))
                return DeliveryAddressIndicatorEnum.GoodsNotShipped;

            if (value.Equals("other"))
                return DeliveryAddressIndicatorEnum.Other;

            throw new NotImplementedException($"Could not convert value to type DeliveryAddressIndicatorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DeliveryAddressIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DeliveryAddressIndicatorEnum? DeliveryAddressIndicatorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("shipToBillingAddress"))
                return DeliveryAddressIndicatorEnum.ShipToBillingAddress;

            if (value.Equals("shipToVerifiedAddress"))
                return DeliveryAddressIndicatorEnum.ShipToVerifiedAddress;

            if (value.Equals("shipToNewAddress"))
                return DeliveryAddressIndicatorEnum.ShipToNewAddress;

            if (value.Equals("shipToStore"))
                return DeliveryAddressIndicatorEnum.ShipToStore;

            if (value.Equals("digitalGoods"))
                return DeliveryAddressIndicatorEnum.DigitalGoods;

            if (value.Equals("goodsNotShipped"))
                return DeliveryAddressIndicatorEnum.GoodsNotShipped;

            if (value.Equals("other"))
                return DeliveryAddressIndicatorEnum.Other;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DeliveryAddressIndicatorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DeliveryAddressIndicatorEnumToJsonValue(DeliveryAddressIndicatorEnum? value)
        {
            if (value == DeliveryAddressIndicatorEnum.ShipToBillingAddress)
                return "shipToBillingAddress";

            if (value == DeliveryAddressIndicatorEnum.ShipToVerifiedAddress)
                return "shipToVerifiedAddress";

            if (value == DeliveryAddressIndicatorEnum.ShipToNewAddress)
                return "shipToNewAddress";

            if (value == DeliveryAddressIndicatorEnum.ShipToStore)
                return "shipToStore";

            if (value == DeliveryAddressIndicatorEnum.DigitalGoods)
                return "digitalGoods";

            if (value == DeliveryAddressIndicatorEnum.GoodsNotShipped)
                return "goodsNotShipped";

            if (value == DeliveryAddressIndicatorEnum.Other)
                return "other";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of DeliveryAddressIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DeliveryAddressIndicatorEnum?> DeliveryAddressIndicatorOption { get; private set; }

        /// <summary>
        /// Indicator regarding the delivery address. Allowed values: * &#x60;shipToBillingAddress&#x60; * &#x60;shipToVerifiedAddress&#x60; * &#x60;shipToNewAddress&#x60; * &#x60;shipToStore&#x60; * &#x60;digitalGoods&#x60; * &#x60;goodsNotShipped&#x60; * &#x60;other&#x60;
        /// </summary>
        /// <value>Indicator regarding the delivery address. Allowed values: * &#x60;shipToBillingAddress&#x60; * &#x60;shipToVerifiedAddress&#x60; * &#x60;shipToNewAddress&#x60; * &#x60;shipToStore&#x60; * &#x60;digitalGoods&#x60; * &#x60;goodsNotShipped&#x60; * &#x60;other&#x60;</value>
        [JsonPropertyName("deliveryAddressIndicator")]
        public DeliveryAddressIndicatorEnum? DeliveryAddressIndicator { get { return this.DeliveryAddressIndicatorOption; } set { this.DeliveryAddressIndicatorOption = new Option<DeliveryAddressIndicatorEnum?>(value); } }

        /// <summary>
        /// The estimated delivery time for the shopper to receive the goods. Allowed values: * &#x60;electronicDelivery&#x60; * &#x60;sameDayShipping&#x60; * &#x60;overnightShipping&#x60; * &#x60;twoOrMoreDaysShipping&#x60;
        /// </summary>
        /// <value>The estimated delivery time for the shopper to receive the goods. Allowed values: * &#x60;electronicDelivery&#x60; * &#x60;sameDayShipping&#x60; * &#x60;overnightShipping&#x60; * &#x60;twoOrMoreDaysShipping&#x60;</value>
        public enum DeliveryTimeframeEnum
        {
            /// <summary>
            /// Enum ElectronicDelivery for value: electronicDelivery
            /// </summary>
            ElectronicDelivery = 1,

            /// <summary>
            /// Enum SameDayShipping for value: sameDayShipping
            /// </summary>
            SameDayShipping = 2,

            /// <summary>
            /// Enum OvernightShipping for value: overnightShipping
            /// </summary>
            OvernightShipping = 3,

            /// <summary>
            /// Enum TwoOrMoreDaysShipping for value: twoOrMoreDaysShipping
            /// </summary>
            TwoOrMoreDaysShipping = 4
        }

        /// <summary>
        /// Returns a <see cref="DeliveryTimeframeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DeliveryTimeframeEnum DeliveryTimeframeEnumFromString(string value)
        {
            if (value.Equals("electronicDelivery"))
                return DeliveryTimeframeEnum.ElectronicDelivery;

            if (value.Equals("sameDayShipping"))
                return DeliveryTimeframeEnum.SameDayShipping;

            if (value.Equals("overnightShipping"))
                return DeliveryTimeframeEnum.OvernightShipping;

            if (value.Equals("twoOrMoreDaysShipping"))
                return DeliveryTimeframeEnum.TwoOrMoreDaysShipping;

            throw new NotImplementedException($"Could not convert value to type DeliveryTimeframeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DeliveryTimeframeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DeliveryTimeframeEnum? DeliveryTimeframeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("electronicDelivery"))
                return DeliveryTimeframeEnum.ElectronicDelivery;

            if (value.Equals("sameDayShipping"))
                return DeliveryTimeframeEnum.SameDayShipping;

            if (value.Equals("overnightShipping"))
                return DeliveryTimeframeEnum.OvernightShipping;

            if (value.Equals("twoOrMoreDaysShipping"))
                return DeliveryTimeframeEnum.TwoOrMoreDaysShipping;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DeliveryTimeframeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DeliveryTimeframeEnumToJsonValue(DeliveryTimeframeEnum? value)
        {
            if (value == DeliveryTimeframeEnum.ElectronicDelivery)
                return "electronicDelivery";

            if (value == DeliveryTimeframeEnum.SameDayShipping)
                return "sameDayShipping";

            if (value == DeliveryTimeframeEnum.OvernightShipping)
                return "overnightShipping";

            if (value == DeliveryTimeframeEnum.TwoOrMoreDaysShipping)
                return "twoOrMoreDaysShipping";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of DeliveryTimeframe
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DeliveryTimeframeEnum?> DeliveryTimeframeOption { get; private set; }

        /// <summary>
        /// The estimated delivery time for the shopper to receive the goods. Allowed values: * &#x60;electronicDelivery&#x60; * &#x60;sameDayShipping&#x60; * &#x60;overnightShipping&#x60; * &#x60;twoOrMoreDaysShipping&#x60;
        /// </summary>
        /// <value>The estimated delivery time for the shopper to receive the goods. Allowed values: * &#x60;electronicDelivery&#x60; * &#x60;sameDayShipping&#x60; * &#x60;overnightShipping&#x60; * &#x60;twoOrMoreDaysShipping&#x60;</value>
        [JsonPropertyName("deliveryTimeframe")]
        public DeliveryTimeframeEnum? DeliveryTimeframe { get { return this.DeliveryTimeframeOption; } set { this.DeliveryTimeframeOption = new Option<DeliveryTimeframeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of AddressMatch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AddressMatchOption { get; private set; }

        /// <summary>
        /// Whether the chosen delivery address is identical to the billing address.
        /// </summary>
        /// <value>Whether the chosen delivery address is identical to the billing address.</value>
        [JsonPropertyName("addressMatch")]
        public bool? AddressMatch { get { return this.AddressMatchOption; } set { this.AddressMatchOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DeliveryEmailOption { get; private set; }

        /// <summary>
        /// The delivery email address (for digital goods).
        /// </summary>
        /// <value>The delivery email address (for digital goods).</value>
        [JsonPropertyName("deliveryEmail")]
        [Obsolete]
        public string DeliveryEmail { get { return this.DeliveryEmailOption; } set { this.DeliveryEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryEmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DeliveryEmailAddressOption { get; private set; }

        /// <summary>
        /// For Electronic delivery, the email address to which the merchandise was delivered. Maximum length: 254 characters.
        /// </summary>
        /// <value>For Electronic delivery, the email address to which the merchandise was delivered. Maximum length: 254 characters.</value>
        [JsonPropertyName("deliveryEmailAddress")]
        public string DeliveryEmailAddress { get { return this.DeliveryEmailAddressOption; } set { this.DeliveryEmailAddressOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of GiftCardAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> GiftCardAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets GiftCardAmount
        /// </summary>
        [JsonPropertyName("giftCardAmount")]
        public Amount GiftCardAmount { get { return this.GiftCardAmountOption; } set { this.GiftCardAmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of GiftCardCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GiftCardCountOption { get; private set; }

        /// <summary>
        /// For prepaid or gift card purchase, total count of individual prepaid or gift cards/codes purchased.
        /// </summary>
        /// <value>For prepaid or gift card purchase, total count of individual prepaid or gift cards/codes purchased.</value>
        [JsonPropertyName("giftCardCount")]
        public int? GiftCardCount { get { return this.GiftCardCountOption; } set { this.GiftCardCountOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of GiftCardCurr
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> GiftCardCurrOption { get; private set; }

        /// <summary>
        /// For prepaid or gift card purchase, [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) three-digit currency code of the gift card, other than those listed in Table A.5 of the EMVCo 3D Secure Protocol and Core Functions Specification.
        /// </summary>
        /// <value>For prepaid or gift card purchase, [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) three-digit currency code of the gift card, other than those listed in Table A.5 of the EMVCo 3D Secure Protocol and Core Functions Specification.</value>
        [JsonPropertyName("giftCardCurr")]
        public string GiftCardCurr { get { return this.GiftCardCurrOption; } set { this.GiftCardCurrOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PreOrderDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> PreOrderDateOption { get; private set; }

        /// <summary>
        /// For pre-order purchases, the expected date this product will be available to the shopper.
        /// </summary>
        /// <value>For pre-order purchases, the expected date this product will be available to the shopper.</value>
        [JsonPropertyName("preOrderDate")]
        public DateTime? PreOrderDate { get { return this.PreOrderDateOption; } set { this.PreOrderDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of PreOrderPurchase
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PreOrderPurchaseOption { get; private set; }

        /// <summary>
        /// Indicator for whether this transaction is for pre-ordering a product.
        /// </summary>
        /// <value>Indicator for whether this transaction is for pre-ordering a product.</value>
        [JsonPropertyName("preOrderPurchase")]
        public bool? PreOrderPurchase { get { return this.PreOrderPurchaseOption; } set { this.PreOrderPurchaseOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of PreOrderPurchaseInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PreOrderPurchaseIndOption { get; private set; }

        /// <summary>
        /// Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.
        /// </summary>
        /// <value>Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.</value>
        [JsonPropertyName("preOrderPurchaseInd")]
        public string PreOrderPurchaseInd { get { return this.PreOrderPurchaseIndOption; } set { this.PreOrderPurchaseIndOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReorderItems
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReorderItemsOption { get; private set; }

        /// <summary>
        /// Indicator for whether the shopper has already purchased the same items in the past.
        /// </summary>
        /// <value>Indicator for whether the shopper has already purchased the same items in the past.</value>
        [JsonPropertyName("reorderItems")]
        public bool? ReorderItems { get { return this.ReorderItemsOption; } set { this.ReorderItemsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ReorderItemsInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReorderItemsIndOption { get; private set; }

        /// <summary>
        /// Indicates whether the cardholder is reordering previously purchased merchandise.
        /// </summary>
        /// <value>Indicates whether the cardholder is reordering previously purchased merchandise.</value>
        [JsonPropertyName("reorderItemsInd")]
        public string ReorderItemsInd { get { return this.ReorderItemsIndOption; } set { this.ReorderItemsIndOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShipIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShipIndicatorOption { get; private set; }

        /// <summary>
        /// Indicates shipping method chosen for the transaction.
        /// </summary>
        /// <value>Indicates shipping method chosen for the transaction.</value>
        [JsonPropertyName("shipIndicator")]
        public string ShipIndicator { get { return this.ShipIndicatorOption; } set { this.ShipIndicatorOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MerchantRiskIndicator {\n");
            sb.Append("  AddressMatch: ").Append(AddressMatch).Append("\n");
            sb.Append("  DeliveryAddressIndicator: ").Append(DeliveryAddressIndicator).Append("\n");
            sb.Append("  DeliveryEmail: ").Append(DeliveryEmail).Append("\n");
            sb.Append("  DeliveryEmailAddress: ").Append(DeliveryEmailAddress).Append("\n");
            sb.Append("  DeliveryTimeframe: ").Append(DeliveryTimeframe).Append("\n");
            sb.Append("  GiftCardAmount: ").Append(GiftCardAmount).Append("\n");
            sb.Append("  GiftCardCount: ").Append(GiftCardCount).Append("\n");
            sb.Append("  GiftCardCurr: ").Append(GiftCardCurr).Append("\n");
            sb.Append("  PreOrderDate: ").Append(PreOrderDate).Append("\n");
            sb.Append("  PreOrderPurchase: ").Append(PreOrderPurchase).Append("\n");
            sb.Append("  PreOrderPurchaseInd: ").Append(PreOrderPurchaseInd).Append("\n");
            sb.Append("  ReorderItems: ").Append(ReorderItems).Append("\n");
            sb.Append("  ReorderItemsInd: ").Append(ReorderItemsInd).Append("\n");
            sb.Append("  ShipIndicator: ").Append(ShipIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DeliveryEmailAddress (string) maxLength
            if (this.DeliveryEmailAddress != null && this.DeliveryEmailAddress.Length > 254)
            {
                yield return new ValidationResult("Invalid value for DeliveryEmailAddress, length must be less than 254.", new [] { "DeliveryEmailAddress" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MerchantRiskIndicator" />
    /// </summary>
    public class MerchantRiskIndicatorJsonConverter : JsonConverter<MerchantRiskIndicator>
    {
        /// <summary>
        /// The format to use to serialize PreOrderDate
        /// </summary>
        public static string PreOrderDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="MerchantRiskIndicator" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MerchantRiskIndicator Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> addressMatch = default;
            Option<MerchantRiskIndicator.DeliveryAddressIndicatorEnum?> deliveryAddressIndicator = default;
            Option<string> deliveryEmail = default;
            Option<string> deliveryEmailAddress = default;
            Option<MerchantRiskIndicator.DeliveryTimeframeEnum?> deliveryTimeframe = default;
            Option<Amount> giftCardAmount = default;
            Option<int?> giftCardCount = default;
            Option<string> giftCardCurr = default;
            Option<DateTime?> preOrderDate = default;
            Option<bool?> preOrderPurchase = default;
            Option<string> preOrderPurchaseInd = default;
            Option<bool?> reorderItems = default;
            Option<string> reorderItemsInd = default;
            Option<string> shipIndicator = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addressMatch":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                addressMatch = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "deliveryAddressIndicator":
                            string deliveryAddressIndicatorRawValue = utf8JsonReader.GetString();
                            if (deliveryAddressIndicatorRawValue != null)
                                deliveryAddressIndicator = new Option<MerchantRiskIndicator.DeliveryAddressIndicatorEnum?>(MerchantRiskIndicator.DeliveryAddressIndicatorEnumFromStringOrDefault(deliveryAddressIndicatorRawValue));
                            break;
                        case "deliveryEmail":
                            deliveryEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "deliveryEmailAddress":
                            deliveryEmailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "deliveryTimeframe":
                            string deliveryTimeframeRawValue = utf8JsonReader.GetString();
                            if (deliveryTimeframeRawValue != null)
                                deliveryTimeframe = new Option<MerchantRiskIndicator.DeliveryTimeframeEnum?>(MerchantRiskIndicator.DeliveryTimeframeEnumFromStringOrDefault(deliveryTimeframeRawValue));
                            break;
                        case "giftCardAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                giftCardAmount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "giftCardCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                giftCardCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "giftCardCurr":
                            giftCardCurr = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "preOrderDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                preOrderDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "preOrderPurchase":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                preOrderPurchase = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "preOrderPurchaseInd":
                            preOrderPurchaseInd = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reorderItems":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reorderItems = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "reorderItemsInd":
                            reorderItemsInd = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shipIndicator":
                            shipIndicator = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (addressMatch.IsSet && addressMatch.Value == null)
                throw new ArgumentNullException(nameof(addressMatch), "Property is not nullable for class MerchantRiskIndicator.");

            if (deliveryAddressIndicator.IsSet && deliveryAddressIndicator.Value == null)
                throw new ArgumentNullException(nameof(deliveryAddressIndicator), "Property is not nullable for class MerchantRiskIndicator.");

            if (deliveryEmail.IsSet && deliveryEmail.Value == null)
                throw new ArgumentNullException(nameof(deliveryEmail), "Property is not nullable for class MerchantRiskIndicator.");

            if (deliveryEmailAddress.IsSet && deliveryEmailAddress.Value == null)
                throw new ArgumentNullException(nameof(deliveryEmailAddress), "Property is not nullable for class MerchantRiskIndicator.");

            if (deliveryTimeframe.IsSet && deliveryTimeframe.Value == null)
                throw new ArgumentNullException(nameof(deliveryTimeframe), "Property is not nullable for class MerchantRiskIndicator.");

            if (giftCardAmount.IsSet && giftCardAmount.Value == null)
                throw new ArgumentNullException(nameof(giftCardAmount), "Property is not nullable for class MerchantRiskIndicator.");

            if (giftCardCount.IsSet && giftCardCount.Value == null)
                throw new ArgumentNullException(nameof(giftCardCount), "Property is not nullable for class MerchantRiskIndicator.");

            if (giftCardCurr.IsSet && giftCardCurr.Value == null)
                throw new ArgumentNullException(nameof(giftCardCurr), "Property is not nullable for class MerchantRiskIndicator.");

            if (preOrderDate.IsSet && preOrderDate.Value == null)
                throw new ArgumentNullException(nameof(preOrderDate), "Property is not nullable for class MerchantRiskIndicator.");

            if (preOrderPurchase.IsSet && preOrderPurchase.Value == null)
                throw new ArgumentNullException(nameof(preOrderPurchase), "Property is not nullable for class MerchantRiskIndicator.");

            if (preOrderPurchaseInd.IsSet && preOrderPurchaseInd.Value == null)
                throw new ArgumentNullException(nameof(preOrderPurchaseInd), "Property is not nullable for class MerchantRiskIndicator.");

            if (reorderItems.IsSet && reorderItems.Value == null)
                throw new ArgumentNullException(nameof(reorderItems), "Property is not nullable for class MerchantRiskIndicator.");

            if (reorderItemsInd.IsSet && reorderItemsInd.Value == null)
                throw new ArgumentNullException(nameof(reorderItemsInd), "Property is not nullable for class MerchantRiskIndicator.");

            if (shipIndicator.IsSet && shipIndicator.Value == null)
                throw new ArgumentNullException(nameof(shipIndicator), "Property is not nullable for class MerchantRiskIndicator.");

            return new MerchantRiskIndicator(addressMatch, deliveryAddressIndicator, deliveryEmail, deliveryEmailAddress, deliveryTimeframe, giftCardAmount, giftCardCount, giftCardCurr, preOrderDate, preOrderPurchase, preOrderPurchaseInd, reorderItems, reorderItemsInd, shipIndicator);
        }

        /// <summary>
        /// Serializes a <see cref="MerchantRiskIndicator" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="merchantRiskIndicator"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MerchantRiskIndicator merchantRiskIndicator, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, merchantRiskIndicator, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MerchantRiskIndicator" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="merchantRiskIndicator"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MerchantRiskIndicator merchantRiskIndicator, JsonSerializerOptions jsonSerializerOptions)
        {
            if (merchantRiskIndicator.DeliveryEmailOption.IsSet && merchantRiskIndicator.DeliveryEmail == null)
                throw new ArgumentNullException(nameof(merchantRiskIndicator.DeliveryEmail), "Property is required for class MerchantRiskIndicator.");

            if (merchantRiskIndicator.DeliveryEmailAddressOption.IsSet && merchantRiskIndicator.DeliveryEmailAddress == null)
                throw new ArgumentNullException(nameof(merchantRiskIndicator.DeliveryEmailAddress), "Property is required for class MerchantRiskIndicator.");

            if (merchantRiskIndicator.GiftCardAmountOption.IsSet && merchantRiskIndicator.GiftCardAmount == null)
                throw new ArgumentNullException(nameof(merchantRiskIndicator.GiftCardAmount), "Property is required for class MerchantRiskIndicator.");

            if (merchantRiskIndicator.GiftCardCurrOption.IsSet && merchantRiskIndicator.GiftCardCurr == null)
                throw new ArgumentNullException(nameof(merchantRiskIndicator.GiftCardCurr), "Property is required for class MerchantRiskIndicator.");

            if (merchantRiskIndicator.PreOrderPurchaseIndOption.IsSet && merchantRiskIndicator.PreOrderPurchaseInd == null)
                throw new ArgumentNullException(nameof(merchantRiskIndicator.PreOrderPurchaseInd), "Property is required for class MerchantRiskIndicator.");

            if (merchantRiskIndicator.ReorderItemsIndOption.IsSet && merchantRiskIndicator.ReorderItemsInd == null)
                throw new ArgumentNullException(nameof(merchantRiskIndicator.ReorderItemsInd), "Property is required for class MerchantRiskIndicator.");

            if (merchantRiskIndicator.ShipIndicatorOption.IsSet && merchantRiskIndicator.ShipIndicator == null)
                throw new ArgumentNullException(nameof(merchantRiskIndicator.ShipIndicator), "Property is required for class MerchantRiskIndicator.");

            if (merchantRiskIndicator.AddressMatchOption.IsSet)
                writer.WriteBoolean("addressMatch", merchantRiskIndicator.AddressMatchOption.Value.Value);

            var deliveryAddressIndicatorRawValue = MerchantRiskIndicator.DeliveryAddressIndicatorEnumToJsonValue(merchantRiskIndicator.DeliveryAddressIndicatorOption.Value.Value);
            writer.WriteString("deliveryAddressIndicator", deliveryAddressIndicatorRawValue);
            if (merchantRiskIndicator.DeliveryEmailOption.IsSet)
                writer.WriteString("deliveryEmail", merchantRiskIndicator.DeliveryEmail);

            if (merchantRiskIndicator.DeliveryEmailAddressOption.IsSet)
                writer.WriteString("deliveryEmailAddress", merchantRiskIndicator.DeliveryEmailAddress);

            var deliveryTimeframeRawValue = MerchantRiskIndicator.DeliveryTimeframeEnumToJsonValue(merchantRiskIndicator.DeliveryTimeframeOption.Value.Value);
            writer.WriteString("deliveryTimeframe", deliveryTimeframeRawValue);
            if (merchantRiskIndicator.GiftCardAmountOption.IsSet)
            {
                writer.WritePropertyName("giftCardAmount");
                JsonSerializer.Serialize(writer, merchantRiskIndicator.GiftCardAmount, jsonSerializerOptions);
            }
            if (merchantRiskIndicator.GiftCardCountOption.IsSet)
                writer.WriteNumber("giftCardCount", merchantRiskIndicator.GiftCardCountOption.Value.Value);

            if (merchantRiskIndicator.GiftCardCurrOption.IsSet)
                writer.WriteString("giftCardCurr", merchantRiskIndicator.GiftCardCurr);

            if (merchantRiskIndicator.PreOrderDateOption.IsSet)
                writer.WriteString("preOrderDate", merchantRiskIndicator.PreOrderDateOption.Value.Value.ToString(PreOrderDateFormat));

            if (merchantRiskIndicator.PreOrderPurchaseOption.IsSet)
                writer.WriteBoolean("preOrderPurchase", merchantRiskIndicator.PreOrderPurchaseOption.Value.Value);

            if (merchantRiskIndicator.PreOrderPurchaseIndOption.IsSet)
                writer.WriteString("preOrderPurchaseInd", merchantRiskIndicator.PreOrderPurchaseInd);

            if (merchantRiskIndicator.ReorderItemsOption.IsSet)
                writer.WriteBoolean("reorderItems", merchantRiskIndicator.ReorderItemsOption.Value.Value);

            if (merchantRiskIndicator.ReorderItemsIndOption.IsSet)
                writer.WriteString("reorderItemsInd", merchantRiskIndicator.ReorderItemsInd);

            if (merchantRiskIndicator.ShipIndicatorOption.IsSet)
                writer.WriteString("shipIndicator", merchantRiskIndicator.ShipIndicator);
        }
    }
}
