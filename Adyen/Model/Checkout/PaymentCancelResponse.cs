// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PaymentCancelResponse
    /// </summary>
    public partial class PaymentCancelResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCancelResponse" /> class.
        /// </summary>
        /// <param name="merchantAccount">The merchant account that is used to process the payment.</param>
        /// <param name="paymentPspReference">The [&#x60;pspReference&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to cancel. </param>
        /// <param name="pspReference">Adyen&#39;s 16-character reference associated with the cancel request.</param>
        /// <param name="status">The status of your request. This will always have the value **received**.</param>
        /// <param name="reference">Your reference for the cancel request.</param>
        [JsonConstructor]
        public PaymentCancelResponse(string merchantAccount, string paymentPspReference, string pspReference, StatusEnum status, Option<string> reference = default)
        {
            MerchantAccount = merchantAccount;
            PaymentPspReference = paymentPspReference;
            PspReference = pspReference;
            Status = status;
            ReferenceOption = reference;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The status of your request. This will always have the value **received**.
        /// </summary>
        /// <value>The status of your request. This will always have the value **received**.</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Received for value: received
            /// </summary>
            Received = 1
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("received"))
                return StatusEnum.Received;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("received"))
                return StatusEnum.Received;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Received)
                return "received";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The status of your request. This will always have the value **received**.
        /// </summary>
        /// <value>The status of your request. This will always have the value **received**.</value>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// The merchant account that is used to process the payment.
        /// </summary>
        /// <value>The merchant account that is used to process the payment.</value>
        [JsonPropertyName("merchantAccount")]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// The [&#x60;pspReference&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to cancel. 
        /// </summary>
        /// <value>The [&#x60;pspReference&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to cancel. </value>
        [JsonPropertyName("paymentPspReference")]
        public string PaymentPspReference { get; set; }

        /// <summary>
        /// Adyen&#39;s 16-character reference associated with the cancel request.
        /// </summary>
        /// <value>Adyen&#39;s 16-character reference associated with the cancel request.</value>
        [JsonPropertyName("pspReference")]
        public string PspReference { get; set; }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Your reference for the cancel request.
        /// </summary>
        /// <value>Your reference for the cancel request.</value>
        [JsonPropertyName("reference")]
        public string Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentCancelResponse {\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  PaymentPspReference: ").Append(PaymentPspReference).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentCancelResponse" />
    /// </summary>
    public class PaymentCancelResponseJsonConverter : JsonConverter<PaymentCancelResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentCancelResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentCancelResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> merchantAccount = default;
            Option<string> paymentPspReference = default;
            Option<string> pspReference = default;
            Option<PaymentCancelResponse.StatusEnum?> status = default;
            Option<string> reference = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "merchantAccount":
                            merchantAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentPspReference":
                            paymentPspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "pspReference":
                            pspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<PaymentCancelResponse.StatusEnum?>(PaymentCancelResponse.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!merchantAccount.IsSet)
                throw new ArgumentException("Property is required for class PaymentCancelResponse.", nameof(merchantAccount));

            if (!paymentPspReference.IsSet)
                throw new ArgumentException("Property is required for class PaymentCancelResponse.", nameof(paymentPspReference));

            if (!pspReference.IsSet)
                throw new ArgumentException("Property is required for class PaymentCancelResponse.", nameof(pspReference));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class PaymentCancelResponse.", nameof(status));

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount), "Property is not nullable for class PaymentCancelResponse.");

            if (paymentPspReference.IsSet && paymentPspReference.Value == null)
                throw new ArgumentNullException(nameof(paymentPspReference), "Property is not nullable for class PaymentCancelResponse.");

            if (pspReference.IsSet && pspReference.Value == null)
                throw new ArgumentNullException(nameof(pspReference), "Property is not nullable for class PaymentCancelResponse.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class PaymentCancelResponse.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class PaymentCancelResponse.");

            return new PaymentCancelResponse(merchantAccount.Value, paymentPspReference.Value, pspReference.Value, status.Value.Value, reference);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentCancelResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentCancelResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentCancelResponse paymentCancelResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentCancelResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentCancelResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentCancelResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentCancelResponse paymentCancelResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentCancelResponse.MerchantAccount == null)
                throw new ArgumentNullException(nameof(paymentCancelResponse.MerchantAccount), "Property is required for class PaymentCancelResponse.");

            if (paymentCancelResponse.PaymentPspReference == null)
                throw new ArgumentNullException(nameof(paymentCancelResponse.PaymentPspReference), "Property is required for class PaymentCancelResponse.");

            if (paymentCancelResponse.PspReference == null)
                throw new ArgumentNullException(nameof(paymentCancelResponse.PspReference), "Property is required for class PaymentCancelResponse.");

            if (paymentCancelResponse.ReferenceOption.IsSet && paymentCancelResponse.Reference == null)
                throw new ArgumentNullException(nameof(paymentCancelResponse.Reference), "Property is required for class PaymentCancelResponse.");

            writer.WriteString("merchantAccount", paymentCancelResponse.MerchantAccount);

            writer.WriteString("paymentPspReference", paymentCancelResponse.PaymentPspReference);

            writer.WriteString("pspReference", paymentCancelResponse.PspReference);

            var statusRawValue = PaymentCancelResponse.StatusEnumToJsonValue(paymentCancelResponse.Status);
            writer.WriteString("status", statusRawValue);
            if (paymentCancelResponse.ReferenceOption.IsSet)
                writer.WriteString("reference", paymentCancelResponse.Reference);
        }
    }
}
