// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Passenger
    /// </summary>
    public partial class Passenger : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Passenger" /> class.
        /// </summary>
        /// <param name="dateOfBirth">The passenger&#39;s date of birth. * Format &#x60;yyyy-MM-dd&#x60; * minLength: 10 * maxLength: 10</param>
        /// <param name="firstName">The passenger&#39;s first name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII</param>
        /// <param name="lastName">The passenger&#39;s last name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII</param>
        /// <param name="phoneNumber">The passenger&#39;s phone number, including country code. This is an alphanumeric field that can include the &#39;+&#39; and &#39;-&#39; signs. * Encoding: ASCII * minLength: 3 characters * maxLength: 30 characters</param>
        /// <param name="travellerType">The IATA passenger type code (PTC). * Encoding: ASCII * minLength: 3 characters * maxLength: 6 characters</param>
        [JsonConstructor]
        public Passenger(Option<DateTime?> dateOfBirth = default, Option<string> firstName = default, Option<string> lastName = default, Option<string> phoneNumber = default, Option<string> travellerType = default)
        {
            DateOfBirthOption = dateOfBirth;
            FirstNameOption = firstName;
            LastNameOption = lastName;
            PhoneNumberOption = phoneNumber;
            TravellerTypeOption = travellerType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DateOfBirth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateOfBirthOption { get; private set; }

        /// <summary>
        /// The passenger&#39;s date of birth. * Format &#x60;yyyy-MM-dd&#x60; * minLength: 10 * maxLength: 10
        /// </summary>
        /// <value>The passenger&#39;s date of birth. * Format &#x60;yyyy-MM-dd&#x60; * minLength: 10 * maxLength: 10</value>
        [JsonPropertyName("dateOfBirth")]
        public DateTime? DateOfBirth { get { return this.DateOfBirthOption; } set { this.DateOfBirthOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FirstNameOption { get; private set; }

        /// <summary>
        /// The passenger&#39;s first name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII
        /// </summary>
        /// <value>The passenger&#39;s first name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII</value>
        [JsonPropertyName("firstName")]
        public string FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastNameOption { get; private set; }

        /// <summary>
        /// The passenger&#39;s last name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII
        /// </summary>
        /// <value>The passenger&#39;s last name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII</value>
        [JsonPropertyName("lastName")]
        public string LastName { get { return this.LastNameOption; } set { this.LastNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneNumberOption { get; private set; }

        /// <summary>
        /// The passenger&#39;s phone number, including country code. This is an alphanumeric field that can include the &#39;+&#39; and &#39;-&#39; signs. * Encoding: ASCII * minLength: 3 characters * maxLength: 30 characters
        /// </summary>
        /// <value>The passenger&#39;s phone number, including country code. This is an alphanumeric field that can include the &#39;+&#39; and &#39;-&#39; signs. * Encoding: ASCII * minLength: 3 characters * maxLength: 30 characters</value>
        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get { return this.PhoneNumberOption; } set { this.PhoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TravellerType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TravellerTypeOption { get; private set; }

        /// <summary>
        /// The IATA passenger type code (PTC). * Encoding: ASCII * minLength: 3 characters * maxLength: 6 characters
        /// </summary>
        /// <value>The IATA passenger type code (PTC). * Encoding: ASCII * minLength: 3 characters * maxLength: 6 characters</value>
        [JsonPropertyName("travellerType")]
        public string TravellerType { get { return this.TravellerTypeOption; } set { this.TravellerTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Passenger {\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  TravellerType: ").Append(TravellerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Passenger" />
    /// </summary>
    public class PassengerJsonConverter : JsonConverter<Passenger>
    {
        /// <summary>
        /// The format to use to serialize DateOfBirth
        /// </summary>
        public static string DateOfBirthFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="Passenger" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Passenger Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> dateOfBirth = default;
            Option<string> firstName = default;
            Option<string> lastName = default;
            Option<string> phoneNumber = default;
            Option<string> travellerType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dateOfBirth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateOfBirth = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "firstName":
                            firstName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lastName":
                            lastName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phoneNumber":
                            phoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "travellerType":
                            travellerType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (dateOfBirth.IsSet && dateOfBirth.Value == null)
                throw new ArgumentNullException(nameof(dateOfBirth), "Property is not nullable for class Passenger.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class Passenger.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class Passenger.");

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber), "Property is not nullable for class Passenger.");

            if (travellerType.IsSet && travellerType.Value == null)
                throw new ArgumentNullException(nameof(travellerType), "Property is not nullable for class Passenger.");

            return new Passenger(dateOfBirth, firstName, lastName, phoneNumber, travellerType);
        }

        /// <summary>
        /// Serializes a <see cref="Passenger" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="passenger"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Passenger passenger, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, passenger, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Passenger" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="passenger"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Passenger passenger, JsonSerializerOptions jsonSerializerOptions)
        {
            if (passenger.FirstNameOption.IsSet && passenger.FirstName == null)
                throw new ArgumentNullException(nameof(passenger.FirstName), "Property is required for class Passenger.");

            if (passenger.LastNameOption.IsSet && passenger.LastName == null)
                throw new ArgumentNullException(nameof(passenger.LastName), "Property is required for class Passenger.");

            if (passenger.PhoneNumberOption.IsSet && passenger.PhoneNumber == null)
                throw new ArgumentNullException(nameof(passenger.PhoneNumber), "Property is required for class Passenger.");

            if (passenger.TravellerTypeOption.IsSet && passenger.TravellerType == null)
                throw new ArgumentNullException(nameof(passenger.TravellerType), "Property is required for class Passenger.");

            if (passenger.DateOfBirthOption.IsSet)
                writer.WriteString("dateOfBirth", passenger.DateOfBirthOption.Value.Value.ToString(DateOfBirthFormat));

            if (passenger.FirstNameOption.IsSet)
                writer.WriteString("firstName", passenger.FirstName);

            if (passenger.LastNameOption.IsSet)
                writer.WriteString("lastName", passenger.LastName);

            if (passenger.PhoneNumberOption.IsSet)
                writer.WriteString("phoneNumber", passenger.PhoneNumber);

            if (passenger.TravellerTypeOption.IsSet)
                writer.WriteString("travellerType", passenger.TravellerType);
        }
    }
}
