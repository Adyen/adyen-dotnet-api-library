// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// CardDetailsRequest
    /// </summary>
    public partial class CardDetailsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardDetailsRequest" /> class.
        /// </summary>
        /// <param name="cardNumber">A minimum of the first eight digits of the card number. The full card number gives the best result.   You must be [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide) to collect raw card data. Alternatively, you can use the &#x60;encryptedCardNumber&#x60; field.</param>
        /// <param name="merchantAccount">The merchant account identifier, with which you want to process the transaction.</param>
        /// <param name="countryCode">The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE</param>
        /// <param name="encryptedCardNumber">The encrypted card number.</param>
        /// <param name="supportedBrands">The card brands you support. This is the [&#x60;brands&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods__resParam_paymentMethods-brands) array from your [&#x60;/paymentMethods&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.   If not included, our API uses the ones configured for your merchant account and, if provided, the country code.</param>
        [JsonConstructor]
        public CardDetailsRequest(string cardNumber, string merchantAccount, Option<string> countryCode = default, Option<string> encryptedCardNumber = default, Option<List<string>> supportedBrands = default)
        {
            CardNumber = cardNumber;
            MerchantAccount = merchantAccount;
            CountryCodeOption = countryCode;
            EncryptedCardNumberOption = encryptedCardNumber;
            SupportedBrandsOption = supportedBrands;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A minimum of the first eight digits of the card number. The full card number gives the best result.   You must be [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide) to collect raw card data. Alternatively, you can use the &#x60;encryptedCardNumber&#x60; field.
        /// </summary>
        /// <value>A minimum of the first eight digits of the card number. The full card number gives the best result.   You must be [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide) to collect raw card data. Alternatively, you can use the &#x60;encryptedCardNumber&#x60; field.</value>
        [JsonPropertyName("cardNumber")]
        public string CardNumber { get; set; }

        /// <summary>
        /// The merchant account identifier, with which you want to process the transaction.
        /// </summary>
        /// <value>The merchant account identifier, with which you want to process the transaction.</value>
        [JsonPropertyName("merchantAccount")]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryCodeOption { get; private set; }

        /// <summary>
        /// The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE
        /// </summary>
        /// <value>The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE</value>
        [JsonPropertyName("countryCode")]
        public string CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EncryptedCardNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EncryptedCardNumberOption { get; private set; }

        /// <summary>
        /// The encrypted card number.
        /// </summary>
        /// <value>The encrypted card number.</value>
        [JsonPropertyName("encryptedCardNumber")]
        public string EncryptedCardNumber { get { return this.EncryptedCardNumberOption; } set { this.EncryptedCardNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SupportedBrands
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> SupportedBrandsOption { get; private set; }

        /// <summary>
        /// The card brands you support. This is the [&#x60;brands&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods__resParam_paymentMethods-brands) array from your [&#x60;/paymentMethods&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.   If not included, our API uses the ones configured for your merchant account and, if provided, the country code.
        /// </summary>
        /// <value>The card brands you support. This is the [&#x60;brands&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods__resParam_paymentMethods-brands) array from your [&#x60;/paymentMethods&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.   If not included, our API uses the ones configured for your merchant account and, if provided, the country code.</value>
        [JsonPropertyName("supportedBrands")]
        public List<string> SupportedBrands { get { return this.SupportedBrandsOption; } set { this.SupportedBrandsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardDetailsRequest {\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  EncryptedCardNumber: ").Append(EncryptedCardNumber).Append("\n");
            sb.Append("  SupportedBrands: ").Append(SupportedBrands).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EncryptedCardNumber (string) maxLength
            if (this.EncryptedCardNumber != null && this.EncryptedCardNumber.Length > 15000)
            {
                yield return new ValidationResult("Invalid value for EncryptedCardNumber, length must be less than 15000.", new [] { "EncryptedCardNumber" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CardDetailsRequest" />
    /// </summary>
    public class CardDetailsRequestJsonConverter : JsonConverter<CardDetailsRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CardDetailsRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CardDetailsRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> cardNumber = default;
            Option<string> merchantAccount = default;
            Option<string> countryCode = default;
            Option<string> encryptedCardNumber = default;
            Option<List<string>> supportedBrands = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cardNumber":
                            cardNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantAccount":
                            merchantAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "countryCode":
                            countryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "encryptedCardNumber":
                            encryptedCardNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "supportedBrands":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supportedBrands = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!cardNumber.IsSet)
                throw new ArgumentException("Property is required for class CardDetailsRequest.", nameof(cardNumber));

            if (!merchantAccount.IsSet)
                throw new ArgumentException("Property is required for class CardDetailsRequest.", nameof(merchantAccount));

            if (cardNumber.IsSet && cardNumber.Value == null)
                throw new ArgumentNullException(nameof(cardNumber), "Property is not nullable for class CardDetailsRequest.");

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount), "Property is not nullable for class CardDetailsRequest.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class CardDetailsRequest.");

            if (encryptedCardNumber.IsSet && encryptedCardNumber.Value == null)
                throw new ArgumentNullException(nameof(encryptedCardNumber), "Property is not nullable for class CardDetailsRequest.");

            if (supportedBrands.IsSet && supportedBrands.Value == null)
                throw new ArgumentNullException(nameof(supportedBrands), "Property is not nullable for class CardDetailsRequest.");

            return new CardDetailsRequest(cardNumber.Value, merchantAccount.Value, countryCode, encryptedCardNumber, supportedBrands);
        }

        /// <summary>
        /// Serializes a <see cref="CardDetailsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cardDetailsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CardDetailsRequest cardDetailsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cardDetailsRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CardDetailsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cardDetailsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CardDetailsRequest cardDetailsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cardDetailsRequest.CardNumber == null)
                throw new ArgumentNullException(nameof(cardDetailsRequest.CardNumber), "Property is required for class CardDetailsRequest.");

            if (cardDetailsRequest.MerchantAccount == null)
                throw new ArgumentNullException(nameof(cardDetailsRequest.MerchantAccount), "Property is required for class CardDetailsRequest.");

            if (cardDetailsRequest.CountryCodeOption.IsSet && cardDetailsRequest.CountryCode == null)
                throw new ArgumentNullException(nameof(cardDetailsRequest.CountryCode), "Property is required for class CardDetailsRequest.");

            if (cardDetailsRequest.EncryptedCardNumberOption.IsSet && cardDetailsRequest.EncryptedCardNumber == null)
                throw new ArgumentNullException(nameof(cardDetailsRequest.EncryptedCardNumber), "Property is required for class CardDetailsRequest.");

            if (cardDetailsRequest.SupportedBrandsOption.IsSet && cardDetailsRequest.SupportedBrands == null)
                throw new ArgumentNullException(nameof(cardDetailsRequest.SupportedBrands), "Property is required for class CardDetailsRequest.");

            writer.WriteString("cardNumber", cardDetailsRequest.CardNumber);

            writer.WriteString("merchantAccount", cardDetailsRequest.MerchantAccount);

            if (cardDetailsRequest.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", cardDetailsRequest.CountryCode);

            if (cardDetailsRequest.EncryptedCardNumberOption.IsSet)
                writer.WriteString("encryptedCardNumber", cardDetailsRequest.EncryptedCardNumber);

            if (cardDetailsRequest.SupportedBrandsOption.IsSet)
            {
                writer.WritePropertyName("supportedBrands");
                JsonSerializer.Serialize(writer, cardDetailsRequest.SupportedBrands, jsonSerializerOptions);
            }
        }
    }
}
