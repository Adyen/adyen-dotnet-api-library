// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Donation
    /// </summary>
    public partial class Donation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Donation" /> class.
        /// </summary>
        /// <param name="currency">The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes/).</param>
        /// <param name="donationType">The [type of donation](https://docs.adyen.com/online-payments/donations/#donation-types).  Possible values: * **roundup**: a donation where the original transaction amount is rounded up as a donation. * **fixedAmounts**: a donation where you show fixed donations amounts that the shopper can select from.</param>
        /// <param name="type">The [type of donation](https://docs.adyen.com/online-payments/donations/#donation-types).  Possible values: * **roundup**: a donation where the original transaction amount is rounded up as a donation. * **fixedAmounts**: a donation where you show fixed donation amounts that the shopper can select from.</param>
        /// <param name="maxRoundupAmount">The maximum amount a transaction can be rounded up to make a donation. This field is only present when &#x60;donationType&#x60; is **roundup**.</param>
        /// <param name="values">The fixed donation amounts in [minor units](https://docs.adyen.com/development-resources/currency-codes//#minor-units). This field is only present when &#x60;donationType&#x60; is **fixedAmounts**.</param>
        [JsonConstructor]
        public Donation(string currency, string donationType, string type, Option<long?> maxRoundupAmount = default, Option<List<long>> values = default)
        {
            Currency = currency;
            DonationType = donationType;
            Type = type;
            MaxRoundupAmountOption = maxRoundupAmount;
            ValuesOption = values;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes/).
        /// </summary>
        /// <value>The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes/).</value>
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// The [type of donation](https://docs.adyen.com/online-payments/donations/#donation-types).  Possible values: * **roundup**: a donation where the original transaction amount is rounded up as a donation. * **fixedAmounts**: a donation where you show fixed donations amounts that the shopper can select from.
        /// </summary>
        /// <value>The [type of donation](https://docs.adyen.com/online-payments/donations/#donation-types).  Possible values: * **roundup**: a donation where the original transaction amount is rounded up as a donation. * **fixedAmounts**: a donation where you show fixed donations amounts that the shopper can select from.</value>
        [JsonPropertyName("donationType")]
        public string DonationType { get; set; }

        /// <summary>
        /// The [type of donation](https://docs.adyen.com/online-payments/donations/#donation-types).  Possible values: * **roundup**: a donation where the original transaction amount is rounded up as a donation. * **fixedAmounts**: a donation where you show fixed donation amounts that the shopper can select from.
        /// </summary>
        /// <value>The [type of donation](https://docs.adyen.com/online-payments/donations/#donation-types).  Possible values: * **roundup**: a donation where the original transaction amount is rounded up as a donation. * **fixedAmounts**: a donation where you show fixed donation amounts that the shopper can select from.</value>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Used to track the state of MaxRoundupAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MaxRoundupAmountOption { get; private set; }

        /// <summary>
        /// The maximum amount a transaction can be rounded up to make a donation. This field is only present when &#x60;donationType&#x60; is **roundup**.
        /// </summary>
        /// <value>The maximum amount a transaction can be rounded up to make a donation. This field is only present when &#x60;donationType&#x60; is **roundup**.</value>
        [JsonPropertyName("maxRoundupAmount")]
        public long? MaxRoundupAmount { get { return this.MaxRoundupAmountOption; } set { this.MaxRoundupAmountOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Values
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>> ValuesOption { get; private set; }

        /// <summary>
        /// The fixed donation amounts in [minor units](https://docs.adyen.com/development-resources/currency-codes//#minor-units). This field is only present when &#x60;donationType&#x60; is **fixedAmounts**.
        /// </summary>
        /// <value>The fixed donation amounts in [minor units](https://docs.adyen.com/development-resources/currency-codes//#minor-units). This field is only present when &#x60;donationType&#x60; is **fixedAmounts**.</value>
        [JsonPropertyName("values")]
        public List<long> Values { get { return this.ValuesOption; } set { this.ValuesOption = new Option<List<long>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Donation {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DonationType: ").Append(DonationType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MaxRoundupAmount: ").Append(MaxRoundupAmount).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Donation" />
    /// </summary>
    public class DonationJsonConverter : JsonConverter<Donation>
    {
        /// <summary>
        /// Deserializes json to <see cref="Donation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Donation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> currency = default;
            Option<string> donationType = default;
            Option<string> type = default;
            Option<long?> maxRoundupAmount = default;
            Option<List<long>> values = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "currency":
                            currency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "donationType":
                            donationType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "maxRoundupAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxRoundupAmount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "values":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                values = new Option<List<long>>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!currency.IsSet)
                throw new ArgumentException("Property is required for class Donation.", nameof(currency));

            if (!donationType.IsSet)
                throw new ArgumentException("Property is required for class Donation.", nameof(donationType));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Donation.", nameof(type));

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class Donation.");

            if (donationType.IsSet && donationType.Value == null)
                throw new ArgumentNullException(nameof(donationType), "Property is not nullable for class Donation.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Donation.");

            if (maxRoundupAmount.IsSet && maxRoundupAmount.Value == null)
                throw new ArgumentNullException(nameof(maxRoundupAmount), "Property is not nullable for class Donation.");

            if (values.IsSet && values.Value == null)
                throw new ArgumentNullException(nameof(values), "Property is not nullable for class Donation.");

            return new Donation(currency.Value, donationType.Value, type.Value, maxRoundupAmount, values);
        }

        /// <summary>
        /// Serializes a <see cref="Donation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="donation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Donation donation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, donation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Donation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="donation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Donation donation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (donation.Currency == null)
                throw new ArgumentNullException(nameof(donation.Currency), "Property is required for class Donation.");

            if (donation.DonationType == null)
                throw new ArgumentNullException(nameof(donation.DonationType), "Property is required for class Donation.");

            if (donation.Type == null)
                throw new ArgumentNullException(nameof(donation.Type), "Property is required for class Donation.");

            if (donation.ValuesOption.IsSet && donation.Values == null)
                throw new ArgumentNullException(nameof(donation.Values), "Property is required for class Donation.");

            writer.WriteString("currency", donation.Currency);

            writer.WriteString("donationType", donation.DonationType);

            writer.WriteString("type", donation.Type);

            if (donation.MaxRoundupAmountOption.IsSet)
                writer.WriteNumber("maxRoundupAmount", donation.MaxRoundupAmountOption.Value.Value);

            if (donation.ValuesOption.IsSet)
            {
                writer.WritePropertyName("values");
                JsonSerializer.Serialize(writer, donation.Values, jsonSerializerOptions);
            }
        }
    }
}
