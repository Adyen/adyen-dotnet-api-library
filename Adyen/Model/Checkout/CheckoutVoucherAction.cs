// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// CheckoutVoucherAction
    /// </summary>
    public partial class CheckoutVoucherAction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutVoucherAction" /> class.
        /// </summary>
        /// <param name="type">**voucher**</param>
        /// <param name="alternativeReference">The voucher alternative reference code.</param>
        /// <param name="collectionInstitutionNumber">A collection institution number (store number) for Econtext Pay-Easy ATM.</param>
        /// <param name="downloadUrl">The URL to download the voucher.</param>
        /// <param name="entity">An entity number of Multibanco.</param>
        /// <param name="expiresAt">The date time of the voucher expiry.</param>
        /// <param name="initialAmount">initialAmount</param>
        /// <param name="instructionsUrl">The URL to the detailed instructions to make payment using the voucher.</param>
        /// <param name="issuer">The issuer of the voucher.</param>
        /// <param name="maskedTelephoneNumber">The shopper telephone number (partially masked).</param>
        /// <param name="merchantName">The merchant name.</param>
        /// <param name="merchantReference">The merchant reference.</param>
        /// <param name="passCreationToken">A Base64-encoded token containing all properties of the voucher. For iOS, you can use this to pass a voucher to Apple Wallet.</param>
        /// <param name="paymentData">Encoded payment data.</param>
        /// <param name="paymentMethodType">Specifies the payment method.</param>
        /// <param name="reference">The voucher reference code.</param>
        /// <param name="shopperEmail">The shopper email.</param>
        /// <param name="shopperName">The shopper name.</param>
        /// <param name="surcharge">surcharge</param>
        /// <param name="totalAmount">totalAmount</param>
        /// <param name="url">Specifies the URL to redirect to.</param>
        [JsonConstructor]
        public CheckoutVoucherAction(TypeEnum type, Option<string> alternativeReference = default, Option<string> collectionInstitutionNumber = default, Option<string> downloadUrl = default, Option<string> entity = default, Option<string> expiresAt = default, Option<Amount> initialAmount = default, Option<string> instructionsUrl = default, Option<string> issuer = default, Option<string> maskedTelephoneNumber = default, Option<string> merchantName = default, Option<string> merchantReference = default, Option<string> passCreationToken = default, Option<string> paymentData = default, Option<string> paymentMethodType = default, Option<string> reference = default, Option<string> shopperEmail = default, Option<string> shopperName = default, Option<Amount> surcharge = default, Option<Amount> totalAmount = default, Option<string> url = default)
        {
            Type = type;
            AlternativeReferenceOption = alternativeReference;
            CollectionInstitutionNumberOption = collectionInstitutionNumber;
            DownloadUrlOption = downloadUrl;
            EntityOption = entity;
            ExpiresAtOption = expiresAt;
            InitialAmountOption = initialAmount;
            InstructionsUrlOption = instructionsUrl;
            IssuerOption = issuer;
            MaskedTelephoneNumberOption = maskedTelephoneNumber;
            MerchantNameOption = merchantName;
            MerchantReferenceOption = merchantReference;
            PassCreationTokenOption = passCreationToken;
            PaymentDataOption = paymentData;
            PaymentMethodTypeOption = paymentMethodType;
            ReferenceOption = reference;
            ShopperEmailOption = shopperEmail;
            ShopperNameOption = shopperName;
            SurchargeOption = surcharge;
            TotalAmountOption = totalAmount;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// **voucher**
        /// </summary>
        /// <value>**voucher**</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Voucher for value: voucher
            /// </summary>
            Voucher = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("voucher"))
                return TypeEnum.Voucher;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("voucher"))
                return TypeEnum.Voucher;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Voucher)
                return "voucher";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// **voucher**
        /// </summary>
        /// <value>**voucher**</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Used to track the state of AlternativeReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AlternativeReferenceOption { get; private set; }

        /// <summary>
        /// The voucher alternative reference code.
        /// </summary>
        /// <value>The voucher alternative reference code.</value>
        [JsonPropertyName("alternativeReference")]
        public string AlternativeReference { get { return this.AlternativeReferenceOption; } set { this.AlternativeReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CollectionInstitutionNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CollectionInstitutionNumberOption { get; private set; }

        /// <summary>
        /// A collection institution number (store number) for Econtext Pay-Easy ATM.
        /// </summary>
        /// <value>A collection institution number (store number) for Econtext Pay-Easy ATM.</value>
        [JsonPropertyName("collectionInstitutionNumber")]
        public string CollectionInstitutionNumber { get { return this.CollectionInstitutionNumberOption; } set { this.CollectionInstitutionNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DownloadUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DownloadUrlOption { get; private set; }

        /// <summary>
        /// The URL to download the voucher.
        /// </summary>
        /// <value>The URL to download the voucher.</value>
        [JsonPropertyName("downloadUrl")]
        public string DownloadUrl { get { return this.DownloadUrlOption; } set { this.DownloadUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Entity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EntityOption { get; private set; }

        /// <summary>
        /// An entity number of Multibanco.
        /// </summary>
        /// <value>An entity number of Multibanco.</value>
        [JsonPropertyName("entity")]
        public string Entity { get { return this.EntityOption; } set { this.EntityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpiresAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExpiresAtOption { get; private set; }

        /// <summary>
        /// The date time of the voucher expiry.
        /// </summary>
        /// <value>The date time of the voucher expiry.</value>
        [JsonPropertyName("expiresAt")]
        public string ExpiresAt { get { return this.ExpiresAtOption; } set { this.ExpiresAtOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InitialAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> InitialAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets InitialAmount
        /// </summary>
        [JsonPropertyName("initialAmount")]
        public Amount InitialAmount { get { return this.InitialAmountOption; } set { this.InitialAmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of InstructionsUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstructionsUrlOption { get; private set; }

        /// <summary>
        /// The URL to the detailed instructions to make payment using the voucher.
        /// </summary>
        /// <value>The URL to the detailed instructions to make payment using the voucher.</value>
        [JsonPropertyName("instructionsUrl")]
        public string InstructionsUrl { get { return this.InstructionsUrlOption; } set { this.InstructionsUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Issuer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IssuerOption { get; private set; }

        /// <summary>
        /// The issuer of the voucher.
        /// </summary>
        /// <value>The issuer of the voucher.</value>
        [JsonPropertyName("issuer")]
        public string Issuer { get { return this.IssuerOption; } set { this.IssuerOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MaskedTelephoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MaskedTelephoneNumberOption { get; private set; }

        /// <summary>
        /// The shopper telephone number (partially masked).
        /// </summary>
        /// <value>The shopper telephone number (partially masked).</value>
        [JsonPropertyName("maskedTelephoneNumber")]
        public string MaskedTelephoneNumber { get { return this.MaskedTelephoneNumberOption; } set { this.MaskedTelephoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MerchantName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MerchantNameOption { get; private set; }

        /// <summary>
        /// The merchant name.
        /// </summary>
        /// <value>The merchant name.</value>
        [JsonPropertyName("merchantName")]
        public string MerchantName { get { return this.MerchantNameOption; } set { this.MerchantNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MerchantReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MerchantReferenceOption { get; private set; }

        /// <summary>
        /// The merchant reference.
        /// </summary>
        /// <value>The merchant reference.</value>
        [JsonPropertyName("merchantReference")]
        public string MerchantReference { get { return this.MerchantReferenceOption; } set { this.MerchantReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PassCreationToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PassCreationTokenOption { get; private set; }

        /// <summary>
        /// A Base64-encoded token containing all properties of the voucher. For iOS, you can use this to pass a voucher to Apple Wallet.
        /// </summary>
        /// <value>A Base64-encoded token containing all properties of the voucher. For iOS, you can use this to pass a voucher to Apple Wallet.</value>
        [JsonPropertyName("passCreationToken")]
        public string PassCreationToken { get { return this.PassCreationTokenOption; } set { this.PassCreationTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentDataOption { get; private set; }

        /// <summary>
        /// Encoded payment data.
        /// </summary>
        /// <value>Encoded payment data.</value>
        [JsonPropertyName("paymentData")]
        public string PaymentData { get { return this.PaymentDataOption; } set { this.PaymentDataOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethodType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentMethodTypeOption { get; private set; }

        /// <summary>
        /// Specifies the payment method.
        /// </summary>
        /// <value>Specifies the payment method.</value>
        [JsonPropertyName("paymentMethodType")]
        public string PaymentMethodType { get { return this.PaymentMethodTypeOption; } set { this.PaymentMethodTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// The voucher reference code.
        /// </summary>
        /// <value>The voucher reference code.</value>
        [JsonPropertyName("reference")]
        public string Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperEmailOption { get; private set; }

        /// <summary>
        /// The shopper email.
        /// </summary>
        /// <value>The shopper email.</value>
        [JsonPropertyName("shopperEmail")]
        public string ShopperEmail { get { return this.ShopperEmailOption; } set { this.ShopperEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperNameOption { get; private set; }

        /// <summary>
        /// The shopper name.
        /// </summary>
        /// <value>The shopper name.</value>
        [JsonPropertyName("shopperName")]
        public string ShopperName { get { return this.ShopperNameOption; } set { this.ShopperNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Surcharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> SurchargeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Surcharge
        /// </summary>
        [JsonPropertyName("surcharge")]
        public Amount Surcharge { get { return this.SurchargeOption; } set { this.SurchargeOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of TotalAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> TotalAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [JsonPropertyName("totalAmount")]
        public Amount TotalAmount { get { return this.TotalAmountOption; } set { this.TotalAmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UrlOption { get; private set; }

        /// <summary>
        /// Specifies the URL to redirect to.
        /// </summary>
        /// <value>Specifies the URL to redirect to.</value>
        [JsonPropertyName("url")]
        public string Url { get { return this.UrlOption; } set { this.UrlOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutVoucherAction {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AlternativeReference: ").Append(AlternativeReference).Append("\n");
            sb.Append("  CollectionInstitutionNumber: ").Append(CollectionInstitutionNumber).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  InitialAmount: ").Append(InitialAmount).Append("\n");
            sb.Append("  InstructionsUrl: ").Append(InstructionsUrl).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  MaskedTelephoneNumber: ").Append(MaskedTelephoneNumber).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("  MerchantReference: ").Append(MerchantReference).Append("\n");
            sb.Append("  PassCreationToken: ").Append(PassCreationToken).Append("\n");
            sb.Append("  PaymentData: ").Append(PaymentData).Append("\n");
            sb.Append("  PaymentMethodType: ").Append(PaymentMethodType).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("  ShopperName: ").Append(ShopperName).Append("\n");
            sb.Append("  Surcharge: ").Append(Surcharge).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheckoutVoucherAction" />
    /// </summary>
    public class CheckoutVoucherActionJsonConverter : JsonConverter<CheckoutVoucherAction>
    {
        /// <summary>
        /// Deserializes json to <see cref="CheckoutVoucherAction" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CheckoutVoucherAction Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CheckoutVoucherAction.TypeEnum?> type = default;
            Option<string> alternativeReference = default;
            Option<string> collectionInstitutionNumber = default;
            Option<string> downloadUrl = default;
            Option<string> entity = default;
            Option<string> expiresAt = default;
            Option<Amount> initialAmount = default;
            Option<string> instructionsUrl = default;
            Option<string> issuer = default;
            Option<string> maskedTelephoneNumber = default;
            Option<string> merchantName = default;
            Option<string> merchantReference = default;
            Option<string> passCreationToken = default;
            Option<string> paymentData = default;
            Option<string> paymentMethodType = default;
            Option<string> reference = default;
            Option<string> shopperEmail = default;
            Option<string> shopperName = default;
            Option<Amount> surcharge = default;
            Option<Amount> totalAmount = default;
            Option<string> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CheckoutVoucherAction.TypeEnum?>(CheckoutVoucherAction.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "alternativeReference":
                            alternativeReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "collectionInstitutionNumber":
                            collectionInstitutionNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "downloadUrl":
                            downloadUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "entity":
                            entity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expiresAt":
                            expiresAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "initialAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                initialAmount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "instructionsUrl":
                            instructionsUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "issuer":
                            issuer = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "maskedTelephoneNumber":
                            maskedTelephoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantName":
                            merchantName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantReference":
                            merchantReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "passCreationToken":
                            passCreationToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentData":
                            paymentData = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentMethodType":
                            paymentMethodType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperEmail":
                            shopperEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperName":
                            shopperName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "surcharge":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                surcharge = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "totalAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalAmount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class CheckoutVoucherAction.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CheckoutVoucherAction.");

            if (alternativeReference.IsSet && alternativeReference.Value == null)
                throw new ArgumentNullException(nameof(alternativeReference), "Property is not nullable for class CheckoutVoucherAction.");

            if (collectionInstitutionNumber.IsSet && collectionInstitutionNumber.Value == null)
                throw new ArgumentNullException(nameof(collectionInstitutionNumber), "Property is not nullable for class CheckoutVoucherAction.");

            if (downloadUrl.IsSet && downloadUrl.Value == null)
                throw new ArgumentNullException(nameof(downloadUrl), "Property is not nullable for class CheckoutVoucherAction.");

            if (entity.IsSet && entity.Value == null)
                throw new ArgumentNullException(nameof(entity), "Property is not nullable for class CheckoutVoucherAction.");

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class CheckoutVoucherAction.");

            if (initialAmount.IsSet && initialAmount.Value == null)
                throw new ArgumentNullException(nameof(initialAmount), "Property is not nullable for class CheckoutVoucherAction.");

            if (instructionsUrl.IsSet && instructionsUrl.Value == null)
                throw new ArgumentNullException(nameof(instructionsUrl), "Property is not nullable for class CheckoutVoucherAction.");

            if (issuer.IsSet && issuer.Value == null)
                throw new ArgumentNullException(nameof(issuer), "Property is not nullable for class CheckoutVoucherAction.");

            if (maskedTelephoneNumber.IsSet && maskedTelephoneNumber.Value == null)
                throw new ArgumentNullException(nameof(maskedTelephoneNumber), "Property is not nullable for class CheckoutVoucherAction.");

            if (merchantName.IsSet && merchantName.Value == null)
                throw new ArgumentNullException(nameof(merchantName), "Property is not nullable for class CheckoutVoucherAction.");

            if (merchantReference.IsSet && merchantReference.Value == null)
                throw new ArgumentNullException(nameof(merchantReference), "Property is not nullable for class CheckoutVoucherAction.");

            if (passCreationToken.IsSet && passCreationToken.Value == null)
                throw new ArgumentNullException(nameof(passCreationToken), "Property is not nullable for class CheckoutVoucherAction.");

            if (paymentData.IsSet && paymentData.Value == null)
                throw new ArgumentNullException(nameof(paymentData), "Property is not nullable for class CheckoutVoucherAction.");

            if (paymentMethodType.IsSet && paymentMethodType.Value == null)
                throw new ArgumentNullException(nameof(paymentMethodType), "Property is not nullable for class CheckoutVoucherAction.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class CheckoutVoucherAction.");

            if (shopperEmail.IsSet && shopperEmail.Value == null)
                throw new ArgumentNullException(nameof(shopperEmail), "Property is not nullable for class CheckoutVoucherAction.");

            if (shopperName.IsSet && shopperName.Value == null)
                throw new ArgumentNullException(nameof(shopperName), "Property is not nullable for class CheckoutVoucherAction.");

            if (surcharge.IsSet && surcharge.Value == null)
                throw new ArgumentNullException(nameof(surcharge), "Property is not nullable for class CheckoutVoucherAction.");

            if (totalAmount.IsSet && totalAmount.Value == null)
                throw new ArgumentNullException(nameof(totalAmount), "Property is not nullable for class CheckoutVoucherAction.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class CheckoutVoucherAction.");

            return new CheckoutVoucherAction(type.Value.Value, alternativeReference, collectionInstitutionNumber, downloadUrl, entity, expiresAt, initialAmount, instructionsUrl, issuer, maskedTelephoneNumber, merchantName, merchantReference, passCreationToken, paymentData, paymentMethodType, reference, shopperEmail, shopperName, surcharge, totalAmount, url);
        }

        /// <summary>
        /// Serializes a <see cref="CheckoutVoucherAction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkoutVoucherAction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CheckoutVoucherAction checkoutVoucherAction, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, checkoutVoucherAction, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CheckoutVoucherAction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkoutVoucherAction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CheckoutVoucherAction checkoutVoucherAction, JsonSerializerOptions jsonSerializerOptions)
        {
            if (checkoutVoucherAction.AlternativeReferenceOption.IsSet && checkoutVoucherAction.AlternativeReference == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.AlternativeReference), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.CollectionInstitutionNumberOption.IsSet && checkoutVoucherAction.CollectionInstitutionNumber == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.CollectionInstitutionNumber), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.DownloadUrlOption.IsSet && checkoutVoucherAction.DownloadUrl == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.DownloadUrl), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.EntityOption.IsSet && checkoutVoucherAction.Entity == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.Entity), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.ExpiresAtOption.IsSet && checkoutVoucherAction.ExpiresAt == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.ExpiresAt), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.InitialAmountOption.IsSet && checkoutVoucherAction.InitialAmount == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.InitialAmount), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.InstructionsUrlOption.IsSet && checkoutVoucherAction.InstructionsUrl == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.InstructionsUrl), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.IssuerOption.IsSet && checkoutVoucherAction.Issuer == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.Issuer), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.MaskedTelephoneNumberOption.IsSet && checkoutVoucherAction.MaskedTelephoneNumber == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.MaskedTelephoneNumber), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.MerchantNameOption.IsSet && checkoutVoucherAction.MerchantName == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.MerchantName), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.MerchantReferenceOption.IsSet && checkoutVoucherAction.MerchantReference == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.MerchantReference), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.PassCreationTokenOption.IsSet && checkoutVoucherAction.PassCreationToken == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.PassCreationToken), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.PaymentDataOption.IsSet && checkoutVoucherAction.PaymentData == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.PaymentData), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.PaymentMethodTypeOption.IsSet && checkoutVoucherAction.PaymentMethodType == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.PaymentMethodType), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.ReferenceOption.IsSet && checkoutVoucherAction.Reference == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.Reference), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.ShopperEmailOption.IsSet && checkoutVoucherAction.ShopperEmail == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.ShopperEmail), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.ShopperNameOption.IsSet && checkoutVoucherAction.ShopperName == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.ShopperName), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.SurchargeOption.IsSet && checkoutVoucherAction.Surcharge == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.Surcharge), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.TotalAmountOption.IsSet && checkoutVoucherAction.TotalAmount == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.TotalAmount), "Property is required for class CheckoutVoucherAction.");

            if (checkoutVoucherAction.UrlOption.IsSet && checkoutVoucherAction.Url == null)
                throw new ArgumentNullException(nameof(checkoutVoucherAction.Url), "Property is required for class CheckoutVoucherAction.");

            var typeRawValue = CheckoutVoucherAction.TypeEnumToJsonValue(checkoutVoucherAction.Type);
            writer.WriteString("type", typeRawValue);
            if (checkoutVoucherAction.AlternativeReferenceOption.IsSet)
                writer.WriteString("alternativeReference", checkoutVoucherAction.AlternativeReference);

            if (checkoutVoucherAction.CollectionInstitutionNumberOption.IsSet)
                writer.WriteString("collectionInstitutionNumber", checkoutVoucherAction.CollectionInstitutionNumber);

            if (checkoutVoucherAction.DownloadUrlOption.IsSet)
                writer.WriteString("downloadUrl", checkoutVoucherAction.DownloadUrl);

            if (checkoutVoucherAction.EntityOption.IsSet)
                writer.WriteString("entity", checkoutVoucherAction.Entity);

            if (checkoutVoucherAction.ExpiresAtOption.IsSet)
                writer.WriteString("expiresAt", checkoutVoucherAction.ExpiresAt);

            if (checkoutVoucherAction.InitialAmountOption.IsSet)
            {
                writer.WritePropertyName("initialAmount");
                JsonSerializer.Serialize(writer, checkoutVoucherAction.InitialAmount, jsonSerializerOptions);
            }
            if (checkoutVoucherAction.InstructionsUrlOption.IsSet)
                writer.WriteString("instructionsUrl", checkoutVoucherAction.InstructionsUrl);

            if (checkoutVoucherAction.IssuerOption.IsSet)
                writer.WriteString("issuer", checkoutVoucherAction.Issuer);

            if (checkoutVoucherAction.MaskedTelephoneNumberOption.IsSet)
                writer.WriteString("maskedTelephoneNumber", checkoutVoucherAction.MaskedTelephoneNumber);

            if (checkoutVoucherAction.MerchantNameOption.IsSet)
                writer.WriteString("merchantName", checkoutVoucherAction.MerchantName);

            if (checkoutVoucherAction.MerchantReferenceOption.IsSet)
                writer.WriteString("merchantReference", checkoutVoucherAction.MerchantReference);

            if (checkoutVoucherAction.PassCreationTokenOption.IsSet)
                writer.WriteString("passCreationToken", checkoutVoucherAction.PassCreationToken);

            if (checkoutVoucherAction.PaymentDataOption.IsSet)
                writer.WriteString("paymentData", checkoutVoucherAction.PaymentData);

            if (checkoutVoucherAction.PaymentMethodTypeOption.IsSet)
                writer.WriteString("paymentMethodType", checkoutVoucherAction.PaymentMethodType);

            if (checkoutVoucherAction.ReferenceOption.IsSet)
                writer.WriteString("reference", checkoutVoucherAction.Reference);

            if (checkoutVoucherAction.ShopperEmailOption.IsSet)
                writer.WriteString("shopperEmail", checkoutVoucherAction.ShopperEmail);

            if (checkoutVoucherAction.ShopperNameOption.IsSet)
                writer.WriteString("shopperName", checkoutVoucherAction.ShopperName);

            if (checkoutVoucherAction.SurchargeOption.IsSet)
            {
                writer.WritePropertyName("surcharge");
                JsonSerializer.Serialize(writer, checkoutVoucherAction.Surcharge, jsonSerializerOptions);
            }
            if (checkoutVoucherAction.TotalAmountOption.IsSet)
            {
                writer.WritePropertyName("totalAmount");
                JsonSerializer.Serialize(writer, checkoutVoucherAction.TotalAmount, jsonSerializerOptions);
            }
            if (checkoutVoucherAction.UrlOption.IsSet)
                writer.WriteString("url", checkoutVoucherAction.Url);
        }
    }
}
