/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// LineItem
    /// </summary>
    [DataContract(Name = "LineItem")]
    public partial class LineItem : IEquatable<LineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItem" /> class.
        /// </summary>
        /// <param name="amountExcludingTax">Item amount excluding the tax, in minor units..</param>
        /// <param name="amountIncludingTax">Item amount including the tax, in minor units..</param>
        /// <param name="brand">Brand of the item..</param>
        /// <param name="color">Color of the item..</param>
        /// <param name="description">Description of the line item..</param>
        /// <param name="id">ID of the line item..</param>
        /// <param name="imageUrl">Link to the picture of the purchased item..</param>
        /// <param name="itemCategory">Item category, used by the payment methods PayPal and Ratepay..</param>
        /// <param name="manufacturer">Manufacturer of the item..</param>
        /// <param name="marketplaceSellerId">Marketplace seller id..</param>
        /// <param name="productUrl">Link to the purchased item..</param>
        /// <param name="quantity">Number of items..</param>
        /// <param name="receiverEmail">Email associated with the given product in the basket (usually in electronic gift cards)..</param>
        /// <param name="size">Size of the item..</param>
        /// <param name="sku">Stock keeping unit..</param>
        /// <param name="taxAmount">Tax amount, in minor units..</param>
        /// <param name="taxPercentage">Tax percentage, in minor units..</param>
        /// <param name="upc">Universal Product Code..</param>
        public LineItem(long? amountExcludingTax = default(long?), long? amountIncludingTax = default(long?), string brand = default(string), string color = default(string), string description = default(string), string id = default(string), string imageUrl = default(string), string itemCategory = default(string), string manufacturer = default(string), string marketplaceSellerId = default(string), string productUrl = default(string), long? quantity = default(long?), string receiverEmail = default(string), string size = default(string), string sku = default(string), long? taxAmount = default(long?), long? taxPercentage = default(long?), string upc = default(string))
        {
            this.AmountExcludingTax = amountExcludingTax;
            this.AmountIncludingTax = amountIncludingTax;
            this.Brand = brand;
            this.Color = color;
            this.Description = description;
            this.Id = id;
            this.ImageUrl = imageUrl;
            this.ItemCategory = itemCategory;
            this.Manufacturer = manufacturer;
            this.MarketplaceSellerId = marketplaceSellerId;
            this.ProductUrl = productUrl;
            this.Quantity = quantity;
            this.ReceiverEmail = receiverEmail;
            this.Size = size;
            this.Sku = sku;
            this.TaxAmount = taxAmount;
            this.TaxPercentage = taxPercentage;
            this.Upc = upc;
        }

        /// <summary>
        /// Item amount excluding the tax, in minor units.
        /// </summary>
        /// <value>Item amount excluding the tax, in minor units.</value>
        [DataMember(Name = "amountExcludingTax", EmitDefaultValue = false)]
        public long? AmountExcludingTax { get; set; }

        /// <summary>
        /// Item amount including the tax, in minor units.
        /// </summary>
        /// <value>Item amount including the tax, in minor units.</value>
        [DataMember(Name = "amountIncludingTax", EmitDefaultValue = false)]
        public long? AmountIncludingTax { get; set; }

        /// <summary>
        /// Brand of the item.
        /// </summary>
        /// <value>Brand of the item.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// Color of the item.
        /// </summary>
        /// <value>Color of the item.</value>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        /// Description of the line item.
        /// </summary>
        /// <value>Description of the line item.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// ID of the line item.
        /// </summary>
        /// <value>ID of the line item.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Link to the picture of the purchased item.
        /// </summary>
        /// <value>Link to the picture of the purchased item.</value>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Item category, used by the payment methods PayPal and Ratepay.
        /// </summary>
        /// <value>Item category, used by the payment methods PayPal and Ratepay.</value>
        [DataMember(Name = "itemCategory", EmitDefaultValue = false)]
        public string ItemCategory { get; set; }

        /// <summary>
        /// Manufacturer of the item.
        /// </summary>
        /// <value>Manufacturer of the item.</value>
        [DataMember(Name = "manufacturer", EmitDefaultValue = false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Marketplace seller id.
        /// </summary>
        /// <value>Marketplace seller id.</value>
        [DataMember(Name = "marketplaceSellerId", EmitDefaultValue = false)]
        public string MarketplaceSellerId { get; set; }

        /// <summary>
        /// Link to the purchased item.
        /// </summary>
        /// <value>Link to the purchased item.</value>
        [DataMember(Name = "productUrl", EmitDefaultValue = false)]
        public string ProductUrl { get; set; }

        /// <summary>
        /// Number of items.
        /// </summary>
        /// <value>Number of items.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public long? Quantity { get; set; }

        /// <summary>
        /// Email associated with the given product in the basket (usually in electronic gift cards).
        /// </summary>
        /// <value>Email associated with the given product in the basket (usually in electronic gift cards).</value>
        [DataMember(Name = "receiverEmail", EmitDefaultValue = false)]
        public string ReceiverEmail { get; set; }

        /// <summary>
        /// Size of the item.
        /// </summary>
        /// <value>Size of the item.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public string Size { get; set; }

        /// <summary>
        /// Stock keeping unit.
        /// </summary>
        /// <value>Stock keeping unit.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// Tax amount, in minor units.
        /// </summary>
        /// <value>Tax amount, in minor units.</value>
        [DataMember(Name = "taxAmount", EmitDefaultValue = false)]
        public long? TaxAmount { get; set; }

        /// <summary>
        /// Tax percentage, in minor units.
        /// </summary>
        /// <value>Tax percentage, in minor units.</value>
        [DataMember(Name = "taxPercentage", EmitDefaultValue = false)]
        public long? TaxPercentage { get; set; }

        /// <summary>
        /// Universal Product Code.
        /// </summary>
        /// <value>Universal Product Code.</value>
        [DataMember(Name = "upc", EmitDefaultValue = false)]
        public string Upc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LineItem {\n");
            sb.Append("  AmountExcludingTax: ").Append(AmountExcludingTax).Append("\n");
            sb.Append("  AmountIncludingTax: ").Append(AmountIncludingTax).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ItemCategory: ").Append(ItemCategory).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  MarketplaceSellerId: ").Append(MarketplaceSellerId).Append("\n");
            sb.Append("  ProductUrl: ").Append(ProductUrl).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ReceiverEmail: ").Append(ReceiverEmail).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxPercentage: ").Append(TaxPercentage).Append("\n");
            sb.Append("  Upc: ").Append(Upc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LineItem);
        }

        /// <summary>
        /// Returns true if LineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of LineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AmountExcludingTax == input.AmountExcludingTax ||
                    this.AmountExcludingTax.Equals(input.AmountExcludingTax)
                ) && 
                (
                    this.AmountIncludingTax == input.AmountIncludingTax ||
                    this.AmountIncludingTax.Equals(input.AmountIncludingTax)
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.ItemCategory == input.ItemCategory ||
                    (this.ItemCategory != null &&
                    this.ItemCategory.Equals(input.ItemCategory))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.MarketplaceSellerId == input.MarketplaceSellerId ||
                    (this.MarketplaceSellerId != null &&
                    this.MarketplaceSellerId.Equals(input.MarketplaceSellerId))
                ) && 
                (
                    this.ProductUrl == input.ProductUrl ||
                    (this.ProductUrl != null &&
                    this.ProductUrl.Equals(input.ProductUrl))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.ReceiverEmail == input.ReceiverEmail ||
                    (this.ReceiverEmail != null &&
                    this.ReceiverEmail.Equals(input.ReceiverEmail))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.TaxAmount == input.TaxAmount ||
                    this.TaxAmount.Equals(input.TaxAmount)
                ) && 
                (
                    this.TaxPercentage == input.TaxPercentage ||
                    this.TaxPercentage.Equals(input.TaxPercentage)
                ) && 
                (
                    this.Upc == input.Upc ||
                    (this.Upc != null &&
                    this.Upc.Equals(input.Upc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AmountExcludingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountIncludingTax.GetHashCode();
                if (this.Brand != null)
                {
                    hashCode = (hashCode * 59) + this.Brand.GetHashCode();
                }
                if (this.Color != null)
                {
                    hashCode = (hashCode * 59) + this.Color.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                if (this.ItemCategory != null)
                {
                    hashCode = (hashCode * 59) + this.ItemCategory.GetHashCode();
                }
                if (this.Manufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.Manufacturer.GetHashCode();
                }
                if (this.MarketplaceSellerId != null)
                {
                    hashCode = (hashCode * 59) + this.MarketplaceSellerId.GetHashCode();
                }
                if (this.ProductUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ProductUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.ReceiverEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiverEmail.GetHashCode();
                }
                if (this.Size != null)
                {
                    hashCode = (hashCode * 59) + this.Size.GetHashCode();
                }
                if (this.Sku != null)
                {
                    hashCode = (hashCode * 59) + this.Sku.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TaxAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.TaxPercentage.GetHashCode();
                if (this.Upc != null)
                {
                    hashCode = (hashCode * 59) + this.Upc.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 10000.", new [] { "Description" });
            }

            yield break;
        }
    }

}
