// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// LineItem
    /// </summary>
    public partial class LineItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItem" /> class.
        /// </summary>
        /// <param name="amountExcludingTax">Item amount excluding the tax, in minor units.</param>
        /// <param name="amountIncludingTax">Item amount including the tax, in minor units.</param>
        /// <param name="brand">Brand of the item.</param>
        /// <param name="color">Color of the item.</param>
        /// <param name="description">Description of the line item.</param>
        /// <param name="id">ID of the line item.</param>
        /// <param name="imageUrl">Link to the picture of the purchased item.</param>
        /// <param name="itemCategory">Item category, used by the payment methods PayPal and Ratepay.</param>
        /// <param name="manufacturer">Manufacturer of the item.</param>
        /// <param name="marketplaceSellerId">Marketplace seller id.</param>
        /// <param name="productUrl">Link to the purchased item.</param>
        /// <param name="quantity">Number of items.</param>
        /// <param name="receiverEmail">Email associated with the given product in the basket (usually in electronic gift cards).</param>
        /// <param name="size">Size of the item.</param>
        /// <param name="sku">Stock keeping unit.</param>
        /// <param name="taxAmount">Tax amount, in minor units.</param>
        /// <param name="taxPercentage">Tax percentage, in minor units.</param>
        /// <param name="upc">Universal Product Code.</param>
        [JsonConstructor]
        public LineItem(Option<long?> amountExcludingTax = default, Option<long?> amountIncludingTax = default, Option<string> brand = default, Option<string> color = default, Option<string> description = default, Option<string> id = default, Option<string> imageUrl = default, Option<string> itemCategory = default, Option<string> manufacturer = default, Option<string> marketplaceSellerId = default, Option<string> productUrl = default, Option<long?> quantity = default, Option<string> receiverEmail = default, Option<string> size = default, Option<string> sku = default, Option<long?> taxAmount = default, Option<long?> taxPercentage = default, Option<string> upc = default)
        {
            AmountExcludingTaxOption = amountExcludingTax;
            AmountIncludingTaxOption = amountIncludingTax;
            BrandOption = brand;
            ColorOption = color;
            DescriptionOption = description;
            IdOption = id;
            ImageUrlOption = imageUrl;
            ItemCategoryOption = itemCategory;
            ManufacturerOption = manufacturer;
            MarketplaceSellerIdOption = marketplaceSellerId;
            ProductUrlOption = productUrl;
            QuantityOption = quantity;
            ReceiverEmailOption = receiverEmail;
            SizeOption = size;
            SkuOption = sku;
            TaxAmountOption = taxAmount;
            TaxPercentageOption = taxPercentage;
            UpcOption = upc;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AmountExcludingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AmountExcludingTaxOption { get; private set; }

        /// <summary>
        /// Item amount excluding the tax, in minor units.
        /// </summary>
        /// <value>Item amount excluding the tax, in minor units.</value>
        [JsonPropertyName("amountExcludingTax")]
        public long? AmountExcludingTax { get { return this.AmountExcludingTaxOption; } set { this.AmountExcludingTaxOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of AmountIncludingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AmountIncludingTaxOption { get; private set; }

        /// <summary>
        /// Item amount including the tax, in minor units.
        /// </summary>
        /// <value>Item amount including the tax, in minor units.</value>
        [JsonPropertyName("amountIncludingTax")]
        public long? AmountIncludingTax { get { return this.AmountIncludingTaxOption; } set { this.AmountIncludingTaxOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Brand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BrandOption { get; private set; }

        /// <summary>
        /// Brand of the item.
        /// </summary>
        /// <value>Brand of the item.</value>
        [JsonPropertyName("brand")]
        public string Brand { get { return this.BrandOption; } set { this.BrandOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Color
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ColorOption { get; private set; }

        /// <summary>
        /// Color of the item.
        /// </summary>
        /// <value>Color of the item.</value>
        [JsonPropertyName("color")]
        public string Color { get { return this.ColorOption; } set { this.ColorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Description of the line item.
        /// </summary>
        /// <value>Description of the line item.</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// ID of the line item.
        /// </summary>
        /// <value>ID of the line item.</value>
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ImageUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ImageUrlOption { get; private set; }

        /// <summary>
        /// Link to the picture of the purchased item.
        /// </summary>
        /// <value>Link to the picture of the purchased item.</value>
        [JsonPropertyName("imageUrl")]
        public string ImageUrl { get { return this.ImageUrlOption; } set { this.ImageUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ItemCategory
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ItemCategoryOption { get; private set; }

        /// <summary>
        /// Item category, used by the payment methods PayPal and Ratepay.
        /// </summary>
        /// <value>Item category, used by the payment methods PayPal and Ratepay.</value>
        [JsonPropertyName("itemCategory")]
        public string ItemCategory { get { return this.ItemCategoryOption; } set { this.ItemCategoryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Manufacturer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ManufacturerOption { get; private set; }

        /// <summary>
        /// Manufacturer of the item.
        /// </summary>
        /// <value>Manufacturer of the item.</value>
        [JsonPropertyName("manufacturer")]
        public string Manufacturer { get { return this.ManufacturerOption; } set { this.ManufacturerOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MarketplaceSellerId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MarketplaceSellerIdOption { get; private set; }

        /// <summary>
        /// Marketplace seller id.
        /// </summary>
        /// <value>Marketplace seller id.</value>
        [JsonPropertyName("marketplaceSellerId")]
        public string MarketplaceSellerId { get { return this.MarketplaceSellerIdOption; } set { this.MarketplaceSellerIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ProductUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ProductUrlOption { get; private set; }

        /// <summary>
        /// Link to the purchased item.
        /// </summary>
        /// <value>Link to the purchased item.</value>
        [JsonPropertyName("productUrl")]
        public string ProductUrl { get { return this.ProductUrlOption; } set { this.ProductUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> QuantityOption { get; private set; }

        /// <summary>
        /// Number of items.
        /// </summary>
        /// <value>Number of items.</value>
        [JsonPropertyName("quantity")]
        public long? Quantity { get { return this.QuantityOption; } set { this.QuantityOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of ReceiverEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReceiverEmailOption { get; private set; }

        /// <summary>
        /// Email associated with the given product in the basket (usually in electronic gift cards).
        /// </summary>
        /// <value>Email associated with the given product in the basket (usually in electronic gift cards).</value>
        [JsonPropertyName("receiverEmail")]
        public string ReceiverEmail { get { return this.ReceiverEmailOption; } set { this.ReceiverEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SizeOption { get; private set; }

        /// <summary>
        /// Size of the item.
        /// </summary>
        /// <value>Size of the item.</value>
        [JsonPropertyName("size")]
        public string Size { get { return this.SizeOption; } set { this.SizeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Sku
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SkuOption { get; private set; }

        /// <summary>
        /// Stock keeping unit.
        /// </summary>
        /// <value>Stock keeping unit.</value>
        [JsonPropertyName("sku")]
        public string Sku { get { return this.SkuOption; } set { this.SkuOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TaxAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TaxAmountOption { get; private set; }

        /// <summary>
        /// Tax amount, in minor units.
        /// </summary>
        /// <value>Tax amount, in minor units.</value>
        [JsonPropertyName("taxAmount")]
        public long? TaxAmount { get { return this.TaxAmountOption; } set { this.TaxAmountOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of TaxPercentage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TaxPercentageOption { get; private set; }

        /// <summary>
        /// Tax percentage, in minor units.
        /// </summary>
        /// <value>Tax percentage, in minor units.</value>
        [JsonPropertyName("taxPercentage")]
        public long? TaxPercentage { get { return this.TaxPercentageOption; } set { this.TaxPercentageOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Upc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UpcOption { get; private set; }

        /// <summary>
        /// Universal Product Code.
        /// </summary>
        /// <value>Universal Product Code.</value>
        [JsonPropertyName("upc")]
        public string Upc { get { return this.UpcOption; } set { this.UpcOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LineItem {\n");
            sb.Append("  AmountExcludingTax: ").Append(AmountExcludingTax).Append("\n");
            sb.Append("  AmountIncludingTax: ").Append(AmountIncludingTax).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ItemCategory: ").Append(ItemCategory).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  MarketplaceSellerId: ").Append(MarketplaceSellerId).Append("\n");
            sb.Append("  ProductUrl: ").Append(ProductUrl).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ReceiverEmail: ").Append(ReceiverEmail).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxPercentage: ").Append(TaxPercentage).Append("\n");
            sb.Append("  Upc: ").Append(Upc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 10000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 10000.", new [] { "Description" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LineItem" />
    /// </summary>
    public class LineItemJsonConverter : JsonConverter<LineItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="LineItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LineItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> amountExcludingTax = default;
            Option<long?> amountIncludingTax = default;
            Option<string> brand = default;
            Option<string> color = default;
            Option<string> description = default;
            Option<string> id = default;
            Option<string> imageUrl = default;
            Option<string> itemCategory = default;
            Option<string> manufacturer = default;
            Option<string> marketplaceSellerId = default;
            Option<string> productUrl = default;
            Option<long?> quantity = default;
            Option<string> receiverEmail = default;
            Option<string> size = default;
            Option<string> sku = default;
            Option<long?> taxAmount = default;
            Option<long?> taxPercentage = default;
            Option<string> upc = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amountExcludingTax":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amountExcludingTax = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "amountIncludingTax":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amountIncludingTax = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "brand":
                            brand = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "color":
                            color = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "imageUrl":
                            imageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "itemCategory":
                            itemCategory = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "manufacturer":
                            manufacturer = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "marketplaceSellerId":
                            marketplaceSellerId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "productUrl":
                            productUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "receiverEmail":
                            receiverEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "size":
                            size = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sku":
                            sku = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "taxAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxAmount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "taxPercentage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxPercentage = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "upc":
                            upc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (amountExcludingTax.IsSet && amountExcludingTax.Value == null)
                throw new ArgumentNullException(nameof(amountExcludingTax), "Property is not nullable for class LineItem.");

            if (amountIncludingTax.IsSet && amountIncludingTax.Value == null)
                throw new ArgumentNullException(nameof(amountIncludingTax), "Property is not nullable for class LineItem.");

            if (brand.IsSet && brand.Value == null)
                throw new ArgumentNullException(nameof(brand), "Property is not nullable for class LineItem.");

            if (color.IsSet && color.Value == null)
                throw new ArgumentNullException(nameof(color), "Property is not nullable for class LineItem.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class LineItem.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class LineItem.");

            if (imageUrl.IsSet && imageUrl.Value == null)
                throw new ArgumentNullException(nameof(imageUrl), "Property is not nullable for class LineItem.");

            if (itemCategory.IsSet && itemCategory.Value == null)
                throw new ArgumentNullException(nameof(itemCategory), "Property is not nullable for class LineItem.");

            if (manufacturer.IsSet && manufacturer.Value == null)
                throw new ArgumentNullException(nameof(manufacturer), "Property is not nullable for class LineItem.");

            if (marketplaceSellerId.IsSet && marketplaceSellerId.Value == null)
                throw new ArgumentNullException(nameof(marketplaceSellerId), "Property is not nullable for class LineItem.");

            if (productUrl.IsSet && productUrl.Value == null)
                throw new ArgumentNullException(nameof(productUrl), "Property is not nullable for class LineItem.");

            if (quantity.IsSet && quantity.Value == null)
                throw new ArgumentNullException(nameof(quantity), "Property is not nullable for class LineItem.");

            if (receiverEmail.IsSet && receiverEmail.Value == null)
                throw new ArgumentNullException(nameof(receiverEmail), "Property is not nullable for class LineItem.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class LineItem.");

            if (sku.IsSet && sku.Value == null)
                throw new ArgumentNullException(nameof(sku), "Property is not nullable for class LineItem.");

            if (taxAmount.IsSet && taxAmount.Value == null)
                throw new ArgumentNullException(nameof(taxAmount), "Property is not nullable for class LineItem.");

            if (taxPercentage.IsSet && taxPercentage.Value == null)
                throw new ArgumentNullException(nameof(taxPercentage), "Property is not nullable for class LineItem.");

            if (upc.IsSet && upc.Value == null)
                throw new ArgumentNullException(nameof(upc), "Property is not nullable for class LineItem.");

            return new LineItem(amountExcludingTax, amountIncludingTax, brand, color, description, id, imageUrl, itemCategory, manufacturer, marketplaceSellerId, productUrl, quantity, receiverEmail, size, sku, taxAmount, taxPercentage, upc);
        }

        /// <summary>
        /// Serializes a <see cref="LineItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="lineItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LineItem lineItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, lineItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LineItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="lineItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LineItem lineItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (lineItem.BrandOption.IsSet && lineItem.Brand == null)
                throw new ArgumentNullException(nameof(lineItem.Brand), "Property is required for class LineItem.");

            if (lineItem.ColorOption.IsSet && lineItem.Color == null)
                throw new ArgumentNullException(nameof(lineItem.Color), "Property is required for class LineItem.");

            if (lineItem.DescriptionOption.IsSet && lineItem.Description == null)
                throw new ArgumentNullException(nameof(lineItem.Description), "Property is required for class LineItem.");

            if (lineItem.IdOption.IsSet && lineItem.Id == null)
                throw new ArgumentNullException(nameof(lineItem.Id), "Property is required for class LineItem.");

            if (lineItem.ImageUrlOption.IsSet && lineItem.ImageUrl == null)
                throw new ArgumentNullException(nameof(lineItem.ImageUrl), "Property is required for class LineItem.");

            if (lineItem.ItemCategoryOption.IsSet && lineItem.ItemCategory == null)
                throw new ArgumentNullException(nameof(lineItem.ItemCategory), "Property is required for class LineItem.");

            if (lineItem.ManufacturerOption.IsSet && lineItem.Manufacturer == null)
                throw new ArgumentNullException(nameof(lineItem.Manufacturer), "Property is required for class LineItem.");

            if (lineItem.MarketplaceSellerIdOption.IsSet && lineItem.MarketplaceSellerId == null)
                throw new ArgumentNullException(nameof(lineItem.MarketplaceSellerId), "Property is required for class LineItem.");

            if (lineItem.ProductUrlOption.IsSet && lineItem.ProductUrl == null)
                throw new ArgumentNullException(nameof(lineItem.ProductUrl), "Property is required for class LineItem.");

            if (lineItem.ReceiverEmailOption.IsSet && lineItem.ReceiverEmail == null)
                throw new ArgumentNullException(nameof(lineItem.ReceiverEmail), "Property is required for class LineItem.");

            if (lineItem.SizeOption.IsSet && lineItem.Size == null)
                throw new ArgumentNullException(nameof(lineItem.Size), "Property is required for class LineItem.");

            if (lineItem.SkuOption.IsSet && lineItem.Sku == null)
                throw new ArgumentNullException(nameof(lineItem.Sku), "Property is required for class LineItem.");

            if (lineItem.UpcOption.IsSet && lineItem.Upc == null)
                throw new ArgumentNullException(nameof(lineItem.Upc), "Property is required for class LineItem.");

            if (lineItem.AmountExcludingTaxOption.IsSet)
                writer.WriteNumber("amountExcludingTax", lineItem.AmountExcludingTaxOption.Value.Value);

            if (lineItem.AmountIncludingTaxOption.IsSet)
                writer.WriteNumber("amountIncludingTax", lineItem.AmountIncludingTaxOption.Value.Value);

            if (lineItem.BrandOption.IsSet)
                writer.WriteString("brand", lineItem.Brand);

            if (lineItem.ColorOption.IsSet)
                writer.WriteString("color", lineItem.Color);

            if (lineItem.DescriptionOption.IsSet)
                writer.WriteString("description", lineItem.Description);

            if (lineItem.IdOption.IsSet)
                writer.WriteString("id", lineItem.Id);

            if (lineItem.ImageUrlOption.IsSet)
                writer.WriteString("imageUrl", lineItem.ImageUrl);

            if (lineItem.ItemCategoryOption.IsSet)
                writer.WriteString("itemCategory", lineItem.ItemCategory);

            if (lineItem.ManufacturerOption.IsSet)
                writer.WriteString("manufacturer", lineItem.Manufacturer);

            if (lineItem.MarketplaceSellerIdOption.IsSet)
                writer.WriteString("marketplaceSellerId", lineItem.MarketplaceSellerId);

            if (lineItem.ProductUrlOption.IsSet)
                writer.WriteString("productUrl", lineItem.ProductUrl);

            if (lineItem.QuantityOption.IsSet)
                writer.WriteNumber("quantity", lineItem.QuantityOption.Value.Value);

            if (lineItem.ReceiverEmailOption.IsSet)
                writer.WriteString("receiverEmail", lineItem.ReceiverEmail);

            if (lineItem.SizeOption.IsSet)
                writer.WriteString("size", lineItem.Size);

            if (lineItem.SkuOption.IsSet)
                writer.WriteString("sku", lineItem.Sku);

            if (lineItem.TaxAmountOption.IsSet)
                writer.WriteNumber("taxAmount", lineItem.TaxAmountOption.Value.Value);

            if (lineItem.TaxPercentageOption.IsSet)
                writer.WriteNumber("taxPercentage", lineItem.TaxPercentageOption.Value.Value);

            if (lineItem.UpcOption.IsSet)
                writer.WriteString("upc", lineItem.Upc);
        }
    }
}
