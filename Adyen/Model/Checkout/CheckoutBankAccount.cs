// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// CheckoutBankAccount
    /// </summary>
    public partial class CheckoutBankAccount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutBankAccount" /> class.
        /// </summary>
        /// <param name="accountType">The type of the bank account.</param>
        /// <param name="bankAccountNumber">The bank account number (without separators).</param>
        /// <param name="bankCity">The bank city.</param>
        /// <param name="bankLocationId">The location id of the bank. The field value is &#x60;nil&#x60; in most cases.</param>
        /// <param name="bankName">The name of the bank.</param>
        /// <param name="bic">The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is &#x60;nil&#x60; in most cases.</param>
        /// <param name="countryCode">Country code where the bank is located.  A valid value is an ISO two-character country code (e.g. &#39;NL&#39;).</param>
        /// <param name="iban">The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).</param>
        /// <param name="ownerName">The name of the bank account holder. If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example: * χ12 is converted to ch12. * üA is converted to euA. * Peter Møller is converted to Peter Mller, because banks don&#39;t accept &#39;ø&#39;. After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example: * John17 - allowed. * J17 - allowed. * 171 - not allowed. * John-7 - allowed. &gt; If provided details don&#39;t match the required format, the response returns the error message: 203 &#39;Invalid bank account holder name&#39;.</param>
        /// <param name="taxId">The bank account holder&#39;s tax ID.</param>
        [JsonConstructor]
        public CheckoutBankAccount(Option<AccountTypeEnum?> accountType = default, Option<string> bankAccountNumber = default, Option<string> bankCity = default, Option<string> bankLocationId = default, Option<string> bankName = default, Option<string> bic = default, Option<string> countryCode = default, Option<string> iban = default, Option<string> ownerName = default, Option<string> taxId = default)
        {
            AccountTypeOption = accountType;
            BankAccountNumberOption = bankAccountNumber;
            BankCityOption = bankCity;
            BankLocationIdOption = bankLocationId;
            BankNameOption = bankName;
            BicOption = bic;
            CountryCodeOption = countryCode;
            IbanOption = iban;
            OwnerNameOption = ownerName;
            TaxIdOption = taxId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of the bank account.
        /// </summary>
        /// <value>The type of the bank account.</value>
        public enum AccountTypeEnum
        {
            /// <summary>
            /// Enum Balance for value: balance
            /// </summary>
            Balance = 1,

            /// <summary>
            /// Enum Checking for value: checking
            /// </summary>
            Checking = 2,

            /// <summary>
            /// Enum Deposit for value: deposit
            /// </summary>
            Deposit = 3,

            /// <summary>
            /// Enum General for value: general
            /// </summary>
            General = 4,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            Other = 5,

            /// <summary>
            /// Enum Payment for value: payment
            /// </summary>
            Payment = 6,

            /// <summary>
            /// Enum Savings for value: savings
            /// </summary>
            Savings = 7
        }

        /// <summary>
        /// Returns a <see cref="AccountTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AccountTypeEnum AccountTypeEnumFromString(string value)
        {
            if (value.Equals("balance"))
                return AccountTypeEnum.Balance;

            if (value.Equals("checking"))
                return AccountTypeEnum.Checking;

            if (value.Equals("deposit"))
                return AccountTypeEnum.Deposit;

            if (value.Equals("general"))
                return AccountTypeEnum.General;

            if (value.Equals("other"))
                return AccountTypeEnum.Other;

            if (value.Equals("payment"))
                return AccountTypeEnum.Payment;

            if (value.Equals("savings"))
                return AccountTypeEnum.Savings;

            throw new NotImplementedException($"Could not convert value to type AccountTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AccountTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountTypeEnum? AccountTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("balance"))
                return AccountTypeEnum.Balance;

            if (value.Equals("checking"))
                return AccountTypeEnum.Checking;

            if (value.Equals("deposit"))
                return AccountTypeEnum.Deposit;

            if (value.Equals("general"))
                return AccountTypeEnum.General;

            if (value.Equals("other"))
                return AccountTypeEnum.Other;

            if (value.Equals("payment"))
                return AccountTypeEnum.Payment;

            if (value.Equals("savings"))
                return AccountTypeEnum.Savings;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AccountTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AccountTypeEnumToJsonValue(AccountTypeEnum? value)
        {
            if (value == AccountTypeEnum.Balance)
                return "balance";

            if (value == AccountTypeEnum.Checking)
                return "checking";

            if (value == AccountTypeEnum.Deposit)
                return "deposit";

            if (value == AccountTypeEnum.General)
                return "general";

            if (value == AccountTypeEnum.Other)
                return "other";

            if (value == AccountTypeEnum.Payment)
                return "payment";

            if (value == AccountTypeEnum.Savings)
                return "savings";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AccountType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountTypeEnum?> AccountTypeOption { get; private set; }

        /// <summary>
        /// The type of the bank account.
        /// </summary>
        /// <value>The type of the bank account.</value>
        [JsonPropertyName("accountType")]
        public AccountTypeEnum? AccountType { get { return this.AccountTypeOption; } set { this.AccountTypeOption = new Option<AccountTypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of BankAccountNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankAccountNumberOption { get; private set; }

        /// <summary>
        /// The bank account number (without separators).
        /// </summary>
        /// <value>The bank account number (without separators).</value>
        [JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get { return this.BankAccountNumberOption; } set { this.BankAccountNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BankCity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankCityOption { get; private set; }

        /// <summary>
        /// The bank city.
        /// </summary>
        /// <value>The bank city.</value>
        [JsonPropertyName("bankCity")]
        public string BankCity { get { return this.BankCityOption; } set { this.BankCityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BankLocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankLocationIdOption { get; private set; }

        /// <summary>
        /// The location id of the bank. The field value is &#x60;nil&#x60; in most cases.
        /// </summary>
        /// <value>The location id of the bank. The field value is &#x60;nil&#x60; in most cases.</value>
        [JsonPropertyName("bankLocationId")]
        public string BankLocationId { get { return this.BankLocationIdOption; } set { this.BankLocationIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BankName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankNameOption { get; private set; }

        /// <summary>
        /// The name of the bank.
        /// </summary>
        /// <value>The name of the bank.</value>
        [JsonPropertyName("bankName")]
        public string BankName { get { return this.BankNameOption; } set { this.BankNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Bic
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BicOption { get; private set; }

        /// <summary>
        /// The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is &#x60;nil&#x60; in most cases.
        /// </summary>
        /// <value>The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is &#x60;nil&#x60; in most cases.</value>
        [JsonPropertyName("bic")]
        public string Bic { get { return this.BicOption; } set { this.BicOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryCodeOption { get; private set; }

        /// <summary>
        /// Country code where the bank is located.  A valid value is an ISO two-character country code (e.g. &#39;NL&#39;).
        /// </summary>
        /// <value>Country code where the bank is located.  A valid value is an ISO two-character country code (e.g. &#39;NL&#39;).</value>
        [JsonPropertyName("countryCode")]
        public string CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Iban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IbanOption { get; private set; }

        /// <summary>
        /// The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).
        /// </summary>
        /// <value>The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).</value>
        [JsonPropertyName("iban")]
        public string Iban { get { return this.IbanOption; } set { this.IbanOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OwnerName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OwnerNameOption { get; private set; }

        /// <summary>
        /// The name of the bank account holder. If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example: * χ12 is converted to ch12. * üA is converted to euA. * Peter Møller is converted to Peter Mller, because banks don&#39;t accept &#39;ø&#39;. After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example: * John17 - allowed. * J17 - allowed. * 171 - not allowed. * John-7 - allowed. &gt; If provided details don&#39;t match the required format, the response returns the error message: 203 &#39;Invalid bank account holder name&#39;.
        /// </summary>
        /// <value>The name of the bank account holder. If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example: * χ12 is converted to ch12. * üA is converted to euA. * Peter Møller is converted to Peter Mller, because banks don&#39;t accept &#39;ø&#39;. After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example: * John17 - allowed. * J17 - allowed. * 171 - not allowed. * John-7 - allowed. &gt; If provided details don&#39;t match the required format, the response returns the error message: 203 &#39;Invalid bank account holder name&#39;.</value>
        [JsonPropertyName("ownerName")]
        public string OwnerName { get { return this.OwnerNameOption; } set { this.OwnerNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TaxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TaxIdOption { get; private set; }

        /// <summary>
        /// The bank account holder&#39;s tax ID.
        /// </summary>
        /// <value>The bank account holder&#39;s tax ID.</value>
        [JsonPropertyName("taxId")]
        public string TaxId { get { return this.TaxIdOption; } set { this.TaxIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutBankAccount {\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  BankCity: ").Append(BankCity).Append("\n");
            sb.Append("  BankLocationId: ").Append(BankLocationId).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  Bic: ").Append(Bic).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheckoutBankAccount" />
    /// </summary>
    public class CheckoutBankAccountJsonConverter : JsonConverter<CheckoutBankAccount>
    {
        /// <summary>
        /// Deserializes json to <see cref="CheckoutBankAccount" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CheckoutBankAccount Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CheckoutBankAccount.AccountTypeEnum?> accountType = default;
            Option<string> bankAccountNumber = default;
            Option<string> bankCity = default;
            Option<string> bankLocationId = default;
            Option<string> bankName = default;
            Option<string> bic = default;
            Option<string> countryCode = default;
            Option<string> iban = default;
            Option<string> ownerName = default;
            Option<string> taxId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountType":
                            string accountTypeRawValue = utf8JsonReader.GetString();
                            if (accountTypeRawValue != null)
                                accountType = new Option<CheckoutBankAccount.AccountTypeEnum?>(CheckoutBankAccount.AccountTypeEnumFromStringOrDefault(accountTypeRawValue));
                            break;
                        case "bankAccountNumber":
                            bankAccountNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bankCity":
                            bankCity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bankLocationId":
                            bankLocationId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bankName":
                            bankName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bic":
                            bic = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "countryCode":
                            countryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "iban":
                            iban = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ownerName":
                            ownerName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "taxId":
                            taxId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accountType.IsSet && accountType.Value == null)
                throw new ArgumentNullException(nameof(accountType), "Property is not nullable for class CheckoutBankAccount.");

            if (bankAccountNumber.IsSet && bankAccountNumber.Value == null)
                throw new ArgumentNullException(nameof(bankAccountNumber), "Property is not nullable for class CheckoutBankAccount.");

            if (bankCity.IsSet && bankCity.Value == null)
                throw new ArgumentNullException(nameof(bankCity), "Property is not nullable for class CheckoutBankAccount.");

            if (bankLocationId.IsSet && bankLocationId.Value == null)
                throw new ArgumentNullException(nameof(bankLocationId), "Property is not nullable for class CheckoutBankAccount.");

            if (bankName.IsSet && bankName.Value == null)
                throw new ArgumentNullException(nameof(bankName), "Property is not nullable for class CheckoutBankAccount.");

            if (bic.IsSet && bic.Value == null)
                throw new ArgumentNullException(nameof(bic), "Property is not nullable for class CheckoutBankAccount.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class CheckoutBankAccount.");

            if (iban.IsSet && iban.Value == null)
                throw new ArgumentNullException(nameof(iban), "Property is not nullable for class CheckoutBankAccount.");

            if (ownerName.IsSet && ownerName.Value == null)
                throw new ArgumentNullException(nameof(ownerName), "Property is not nullable for class CheckoutBankAccount.");

            if (taxId.IsSet && taxId.Value == null)
                throw new ArgumentNullException(nameof(taxId), "Property is not nullable for class CheckoutBankAccount.");

            return new CheckoutBankAccount(accountType, bankAccountNumber, bankCity, bankLocationId, bankName, bic, countryCode, iban, ownerName, taxId);
        }

        /// <summary>
        /// Serializes a <see cref="CheckoutBankAccount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkoutBankAccount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CheckoutBankAccount checkoutBankAccount, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, checkoutBankAccount, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CheckoutBankAccount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkoutBankAccount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CheckoutBankAccount checkoutBankAccount, JsonSerializerOptions jsonSerializerOptions)
        {
            if (checkoutBankAccount.BankAccountNumberOption.IsSet && checkoutBankAccount.BankAccountNumber == null)
                throw new ArgumentNullException(nameof(checkoutBankAccount.BankAccountNumber), "Property is required for class CheckoutBankAccount.");

            if (checkoutBankAccount.BankCityOption.IsSet && checkoutBankAccount.BankCity == null)
                throw new ArgumentNullException(nameof(checkoutBankAccount.BankCity), "Property is required for class CheckoutBankAccount.");

            if (checkoutBankAccount.BankLocationIdOption.IsSet && checkoutBankAccount.BankLocationId == null)
                throw new ArgumentNullException(nameof(checkoutBankAccount.BankLocationId), "Property is required for class CheckoutBankAccount.");

            if (checkoutBankAccount.BankNameOption.IsSet && checkoutBankAccount.BankName == null)
                throw new ArgumentNullException(nameof(checkoutBankAccount.BankName), "Property is required for class CheckoutBankAccount.");

            if (checkoutBankAccount.BicOption.IsSet && checkoutBankAccount.Bic == null)
                throw new ArgumentNullException(nameof(checkoutBankAccount.Bic), "Property is required for class CheckoutBankAccount.");

            if (checkoutBankAccount.CountryCodeOption.IsSet && checkoutBankAccount.CountryCode == null)
                throw new ArgumentNullException(nameof(checkoutBankAccount.CountryCode), "Property is required for class CheckoutBankAccount.");

            if (checkoutBankAccount.IbanOption.IsSet && checkoutBankAccount.Iban == null)
                throw new ArgumentNullException(nameof(checkoutBankAccount.Iban), "Property is required for class CheckoutBankAccount.");

            if (checkoutBankAccount.OwnerNameOption.IsSet && checkoutBankAccount.OwnerName == null)
                throw new ArgumentNullException(nameof(checkoutBankAccount.OwnerName), "Property is required for class CheckoutBankAccount.");

            if (checkoutBankAccount.TaxIdOption.IsSet && checkoutBankAccount.TaxId == null)
                throw new ArgumentNullException(nameof(checkoutBankAccount.TaxId), "Property is required for class CheckoutBankAccount.");

            var accountTypeRawValue = CheckoutBankAccount.AccountTypeEnumToJsonValue(checkoutBankAccount.AccountTypeOption.Value.Value);
            writer.WriteString("accountType", accountTypeRawValue);
            if (checkoutBankAccount.BankAccountNumberOption.IsSet)
                writer.WriteString("bankAccountNumber", checkoutBankAccount.BankAccountNumber);

            if (checkoutBankAccount.BankCityOption.IsSet)
                writer.WriteString("bankCity", checkoutBankAccount.BankCity);

            if (checkoutBankAccount.BankLocationIdOption.IsSet)
                writer.WriteString("bankLocationId", checkoutBankAccount.BankLocationId);

            if (checkoutBankAccount.BankNameOption.IsSet)
                writer.WriteString("bankName", checkoutBankAccount.BankName);

            if (checkoutBankAccount.BicOption.IsSet)
                writer.WriteString("bic", checkoutBankAccount.Bic);

            if (checkoutBankAccount.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", checkoutBankAccount.CountryCode);

            if (checkoutBankAccount.IbanOption.IsSet)
                writer.WriteString("iban", checkoutBankAccount.Iban);

            if (checkoutBankAccount.OwnerNameOption.IsSet)
                writer.WriteString("ownerName", checkoutBankAccount.OwnerName);

            if (checkoutBankAccount.TaxIdOption.IsSet)
                writer.WriteString("taxId", checkoutBankAccount.TaxId);
        }
    }
}
