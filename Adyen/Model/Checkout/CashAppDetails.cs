/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// CashAppDetails
    /// </summary>
    [DataContract(Name = "CashAppDetails")]
    public partial class CashAppDetails : IEquatable<CashAppDetails>, IValidatableObject
    {
        /// <summary>
        /// cashapp
        /// </summary>
        /// <value>cashapp</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Cashapp for value: cashapp
            /// </summary>
            [EnumMember(Value = "cashapp")]
            Cashapp = 1

        }


        /// <summary>
        /// cashapp
        /// </summary>
        /// <value>cashapp</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CashAppDetails" /> class.
        /// </summary>
        /// <param name="cashtag">Cash App issued cashtag for recurring payment.</param>
        /// <param name="checkoutAttemptId">The checkout attempt identifier..</param>
        /// <param name="customerId">Cash App issued customerId for recurring payment.</param>
        /// <param name="grantId">Cash App issued grantId for one time payment.</param>
        /// <param name="onFileGrantId">Cash App issued onFileGrantId for recurring payment.</param>
        /// <param name="recurringDetailReference">This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token..</param>
        /// <param name="requestId">Cash App request id.</param>
        /// <param name="storedPaymentMethodId">This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token..</param>
        /// <param name="subtype">The payment method subtype..</param>
        /// <param name="type">cashapp (default to TypeEnum.Cashapp).</param>
        public CashAppDetails(string cashtag = default(string), string checkoutAttemptId = default(string), string customerId = default(string), string grantId = default(string), string onFileGrantId = default(string), string recurringDetailReference = default(string), string requestId = default(string), string storedPaymentMethodId = default(string), string subtype = default(string), TypeEnum? type = TypeEnum.Cashapp)
        {
            this.Cashtag = cashtag;
            this.CheckoutAttemptId = checkoutAttemptId;
            this.CustomerId = customerId;
            this.GrantId = grantId;
            this.OnFileGrantId = onFileGrantId;
            this.RecurringDetailReference = recurringDetailReference;
            this.RequestId = requestId;
            this.StoredPaymentMethodId = storedPaymentMethodId;
            this.Subtype = subtype;
            this.Type = type;
        }

        /// <summary>
        /// Cash App issued cashtag for recurring payment
        /// </summary>
        /// <value>Cash App issued cashtag for recurring payment</value>
        [DataMember(Name = "cashtag", EmitDefaultValue = false)]
        public string Cashtag { get; set; }

        /// <summary>
        /// The checkout attempt identifier.
        /// </summary>
        /// <value>The checkout attempt identifier.</value>
        [DataMember(Name = "checkoutAttemptId", EmitDefaultValue = false)]
        public string CheckoutAttemptId { get; set; }

        /// <summary>
        /// Cash App issued customerId for recurring payment
        /// </summary>
        /// <value>Cash App issued customerId for recurring payment</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Cash App issued grantId for one time payment
        /// </summary>
        /// <value>Cash App issued grantId for one time payment</value>
        [DataMember(Name = "grantId", EmitDefaultValue = false)]
        public string GrantId { get; set; }

        /// <summary>
        /// Cash App issued onFileGrantId for recurring payment
        /// </summary>
        /// <value>Cash App issued onFileGrantId for recurring payment</value>
        [DataMember(Name = "onFileGrantId", EmitDefaultValue = false)]
        public string OnFileGrantId { get; set; }

        /// <summary>
        /// This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.
        /// </summary>
        /// <value>This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</value>
        [DataMember(Name = "recurringDetailReference", EmitDefaultValue = false)]
        [Obsolete]
        public string RecurringDetailReference { get; set; }

        /// <summary>
        /// Cash App request id
        /// </summary>
        /// <value>Cash App request id</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.
        /// </summary>
        /// <value>This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</value>
        [DataMember(Name = "storedPaymentMethodId", EmitDefaultValue = false)]
        public string StoredPaymentMethodId { get; set; }

        /// <summary>
        /// The payment method subtype.
        /// </summary>
        /// <value>The payment method subtype.</value>
        [DataMember(Name = "subtype", EmitDefaultValue = false)]
        public string Subtype { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CashAppDetails {\n");
            sb.Append("  Cashtag: ").Append(Cashtag).Append("\n");
            sb.Append("  CheckoutAttemptId: ").Append(CheckoutAttemptId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  GrantId: ").Append(GrantId).Append("\n");
            sb.Append("  OnFileGrantId: ").Append(OnFileGrantId).Append("\n");
            sb.Append("  RecurringDetailReference: ").Append(RecurringDetailReference).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  StoredPaymentMethodId: ").Append(StoredPaymentMethodId).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashAppDetails);
        }

        /// <summary>
        /// Returns true if CashAppDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CashAppDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashAppDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Cashtag == input.Cashtag ||
                    (this.Cashtag != null &&
                    this.Cashtag.Equals(input.Cashtag))
                ) && 
                (
                    this.CheckoutAttemptId == input.CheckoutAttemptId ||
                    (this.CheckoutAttemptId != null &&
                    this.CheckoutAttemptId.Equals(input.CheckoutAttemptId))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.GrantId == input.GrantId ||
                    (this.GrantId != null &&
                    this.GrantId.Equals(input.GrantId))
                ) && 
                (
                    this.OnFileGrantId == input.OnFileGrantId ||
                    (this.OnFileGrantId != null &&
                    this.OnFileGrantId.Equals(input.OnFileGrantId))
                ) && 
                (
                    this.RecurringDetailReference == input.RecurringDetailReference ||
                    (this.RecurringDetailReference != null &&
                    this.RecurringDetailReference.Equals(input.RecurringDetailReference))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.StoredPaymentMethodId == input.StoredPaymentMethodId ||
                    (this.StoredPaymentMethodId != null &&
                    this.StoredPaymentMethodId.Equals(input.StoredPaymentMethodId))
                ) && 
                (
                    this.Subtype == input.Subtype ||
                    (this.Subtype != null &&
                    this.Subtype.Equals(input.Subtype))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cashtag != null)
                {
                    hashCode = (hashCode * 59) + this.Cashtag.GetHashCode();
                }
                if (this.CheckoutAttemptId != null)
                {
                    hashCode = (hashCode * 59) + this.CheckoutAttemptId.GetHashCode();
                }
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                if (this.GrantId != null)
                {
                    hashCode = (hashCode * 59) + this.GrantId.GetHashCode();
                }
                if (this.OnFileGrantId != null)
                {
                    hashCode = (hashCode * 59) + this.OnFileGrantId.GetHashCode();
                }
                if (this.RecurringDetailReference != null)
                {
                    hashCode = (hashCode * 59) + this.RecurringDetailReference.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.StoredPaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.StoredPaymentMethodId.GetHashCode();
                }
                if (this.Subtype != null)
                {
                    hashCode = (hashCode * 59) + this.Subtype.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StoredPaymentMethodId (string) maxLength
            if (this.StoredPaymentMethodId != null && this.StoredPaymentMethodId.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StoredPaymentMethodId, length must be less than 64.", new [] { "StoredPaymentMethodId" });
            }

            yield break;
        }
    }

}
