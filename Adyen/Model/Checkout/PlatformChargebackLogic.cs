// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PlatformChargebackLogic
    /// </summary>
    public partial class PlatformChargebackLogic : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlatformChargebackLogic" /> class.
        /// </summary>
        /// <param name="behavior">The method of handling the chargeback.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.</param>
        /// <param name="costAllocationAccount">The unique identifier of the balance account to which the chargeback fees are booked. By default, the chargeback fees are booked to your liable balance account.</param>
        /// <param name="targetAccount">The unique identifier of the balance account against which the disputed amount is booked.  Required if &#x60;behavior&#x60; is **deductFromOneBalanceAccount**.</param>
        [JsonConstructor]
        public PlatformChargebackLogic(Option<BehaviorEnum?> behavior = default, Option<string> costAllocationAccount = default, Option<string> targetAccount = default)
        {
            BehaviorOption = behavior;
            CostAllocationAccountOption = costAllocationAccount;
            TargetAccountOption = targetAccount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The method of handling the chargeback.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.
        /// </summary>
        /// <value>The method of handling the chargeback.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.</value>
        public enum BehaviorEnum
        {
            /// <summary>
            /// Enum DeductAccordingToSplitRatio for value: deductAccordingToSplitRatio
            /// </summary>
            DeductAccordingToSplitRatio = 1,

            /// <summary>
            /// Enum DeductFromLiableAccount for value: deductFromLiableAccount
            /// </summary>
            DeductFromLiableAccount = 2,

            /// <summary>
            /// Enum DeductFromOneBalanceAccount for value: deductFromOneBalanceAccount
            /// </summary>
            DeductFromOneBalanceAccount = 3
        }

        /// <summary>
        /// Returns a <see cref="BehaviorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static BehaviorEnum BehaviorEnumFromString(string value)
        {
            if (value.Equals("deductAccordingToSplitRatio"))
                return BehaviorEnum.DeductAccordingToSplitRatio;

            if (value.Equals("deductFromLiableAccount"))
                return BehaviorEnum.DeductFromLiableAccount;

            if (value.Equals("deductFromOneBalanceAccount"))
                return BehaviorEnum.DeductFromOneBalanceAccount;

            throw new NotImplementedException($"Could not convert value to type BehaviorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="BehaviorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BehaviorEnum? BehaviorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("deductAccordingToSplitRatio"))
                return BehaviorEnum.DeductAccordingToSplitRatio;

            if (value.Equals("deductFromLiableAccount"))
                return BehaviorEnum.DeductFromLiableAccount;

            if (value.Equals("deductFromOneBalanceAccount"))
                return BehaviorEnum.DeductFromOneBalanceAccount;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BehaviorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string BehaviorEnumToJsonValue(BehaviorEnum? value)
        {
            if (value == BehaviorEnum.DeductAccordingToSplitRatio)
                return "deductAccordingToSplitRatio";

            if (value == BehaviorEnum.DeductFromLiableAccount)
                return "deductFromLiableAccount";

            if (value == BehaviorEnum.DeductFromOneBalanceAccount)
                return "deductFromOneBalanceAccount";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Behavior
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BehaviorEnum?> BehaviorOption { get; private set; }

        /// <summary>
        /// The method of handling the chargeback.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.
        /// </summary>
        /// <value>The method of handling the chargeback.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.</value>
        [JsonPropertyName("behavior")]
        public BehaviorEnum? Behavior { get { return this.BehaviorOption; } set { this.BehaviorOption = new Option<BehaviorEnum?>(value); } }

        /// <summary>
        /// Used to track the state of CostAllocationAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CostAllocationAccountOption { get; private set; }

        /// <summary>
        /// The unique identifier of the balance account to which the chargeback fees are booked. By default, the chargeback fees are booked to your liable balance account.
        /// </summary>
        /// <value>The unique identifier of the balance account to which the chargeback fees are booked. By default, the chargeback fees are booked to your liable balance account.</value>
        [JsonPropertyName("costAllocationAccount")]
        public string CostAllocationAccount { get { return this.CostAllocationAccountOption; } set { this.CostAllocationAccountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TargetAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TargetAccountOption { get; private set; }

        /// <summary>
        /// The unique identifier of the balance account against which the disputed amount is booked.  Required if &#x60;behavior&#x60; is **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>The unique identifier of the balance account against which the disputed amount is booked.  Required if &#x60;behavior&#x60; is **deductFromOneBalanceAccount**.</value>
        [JsonPropertyName("targetAccount")]
        public string TargetAccount { get { return this.TargetAccountOption; } set { this.TargetAccountOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlatformChargebackLogic {\n");
            sb.Append("  Behavior: ").Append(Behavior).Append("\n");
            sb.Append("  CostAllocationAccount: ").Append(CostAllocationAccount).Append("\n");
            sb.Append("  TargetAccount: ").Append(TargetAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlatformChargebackLogic" />
    /// </summary>
    public class PlatformChargebackLogicJsonConverter : JsonConverter<PlatformChargebackLogic>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlatformChargebackLogic" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlatformChargebackLogic Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<PlatformChargebackLogic.BehaviorEnum?> behavior = default;
            Option<string> costAllocationAccount = default;
            Option<string> targetAccount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "behavior":
                            string behaviorRawValue = utf8JsonReader.GetString();
                            if (behaviorRawValue != null)
                                behavior = new Option<PlatformChargebackLogic.BehaviorEnum?>(PlatformChargebackLogic.BehaviorEnumFromStringOrDefault(behaviorRawValue));
                            break;
                        case "costAllocationAccount":
                            costAllocationAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "targetAccount":
                            targetAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (behavior.IsSet && behavior.Value == null)
                throw new ArgumentNullException(nameof(behavior), "Property is not nullable for class PlatformChargebackLogic.");

            if (costAllocationAccount.IsSet && costAllocationAccount.Value == null)
                throw new ArgumentNullException(nameof(costAllocationAccount), "Property is not nullable for class PlatformChargebackLogic.");

            if (targetAccount.IsSet && targetAccount.Value == null)
                throw new ArgumentNullException(nameof(targetAccount), "Property is not nullable for class PlatformChargebackLogic.");

            return new PlatformChargebackLogic(behavior, costAllocationAccount, targetAccount);
        }

        /// <summary>
        /// Serializes a <see cref="PlatformChargebackLogic" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="platformChargebackLogic"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlatformChargebackLogic platformChargebackLogic, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, platformChargebackLogic, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlatformChargebackLogic" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="platformChargebackLogic"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlatformChargebackLogic platformChargebackLogic, JsonSerializerOptions jsonSerializerOptions)
        {
            if (platformChargebackLogic.CostAllocationAccountOption.IsSet && platformChargebackLogic.CostAllocationAccount == null)
                throw new ArgumentNullException(nameof(platformChargebackLogic.CostAllocationAccount), "Property is required for class PlatformChargebackLogic.");

            if (platformChargebackLogic.TargetAccountOption.IsSet && platformChargebackLogic.TargetAccount == null)
                throw new ArgumentNullException(nameof(platformChargebackLogic.TargetAccount), "Property is required for class PlatformChargebackLogic.");

            var behaviorRawValue = PlatformChargebackLogic.BehaviorEnumToJsonValue(platformChargebackLogic.BehaviorOption.Value.Value);
            writer.WriteString("behavior", behaviorRawValue);
            if (platformChargebackLogic.CostAllocationAccountOption.IsSet)
                writer.WriteString("costAllocationAccount", platformChargebackLogic.CostAllocationAccount);

            if (platformChargebackLogic.TargetAccountOption.IsSet)
                writer.WriteString("targetAccount", platformChargebackLogic.TargetAccount);
        }
    }
}
