// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ListStoredPaymentMethodsResponse
    /// </summary>
    public partial class ListStoredPaymentMethodsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListStoredPaymentMethodsResponse" /> class.
        /// </summary>
        /// <param name="merchantAccount">Your merchant account.</param>
        /// <param name="shopperReference">Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.</param>
        /// <param name="storedPaymentMethods">List of all stored payment methods.</param>
        [JsonConstructor]
        public ListStoredPaymentMethodsResponse(Option<string> merchantAccount = default, Option<string> shopperReference = default, Option<List<StoredPaymentMethodResource>> storedPaymentMethods = default)
        {
            MerchantAccountOption = merchantAccount;
            ShopperReferenceOption = shopperReference;
            StoredPaymentMethodsOption = storedPaymentMethods;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MerchantAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MerchantAccountOption { get; private set; }

        /// <summary>
        /// Your merchant account.
        /// </summary>
        /// <value>Your merchant account.</value>
        [JsonPropertyName("merchantAccount")]
        public string MerchantAccount { get { return this.MerchantAccountOption; } set { this.MerchantAccountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperReferenceOption { get; private set; }

        /// <summary>
        /// Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.
        /// </summary>
        /// <value>Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.</value>
        [JsonPropertyName("shopperReference")]
        public string ShopperReference { get { return this.ShopperReferenceOption; } set { this.ShopperReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StoredPaymentMethods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<StoredPaymentMethodResource>> StoredPaymentMethodsOption { get; private set; }

        /// <summary>
        /// List of all stored payment methods.
        /// </summary>
        /// <value>List of all stored payment methods.</value>
        [JsonPropertyName("storedPaymentMethods")]
        public List<StoredPaymentMethodResource> StoredPaymentMethods { get { return this.StoredPaymentMethodsOption; } set { this.StoredPaymentMethodsOption = new Option<List<StoredPaymentMethodResource>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListStoredPaymentMethodsResponse {\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("  StoredPaymentMethods: ").Append(StoredPaymentMethods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ListStoredPaymentMethodsResponse" />
    /// </summary>
    public class ListStoredPaymentMethodsResponseJsonConverter : JsonConverter<ListStoredPaymentMethodsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListStoredPaymentMethodsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListStoredPaymentMethodsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> merchantAccount = default;
            Option<string> shopperReference = default;
            Option<List<StoredPaymentMethodResource>> storedPaymentMethods = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "merchantAccount":
                            merchantAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperReference":
                            shopperReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "storedPaymentMethods":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                storedPaymentMethods = new Option<List<StoredPaymentMethodResource>>(JsonSerializer.Deserialize<List<StoredPaymentMethodResource>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount), "Property is not nullable for class ListStoredPaymentMethodsResponse.");

            if (shopperReference.IsSet && shopperReference.Value == null)
                throw new ArgumentNullException(nameof(shopperReference), "Property is not nullable for class ListStoredPaymentMethodsResponse.");

            if (storedPaymentMethods.IsSet && storedPaymentMethods.Value == null)
                throw new ArgumentNullException(nameof(storedPaymentMethods), "Property is not nullable for class ListStoredPaymentMethodsResponse.");

            return new ListStoredPaymentMethodsResponse(merchantAccount, shopperReference, storedPaymentMethods);
        }

        /// <summary>
        /// Serializes a <see cref="ListStoredPaymentMethodsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listStoredPaymentMethodsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListStoredPaymentMethodsResponse listStoredPaymentMethodsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, listStoredPaymentMethodsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ListStoredPaymentMethodsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listStoredPaymentMethodsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListStoredPaymentMethodsResponse listStoredPaymentMethodsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listStoredPaymentMethodsResponse.MerchantAccountOption.IsSet && listStoredPaymentMethodsResponse.MerchantAccount == null)
                throw new ArgumentNullException(nameof(listStoredPaymentMethodsResponse.MerchantAccount), "Property is required for class ListStoredPaymentMethodsResponse.");

            if (listStoredPaymentMethodsResponse.ShopperReferenceOption.IsSet && listStoredPaymentMethodsResponse.ShopperReference == null)
                throw new ArgumentNullException(nameof(listStoredPaymentMethodsResponse.ShopperReference), "Property is required for class ListStoredPaymentMethodsResponse.");

            if (listStoredPaymentMethodsResponse.StoredPaymentMethodsOption.IsSet && listStoredPaymentMethodsResponse.StoredPaymentMethods == null)
                throw new ArgumentNullException(nameof(listStoredPaymentMethodsResponse.StoredPaymentMethods), "Property is required for class ListStoredPaymentMethodsResponse.");

            if (listStoredPaymentMethodsResponse.MerchantAccountOption.IsSet)
                writer.WriteString("merchantAccount", listStoredPaymentMethodsResponse.MerchantAccount);

            if (listStoredPaymentMethodsResponse.ShopperReferenceOption.IsSet)
                writer.WriteString("shopperReference", listStoredPaymentMethodsResponse.ShopperReference);

            if (listStoredPaymentMethodsResponse.StoredPaymentMethodsOption.IsSet)
            {
                writer.WritePropertyName("storedPaymentMethods");
                JsonSerializer.Serialize(writer, listStoredPaymentMethodsResponse.StoredPaymentMethods, jsonSerializerOptions);
            }
        }
    }
}
