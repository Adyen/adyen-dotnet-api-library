// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// SepaDirectDebitDetails
    /// </summary>
    public partial class SepaDirectDebitDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SepaDirectDebitDetails" /> class.
        /// </summary>
        /// <param name="iban">The International Bank Account Number (IBAN).</param>
        /// <param name="ownerName">The name of the bank account holder.</param>
        /// <param name="checkoutAttemptId">The checkout attempt identifier.</param>
        /// <param name="recurringDetailReference">This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</param>
        /// <param name="storedPaymentMethodId">This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</param>
        /// <param name="transferInstrumentId">The unique identifier of your user&#39;s verified transfer instrument, which you can use to top up their balance accounts.</param>
        /// <param name="type">**sepadirectdebit** (default to TypeEnum.Sepadirectdebit)</param>
        [JsonConstructor]
        public SepaDirectDebitDetails(string iban, string ownerName, Option<string> checkoutAttemptId = default, Option<string> recurringDetailReference = default, Option<string> storedPaymentMethodId = default, Option<string> transferInstrumentId = default, Option<TypeEnum?> type = default)
        {
            Iban = iban;
            OwnerName = ownerName;
            CheckoutAttemptIdOption = checkoutAttemptId;
            RecurringDetailReferenceOption = recurringDetailReference;
            StoredPaymentMethodIdOption = storedPaymentMethodId;
            TransferInstrumentIdOption = transferInstrumentId;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// **sepadirectdebit**
        /// </summary>
        /// <value>**sepadirectdebit**</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Sepadirectdebit for value: sepadirectdebit
            /// </summary>
            Sepadirectdebit = 1,

            /// <summary>
            /// Enum SepadirectdebitAmazonpay for value: sepadirectdebit_amazonpay
            /// </summary>
            SepadirectdebitAmazonpay = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("sepadirectdebit"))
                return TypeEnum.Sepadirectdebit;

            if (value.Equals("sepadirectdebit_amazonpay"))
                return TypeEnum.SepadirectdebitAmazonpay;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("sepadirectdebit"))
                return TypeEnum.Sepadirectdebit;

            if (value.Equals("sepadirectdebit_amazonpay"))
                return TypeEnum.SepadirectdebitAmazonpay;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Sepadirectdebit)
                return "sepadirectdebit";

            if (value == TypeEnum.SepadirectdebitAmazonpay)
                return "sepadirectdebit_amazonpay";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// **sepadirectdebit**
        /// </summary>
        /// <value>**sepadirectdebit**</value>
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// The International Bank Account Number (IBAN).
        /// </summary>
        /// <value>The International Bank Account Number (IBAN).</value>
        [JsonPropertyName("iban")]
        public string Iban { get; set; }

        /// <summary>
        /// The name of the bank account holder.
        /// </summary>
        /// <value>The name of the bank account holder.</value>
        [JsonPropertyName("ownerName")]
        public string OwnerName { get; set; }

        /// <summary>
        /// Used to track the state of CheckoutAttemptId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CheckoutAttemptIdOption { get; private set; }

        /// <summary>
        /// The checkout attempt identifier.
        /// </summary>
        /// <value>The checkout attempt identifier.</value>
        [JsonPropertyName("checkoutAttemptId")]
        public string CheckoutAttemptId { get { return this.CheckoutAttemptIdOption; } set { this.CheckoutAttemptIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecurringDetailReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringDetailReferenceOption { get; private set; }

        /// <summary>
        /// This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.
        /// </summary>
        /// <value>This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</value>
        [JsonPropertyName("recurringDetailReference")]
        [Obsolete]
        public string RecurringDetailReference { get { return this.RecurringDetailReferenceOption; } set { this.RecurringDetailReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StoredPaymentMethodId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StoredPaymentMethodIdOption { get; private set; }

        /// <summary>
        /// This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.
        /// </summary>
        /// <value>This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</value>
        [JsonPropertyName("storedPaymentMethodId")]
        public string StoredPaymentMethodId { get { return this.StoredPaymentMethodIdOption; } set { this.StoredPaymentMethodIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TransferInstrumentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TransferInstrumentIdOption { get; private set; }

        /// <summary>
        /// The unique identifier of your user&#39;s verified transfer instrument, which you can use to top up their balance accounts.
        /// </summary>
        /// <value>The unique identifier of your user&#39;s verified transfer instrument, which you can use to top up their balance accounts.</value>
        [JsonPropertyName("transferInstrumentId")]
        public string TransferInstrumentId { get { return this.TransferInstrumentIdOption; } set { this.TransferInstrumentIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SepaDirectDebitDetails {\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  CheckoutAttemptId: ").Append(CheckoutAttemptId).Append("\n");
            sb.Append("  RecurringDetailReference: ").Append(RecurringDetailReference).Append("\n");
            sb.Append("  StoredPaymentMethodId: ").Append(StoredPaymentMethodId).Append("\n");
            sb.Append("  TransferInstrumentId: ").Append(TransferInstrumentId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StoredPaymentMethodId (string) maxLength
            if (this.StoredPaymentMethodId != null && this.StoredPaymentMethodId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for StoredPaymentMethodId, length must be less than 64.", new [] { "StoredPaymentMethodId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SepaDirectDebitDetails" />
    /// </summary>
    public class SepaDirectDebitDetailsJsonConverter : JsonConverter<SepaDirectDebitDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="SepaDirectDebitDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SepaDirectDebitDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> iban = default;
            Option<string> ownerName = default;
            Option<string> checkoutAttemptId = default;
            Option<string> recurringDetailReference = default;
            Option<string> storedPaymentMethodId = default;
            Option<string> transferInstrumentId = default;
            Option<SepaDirectDebitDetails.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "iban":
                            iban = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ownerName":
                            ownerName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "checkoutAttemptId":
                            checkoutAttemptId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurringDetailReference":
                            recurringDetailReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "storedPaymentMethodId":
                            storedPaymentMethodId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "transferInstrumentId":
                            transferInstrumentId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<SepaDirectDebitDetails.TypeEnum?>(SepaDirectDebitDetails.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!iban.IsSet)
                throw new ArgumentException("Property is required for class SepaDirectDebitDetails.", nameof(iban));

            if (!ownerName.IsSet)
                throw new ArgumentException("Property is required for class SepaDirectDebitDetails.", nameof(ownerName));

            if (iban.IsSet && iban.Value == null)
                throw new ArgumentNullException(nameof(iban), "Property is not nullable for class SepaDirectDebitDetails.");

            if (ownerName.IsSet && ownerName.Value == null)
                throw new ArgumentNullException(nameof(ownerName), "Property is not nullable for class SepaDirectDebitDetails.");

            if (checkoutAttemptId.IsSet && checkoutAttemptId.Value == null)
                throw new ArgumentNullException(nameof(checkoutAttemptId), "Property is not nullable for class SepaDirectDebitDetails.");

            if (recurringDetailReference.IsSet && recurringDetailReference.Value == null)
                throw new ArgumentNullException(nameof(recurringDetailReference), "Property is not nullable for class SepaDirectDebitDetails.");

            if (storedPaymentMethodId.IsSet && storedPaymentMethodId.Value == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodId), "Property is not nullable for class SepaDirectDebitDetails.");

            if (transferInstrumentId.IsSet && transferInstrumentId.Value == null)
                throw new ArgumentNullException(nameof(transferInstrumentId), "Property is not nullable for class SepaDirectDebitDetails.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class SepaDirectDebitDetails.");

            return new SepaDirectDebitDetails(iban.Value, ownerName.Value, checkoutAttemptId, recurringDetailReference, storedPaymentMethodId, transferInstrumentId, type);
        }

        /// <summary>
        /// Serializes a <see cref="SepaDirectDebitDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sepaDirectDebitDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SepaDirectDebitDetails sepaDirectDebitDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sepaDirectDebitDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SepaDirectDebitDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sepaDirectDebitDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SepaDirectDebitDetails sepaDirectDebitDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sepaDirectDebitDetails.Iban == null)
                throw new ArgumentNullException(nameof(sepaDirectDebitDetails.Iban), "Property is required for class SepaDirectDebitDetails.");

            if (sepaDirectDebitDetails.OwnerName == null)
                throw new ArgumentNullException(nameof(sepaDirectDebitDetails.OwnerName), "Property is required for class SepaDirectDebitDetails.");

            if (sepaDirectDebitDetails.CheckoutAttemptIdOption.IsSet && sepaDirectDebitDetails.CheckoutAttemptId == null)
                throw new ArgumentNullException(nameof(sepaDirectDebitDetails.CheckoutAttemptId), "Property is required for class SepaDirectDebitDetails.");

            if (sepaDirectDebitDetails.RecurringDetailReferenceOption.IsSet && sepaDirectDebitDetails.RecurringDetailReference == null)
                throw new ArgumentNullException(nameof(sepaDirectDebitDetails.RecurringDetailReference), "Property is required for class SepaDirectDebitDetails.");

            if (sepaDirectDebitDetails.StoredPaymentMethodIdOption.IsSet && sepaDirectDebitDetails.StoredPaymentMethodId == null)
                throw new ArgumentNullException(nameof(sepaDirectDebitDetails.StoredPaymentMethodId), "Property is required for class SepaDirectDebitDetails.");

            if (sepaDirectDebitDetails.TransferInstrumentIdOption.IsSet && sepaDirectDebitDetails.TransferInstrumentId == null)
                throw new ArgumentNullException(nameof(sepaDirectDebitDetails.TransferInstrumentId), "Property is required for class SepaDirectDebitDetails.");

            writer.WriteString("iban", sepaDirectDebitDetails.Iban);

            writer.WriteString("ownerName", sepaDirectDebitDetails.OwnerName);

            if (sepaDirectDebitDetails.CheckoutAttemptIdOption.IsSet)
                writer.WriteString("checkoutAttemptId", sepaDirectDebitDetails.CheckoutAttemptId);

            if (sepaDirectDebitDetails.RecurringDetailReferenceOption.IsSet)
                writer.WriteString("recurringDetailReference", sepaDirectDebitDetails.RecurringDetailReference);

            if (sepaDirectDebitDetails.StoredPaymentMethodIdOption.IsSet)
                writer.WriteString("storedPaymentMethodId", sepaDirectDebitDetails.StoredPaymentMethodId);

            if (sepaDirectDebitDetails.TransferInstrumentIdOption.IsSet)
                writer.WriteString("transferInstrumentId", sepaDirectDebitDetails.TransferInstrumentId);

            var typeRawValue = SepaDirectDebitDetails.TypeEnumToJsonValue(sepaDirectDebitDetails.TypeOption.Value.Value);
            writer.WriteString("type", typeRawValue);
        }
    }
}
