// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// SubMerchantInfo
    /// </summary>
    public partial class SubMerchantInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubMerchantInfo" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="amount">amount</param>
        /// <param name="email">Required for transactions performed by registered payment facilitators. The email associated with the sub-merchant&#39;s account.</param>
        /// <param name="id">Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant.  * Format: Alphanumeric * Maximum length: 15 characters</param>
        /// <param name="mcc">Required for transactions performed by registered payment facilitators. The sub-merchant&#39;s 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits</param>
        /// <param name="name">Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters</param>
        /// <param name="phoneNumber">Required for transactions performed by registered payment facilitators. The phone number associated with the sub-merchant&#39;s account.</param>
        /// <param name="registeredSince">registeredSince</param>
        /// <param name="taxId">Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ</param>
        /// <param name="url">Required for transactions performed by registered payment facilitators. The sub-merchant&#39;s URL on the platform, i.e. the sub-merchant&#39;s shop.</param>
        [JsonConstructor]
        public SubMerchantInfo(Option<BillingAddress> address = default, Option<Amount> amount = default, Option<string> email = default, Option<string> id = default, Option<string> mcc = default, Option<string> name = default, Option<string> phoneNumber = default, Option<string> registeredSince = default, Option<string> taxId = default, Option<string> url = default)
        {
            AddressOption = address;
            AmountOption = amount;
            EmailOption = email;
            IdOption = id;
            MccOption = mcc;
            NameOption = name;
            PhoneNumberOption = phoneNumber;
            RegisteredSinceOption = registeredSince;
            TaxIdOption = taxId;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BillingAddress> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public BillingAddress Address { get { return this.AddressOption; } set { this.AddressOption = new Option<BillingAddress>(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> AmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public Amount Amount { get { return this.AmountOption; } set { this.AmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The email associated with the sub-merchant&#39;s account.
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The email associated with the sub-merchant&#39;s account.</value>
        [JsonPropertyName("email")]
        public string Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant.  * Format: Alphanumeric * Maximum length: 15 characters
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant.  * Format: Alphanumeric * Maximum length: 15 characters</value>
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Mcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MccOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The sub-merchant&#39;s 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The sub-merchant&#39;s 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits</value>
        [JsonPropertyName("mcc")]
        public string Mcc { get { return this.MccOption; } set { this.MccOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneNumberOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The phone number associated with the sub-merchant&#39;s account.
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The phone number associated with the sub-merchant&#39;s account.</value>
        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get { return this.PhoneNumberOption; } set { this.PhoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RegisteredSince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RegisteredSinceOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegisteredSince
        /// </summary>
        [JsonPropertyName("registeredSince")]
        public string RegisteredSince { get { return this.RegisteredSinceOption; } set { this.RegisteredSinceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TaxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TaxIdOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ</value>
        [JsonPropertyName("taxId")]
        public string TaxId { get { return this.TaxIdOption; } set { this.TaxIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UrlOption { get; private set; }

        /// <summary>
        /// Required for transactions performed by registered payment facilitators. The sub-merchant&#39;s URL on the platform, i.e. the sub-merchant&#39;s shop.
        /// </summary>
        /// <value>Required for transactions performed by registered payment facilitators. The sub-merchant&#39;s URL on the platform, i.e. the sub-merchant&#39;s shop.</value>
        [JsonPropertyName("url")]
        public string Url { get { return this.UrlOption; } set { this.UrlOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubMerchantInfo {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  RegisteredSince: ").Append(RegisteredSince).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 320)
            {
                yield return new ValidationResult("Invalid value for Email, length must be less than 320.", new [] { "Email" });
            }

            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be less than 20.", new [] { "PhoneNumber" });
            }

            // Url (string) maxLength
            if (this.Url != null && this.Url.Length > 320)
            {
                yield return new ValidationResult("Invalid value for Url, length must be less than 320.", new [] { "Url" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubMerchantInfo" />
    /// </summary>
    public class SubMerchantInfoJsonConverter : JsonConverter<SubMerchantInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="SubMerchantInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SubMerchantInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<BillingAddress> address = default;
            Option<Amount> amount = default;
            Option<string> email = default;
            Option<string> id = default;
            Option<string> mcc = default;
            Option<string> name = default;
            Option<string> phoneNumber = default;
            Option<string> registeredSince = default;
            Option<string> taxId = default;
            Option<string> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                address = new Option<BillingAddress>(JsonSerializer.Deserialize<BillingAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "email":
                            email = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mcc":
                            mcc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phoneNumber":
                            phoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "registeredSince":
                            registeredSince = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "taxId":
                            taxId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class SubMerchantInfo.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class SubMerchantInfo.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class SubMerchantInfo.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SubMerchantInfo.");

            if (mcc.IsSet && mcc.Value == null)
                throw new ArgumentNullException(nameof(mcc), "Property is not nullable for class SubMerchantInfo.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class SubMerchantInfo.");

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber), "Property is not nullable for class SubMerchantInfo.");

            if (registeredSince.IsSet && registeredSince.Value == null)
                throw new ArgumentNullException(nameof(registeredSince), "Property is not nullable for class SubMerchantInfo.");

            if (taxId.IsSet && taxId.Value == null)
                throw new ArgumentNullException(nameof(taxId), "Property is not nullable for class SubMerchantInfo.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class SubMerchantInfo.");

            return new SubMerchantInfo(address, amount, email, id, mcc, name, phoneNumber, registeredSince, taxId, url);
        }

        /// <summary>
        /// Serializes a <see cref="SubMerchantInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subMerchantInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SubMerchantInfo subMerchantInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, subMerchantInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SubMerchantInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subMerchantInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SubMerchantInfo subMerchantInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (subMerchantInfo.AddressOption.IsSet && subMerchantInfo.Address == null)
                throw new ArgumentNullException(nameof(subMerchantInfo.Address), "Property is required for class SubMerchantInfo.");

            if (subMerchantInfo.AmountOption.IsSet && subMerchantInfo.Amount == null)
                throw new ArgumentNullException(nameof(subMerchantInfo.Amount), "Property is required for class SubMerchantInfo.");

            if (subMerchantInfo.EmailOption.IsSet && subMerchantInfo.Email == null)
                throw new ArgumentNullException(nameof(subMerchantInfo.Email), "Property is required for class SubMerchantInfo.");

            if (subMerchantInfo.IdOption.IsSet && subMerchantInfo.Id == null)
                throw new ArgumentNullException(nameof(subMerchantInfo.Id), "Property is required for class SubMerchantInfo.");

            if (subMerchantInfo.MccOption.IsSet && subMerchantInfo.Mcc == null)
                throw new ArgumentNullException(nameof(subMerchantInfo.Mcc), "Property is required for class SubMerchantInfo.");

            if (subMerchantInfo.NameOption.IsSet && subMerchantInfo.Name == null)
                throw new ArgumentNullException(nameof(subMerchantInfo.Name), "Property is required for class SubMerchantInfo.");

            if (subMerchantInfo.PhoneNumberOption.IsSet && subMerchantInfo.PhoneNumber == null)
                throw new ArgumentNullException(nameof(subMerchantInfo.PhoneNumber), "Property is required for class SubMerchantInfo.");

            if (subMerchantInfo.RegisteredSinceOption.IsSet && subMerchantInfo.RegisteredSince == null)
                throw new ArgumentNullException(nameof(subMerchantInfo.RegisteredSince), "Property is required for class SubMerchantInfo.");

            if (subMerchantInfo.TaxIdOption.IsSet && subMerchantInfo.TaxId == null)
                throw new ArgumentNullException(nameof(subMerchantInfo.TaxId), "Property is required for class SubMerchantInfo.");

            if (subMerchantInfo.UrlOption.IsSet && subMerchantInfo.Url == null)
                throw new ArgumentNullException(nameof(subMerchantInfo.Url), "Property is required for class SubMerchantInfo.");

            if (subMerchantInfo.AddressOption.IsSet)
            {
                writer.WritePropertyName("address");
                JsonSerializer.Serialize(writer, subMerchantInfo.Address, jsonSerializerOptions);
            }
            if (subMerchantInfo.AmountOption.IsSet)
            {
                writer.WritePropertyName("amount");
                JsonSerializer.Serialize(writer, subMerchantInfo.Amount, jsonSerializerOptions);
            }
            if (subMerchantInfo.EmailOption.IsSet)
                writer.WriteString("email", subMerchantInfo.Email);

            if (subMerchantInfo.IdOption.IsSet)
                writer.WriteString("id", subMerchantInfo.Id);

            if (subMerchantInfo.MccOption.IsSet)
                writer.WriteString("mcc", subMerchantInfo.Mcc);

            if (subMerchantInfo.NameOption.IsSet)
                writer.WriteString("name", subMerchantInfo.Name);

            if (subMerchantInfo.PhoneNumberOption.IsSet)
                writer.WriteString("phoneNumber", subMerchantInfo.PhoneNumber);

            if (subMerchantInfo.RegisteredSinceOption.IsSet)
                writer.WriteString("registeredSince", subMerchantInfo.RegisteredSince);

            if (subMerchantInfo.TaxIdOption.IsSet)
                writer.WriteString("taxId", subMerchantInfo.TaxId);

            if (subMerchantInfo.UrlOption.IsSet)
                writer.WriteString("url", subMerchantInfo.Url);
        }
    }
}
