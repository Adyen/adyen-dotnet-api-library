// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// DeviceRenderOptions
    /// </summary>
    public partial class DeviceRenderOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceRenderOptions" /> class.
        /// </summary>
        /// <param name="sdkInterface">Supported SDK interface types. Allowed values: * native * html * both (default to SdkInterfaceEnum.Both)</param>
        /// <param name="sdkUiType">UI types supported for displaying specific challenges. Allowed values: * text * singleSelect * outOfBand * otherHtml * multiSelect</param>
        [JsonConstructor]
        public DeviceRenderOptions(Option<SdkInterfaceEnum?> sdkInterface = default, Option<List<DeviceRenderOptions.SdkUiTypeEnum>> sdkUiType = default)
        {
            SdkInterfaceOption = sdkInterface;
            SdkUiTypeOption = sdkUiType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Supported SDK interface types. Allowed values: * native * html * both
        /// </summary>
        /// <value>Supported SDK interface types. Allowed values: * native * html * both</value>
        public enum SdkInterfaceEnum
        {
            /// <summary>
            /// Enum Native for value: native
            /// </summary>
            Native = 1,

            /// <summary>
            /// Enum Html for value: html
            /// </summary>
            Html = 2,

            /// <summary>
            /// Enum Both for value: both
            /// </summary>
            Both = 3
        }

        /// <summary>
        /// Returns a <see cref="SdkInterfaceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SdkInterfaceEnum SdkInterfaceEnumFromString(string value)
        {
            if (value.Equals("native"))
                return SdkInterfaceEnum.Native;

            if (value.Equals("html"))
                return SdkInterfaceEnum.Html;

            if (value.Equals("both"))
                return SdkInterfaceEnum.Both;

            throw new NotImplementedException($"Could not convert value to type SdkInterfaceEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SdkInterfaceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SdkInterfaceEnum? SdkInterfaceEnumFromStringOrDefault(string value)
        {
            if (value.Equals("native"))
                return SdkInterfaceEnum.Native;

            if (value.Equals("html"))
                return SdkInterfaceEnum.Html;

            if (value.Equals("both"))
                return SdkInterfaceEnum.Both;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SdkInterfaceEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SdkInterfaceEnumToJsonValue(SdkInterfaceEnum? value)
        {
            if (value == SdkInterfaceEnum.Native)
                return "native";

            if (value == SdkInterfaceEnum.Html)
                return "html";

            if (value == SdkInterfaceEnum.Both)
                return "both";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SdkInterface
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SdkInterfaceEnum?> SdkInterfaceOption { get; private set; }

        /// <summary>
        /// Supported SDK interface types. Allowed values: * native * html * both
        /// </summary>
        /// <value>Supported SDK interface types. Allowed values: * native * html * both</value>
        [JsonPropertyName("sdkInterface")]
        public SdkInterfaceEnum? SdkInterface { get { return this.SdkInterfaceOption; } set { this.SdkInterfaceOption = new Option<SdkInterfaceEnum?>(value); } }

        /// <summary>
        /// Defines SdkUiType
        /// </summary>
        public enum SdkUiTypeEnum
        {
            /// <summary>
            /// Enum MultiSelect for value: multiSelect
            /// </summary>
            MultiSelect = 1,

            /// <summary>
            /// Enum OtherHtml for value: otherHtml
            /// </summary>
            OtherHtml = 2,

            /// <summary>
            /// Enum OutOfBand for value: outOfBand
            /// </summary>
            OutOfBand = 3,

            /// <summary>
            /// Enum SingleSelect for value: singleSelect
            /// </summary>
            SingleSelect = 4,

            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            Text = 5
        }

        /// <summary>
        /// Returns a <see cref="SdkUiTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SdkUiTypeEnum SdkUiTypeEnumFromString(string value)
        {
            if (value.Equals("multiSelect"))
                return SdkUiTypeEnum.MultiSelect;

            if (value.Equals("otherHtml"))
                return SdkUiTypeEnum.OtherHtml;

            if (value.Equals("outOfBand"))
                return SdkUiTypeEnum.OutOfBand;

            if (value.Equals("singleSelect"))
                return SdkUiTypeEnum.SingleSelect;

            if (value.Equals("text"))
                return SdkUiTypeEnum.Text;

            throw new NotImplementedException($"Could not convert value to type SdkUiTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SdkUiTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SdkUiTypeEnum? SdkUiTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("multiSelect"))
                return SdkUiTypeEnum.MultiSelect;

            if (value.Equals("otherHtml"))
                return SdkUiTypeEnum.OtherHtml;

            if (value.Equals("outOfBand"))
                return SdkUiTypeEnum.OutOfBand;

            if (value.Equals("singleSelect"))
                return SdkUiTypeEnum.SingleSelect;

            if (value.Equals("text"))
                return SdkUiTypeEnum.Text;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SdkUiTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SdkUiTypeEnumToJsonValue(SdkUiTypeEnum value)
        {
            if (value == SdkUiTypeEnum.MultiSelect)
                return "multiSelect";

            if (value == SdkUiTypeEnum.OtherHtml)
                return "otherHtml";

            if (value == SdkUiTypeEnum.OutOfBand)
                return "outOfBand";

            if (value == SdkUiTypeEnum.SingleSelect)
                return "singleSelect";

            if (value == SdkUiTypeEnum.Text)
                return "text";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SdkUiType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DeviceRenderOptions.SdkUiTypeEnum>> SdkUiTypeOption { get; private set; }

        /// <summary>
        /// UI types supported for displaying specific challenges. Allowed values: * text * singleSelect * outOfBand * otherHtml * multiSelect
        /// </summary>
        /// <value>UI types supported for displaying specific challenges. Allowed values: * text * singleSelect * outOfBand * otherHtml * multiSelect</value>
        [JsonPropertyName("sdkUiType")]
        public List<DeviceRenderOptions.SdkUiTypeEnum> SdkUiType { get { return this.SdkUiTypeOption; } set { this.SdkUiTypeOption = new Option<List<DeviceRenderOptions.SdkUiTypeEnum>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceRenderOptions {\n");
            sb.Append("  SdkInterface: ").Append(SdkInterface).Append("\n");
            sb.Append("  SdkUiType: ").Append(SdkUiType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DeviceRenderOptions" />
    /// </summary>
    public class DeviceRenderOptionsJsonConverter : JsonConverter<DeviceRenderOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="DeviceRenderOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DeviceRenderOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DeviceRenderOptions.SdkInterfaceEnum?> sdkInterface = default;
            Option<List<DeviceRenderOptions.SdkUiTypeEnum>> sdkUiType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sdkInterface":
                            string sdkInterfaceRawValue = utf8JsonReader.GetString();
                            if (sdkInterfaceRawValue != null)
                                sdkInterface = new Option<DeviceRenderOptions.SdkInterfaceEnum?>(DeviceRenderOptions.SdkInterfaceEnumFromStringOrDefault(sdkInterfaceRawValue));
                            break;
                        case "sdkUiType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sdkUiType = new Option<List<DeviceRenderOptions.SdkUiTypeEnum>>(JsonSerializer.Deserialize<List<DeviceRenderOptions.SdkUiTypeEnum>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (sdkInterface.IsSet && sdkInterface.Value == null)
                throw new ArgumentNullException(nameof(sdkInterface), "Property is not nullable for class DeviceRenderOptions.");

            if (sdkUiType.IsSet && sdkUiType.Value == null)
                throw new ArgumentNullException(nameof(sdkUiType), "Property is not nullable for class DeviceRenderOptions.");

            return new DeviceRenderOptions(sdkInterface, sdkUiType);
        }

        /// <summary>
        /// Serializes a <see cref="DeviceRenderOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deviceRenderOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DeviceRenderOptions deviceRenderOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, deviceRenderOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DeviceRenderOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deviceRenderOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DeviceRenderOptions deviceRenderOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (deviceRenderOptions.SdkUiTypeOption.IsSet && deviceRenderOptions.SdkUiType == null)
                throw new ArgumentNullException(nameof(deviceRenderOptions.SdkUiType), "Property is required for class DeviceRenderOptions.");

            var sdkInterfaceRawValue = DeviceRenderOptions.SdkInterfaceEnumToJsonValue(deviceRenderOptions.SdkInterfaceOption.Value.Value);
            writer.WriteString("sdkInterface", sdkInterfaceRawValue);
            if (deviceRenderOptions.SdkUiTypeOption.IsSet)
            {
                writer.WritePropertyName("sdkUiType");
                JsonSerializer.Serialize(writer, deviceRenderOptions.SdkUiType, jsonSerializerOptions);
            }
        }
    }
}
