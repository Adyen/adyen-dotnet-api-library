// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ResponseAdditionalData3DSecure
    /// </summary>
    public partial class ResponseAdditionalData3DSecure : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseAdditionalData3DSecure" /> class.
        /// </summary>
        /// <param name="cardHolderInfo">Information provided by the issuer to the cardholder. If this field is present, you need to display this information to the cardholder. </param>
        /// <param name="cavv">The Cardholder Authentication Verification Value (CAVV) for the 3D Secure authentication session, as a Base64-encoded 20-byte array.</param>
        /// <param name="cavvAlgorithm">The CAVV algorithm used.</param>
        /// <param name="scaExemptionRequested">Shows the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that Adyen requested for the payment.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** </param>
        /// <param name="threeds2CardEnrolled">Indicates whether a card is enrolled for 3D Secure 2.</param>
        [JsonConstructor]
        public ResponseAdditionalData3DSecure(Option<string> cardHolderInfo = default, Option<string> cavv = default, Option<string> cavvAlgorithm = default, Option<string> scaExemptionRequested = default, Option<bool?> threeds2CardEnrolled = default)
        {
            CardHolderInfoOption = cardHolderInfo;
            CavvOption = cavv;
            CavvAlgorithmOption = cavvAlgorithm;
            ScaExemptionRequestedOption = scaExemptionRequested;
            Threeds2CardEnrolledOption = threeds2CardEnrolled;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CardHolderInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CardHolderInfoOption { get; private set; }

        /// <summary>
        /// Information provided by the issuer to the cardholder. If this field is present, you need to display this information to the cardholder. 
        /// </summary>
        /// <value>Information provided by the issuer to the cardholder. If this field is present, you need to display this information to the cardholder. </value>
        [JsonPropertyName("cardHolderInfo")]
        public string CardHolderInfo { get { return this.CardHolderInfoOption; } set { this.CardHolderInfoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Cavv
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CavvOption { get; private set; }

        /// <summary>
        /// The Cardholder Authentication Verification Value (CAVV) for the 3D Secure authentication session, as a Base64-encoded 20-byte array.
        /// </summary>
        /// <value>The Cardholder Authentication Verification Value (CAVV) for the 3D Secure authentication session, as a Base64-encoded 20-byte array.</value>
        [JsonPropertyName("cavv")]
        public string Cavv { get { return this.CavvOption; } set { this.CavvOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CavvAlgorithm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CavvAlgorithmOption { get; private set; }

        /// <summary>
        /// The CAVV algorithm used.
        /// </summary>
        /// <value>The CAVV algorithm used.</value>
        [JsonPropertyName("cavvAlgorithm")]
        public string CavvAlgorithm { get { return this.CavvAlgorithmOption; } set { this.CavvAlgorithmOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ScaExemptionRequested
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ScaExemptionRequestedOption { get; private set; }

        /// <summary>
        /// Shows the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that Adyen requested for the payment.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** 
        /// </summary>
        /// <value>Shows the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that Adyen requested for the payment.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** </value>
        [JsonPropertyName("scaExemptionRequested")]
        public string ScaExemptionRequested { get { return this.ScaExemptionRequestedOption; } set { this.ScaExemptionRequestedOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Threeds2CardEnrolled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> Threeds2CardEnrolledOption { get; private set; }

        /// <summary>
        /// Indicates whether a card is enrolled for 3D Secure 2.
        /// </summary>
        /// <value>Indicates whether a card is enrolled for 3D Secure 2.</value>
        [JsonPropertyName("threeds2.cardEnrolled")]
        public bool? Threeds2CardEnrolled { get { return this.Threeds2CardEnrolledOption; } set { this.Threeds2CardEnrolledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseAdditionalData3DSecure {\n");
            sb.Append("  CardHolderInfo: ").Append(CardHolderInfo).Append("\n");
            sb.Append("  Cavv: ").Append(Cavv).Append("\n");
            sb.Append("  CavvAlgorithm: ").Append(CavvAlgorithm).Append("\n");
            sb.Append("  ScaExemptionRequested: ").Append(ScaExemptionRequested).Append("\n");
            sb.Append("  Threeds2CardEnrolled: ").Append(Threeds2CardEnrolled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResponseAdditionalData3DSecure" />
    /// </summary>
    public class ResponseAdditionalData3DSecureJsonConverter : JsonConverter<ResponseAdditionalData3DSecure>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResponseAdditionalData3DSecure" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResponseAdditionalData3DSecure Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> cardHolderInfo = default;
            Option<string> cavv = default;
            Option<string> cavvAlgorithm = default;
            Option<string> scaExemptionRequested = default;
            Option<bool?> threeds2CardEnrolled = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cardHolderInfo":
                            cardHolderInfo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cavv":
                            cavv = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cavvAlgorithm":
                            cavvAlgorithm = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "scaExemptionRequested":
                            scaExemptionRequested = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeds2.cardEnrolled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeds2CardEnrolled = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (cardHolderInfo.IsSet && cardHolderInfo.Value == null)
                throw new ArgumentNullException(nameof(cardHolderInfo), "Property is not nullable for class ResponseAdditionalData3DSecure.");

            if (cavv.IsSet && cavv.Value == null)
                throw new ArgumentNullException(nameof(cavv), "Property is not nullable for class ResponseAdditionalData3DSecure.");

            if (cavvAlgorithm.IsSet && cavvAlgorithm.Value == null)
                throw new ArgumentNullException(nameof(cavvAlgorithm), "Property is not nullable for class ResponseAdditionalData3DSecure.");

            if (scaExemptionRequested.IsSet && scaExemptionRequested.Value == null)
                throw new ArgumentNullException(nameof(scaExemptionRequested), "Property is not nullable for class ResponseAdditionalData3DSecure.");

            if (threeds2CardEnrolled.IsSet && threeds2CardEnrolled.Value == null)
                throw new ArgumentNullException(nameof(threeds2CardEnrolled), "Property is not nullable for class ResponseAdditionalData3DSecure.");

            return new ResponseAdditionalData3DSecure(cardHolderInfo, cavv, cavvAlgorithm, scaExemptionRequested, threeds2CardEnrolled);
        }

        /// <summary>
        /// Serializes a <see cref="ResponseAdditionalData3DSecure" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="responseAdditionalData3DSecure"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResponseAdditionalData3DSecure responseAdditionalData3DSecure, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, responseAdditionalData3DSecure, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResponseAdditionalData3DSecure" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="responseAdditionalData3DSecure"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResponseAdditionalData3DSecure responseAdditionalData3DSecure, JsonSerializerOptions jsonSerializerOptions)
        {
            if (responseAdditionalData3DSecure.CardHolderInfoOption.IsSet && responseAdditionalData3DSecure.CardHolderInfo == null)
                throw new ArgumentNullException(nameof(responseAdditionalData3DSecure.CardHolderInfo), "Property is required for class ResponseAdditionalData3DSecure.");

            if (responseAdditionalData3DSecure.CavvOption.IsSet && responseAdditionalData3DSecure.Cavv == null)
                throw new ArgumentNullException(nameof(responseAdditionalData3DSecure.Cavv), "Property is required for class ResponseAdditionalData3DSecure.");

            if (responseAdditionalData3DSecure.CavvAlgorithmOption.IsSet && responseAdditionalData3DSecure.CavvAlgorithm == null)
                throw new ArgumentNullException(nameof(responseAdditionalData3DSecure.CavvAlgorithm), "Property is required for class ResponseAdditionalData3DSecure.");

            if (responseAdditionalData3DSecure.ScaExemptionRequestedOption.IsSet && responseAdditionalData3DSecure.ScaExemptionRequested == null)
                throw new ArgumentNullException(nameof(responseAdditionalData3DSecure.ScaExemptionRequested), "Property is required for class ResponseAdditionalData3DSecure.");

            if (responseAdditionalData3DSecure.CardHolderInfoOption.IsSet)
                writer.WriteString("cardHolderInfo", responseAdditionalData3DSecure.CardHolderInfo);

            if (responseAdditionalData3DSecure.CavvOption.IsSet)
                writer.WriteString("cavv", responseAdditionalData3DSecure.Cavv);

            if (responseAdditionalData3DSecure.CavvAlgorithmOption.IsSet)
                writer.WriteString("cavvAlgorithm", responseAdditionalData3DSecure.CavvAlgorithm);

            if (responseAdditionalData3DSecure.ScaExemptionRequestedOption.IsSet)
                writer.WriteString("scaExemptionRequested", responseAdditionalData3DSecure.ScaExemptionRequested);

            if (responseAdditionalData3DSecure.Threeds2CardEnrolledOption.IsSet)
                writer.WriteBoolean("threeds2.cardEnrolled", responseAdditionalData3DSecure.Threeds2CardEnrolledOption.Value.Value);
        }
    }
}
