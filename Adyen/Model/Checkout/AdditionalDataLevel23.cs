// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataLevel23
    /// </summary>
    public partial class AdditionalDataLevel23 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataLevel23" /> class.
        /// </summary>
        /// <param name="enhancedSchemeDataCustomerReference">The reference number to identify the customer and their order.  * Encoding: ASCII * Max length: 25 characters * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="enhancedSchemeDataDestinationCountryCode">The three-letter [ISO 3166-1 alpha-3 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) for the destination address. * Encoding: ASCII * Fixed length: 3 characters</param>
        /// <param name="enhancedSchemeDataDestinationPostalCode">The postal code of the destination address. * Encoding: ASCII * Max length: 10 characters * Must not start with a space. * For the US, it must be in five or nine digits format. For example, 10001 or 10001-0000. * For Canada, it must be in 6 digits format. For example, M4B 1G5.</param>
        /// <param name="enhancedSchemeDataDestinationStateProvinceCode">The state or province code of the destination address. * Encoding: ASCII * Max length: 3 characters * Must not start with a space.</param>
        /// <param name="enhancedSchemeDataDutyAmount">The duty tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * For example, 2000 means USD 20.00. * Encoding: Numeric * Max length: 12 characters</param>
        /// <param name="enhancedSchemeDataFreightAmount">The shipping amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * For example, 2000 means USD 20.00. * Encoding: Numeric * Max length: 12 characters</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrCommodityCode">The code that identifies the item in a standardized commodity coding scheme. There are different commodity coding schemes: * [UNSPSC commodity codes](https://www.unspsc.org/) * [HS commodity codes](https://www.wcoomd.org/en/topics/nomenclature/overview.aspx) * [NAICS commodity codes](https://www.census.gov/naics/) * [NAPCS commodity codes](https://www.census.gov/naics/napcs/)   * Encoding: ASCII * Max length: 12 characters * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrDescription">A description of the item. * Encoding: ASCII * Max length: 26 characters * Must not be a single character. * Must not be blank. * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrDiscountAmount">The discount amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * For example, 2000 means USD 20.00. * Encoding: Numeric * Max length: 12 characters</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrProductCode">The product code. Must be a unique product code associated with the item or service. This can be your unique code for the item, or the manufacturer&#39;s product code.  * Encoding: ASCII. * Max length: 12 characters * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrQuantity">The number of items. Must be an integer greater than zero. * Encoding: Numeric * Max length: 12 characters * Must not start with a space or be all spaces.</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrTotalAmount">The total amount for the line item, in [minor units](https://docs.adyen.com/development-resources/currency-codes). See [Amount requirements for level 2/3 ESD](https://docs.adyen.com//payment-methods/cards/enhanced-scheme-data/l2-l3#amount-requirements) to learn more about how to calculate the line item total. * For example, 2000 means USD 20.00. * Max length: 12 characters * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrUnitOfMeasure">The unit of measurement for an item. * Encoding: ASCII * Max length: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrUnitPrice">The unit price in [minor units](https://docs.adyen.com/development-resources/currency-codes). * For example, 2000 means USD 20.00. * Encoding: Numeric * Max length: 12 characters * Must not be all zeros.</param>
        /// <param name="enhancedSchemeDataOrderDate">The order date. * Format: &#x60;ddMMyy&#x60; * Encoding: ASCII * Max length: 6 characters</param>
        /// <param name="enhancedSchemeDataShipFromPostalCode">The postal code of the address where the item is shipped from. * Encoding: ASCII * Max length: 10 characters * Must not start with a space or be all spaces. * Must not be all zeros.For the US, it must be in five or nine digits format. For example, 10001 or 10001-0000. * For Canada, it must be in 6 digits format. For example, M4B 1G5.</param>
        /// <param name="enhancedSchemeDataTotalTaxAmount">The amount of state or provincial [tax included in the total transaction amount](https://docs.adyen.com/payment-methods/cards/enhanced-scheme-data/l2-l3#requirements-to-send-level-2-3-esd), in [minor units](https://docs.adyen.com/development-resources/currency-codes).  * For example, 2000 means USD 20.00. * Encoding: Numeric  * Max length: 12 characters * Must not be all zeros.</param>
        [JsonConstructor]
        public AdditionalDataLevel23(Option<string> enhancedSchemeDataCustomerReference = default, Option<string> enhancedSchemeDataDestinationCountryCode = default, Option<string> enhancedSchemeDataDestinationPostalCode = default, Option<string> enhancedSchemeDataDestinationStateProvinceCode = default, Option<string> enhancedSchemeDataDutyAmount = default, Option<string> enhancedSchemeDataFreightAmount = default, Option<string> enhancedSchemeDataItemDetailLineItemNrCommodityCode = default, Option<string> enhancedSchemeDataItemDetailLineItemNrDescription = default, Option<string> enhancedSchemeDataItemDetailLineItemNrDiscountAmount = default, Option<string> enhancedSchemeDataItemDetailLineItemNrProductCode = default, Option<string> enhancedSchemeDataItemDetailLineItemNrQuantity = default, Option<string> enhancedSchemeDataItemDetailLineItemNrTotalAmount = default, Option<string> enhancedSchemeDataItemDetailLineItemNrUnitOfMeasure = default, Option<string> enhancedSchemeDataItemDetailLineItemNrUnitPrice = default, Option<string> enhancedSchemeDataOrderDate = default, Option<string> enhancedSchemeDataShipFromPostalCode = default, Option<string> enhancedSchemeDataTotalTaxAmount = default)
        {
            EnhancedSchemeDataCustomerReferenceOption = enhancedSchemeDataCustomerReference;
            EnhancedSchemeDataDestinationCountryCodeOption = enhancedSchemeDataDestinationCountryCode;
            EnhancedSchemeDataDestinationPostalCodeOption = enhancedSchemeDataDestinationPostalCode;
            EnhancedSchemeDataDestinationStateProvinceCodeOption = enhancedSchemeDataDestinationStateProvinceCode;
            EnhancedSchemeDataDutyAmountOption = enhancedSchemeDataDutyAmount;
            EnhancedSchemeDataFreightAmountOption = enhancedSchemeDataFreightAmount;
            EnhancedSchemeDataItemDetailLineItemNrCommodityCodeOption = enhancedSchemeDataItemDetailLineItemNrCommodityCode;
            EnhancedSchemeDataItemDetailLineItemNrDescriptionOption = enhancedSchemeDataItemDetailLineItemNrDescription;
            EnhancedSchemeDataItemDetailLineItemNrDiscountAmountOption = enhancedSchemeDataItemDetailLineItemNrDiscountAmount;
            EnhancedSchemeDataItemDetailLineItemNrProductCodeOption = enhancedSchemeDataItemDetailLineItemNrProductCode;
            EnhancedSchemeDataItemDetailLineItemNrQuantityOption = enhancedSchemeDataItemDetailLineItemNrQuantity;
            EnhancedSchemeDataItemDetailLineItemNrTotalAmountOption = enhancedSchemeDataItemDetailLineItemNrTotalAmount;
            EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasureOption = enhancedSchemeDataItemDetailLineItemNrUnitOfMeasure;
            EnhancedSchemeDataItemDetailLineItemNrUnitPriceOption = enhancedSchemeDataItemDetailLineItemNrUnitPrice;
            EnhancedSchemeDataOrderDateOption = enhancedSchemeDataOrderDate;
            EnhancedSchemeDataShipFromPostalCodeOption = enhancedSchemeDataShipFromPostalCode;
            EnhancedSchemeDataTotalTaxAmountOption = enhancedSchemeDataTotalTaxAmount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataCustomerReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataCustomerReferenceOption { get; private set; }

        /// <summary>
        /// The reference number to identify the customer and their order.  * Encoding: ASCII * Max length: 25 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The reference number to identify the customer and their order.  * Encoding: ASCII * Max length: 25 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("enhancedSchemeData.customerReference")]
        public string EnhancedSchemeDataCustomerReference { get { return this.EnhancedSchemeDataCustomerReferenceOption; } set { this.EnhancedSchemeDataCustomerReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataDestinationCountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataDestinationCountryCodeOption { get; private set; }

        /// <summary>
        /// The three-letter [ISO 3166-1 alpha-3 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) for the destination address. * Encoding: ASCII * Fixed length: 3 characters
        /// </summary>
        /// <value>The three-letter [ISO 3166-1 alpha-3 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) for the destination address. * Encoding: ASCII * Fixed length: 3 characters</value>
        [JsonPropertyName("enhancedSchemeData.destinationCountryCode")]
        public string EnhancedSchemeDataDestinationCountryCode { get { return this.EnhancedSchemeDataDestinationCountryCodeOption; } set { this.EnhancedSchemeDataDestinationCountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataDestinationPostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataDestinationPostalCodeOption { get; private set; }

        /// <summary>
        /// The postal code of the destination address. * Encoding: ASCII * Max length: 10 characters * Must not start with a space. * For the US, it must be in five or nine digits format. For example, 10001 or 10001-0000. * For Canada, it must be in 6 digits format. For example, M4B 1G5.
        /// </summary>
        /// <value>The postal code of the destination address. * Encoding: ASCII * Max length: 10 characters * Must not start with a space. * For the US, it must be in five or nine digits format. For example, 10001 or 10001-0000. * For Canada, it must be in 6 digits format. For example, M4B 1G5.</value>
        [JsonPropertyName("enhancedSchemeData.destinationPostalCode")]
        public string EnhancedSchemeDataDestinationPostalCode { get { return this.EnhancedSchemeDataDestinationPostalCodeOption; } set { this.EnhancedSchemeDataDestinationPostalCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataDestinationStateProvinceCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataDestinationStateProvinceCodeOption { get; private set; }

        /// <summary>
        /// The state or province code of the destination address. * Encoding: ASCII * Max length: 3 characters * Must not start with a space.
        /// </summary>
        /// <value>The state or province code of the destination address. * Encoding: ASCII * Max length: 3 characters * Must not start with a space.</value>
        [JsonPropertyName("enhancedSchemeData.destinationStateProvinceCode")]
        public string EnhancedSchemeDataDestinationStateProvinceCode { get { return this.EnhancedSchemeDataDestinationStateProvinceCodeOption; } set { this.EnhancedSchemeDataDestinationStateProvinceCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataDutyAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataDutyAmountOption { get; private set; }

        /// <summary>
        /// The duty tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * For example, 2000 means USD 20.00. * Encoding: Numeric * Max length: 12 characters
        /// </summary>
        /// <value>The duty tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * For example, 2000 means USD 20.00. * Encoding: Numeric * Max length: 12 characters</value>
        [JsonPropertyName("enhancedSchemeData.dutyAmount")]
        public string EnhancedSchemeDataDutyAmount { get { return this.EnhancedSchemeDataDutyAmountOption; } set { this.EnhancedSchemeDataDutyAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataFreightAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataFreightAmountOption { get; private set; }

        /// <summary>
        /// The shipping amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * For example, 2000 means USD 20.00. * Encoding: Numeric * Max length: 12 characters
        /// </summary>
        /// <value>The shipping amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * For example, 2000 means USD 20.00. * Encoding: Numeric * Max length: 12 characters</value>
        [JsonPropertyName("enhancedSchemeData.freightAmount")]
        public string EnhancedSchemeDataFreightAmount { get { return this.EnhancedSchemeDataFreightAmountOption; } set { this.EnhancedSchemeDataFreightAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataItemDetailLineItemNrCommodityCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataItemDetailLineItemNrCommodityCodeOption { get; private set; }

        /// <summary>
        /// The code that identifies the item in a standardized commodity coding scheme. There are different commodity coding schemes: * [UNSPSC commodity codes](https://www.unspsc.org/) * [HS commodity codes](https://www.wcoomd.org/en/topics/nomenclature/overview.aspx) * [NAICS commodity codes](https://www.census.gov/naics/) * [NAPCS commodity codes](https://www.census.gov/naics/napcs/)   * Encoding: ASCII * Max length: 12 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The code that identifies the item in a standardized commodity coding scheme. There are different commodity coding schemes: * [UNSPSC commodity codes](https://www.unspsc.org/) * [HS commodity codes](https://www.wcoomd.org/en/topics/nomenclature/overview.aspx) * [NAICS commodity codes](https://www.census.gov/naics/) * [NAPCS commodity codes](https://www.census.gov/naics/napcs/)   * Encoding: ASCII * Max length: 12 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("enhancedSchemeData.itemDetailLine[itemNr].commodityCode")]
        public string EnhancedSchemeDataItemDetailLineItemNrCommodityCode { get { return this.EnhancedSchemeDataItemDetailLineItemNrCommodityCodeOption; } set { this.EnhancedSchemeDataItemDetailLineItemNrCommodityCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataItemDetailLineItemNrDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataItemDetailLineItemNrDescriptionOption { get; private set; }

        /// <summary>
        /// A description of the item. * Encoding: ASCII * Max length: 26 characters * Must not be a single character. * Must not be blank. * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>A description of the item. * Encoding: ASCII * Max length: 26 characters * Must not be a single character. * Must not be blank. * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("enhancedSchemeData.itemDetailLine[itemNr].description")]
        public string EnhancedSchemeDataItemDetailLineItemNrDescription { get { return this.EnhancedSchemeDataItemDetailLineItemNrDescriptionOption; } set { this.EnhancedSchemeDataItemDetailLineItemNrDescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataItemDetailLineItemNrDiscountAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataItemDetailLineItemNrDiscountAmountOption { get; private set; }

        /// <summary>
        /// The discount amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * For example, 2000 means USD 20.00. * Encoding: Numeric * Max length: 12 characters
        /// </summary>
        /// <value>The discount amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * For example, 2000 means USD 20.00. * Encoding: Numeric * Max length: 12 characters</value>
        [JsonPropertyName("enhancedSchemeData.itemDetailLine[itemNr].discountAmount")]
        public string EnhancedSchemeDataItemDetailLineItemNrDiscountAmount { get { return this.EnhancedSchemeDataItemDetailLineItemNrDiscountAmountOption; } set { this.EnhancedSchemeDataItemDetailLineItemNrDiscountAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataItemDetailLineItemNrProductCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataItemDetailLineItemNrProductCodeOption { get; private set; }

        /// <summary>
        /// The product code. Must be a unique product code associated with the item or service. This can be your unique code for the item, or the manufacturer&#39;s product code.  * Encoding: ASCII. * Max length: 12 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The product code. Must be a unique product code associated with the item or service. This can be your unique code for the item, or the manufacturer&#39;s product code.  * Encoding: ASCII. * Max length: 12 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("enhancedSchemeData.itemDetailLine[itemNr].productCode")]
        public string EnhancedSchemeDataItemDetailLineItemNrProductCode { get { return this.EnhancedSchemeDataItemDetailLineItemNrProductCodeOption; } set { this.EnhancedSchemeDataItemDetailLineItemNrProductCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataItemDetailLineItemNrQuantity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataItemDetailLineItemNrQuantityOption { get; private set; }

        /// <summary>
        /// The number of items. Must be an integer greater than zero. * Encoding: Numeric * Max length: 12 characters * Must not start with a space or be all spaces.
        /// </summary>
        /// <value>The number of items. Must be an integer greater than zero. * Encoding: Numeric * Max length: 12 characters * Must not start with a space or be all spaces.</value>
        [JsonPropertyName("enhancedSchemeData.itemDetailLine[itemNr].quantity")]
        public string EnhancedSchemeDataItemDetailLineItemNrQuantity { get { return this.EnhancedSchemeDataItemDetailLineItemNrQuantityOption; } set { this.EnhancedSchemeDataItemDetailLineItemNrQuantityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataItemDetailLineItemNrTotalAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataItemDetailLineItemNrTotalAmountOption { get; private set; }

        /// <summary>
        /// The total amount for the line item, in [minor units](https://docs.adyen.com/development-resources/currency-codes). See [Amount requirements for level 2/3 ESD](https://docs.adyen.com//payment-methods/cards/enhanced-scheme-data/l2-l3#amount-requirements) to learn more about how to calculate the line item total. * For example, 2000 means USD 20.00. * Max length: 12 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The total amount for the line item, in [minor units](https://docs.adyen.com/development-resources/currency-codes). See [Amount requirements for level 2/3 ESD](https://docs.adyen.com//payment-methods/cards/enhanced-scheme-data/l2-l3#amount-requirements) to learn more about how to calculate the line item total. * For example, 2000 means USD 20.00. * Max length: 12 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("enhancedSchemeData.itemDetailLine[itemNr].totalAmount")]
        public string EnhancedSchemeDataItemDetailLineItemNrTotalAmount { get { return this.EnhancedSchemeDataItemDetailLineItemNrTotalAmountOption; } set { this.EnhancedSchemeDataItemDetailLineItemNrTotalAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasureOption { get; private set; }

        /// <summary>
        /// The unit of measurement for an item. * Encoding: ASCII * Max length: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The unit of measurement for an item. * Encoding: ASCII * Max length: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("enhancedSchemeData.itemDetailLine[itemNr].unitOfMeasure")]
        public string EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure { get { return this.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasureOption; } set { this.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasureOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataItemDetailLineItemNrUnitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataItemDetailLineItemNrUnitPriceOption { get; private set; }

        /// <summary>
        /// The unit price in [minor units](https://docs.adyen.com/development-resources/currency-codes). * For example, 2000 means USD 20.00. * Encoding: Numeric * Max length: 12 characters * Must not be all zeros.
        /// </summary>
        /// <value>The unit price in [minor units](https://docs.adyen.com/development-resources/currency-codes). * For example, 2000 means USD 20.00. * Encoding: Numeric * Max length: 12 characters * Must not be all zeros.</value>
        [JsonPropertyName("enhancedSchemeData.itemDetailLine[itemNr].unitPrice")]
        public string EnhancedSchemeDataItemDetailLineItemNrUnitPrice { get { return this.EnhancedSchemeDataItemDetailLineItemNrUnitPriceOption; } set { this.EnhancedSchemeDataItemDetailLineItemNrUnitPriceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataOrderDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataOrderDateOption { get; private set; }

        /// <summary>
        /// The order date. * Format: &#x60;ddMMyy&#x60; * Encoding: ASCII * Max length: 6 characters
        /// </summary>
        /// <value>The order date. * Format: &#x60;ddMMyy&#x60; * Encoding: ASCII * Max length: 6 characters</value>
        [JsonPropertyName("enhancedSchemeData.orderDate")]
        public string EnhancedSchemeDataOrderDate { get { return this.EnhancedSchemeDataOrderDateOption; } set { this.EnhancedSchemeDataOrderDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataShipFromPostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataShipFromPostalCodeOption { get; private set; }

        /// <summary>
        /// The postal code of the address where the item is shipped from. * Encoding: ASCII * Max length: 10 characters * Must not start with a space or be all spaces. * Must not be all zeros.For the US, it must be in five or nine digits format. For example, 10001 or 10001-0000. * For Canada, it must be in 6 digits format. For example, M4B 1G5.
        /// </summary>
        /// <value>The postal code of the address where the item is shipped from. * Encoding: ASCII * Max length: 10 characters * Must not start with a space or be all spaces. * Must not be all zeros.For the US, it must be in five or nine digits format. For example, 10001 or 10001-0000. * For Canada, it must be in 6 digits format. For example, M4B 1G5.</value>
        [JsonPropertyName("enhancedSchemeData.shipFromPostalCode")]
        public string EnhancedSchemeDataShipFromPostalCode { get { return this.EnhancedSchemeDataShipFromPostalCodeOption; } set { this.EnhancedSchemeDataShipFromPostalCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataTotalTaxAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataTotalTaxAmountOption { get; private set; }

        /// <summary>
        /// The amount of state or provincial [tax included in the total transaction amount](https://docs.adyen.com/payment-methods/cards/enhanced-scheme-data/l2-l3#requirements-to-send-level-2-3-esd), in [minor units](https://docs.adyen.com/development-resources/currency-codes).  * For example, 2000 means USD 20.00. * Encoding: Numeric  * Max length: 12 characters * Must not be all zeros.
        /// </summary>
        /// <value>The amount of state or provincial [tax included in the total transaction amount](https://docs.adyen.com/payment-methods/cards/enhanced-scheme-data/l2-l3#requirements-to-send-level-2-3-esd), in [minor units](https://docs.adyen.com/development-resources/currency-codes).  * For example, 2000 means USD 20.00. * Encoding: Numeric  * Max length: 12 characters * Must not be all zeros.</value>
        [JsonPropertyName("enhancedSchemeData.totalTaxAmount")]
        public string EnhancedSchemeDataTotalTaxAmount { get { return this.EnhancedSchemeDataTotalTaxAmountOption; } set { this.EnhancedSchemeDataTotalTaxAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataLevel23 {\n");
            sb.Append("  EnhancedSchemeDataCustomerReference: ").Append(EnhancedSchemeDataCustomerReference).Append("\n");
            sb.Append("  EnhancedSchemeDataDestinationCountryCode: ").Append(EnhancedSchemeDataDestinationCountryCode).Append("\n");
            sb.Append("  EnhancedSchemeDataDestinationPostalCode: ").Append(EnhancedSchemeDataDestinationPostalCode).Append("\n");
            sb.Append("  EnhancedSchemeDataDestinationStateProvinceCode: ").Append(EnhancedSchemeDataDestinationStateProvinceCode).Append("\n");
            sb.Append("  EnhancedSchemeDataDutyAmount: ").Append(EnhancedSchemeDataDutyAmount).Append("\n");
            sb.Append("  EnhancedSchemeDataFreightAmount: ").Append(EnhancedSchemeDataFreightAmount).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrCommodityCode: ").Append(EnhancedSchemeDataItemDetailLineItemNrCommodityCode).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrDescription: ").Append(EnhancedSchemeDataItemDetailLineItemNrDescription).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrDiscountAmount: ").Append(EnhancedSchemeDataItemDetailLineItemNrDiscountAmount).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrProductCode: ").Append(EnhancedSchemeDataItemDetailLineItemNrProductCode).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrQuantity: ").Append(EnhancedSchemeDataItemDetailLineItemNrQuantity).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrTotalAmount: ").Append(EnhancedSchemeDataItemDetailLineItemNrTotalAmount).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure: ").Append(EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrUnitPrice: ").Append(EnhancedSchemeDataItemDetailLineItemNrUnitPrice).Append("\n");
            sb.Append("  EnhancedSchemeDataOrderDate: ").Append(EnhancedSchemeDataOrderDate).Append("\n");
            sb.Append("  EnhancedSchemeDataShipFromPostalCode: ").Append(EnhancedSchemeDataShipFromPostalCode).Append("\n");
            sb.Append("  EnhancedSchemeDataTotalTaxAmount: ").Append(EnhancedSchemeDataTotalTaxAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalDataLevel23" />
    /// </summary>
    public class AdditionalDataLevel23JsonConverter : JsonConverter<AdditionalDataLevel23>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalDataLevel23" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalDataLevel23 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> enhancedSchemeDataCustomerReference = default;
            Option<string> enhancedSchemeDataDestinationCountryCode = default;
            Option<string> enhancedSchemeDataDestinationPostalCode = default;
            Option<string> enhancedSchemeDataDestinationStateProvinceCode = default;
            Option<string> enhancedSchemeDataDutyAmount = default;
            Option<string> enhancedSchemeDataFreightAmount = default;
            Option<string> enhancedSchemeDataItemDetailLineItemNrCommodityCode = default;
            Option<string> enhancedSchemeDataItemDetailLineItemNrDescription = default;
            Option<string> enhancedSchemeDataItemDetailLineItemNrDiscountAmount = default;
            Option<string> enhancedSchemeDataItemDetailLineItemNrProductCode = default;
            Option<string> enhancedSchemeDataItemDetailLineItemNrQuantity = default;
            Option<string> enhancedSchemeDataItemDetailLineItemNrTotalAmount = default;
            Option<string> enhancedSchemeDataItemDetailLineItemNrUnitOfMeasure = default;
            Option<string> enhancedSchemeDataItemDetailLineItemNrUnitPrice = default;
            Option<string> enhancedSchemeDataOrderDate = default;
            Option<string> enhancedSchemeDataShipFromPostalCode = default;
            Option<string> enhancedSchemeDataTotalTaxAmount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "enhancedSchemeData.customerReference":
                            enhancedSchemeDataCustomerReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.destinationCountryCode":
                            enhancedSchemeDataDestinationCountryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.destinationPostalCode":
                            enhancedSchemeDataDestinationPostalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.destinationStateProvinceCode":
                            enhancedSchemeDataDestinationStateProvinceCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.dutyAmount":
                            enhancedSchemeDataDutyAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.freightAmount":
                            enhancedSchemeDataFreightAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.itemDetailLine[itemNr].commodityCode":
                            enhancedSchemeDataItemDetailLineItemNrCommodityCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.itemDetailLine[itemNr].description":
                            enhancedSchemeDataItemDetailLineItemNrDescription = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.itemDetailLine[itemNr].discountAmount":
                            enhancedSchemeDataItemDetailLineItemNrDiscountAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.itemDetailLine[itemNr].productCode":
                            enhancedSchemeDataItemDetailLineItemNrProductCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.itemDetailLine[itemNr].quantity":
                            enhancedSchemeDataItemDetailLineItemNrQuantity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.itemDetailLine[itemNr].totalAmount":
                            enhancedSchemeDataItemDetailLineItemNrTotalAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.itemDetailLine[itemNr].unitOfMeasure":
                            enhancedSchemeDataItemDetailLineItemNrUnitOfMeasure = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.itemDetailLine[itemNr].unitPrice":
                            enhancedSchemeDataItemDetailLineItemNrUnitPrice = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.orderDate":
                            enhancedSchemeDataOrderDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.shipFromPostalCode":
                            enhancedSchemeDataShipFromPostalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.totalTaxAmount":
                            enhancedSchemeDataTotalTaxAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (enhancedSchemeDataCustomerReference.IsSet && enhancedSchemeDataCustomerReference.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataCustomerReference), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataDestinationCountryCode.IsSet && enhancedSchemeDataDestinationCountryCode.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataDestinationCountryCode), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataDestinationPostalCode.IsSet && enhancedSchemeDataDestinationPostalCode.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataDestinationPostalCode), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataDestinationStateProvinceCode.IsSet && enhancedSchemeDataDestinationStateProvinceCode.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataDestinationStateProvinceCode), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataDutyAmount.IsSet && enhancedSchemeDataDutyAmount.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataDutyAmount), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataFreightAmount.IsSet && enhancedSchemeDataFreightAmount.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataFreightAmount), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataItemDetailLineItemNrCommodityCode.IsSet && enhancedSchemeDataItemDetailLineItemNrCommodityCode.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataItemDetailLineItemNrCommodityCode), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataItemDetailLineItemNrDescription.IsSet && enhancedSchemeDataItemDetailLineItemNrDescription.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataItemDetailLineItemNrDescription), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataItemDetailLineItemNrDiscountAmount.IsSet && enhancedSchemeDataItemDetailLineItemNrDiscountAmount.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataItemDetailLineItemNrDiscountAmount), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataItemDetailLineItemNrProductCode.IsSet && enhancedSchemeDataItemDetailLineItemNrProductCode.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataItemDetailLineItemNrProductCode), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataItemDetailLineItemNrQuantity.IsSet && enhancedSchemeDataItemDetailLineItemNrQuantity.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataItemDetailLineItemNrQuantity), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataItemDetailLineItemNrTotalAmount.IsSet && enhancedSchemeDataItemDetailLineItemNrTotalAmount.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataItemDetailLineItemNrTotalAmount), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataItemDetailLineItemNrUnitOfMeasure.IsSet && enhancedSchemeDataItemDetailLineItemNrUnitOfMeasure.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataItemDetailLineItemNrUnitOfMeasure), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataItemDetailLineItemNrUnitPrice.IsSet && enhancedSchemeDataItemDetailLineItemNrUnitPrice.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataItemDetailLineItemNrUnitPrice), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataOrderDate.IsSet && enhancedSchemeDataOrderDate.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataOrderDate), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataShipFromPostalCode.IsSet && enhancedSchemeDataShipFromPostalCode.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataShipFromPostalCode), "Property is not nullable for class AdditionalDataLevel23.");

            if (enhancedSchemeDataTotalTaxAmount.IsSet && enhancedSchemeDataTotalTaxAmount.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataTotalTaxAmount), "Property is not nullable for class AdditionalDataLevel23.");

            return new AdditionalDataLevel23(enhancedSchemeDataCustomerReference, enhancedSchemeDataDestinationCountryCode, enhancedSchemeDataDestinationPostalCode, enhancedSchemeDataDestinationStateProvinceCode, enhancedSchemeDataDutyAmount, enhancedSchemeDataFreightAmount, enhancedSchemeDataItemDetailLineItemNrCommodityCode, enhancedSchemeDataItemDetailLineItemNrDescription, enhancedSchemeDataItemDetailLineItemNrDiscountAmount, enhancedSchemeDataItemDetailLineItemNrProductCode, enhancedSchemeDataItemDetailLineItemNrQuantity, enhancedSchemeDataItemDetailLineItemNrTotalAmount, enhancedSchemeDataItemDetailLineItemNrUnitOfMeasure, enhancedSchemeDataItemDetailLineItemNrUnitPrice, enhancedSchemeDataOrderDate, enhancedSchemeDataShipFromPostalCode, enhancedSchemeDataTotalTaxAmount);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalDataLevel23" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataLevel23"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalDataLevel23 additionalDataLevel23, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalDataLevel23, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalDataLevel23" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataLevel23"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalDataLevel23 additionalDataLevel23, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalDataLevel23.EnhancedSchemeDataCustomerReferenceOption.IsSet && additionalDataLevel23.EnhancedSchemeDataCustomerReference == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataCustomerReference), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataDestinationCountryCodeOption.IsSet && additionalDataLevel23.EnhancedSchemeDataDestinationCountryCode == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataDestinationCountryCode), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataDestinationPostalCodeOption.IsSet && additionalDataLevel23.EnhancedSchemeDataDestinationPostalCode == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataDestinationPostalCode), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataDestinationStateProvinceCodeOption.IsSet && additionalDataLevel23.EnhancedSchemeDataDestinationStateProvinceCode == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataDestinationStateProvinceCode), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataDutyAmountOption.IsSet && additionalDataLevel23.EnhancedSchemeDataDutyAmount == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataDutyAmount), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataFreightAmountOption.IsSet && additionalDataLevel23.EnhancedSchemeDataFreightAmount == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataFreightAmount), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrCommodityCodeOption.IsSet && additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrCommodityCode == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrCommodityCode), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrDescriptionOption.IsSet && additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrDescription == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrDescription), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrDiscountAmountOption.IsSet && additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrDiscountAmount == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrDiscountAmount), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrProductCodeOption.IsSet && additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrProductCode == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrProductCode), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrQuantityOption.IsSet && additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrQuantity == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrQuantity), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrTotalAmountOption.IsSet && additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrTotalAmount == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrTotalAmount), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasureOption.IsSet && additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrUnitPriceOption.IsSet && additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrUnitPrice == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrUnitPrice), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataOrderDateOption.IsSet && additionalDataLevel23.EnhancedSchemeDataOrderDate == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataOrderDate), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataShipFromPostalCodeOption.IsSet && additionalDataLevel23.EnhancedSchemeDataShipFromPostalCode == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataShipFromPostalCode), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataTotalTaxAmountOption.IsSet && additionalDataLevel23.EnhancedSchemeDataTotalTaxAmount == null)
                throw new ArgumentNullException(nameof(additionalDataLevel23.EnhancedSchemeDataTotalTaxAmount), "Property is required for class AdditionalDataLevel23.");

            if (additionalDataLevel23.EnhancedSchemeDataCustomerReferenceOption.IsSet)
                writer.WriteString("enhancedSchemeData.customerReference", additionalDataLevel23.EnhancedSchemeDataCustomerReference);

            if (additionalDataLevel23.EnhancedSchemeDataDestinationCountryCodeOption.IsSet)
                writer.WriteString("enhancedSchemeData.destinationCountryCode", additionalDataLevel23.EnhancedSchemeDataDestinationCountryCode);

            if (additionalDataLevel23.EnhancedSchemeDataDestinationPostalCodeOption.IsSet)
                writer.WriteString("enhancedSchemeData.destinationPostalCode", additionalDataLevel23.EnhancedSchemeDataDestinationPostalCode);

            if (additionalDataLevel23.EnhancedSchemeDataDestinationStateProvinceCodeOption.IsSet)
                writer.WriteString("enhancedSchemeData.destinationStateProvinceCode", additionalDataLevel23.EnhancedSchemeDataDestinationStateProvinceCode);

            if (additionalDataLevel23.EnhancedSchemeDataDutyAmountOption.IsSet)
                writer.WriteString("enhancedSchemeData.dutyAmount", additionalDataLevel23.EnhancedSchemeDataDutyAmount);

            if (additionalDataLevel23.EnhancedSchemeDataFreightAmountOption.IsSet)
                writer.WriteString("enhancedSchemeData.freightAmount", additionalDataLevel23.EnhancedSchemeDataFreightAmount);

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrCommodityCodeOption.IsSet)
                writer.WriteString("enhancedSchemeData.itemDetailLine[itemNr].commodityCode", additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrCommodityCode);

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrDescriptionOption.IsSet)
                writer.WriteString("enhancedSchemeData.itemDetailLine[itemNr].description", additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrDescription);

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrDiscountAmountOption.IsSet)
                writer.WriteString("enhancedSchemeData.itemDetailLine[itemNr].discountAmount", additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrDiscountAmount);

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrProductCodeOption.IsSet)
                writer.WriteString("enhancedSchemeData.itemDetailLine[itemNr].productCode", additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrProductCode);

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrQuantityOption.IsSet)
                writer.WriteString("enhancedSchemeData.itemDetailLine[itemNr].quantity", additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrQuantity);

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrTotalAmountOption.IsSet)
                writer.WriteString("enhancedSchemeData.itemDetailLine[itemNr].totalAmount", additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrTotalAmount);

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasureOption.IsSet)
                writer.WriteString("enhancedSchemeData.itemDetailLine[itemNr].unitOfMeasure", additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure);

            if (additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrUnitPriceOption.IsSet)
                writer.WriteString("enhancedSchemeData.itemDetailLine[itemNr].unitPrice", additionalDataLevel23.EnhancedSchemeDataItemDetailLineItemNrUnitPrice);

            if (additionalDataLevel23.EnhancedSchemeDataOrderDateOption.IsSet)
                writer.WriteString("enhancedSchemeData.orderDate", additionalDataLevel23.EnhancedSchemeDataOrderDate);

            if (additionalDataLevel23.EnhancedSchemeDataShipFromPostalCodeOption.IsSet)
                writer.WriteString("enhancedSchemeData.shipFromPostalCode", additionalDataLevel23.EnhancedSchemeDataShipFromPostalCode);

            if (additionalDataLevel23.EnhancedSchemeDataTotalTaxAmountOption.IsSet)
                writer.WriteString("enhancedSchemeData.totalTaxAmount", additionalDataLevel23.EnhancedSchemeDataTotalTaxAmount);
        }
    }
}
