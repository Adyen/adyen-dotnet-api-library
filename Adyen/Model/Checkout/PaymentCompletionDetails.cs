// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PaymentCompletionDetails
    /// </summary>
    public partial class PaymentCompletionDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCompletionDetails" /> class.
        /// </summary>
        /// <param name="mD">A payment session identifier returned by the card issuer.</param>
        /// <param name="paReq">(3D) Payment Authentication Request data for the card issuer.</param>
        /// <param name="paRes">(3D) Payment Authentication Response data by the card issuer.</param>
        /// <param name="authorizationToken">authorizationToken</param>
        /// <param name="billingToken">PayPal-generated token for recurring payments.</param>
        /// <param name="cupsecureplusSmscode">The SMS verification code collected from the shopper.</param>
        /// <param name="facilitatorAccessToken">PayPal-generated third party access token.</param>
        /// <param name="oneTimePasscode">A random number sent to the mobile phone number of the shopper to verify the payment.</param>
        /// <param name="orderID">PayPal-assigned ID for the order.</param>
        /// <param name="payerID">PayPal-assigned ID for the payer (shopper).</param>
        /// <param name="payload">Payload appended to the &#x60;returnURL&#x60; as a result of the redirect.</param>
        /// <param name="paymentID">PayPal-generated ID for the payment.</param>
        /// <param name="paymentStatus">Value passed from the WeChat MiniProgram &#x60;wx.requestPayment&#x60; **complete** callback. Possible values: any value starting with &#x60;requestPayment:&#x60;.</param>
        /// <param name="redirectResult">The result of the redirect as appended to the &#x60;returnURL&#x60;.</param>
        /// <param name="resultCode">Value you received from the WeChat Pay SDK.</param>
        /// <param name="returnUrlQueryString">The query string as appended to the &#x60;returnURL&#x60; when using direct issuer links .</param>
        /// <param name="threeDSResult">Base64-encoded string returned by the Component after the challenge flow. It contains the following parameters: &#x60;transStatus&#x60;, &#x60;authorisationToken&#x60;.</param>
        /// <param name="threeds2ChallengeResult">Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: &#x60;transStatus&#x60;.</param>
        /// <param name="threeds2Fingerprint">Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: &#x60;threeDSCompInd&#x60;.</param>
        /// <param name="vaultToken">PayPalv2-generated token for recurring payments.</param>
        [JsonConstructor]
        public PaymentCompletionDetails(Option<string> mD = default, Option<string> paReq = default, Option<string> paRes = default, Option<string> authorizationToken = default, Option<string> billingToken = default, Option<string> cupsecureplusSmscode = default, Option<string> facilitatorAccessToken = default, Option<string> oneTimePasscode = default, Option<string> orderID = default, Option<string> payerID = default, Option<string> payload = default, Option<string> paymentID = default, Option<string> paymentStatus = default, Option<string> redirectResult = default, Option<string> resultCode = default, Option<string> returnUrlQueryString = default, Option<string> threeDSResult = default, Option<string> threeds2ChallengeResult = default, Option<string> threeds2Fingerprint = default, Option<string> vaultToken = default)
        {
            MDOption = mD;
            PaReqOption = paReq;
            PaResOption = paRes;
            AuthorizationTokenOption = authorizationToken;
            BillingTokenOption = billingToken;
            CupsecureplusSmscodeOption = cupsecureplusSmscode;
            FacilitatorAccessTokenOption = facilitatorAccessToken;
            OneTimePasscodeOption = oneTimePasscode;
            OrderIDOption = orderID;
            PayerIDOption = payerID;
            PayloadOption = payload;
            PaymentIDOption = paymentID;
            PaymentStatusOption = paymentStatus;
            RedirectResultOption = redirectResult;
            ResultCodeOption = resultCode;
            ReturnUrlQueryStringOption = returnUrlQueryString;
            ThreeDSResultOption = threeDSResult;
            Threeds2ChallengeResultOption = threeds2ChallengeResult;
            Threeds2FingerprintOption = threeds2Fingerprint;
            VaultTokenOption = vaultToken;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MD
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MDOption { get; private set; }

        /// <summary>
        /// A payment session identifier returned by the card issuer.
        /// </summary>
        /// <value>A payment session identifier returned by the card issuer.</value>
        [JsonPropertyName("MD")]
        public string MD { get { return this.MDOption; } set { this.MDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaReq
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaReqOption { get; private set; }

        /// <summary>
        /// (3D) Payment Authentication Request data for the card issuer.
        /// </summary>
        /// <value>(3D) Payment Authentication Request data for the card issuer.</value>
        [JsonPropertyName("PaReq")]
        public string PaReq { get { return this.PaReqOption; } set { this.PaReqOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaRes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaResOption { get; private set; }

        /// <summary>
        /// (3D) Payment Authentication Response data by the card issuer.
        /// </summary>
        /// <value>(3D) Payment Authentication Response data by the card issuer.</value>
        [JsonPropertyName("PaRes")]
        public string PaRes { get { return this.PaResOption; } set { this.PaResOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AuthorizationToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AuthorizationTokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthorizationToken
        /// </summary>
        [JsonPropertyName("authorization_token")]
        public string AuthorizationToken { get { return this.AuthorizationTokenOption; } set { this.AuthorizationTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BillingToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BillingTokenOption { get; private set; }

        /// <summary>
        /// PayPal-generated token for recurring payments.
        /// </summary>
        /// <value>PayPal-generated token for recurring payments.</value>
        [JsonPropertyName("billingToken")]
        public string BillingToken { get { return this.BillingTokenOption; } set { this.BillingTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CupsecureplusSmscode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CupsecureplusSmscodeOption { get; private set; }

        /// <summary>
        /// The SMS verification code collected from the shopper.
        /// </summary>
        /// <value>The SMS verification code collected from the shopper.</value>
        [JsonPropertyName("cupsecureplus.smscode")]
        public string CupsecureplusSmscode { get { return this.CupsecureplusSmscodeOption; } set { this.CupsecureplusSmscodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FacilitatorAccessToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FacilitatorAccessTokenOption { get; private set; }

        /// <summary>
        /// PayPal-generated third party access token.
        /// </summary>
        /// <value>PayPal-generated third party access token.</value>
        [JsonPropertyName("facilitatorAccessToken")]
        public string FacilitatorAccessToken { get { return this.FacilitatorAccessTokenOption; } set { this.FacilitatorAccessTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OneTimePasscode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OneTimePasscodeOption { get; private set; }

        /// <summary>
        /// A random number sent to the mobile phone number of the shopper to verify the payment.
        /// </summary>
        /// <value>A random number sent to the mobile phone number of the shopper to verify the payment.</value>
        [JsonPropertyName("oneTimePasscode")]
        public string OneTimePasscode { get { return this.OneTimePasscodeOption; } set { this.OneTimePasscodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OrderID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OrderIDOption { get; private set; }

        /// <summary>
        /// PayPal-assigned ID for the order.
        /// </summary>
        /// <value>PayPal-assigned ID for the order.</value>
        [JsonPropertyName("orderID")]
        public string OrderID { get { return this.OrderIDOption; } set { this.OrderIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PayerID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayerIDOption { get; private set; }

        /// <summary>
        /// PayPal-assigned ID for the payer (shopper).
        /// </summary>
        /// <value>PayPal-assigned ID for the payer (shopper).</value>
        [JsonPropertyName("payerID")]
        public string PayerID { get { return this.PayerIDOption; } set { this.PayerIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Payload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayloadOption { get; private set; }

        /// <summary>
        /// Payload appended to the &#x60;returnURL&#x60; as a result of the redirect.
        /// </summary>
        /// <value>Payload appended to the &#x60;returnURL&#x60; as a result of the redirect.</value>
        [JsonPropertyName("payload")]
        public string Payload { get { return this.PayloadOption; } set { this.PayloadOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentIDOption { get; private set; }

        /// <summary>
        /// PayPal-generated ID for the payment.
        /// </summary>
        /// <value>PayPal-generated ID for the payment.</value>
        [JsonPropertyName("paymentID")]
        public string PaymentID { get { return this.PaymentIDOption; } set { this.PaymentIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentStatusOption { get; private set; }

        /// <summary>
        /// Value passed from the WeChat MiniProgram &#x60;wx.requestPayment&#x60; **complete** callback. Possible values: any value starting with &#x60;requestPayment:&#x60;.
        /// </summary>
        /// <value>Value passed from the WeChat MiniProgram &#x60;wx.requestPayment&#x60; **complete** callback. Possible values: any value starting with &#x60;requestPayment:&#x60;.</value>
        [JsonPropertyName("paymentStatus")]
        public string PaymentStatus { get { return this.PaymentStatusOption; } set { this.PaymentStatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RedirectResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RedirectResultOption { get; private set; }

        /// <summary>
        /// The result of the redirect as appended to the &#x60;returnURL&#x60;.
        /// </summary>
        /// <value>The result of the redirect as appended to the &#x60;returnURL&#x60;.</value>
        [JsonPropertyName("redirectResult")]
        public string RedirectResult { get { return this.RedirectResultOption; } set { this.RedirectResultOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ResultCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ResultCodeOption { get; private set; }

        /// <summary>
        /// Value you received from the WeChat Pay SDK.
        /// </summary>
        /// <value>Value you received from the WeChat Pay SDK.</value>
        [JsonPropertyName("resultCode")]
        public string ResultCode { get { return this.ResultCodeOption; } set { this.ResultCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReturnUrlQueryString
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReturnUrlQueryStringOption { get; private set; }

        /// <summary>
        /// The query string as appended to the &#x60;returnURL&#x60; when using direct issuer links .
        /// </summary>
        /// <value>The query string as appended to the &#x60;returnURL&#x60; when using direct issuer links .</value>
        [JsonPropertyName("returnUrlQueryString")]
        public string ReturnUrlQueryString { get { return this.ReturnUrlQueryStringOption; } set { this.ReturnUrlQueryStringOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSResultOption { get; private set; }

        /// <summary>
        /// Base64-encoded string returned by the Component after the challenge flow. It contains the following parameters: &#x60;transStatus&#x60;, &#x60;authorisationToken&#x60;.
        /// </summary>
        /// <value>Base64-encoded string returned by the Component after the challenge flow. It contains the following parameters: &#x60;transStatus&#x60;, &#x60;authorisationToken&#x60;.</value>
        [JsonPropertyName("threeDSResult")]
        public string ThreeDSResult { get { return this.ThreeDSResultOption; } set { this.ThreeDSResultOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Threeds2ChallengeResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> Threeds2ChallengeResultOption { get; private set; }

        /// <summary>
        /// Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: &#x60;transStatus&#x60;.
        /// </summary>
        /// <value>Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: &#x60;transStatus&#x60;.</value>
        [JsonPropertyName("threeds2.challengeResult")]
        public string Threeds2ChallengeResult { get { return this.Threeds2ChallengeResultOption; } set { this.Threeds2ChallengeResultOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Threeds2Fingerprint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> Threeds2FingerprintOption { get; private set; }

        /// <summary>
        /// Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: &#x60;threeDSCompInd&#x60;.
        /// </summary>
        /// <value>Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: &#x60;threeDSCompInd&#x60;.</value>
        [JsonPropertyName("threeds2.fingerprint")]
        public string Threeds2Fingerprint { get { return this.Threeds2FingerprintOption; } set { this.Threeds2FingerprintOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VaultToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> VaultTokenOption { get; private set; }

        /// <summary>
        /// PayPalv2-generated token for recurring payments.
        /// </summary>
        /// <value>PayPalv2-generated token for recurring payments.</value>
        [JsonPropertyName("vaultToken")]
        public string VaultToken { get { return this.VaultTokenOption; } set { this.VaultTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentCompletionDetails {\n");
            sb.Append("  MD: ").Append(MD).Append("\n");
            sb.Append("  PaReq: ").Append(PaReq).Append("\n");
            sb.Append("  PaRes: ").Append(PaRes).Append("\n");
            sb.Append("  AuthorizationToken: ").Append(AuthorizationToken).Append("\n");
            sb.Append("  BillingToken: ").Append(BillingToken).Append("\n");
            sb.Append("  CupsecureplusSmscode: ").Append(CupsecureplusSmscode).Append("\n");
            sb.Append("  FacilitatorAccessToken: ").Append(FacilitatorAccessToken).Append("\n");
            sb.Append("  OneTimePasscode: ").Append(OneTimePasscode).Append("\n");
            sb.Append("  OrderID: ").Append(OrderID).Append("\n");
            sb.Append("  PayerID: ").Append(PayerID).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  PaymentID: ").Append(PaymentID).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  RedirectResult: ").Append(RedirectResult).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  ReturnUrlQueryString: ").Append(ReturnUrlQueryString).Append("\n");
            sb.Append("  ThreeDSResult: ").Append(ThreeDSResult).Append("\n");
            sb.Append("  Threeds2ChallengeResult: ").Append(Threeds2ChallengeResult).Append("\n");
            sb.Append("  Threeds2Fingerprint: ").Append(Threeds2Fingerprint).Append("\n");
            sb.Append("  VaultToken: ").Append(VaultToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MD (string) maxLength
            if (this.MD != null && this.MD.Length > 20000)
            {
                yield return new ValidationResult("Invalid value for MD, length must be less than 20000.", new [] { "MD" });
            }

            // PaReq (string) maxLength
            if (this.PaReq != null && this.PaReq.Length > 20000)
            {
                yield return new ValidationResult("Invalid value for PaReq, length must be less than 20000.", new [] { "PaReq" });
            }

            // PaRes (string) maxLength
            if (this.PaRes != null && this.PaRes.Length > 20000)
            {
                yield return new ValidationResult("Invalid value for PaRes, length must be less than 20000.", new [] { "PaRes" });
            }

            // Payload (string) maxLength
            if (this.Payload != null && this.Payload.Length > 20000)
            {
                yield return new ValidationResult("Invalid value for Payload, length must be less than 20000.", new [] { "Payload" });
            }

            // RedirectResult (string) maxLength
            if (this.RedirectResult != null && this.RedirectResult.Length > 20000)
            {
                yield return new ValidationResult("Invalid value for RedirectResult, length must be less than 20000.", new [] { "RedirectResult" });
            }

            // ReturnUrlQueryString (string) maxLength
            if (this.ReturnUrlQueryString != null && this.ReturnUrlQueryString.Length > 20000)
            {
                yield return new ValidationResult("Invalid value for ReturnUrlQueryString, length must be less than 20000.", new [] { "ReturnUrlQueryString" });
            }

            // ThreeDSResult (string) maxLength
            if (this.ThreeDSResult != null && this.ThreeDSResult.Length > 50000)
            {
                yield return new ValidationResult("Invalid value for ThreeDSResult, length must be less than 50000.", new [] { "ThreeDSResult" });
            }

            // Threeds2ChallengeResult (string) maxLength
            if (this.Threeds2ChallengeResult != null && this.Threeds2ChallengeResult.Length > 50000)
            {
                yield return new ValidationResult("Invalid value for Threeds2ChallengeResult, length must be less than 50000.", new [] { "Threeds2ChallengeResult" });
            }

            // Threeds2Fingerprint (string) maxLength
            if (this.Threeds2Fingerprint != null && this.Threeds2Fingerprint.Length > 100000)
            {
                yield return new ValidationResult("Invalid value for Threeds2Fingerprint, length must be less than 100000.", new [] { "Threeds2Fingerprint" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentCompletionDetails" />
    /// </summary>
    public class PaymentCompletionDetailsJsonConverter : JsonConverter<PaymentCompletionDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentCompletionDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentCompletionDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> mD = default;
            Option<string> paReq = default;
            Option<string> paRes = default;
            Option<string> authorizationToken = default;
            Option<string> billingToken = default;
            Option<string> cupsecureplusSmscode = default;
            Option<string> facilitatorAccessToken = default;
            Option<string> oneTimePasscode = default;
            Option<string> orderID = default;
            Option<string> payerID = default;
            Option<string> payload = default;
            Option<string> paymentID = default;
            Option<string> paymentStatus = default;
            Option<string> redirectResult = default;
            Option<string> resultCode = default;
            Option<string> returnUrlQueryString = default;
            Option<string> threeDSResult = default;
            Option<string> threeds2ChallengeResult = default;
            Option<string> threeds2Fingerprint = default;
            Option<string> vaultToken = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "MD":
                            mD = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "PaReq":
                            paReq = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "PaRes":
                            paRes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "authorization_token":
                            authorizationToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "billingToken":
                            billingToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cupsecureplus.smscode":
                            cupsecureplusSmscode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "facilitatorAccessToken":
                            facilitatorAccessToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "oneTimePasscode":
                            oneTimePasscode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "orderID":
                            orderID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "payerID":
                            payerID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "payload":
                            payload = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentID":
                            paymentID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentStatus":
                            paymentStatus = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "redirectResult":
                            redirectResult = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "resultCode":
                            resultCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "returnUrlQueryString":
                            returnUrlQueryString = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDSResult":
                            threeDSResult = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeds2.challengeResult":
                            threeds2ChallengeResult = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeds2.fingerprint":
                            threeds2Fingerprint = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vaultToken":
                            vaultToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (mD.IsSet && mD.Value == null)
                throw new ArgumentNullException(nameof(mD), "Property is not nullable for class PaymentCompletionDetails.");

            if (paReq.IsSet && paReq.Value == null)
                throw new ArgumentNullException(nameof(paReq), "Property is not nullable for class PaymentCompletionDetails.");

            if (paRes.IsSet && paRes.Value == null)
                throw new ArgumentNullException(nameof(paRes), "Property is not nullable for class PaymentCompletionDetails.");

            if (authorizationToken.IsSet && authorizationToken.Value == null)
                throw new ArgumentNullException(nameof(authorizationToken), "Property is not nullable for class PaymentCompletionDetails.");

            if (billingToken.IsSet && billingToken.Value == null)
                throw new ArgumentNullException(nameof(billingToken), "Property is not nullable for class PaymentCompletionDetails.");

            if (cupsecureplusSmscode.IsSet && cupsecureplusSmscode.Value == null)
                throw new ArgumentNullException(nameof(cupsecureplusSmscode), "Property is not nullable for class PaymentCompletionDetails.");

            if (facilitatorAccessToken.IsSet && facilitatorAccessToken.Value == null)
                throw new ArgumentNullException(nameof(facilitatorAccessToken), "Property is not nullable for class PaymentCompletionDetails.");

            if (oneTimePasscode.IsSet && oneTimePasscode.Value == null)
                throw new ArgumentNullException(nameof(oneTimePasscode), "Property is not nullable for class PaymentCompletionDetails.");

            if (orderID.IsSet && orderID.Value == null)
                throw new ArgumentNullException(nameof(orderID), "Property is not nullable for class PaymentCompletionDetails.");

            if (payerID.IsSet && payerID.Value == null)
                throw new ArgumentNullException(nameof(payerID), "Property is not nullable for class PaymentCompletionDetails.");

            if (payload.IsSet && payload.Value == null)
                throw new ArgumentNullException(nameof(payload), "Property is not nullable for class PaymentCompletionDetails.");

            if (paymentID.IsSet && paymentID.Value == null)
                throw new ArgumentNullException(nameof(paymentID), "Property is not nullable for class PaymentCompletionDetails.");

            if (paymentStatus.IsSet && paymentStatus.Value == null)
                throw new ArgumentNullException(nameof(paymentStatus), "Property is not nullable for class PaymentCompletionDetails.");

            if (redirectResult.IsSet && redirectResult.Value == null)
                throw new ArgumentNullException(nameof(redirectResult), "Property is not nullable for class PaymentCompletionDetails.");

            if (resultCode.IsSet && resultCode.Value == null)
                throw new ArgumentNullException(nameof(resultCode), "Property is not nullable for class PaymentCompletionDetails.");

            if (returnUrlQueryString.IsSet && returnUrlQueryString.Value == null)
                throw new ArgumentNullException(nameof(returnUrlQueryString), "Property is not nullable for class PaymentCompletionDetails.");

            if (threeDSResult.IsSet && threeDSResult.Value == null)
                throw new ArgumentNullException(nameof(threeDSResult), "Property is not nullable for class PaymentCompletionDetails.");

            if (threeds2ChallengeResult.IsSet && threeds2ChallengeResult.Value == null)
                throw new ArgumentNullException(nameof(threeds2ChallengeResult), "Property is not nullable for class PaymentCompletionDetails.");

            if (threeds2Fingerprint.IsSet && threeds2Fingerprint.Value == null)
                throw new ArgumentNullException(nameof(threeds2Fingerprint), "Property is not nullable for class PaymentCompletionDetails.");

            if (vaultToken.IsSet && vaultToken.Value == null)
                throw new ArgumentNullException(nameof(vaultToken), "Property is not nullable for class PaymentCompletionDetails.");

            return new PaymentCompletionDetails(mD, paReq, paRes, authorizationToken, billingToken, cupsecureplusSmscode, facilitatorAccessToken, oneTimePasscode, orderID, payerID, payload, paymentID, paymentStatus, redirectResult, resultCode, returnUrlQueryString, threeDSResult, threeds2ChallengeResult, threeds2Fingerprint, vaultToken);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentCompletionDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentCompletionDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentCompletionDetails paymentCompletionDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentCompletionDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentCompletionDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentCompletionDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentCompletionDetails paymentCompletionDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentCompletionDetails.MDOption.IsSet && paymentCompletionDetails.MD == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.MD), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.PaReqOption.IsSet && paymentCompletionDetails.PaReq == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.PaReq), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.PaResOption.IsSet && paymentCompletionDetails.PaRes == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.PaRes), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.AuthorizationTokenOption.IsSet && paymentCompletionDetails.AuthorizationToken == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.AuthorizationToken), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.BillingTokenOption.IsSet && paymentCompletionDetails.BillingToken == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.BillingToken), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.CupsecureplusSmscodeOption.IsSet && paymentCompletionDetails.CupsecureplusSmscode == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.CupsecureplusSmscode), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.FacilitatorAccessTokenOption.IsSet && paymentCompletionDetails.FacilitatorAccessToken == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.FacilitatorAccessToken), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.OneTimePasscodeOption.IsSet && paymentCompletionDetails.OneTimePasscode == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.OneTimePasscode), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.OrderIDOption.IsSet && paymentCompletionDetails.OrderID == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.OrderID), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.PayerIDOption.IsSet && paymentCompletionDetails.PayerID == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.PayerID), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.PayloadOption.IsSet && paymentCompletionDetails.Payload == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.Payload), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.PaymentIDOption.IsSet && paymentCompletionDetails.PaymentID == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.PaymentID), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.PaymentStatusOption.IsSet && paymentCompletionDetails.PaymentStatus == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.PaymentStatus), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.RedirectResultOption.IsSet && paymentCompletionDetails.RedirectResult == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.RedirectResult), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.ResultCodeOption.IsSet && paymentCompletionDetails.ResultCode == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.ResultCode), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.ReturnUrlQueryStringOption.IsSet && paymentCompletionDetails.ReturnUrlQueryString == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.ReturnUrlQueryString), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.ThreeDSResultOption.IsSet && paymentCompletionDetails.ThreeDSResult == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.ThreeDSResult), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.Threeds2ChallengeResultOption.IsSet && paymentCompletionDetails.Threeds2ChallengeResult == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.Threeds2ChallengeResult), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.Threeds2FingerprintOption.IsSet && paymentCompletionDetails.Threeds2Fingerprint == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.Threeds2Fingerprint), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.VaultTokenOption.IsSet && paymentCompletionDetails.VaultToken == null)
                throw new ArgumentNullException(nameof(paymentCompletionDetails.VaultToken), "Property is required for class PaymentCompletionDetails.");

            if (paymentCompletionDetails.MDOption.IsSet)
                writer.WriteString("MD", paymentCompletionDetails.MD);

            if (paymentCompletionDetails.PaReqOption.IsSet)
                writer.WriteString("PaReq", paymentCompletionDetails.PaReq);

            if (paymentCompletionDetails.PaResOption.IsSet)
                writer.WriteString("PaRes", paymentCompletionDetails.PaRes);

            if (paymentCompletionDetails.AuthorizationTokenOption.IsSet)
                writer.WriteString("authorization_token", paymentCompletionDetails.AuthorizationToken);

            if (paymentCompletionDetails.BillingTokenOption.IsSet)
                writer.WriteString("billingToken", paymentCompletionDetails.BillingToken);

            if (paymentCompletionDetails.CupsecureplusSmscodeOption.IsSet)
                writer.WriteString("cupsecureplus.smscode", paymentCompletionDetails.CupsecureplusSmscode);

            if (paymentCompletionDetails.FacilitatorAccessTokenOption.IsSet)
                writer.WriteString("facilitatorAccessToken", paymentCompletionDetails.FacilitatorAccessToken);

            if (paymentCompletionDetails.OneTimePasscodeOption.IsSet)
                writer.WriteString("oneTimePasscode", paymentCompletionDetails.OneTimePasscode);

            if (paymentCompletionDetails.OrderIDOption.IsSet)
                writer.WriteString("orderID", paymentCompletionDetails.OrderID);

            if (paymentCompletionDetails.PayerIDOption.IsSet)
                writer.WriteString("payerID", paymentCompletionDetails.PayerID);

            if (paymentCompletionDetails.PayloadOption.IsSet)
                writer.WriteString("payload", paymentCompletionDetails.Payload);

            if (paymentCompletionDetails.PaymentIDOption.IsSet)
                writer.WriteString("paymentID", paymentCompletionDetails.PaymentID);

            if (paymentCompletionDetails.PaymentStatusOption.IsSet)
                writer.WriteString("paymentStatus", paymentCompletionDetails.PaymentStatus);

            if (paymentCompletionDetails.RedirectResultOption.IsSet)
                writer.WriteString("redirectResult", paymentCompletionDetails.RedirectResult);

            if (paymentCompletionDetails.ResultCodeOption.IsSet)
                writer.WriteString("resultCode", paymentCompletionDetails.ResultCode);

            if (paymentCompletionDetails.ReturnUrlQueryStringOption.IsSet)
                writer.WriteString("returnUrlQueryString", paymentCompletionDetails.ReturnUrlQueryString);

            if (paymentCompletionDetails.ThreeDSResultOption.IsSet)
                writer.WriteString("threeDSResult", paymentCompletionDetails.ThreeDSResult);

            if (paymentCompletionDetails.Threeds2ChallengeResultOption.IsSet)
                writer.WriteString("threeds2.challengeResult", paymentCompletionDetails.Threeds2ChallengeResult);

            if (paymentCompletionDetails.Threeds2FingerprintOption.IsSet)
                writer.WriteString("threeds2.fingerprint", paymentCompletionDetails.Threeds2Fingerprint);

            if (paymentCompletionDetails.VaultTokenOption.IsSet)
                writer.WriteString("vaultToken", paymentCompletionDetails.VaultToken);
        }
    }
}
