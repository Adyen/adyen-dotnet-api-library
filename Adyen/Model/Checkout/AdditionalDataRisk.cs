// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataRisk
    /// </summary>
    public partial class AdditionalDataRisk : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataRisk" /> class.
        /// </summary>
        /// <param name="riskdataCustomFieldName">The data for your custom risk field. For more information, refer to [Create custom risk fields](https://docs.adyen.com/risk-management/configure-custom-risk-rules#step-1-create-custom-risk-fields).</param>
        /// <param name="riskdataBasketItemItemNrAmountPerItem">The price of item in the basket, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).</param>
        /// <param name="riskdataBasketItemItemNrBrand">Brand of the item.</param>
        /// <param name="riskdataBasketItemItemNrCategory">Category of the item.</param>
        /// <param name="riskdataBasketItemItemNrColor">Color of the item.</param>
        /// <param name="riskdataBasketItemItemNrCurrency">The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).</param>
        /// <param name="riskdataBasketItemItemNrItemID">ID of the item.</param>
        /// <param name="riskdataBasketItemItemNrManufacturer">Manufacturer of the item.</param>
        /// <param name="riskdataBasketItemItemNrProductTitle">A text description of the product the invoice line refers to.</param>
        /// <param name="riskdataBasketItemItemNrQuantity">Quantity of the item purchased.</param>
        /// <param name="riskdataBasketItemItemNrReceiverEmail">Email associated with the given product in the basket (usually in electronic gift cards).</param>
        /// <param name="riskdataBasketItemItemNrSize">Size of the item.</param>
        /// <param name="riskdataBasketItemItemNrSku">[Stock keeping unit](https://en.wikipedia.org/wiki/Stock_keeping_unit).</param>
        /// <param name="riskdataBasketItemItemNrUpc">[Universal Product Code](https://en.wikipedia.org/wiki/Universal_Product_Code).</param>
        /// <param name="riskdataPromotionsPromotionItemNrPromotionCode">Code of the promotion.</param>
        /// <param name="riskdataPromotionsPromotionItemNrPromotionDiscountAmount">The discount amount of the promotion, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).</param>
        /// <param name="riskdataPromotionsPromotionItemNrPromotionDiscountCurrency">The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).</param>
        /// <param name="riskdataPromotionsPromotionItemNrPromotionDiscountPercentage">Promotion&#39;s percentage discount. It is represented in percentage value and there is no need to include the &#39;%&#39; sign.  e.g. for a promotion discount of 30%, the value of the field should be 30.</param>
        /// <param name="riskdataPromotionsPromotionItemNrPromotionName">Name of the promotion.</param>
        /// <param name="riskdataRiskProfileReference">Reference number of the risk profile that you want to apply to the payment. If not provided or left blank, the merchant-level account&#39;s default risk profile will be applied to the payment. For more information, see [dynamically assign a risk profile to a payment](https://docs.adyen.com/risk-management/create-and-use-risk-profiles#dynamically-assign-a-risk-profile-to-a-payment).</param>
        /// <param name="riskdataSkipRisk">If this parameter is provided with the value **true**, risk checks for the payment request are skipped and the transaction will not get a risk score.</param>
        [JsonConstructor]
        public AdditionalDataRisk(Option<string> riskdataCustomFieldName = default, Option<string> riskdataBasketItemItemNrAmountPerItem = default, Option<string> riskdataBasketItemItemNrBrand = default, Option<string> riskdataBasketItemItemNrCategory = default, Option<string> riskdataBasketItemItemNrColor = default, Option<string> riskdataBasketItemItemNrCurrency = default, Option<string> riskdataBasketItemItemNrItemID = default, Option<string> riskdataBasketItemItemNrManufacturer = default, Option<string> riskdataBasketItemItemNrProductTitle = default, Option<string> riskdataBasketItemItemNrQuantity = default, Option<string> riskdataBasketItemItemNrReceiverEmail = default, Option<string> riskdataBasketItemItemNrSize = default, Option<string> riskdataBasketItemItemNrSku = default, Option<string> riskdataBasketItemItemNrUpc = default, Option<string> riskdataPromotionsPromotionItemNrPromotionCode = default, Option<string> riskdataPromotionsPromotionItemNrPromotionDiscountAmount = default, Option<string> riskdataPromotionsPromotionItemNrPromotionDiscountCurrency = default, Option<string> riskdataPromotionsPromotionItemNrPromotionDiscountPercentage = default, Option<string> riskdataPromotionsPromotionItemNrPromotionName = default, Option<string> riskdataRiskProfileReference = default, Option<string> riskdataSkipRisk = default)
        {
            RiskdataCustomFieldNameOption = riskdataCustomFieldName;
            RiskdataBasketItemItemNrAmountPerItemOption = riskdataBasketItemItemNrAmountPerItem;
            RiskdataBasketItemItemNrBrandOption = riskdataBasketItemItemNrBrand;
            RiskdataBasketItemItemNrCategoryOption = riskdataBasketItemItemNrCategory;
            RiskdataBasketItemItemNrColorOption = riskdataBasketItemItemNrColor;
            RiskdataBasketItemItemNrCurrencyOption = riskdataBasketItemItemNrCurrency;
            RiskdataBasketItemItemNrItemIDOption = riskdataBasketItemItemNrItemID;
            RiskdataBasketItemItemNrManufacturerOption = riskdataBasketItemItemNrManufacturer;
            RiskdataBasketItemItemNrProductTitleOption = riskdataBasketItemItemNrProductTitle;
            RiskdataBasketItemItemNrQuantityOption = riskdataBasketItemItemNrQuantity;
            RiskdataBasketItemItemNrReceiverEmailOption = riskdataBasketItemItemNrReceiverEmail;
            RiskdataBasketItemItemNrSizeOption = riskdataBasketItemItemNrSize;
            RiskdataBasketItemItemNrSkuOption = riskdataBasketItemItemNrSku;
            RiskdataBasketItemItemNrUpcOption = riskdataBasketItemItemNrUpc;
            RiskdataPromotionsPromotionItemNrPromotionCodeOption = riskdataPromotionsPromotionItemNrPromotionCode;
            RiskdataPromotionsPromotionItemNrPromotionDiscountAmountOption = riskdataPromotionsPromotionItemNrPromotionDiscountAmount;
            RiskdataPromotionsPromotionItemNrPromotionDiscountCurrencyOption = riskdataPromotionsPromotionItemNrPromotionDiscountCurrency;
            RiskdataPromotionsPromotionItemNrPromotionDiscountPercentageOption = riskdataPromotionsPromotionItemNrPromotionDiscountPercentage;
            RiskdataPromotionsPromotionItemNrPromotionNameOption = riskdataPromotionsPromotionItemNrPromotionName;
            RiskdataRiskProfileReferenceOption = riskdataRiskProfileReference;
            RiskdataSkipRiskOption = riskdataSkipRisk;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of RiskdataCustomFieldName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataCustomFieldNameOption { get; private set; }

        /// <summary>
        /// The data for your custom risk field. For more information, refer to [Create custom risk fields](https://docs.adyen.com/risk-management/configure-custom-risk-rules#step-1-create-custom-risk-fields).
        /// </summary>
        /// <value>The data for your custom risk field. For more information, refer to [Create custom risk fields](https://docs.adyen.com/risk-management/configure-custom-risk-rules#step-1-create-custom-risk-fields).</value>
        [JsonPropertyName("riskdata.[customFieldName]")]
        public string RiskdataCustomFieldName { get { return this.RiskdataCustomFieldNameOption; } set { this.RiskdataCustomFieldNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrAmountPerItem
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrAmountPerItemOption { get; private set; }

        /// <summary>
        /// The price of item in the basket, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).
        /// </summary>
        /// <value>The price of item in the basket, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].amountPerItem")]
        public string RiskdataBasketItemItemNrAmountPerItem { get { return this.RiskdataBasketItemItemNrAmountPerItemOption; } set { this.RiskdataBasketItemItemNrAmountPerItemOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrBrand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrBrandOption { get; private set; }

        /// <summary>
        /// Brand of the item.
        /// </summary>
        /// <value>Brand of the item.</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].brand")]
        public string RiskdataBasketItemItemNrBrand { get { return this.RiskdataBasketItemItemNrBrandOption; } set { this.RiskdataBasketItemItemNrBrandOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrCategory
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrCategoryOption { get; private set; }

        /// <summary>
        /// Category of the item.
        /// </summary>
        /// <value>Category of the item.</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].category")]
        public string RiskdataBasketItemItemNrCategory { get { return this.RiskdataBasketItemItemNrCategoryOption; } set { this.RiskdataBasketItemItemNrCategoryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrColorOption { get; private set; }

        /// <summary>
        /// Color of the item.
        /// </summary>
        /// <value>Color of the item.</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].color")]
        public string RiskdataBasketItemItemNrColor { get { return this.RiskdataBasketItemItemNrColorOption; } set { this.RiskdataBasketItemItemNrColorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrCurrency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrCurrencyOption { get; private set; }

        /// <summary>
        /// The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).
        /// </summary>
        /// <value>The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].currency")]
        public string RiskdataBasketItemItemNrCurrency { get { return this.RiskdataBasketItemItemNrCurrencyOption; } set { this.RiskdataBasketItemItemNrCurrencyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrItemID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrItemIDOption { get; private set; }

        /// <summary>
        /// ID of the item.
        /// </summary>
        /// <value>ID of the item.</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].itemID")]
        public string RiskdataBasketItemItemNrItemID { get { return this.RiskdataBasketItemItemNrItemIDOption; } set { this.RiskdataBasketItemItemNrItemIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrManufacturer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrManufacturerOption { get; private set; }

        /// <summary>
        /// Manufacturer of the item.
        /// </summary>
        /// <value>Manufacturer of the item.</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].manufacturer")]
        public string RiskdataBasketItemItemNrManufacturer { get { return this.RiskdataBasketItemItemNrManufacturerOption; } set { this.RiskdataBasketItemItemNrManufacturerOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrProductTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrProductTitleOption { get; private set; }

        /// <summary>
        /// A text description of the product the invoice line refers to.
        /// </summary>
        /// <value>A text description of the product the invoice line refers to.</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].productTitle")]
        public string RiskdataBasketItemItemNrProductTitle { get { return this.RiskdataBasketItemItemNrProductTitleOption; } set { this.RiskdataBasketItemItemNrProductTitleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrQuantity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrQuantityOption { get; private set; }

        /// <summary>
        /// Quantity of the item purchased.
        /// </summary>
        /// <value>Quantity of the item purchased.</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].quantity")]
        public string RiskdataBasketItemItemNrQuantity { get { return this.RiskdataBasketItemItemNrQuantityOption; } set { this.RiskdataBasketItemItemNrQuantityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrReceiverEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrReceiverEmailOption { get; private set; }

        /// <summary>
        /// Email associated with the given product in the basket (usually in electronic gift cards).
        /// </summary>
        /// <value>Email associated with the given product in the basket (usually in electronic gift cards).</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].receiverEmail")]
        public string RiskdataBasketItemItemNrReceiverEmail { get { return this.RiskdataBasketItemItemNrReceiverEmailOption; } set { this.RiskdataBasketItemItemNrReceiverEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrSizeOption { get; private set; }

        /// <summary>
        /// Size of the item.
        /// </summary>
        /// <value>Size of the item.</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].size")]
        public string RiskdataBasketItemItemNrSize { get { return this.RiskdataBasketItemItemNrSizeOption; } set { this.RiskdataBasketItemItemNrSizeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrSku
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrSkuOption { get; private set; }

        /// <summary>
        /// [Stock keeping unit](https://en.wikipedia.org/wiki/Stock_keeping_unit).
        /// </summary>
        /// <value>[Stock keeping unit](https://en.wikipedia.org/wiki/Stock_keeping_unit).</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].sku")]
        public string RiskdataBasketItemItemNrSku { get { return this.RiskdataBasketItemItemNrSkuOption; } set { this.RiskdataBasketItemItemNrSkuOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataBasketItemItemNrUpc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataBasketItemItemNrUpcOption { get; private set; }

        /// <summary>
        /// [Universal Product Code](https://en.wikipedia.org/wiki/Universal_Product_Code).
        /// </summary>
        /// <value>[Universal Product Code](https://en.wikipedia.org/wiki/Universal_Product_Code).</value>
        [JsonPropertyName("riskdata.basket.item[itemNr].upc")]
        public string RiskdataBasketItemItemNrUpc { get { return this.RiskdataBasketItemItemNrUpcOption; } set { this.RiskdataBasketItemItemNrUpcOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataPromotionsPromotionItemNrPromotionCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataPromotionsPromotionItemNrPromotionCodeOption { get; private set; }

        /// <summary>
        /// Code of the promotion.
        /// </summary>
        /// <value>Code of the promotion.</value>
        [JsonPropertyName("riskdata.promotions.promotion[itemNr].promotionCode")]
        public string RiskdataPromotionsPromotionItemNrPromotionCode { get { return this.RiskdataPromotionsPromotionItemNrPromotionCodeOption; } set { this.RiskdataPromotionsPromotionItemNrPromotionCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataPromotionsPromotionItemNrPromotionDiscountAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataPromotionsPromotionItemNrPromotionDiscountAmountOption { get; private set; }

        /// <summary>
        /// The discount amount of the promotion, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).
        /// </summary>
        /// <value>The discount amount of the promotion, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).</value>
        [JsonPropertyName("riskdata.promotions.promotion[itemNr].promotionDiscountAmount")]
        public string RiskdataPromotionsPromotionItemNrPromotionDiscountAmount { get { return this.RiskdataPromotionsPromotionItemNrPromotionDiscountAmountOption; } set { this.RiskdataPromotionsPromotionItemNrPromotionDiscountAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataPromotionsPromotionItemNrPromotionDiscountCurrency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataPromotionsPromotionItemNrPromotionDiscountCurrencyOption { get; private set; }

        /// <summary>
        /// The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).
        /// </summary>
        /// <value>The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).</value>
        [JsonPropertyName("riskdata.promotions.promotion[itemNr].promotionDiscountCurrency")]
        public string RiskdataPromotionsPromotionItemNrPromotionDiscountCurrency { get { return this.RiskdataPromotionsPromotionItemNrPromotionDiscountCurrencyOption; } set { this.RiskdataPromotionsPromotionItemNrPromotionDiscountCurrencyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataPromotionsPromotionItemNrPromotionDiscountPercentage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataPromotionsPromotionItemNrPromotionDiscountPercentageOption { get; private set; }

        /// <summary>
        /// Promotion&#39;s percentage discount. It is represented in percentage value and there is no need to include the &#39;%&#39; sign.  e.g. for a promotion discount of 30%, the value of the field should be 30.
        /// </summary>
        /// <value>Promotion&#39;s percentage discount. It is represented in percentage value and there is no need to include the &#39;%&#39; sign.  e.g. for a promotion discount of 30%, the value of the field should be 30.</value>
        [JsonPropertyName("riskdata.promotions.promotion[itemNr].promotionDiscountPercentage")]
        public string RiskdataPromotionsPromotionItemNrPromotionDiscountPercentage { get { return this.RiskdataPromotionsPromotionItemNrPromotionDiscountPercentageOption; } set { this.RiskdataPromotionsPromotionItemNrPromotionDiscountPercentageOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataPromotionsPromotionItemNrPromotionName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataPromotionsPromotionItemNrPromotionNameOption { get; private set; }

        /// <summary>
        /// Name of the promotion.
        /// </summary>
        /// <value>Name of the promotion.</value>
        [JsonPropertyName("riskdata.promotions.promotion[itemNr].promotionName")]
        public string RiskdataPromotionsPromotionItemNrPromotionName { get { return this.RiskdataPromotionsPromotionItemNrPromotionNameOption; } set { this.RiskdataPromotionsPromotionItemNrPromotionNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataRiskProfileReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataRiskProfileReferenceOption { get; private set; }

        /// <summary>
        /// Reference number of the risk profile that you want to apply to the payment. If not provided or left blank, the merchant-level account&#39;s default risk profile will be applied to the payment. For more information, see [dynamically assign a risk profile to a payment](https://docs.adyen.com/risk-management/create-and-use-risk-profiles#dynamically-assign-a-risk-profile-to-a-payment).
        /// </summary>
        /// <value>Reference number of the risk profile that you want to apply to the payment. If not provided or left blank, the merchant-level account&#39;s default risk profile will be applied to the payment. For more information, see [dynamically assign a risk profile to a payment](https://docs.adyen.com/risk-management/create-and-use-risk-profiles#dynamically-assign-a-risk-profile-to-a-payment).</value>
        [JsonPropertyName("riskdata.riskProfileReference")]
        public string RiskdataRiskProfileReference { get { return this.RiskdataRiskProfileReferenceOption; } set { this.RiskdataRiskProfileReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskdataSkipRisk
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskdataSkipRiskOption { get; private set; }

        /// <summary>
        /// If this parameter is provided with the value **true**, risk checks for the payment request are skipped and the transaction will not get a risk score.
        /// </summary>
        /// <value>If this parameter is provided with the value **true**, risk checks for the payment request are skipped and the transaction will not get a risk score.</value>
        [JsonPropertyName("riskdata.skipRisk")]
        public string RiskdataSkipRisk { get { return this.RiskdataSkipRiskOption; } set { this.RiskdataSkipRiskOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataRisk {\n");
            sb.Append("  RiskdataCustomFieldName: ").Append(RiskdataCustomFieldName).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrAmountPerItem: ").Append(RiskdataBasketItemItemNrAmountPerItem).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrBrand: ").Append(RiskdataBasketItemItemNrBrand).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrCategory: ").Append(RiskdataBasketItemItemNrCategory).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrColor: ").Append(RiskdataBasketItemItemNrColor).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrCurrency: ").Append(RiskdataBasketItemItemNrCurrency).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrItemID: ").Append(RiskdataBasketItemItemNrItemID).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrManufacturer: ").Append(RiskdataBasketItemItemNrManufacturer).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrProductTitle: ").Append(RiskdataBasketItemItemNrProductTitle).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrQuantity: ").Append(RiskdataBasketItemItemNrQuantity).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrReceiverEmail: ").Append(RiskdataBasketItemItemNrReceiverEmail).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrSize: ").Append(RiskdataBasketItemItemNrSize).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrSku: ").Append(RiskdataBasketItemItemNrSku).Append("\n");
            sb.Append("  RiskdataBasketItemItemNrUpc: ").Append(RiskdataBasketItemItemNrUpc).Append("\n");
            sb.Append("  RiskdataPromotionsPromotionItemNrPromotionCode: ").Append(RiskdataPromotionsPromotionItemNrPromotionCode).Append("\n");
            sb.Append("  RiskdataPromotionsPromotionItemNrPromotionDiscountAmount: ").Append(RiskdataPromotionsPromotionItemNrPromotionDiscountAmount).Append("\n");
            sb.Append("  RiskdataPromotionsPromotionItemNrPromotionDiscountCurrency: ").Append(RiskdataPromotionsPromotionItemNrPromotionDiscountCurrency).Append("\n");
            sb.Append("  RiskdataPromotionsPromotionItemNrPromotionDiscountPercentage: ").Append(RiskdataPromotionsPromotionItemNrPromotionDiscountPercentage).Append("\n");
            sb.Append("  RiskdataPromotionsPromotionItemNrPromotionName: ").Append(RiskdataPromotionsPromotionItemNrPromotionName).Append("\n");
            sb.Append("  RiskdataRiskProfileReference: ").Append(RiskdataRiskProfileReference).Append("\n");
            sb.Append("  RiskdataSkipRisk: ").Append(RiskdataSkipRisk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalDataRisk" />
    /// </summary>
    public class AdditionalDataRiskJsonConverter : JsonConverter<AdditionalDataRisk>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalDataRisk" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalDataRisk Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> riskdataCustomFieldName = default;
            Option<string> riskdataBasketItemItemNrAmountPerItem = default;
            Option<string> riskdataBasketItemItemNrBrand = default;
            Option<string> riskdataBasketItemItemNrCategory = default;
            Option<string> riskdataBasketItemItemNrColor = default;
            Option<string> riskdataBasketItemItemNrCurrency = default;
            Option<string> riskdataBasketItemItemNrItemID = default;
            Option<string> riskdataBasketItemItemNrManufacturer = default;
            Option<string> riskdataBasketItemItemNrProductTitle = default;
            Option<string> riskdataBasketItemItemNrQuantity = default;
            Option<string> riskdataBasketItemItemNrReceiverEmail = default;
            Option<string> riskdataBasketItemItemNrSize = default;
            Option<string> riskdataBasketItemItemNrSku = default;
            Option<string> riskdataBasketItemItemNrUpc = default;
            Option<string> riskdataPromotionsPromotionItemNrPromotionCode = default;
            Option<string> riskdataPromotionsPromotionItemNrPromotionDiscountAmount = default;
            Option<string> riskdataPromotionsPromotionItemNrPromotionDiscountCurrency = default;
            Option<string> riskdataPromotionsPromotionItemNrPromotionDiscountPercentage = default;
            Option<string> riskdataPromotionsPromotionItemNrPromotionName = default;
            Option<string> riskdataRiskProfileReference = default;
            Option<string> riskdataSkipRisk = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "riskdata.[customFieldName]":
                            riskdataCustomFieldName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].amountPerItem":
                            riskdataBasketItemItemNrAmountPerItem = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].brand":
                            riskdataBasketItemItemNrBrand = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].category":
                            riskdataBasketItemItemNrCategory = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].color":
                            riskdataBasketItemItemNrColor = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].currency":
                            riskdataBasketItemItemNrCurrency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].itemID":
                            riskdataBasketItemItemNrItemID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].manufacturer":
                            riskdataBasketItemItemNrManufacturer = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].productTitle":
                            riskdataBasketItemItemNrProductTitle = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].quantity":
                            riskdataBasketItemItemNrQuantity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].receiverEmail":
                            riskdataBasketItemItemNrReceiverEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].size":
                            riskdataBasketItemItemNrSize = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].sku":
                            riskdataBasketItemItemNrSku = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.basket.item[itemNr].upc":
                            riskdataBasketItemItemNrUpc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.promotions.promotion[itemNr].promotionCode":
                            riskdataPromotionsPromotionItemNrPromotionCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.promotions.promotion[itemNr].promotionDiscountAmount":
                            riskdataPromotionsPromotionItemNrPromotionDiscountAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.promotions.promotion[itemNr].promotionDiscountCurrency":
                            riskdataPromotionsPromotionItemNrPromotionDiscountCurrency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.promotions.promotion[itemNr].promotionDiscountPercentage":
                            riskdataPromotionsPromotionItemNrPromotionDiscountPercentage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.promotions.promotion[itemNr].promotionName":
                            riskdataPromotionsPromotionItemNrPromotionName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.riskProfileReference":
                            riskdataRiskProfileReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskdata.skipRisk":
                            riskdataSkipRisk = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (riskdataCustomFieldName.IsSet && riskdataCustomFieldName.Value == null)
                throw new ArgumentNullException(nameof(riskdataCustomFieldName), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrAmountPerItem.IsSet && riskdataBasketItemItemNrAmountPerItem.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrAmountPerItem), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrBrand.IsSet && riskdataBasketItemItemNrBrand.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrBrand), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrCategory.IsSet && riskdataBasketItemItemNrCategory.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrCategory), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrColor.IsSet && riskdataBasketItemItemNrColor.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrColor), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrCurrency.IsSet && riskdataBasketItemItemNrCurrency.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrCurrency), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrItemID.IsSet && riskdataBasketItemItemNrItemID.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrItemID), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrManufacturer.IsSet && riskdataBasketItemItemNrManufacturer.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrManufacturer), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrProductTitle.IsSet && riskdataBasketItemItemNrProductTitle.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrProductTitle), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrQuantity.IsSet && riskdataBasketItemItemNrQuantity.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrQuantity), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrReceiverEmail.IsSet && riskdataBasketItemItemNrReceiverEmail.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrReceiverEmail), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrSize.IsSet && riskdataBasketItemItemNrSize.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrSize), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrSku.IsSet && riskdataBasketItemItemNrSku.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrSku), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataBasketItemItemNrUpc.IsSet && riskdataBasketItemItemNrUpc.Value == null)
                throw new ArgumentNullException(nameof(riskdataBasketItemItemNrUpc), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataPromotionsPromotionItemNrPromotionCode.IsSet && riskdataPromotionsPromotionItemNrPromotionCode.Value == null)
                throw new ArgumentNullException(nameof(riskdataPromotionsPromotionItemNrPromotionCode), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataPromotionsPromotionItemNrPromotionDiscountAmount.IsSet && riskdataPromotionsPromotionItemNrPromotionDiscountAmount.Value == null)
                throw new ArgumentNullException(nameof(riskdataPromotionsPromotionItemNrPromotionDiscountAmount), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataPromotionsPromotionItemNrPromotionDiscountCurrency.IsSet && riskdataPromotionsPromotionItemNrPromotionDiscountCurrency.Value == null)
                throw new ArgumentNullException(nameof(riskdataPromotionsPromotionItemNrPromotionDiscountCurrency), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataPromotionsPromotionItemNrPromotionDiscountPercentage.IsSet && riskdataPromotionsPromotionItemNrPromotionDiscountPercentage.Value == null)
                throw new ArgumentNullException(nameof(riskdataPromotionsPromotionItemNrPromotionDiscountPercentage), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataPromotionsPromotionItemNrPromotionName.IsSet && riskdataPromotionsPromotionItemNrPromotionName.Value == null)
                throw new ArgumentNullException(nameof(riskdataPromotionsPromotionItemNrPromotionName), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataRiskProfileReference.IsSet && riskdataRiskProfileReference.Value == null)
                throw new ArgumentNullException(nameof(riskdataRiskProfileReference), "Property is not nullable for class AdditionalDataRisk.");

            if (riskdataSkipRisk.IsSet && riskdataSkipRisk.Value == null)
                throw new ArgumentNullException(nameof(riskdataSkipRisk), "Property is not nullable for class AdditionalDataRisk.");

            return new AdditionalDataRisk(riskdataCustomFieldName, riskdataBasketItemItemNrAmountPerItem, riskdataBasketItemItemNrBrand, riskdataBasketItemItemNrCategory, riskdataBasketItemItemNrColor, riskdataBasketItemItemNrCurrency, riskdataBasketItemItemNrItemID, riskdataBasketItemItemNrManufacturer, riskdataBasketItemItemNrProductTitle, riskdataBasketItemItemNrQuantity, riskdataBasketItemItemNrReceiverEmail, riskdataBasketItemItemNrSize, riskdataBasketItemItemNrSku, riskdataBasketItemItemNrUpc, riskdataPromotionsPromotionItemNrPromotionCode, riskdataPromotionsPromotionItemNrPromotionDiscountAmount, riskdataPromotionsPromotionItemNrPromotionDiscountCurrency, riskdataPromotionsPromotionItemNrPromotionDiscountPercentage, riskdataPromotionsPromotionItemNrPromotionName, riskdataRiskProfileReference, riskdataSkipRisk);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalDataRisk" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataRisk"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalDataRisk additionalDataRisk, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalDataRisk, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalDataRisk" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataRisk"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalDataRisk additionalDataRisk, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalDataRisk.RiskdataCustomFieldNameOption.IsSet && additionalDataRisk.RiskdataCustomFieldName == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataCustomFieldName), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrAmountPerItemOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrAmountPerItem == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrAmountPerItem), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrBrandOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrBrand == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrBrand), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrCategoryOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrCategory == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrCategory), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrColorOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrColor == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrColor), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrCurrencyOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrCurrency == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrCurrency), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrItemIDOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrItemID == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrItemID), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrManufacturerOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrManufacturer == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrManufacturer), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrProductTitleOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrProductTitle == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrProductTitle), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrQuantityOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrQuantity == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrQuantity), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrReceiverEmailOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrReceiverEmail == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrReceiverEmail), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrSizeOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrSize == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrSize), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrSkuOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrSku == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrSku), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataBasketItemItemNrUpcOption.IsSet && additionalDataRisk.RiskdataBasketItemItemNrUpc == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataBasketItemItemNrUpc), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionCodeOption.IsSet && additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionCode == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionCode), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountAmountOption.IsSet && additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountAmount == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountAmount), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountCurrencyOption.IsSet && additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountCurrency == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountCurrency), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountPercentageOption.IsSet && additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountPercentage == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountPercentage), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionNameOption.IsSet && additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionName == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionName), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataRiskProfileReferenceOption.IsSet && additionalDataRisk.RiskdataRiskProfileReference == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataRiskProfileReference), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataSkipRiskOption.IsSet && additionalDataRisk.RiskdataSkipRisk == null)
                throw new ArgumentNullException(nameof(additionalDataRisk.RiskdataSkipRisk), "Property is required for class AdditionalDataRisk.");

            if (additionalDataRisk.RiskdataCustomFieldNameOption.IsSet)
                writer.WriteString("riskdata.[customFieldName]", additionalDataRisk.RiskdataCustomFieldName);

            if (additionalDataRisk.RiskdataBasketItemItemNrAmountPerItemOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].amountPerItem", additionalDataRisk.RiskdataBasketItemItemNrAmountPerItem);

            if (additionalDataRisk.RiskdataBasketItemItemNrBrandOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].brand", additionalDataRisk.RiskdataBasketItemItemNrBrand);

            if (additionalDataRisk.RiskdataBasketItemItemNrCategoryOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].category", additionalDataRisk.RiskdataBasketItemItemNrCategory);

            if (additionalDataRisk.RiskdataBasketItemItemNrColorOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].color", additionalDataRisk.RiskdataBasketItemItemNrColor);

            if (additionalDataRisk.RiskdataBasketItemItemNrCurrencyOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].currency", additionalDataRisk.RiskdataBasketItemItemNrCurrency);

            if (additionalDataRisk.RiskdataBasketItemItemNrItemIDOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].itemID", additionalDataRisk.RiskdataBasketItemItemNrItemID);

            if (additionalDataRisk.RiskdataBasketItemItemNrManufacturerOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].manufacturer", additionalDataRisk.RiskdataBasketItemItemNrManufacturer);

            if (additionalDataRisk.RiskdataBasketItemItemNrProductTitleOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].productTitle", additionalDataRisk.RiskdataBasketItemItemNrProductTitle);

            if (additionalDataRisk.RiskdataBasketItemItemNrQuantityOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].quantity", additionalDataRisk.RiskdataBasketItemItemNrQuantity);

            if (additionalDataRisk.RiskdataBasketItemItemNrReceiverEmailOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].receiverEmail", additionalDataRisk.RiskdataBasketItemItemNrReceiverEmail);

            if (additionalDataRisk.RiskdataBasketItemItemNrSizeOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].size", additionalDataRisk.RiskdataBasketItemItemNrSize);

            if (additionalDataRisk.RiskdataBasketItemItemNrSkuOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].sku", additionalDataRisk.RiskdataBasketItemItemNrSku);

            if (additionalDataRisk.RiskdataBasketItemItemNrUpcOption.IsSet)
                writer.WriteString("riskdata.basket.item[itemNr].upc", additionalDataRisk.RiskdataBasketItemItemNrUpc);

            if (additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionCodeOption.IsSet)
                writer.WriteString("riskdata.promotions.promotion[itemNr].promotionCode", additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionCode);

            if (additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountAmountOption.IsSet)
                writer.WriteString("riskdata.promotions.promotion[itemNr].promotionDiscountAmount", additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountAmount);

            if (additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountCurrencyOption.IsSet)
                writer.WriteString("riskdata.promotions.promotion[itemNr].promotionDiscountCurrency", additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountCurrency);

            if (additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountPercentageOption.IsSet)
                writer.WriteString("riskdata.promotions.promotion[itemNr].promotionDiscountPercentage", additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionDiscountPercentage);

            if (additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionNameOption.IsSet)
                writer.WriteString("riskdata.promotions.promotion[itemNr].promotionName", additionalDataRisk.RiskdataPromotionsPromotionItemNrPromotionName);

            if (additionalDataRisk.RiskdataRiskProfileReferenceOption.IsSet)
                writer.WriteString("riskdata.riskProfileReference", additionalDataRisk.RiskdataRiskProfileReference);

            if (additionalDataRisk.RiskdataSkipRiskOption.IsSet)
                writer.WriteString("riskdata.skipRisk", additionalDataRisk.RiskdataSkipRisk);
        }
    }
}
