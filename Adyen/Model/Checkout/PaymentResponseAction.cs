// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Action to be taken for completing the payment.
    /// </summary>
    public partial class PaymentResponseAction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentResponseAction" /> class.
        /// </summary>
        /// <param name="checkoutAwaitAction"></param>
        public PaymentResponseAction(CheckoutAwaitAction checkoutAwaitAction)
        {
            CheckoutAwaitAction = checkoutAwaitAction;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentResponseAction" /> class.
        /// </summary>
        /// <param name="checkoutBankTransferAction"></param>
        public PaymentResponseAction(CheckoutBankTransferAction checkoutBankTransferAction)
        {
            CheckoutBankTransferAction = checkoutBankTransferAction;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentResponseAction" /> class.
        /// </summary>
        /// <param name="checkoutDelegatedAuthenticationAction"></param>
        public PaymentResponseAction(CheckoutDelegatedAuthenticationAction checkoutDelegatedAuthenticationAction)
        {
            CheckoutDelegatedAuthenticationAction = checkoutDelegatedAuthenticationAction;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentResponseAction" /> class.
        /// </summary>
        /// <param name="checkoutNativeRedirectAction"></param>
        public PaymentResponseAction(CheckoutNativeRedirectAction checkoutNativeRedirectAction)
        {
            CheckoutNativeRedirectAction = checkoutNativeRedirectAction;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentResponseAction" /> class.
        /// </summary>
        /// <param name="checkoutQrCodeAction"></param>
        public PaymentResponseAction(CheckoutQrCodeAction checkoutQrCodeAction)
        {
            CheckoutQrCodeAction = checkoutQrCodeAction;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentResponseAction" /> class.
        /// </summary>
        /// <param name="checkoutRedirectAction"></param>
        public PaymentResponseAction(CheckoutRedirectAction checkoutRedirectAction)
        {
            CheckoutRedirectAction = checkoutRedirectAction;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentResponseAction" /> class.
        /// </summary>
        /// <param name="checkoutSDKAction"></param>
        public PaymentResponseAction(CheckoutSDKAction checkoutSDKAction)
        {
            CheckoutSDKAction = checkoutSDKAction;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentResponseAction" /> class.
        /// </summary>
        /// <param name="checkoutThreeDS2Action"></param>
        public PaymentResponseAction(CheckoutThreeDS2Action checkoutThreeDS2Action)
        {
            CheckoutThreeDS2Action = checkoutThreeDS2Action;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentResponseAction" /> class.
        /// </summary>
        /// <param name="checkoutVoucherAction"></param>
        public PaymentResponseAction(CheckoutVoucherAction checkoutVoucherAction)
        {
            CheckoutVoucherAction = checkoutVoucherAction;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CheckoutAwaitAction
        /// </summary>
        public CheckoutAwaitAction CheckoutAwaitAction { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutBankTransferAction
        /// </summary>
        public CheckoutBankTransferAction CheckoutBankTransferAction { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutDelegatedAuthenticationAction
        /// </summary>
        public CheckoutDelegatedAuthenticationAction CheckoutDelegatedAuthenticationAction { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutNativeRedirectAction
        /// </summary>
        public CheckoutNativeRedirectAction CheckoutNativeRedirectAction { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutQrCodeAction
        /// </summary>
        public CheckoutQrCodeAction CheckoutQrCodeAction { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutRedirectAction
        /// </summary>
        public CheckoutRedirectAction CheckoutRedirectAction { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutSDKAction
        /// </summary>
        public CheckoutSDKAction CheckoutSDKAction { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutThreeDS2Action
        /// </summary>
        public CheckoutThreeDS2Action CheckoutThreeDS2Action { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutVoucherAction
        /// </summary>
        public CheckoutVoucherAction CheckoutVoucherAction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentResponseAction {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentResponseAction" />
    /// </summary>
    public class PaymentResponseActionJsonConverter : JsonConverter<PaymentResponseAction>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentResponseAction" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentResponseAction Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            CheckoutAwaitAction checkoutAwaitAction = default;
            CheckoutBankTransferAction checkoutBankTransferAction = default;
            CheckoutDelegatedAuthenticationAction checkoutDelegatedAuthenticationAction = default;
            CheckoutNativeRedirectAction checkoutNativeRedirectAction = default;
            CheckoutQrCodeAction checkoutQrCodeAction = default;
            CheckoutRedirectAction checkoutRedirectAction = default;
            CheckoutSDKAction checkoutSDKAction = default;
            CheckoutThreeDS2Action checkoutThreeDS2Action = default;
            CheckoutVoucherAction checkoutVoucherAction = default;

            Utf8JsonReader utf8JsonReaderOneOf = utf8JsonReader;
            while (utf8JsonReaderOneOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (utf8JsonReaderOneOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderOneOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderCheckoutAwaitAction = utf8JsonReader;
                    ClientUtils.TryDeserialize<CheckoutAwaitAction>(ref utf8JsonReaderCheckoutAwaitAction, jsonSerializerOptions, out checkoutAwaitAction);

                    Utf8JsonReader utf8JsonReaderCheckoutBankTransferAction = utf8JsonReader;
                    ClientUtils.TryDeserialize<CheckoutBankTransferAction>(ref utf8JsonReaderCheckoutBankTransferAction, jsonSerializerOptions, out checkoutBankTransferAction);

                    Utf8JsonReader utf8JsonReaderCheckoutDelegatedAuthenticationAction = utf8JsonReader;
                    ClientUtils.TryDeserialize<CheckoutDelegatedAuthenticationAction>(ref utf8JsonReaderCheckoutDelegatedAuthenticationAction, jsonSerializerOptions, out checkoutDelegatedAuthenticationAction);

                    Utf8JsonReader utf8JsonReaderCheckoutNativeRedirectAction = utf8JsonReader;
                    ClientUtils.TryDeserialize<CheckoutNativeRedirectAction>(ref utf8JsonReaderCheckoutNativeRedirectAction, jsonSerializerOptions, out checkoutNativeRedirectAction);

                    Utf8JsonReader utf8JsonReaderCheckoutQrCodeAction = utf8JsonReader;
                    ClientUtils.TryDeserialize<CheckoutQrCodeAction>(ref utf8JsonReaderCheckoutQrCodeAction, jsonSerializerOptions, out checkoutQrCodeAction);

                    Utf8JsonReader utf8JsonReaderCheckoutRedirectAction = utf8JsonReader;
                    ClientUtils.TryDeserialize<CheckoutRedirectAction>(ref utf8JsonReaderCheckoutRedirectAction, jsonSerializerOptions, out checkoutRedirectAction);

                    Utf8JsonReader utf8JsonReaderCheckoutSDKAction = utf8JsonReader;
                    ClientUtils.TryDeserialize<CheckoutSDKAction>(ref utf8JsonReaderCheckoutSDKAction, jsonSerializerOptions, out checkoutSDKAction);

                    Utf8JsonReader utf8JsonReaderCheckoutThreeDS2Action = utf8JsonReader;
                    ClientUtils.TryDeserialize<CheckoutThreeDS2Action>(ref utf8JsonReaderCheckoutThreeDS2Action, jsonSerializerOptions, out checkoutThreeDS2Action);

                    Utf8JsonReader utf8JsonReaderCheckoutVoucherAction = utf8JsonReader;
                    ClientUtils.TryDeserialize<CheckoutVoucherAction>(ref utf8JsonReaderCheckoutVoucherAction, jsonSerializerOptions, out checkoutVoucherAction);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            if (checkoutAwaitAction != null)
                return new PaymentResponseAction(checkoutAwaitAction);

            if (checkoutBankTransferAction != null)
                return new PaymentResponseAction(checkoutBankTransferAction);

            if (checkoutDelegatedAuthenticationAction != null)
                return new PaymentResponseAction(checkoutDelegatedAuthenticationAction);

            if (checkoutNativeRedirectAction != null)
                return new PaymentResponseAction(checkoutNativeRedirectAction);

            if (checkoutQrCodeAction != null)
                return new PaymentResponseAction(checkoutQrCodeAction);

            if (checkoutRedirectAction != null)
                return new PaymentResponseAction(checkoutRedirectAction);

            if (checkoutSDKAction != null)
                return new PaymentResponseAction(checkoutSDKAction);

            if (checkoutThreeDS2Action != null)
                return new PaymentResponseAction(checkoutThreeDS2Action);

            if (checkoutVoucherAction != null)
                return new PaymentResponseAction(checkoutVoucherAction);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="PaymentResponseAction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentResponseAction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentResponseAction paymentResponseAction, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentResponseAction, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentResponseAction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentResponseAction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentResponseAction paymentResponseAction, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
