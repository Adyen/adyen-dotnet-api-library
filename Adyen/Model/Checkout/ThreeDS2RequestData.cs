/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ThreeDS2RequestData
    /// </summary>
    [DataContract(Name = "ThreeDS2RequestData")]
    public partial class ThreeDS2RequestData : IEquatable<ThreeDS2RequestData>, IValidatableObject
    {
        /// <summary>
        /// Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values: * **01** — Not applicable * **02** — Credit * **03** — Debit
        /// </summary>
        /// <value>Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values: * **01** — Not applicable * **02** — Credit * **03** — Debit</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AcctTypeEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            [EnumMember(Value = "02")]
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            [EnumMember(Value = "03")]
            _03 = 3

        }


        /// <summary>
        /// Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values: * **01** — Not applicable * **02** — Credit * **03** — Debit
        /// </summary>
        /// <value>Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values: * **01** — Not applicable * **02** — Credit * **03** — Debit</value>
        [DataMember(Name = "acctType", EmitDefaultValue = false)]
        public AcctTypeEnum? AcctType { get; set; }
        /// <summary>
        /// Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values: * **Y** — Shipping Address matches Billing Address. * **N** — Shipping Address does not match Billing Address.
        /// </summary>
        /// <value>Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values: * **Y** — Shipping Address matches Billing Address. * **N** — Shipping Address does not match Billing Address.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddrMatchEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2

        }


        /// <summary>
        /// Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values: * **Y** — Shipping Address matches Billing Address. * **N** — Shipping Address does not match Billing Address.
        /// </summary>
        /// <value>Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values: * **Y** — Shipping Address matches Billing Address. * **N** — Shipping Address does not match Billing Address.</value>
        [DataMember(Name = "addrMatch", EmitDefaultValue = false)]
        public AddrMatchEnum? AddrMatch { get; set; }
        /// <summary>
        /// Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * &#x60;noPreference&#x60; * &#x60;requestNoChallenge&#x60; * &#x60;requestChallenge&#x60; * &#x60;requestChallengeAsMandate&#x60; 
        /// </summary>
        /// <value>Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * &#x60;noPreference&#x60; * &#x60;requestNoChallenge&#x60; * &#x60;requestChallenge&#x60; * &#x60;requestChallengeAsMandate&#x60; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChallengeIndicatorEnum
        {
            /// <summary>
            /// Enum NoPreference for value: noPreference
            /// </summary>
            [EnumMember(Value = "noPreference")]
            NoPreference = 1,

            /// <summary>
            /// Enum RequestNoChallenge for value: requestNoChallenge
            /// </summary>
            [EnumMember(Value = "requestNoChallenge")]
            RequestNoChallenge = 2,

            /// <summary>
            /// Enum RequestChallenge for value: requestChallenge
            /// </summary>
            [EnumMember(Value = "requestChallenge")]
            RequestChallenge = 3,

            /// <summary>
            /// Enum RequestChallengeAsMandate for value: requestChallengeAsMandate
            /// </summary>
            [EnumMember(Value = "requestChallengeAsMandate")]
            RequestChallengeAsMandate = 4

        }


        /// <summary>
        /// Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * &#x60;noPreference&#x60; * &#x60;requestNoChallenge&#x60; * &#x60;requestChallenge&#x60; * &#x60;requestChallengeAsMandate&#x60; 
        /// </summary>
        /// <value>Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * &#x60;noPreference&#x60; * &#x60;requestNoChallenge&#x60; * &#x60;requestChallenge&#x60; * &#x60;requestChallengeAsMandate&#x60; </value>
        [DataMember(Name = "challengeIndicator", EmitDefaultValue = false)]
        [Obsolete]
        public ChallengeIndicatorEnum? ChallengeIndicator { get; set; }
        /// <summary>
        /// Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only
        /// </summary>
        /// <value>Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThreeDSRequestorChallengeIndEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            [EnumMember(Value = "02")]
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            [EnumMember(Value = "03")]
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            [EnumMember(Value = "04")]
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            [EnumMember(Value = "05")]
            _05 = 5,

            /// <summary>
            /// Enum _06 for value: 06
            /// </summary>
            [EnumMember(Value = "06")]
            _06 = 6

        }


        /// <summary>
        /// Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only
        /// </summary>
        /// <value>Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only</value>
        [DataMember(Name = "threeDSRequestorChallengeInd", EmitDefaultValue = false)]
        public ThreeDSRequestorChallengeIndEnum? ThreeDSRequestorChallengeInd { get; set; }
        /// <summary>
        /// Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values: * **01** — Goods/Service Purchase * **03** — Check Acceptance * **10** — Account Funding * **11** — Quasi-Cash Transaction * **28** — Prepaid Activation and Load
        /// </summary>
        /// <value>Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values: * **01** — Goods/Service Purchase * **03** — Check Acceptance * **10** — Account Funding * **11** — Quasi-Cash Transaction * **28** — Prepaid Activation and Load</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransTypeEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 1,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            [EnumMember(Value = "03")]
            _03 = 2,

            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 3,

            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")]
            _11 = 4,

            /// <summary>
            /// Enum _28 for value: 28
            /// </summary>
            [EnumMember(Value = "28")]
            _28 = 5

        }


        /// <summary>
        /// Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values: * **01** — Goods/Service Purchase * **03** — Check Acceptance * **10** — Account Funding * **11** — Quasi-Cash Transaction * **28** — Prepaid Activation and Load
        /// </summary>
        /// <value>Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values: * **01** — Goods/Service Purchase * **03** — Check Acceptance * **10** — Account Funding * **11** — Quasi-Cash Transaction * **28** — Prepaid Activation and Load</value>
        [DataMember(Name = "transType", EmitDefaultValue = false)]
        public TransTypeEnum? TransType { get; set; }
        /// <summary>
        /// Identify the type of the transaction being authenticated.
        /// </summary>
        /// <value>Identify the type of the transaction being authenticated.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionTypeEnum
        {
            /// <summary>
            /// Enum GoodsOrServicePurchase for value: goodsOrServicePurchase
            /// </summary>
            [EnumMember(Value = "goodsOrServicePurchase")]
            GoodsOrServicePurchase = 1,

            /// <summary>
            /// Enum CheckAcceptance for value: checkAcceptance
            /// </summary>
            [EnumMember(Value = "checkAcceptance")]
            CheckAcceptance = 2,

            /// <summary>
            /// Enum AccountFunding for value: accountFunding
            /// </summary>
            [EnumMember(Value = "accountFunding")]
            AccountFunding = 3,

            /// <summary>
            /// Enum QuasiCashTransaction for value: quasiCashTransaction
            /// </summary>
            [EnumMember(Value = "quasiCashTransaction")]
            QuasiCashTransaction = 4,

            /// <summary>
            /// Enum PrepaidActivationAndLoad for value: prepaidActivationAndLoad
            /// </summary>
            [EnumMember(Value = "prepaidActivationAndLoad")]
            PrepaidActivationAndLoad = 5

        }


        /// <summary>
        /// Identify the type of the transaction being authenticated.
        /// </summary>
        /// <value>Identify the type of the transaction being authenticated.</value>
        [DataMember(Name = "transactionType", EmitDefaultValue = false)]
        public TransactionTypeEnum? TransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDS2RequestData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ThreeDS2RequestData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDS2RequestData" /> class.
        /// </summary>
        /// <param name="acctInfo">acctInfo.</param>
        /// <param name="acctType">Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values: * **01** — Not applicable * **02** — Credit * **03** — Debit.</param>
        /// <param name="acquirerBIN">Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform..</param>
        /// <param name="acquirerMerchantID">Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant&#39;s acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform..</param>
        /// <param name="addrMatch">Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values: * **Y** — Shipping Address matches Billing Address. * **N** — Shipping Address does not match Billing Address..</param>
        /// <param name="authenticationOnly">If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. (default to false).</param>
        /// <param name="challengeIndicator">Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * &#x60;noPreference&#x60; * &#x60;requestNoChallenge&#x60; * &#x60;requestChallenge&#x60; * &#x60;requestChallengeAsMandate&#x60; .</param>
        /// <param name="deviceChannel">The environment of the shopper. Allowed values: * &#x60;app&#x60; * &#x60;browser&#x60; (required).</param>
        /// <param name="deviceRenderOptions">deviceRenderOptions.</param>
        /// <param name="homePhone">homePhone.</param>
        /// <param name="mcc">Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The &#x60;mcc&#x60; is a four-digit code with which the previously given &#x60;acquirerMerchantID&#x60; is registered at the scheme..</param>
        /// <param name="merchantName">Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters. &gt; Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account..</param>
        /// <param name="messageVersion">The &#x60;messageVersion&#x60; value indicating the 3D Secure 2 protocol version..</param>
        /// <param name="mobilePhone">mobilePhone.</param>
        /// <param name="notificationURL">URL to where the issuer should send the &#x60;CRes&#x60;. Required if you are not using components for &#x60;channel&#x60; **Web** or if you are using classic integration &#x60;deviceChannel&#x60; **browser**..</param>
        /// <param name="payTokenInd">Value **true** indicates that the transaction was de-tokenised prior to being received by the ACS..</param>
        /// <param name="paymentAuthenticationUseCase">Indicates the type of payment for which an authentication is requested (message extension).</param>
        /// <param name="purchaseInstalData">Indicates the maximum number of authorisations permitted for instalment payments. Length: 1–3 characters..</param>
        /// <param name="recurringExpiry">Date after which no further authorisations shall be performed. Format: YYYYMMDD.</param>
        /// <param name="recurringFrequency">Indicates the minimum number of days between authorisations. Maximum length: 4 characters..</param>
        /// <param name="sdkAppID">The &#x60;sdkAppID&#x60; value as received from the 3D Secure 2 SDK. Required for &#x60;deviceChannel&#x60; set to **app**..</param>
        /// <param name="sdkEncData">The &#x60;sdkEncData&#x60; value as received from the 3D Secure 2 SDK. Required for &#x60;deviceChannel&#x60; set to **app**..</param>
        /// <param name="sdkEphemPubKey">sdkEphemPubKey.</param>
        /// <param name="sdkMaxTimeout">The maximum amount of time in minutes for the 3D Secure 2 authentication process. Optional and only for &#x60;deviceChannel&#x60; set to **app**. Defaults to **60** minutes. (default to 60).</param>
        /// <param name="sdkReferenceNumber">The &#x60;sdkReferenceNumber&#x60; value as received from the 3D Secure 2 SDK. Only for &#x60;deviceChannel&#x60; set to **app**..</param>
        /// <param name="sdkTransID">The &#x60;sdkTransID&#x60; value as received from the 3D Secure 2 SDK. Only for &#x60;deviceChannel&#x60; set to **app**..</param>
        /// <param name="sdkVersion">Version of the 3D Secure 2 mobile SDK.  Only for &#x60;deviceChannel&#x60; set to **app**..</param>
        /// <param name="threeDSCompInd">Completion indicator for the device fingerprinting..</param>
        /// <param name="threeDSRequestorAuthenticationInd">Indicates the type of Authentication request..</param>
        /// <param name="threeDSRequestorAuthenticationInfo">threeDSRequestorAuthenticationInfo.</param>
        /// <param name="threeDSRequestorChallengeInd">Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only.</param>
        /// <param name="threeDSRequestorID">Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2..</param>
        /// <param name="threeDSRequestorName">Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2..</param>
        /// <param name="threeDSRequestorPriorAuthenticationInfo">threeDSRequestorPriorAuthenticationInfo.</param>
        /// <param name="threeDSRequestorURL">URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process..</param>
        /// <param name="transType">Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values: * **01** — Goods/Service Purchase * **03** — Check Acceptance * **10** — Account Funding * **11** — Quasi-Cash Transaction * **28** — Prepaid Activation and Load.</param>
        /// <param name="transactionType">Identify the type of the transaction being authenticated..</param>
        /// <param name="whiteListStatus">The &#x60;whiteListStatus&#x60; value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0..</param>
        /// <param name="workPhone">workPhone.</param>
        public ThreeDS2RequestData(AcctInfo acctInfo = default(AcctInfo), AcctTypeEnum? acctType = default(AcctTypeEnum?), string acquirerBIN = default(string), string acquirerMerchantID = default(string), AddrMatchEnum? addrMatch = default(AddrMatchEnum?), bool? authenticationOnly = false, ChallengeIndicatorEnum? challengeIndicator = default(ChallengeIndicatorEnum?), string deviceChannel = default(string), DeviceRenderOptions deviceRenderOptions = default(DeviceRenderOptions), Phone homePhone = default(Phone), string mcc = default(string), string merchantName = default(string), string messageVersion = default(string), Phone mobilePhone = default(Phone), string notificationURL = default(string), bool? payTokenInd = default(bool?), string paymentAuthenticationUseCase = default(string), string purchaseInstalData = default(string), string recurringExpiry = default(string), string recurringFrequency = default(string), string sdkAppID = default(string), string sdkEncData = default(string), SDKEphemPubKey sdkEphemPubKey = default(SDKEphemPubKey), int? sdkMaxTimeout = 60, string sdkReferenceNumber = default(string), string sdkTransID = default(string), string sdkVersion = default(string), string threeDSCompInd = default(string), string threeDSRequestorAuthenticationInd = default(string), ThreeDSRequestorAuthenticationInfo threeDSRequestorAuthenticationInfo = default(ThreeDSRequestorAuthenticationInfo), ThreeDSRequestorChallengeIndEnum? threeDSRequestorChallengeInd = default(ThreeDSRequestorChallengeIndEnum?), string threeDSRequestorID = default(string), string threeDSRequestorName = default(string), ThreeDSRequestorPriorAuthenticationInfo threeDSRequestorPriorAuthenticationInfo = default(ThreeDSRequestorPriorAuthenticationInfo), string threeDSRequestorURL = default(string), TransTypeEnum? transType = default(TransTypeEnum?), TransactionTypeEnum? transactionType = default(TransactionTypeEnum?), string whiteListStatus = default(string), Phone workPhone = default(Phone))
        {
            this.DeviceChannel = deviceChannel;
            this.AcctInfo = acctInfo;
            this.AcctType = acctType;
            this.AcquirerBIN = acquirerBIN;
            this.AcquirerMerchantID = acquirerMerchantID;
            this.AddrMatch = addrMatch;
            this.AuthenticationOnly = authenticationOnly;
            this.ChallengeIndicator = challengeIndicator;
            this.DeviceRenderOptions = deviceRenderOptions;
            this.HomePhone = homePhone;
            this.Mcc = mcc;
            this.MerchantName = merchantName;
            this.MessageVersion = messageVersion;
            this.MobilePhone = mobilePhone;
            this.NotificationURL = notificationURL;
            this.PayTokenInd = payTokenInd;
            this.PaymentAuthenticationUseCase = paymentAuthenticationUseCase;
            this.PurchaseInstalData = purchaseInstalData;
            this.RecurringExpiry = recurringExpiry;
            this.RecurringFrequency = recurringFrequency;
            this.SdkAppID = sdkAppID;
            this.SdkEncData = sdkEncData;
            this.SdkEphemPubKey = sdkEphemPubKey;
            this.SdkMaxTimeout = sdkMaxTimeout;
            this.SdkReferenceNumber = sdkReferenceNumber;
            this.SdkTransID = sdkTransID;
            this.SdkVersion = sdkVersion;
            this.ThreeDSCompInd = threeDSCompInd;
            this.ThreeDSRequestorAuthenticationInd = threeDSRequestorAuthenticationInd;
            this.ThreeDSRequestorAuthenticationInfo = threeDSRequestorAuthenticationInfo;
            this.ThreeDSRequestorChallengeInd = threeDSRequestorChallengeInd;
            this.ThreeDSRequestorID = threeDSRequestorID;
            this.ThreeDSRequestorName = threeDSRequestorName;
            this.ThreeDSRequestorPriorAuthenticationInfo = threeDSRequestorPriorAuthenticationInfo;
            this.ThreeDSRequestorURL = threeDSRequestorURL;
            this.TransType = transType;
            this.TransactionType = transactionType;
            this.WhiteListStatus = whiteListStatus;
            this.WorkPhone = workPhone;
        }

        /// <summary>
        /// Gets or Sets AcctInfo
        /// </summary>
        [DataMember(Name = "acctInfo", EmitDefaultValue = false)]
        public AcctInfo AcctInfo { get; set; }

        /// <summary>
        /// Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
        /// </summary>
        /// <value>Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.</value>
        [DataMember(Name = "acquirerBIN", EmitDefaultValue = false)]
        public string AcquirerBIN { get; set; }

        /// <summary>
        /// Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant&#39;s acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
        /// </summary>
        /// <value>Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant&#39;s acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.</value>
        [DataMember(Name = "acquirerMerchantID", EmitDefaultValue = false)]
        public string AcquirerMerchantID { get; set; }

        /// <summary>
        /// If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
        /// </summary>
        /// <value>If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.</value>
        [DataMember(Name = "authenticationOnly", EmitDefaultValue = false)]
        [Obsolete]
        public bool? AuthenticationOnly { get; set; }

        /// <summary>
        /// The environment of the shopper. Allowed values: * &#x60;app&#x60; * &#x60;browser&#x60;
        /// </summary>
        /// <value>The environment of the shopper. Allowed values: * &#x60;app&#x60; * &#x60;browser&#x60;</value>
        [DataMember(Name = "deviceChannel", IsRequired = false, EmitDefaultValue = false)]
        public string DeviceChannel { get; set; }

        /// <summary>
        /// Gets or Sets DeviceRenderOptions
        /// </summary>
        [DataMember(Name = "deviceRenderOptions", EmitDefaultValue = false)]
        public DeviceRenderOptions DeviceRenderOptions { get; set; }

        /// <summary>
        /// Gets or Sets HomePhone
        /// </summary>
        [DataMember(Name = "homePhone", EmitDefaultValue = false)]
        public Phone HomePhone { get; set; }

        /// <summary>
        /// Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The &#x60;mcc&#x60; is a four-digit code with which the previously given &#x60;acquirerMerchantID&#x60; is registered at the scheme.
        /// </summary>
        /// <value>Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The &#x60;mcc&#x60; is a four-digit code with which the previously given &#x60;acquirerMerchantID&#x60; is registered at the scheme.</value>
        [DataMember(Name = "mcc", EmitDefaultValue = false)]
        public string Mcc { get; set; }

        /// <summary>
        /// Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters. &gt; Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.
        /// </summary>
        /// <value>Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters. &gt; Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.</value>
        [DataMember(Name = "merchantName", EmitDefaultValue = false)]
        public string MerchantName { get; set; }

        /// <summary>
        /// The &#x60;messageVersion&#x60; value indicating the 3D Secure 2 protocol version.
        /// </summary>
        /// <value>The &#x60;messageVersion&#x60; value indicating the 3D Secure 2 protocol version.</value>
        [DataMember(Name = "messageVersion", EmitDefaultValue = false)]
        public string MessageVersion { get; set; }

        /// <summary>
        /// Gets or Sets MobilePhone
        /// </summary>
        [DataMember(Name = "mobilePhone", EmitDefaultValue = false)]
        public Phone MobilePhone { get; set; }

        /// <summary>
        /// URL to where the issuer should send the &#x60;CRes&#x60;. Required if you are not using components for &#x60;channel&#x60; **Web** or if you are using classic integration &#x60;deviceChannel&#x60; **browser**.
        /// </summary>
        /// <value>URL to where the issuer should send the &#x60;CRes&#x60;. Required if you are not using components for &#x60;channel&#x60; **Web** or if you are using classic integration &#x60;deviceChannel&#x60; **browser**.</value>
        [DataMember(Name = "notificationURL", EmitDefaultValue = false)]
        public string NotificationURL { get; set; }

        /// <summary>
        /// Value **true** indicates that the transaction was de-tokenised prior to being received by the ACS.
        /// </summary>
        /// <value>Value **true** indicates that the transaction was de-tokenised prior to being received by the ACS.</value>
        [DataMember(Name = "payTokenInd", EmitDefaultValue = false)]
        public bool? PayTokenInd { get; set; }

        /// <summary>
        /// Indicates the type of payment for which an authentication is requested (message extension)
        /// </summary>
        /// <value>Indicates the type of payment for which an authentication is requested (message extension)</value>
        [DataMember(Name = "paymentAuthenticationUseCase", EmitDefaultValue = false)]
        public string PaymentAuthenticationUseCase { get; set; }

        /// <summary>
        /// Indicates the maximum number of authorisations permitted for instalment payments. Length: 1–3 characters.
        /// </summary>
        /// <value>Indicates the maximum number of authorisations permitted for instalment payments. Length: 1–3 characters.</value>
        [DataMember(Name = "purchaseInstalData", EmitDefaultValue = false)]
        public string PurchaseInstalData { get; set; }

        /// <summary>
        /// Date after which no further authorisations shall be performed. Format: YYYYMMDD
        /// </summary>
        /// <value>Date after which no further authorisations shall be performed. Format: YYYYMMDD</value>
        [DataMember(Name = "recurringExpiry", EmitDefaultValue = false)]
        public string RecurringExpiry { get; set; }

        /// <summary>
        /// Indicates the minimum number of days between authorisations. Maximum length: 4 characters.
        /// </summary>
        /// <value>Indicates the minimum number of days between authorisations. Maximum length: 4 characters.</value>
        [DataMember(Name = "recurringFrequency", EmitDefaultValue = false)]
        public string RecurringFrequency { get; set; }

        /// <summary>
        /// The &#x60;sdkAppID&#x60; value as received from the 3D Secure 2 SDK. Required for &#x60;deviceChannel&#x60; set to **app**.
        /// </summary>
        /// <value>The &#x60;sdkAppID&#x60; value as received from the 3D Secure 2 SDK. Required for &#x60;deviceChannel&#x60; set to **app**.</value>
        [DataMember(Name = "sdkAppID", EmitDefaultValue = false)]
        public string SdkAppID { get; set; }

        /// <summary>
        /// The &#x60;sdkEncData&#x60; value as received from the 3D Secure 2 SDK. Required for &#x60;deviceChannel&#x60; set to **app**.
        /// </summary>
        /// <value>The &#x60;sdkEncData&#x60; value as received from the 3D Secure 2 SDK. Required for &#x60;deviceChannel&#x60; set to **app**.</value>
        [DataMember(Name = "sdkEncData", EmitDefaultValue = false)]
        public string SdkEncData { get; set; }

        /// <summary>
        /// Gets or Sets SdkEphemPubKey
        /// </summary>
        [DataMember(Name = "sdkEphemPubKey", EmitDefaultValue = false)]
        public SDKEphemPubKey SdkEphemPubKey { get; set; }

        /// <summary>
        /// The maximum amount of time in minutes for the 3D Secure 2 authentication process. Optional and only for &#x60;deviceChannel&#x60; set to **app**. Defaults to **60** minutes.
        /// </summary>
        /// <value>The maximum amount of time in minutes for the 3D Secure 2 authentication process. Optional and only for &#x60;deviceChannel&#x60; set to **app**. Defaults to **60** minutes.</value>
        [DataMember(Name = "sdkMaxTimeout", EmitDefaultValue = false)]
        public int? SdkMaxTimeout { get; set; }

        /// <summary>
        /// The &#x60;sdkReferenceNumber&#x60; value as received from the 3D Secure 2 SDK. Only for &#x60;deviceChannel&#x60; set to **app**.
        /// </summary>
        /// <value>The &#x60;sdkReferenceNumber&#x60; value as received from the 3D Secure 2 SDK. Only for &#x60;deviceChannel&#x60; set to **app**.</value>
        [DataMember(Name = "sdkReferenceNumber", EmitDefaultValue = false)]
        public string SdkReferenceNumber { get; set; }

        /// <summary>
        /// The &#x60;sdkTransID&#x60; value as received from the 3D Secure 2 SDK. Only for &#x60;deviceChannel&#x60; set to **app**.
        /// </summary>
        /// <value>The &#x60;sdkTransID&#x60; value as received from the 3D Secure 2 SDK. Only for &#x60;deviceChannel&#x60; set to **app**.</value>
        [DataMember(Name = "sdkTransID", EmitDefaultValue = false)]
        public string SdkTransID { get; set; }

        /// <summary>
        /// Version of the 3D Secure 2 mobile SDK.  Only for &#x60;deviceChannel&#x60; set to **app**.
        /// </summary>
        /// <value>Version of the 3D Secure 2 mobile SDK.  Only for &#x60;deviceChannel&#x60; set to **app**.</value>
        [DataMember(Name = "sdkVersion", EmitDefaultValue = false)]
        public string SdkVersion { get; set; }

        /// <summary>
        /// Completion indicator for the device fingerprinting.
        /// </summary>
        /// <value>Completion indicator for the device fingerprinting.</value>
        [DataMember(Name = "threeDSCompInd", EmitDefaultValue = false)]
        public string ThreeDSCompInd { get; set; }

        /// <summary>
        /// Indicates the type of Authentication request.
        /// </summary>
        /// <value>Indicates the type of Authentication request.</value>
        [DataMember(Name = "threeDSRequestorAuthenticationInd", EmitDefaultValue = false)]
        public string ThreeDSRequestorAuthenticationInd { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSRequestorAuthenticationInfo
        /// </summary>
        [DataMember(Name = "threeDSRequestorAuthenticationInfo", EmitDefaultValue = false)]
        public ThreeDSRequestorAuthenticationInfo ThreeDSRequestorAuthenticationInfo { get; set; }

        /// <summary>
        /// Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.
        /// </summary>
        /// <value>Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.</value>
        [DataMember(Name = "threeDSRequestorID", EmitDefaultValue = false)]
        public string ThreeDSRequestorID { get; set; }

        /// <summary>
        /// Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.
        /// </summary>
        /// <value>Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.</value>
        [DataMember(Name = "threeDSRequestorName", EmitDefaultValue = false)]
        public string ThreeDSRequestorName { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSRequestorPriorAuthenticationInfo
        /// </summary>
        [DataMember(Name = "threeDSRequestorPriorAuthenticationInfo", EmitDefaultValue = false)]
        public ThreeDSRequestorPriorAuthenticationInfo ThreeDSRequestorPriorAuthenticationInfo { get; set; }

        /// <summary>
        /// URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.
        /// </summary>
        /// <value>URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.</value>
        [DataMember(Name = "threeDSRequestorURL", EmitDefaultValue = false)]
        public string ThreeDSRequestorURL { get; set; }

        /// <summary>
        /// The &#x60;whiteListStatus&#x60; value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.
        /// </summary>
        /// <value>The &#x60;whiteListStatus&#x60; value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.</value>
        [DataMember(Name = "whiteListStatus", EmitDefaultValue = false)]
        public string WhiteListStatus { get; set; }

        /// <summary>
        /// Gets or Sets WorkPhone
        /// </summary>
        [DataMember(Name = "workPhone", EmitDefaultValue = false)]
        public Phone WorkPhone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDS2RequestData {\n");
            sb.Append("  AcctInfo: ").Append(AcctInfo).Append("\n");
            sb.Append("  AcctType: ").Append(AcctType).Append("\n");
            sb.Append("  AcquirerBIN: ").Append(AcquirerBIN).Append("\n");
            sb.Append("  AcquirerMerchantID: ").Append(AcquirerMerchantID).Append("\n");
            sb.Append("  AddrMatch: ").Append(AddrMatch).Append("\n");
            sb.Append("  AuthenticationOnly: ").Append(AuthenticationOnly).Append("\n");
            sb.Append("  ChallengeIndicator: ").Append(ChallengeIndicator).Append("\n");
            sb.Append("  DeviceChannel: ").Append(DeviceChannel).Append("\n");
            sb.Append("  DeviceRenderOptions: ").Append(DeviceRenderOptions).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("  MessageVersion: ").Append(MessageVersion).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  NotificationURL: ").Append(NotificationURL).Append("\n");
            sb.Append("  PayTokenInd: ").Append(PayTokenInd).Append("\n");
            sb.Append("  PaymentAuthenticationUseCase: ").Append(PaymentAuthenticationUseCase).Append("\n");
            sb.Append("  PurchaseInstalData: ").Append(PurchaseInstalData).Append("\n");
            sb.Append("  RecurringExpiry: ").Append(RecurringExpiry).Append("\n");
            sb.Append("  RecurringFrequency: ").Append(RecurringFrequency).Append("\n");
            sb.Append("  SdkAppID: ").Append(SdkAppID).Append("\n");
            sb.Append("  SdkEncData: ").Append(SdkEncData).Append("\n");
            sb.Append("  SdkEphemPubKey: ").Append(SdkEphemPubKey).Append("\n");
            sb.Append("  SdkMaxTimeout: ").Append(SdkMaxTimeout).Append("\n");
            sb.Append("  SdkReferenceNumber: ").Append(SdkReferenceNumber).Append("\n");
            sb.Append("  SdkTransID: ").Append(SdkTransID).Append("\n");
            sb.Append("  SdkVersion: ").Append(SdkVersion).Append("\n");
            sb.Append("  ThreeDSCompInd: ").Append(ThreeDSCompInd).Append("\n");
            sb.Append("  ThreeDSRequestorAuthenticationInd: ").Append(ThreeDSRequestorAuthenticationInd).Append("\n");
            sb.Append("  ThreeDSRequestorAuthenticationInfo: ").Append(ThreeDSRequestorAuthenticationInfo).Append("\n");
            sb.Append("  ThreeDSRequestorChallengeInd: ").Append(ThreeDSRequestorChallengeInd).Append("\n");
            sb.Append("  ThreeDSRequestorID: ").Append(ThreeDSRequestorID).Append("\n");
            sb.Append("  ThreeDSRequestorName: ").Append(ThreeDSRequestorName).Append("\n");
            sb.Append("  ThreeDSRequestorPriorAuthenticationInfo: ").Append(ThreeDSRequestorPriorAuthenticationInfo).Append("\n");
            sb.Append("  ThreeDSRequestorURL: ").Append(ThreeDSRequestorURL).Append("\n");
            sb.Append("  TransType: ").Append(TransType).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  WhiteListStatus: ").Append(WhiteListStatus).Append("\n");
            sb.Append("  WorkPhone: ").Append(WorkPhone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreeDS2RequestData);
        }

        /// <summary>
        /// Returns true if ThreeDS2RequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreeDS2RequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreeDS2RequestData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AcctInfo == input.AcctInfo ||
                    (this.AcctInfo != null &&
                    this.AcctInfo.Equals(input.AcctInfo))
                ) && 
                (
                    this.AcctType == input.AcctType ||
                    this.AcctType.Equals(input.AcctType)
                ) && 
                (
                    this.AcquirerBIN == input.AcquirerBIN ||
                    (this.AcquirerBIN != null &&
                    this.AcquirerBIN.Equals(input.AcquirerBIN))
                ) && 
                (
                    this.AcquirerMerchantID == input.AcquirerMerchantID ||
                    (this.AcquirerMerchantID != null &&
                    this.AcquirerMerchantID.Equals(input.AcquirerMerchantID))
                ) && 
                (
                    this.AddrMatch == input.AddrMatch ||
                    this.AddrMatch.Equals(input.AddrMatch)
                ) && 
                (
                    this.AuthenticationOnly == input.AuthenticationOnly ||
                    this.AuthenticationOnly.Equals(input.AuthenticationOnly)
                ) && 
                (
                    this.ChallengeIndicator == input.ChallengeIndicator ||
                    this.ChallengeIndicator.Equals(input.ChallengeIndicator)
                ) && 
                (
                    this.DeviceChannel == input.DeviceChannel ||
                    (this.DeviceChannel != null &&
                    this.DeviceChannel.Equals(input.DeviceChannel))
                ) && 
                (
                    this.DeviceRenderOptions == input.DeviceRenderOptions ||
                    (this.DeviceRenderOptions != null &&
                    this.DeviceRenderOptions.Equals(input.DeviceRenderOptions))
                ) && 
                (
                    this.HomePhone == input.HomePhone ||
                    (this.HomePhone != null &&
                    this.HomePhone.Equals(input.HomePhone))
                ) && 
                (
                    this.Mcc == input.Mcc ||
                    (this.Mcc != null &&
                    this.Mcc.Equals(input.Mcc))
                ) && 
                (
                    this.MerchantName == input.MerchantName ||
                    (this.MerchantName != null &&
                    this.MerchantName.Equals(input.MerchantName))
                ) && 
                (
                    this.MessageVersion == input.MessageVersion ||
                    (this.MessageVersion != null &&
                    this.MessageVersion.Equals(input.MessageVersion))
                ) && 
                (
                    this.MobilePhone == input.MobilePhone ||
                    (this.MobilePhone != null &&
                    this.MobilePhone.Equals(input.MobilePhone))
                ) && 
                (
                    this.NotificationURL == input.NotificationURL ||
                    (this.NotificationURL != null &&
                    this.NotificationURL.Equals(input.NotificationURL))
                ) && 
                (
                    this.PayTokenInd == input.PayTokenInd ||
                    this.PayTokenInd.Equals(input.PayTokenInd)
                ) && 
                (
                    this.PaymentAuthenticationUseCase == input.PaymentAuthenticationUseCase ||
                    (this.PaymentAuthenticationUseCase != null &&
                    this.PaymentAuthenticationUseCase.Equals(input.PaymentAuthenticationUseCase))
                ) && 
                (
                    this.PurchaseInstalData == input.PurchaseInstalData ||
                    (this.PurchaseInstalData != null &&
                    this.PurchaseInstalData.Equals(input.PurchaseInstalData))
                ) && 
                (
                    this.RecurringExpiry == input.RecurringExpiry ||
                    (this.RecurringExpiry != null &&
                    this.RecurringExpiry.Equals(input.RecurringExpiry))
                ) && 
                (
                    this.RecurringFrequency == input.RecurringFrequency ||
                    (this.RecurringFrequency != null &&
                    this.RecurringFrequency.Equals(input.RecurringFrequency))
                ) && 
                (
                    this.SdkAppID == input.SdkAppID ||
                    (this.SdkAppID != null &&
                    this.SdkAppID.Equals(input.SdkAppID))
                ) && 
                (
                    this.SdkEncData == input.SdkEncData ||
                    (this.SdkEncData != null &&
                    this.SdkEncData.Equals(input.SdkEncData))
                ) && 
                (
                    this.SdkEphemPubKey == input.SdkEphemPubKey ||
                    (this.SdkEphemPubKey != null &&
                    this.SdkEphemPubKey.Equals(input.SdkEphemPubKey))
                ) && 
                (
                    this.SdkMaxTimeout == input.SdkMaxTimeout ||
                    this.SdkMaxTimeout.Equals(input.SdkMaxTimeout)
                ) && 
                (
                    this.SdkReferenceNumber == input.SdkReferenceNumber ||
                    (this.SdkReferenceNumber != null &&
                    this.SdkReferenceNumber.Equals(input.SdkReferenceNumber))
                ) && 
                (
                    this.SdkTransID == input.SdkTransID ||
                    (this.SdkTransID != null &&
                    this.SdkTransID.Equals(input.SdkTransID))
                ) && 
                (
                    this.SdkVersion == input.SdkVersion ||
                    (this.SdkVersion != null &&
                    this.SdkVersion.Equals(input.SdkVersion))
                ) && 
                (
                    this.ThreeDSCompInd == input.ThreeDSCompInd ||
                    (this.ThreeDSCompInd != null &&
                    this.ThreeDSCompInd.Equals(input.ThreeDSCompInd))
                ) && 
                (
                    this.ThreeDSRequestorAuthenticationInd == input.ThreeDSRequestorAuthenticationInd ||
                    (this.ThreeDSRequestorAuthenticationInd != null &&
                    this.ThreeDSRequestorAuthenticationInd.Equals(input.ThreeDSRequestorAuthenticationInd))
                ) && 
                (
                    this.ThreeDSRequestorAuthenticationInfo == input.ThreeDSRequestorAuthenticationInfo ||
                    (this.ThreeDSRequestorAuthenticationInfo != null &&
                    this.ThreeDSRequestorAuthenticationInfo.Equals(input.ThreeDSRequestorAuthenticationInfo))
                ) && 
                (
                    this.ThreeDSRequestorChallengeInd == input.ThreeDSRequestorChallengeInd ||
                    this.ThreeDSRequestorChallengeInd.Equals(input.ThreeDSRequestorChallengeInd)
                ) && 
                (
                    this.ThreeDSRequestorID == input.ThreeDSRequestorID ||
                    (this.ThreeDSRequestorID != null &&
                    this.ThreeDSRequestorID.Equals(input.ThreeDSRequestorID))
                ) && 
                (
                    this.ThreeDSRequestorName == input.ThreeDSRequestorName ||
                    (this.ThreeDSRequestorName != null &&
                    this.ThreeDSRequestorName.Equals(input.ThreeDSRequestorName))
                ) && 
                (
                    this.ThreeDSRequestorPriorAuthenticationInfo == input.ThreeDSRequestorPriorAuthenticationInfo ||
                    (this.ThreeDSRequestorPriorAuthenticationInfo != null &&
                    this.ThreeDSRequestorPriorAuthenticationInfo.Equals(input.ThreeDSRequestorPriorAuthenticationInfo))
                ) && 
                (
                    this.ThreeDSRequestorURL == input.ThreeDSRequestorURL ||
                    (this.ThreeDSRequestorURL != null &&
                    this.ThreeDSRequestorURL.Equals(input.ThreeDSRequestorURL))
                ) && 
                (
                    this.TransType == input.TransType ||
                    this.TransType.Equals(input.TransType)
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    this.TransactionType.Equals(input.TransactionType)
                ) && 
                (
                    this.WhiteListStatus == input.WhiteListStatus ||
                    (this.WhiteListStatus != null &&
                    this.WhiteListStatus.Equals(input.WhiteListStatus))
                ) && 
                (
                    this.WorkPhone == input.WorkPhone ||
                    (this.WorkPhone != null &&
                    this.WorkPhone.Equals(input.WorkPhone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcctInfo != null)
                {
                    hashCode = (hashCode * 59) + this.AcctInfo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AcctType.GetHashCode();
                if (this.AcquirerBIN != null)
                {
                    hashCode = (hashCode * 59) + this.AcquirerBIN.GetHashCode();
                }
                if (this.AcquirerMerchantID != null)
                {
                    hashCode = (hashCode * 59) + this.AcquirerMerchantID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddrMatch.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthenticationOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.ChallengeIndicator.GetHashCode();
                if (this.DeviceChannel != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceChannel.GetHashCode();
                }
                if (this.DeviceRenderOptions != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceRenderOptions.GetHashCode();
                }
                if (this.HomePhone != null)
                {
                    hashCode = (hashCode * 59) + this.HomePhone.GetHashCode();
                }
                if (this.Mcc != null)
                {
                    hashCode = (hashCode * 59) + this.Mcc.GetHashCode();
                }
                if (this.MerchantName != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantName.GetHashCode();
                }
                if (this.MessageVersion != null)
                {
                    hashCode = (hashCode * 59) + this.MessageVersion.GetHashCode();
                }
                if (this.MobilePhone != null)
                {
                    hashCode = (hashCode * 59) + this.MobilePhone.GetHashCode();
                }
                if (this.NotificationURL != null)
                {
                    hashCode = (hashCode * 59) + this.NotificationURL.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PayTokenInd.GetHashCode();
                if (this.PaymentAuthenticationUseCase != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAuthenticationUseCase.GetHashCode();
                }
                if (this.PurchaseInstalData != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseInstalData.GetHashCode();
                }
                if (this.RecurringExpiry != null)
                {
                    hashCode = (hashCode * 59) + this.RecurringExpiry.GetHashCode();
                }
                if (this.RecurringFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.RecurringFrequency.GetHashCode();
                }
                if (this.SdkAppID != null)
                {
                    hashCode = (hashCode * 59) + this.SdkAppID.GetHashCode();
                }
                if (this.SdkEncData != null)
                {
                    hashCode = (hashCode * 59) + this.SdkEncData.GetHashCode();
                }
                if (this.SdkEphemPubKey != null)
                {
                    hashCode = (hashCode * 59) + this.SdkEphemPubKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SdkMaxTimeout.GetHashCode();
                if (this.SdkReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SdkReferenceNumber.GetHashCode();
                }
                if (this.SdkTransID != null)
                {
                    hashCode = (hashCode * 59) + this.SdkTransID.GetHashCode();
                }
                if (this.SdkVersion != null)
                {
                    hashCode = (hashCode * 59) + this.SdkVersion.GetHashCode();
                }
                if (this.ThreeDSCompInd != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSCompInd.GetHashCode();
                }
                if (this.ThreeDSRequestorAuthenticationInd != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSRequestorAuthenticationInd.GetHashCode();
                }
                if (this.ThreeDSRequestorAuthenticationInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSRequestorAuthenticationInfo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ThreeDSRequestorChallengeInd.GetHashCode();
                if (this.ThreeDSRequestorID != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSRequestorID.GetHashCode();
                }
                if (this.ThreeDSRequestorName != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSRequestorName.GetHashCode();
                }
                if (this.ThreeDSRequestorPriorAuthenticationInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSRequestorPriorAuthenticationInfo.GetHashCode();
                }
                if (this.ThreeDSRequestorURL != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSRequestorURL.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransType.GetHashCode();
                hashCode = (hashCode * 59) + this.TransactionType.GetHashCode();
                if (this.WhiteListStatus != null)
                {
                    hashCode = (hashCode * 59) + this.WhiteListStatus.GetHashCode();
                }
                if (this.WorkPhone != null)
                {
                    hashCode = (hashCode * 59) + this.WorkPhone.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PurchaseInstalData (string) maxLength
            if (this.PurchaseInstalData != null && this.PurchaseInstalData.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseInstalData, length must be less than 3.", new [] { "PurchaseInstalData" });
            }

            // PurchaseInstalData (string) minLength
            if (this.PurchaseInstalData != null && this.PurchaseInstalData.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseInstalData, length must be greater than 1.", new [] { "PurchaseInstalData" });
            }

            // RecurringFrequency (string) maxLength
            if (this.RecurringFrequency != null && this.RecurringFrequency.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RecurringFrequency, length must be less than 4.", new [] { "RecurringFrequency" });
            }

            yield break;
        }
    }

}
