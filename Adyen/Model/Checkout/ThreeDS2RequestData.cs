// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ThreeDS2RequestData
    /// </summary>
    public partial class ThreeDS2RequestData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDS2RequestData" /> class.
        /// </summary>
        /// <param name="deviceChannel">The environment of the shopper. Allowed values: * &#x60;app&#x60; * &#x60;browser&#x60;</param>
        /// <param name="acctInfo">acctInfo</param>
        /// <param name="acctType">Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values: * **01** — Not applicable * **02** — Credit * **03** — Debit</param>
        /// <param name="acquirerBIN">Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.</param>
        /// <param name="acquirerMerchantID">Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant&#39;s acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.</param>
        /// <param name="addrMatch">Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values: * **Y** — Shipping Address matches Billing Address. * **N** — Shipping Address does not match Billing Address.</param>
        /// <param name="authenticationOnly">If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. (default to false)</param>
        /// <param name="challengeIndicator">Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * &#x60;noPreference&#x60; * &#x60;requestNoChallenge&#x60; * &#x60;requestChallenge&#x60; * &#x60;requestChallengeAsMandate&#x60; </param>
        /// <param name="deviceRenderOptions">deviceRenderOptions</param>
        /// <param name="homePhone">homePhone</param>
        /// <param name="mcc">Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The &#x60;mcc&#x60; is a four-digit code with which the previously given &#x60;acquirerMerchantID&#x60; is registered at the scheme.</param>
        /// <param name="merchantName">Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters. &gt; Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.</param>
        /// <param name="messageVersion">The &#x60;messageVersion&#x60; value indicating the 3D Secure 2 protocol version.</param>
        /// <param name="mobilePhone">mobilePhone</param>
        /// <param name="notificationURL">URL to where the issuer should send the &#x60;CRes&#x60;. Required if you are not using components for &#x60;channel&#x60; **Web** or if you are using classic integration &#x60;deviceChannel&#x60; **browser**.</param>
        /// <param name="payTokenInd">Value **true** indicates that the transaction was de-tokenised prior to being received by the ACS.</param>
        /// <param name="paymentAuthenticationUseCase">Indicates the type of payment for which an authentication is requested (message extension)</param>
        /// <param name="purchaseInstalData">Indicates the maximum number of authorisations permitted for instalment payments. Length: 1–3 characters.</param>
        /// <param name="recurringExpiry">Date after which no further authorisations shall be performed. Format: YYYYMMDD</param>
        /// <param name="recurringFrequency">Indicates the minimum number of days between authorisations. Maximum length: 4 characters.</param>
        /// <param name="sdkAppID">The &#x60;sdkAppID&#x60; value as received from the 3D Secure 2 SDK. Required for &#x60;deviceChannel&#x60; set to **app**.</param>
        /// <param name="sdkEncData">The &#x60;sdkEncData&#x60; value as received from the 3D Secure 2 SDK. Required for &#x60;deviceChannel&#x60; set to **app**.</param>
        /// <param name="sdkEphemPubKey">sdkEphemPubKey</param>
        /// <param name="sdkMaxTimeout">The maximum amount of time in minutes for the 3D Secure 2 authentication process. Optional and only for &#x60;deviceChannel&#x60; set to **app**. Defaults to **60** minutes. (default to 60)</param>
        /// <param name="sdkReferenceNumber">The &#x60;sdkReferenceNumber&#x60; value as received from the 3D Secure 2 SDK. Only for &#x60;deviceChannel&#x60; set to **app**.</param>
        /// <param name="sdkTransID">The &#x60;sdkTransID&#x60; value as received from the 3D Secure 2 SDK. Only for &#x60;deviceChannel&#x60; set to **app**.</param>
        /// <param name="sdkVersion">Version of the 3D Secure 2 mobile SDK.  Only for &#x60;deviceChannel&#x60; set to **app**.</param>
        /// <param name="threeDSCompInd">Completion indicator for the device fingerprinting.</param>
        /// <param name="threeDSRequestorAuthenticationInd">Indicates the type of Authentication request.</param>
        /// <param name="threeDSRequestorAuthenticationInfo">threeDSRequestorAuthenticationInfo</param>
        /// <param name="threeDSRequestorChallengeInd">Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only</param>
        /// <param name="threeDSRequestorID">Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.</param>
        /// <param name="threeDSRequestorName">Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.</param>
        /// <param name="threeDSRequestorPriorAuthenticationInfo">threeDSRequestorPriorAuthenticationInfo</param>
        /// <param name="threeDSRequestorURL">URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.</param>
        /// <param name="transType">Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values: * **01** — Goods/Service Purchase * **03** — Check Acceptance * **10** — Account Funding * **11** — Quasi-Cash Transaction * **28** — Prepaid Activation and Load</param>
        /// <param name="transactionType">Identify the type of the transaction being authenticated.</param>
        /// <param name="whiteListStatus">The &#x60;whiteListStatus&#x60; value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.</param>
        /// <param name="workPhone">workPhone</param>
        [JsonConstructor]
        public ThreeDS2RequestData(string deviceChannel, Option<AcctInfo> acctInfo = default, Option<AcctTypeEnum?> acctType = default, Option<string> acquirerBIN = default, Option<string> acquirerMerchantID = default, Option<AddrMatchEnum?> addrMatch = default, Option<bool?> authenticationOnly = default, Option<ChallengeIndicatorEnum?> challengeIndicator = default, Option<DeviceRenderOptions> deviceRenderOptions = default, Option<Phone> homePhone = default, Option<string> mcc = default, Option<string> merchantName = default, Option<string> messageVersion = default, Option<Phone> mobilePhone = default, Option<string> notificationURL = default, Option<bool?> payTokenInd = default, Option<string> paymentAuthenticationUseCase = default, Option<string> purchaseInstalData = default, Option<string> recurringExpiry = default, Option<string> recurringFrequency = default, Option<string> sdkAppID = default, Option<string> sdkEncData = default, Option<SDKEphemPubKey> sdkEphemPubKey = default, Option<int?> sdkMaxTimeout = default, Option<string> sdkReferenceNumber = default, Option<string> sdkTransID = default, Option<string> sdkVersion = default, Option<string> threeDSCompInd = default, Option<string> threeDSRequestorAuthenticationInd = default, Option<ThreeDSRequestorAuthenticationInfo> threeDSRequestorAuthenticationInfo = default, Option<ThreeDSRequestorChallengeIndEnum?> threeDSRequestorChallengeInd = default, Option<string> threeDSRequestorID = default, Option<string> threeDSRequestorName = default, Option<ThreeDSRequestorPriorAuthenticationInfo> threeDSRequestorPriorAuthenticationInfo = default, Option<string> threeDSRequestorURL = default, Option<TransTypeEnum?> transType = default, Option<TransactionTypeEnum?> transactionType = default, Option<string> whiteListStatus = default, Option<Phone> workPhone = default)
        {
            DeviceChannel = deviceChannel;
            AcctInfoOption = acctInfo;
            AcctTypeOption = acctType;
            AcquirerBINOption = acquirerBIN;
            AcquirerMerchantIDOption = acquirerMerchantID;
            AddrMatchOption = addrMatch;
            AuthenticationOnlyOption = authenticationOnly;
            ChallengeIndicatorOption = challengeIndicator;
            DeviceRenderOptionsOption = deviceRenderOptions;
            HomePhoneOption = homePhone;
            MccOption = mcc;
            MerchantNameOption = merchantName;
            MessageVersionOption = messageVersion;
            MobilePhoneOption = mobilePhone;
            NotificationURLOption = notificationURL;
            PayTokenIndOption = payTokenInd;
            PaymentAuthenticationUseCaseOption = paymentAuthenticationUseCase;
            PurchaseInstalDataOption = purchaseInstalData;
            RecurringExpiryOption = recurringExpiry;
            RecurringFrequencyOption = recurringFrequency;
            SdkAppIDOption = sdkAppID;
            SdkEncDataOption = sdkEncData;
            SdkEphemPubKeyOption = sdkEphemPubKey;
            SdkMaxTimeoutOption = sdkMaxTimeout;
            SdkReferenceNumberOption = sdkReferenceNumber;
            SdkTransIDOption = sdkTransID;
            SdkVersionOption = sdkVersion;
            ThreeDSCompIndOption = threeDSCompInd;
            ThreeDSRequestorAuthenticationIndOption = threeDSRequestorAuthenticationInd;
            ThreeDSRequestorAuthenticationInfoOption = threeDSRequestorAuthenticationInfo;
            ThreeDSRequestorChallengeIndOption = threeDSRequestorChallengeInd;
            ThreeDSRequestorIDOption = threeDSRequestorID;
            ThreeDSRequestorNameOption = threeDSRequestorName;
            ThreeDSRequestorPriorAuthenticationInfoOption = threeDSRequestorPriorAuthenticationInfo;
            ThreeDSRequestorURLOption = threeDSRequestorURL;
            TransTypeOption = transType;
            TransactionTypeOption = transactionType;
            WhiteListStatusOption = whiteListStatus;
            WorkPhoneOption = workPhone;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values: * **01** — Not applicable * **02** — Credit * **03** — Debit
        /// </summary>
        /// <value>Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values: * **01** — Not applicable * **02** — Credit * **03** — Debit</value>
        public enum AcctTypeEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3
        }

        /// <summary>
        /// Returns a <see cref="AcctTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AcctTypeEnum AcctTypeEnumFromString(string value)
        {
            if (value.Equals("01"))
                return AcctTypeEnum._01;

            if (value.Equals("02"))
                return AcctTypeEnum._02;

            if (value.Equals("03"))
                return AcctTypeEnum._03;

            throw new NotImplementedException($"Could not convert value to type AcctTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AcctTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AcctTypeEnum? AcctTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return AcctTypeEnum._01;

            if (value.Equals("02"))
                return AcctTypeEnum._02;

            if (value.Equals("03"))
                return AcctTypeEnum._03;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AcctTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AcctTypeEnumToJsonValue(AcctTypeEnum? value)
        {
            if (value == AcctTypeEnum._01)
                return "01";

            if (value == AcctTypeEnum._02)
                return "02";

            if (value == AcctTypeEnum._03)
                return "03";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AcctType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AcctTypeEnum?> AcctTypeOption { get; private set; }

        /// <summary>
        /// Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values: * **01** — Not applicable * **02** — Credit * **03** — Debit
        /// </summary>
        /// <value>Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values: * **01** — Not applicable * **02** — Credit * **03** — Debit</value>
        [JsonPropertyName("acctType")]
        public AcctTypeEnum? AcctType { get { return this.AcctTypeOption; } set { this.AcctTypeOption = new Option<AcctTypeEnum?>(value); } }

        /// <summary>
        /// Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values: * **Y** — Shipping Address matches Billing Address. * **N** — Shipping Address does not match Billing Address.
        /// </summary>
        /// <value>Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values: * **Y** — Shipping Address matches Billing Address. * **N** — Shipping Address does not match Billing Address.</value>
        public enum AddrMatchEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            N = 2
        }

        /// <summary>
        /// Returns a <see cref="AddrMatchEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AddrMatchEnum AddrMatchEnumFromString(string value)
        {
            if (value.Equals("Y"))
                return AddrMatchEnum.Y;

            if (value.Equals("N"))
                return AddrMatchEnum.N;

            throw new NotImplementedException($"Could not convert value to type AddrMatchEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AddrMatchEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AddrMatchEnum? AddrMatchEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Y"))
                return AddrMatchEnum.Y;

            if (value.Equals("N"))
                return AddrMatchEnum.N;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AddrMatchEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AddrMatchEnumToJsonValue(AddrMatchEnum? value)
        {
            if (value == AddrMatchEnum.Y)
                return "Y";

            if (value == AddrMatchEnum.N)
                return "N";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AddrMatch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AddrMatchEnum?> AddrMatchOption { get; private set; }

        /// <summary>
        /// Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values: * **Y** — Shipping Address matches Billing Address. * **N** — Shipping Address does not match Billing Address.
        /// </summary>
        /// <value>Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values: * **Y** — Shipping Address matches Billing Address. * **N** — Shipping Address does not match Billing Address.</value>
        [JsonPropertyName("addrMatch")]
        public AddrMatchEnum? AddrMatch { get { return this.AddrMatchOption; } set { this.AddrMatchOption = new Option<AddrMatchEnum?>(value); } }

        /// <summary>
        /// Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * &#x60;noPreference&#x60; * &#x60;requestNoChallenge&#x60; * &#x60;requestChallenge&#x60; * &#x60;requestChallengeAsMandate&#x60; 
        /// </summary>
        /// <value>Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * &#x60;noPreference&#x60; * &#x60;requestNoChallenge&#x60; * &#x60;requestChallenge&#x60; * &#x60;requestChallengeAsMandate&#x60; </value>
        public enum ChallengeIndicatorEnum
        {
            /// <summary>
            /// Enum NoPreference for value: noPreference
            /// </summary>
            NoPreference = 1,

            /// <summary>
            /// Enum RequestNoChallenge for value: requestNoChallenge
            /// </summary>
            RequestNoChallenge = 2,

            /// <summary>
            /// Enum RequestChallenge for value: requestChallenge
            /// </summary>
            RequestChallenge = 3,

            /// <summary>
            /// Enum RequestChallengeAsMandate for value: requestChallengeAsMandate
            /// </summary>
            RequestChallengeAsMandate = 4
        }

        /// <summary>
        /// Returns a <see cref="ChallengeIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ChallengeIndicatorEnum ChallengeIndicatorEnumFromString(string value)
        {
            if (value.Equals("noPreference"))
                return ChallengeIndicatorEnum.NoPreference;

            if (value.Equals("requestNoChallenge"))
                return ChallengeIndicatorEnum.RequestNoChallenge;

            if (value.Equals("requestChallenge"))
                return ChallengeIndicatorEnum.RequestChallenge;

            if (value.Equals("requestChallengeAsMandate"))
                return ChallengeIndicatorEnum.RequestChallengeAsMandate;

            throw new NotImplementedException($"Could not convert value to type ChallengeIndicatorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ChallengeIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChallengeIndicatorEnum? ChallengeIndicatorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("noPreference"))
                return ChallengeIndicatorEnum.NoPreference;

            if (value.Equals("requestNoChallenge"))
                return ChallengeIndicatorEnum.RequestNoChallenge;

            if (value.Equals("requestChallenge"))
                return ChallengeIndicatorEnum.RequestChallenge;

            if (value.Equals("requestChallengeAsMandate"))
                return ChallengeIndicatorEnum.RequestChallengeAsMandate;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChallengeIndicatorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ChallengeIndicatorEnumToJsonValue(ChallengeIndicatorEnum? value)
        {
            if (value == ChallengeIndicatorEnum.NoPreference)
                return "noPreference";

            if (value == ChallengeIndicatorEnum.RequestNoChallenge)
                return "requestNoChallenge";

            if (value == ChallengeIndicatorEnum.RequestChallenge)
                return "requestChallenge";

            if (value == ChallengeIndicatorEnum.RequestChallengeAsMandate)
                return "requestChallengeAsMandate";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ChallengeIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChallengeIndicatorEnum?> ChallengeIndicatorOption { get; private set; }

        /// <summary>
        /// Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * &#x60;noPreference&#x60; * &#x60;requestNoChallenge&#x60; * &#x60;requestChallenge&#x60; * &#x60;requestChallengeAsMandate&#x60; 
        /// </summary>
        /// <value>Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * &#x60;noPreference&#x60; * &#x60;requestNoChallenge&#x60; * &#x60;requestChallenge&#x60; * &#x60;requestChallengeAsMandate&#x60; </value>
        [JsonPropertyName("challengeIndicator")]
        [Obsolete]
        public ChallengeIndicatorEnum? ChallengeIndicator { get { return this.ChallengeIndicatorOption; } set { this.ChallengeIndicatorOption = new Option<ChallengeIndicatorEnum?>(value); } }

        /// <summary>
        /// Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only
        /// </summary>
        /// <value>Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only</value>
        public enum ThreeDSRequestorChallengeIndEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            _05 = 5,

            /// <summary>
            /// Enum _06 for value: 06
            /// </summary>
            _06 = 6
        }

        /// <summary>
        /// Returns a <see cref="ThreeDSRequestorChallengeIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ThreeDSRequestorChallengeIndEnum ThreeDSRequestorChallengeIndEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ThreeDSRequestorChallengeIndEnum._01;

            if (value.Equals("02"))
                return ThreeDSRequestorChallengeIndEnum._02;

            if (value.Equals("03"))
                return ThreeDSRequestorChallengeIndEnum._03;

            if (value.Equals("04"))
                return ThreeDSRequestorChallengeIndEnum._04;

            if (value.Equals("05"))
                return ThreeDSRequestorChallengeIndEnum._05;

            if (value.Equals("06"))
                return ThreeDSRequestorChallengeIndEnum._06;

            throw new NotImplementedException($"Could not convert value to type ThreeDSRequestorChallengeIndEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ThreeDSRequestorChallengeIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThreeDSRequestorChallengeIndEnum? ThreeDSRequestorChallengeIndEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ThreeDSRequestorChallengeIndEnum._01;

            if (value.Equals("02"))
                return ThreeDSRequestorChallengeIndEnum._02;

            if (value.Equals("03"))
                return ThreeDSRequestorChallengeIndEnum._03;

            if (value.Equals("04"))
                return ThreeDSRequestorChallengeIndEnum._04;

            if (value.Equals("05"))
                return ThreeDSRequestorChallengeIndEnum._05;

            if (value.Equals("06"))
                return ThreeDSRequestorChallengeIndEnum._06;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ThreeDSRequestorChallengeIndEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ThreeDSRequestorChallengeIndEnumToJsonValue(ThreeDSRequestorChallengeIndEnum? value)
        {
            if (value == ThreeDSRequestorChallengeIndEnum._01)
                return "01";

            if (value == ThreeDSRequestorChallengeIndEnum._02)
                return "02";

            if (value == ThreeDSRequestorChallengeIndEnum._03)
                return "03";

            if (value == ThreeDSRequestorChallengeIndEnum._04)
                return "04";

            if (value == ThreeDSRequestorChallengeIndEnum._05)
                return "05";

            if (value == ThreeDSRequestorChallengeIndEnum._06)
                return "06";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ThreeDSRequestorChallengeInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDSRequestorChallengeIndEnum?> ThreeDSRequestorChallengeIndOption { get; private set; }

        /// <summary>
        /// Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only
        /// </summary>
        /// <value>Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only</value>
        [JsonPropertyName("threeDSRequestorChallengeInd")]
        public ThreeDSRequestorChallengeIndEnum? ThreeDSRequestorChallengeInd { get { return this.ThreeDSRequestorChallengeIndOption; } set { this.ThreeDSRequestorChallengeIndOption = new Option<ThreeDSRequestorChallengeIndEnum?>(value); } }

        /// <summary>
        /// Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values: * **01** — Goods/Service Purchase * **03** — Check Acceptance * **10** — Account Funding * **11** — Quasi-Cash Transaction * **28** — Prepaid Activation and Load
        /// </summary>
        /// <value>Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values: * **01** — Goods/Service Purchase * **03** — Check Acceptance * **10** — Account Funding * **11** — Quasi-Cash Transaction * **28** — Prepaid Activation and Load</value>
        public enum TransTypeEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 2,

            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            _10 = 3,

            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            _11 = 4,

            /// <summary>
            /// Enum _28 for value: 28
            /// </summary>
            _28 = 5
        }

        /// <summary>
        /// Returns a <see cref="TransTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TransTypeEnum TransTypeEnumFromString(string value)
        {
            if (value.Equals("01"))
                return TransTypeEnum._01;

            if (value.Equals("03"))
                return TransTypeEnum._03;

            if (value.Equals("10"))
                return TransTypeEnum._10;

            if (value.Equals("11"))
                return TransTypeEnum._11;

            if (value.Equals("28"))
                return TransTypeEnum._28;

            throw new NotImplementedException($"Could not convert value to type TransTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TransTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TransTypeEnum? TransTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return TransTypeEnum._01;

            if (value.Equals("03"))
                return TransTypeEnum._03;

            if (value.Equals("10"))
                return TransTypeEnum._10;

            if (value.Equals("11"))
                return TransTypeEnum._11;

            if (value.Equals("28"))
                return TransTypeEnum._28;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TransTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TransTypeEnumToJsonValue(TransTypeEnum? value)
        {
            if (value == TransTypeEnum._01)
                return "01";

            if (value == TransTypeEnum._03)
                return "03";

            if (value == TransTypeEnum._10)
                return "10";

            if (value == TransTypeEnum._11)
                return "11";

            if (value == TransTypeEnum._28)
                return "28";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of TransType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TransTypeEnum?> TransTypeOption { get; private set; }

        /// <summary>
        /// Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values: * **01** — Goods/Service Purchase * **03** — Check Acceptance * **10** — Account Funding * **11** — Quasi-Cash Transaction * **28** — Prepaid Activation and Load
        /// </summary>
        /// <value>Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values: * **01** — Goods/Service Purchase * **03** — Check Acceptance * **10** — Account Funding * **11** — Quasi-Cash Transaction * **28** — Prepaid Activation and Load</value>
        [JsonPropertyName("transType")]
        public TransTypeEnum? TransType { get { return this.TransTypeOption; } set { this.TransTypeOption = new Option<TransTypeEnum?>(value); } }

        /// <summary>
        /// Identify the type of the transaction being authenticated.
        /// </summary>
        /// <value>Identify the type of the transaction being authenticated.</value>
        public enum TransactionTypeEnum
        {
            /// <summary>
            /// Enum GoodsOrServicePurchase for value: goodsOrServicePurchase
            /// </summary>
            GoodsOrServicePurchase = 1,

            /// <summary>
            /// Enum CheckAcceptance for value: checkAcceptance
            /// </summary>
            CheckAcceptance = 2,

            /// <summary>
            /// Enum AccountFunding for value: accountFunding
            /// </summary>
            AccountFunding = 3,

            /// <summary>
            /// Enum QuasiCashTransaction for value: quasiCashTransaction
            /// </summary>
            QuasiCashTransaction = 4,

            /// <summary>
            /// Enum PrepaidActivationAndLoad for value: prepaidActivationAndLoad
            /// </summary>
            PrepaidActivationAndLoad = 5
        }

        /// <summary>
        /// Returns a <see cref="TransactionTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TransactionTypeEnum TransactionTypeEnumFromString(string value)
        {
            if (value.Equals("goodsOrServicePurchase"))
                return TransactionTypeEnum.GoodsOrServicePurchase;

            if (value.Equals("checkAcceptance"))
                return TransactionTypeEnum.CheckAcceptance;

            if (value.Equals("accountFunding"))
                return TransactionTypeEnum.AccountFunding;

            if (value.Equals("quasiCashTransaction"))
                return TransactionTypeEnum.QuasiCashTransaction;

            if (value.Equals("prepaidActivationAndLoad"))
                return TransactionTypeEnum.PrepaidActivationAndLoad;

            throw new NotImplementedException($"Could not convert value to type TransactionTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TransactionTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TransactionTypeEnum? TransactionTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("goodsOrServicePurchase"))
                return TransactionTypeEnum.GoodsOrServicePurchase;

            if (value.Equals("checkAcceptance"))
                return TransactionTypeEnum.CheckAcceptance;

            if (value.Equals("accountFunding"))
                return TransactionTypeEnum.AccountFunding;

            if (value.Equals("quasiCashTransaction"))
                return TransactionTypeEnum.QuasiCashTransaction;

            if (value.Equals("prepaidActivationAndLoad"))
                return TransactionTypeEnum.PrepaidActivationAndLoad;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TransactionTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TransactionTypeEnumToJsonValue(TransactionTypeEnum? value)
        {
            if (value == TransactionTypeEnum.GoodsOrServicePurchase)
                return "goodsOrServicePurchase";

            if (value == TransactionTypeEnum.CheckAcceptance)
                return "checkAcceptance";

            if (value == TransactionTypeEnum.AccountFunding)
                return "accountFunding";

            if (value == TransactionTypeEnum.QuasiCashTransaction)
                return "quasiCashTransaction";

            if (value == TransactionTypeEnum.PrepaidActivationAndLoad)
                return "prepaidActivationAndLoad";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of TransactionType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TransactionTypeEnum?> TransactionTypeOption { get; private set; }

        /// <summary>
        /// Identify the type of the transaction being authenticated.
        /// </summary>
        /// <value>Identify the type of the transaction being authenticated.</value>
        [JsonPropertyName("transactionType")]
        public TransactionTypeEnum? TransactionType { get { return this.TransactionTypeOption; } set { this.TransactionTypeOption = new Option<TransactionTypeEnum?>(value); } }

        /// <summary>
        /// The environment of the shopper. Allowed values: * &#x60;app&#x60; * &#x60;browser&#x60;
        /// </summary>
        /// <value>The environment of the shopper. Allowed values: * &#x60;app&#x60; * &#x60;browser&#x60;</value>
        [JsonPropertyName("deviceChannel")]
        public string DeviceChannel { get; set; }

        /// <summary>
        /// Used to track the state of AcctInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AcctInfo> AcctInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets AcctInfo
        /// </summary>
        [JsonPropertyName("acctInfo")]
        public AcctInfo AcctInfo { get { return this.AcctInfoOption; } set { this.AcctInfoOption = new Option<AcctInfo>(value); } }

        /// <summary>
        /// Used to track the state of AcquirerBIN
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AcquirerBINOption { get; private set; }

        /// <summary>
        /// Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
        /// </summary>
        /// <value>Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.</value>
        [JsonPropertyName("acquirerBIN")]
        public string AcquirerBIN { get { return this.AcquirerBINOption; } set { this.AcquirerBINOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AcquirerMerchantID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AcquirerMerchantIDOption { get; private set; }

        /// <summary>
        /// Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant&#39;s acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
        /// </summary>
        /// <value>Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant&#39;s acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.</value>
        [JsonPropertyName("acquirerMerchantID")]
        public string AcquirerMerchantID { get { return this.AcquirerMerchantIDOption; } set { this.AcquirerMerchantIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AuthenticationOnly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AuthenticationOnlyOption { get; private set; }

        /// <summary>
        /// If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
        /// </summary>
        /// <value>If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.</value>
        [JsonPropertyName("authenticationOnly")]
        [Obsolete]
        public bool? AuthenticationOnly { get { return this.AuthenticationOnlyOption; } set { this.AuthenticationOnlyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DeviceRenderOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DeviceRenderOptions> DeviceRenderOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeviceRenderOptions
        /// </summary>
        [JsonPropertyName("deviceRenderOptions")]
        public DeviceRenderOptions DeviceRenderOptions { get { return this.DeviceRenderOptionsOption; } set { this.DeviceRenderOptionsOption = new Option<DeviceRenderOptions>(value); } }

        /// <summary>
        /// Used to track the state of HomePhone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Phone> HomePhoneOption { get; private set; }

        /// <summary>
        /// Gets or Sets HomePhone
        /// </summary>
        [JsonPropertyName("homePhone")]
        public Phone HomePhone { get { return this.HomePhoneOption; } set { this.HomePhoneOption = new Option<Phone>(value); } }

        /// <summary>
        /// Used to track the state of Mcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MccOption { get; private set; }

        /// <summary>
        /// Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The &#x60;mcc&#x60; is a four-digit code with which the previously given &#x60;acquirerMerchantID&#x60; is registered at the scheme.
        /// </summary>
        /// <value>Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The &#x60;mcc&#x60; is a four-digit code with which the previously given &#x60;acquirerMerchantID&#x60; is registered at the scheme.</value>
        [JsonPropertyName("mcc")]
        public string Mcc { get { return this.MccOption; } set { this.MccOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MerchantName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MerchantNameOption { get; private set; }

        /// <summary>
        /// Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters. &gt; Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.
        /// </summary>
        /// <value>Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters. &gt; Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.</value>
        [JsonPropertyName("merchantName")]
        public string MerchantName { get { return this.MerchantNameOption; } set { this.MerchantNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MessageVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageVersionOption { get; private set; }

        /// <summary>
        /// The &#x60;messageVersion&#x60; value indicating the 3D Secure 2 protocol version.
        /// </summary>
        /// <value>The &#x60;messageVersion&#x60; value indicating the 3D Secure 2 protocol version.</value>
        [JsonPropertyName("messageVersion")]
        public string MessageVersion { get { return this.MessageVersionOption; } set { this.MessageVersionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MobilePhone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Phone> MobilePhoneOption { get; private set; }

        /// <summary>
        /// Gets or Sets MobilePhone
        /// </summary>
        [JsonPropertyName("mobilePhone")]
        public Phone MobilePhone { get { return this.MobilePhoneOption; } set { this.MobilePhoneOption = new Option<Phone>(value); } }

        /// <summary>
        /// Used to track the state of NotificationURL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NotificationURLOption { get; private set; }

        /// <summary>
        /// URL to where the issuer should send the &#x60;CRes&#x60;. Required if you are not using components for &#x60;channel&#x60; **Web** or if you are using classic integration &#x60;deviceChannel&#x60; **browser**.
        /// </summary>
        /// <value>URL to where the issuer should send the &#x60;CRes&#x60;. Required if you are not using components for &#x60;channel&#x60; **Web** or if you are using classic integration &#x60;deviceChannel&#x60; **browser**.</value>
        [JsonPropertyName("notificationURL")]
        public string NotificationURL { get { return this.NotificationURLOption; } set { this.NotificationURLOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PayTokenInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PayTokenIndOption { get; private set; }

        /// <summary>
        /// Value **true** indicates that the transaction was de-tokenised prior to being received by the ACS.
        /// </summary>
        /// <value>Value **true** indicates that the transaction was de-tokenised prior to being received by the ACS.</value>
        [JsonPropertyName("payTokenInd")]
        public bool? PayTokenInd { get { return this.PayTokenIndOption; } set { this.PayTokenIndOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAuthenticationUseCase
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentAuthenticationUseCaseOption { get; private set; }

        /// <summary>
        /// Indicates the type of payment for which an authentication is requested (message extension)
        /// </summary>
        /// <value>Indicates the type of payment for which an authentication is requested (message extension)</value>
        [JsonPropertyName("paymentAuthenticationUseCase")]
        public string PaymentAuthenticationUseCase { get { return this.PaymentAuthenticationUseCaseOption; } set { this.PaymentAuthenticationUseCaseOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PurchaseInstalData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PurchaseInstalDataOption { get; private set; }

        /// <summary>
        /// Indicates the maximum number of authorisations permitted for instalment payments. Length: 1–3 characters.
        /// </summary>
        /// <value>Indicates the maximum number of authorisations permitted for instalment payments. Length: 1–3 characters.</value>
        [JsonPropertyName("purchaseInstalData")]
        public string PurchaseInstalData { get { return this.PurchaseInstalDataOption; } set { this.PurchaseInstalDataOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecurringExpiry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringExpiryOption { get; private set; }

        /// <summary>
        /// Date after which no further authorisations shall be performed. Format: YYYYMMDD
        /// </summary>
        /// <value>Date after which no further authorisations shall be performed. Format: YYYYMMDD</value>
        [JsonPropertyName("recurringExpiry")]
        public string RecurringExpiry { get { return this.RecurringExpiryOption; } set { this.RecurringExpiryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecurringFrequency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringFrequencyOption { get; private set; }

        /// <summary>
        /// Indicates the minimum number of days between authorisations. Maximum length: 4 characters.
        /// </summary>
        /// <value>Indicates the minimum number of days between authorisations. Maximum length: 4 characters.</value>
        [JsonPropertyName("recurringFrequency")]
        public string RecurringFrequency { get { return this.RecurringFrequencyOption; } set { this.RecurringFrequencyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SdkAppID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SdkAppIDOption { get; private set; }

        /// <summary>
        /// The &#x60;sdkAppID&#x60; value as received from the 3D Secure 2 SDK. Required for &#x60;deviceChannel&#x60; set to **app**.
        /// </summary>
        /// <value>The &#x60;sdkAppID&#x60; value as received from the 3D Secure 2 SDK. Required for &#x60;deviceChannel&#x60; set to **app**.</value>
        [JsonPropertyName("sdkAppID")]
        public string SdkAppID { get { return this.SdkAppIDOption; } set { this.SdkAppIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SdkEncData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SdkEncDataOption { get; private set; }

        /// <summary>
        /// The &#x60;sdkEncData&#x60; value as received from the 3D Secure 2 SDK. Required for &#x60;deviceChannel&#x60; set to **app**.
        /// </summary>
        /// <value>The &#x60;sdkEncData&#x60; value as received from the 3D Secure 2 SDK. Required for &#x60;deviceChannel&#x60; set to **app**.</value>
        [JsonPropertyName("sdkEncData")]
        public string SdkEncData { get { return this.SdkEncDataOption; } set { this.SdkEncDataOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SdkEphemPubKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SDKEphemPubKey> SdkEphemPubKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets SdkEphemPubKey
        /// </summary>
        [JsonPropertyName("sdkEphemPubKey")]
        public SDKEphemPubKey SdkEphemPubKey { get { return this.SdkEphemPubKeyOption; } set { this.SdkEphemPubKeyOption = new Option<SDKEphemPubKey>(value); } }

        /// <summary>
        /// Used to track the state of SdkMaxTimeout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SdkMaxTimeoutOption { get; private set; }

        /// <summary>
        /// The maximum amount of time in minutes for the 3D Secure 2 authentication process. Optional and only for &#x60;deviceChannel&#x60; set to **app**. Defaults to **60** minutes.
        /// </summary>
        /// <value>The maximum amount of time in minutes for the 3D Secure 2 authentication process. Optional and only for &#x60;deviceChannel&#x60; set to **app**. Defaults to **60** minutes.</value>
        [JsonPropertyName("sdkMaxTimeout")]
        public int? SdkMaxTimeout { get { return this.SdkMaxTimeoutOption; } set { this.SdkMaxTimeoutOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of SdkReferenceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SdkReferenceNumberOption { get; private set; }

        /// <summary>
        /// The &#x60;sdkReferenceNumber&#x60; value as received from the 3D Secure 2 SDK. Only for &#x60;deviceChannel&#x60; set to **app**.
        /// </summary>
        /// <value>The &#x60;sdkReferenceNumber&#x60; value as received from the 3D Secure 2 SDK. Only for &#x60;deviceChannel&#x60; set to **app**.</value>
        [JsonPropertyName("sdkReferenceNumber")]
        public string SdkReferenceNumber { get { return this.SdkReferenceNumberOption; } set { this.SdkReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SdkTransID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SdkTransIDOption { get; private set; }

        /// <summary>
        /// The &#x60;sdkTransID&#x60; value as received from the 3D Secure 2 SDK. Only for &#x60;deviceChannel&#x60; set to **app**.
        /// </summary>
        /// <value>The &#x60;sdkTransID&#x60; value as received from the 3D Secure 2 SDK. Only for &#x60;deviceChannel&#x60; set to **app**.</value>
        [JsonPropertyName("sdkTransID")]
        public string SdkTransID { get { return this.SdkTransIDOption; } set { this.SdkTransIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SdkVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SdkVersionOption { get; private set; }

        /// <summary>
        /// Version of the 3D Secure 2 mobile SDK.  Only for &#x60;deviceChannel&#x60; set to **app**.
        /// </summary>
        /// <value>Version of the 3D Secure 2 mobile SDK.  Only for &#x60;deviceChannel&#x60; set to **app**.</value>
        [JsonPropertyName("sdkVersion")]
        public string SdkVersion { get { return this.SdkVersionOption; } set { this.SdkVersionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSCompInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSCompIndOption { get; private set; }

        /// <summary>
        /// Completion indicator for the device fingerprinting.
        /// </summary>
        /// <value>Completion indicator for the device fingerprinting.</value>
        [JsonPropertyName("threeDSCompInd")]
        public string ThreeDSCompInd { get { return this.ThreeDSCompIndOption; } set { this.ThreeDSCompIndOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSRequestorAuthenticationInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSRequestorAuthenticationIndOption { get; private set; }

        /// <summary>
        /// Indicates the type of Authentication request.
        /// </summary>
        /// <value>Indicates the type of Authentication request.</value>
        [JsonPropertyName("threeDSRequestorAuthenticationInd")]
        public string ThreeDSRequestorAuthenticationInd { get { return this.ThreeDSRequestorAuthenticationIndOption; } set { this.ThreeDSRequestorAuthenticationIndOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSRequestorAuthenticationInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDSRequestorAuthenticationInfo> ThreeDSRequestorAuthenticationInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreeDSRequestorAuthenticationInfo
        /// </summary>
        [JsonPropertyName("threeDSRequestorAuthenticationInfo")]
        public ThreeDSRequestorAuthenticationInfo ThreeDSRequestorAuthenticationInfo { get { return this.ThreeDSRequestorAuthenticationInfoOption; } set { this.ThreeDSRequestorAuthenticationInfoOption = new Option<ThreeDSRequestorAuthenticationInfo>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSRequestorID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSRequestorIDOption { get; private set; }

        /// <summary>
        /// Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.
        /// </summary>
        /// <value>Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.</value>
        [JsonPropertyName("threeDSRequestorID")]
        public string ThreeDSRequestorID { get { return this.ThreeDSRequestorIDOption; } set { this.ThreeDSRequestorIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSRequestorName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSRequestorNameOption { get; private set; }

        /// <summary>
        /// Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.
        /// </summary>
        /// <value>Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.</value>
        [JsonPropertyName("threeDSRequestorName")]
        public string ThreeDSRequestorName { get { return this.ThreeDSRequestorNameOption; } set { this.ThreeDSRequestorNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSRequestorPriorAuthenticationInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDSRequestorPriorAuthenticationInfo> ThreeDSRequestorPriorAuthenticationInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreeDSRequestorPriorAuthenticationInfo
        /// </summary>
        [JsonPropertyName("threeDSRequestorPriorAuthenticationInfo")]
        public ThreeDSRequestorPriorAuthenticationInfo ThreeDSRequestorPriorAuthenticationInfo { get { return this.ThreeDSRequestorPriorAuthenticationInfoOption; } set { this.ThreeDSRequestorPriorAuthenticationInfoOption = new Option<ThreeDSRequestorPriorAuthenticationInfo>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSRequestorURL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSRequestorURLOption { get; private set; }

        /// <summary>
        /// URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.
        /// </summary>
        /// <value>URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.</value>
        [JsonPropertyName("threeDSRequestorURL")]
        public string ThreeDSRequestorURL { get { return this.ThreeDSRequestorURLOption; } set { this.ThreeDSRequestorURLOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of WhiteListStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> WhiteListStatusOption { get; private set; }

        /// <summary>
        /// The &#x60;whiteListStatus&#x60; value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.
        /// </summary>
        /// <value>The &#x60;whiteListStatus&#x60; value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.</value>
        [JsonPropertyName("whiteListStatus")]
        public string WhiteListStatus { get { return this.WhiteListStatusOption; } set { this.WhiteListStatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of WorkPhone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Phone> WorkPhoneOption { get; private set; }

        /// <summary>
        /// Gets or Sets WorkPhone
        /// </summary>
        [JsonPropertyName("workPhone")]
        public Phone WorkPhone { get { return this.WorkPhoneOption; } set { this.WorkPhoneOption = new Option<Phone>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDS2RequestData {\n");
            sb.Append("  DeviceChannel: ").Append(DeviceChannel).Append("\n");
            sb.Append("  AcctInfo: ").Append(AcctInfo).Append("\n");
            sb.Append("  AcctType: ").Append(AcctType).Append("\n");
            sb.Append("  AcquirerBIN: ").Append(AcquirerBIN).Append("\n");
            sb.Append("  AcquirerMerchantID: ").Append(AcquirerMerchantID).Append("\n");
            sb.Append("  AddrMatch: ").Append(AddrMatch).Append("\n");
            sb.Append("  AuthenticationOnly: ").Append(AuthenticationOnly).Append("\n");
            sb.Append("  ChallengeIndicator: ").Append(ChallengeIndicator).Append("\n");
            sb.Append("  DeviceRenderOptions: ").Append(DeviceRenderOptions).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("  MessageVersion: ").Append(MessageVersion).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  NotificationURL: ").Append(NotificationURL).Append("\n");
            sb.Append("  PayTokenInd: ").Append(PayTokenInd).Append("\n");
            sb.Append("  PaymentAuthenticationUseCase: ").Append(PaymentAuthenticationUseCase).Append("\n");
            sb.Append("  PurchaseInstalData: ").Append(PurchaseInstalData).Append("\n");
            sb.Append("  RecurringExpiry: ").Append(RecurringExpiry).Append("\n");
            sb.Append("  RecurringFrequency: ").Append(RecurringFrequency).Append("\n");
            sb.Append("  SdkAppID: ").Append(SdkAppID).Append("\n");
            sb.Append("  SdkEncData: ").Append(SdkEncData).Append("\n");
            sb.Append("  SdkEphemPubKey: ").Append(SdkEphemPubKey).Append("\n");
            sb.Append("  SdkMaxTimeout: ").Append(SdkMaxTimeout).Append("\n");
            sb.Append("  SdkReferenceNumber: ").Append(SdkReferenceNumber).Append("\n");
            sb.Append("  SdkTransID: ").Append(SdkTransID).Append("\n");
            sb.Append("  SdkVersion: ").Append(SdkVersion).Append("\n");
            sb.Append("  ThreeDSCompInd: ").Append(ThreeDSCompInd).Append("\n");
            sb.Append("  ThreeDSRequestorAuthenticationInd: ").Append(ThreeDSRequestorAuthenticationInd).Append("\n");
            sb.Append("  ThreeDSRequestorAuthenticationInfo: ").Append(ThreeDSRequestorAuthenticationInfo).Append("\n");
            sb.Append("  ThreeDSRequestorChallengeInd: ").Append(ThreeDSRequestorChallengeInd).Append("\n");
            sb.Append("  ThreeDSRequestorID: ").Append(ThreeDSRequestorID).Append("\n");
            sb.Append("  ThreeDSRequestorName: ").Append(ThreeDSRequestorName).Append("\n");
            sb.Append("  ThreeDSRequestorPriorAuthenticationInfo: ").Append(ThreeDSRequestorPriorAuthenticationInfo).Append("\n");
            sb.Append("  ThreeDSRequestorURL: ").Append(ThreeDSRequestorURL).Append("\n");
            sb.Append("  TransType: ").Append(TransType).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  WhiteListStatus: ").Append(WhiteListStatus).Append("\n");
            sb.Append("  WorkPhone: ").Append(WorkPhone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PurchaseInstalData (string) maxLength
            if (this.PurchaseInstalData != null && this.PurchaseInstalData.Length > 3)
            {
                yield return new ValidationResult("Invalid value for PurchaseInstalData, length must be less than 3.", new [] { "PurchaseInstalData" });
            }

            // PurchaseInstalData (string) minLength
            if (this.PurchaseInstalData != null && this.PurchaseInstalData.Length < 1)
            {
                yield return new ValidationResult("Invalid value for PurchaseInstalData, length must be greater than 1.", new [] { "PurchaseInstalData" });
            }

            // RecurringFrequency (string) maxLength
            if (this.RecurringFrequency != null && this.RecurringFrequency.Length > 4)
            {
                yield return new ValidationResult("Invalid value for RecurringFrequency, length must be less than 4.", new [] { "RecurringFrequency" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ThreeDS2RequestData" />
    /// </summary>
    public class ThreeDS2RequestDataJsonConverter : JsonConverter<ThreeDS2RequestData>
    {
        /// <summary>
        /// Deserializes json to <see cref="ThreeDS2RequestData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ThreeDS2RequestData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> deviceChannel = default;
            Option<AcctInfo> acctInfo = default;
            Option<ThreeDS2RequestData.AcctTypeEnum?> acctType = default;
            Option<string> acquirerBIN = default;
            Option<string> acquirerMerchantID = default;
            Option<ThreeDS2RequestData.AddrMatchEnum?> addrMatch = default;
            Option<bool?> authenticationOnly = default;
            Option<ThreeDS2RequestData.ChallengeIndicatorEnum?> challengeIndicator = default;
            Option<DeviceRenderOptions> deviceRenderOptions = default;
            Option<Phone> homePhone = default;
            Option<string> mcc = default;
            Option<string> merchantName = default;
            Option<string> messageVersion = default;
            Option<Phone> mobilePhone = default;
            Option<string> notificationURL = default;
            Option<bool?> payTokenInd = default;
            Option<string> paymentAuthenticationUseCase = default;
            Option<string> purchaseInstalData = default;
            Option<string> recurringExpiry = default;
            Option<string> recurringFrequency = default;
            Option<string> sdkAppID = default;
            Option<string> sdkEncData = default;
            Option<SDKEphemPubKey> sdkEphemPubKey = default;
            Option<int?> sdkMaxTimeout = default;
            Option<string> sdkReferenceNumber = default;
            Option<string> sdkTransID = default;
            Option<string> sdkVersion = default;
            Option<string> threeDSCompInd = default;
            Option<string> threeDSRequestorAuthenticationInd = default;
            Option<ThreeDSRequestorAuthenticationInfo> threeDSRequestorAuthenticationInfo = default;
            Option<ThreeDS2RequestData.ThreeDSRequestorChallengeIndEnum?> threeDSRequestorChallengeInd = default;
            Option<string> threeDSRequestorID = default;
            Option<string> threeDSRequestorName = default;
            Option<ThreeDSRequestorPriorAuthenticationInfo> threeDSRequestorPriorAuthenticationInfo = default;
            Option<string> threeDSRequestorURL = default;
            Option<ThreeDS2RequestData.TransTypeEnum?> transType = default;
            Option<ThreeDS2RequestData.TransactionTypeEnum?> transactionType = default;
            Option<string> whiteListStatus = default;
            Option<Phone> workPhone = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "deviceChannel":
                            deviceChannel = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "acctInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                acctInfo = new Option<AcctInfo>(JsonSerializer.Deserialize<AcctInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "acctType":
                            string acctTypeRawValue = utf8JsonReader.GetString();
                            if (acctTypeRawValue != null)
                                acctType = new Option<ThreeDS2RequestData.AcctTypeEnum?>(ThreeDS2RequestData.AcctTypeEnumFromStringOrDefault(acctTypeRawValue));
                            break;
                        case "acquirerBIN":
                            acquirerBIN = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "acquirerMerchantID":
                            acquirerMerchantID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "addrMatch":
                            string addrMatchRawValue = utf8JsonReader.GetString();
                            if (addrMatchRawValue != null)
                                addrMatch = new Option<ThreeDS2RequestData.AddrMatchEnum?>(ThreeDS2RequestData.AddrMatchEnumFromStringOrDefault(addrMatchRawValue));
                            break;
                        case "authenticationOnly":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                authenticationOnly = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "challengeIndicator":
                            string challengeIndicatorRawValue = utf8JsonReader.GetString();
                            if (challengeIndicatorRawValue != null)
                                challengeIndicator = new Option<ThreeDS2RequestData.ChallengeIndicatorEnum?>(ThreeDS2RequestData.ChallengeIndicatorEnumFromStringOrDefault(challengeIndicatorRawValue));
                            break;
                        case "deviceRenderOptions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deviceRenderOptions = new Option<DeviceRenderOptions>(JsonSerializer.Deserialize<DeviceRenderOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "homePhone":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homePhone = new Option<Phone>(JsonSerializer.Deserialize<Phone>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mcc":
                            mcc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantName":
                            merchantName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "messageVersion":
                            messageVersion = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mobilePhone":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mobilePhone = new Option<Phone>(JsonSerializer.Deserialize<Phone>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "notificationURL":
                            notificationURL = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "payTokenInd":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payTokenInd = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "paymentAuthenticationUseCase":
                            paymentAuthenticationUseCase = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "purchaseInstalData":
                            purchaseInstalData = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurringExpiry":
                            recurringExpiry = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurringFrequency":
                            recurringFrequency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sdkAppID":
                            sdkAppID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sdkEncData":
                            sdkEncData = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sdkEphemPubKey":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sdkEphemPubKey = new Option<SDKEphemPubKey>(JsonSerializer.Deserialize<SDKEphemPubKey>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sdkMaxTimeout":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sdkMaxTimeout = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "sdkReferenceNumber":
                            sdkReferenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sdkTransID":
                            sdkTransID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sdkVersion":
                            sdkVersion = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDSCompInd":
                            threeDSCompInd = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDSRequestorAuthenticationInd":
                            threeDSRequestorAuthenticationInd = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDSRequestorAuthenticationInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeDSRequestorAuthenticationInfo = new Option<ThreeDSRequestorAuthenticationInfo>(JsonSerializer.Deserialize<ThreeDSRequestorAuthenticationInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "threeDSRequestorChallengeInd":
                            string threeDSRequestorChallengeIndRawValue = utf8JsonReader.GetString();
                            if (threeDSRequestorChallengeIndRawValue != null)
                                threeDSRequestorChallengeInd = new Option<ThreeDS2RequestData.ThreeDSRequestorChallengeIndEnum?>(ThreeDS2RequestData.ThreeDSRequestorChallengeIndEnumFromStringOrDefault(threeDSRequestorChallengeIndRawValue));
                            break;
                        case "threeDSRequestorID":
                            threeDSRequestorID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDSRequestorName":
                            threeDSRequestorName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDSRequestorPriorAuthenticationInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeDSRequestorPriorAuthenticationInfo = new Option<ThreeDSRequestorPriorAuthenticationInfo>(JsonSerializer.Deserialize<ThreeDSRequestorPriorAuthenticationInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "threeDSRequestorURL":
                            threeDSRequestorURL = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "transType":
                            string transTypeRawValue = utf8JsonReader.GetString();
                            if (transTypeRawValue != null)
                                transType = new Option<ThreeDS2RequestData.TransTypeEnum?>(ThreeDS2RequestData.TransTypeEnumFromStringOrDefault(transTypeRawValue));
                            break;
                        case "transactionType":
                            string transactionTypeRawValue = utf8JsonReader.GetString();
                            if (transactionTypeRawValue != null)
                                transactionType = new Option<ThreeDS2RequestData.TransactionTypeEnum?>(ThreeDS2RequestData.TransactionTypeEnumFromStringOrDefault(transactionTypeRawValue));
                            break;
                        case "whiteListStatus":
                            whiteListStatus = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "workPhone":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                workPhone = new Option<Phone>(JsonSerializer.Deserialize<Phone>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!deviceChannel.IsSet)
                throw new ArgumentException("Property is required for class ThreeDS2RequestData.", nameof(deviceChannel));

            if (deviceChannel.IsSet && deviceChannel.Value == null)
                throw new ArgumentNullException(nameof(deviceChannel), "Property is not nullable for class ThreeDS2RequestData.");

            if (acctInfo.IsSet && acctInfo.Value == null)
                throw new ArgumentNullException(nameof(acctInfo), "Property is not nullable for class ThreeDS2RequestData.");

            if (acctType.IsSet && acctType.Value == null)
                throw new ArgumentNullException(nameof(acctType), "Property is not nullable for class ThreeDS2RequestData.");

            if (acquirerBIN.IsSet && acquirerBIN.Value == null)
                throw new ArgumentNullException(nameof(acquirerBIN), "Property is not nullable for class ThreeDS2RequestData.");

            if (acquirerMerchantID.IsSet && acquirerMerchantID.Value == null)
                throw new ArgumentNullException(nameof(acquirerMerchantID), "Property is not nullable for class ThreeDS2RequestData.");

            if (addrMatch.IsSet && addrMatch.Value == null)
                throw new ArgumentNullException(nameof(addrMatch), "Property is not nullable for class ThreeDS2RequestData.");

            if (authenticationOnly.IsSet && authenticationOnly.Value == null)
                throw new ArgumentNullException(nameof(authenticationOnly), "Property is not nullable for class ThreeDS2RequestData.");

            if (challengeIndicator.IsSet && challengeIndicator.Value == null)
                throw new ArgumentNullException(nameof(challengeIndicator), "Property is not nullable for class ThreeDS2RequestData.");

            if (deviceRenderOptions.IsSet && deviceRenderOptions.Value == null)
                throw new ArgumentNullException(nameof(deviceRenderOptions), "Property is not nullable for class ThreeDS2RequestData.");

            if (homePhone.IsSet && homePhone.Value == null)
                throw new ArgumentNullException(nameof(homePhone), "Property is not nullable for class ThreeDS2RequestData.");

            if (mcc.IsSet && mcc.Value == null)
                throw new ArgumentNullException(nameof(mcc), "Property is not nullable for class ThreeDS2RequestData.");

            if (merchantName.IsSet && merchantName.Value == null)
                throw new ArgumentNullException(nameof(merchantName), "Property is not nullable for class ThreeDS2RequestData.");

            if (messageVersion.IsSet && messageVersion.Value == null)
                throw new ArgumentNullException(nameof(messageVersion), "Property is not nullable for class ThreeDS2RequestData.");

            if (mobilePhone.IsSet && mobilePhone.Value == null)
                throw new ArgumentNullException(nameof(mobilePhone), "Property is not nullable for class ThreeDS2RequestData.");

            if (notificationURL.IsSet && notificationURL.Value == null)
                throw new ArgumentNullException(nameof(notificationURL), "Property is not nullable for class ThreeDS2RequestData.");

            if (payTokenInd.IsSet && payTokenInd.Value == null)
                throw new ArgumentNullException(nameof(payTokenInd), "Property is not nullable for class ThreeDS2RequestData.");

            if (paymentAuthenticationUseCase.IsSet && paymentAuthenticationUseCase.Value == null)
                throw new ArgumentNullException(nameof(paymentAuthenticationUseCase), "Property is not nullable for class ThreeDS2RequestData.");

            if (purchaseInstalData.IsSet && purchaseInstalData.Value == null)
                throw new ArgumentNullException(nameof(purchaseInstalData), "Property is not nullable for class ThreeDS2RequestData.");

            if (recurringExpiry.IsSet && recurringExpiry.Value == null)
                throw new ArgumentNullException(nameof(recurringExpiry), "Property is not nullable for class ThreeDS2RequestData.");

            if (recurringFrequency.IsSet && recurringFrequency.Value == null)
                throw new ArgumentNullException(nameof(recurringFrequency), "Property is not nullable for class ThreeDS2RequestData.");

            if (sdkAppID.IsSet && sdkAppID.Value == null)
                throw new ArgumentNullException(nameof(sdkAppID), "Property is not nullable for class ThreeDS2RequestData.");

            if (sdkEncData.IsSet && sdkEncData.Value == null)
                throw new ArgumentNullException(nameof(sdkEncData), "Property is not nullable for class ThreeDS2RequestData.");

            if (sdkEphemPubKey.IsSet && sdkEphemPubKey.Value == null)
                throw new ArgumentNullException(nameof(sdkEphemPubKey), "Property is not nullable for class ThreeDS2RequestData.");

            if (sdkMaxTimeout.IsSet && sdkMaxTimeout.Value == null)
                throw new ArgumentNullException(nameof(sdkMaxTimeout), "Property is not nullable for class ThreeDS2RequestData.");

            if (sdkReferenceNumber.IsSet && sdkReferenceNumber.Value == null)
                throw new ArgumentNullException(nameof(sdkReferenceNumber), "Property is not nullable for class ThreeDS2RequestData.");

            if (sdkTransID.IsSet && sdkTransID.Value == null)
                throw new ArgumentNullException(nameof(sdkTransID), "Property is not nullable for class ThreeDS2RequestData.");

            if (sdkVersion.IsSet && sdkVersion.Value == null)
                throw new ArgumentNullException(nameof(sdkVersion), "Property is not nullable for class ThreeDS2RequestData.");

            if (threeDSCompInd.IsSet && threeDSCompInd.Value == null)
                throw new ArgumentNullException(nameof(threeDSCompInd), "Property is not nullable for class ThreeDS2RequestData.");

            if (threeDSRequestorAuthenticationInd.IsSet && threeDSRequestorAuthenticationInd.Value == null)
                throw new ArgumentNullException(nameof(threeDSRequestorAuthenticationInd), "Property is not nullable for class ThreeDS2RequestData.");

            if (threeDSRequestorAuthenticationInfo.IsSet && threeDSRequestorAuthenticationInfo.Value == null)
                throw new ArgumentNullException(nameof(threeDSRequestorAuthenticationInfo), "Property is not nullable for class ThreeDS2RequestData.");

            if (threeDSRequestorChallengeInd.IsSet && threeDSRequestorChallengeInd.Value == null)
                throw new ArgumentNullException(nameof(threeDSRequestorChallengeInd), "Property is not nullable for class ThreeDS2RequestData.");

            if (threeDSRequestorID.IsSet && threeDSRequestorID.Value == null)
                throw new ArgumentNullException(nameof(threeDSRequestorID), "Property is not nullable for class ThreeDS2RequestData.");

            if (threeDSRequestorName.IsSet && threeDSRequestorName.Value == null)
                throw new ArgumentNullException(nameof(threeDSRequestorName), "Property is not nullable for class ThreeDS2RequestData.");

            if (threeDSRequestorPriorAuthenticationInfo.IsSet && threeDSRequestorPriorAuthenticationInfo.Value == null)
                throw new ArgumentNullException(nameof(threeDSRequestorPriorAuthenticationInfo), "Property is not nullable for class ThreeDS2RequestData.");

            if (threeDSRequestorURL.IsSet && threeDSRequestorURL.Value == null)
                throw new ArgumentNullException(nameof(threeDSRequestorURL), "Property is not nullable for class ThreeDS2RequestData.");

            if (transType.IsSet && transType.Value == null)
                throw new ArgumentNullException(nameof(transType), "Property is not nullable for class ThreeDS2RequestData.");

            if (transactionType.IsSet && transactionType.Value == null)
                throw new ArgumentNullException(nameof(transactionType), "Property is not nullable for class ThreeDS2RequestData.");

            if (whiteListStatus.IsSet && whiteListStatus.Value == null)
                throw new ArgumentNullException(nameof(whiteListStatus), "Property is not nullable for class ThreeDS2RequestData.");

            if (workPhone.IsSet && workPhone.Value == null)
                throw new ArgumentNullException(nameof(workPhone), "Property is not nullable for class ThreeDS2RequestData.");

            return new ThreeDS2RequestData(deviceChannel.Value, acctInfo, acctType, acquirerBIN, acquirerMerchantID, addrMatch, authenticationOnly, challengeIndicator, deviceRenderOptions, homePhone, mcc, merchantName, messageVersion, mobilePhone, notificationURL, payTokenInd, paymentAuthenticationUseCase, purchaseInstalData, recurringExpiry, recurringFrequency, sdkAppID, sdkEncData, sdkEphemPubKey, sdkMaxTimeout, sdkReferenceNumber, sdkTransID, sdkVersion, threeDSCompInd, threeDSRequestorAuthenticationInd, threeDSRequestorAuthenticationInfo, threeDSRequestorChallengeInd, threeDSRequestorID, threeDSRequestorName, threeDSRequestorPriorAuthenticationInfo, threeDSRequestorURL, transType, transactionType, whiteListStatus, workPhone);
        }

        /// <summary>
        /// Serializes a <see cref="ThreeDS2RequestData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="threeDS2RequestData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ThreeDS2RequestData threeDS2RequestData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, threeDS2RequestData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ThreeDS2RequestData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="threeDS2RequestData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ThreeDS2RequestData threeDS2RequestData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (threeDS2RequestData.DeviceChannel == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.DeviceChannel), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.AcctInfoOption.IsSet && threeDS2RequestData.AcctInfo == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.AcctInfo), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.AcquirerBINOption.IsSet && threeDS2RequestData.AcquirerBIN == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.AcquirerBIN), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.AcquirerMerchantIDOption.IsSet && threeDS2RequestData.AcquirerMerchantID == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.AcquirerMerchantID), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.DeviceRenderOptionsOption.IsSet && threeDS2RequestData.DeviceRenderOptions == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.DeviceRenderOptions), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.HomePhoneOption.IsSet && threeDS2RequestData.HomePhone == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.HomePhone), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.MccOption.IsSet && threeDS2RequestData.Mcc == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.Mcc), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.MerchantNameOption.IsSet && threeDS2RequestData.MerchantName == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.MerchantName), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.MessageVersionOption.IsSet && threeDS2RequestData.MessageVersion == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.MessageVersion), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.MobilePhoneOption.IsSet && threeDS2RequestData.MobilePhone == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.MobilePhone), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.NotificationURLOption.IsSet && threeDS2RequestData.NotificationURL == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.NotificationURL), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.PaymentAuthenticationUseCaseOption.IsSet && threeDS2RequestData.PaymentAuthenticationUseCase == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.PaymentAuthenticationUseCase), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.PurchaseInstalDataOption.IsSet && threeDS2RequestData.PurchaseInstalData == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.PurchaseInstalData), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.RecurringExpiryOption.IsSet && threeDS2RequestData.RecurringExpiry == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.RecurringExpiry), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.RecurringFrequencyOption.IsSet && threeDS2RequestData.RecurringFrequency == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.RecurringFrequency), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.SdkAppIDOption.IsSet && threeDS2RequestData.SdkAppID == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.SdkAppID), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.SdkEncDataOption.IsSet && threeDS2RequestData.SdkEncData == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.SdkEncData), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.SdkEphemPubKeyOption.IsSet && threeDS2RequestData.SdkEphemPubKey == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.SdkEphemPubKey), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.SdkReferenceNumberOption.IsSet && threeDS2RequestData.SdkReferenceNumber == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.SdkReferenceNumber), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.SdkTransIDOption.IsSet && threeDS2RequestData.SdkTransID == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.SdkTransID), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.SdkVersionOption.IsSet && threeDS2RequestData.SdkVersion == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.SdkVersion), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.ThreeDSCompIndOption.IsSet && threeDS2RequestData.ThreeDSCompInd == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.ThreeDSCompInd), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.ThreeDSRequestorAuthenticationIndOption.IsSet && threeDS2RequestData.ThreeDSRequestorAuthenticationInd == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.ThreeDSRequestorAuthenticationInd), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.ThreeDSRequestorAuthenticationInfoOption.IsSet && threeDS2RequestData.ThreeDSRequestorAuthenticationInfo == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.ThreeDSRequestorAuthenticationInfo), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.ThreeDSRequestorIDOption.IsSet && threeDS2RequestData.ThreeDSRequestorID == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.ThreeDSRequestorID), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.ThreeDSRequestorNameOption.IsSet && threeDS2RequestData.ThreeDSRequestorName == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.ThreeDSRequestorName), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.ThreeDSRequestorPriorAuthenticationInfoOption.IsSet && threeDS2RequestData.ThreeDSRequestorPriorAuthenticationInfo == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.ThreeDSRequestorPriorAuthenticationInfo), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.ThreeDSRequestorURLOption.IsSet && threeDS2RequestData.ThreeDSRequestorURL == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.ThreeDSRequestorURL), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.WhiteListStatusOption.IsSet && threeDS2RequestData.WhiteListStatus == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.WhiteListStatus), "Property is required for class ThreeDS2RequestData.");

            if (threeDS2RequestData.WorkPhoneOption.IsSet && threeDS2RequestData.WorkPhone == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData.WorkPhone), "Property is required for class ThreeDS2RequestData.");

            writer.WriteString("deviceChannel", threeDS2RequestData.DeviceChannel);

            if (threeDS2RequestData.AcctInfoOption.IsSet)
            {
                writer.WritePropertyName("acctInfo");
                JsonSerializer.Serialize(writer, threeDS2RequestData.AcctInfo, jsonSerializerOptions);
            }
            var acctTypeRawValue = ThreeDS2RequestData.AcctTypeEnumToJsonValue(threeDS2RequestData.AcctTypeOption.Value.Value);
            writer.WriteString("acctType", acctTypeRawValue);
            if (threeDS2RequestData.AcquirerBINOption.IsSet)
                writer.WriteString("acquirerBIN", threeDS2RequestData.AcquirerBIN);

            if (threeDS2RequestData.AcquirerMerchantIDOption.IsSet)
                writer.WriteString("acquirerMerchantID", threeDS2RequestData.AcquirerMerchantID);

            var addrMatchRawValue = ThreeDS2RequestData.AddrMatchEnumToJsonValue(threeDS2RequestData.AddrMatchOption.Value.Value);
            writer.WriteString("addrMatch", addrMatchRawValue);
            if (threeDS2RequestData.AuthenticationOnlyOption.IsSet)
                writer.WriteBoolean("authenticationOnly", threeDS2RequestData.AuthenticationOnlyOption.Value.Value);

            var challengeIndicatorRawValue = ThreeDS2RequestData.ChallengeIndicatorEnumToJsonValue(threeDS2RequestData.ChallengeIndicatorOption.Value.Value);
            writer.WriteString("challengeIndicator", challengeIndicatorRawValue);
            if (threeDS2RequestData.DeviceRenderOptionsOption.IsSet)
            {
                writer.WritePropertyName("deviceRenderOptions");
                JsonSerializer.Serialize(writer, threeDS2RequestData.DeviceRenderOptions, jsonSerializerOptions);
            }
            if (threeDS2RequestData.HomePhoneOption.IsSet)
            {
                writer.WritePropertyName("homePhone");
                JsonSerializer.Serialize(writer, threeDS2RequestData.HomePhone, jsonSerializerOptions);
            }
            if (threeDS2RequestData.MccOption.IsSet)
                writer.WriteString("mcc", threeDS2RequestData.Mcc);

            if (threeDS2RequestData.MerchantNameOption.IsSet)
                writer.WriteString("merchantName", threeDS2RequestData.MerchantName);

            if (threeDS2RequestData.MessageVersionOption.IsSet)
                writer.WriteString("messageVersion", threeDS2RequestData.MessageVersion);

            if (threeDS2RequestData.MobilePhoneOption.IsSet)
            {
                writer.WritePropertyName("mobilePhone");
                JsonSerializer.Serialize(writer, threeDS2RequestData.MobilePhone, jsonSerializerOptions);
            }
            if (threeDS2RequestData.NotificationURLOption.IsSet)
                writer.WriteString("notificationURL", threeDS2RequestData.NotificationURL);

            if (threeDS2RequestData.PayTokenIndOption.IsSet)
                writer.WriteBoolean("payTokenInd", threeDS2RequestData.PayTokenIndOption.Value.Value);

            if (threeDS2RequestData.PaymentAuthenticationUseCaseOption.IsSet)
                writer.WriteString("paymentAuthenticationUseCase", threeDS2RequestData.PaymentAuthenticationUseCase);

            if (threeDS2RequestData.PurchaseInstalDataOption.IsSet)
                writer.WriteString("purchaseInstalData", threeDS2RequestData.PurchaseInstalData);

            if (threeDS2RequestData.RecurringExpiryOption.IsSet)
                writer.WriteString("recurringExpiry", threeDS2RequestData.RecurringExpiry);

            if (threeDS2RequestData.RecurringFrequencyOption.IsSet)
                writer.WriteString("recurringFrequency", threeDS2RequestData.RecurringFrequency);

            if (threeDS2RequestData.SdkAppIDOption.IsSet)
                writer.WriteString("sdkAppID", threeDS2RequestData.SdkAppID);

            if (threeDS2RequestData.SdkEncDataOption.IsSet)
                writer.WriteString("sdkEncData", threeDS2RequestData.SdkEncData);

            if (threeDS2RequestData.SdkEphemPubKeyOption.IsSet)
            {
                writer.WritePropertyName("sdkEphemPubKey");
                JsonSerializer.Serialize(writer, threeDS2RequestData.SdkEphemPubKey, jsonSerializerOptions);
            }
            if (threeDS2RequestData.SdkMaxTimeoutOption.IsSet)
                writer.WriteNumber("sdkMaxTimeout", threeDS2RequestData.SdkMaxTimeoutOption.Value.Value);

            if (threeDS2RequestData.SdkReferenceNumberOption.IsSet)
                writer.WriteString("sdkReferenceNumber", threeDS2RequestData.SdkReferenceNumber);

            if (threeDS2RequestData.SdkTransIDOption.IsSet)
                writer.WriteString("sdkTransID", threeDS2RequestData.SdkTransID);

            if (threeDS2RequestData.SdkVersionOption.IsSet)
                writer.WriteString("sdkVersion", threeDS2RequestData.SdkVersion);

            if (threeDS2RequestData.ThreeDSCompIndOption.IsSet)
                writer.WriteString("threeDSCompInd", threeDS2RequestData.ThreeDSCompInd);

            if (threeDS2RequestData.ThreeDSRequestorAuthenticationIndOption.IsSet)
                writer.WriteString("threeDSRequestorAuthenticationInd", threeDS2RequestData.ThreeDSRequestorAuthenticationInd);

            if (threeDS2RequestData.ThreeDSRequestorAuthenticationInfoOption.IsSet)
            {
                writer.WritePropertyName("threeDSRequestorAuthenticationInfo");
                JsonSerializer.Serialize(writer, threeDS2RequestData.ThreeDSRequestorAuthenticationInfo, jsonSerializerOptions);
            }
            var threeDSRequestorChallengeIndRawValue = ThreeDS2RequestData.ThreeDSRequestorChallengeIndEnumToJsonValue(threeDS2RequestData.ThreeDSRequestorChallengeIndOption.Value.Value);
            writer.WriteString("threeDSRequestorChallengeInd", threeDSRequestorChallengeIndRawValue);
            if (threeDS2RequestData.ThreeDSRequestorIDOption.IsSet)
                writer.WriteString("threeDSRequestorID", threeDS2RequestData.ThreeDSRequestorID);

            if (threeDS2RequestData.ThreeDSRequestorNameOption.IsSet)
                writer.WriteString("threeDSRequestorName", threeDS2RequestData.ThreeDSRequestorName);

            if (threeDS2RequestData.ThreeDSRequestorPriorAuthenticationInfoOption.IsSet)
            {
                writer.WritePropertyName("threeDSRequestorPriorAuthenticationInfo");
                JsonSerializer.Serialize(writer, threeDS2RequestData.ThreeDSRequestorPriorAuthenticationInfo, jsonSerializerOptions);
            }
            if (threeDS2RequestData.ThreeDSRequestorURLOption.IsSet)
                writer.WriteString("threeDSRequestorURL", threeDS2RequestData.ThreeDSRequestorURL);

            var transTypeRawValue = ThreeDS2RequestData.TransTypeEnumToJsonValue(threeDS2RequestData.TransTypeOption.Value.Value);
            writer.WriteString("transType", transTypeRawValue);
            var transactionTypeRawValue = ThreeDS2RequestData.TransactionTypeEnumToJsonValue(threeDS2RequestData.TransactionTypeOption.Value.Value);
            writer.WriteString("transactionType", transactionTypeRawValue);
            if (threeDS2RequestData.WhiteListStatusOption.IsSet)
                writer.WriteString("whiteListStatus", threeDS2RequestData.WhiteListStatus);

            if (threeDS2RequestData.WorkPhoneOption.IsSet)
            {
                writer.WritePropertyName("workPhone");
                JsonSerializer.Serialize(writer, threeDS2RequestData.WorkPhone, jsonSerializerOptions);
            }
        }
    }
}
