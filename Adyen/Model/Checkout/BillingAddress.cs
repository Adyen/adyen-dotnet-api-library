// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// BillingAddress
    /// </summary>
    public partial class BillingAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingAddress" /> class.
        /// </summary>
        /// <param name="city">The name of the city. Maximum length: 3000 characters.</param>
        /// <param name="country">The two-character ISO-3166-1 alpha-2 country code. For example, **US**. &gt; If you don&#39;t know the country or are not collecting the country from the shopper, provide &#x60;country&#x60; as &#x60;ZZ&#x60;.</param>
        /// <param name="houseNumberOrName">The number or name of the house. Maximum length: 3000 characters.</param>
        /// <param name="postalCode">A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.</param>
        /// <param name="street">The name of the street. Maximum length: 3000 characters. &gt; The house number should not be included in this field; it should be separately provided via &#x60;houseNumberOrName&#x60;.</param>
        /// <param name="stateOrProvince">The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada. &gt; Required for the US and Canada.</param>
        [JsonConstructor]
        public BillingAddress(string city, string country, string houseNumberOrName, string postalCode, string street, Option<string> stateOrProvince = default)
        {
            City = city;
            Country = country;
            HouseNumberOrName = houseNumberOrName;
            PostalCode = postalCode;
            Street = street;
            StateOrProvinceOption = stateOrProvince;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name of the city. Maximum length: 3000 characters.
        /// </summary>
        /// <value>The name of the city. Maximum length: 3000 characters.</value>
        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// The two-character ISO-3166-1 alpha-2 country code. For example, **US**. &gt; If you don&#39;t know the country or are not collecting the country from the shopper, provide &#x60;country&#x60; as &#x60;ZZ&#x60;.
        /// </summary>
        /// <value>The two-character ISO-3166-1 alpha-2 country code. For example, **US**. &gt; If you don&#39;t know the country or are not collecting the country from the shopper, provide &#x60;country&#x60; as &#x60;ZZ&#x60;.</value>
        [JsonPropertyName("country")]
        public string Country { get; set; }

        /// <summary>
        /// The number or name of the house. Maximum length: 3000 characters.
        /// </summary>
        /// <value>The number or name of the house. Maximum length: 3000 characters.</value>
        [JsonPropertyName("houseNumberOrName")]
        public string HouseNumberOrName { get; set; }

        /// <summary>
        /// A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
        /// </summary>
        /// <value>A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.</value>
        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The name of the street. Maximum length: 3000 characters. &gt; The house number should not be included in this field; it should be separately provided via &#x60;houseNumberOrName&#x60;.
        /// </summary>
        /// <value>The name of the street. Maximum length: 3000 characters. &gt; The house number should not be included in this field; it should be separately provided via &#x60;houseNumberOrName&#x60;.</value>
        [JsonPropertyName("street")]
        public string Street { get; set; }

        /// <summary>
        /// Used to track the state of StateOrProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StateOrProvinceOption { get; private set; }

        /// <summary>
        /// The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada. &gt; Required for the US and Canada.
        /// </summary>
        /// <value>The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada. &gt; Required for the US and Canada.</value>
        [JsonPropertyName("stateOrProvince")]
        public string StateOrProvince { get { return this.StateOrProvinceOption; } set { this.StateOrProvinceOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BillingAddress {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  HouseNumberOrName: ").Append(HouseNumberOrName).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  StateOrProvince: ").Append(StateOrProvince).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // City (string) maxLength
            if (this.City != null && this.City.Length > 3000)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 3000.", new [] { "City" });
            }

            // HouseNumberOrName (string) maxLength
            if (this.HouseNumberOrName != null && this.HouseNumberOrName.Length > 3000)
            {
                yield return new ValidationResult("Invalid value for HouseNumberOrName, length must be less than 3000.", new [] { "HouseNumberOrName" });
            }

            // Street (string) maxLength
            if (this.Street != null && this.Street.Length > 3000)
            {
                yield return new ValidationResult("Invalid value for Street, length must be less than 3000.", new [] { "Street" });
            }

            // StateOrProvince (string) maxLength
            if (this.StateOrProvince != null && this.StateOrProvince.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for StateOrProvince, length must be less than 1000.", new [] { "StateOrProvince" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BillingAddress" />
    /// </summary>
    public class BillingAddressJsonConverter : JsonConverter<BillingAddress>
    {
        /// <summary>
        /// Deserializes json to <see cref="BillingAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BillingAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> city = default;
            Option<string> country = default;
            Option<string> houseNumberOrName = default;
            Option<string> postalCode = default;
            Option<string> street = default;
            Option<string> stateOrProvince = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "city":
                            city = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "country":
                            country = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "houseNumberOrName":
                            houseNumberOrName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "postalCode":
                            postalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "street":
                            street = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "stateOrProvince":
                            stateOrProvince = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!city.IsSet)
                throw new ArgumentException("Property is required for class BillingAddress.", nameof(city));

            if (!country.IsSet)
                throw new ArgumentException("Property is required for class BillingAddress.", nameof(country));

            if (!houseNumberOrName.IsSet)
                throw new ArgumentException("Property is required for class BillingAddress.", nameof(houseNumberOrName));

            if (!postalCode.IsSet)
                throw new ArgumentException("Property is required for class BillingAddress.", nameof(postalCode));

            if (!street.IsSet)
                throw new ArgumentException("Property is required for class BillingAddress.", nameof(street));

            if (city.IsSet && city.Value == null)
                throw new ArgumentNullException(nameof(city), "Property is not nullable for class BillingAddress.");

            if (country.IsSet && country.Value == null)
                throw new ArgumentNullException(nameof(country), "Property is not nullable for class BillingAddress.");

            if (houseNumberOrName.IsSet && houseNumberOrName.Value == null)
                throw new ArgumentNullException(nameof(houseNumberOrName), "Property is not nullable for class BillingAddress.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class BillingAddress.");

            if (street.IsSet && street.Value == null)
                throw new ArgumentNullException(nameof(street), "Property is not nullable for class BillingAddress.");

            if (stateOrProvince.IsSet && stateOrProvince.Value == null)
                throw new ArgumentNullException(nameof(stateOrProvince), "Property is not nullable for class BillingAddress.");

            return new BillingAddress(city.Value, country.Value, houseNumberOrName.Value, postalCode.Value, street.Value, stateOrProvince);
        }

        /// <summary>
        /// Serializes a <see cref="BillingAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billingAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BillingAddress billingAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, billingAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BillingAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billingAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BillingAddress billingAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (billingAddress.City == null)
                throw new ArgumentNullException(nameof(billingAddress.City), "Property is required for class BillingAddress.");

            if (billingAddress.Country == null)
                throw new ArgumentNullException(nameof(billingAddress.Country), "Property is required for class BillingAddress.");

            if (billingAddress.HouseNumberOrName == null)
                throw new ArgumentNullException(nameof(billingAddress.HouseNumberOrName), "Property is required for class BillingAddress.");

            if (billingAddress.PostalCode == null)
                throw new ArgumentNullException(nameof(billingAddress.PostalCode), "Property is required for class BillingAddress.");

            if (billingAddress.Street == null)
                throw new ArgumentNullException(nameof(billingAddress.Street), "Property is required for class BillingAddress.");

            if (billingAddress.StateOrProvinceOption.IsSet && billingAddress.StateOrProvince == null)
                throw new ArgumentNullException(nameof(billingAddress.StateOrProvince), "Property is required for class BillingAddress.");

            writer.WriteString("city", billingAddress.City);

            writer.WriteString("country", billingAddress.Country);

            writer.WriteString("houseNumberOrName", billingAddress.HouseNumberOrName);

            writer.WriteString("postalCode", billingAddress.PostalCode);

            writer.WriteString("street", billingAddress.Street);

            if (billingAddress.StateOrProvinceOption.IsSet)
                writer.WriteString("stateOrProvince", billingAddress.StateOrProvince);
        }
    }
}
