// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// SessionResultResponse
    /// </summary>
    public partial class SessionResultResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionResultResponse" /> class.
        /// </summary>
        /// <param name="additionalData">Contains additional information about the payment. Some fields are included only if you enable them. To enable these fields in your Customer Area, go to **Developers** &gt; **Additional data**.</param>
        /// <param name="id">A unique identifier of the session.</param>
        /// <param name="payments">A list of all authorised payments done for this session.</param>
        /// <param name="reference">The unique reference that you provided in the original &#x60;/sessions&#x60; request. This identifies the payment and is used in all communication with you about the payment status.</param>
        /// <param name="status">The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values: * **completed**: the shopper completed the payment, and the payment was authorized. * **paymentPending**: the shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow, like voucher payments where the shopper completes the payment in a physical shop. * **refused**: the session has been refused, because of too many refused payment attempts. The shopper can no longer complete the payment with this session. * **canceled**: the shopper canceled the payment. * **expired**: the session expired. The shopper can no longer complete the payment with this session. By default, the session expires one hour after it is created.</param>
        [JsonConstructor]
        public SessionResultResponse(Option<Dictionary<string, string>> additionalData = default, Option<string> id = default, Option<List<Payment>> payments = default, Option<string> reference = default, Option<StatusEnum?> status = default)
        {
            AdditionalDataOption = additionalData;
            IdOption = id;
            PaymentsOption = payments;
            ReferenceOption = reference;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values: * **completed**: the shopper completed the payment, and the payment was authorized. * **paymentPending**: the shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow, like voucher payments where the shopper completes the payment in a physical shop. * **refused**: the session has been refused, because of too many refused payment attempts. The shopper can no longer complete the payment with this session. * **canceled**: the shopper canceled the payment. * **expired**: the session expired. The shopper can no longer complete the payment with this session. By default, the session expires one hour after it is created.
        /// </summary>
        /// <value>The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values: * **completed**: the shopper completed the payment, and the payment was authorized. * **paymentPending**: the shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow, like voucher payments where the shopper completes the payment in a physical shop. * **refused**: the session has been refused, because of too many refused payment attempts. The shopper can no longer complete the payment with this session. * **canceled**: the shopper canceled the payment. * **expired**: the session expired. The shopper can no longer complete the payment with this session. By default, the session expires one hour after it is created.</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            Active = 1,

            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            Canceled = 2,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            Completed = 3,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            Expired = 4,

            /// <summary>
            /// Enum PaymentPending for value: paymentPending
            /// </summary>
            PaymentPending = 5,

            /// <summary>
            /// Enum Refused for value: refused
            /// </summary>
            Refused = 6
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("active"))
                return StatusEnum.Active;

            if (value.Equals("canceled"))
                return StatusEnum.Canceled;

            if (value.Equals("completed"))
                return StatusEnum.Completed;

            if (value.Equals("expired"))
                return StatusEnum.Expired;

            if (value.Equals("paymentPending"))
                return StatusEnum.PaymentPending;

            if (value.Equals("refused"))
                return StatusEnum.Refused;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("active"))
                return StatusEnum.Active;

            if (value.Equals("canceled"))
                return StatusEnum.Canceled;

            if (value.Equals("completed"))
                return StatusEnum.Completed;

            if (value.Equals("expired"))
                return StatusEnum.Expired;

            if (value.Equals("paymentPending"))
                return StatusEnum.PaymentPending;

            if (value.Equals("refused"))
                return StatusEnum.Refused;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == StatusEnum.Active)
                return "active";

            if (value == StatusEnum.Canceled)
                return "canceled";

            if (value == StatusEnum.Completed)
                return "completed";

            if (value == StatusEnum.Expired)
                return "expired";

            if (value == StatusEnum.PaymentPending)
                return "paymentPending";

            if (value == StatusEnum.Refused)
                return "refused";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values: * **completed**: the shopper completed the payment, and the payment was authorized. * **paymentPending**: the shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow, like voucher payments where the shopper completes the payment in a physical shop. * **refused**: the session has been refused, because of too many refused payment attempts. The shopper can no longer complete the payment with this session. * **canceled**: the shopper canceled the payment. * **expired**: the session expired. The shopper can no longer complete the payment with this session. By default, the session expires one hour after it is created.
        /// </summary>
        /// <value>The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values: * **completed**: the shopper completed the payment, and the payment was authorized. * **paymentPending**: the shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow, like voucher payments where the shopper completes the payment in a physical shop. * **refused**: the session has been refused, because of too many refused payment attempts. The shopper can no longer complete the payment with this session. * **canceled**: the shopper canceled the payment. * **expired**: the session expired. The shopper can no longer complete the payment with this session. By default, the session expires one hour after it is created.</value>
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<StatusEnum?>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> AdditionalDataOption { get; private set; }

        /// <summary>
        /// Contains additional information about the payment. Some fields are included only if you enable them. To enable these fields in your Customer Area, go to **Developers** &gt; **Additional data**.
        /// </summary>
        /// <value>Contains additional information about the payment. Some fields are included only if you enable them. To enable these fields in your Customer Area, go to **Developers** &gt; **Additional data**.</value>
        [JsonPropertyName("additionalData")]
        public Dictionary<string, string> AdditionalData { get { return this.AdditionalDataOption; } set { this.AdditionalDataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// A unique identifier of the session.
        /// </summary>
        /// <value>A unique identifier of the session.</value>
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Payments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Payment>> PaymentsOption { get; private set; }

        /// <summary>
        /// A list of all authorised payments done for this session.
        /// </summary>
        /// <value>A list of all authorised payments done for this session.</value>
        [JsonPropertyName("payments")]
        public List<Payment> Payments { get { return this.PaymentsOption; } set { this.PaymentsOption = new Option<List<Payment>>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// The unique reference that you provided in the original &#x60;/sessions&#x60; request. This identifies the payment and is used in all communication with you about the payment status.
        /// </summary>
        /// <value>The unique reference that you provided in the original &#x60;/sessions&#x60; request. This identifies the payment and is used in all communication with you about the payment status.</value>
        [JsonPropertyName("reference")]
        public string Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionResultResponse {\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SessionResultResponse" />
    /// </summary>
    public class SessionResultResponseJsonConverter : JsonConverter<SessionResultResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SessionResultResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SessionResultResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, string>> additionalData = default;
            Option<string> id = default;
            Option<List<Payment>> payments = default;
            Option<string> reference = default;
            Option<SessionResultResponse.StatusEnum?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "additionalData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalData = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "payments":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payments = new Option<List<Payment>>(JsonSerializer.Deserialize<List<Payment>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<SessionResultResponse.StatusEnum?>(SessionResultResponse.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (additionalData.IsSet && additionalData.Value == null)
                throw new ArgumentNullException(nameof(additionalData), "Property is not nullable for class SessionResultResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SessionResultResponse.");

            if (payments.IsSet && payments.Value == null)
                throw new ArgumentNullException(nameof(payments), "Property is not nullable for class SessionResultResponse.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class SessionResultResponse.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class SessionResultResponse.");

            return new SessionResultResponse(additionalData, id, payments, reference, status);
        }

        /// <summary>
        /// Serializes a <see cref="SessionResultResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sessionResultResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SessionResultResponse sessionResultResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sessionResultResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SessionResultResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sessionResultResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SessionResultResponse sessionResultResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sessionResultResponse.AdditionalDataOption.IsSet && sessionResultResponse.AdditionalData == null)
                throw new ArgumentNullException(nameof(sessionResultResponse.AdditionalData), "Property is required for class SessionResultResponse.");

            if (sessionResultResponse.IdOption.IsSet && sessionResultResponse.Id == null)
                throw new ArgumentNullException(nameof(sessionResultResponse.Id), "Property is required for class SessionResultResponse.");

            if (sessionResultResponse.PaymentsOption.IsSet && sessionResultResponse.Payments == null)
                throw new ArgumentNullException(nameof(sessionResultResponse.Payments), "Property is required for class SessionResultResponse.");

            if (sessionResultResponse.ReferenceOption.IsSet && sessionResultResponse.Reference == null)
                throw new ArgumentNullException(nameof(sessionResultResponse.Reference), "Property is required for class SessionResultResponse.");

            if (sessionResultResponse.AdditionalDataOption.IsSet)
            {
                writer.WritePropertyName("additionalData");
                JsonSerializer.Serialize(writer, sessionResultResponse.AdditionalData, jsonSerializerOptions);
            }
            if (sessionResultResponse.IdOption.IsSet)
                writer.WriteString("id", sessionResultResponse.Id);

            if (sessionResultResponse.PaymentsOption.IsSet)
            {
                writer.WritePropertyName("payments");
                JsonSerializer.Serialize(writer, sessionResultResponse.Payments, jsonSerializerOptions);
            }
            if (sessionResultResponse.ReferenceOption.IsSet)
                writer.WriteString("reference", sessionResultResponse.Reference);

            var statusRawValue = SessionResultResponse.StatusEnumToJsonValue(sessionResultResponse.StatusOption.Value.Value);
            writer.WriteString("status", statusRawValue);
        }
    }
}
