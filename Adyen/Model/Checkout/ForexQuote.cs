// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ForexQuote
    /// </summary>
    public partial class ForexQuote : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForexQuote" /> class.
        /// </summary>
        /// <param name="basePoints">The base points.</param>
        /// <param name="validTill">The date until which the forex quote is valid.</param>
        /// <param name="account">The account name.</param>
        /// <param name="accountType">The account type.</param>
        /// <param name="baseAmount">baseAmount</param>
        /// <param name="buy">buy</param>
        /// <param name="interbank">interbank</param>
        /// <param name="reference">The reference assigned to the forex quote request.</param>
        /// <param name="sell">sell</param>
        /// <param name="signature">The signature to validate the integrity.</param>
        /// <param name="source">The source of the forex quote.</param>
        /// <param name="type">The type of forex.</param>
        [JsonConstructor]
        public ForexQuote(int basePoints, DateTime validTill, Option<string> account = default, Option<string> accountType = default, Option<Amount> baseAmount = default, Option<Amount> buy = default, Option<Amount> interbank = default, Option<string> reference = default, Option<Amount> sell = default, Option<string> signature = default, Option<string> source = default, Option<string> type = default)
        {
            BasePoints = basePoints;
            ValidTill = validTill;
            AccountOption = account;
            AccountTypeOption = accountType;
            BaseAmountOption = baseAmount;
            BuyOption = buy;
            InterbankOption = interbank;
            ReferenceOption = reference;
            SellOption = sell;
            SignatureOption = signature;
            SourceOption = source;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The base points.
        /// </summary>
        /// <value>The base points.</value>
        [JsonPropertyName("basePoints")]
        public int BasePoints { get; set; }

        /// <summary>
        /// The date until which the forex quote is valid.
        /// </summary>
        /// <value>The date until which the forex quote is valid.</value>
        [JsonPropertyName("validTill")]
        public DateTime ValidTill { get; set; }

        /// <summary>
        /// Used to track the state of Account
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AccountOption { get; private set; }

        /// <summary>
        /// The account name.
        /// </summary>
        /// <value>The account name.</value>
        [JsonPropertyName("account")]
        public string Account { get { return this.AccountOption; } set { this.AccountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AccountType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AccountTypeOption { get; private set; }

        /// <summary>
        /// The account type.
        /// </summary>
        /// <value>The account type.</value>
        [JsonPropertyName("accountType")]
        public string AccountType { get { return this.AccountTypeOption; } set { this.AccountTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BaseAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> BaseAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets BaseAmount
        /// </summary>
        [JsonPropertyName("baseAmount")]
        public Amount BaseAmount { get { return this.BaseAmountOption; } set { this.BaseAmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of Buy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> BuyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Buy
        /// </summary>
        [JsonPropertyName("buy")]
        public Amount Buy { get { return this.BuyOption; } set { this.BuyOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of Interbank
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> InterbankOption { get; private set; }

        /// <summary>
        /// Gets or Sets Interbank
        /// </summary>
        [JsonPropertyName("interbank")]
        public Amount Interbank { get { return this.InterbankOption; } set { this.InterbankOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// The reference assigned to the forex quote request.
        /// </summary>
        /// <value>The reference assigned to the forex quote request.</value>
        [JsonPropertyName("reference")]
        public string Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Sell
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> SellOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sell
        /// </summary>
        [JsonPropertyName("sell")]
        public Amount Sell { get { return this.SellOption; } set { this.SellOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of Signature
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SignatureOption { get; private set; }

        /// <summary>
        /// The signature to validate the integrity.
        /// </summary>
        /// <value>The signature to validate the integrity.</value>
        [JsonPropertyName("signature")]
        public string Signature { get { return this.SignatureOption; } set { this.SignatureOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Source
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SourceOption { get; private set; }

        /// <summary>
        /// The source of the forex quote.
        /// </summary>
        /// <value>The source of the forex quote.</value>
        [JsonPropertyName("source")]
        public string Source { get { return this.SourceOption; } set { this.SourceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// The type of forex.
        /// </summary>
        /// <value>The type of forex.</value>
        [JsonPropertyName("type")]
        public string Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ForexQuote {\n");
            sb.Append("  BasePoints: ").Append(BasePoints).Append("\n");
            sb.Append("  ValidTill: ").Append(ValidTill).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  BaseAmount: ").Append(BaseAmount).Append("\n");
            sb.Append("  Buy: ").Append(Buy).Append("\n");
            sb.Append("  Interbank: ").Append(Interbank).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Sell: ").Append(Sell).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ForexQuote" />
    /// </summary>
    public class ForexQuoteJsonConverter : JsonConverter<ForexQuote>
    {
        /// <summary>
        /// The format to use to serialize ValidTill
        /// </summary>
        public static string ValidTillFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ForexQuote" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ForexQuote Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> basePoints = default;
            Option<DateTime?> validTill = default;
            Option<string> account = default;
            Option<string> accountType = default;
            Option<Amount> baseAmount = default;
            Option<Amount> buy = default;
            Option<Amount> interbank = default;
            Option<string> reference = default;
            Option<Amount> sell = default;
            Option<string> signature = default;
            Option<string> source = default;
            Option<string> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "basePoints":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                basePoints = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "validTill":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validTill = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "account":
                            account = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "accountType":
                            accountType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "baseAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                baseAmount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "buy":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                buy = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "interbank":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                interbank = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sell":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sell = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "signature":
                            signature = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "source":
                            source = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!basePoints.IsSet)
                throw new ArgumentException("Property is required for class ForexQuote.", nameof(basePoints));

            if (!validTill.IsSet)
                throw new ArgumentException("Property is required for class ForexQuote.", nameof(validTill));

            if (basePoints.IsSet && basePoints.Value == null)
                throw new ArgumentNullException(nameof(basePoints), "Property is not nullable for class ForexQuote.");

            if (validTill.IsSet && validTill.Value == null)
                throw new ArgumentNullException(nameof(validTill), "Property is not nullable for class ForexQuote.");

            if (account.IsSet && account.Value == null)
                throw new ArgumentNullException(nameof(account), "Property is not nullable for class ForexQuote.");

            if (accountType.IsSet && accountType.Value == null)
                throw new ArgumentNullException(nameof(accountType), "Property is not nullable for class ForexQuote.");

            if (baseAmount.IsSet && baseAmount.Value == null)
                throw new ArgumentNullException(nameof(baseAmount), "Property is not nullable for class ForexQuote.");

            if (buy.IsSet && buy.Value == null)
                throw new ArgumentNullException(nameof(buy), "Property is not nullable for class ForexQuote.");

            if (interbank.IsSet && interbank.Value == null)
                throw new ArgumentNullException(nameof(interbank), "Property is not nullable for class ForexQuote.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class ForexQuote.");

            if (sell.IsSet && sell.Value == null)
                throw new ArgumentNullException(nameof(sell), "Property is not nullable for class ForexQuote.");

            if (signature.IsSet && signature.Value == null)
                throw new ArgumentNullException(nameof(signature), "Property is not nullable for class ForexQuote.");

            if (source.IsSet && source.Value == null)
                throw new ArgumentNullException(nameof(source), "Property is not nullable for class ForexQuote.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ForexQuote.");

            return new ForexQuote(basePoints.Value.Value, validTill.Value.Value, account, accountType, baseAmount, buy, interbank, reference, sell, signature, source, type);
        }

        /// <summary>
        /// Serializes a <see cref="ForexQuote" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="forexQuote"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ForexQuote forexQuote, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, forexQuote, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ForexQuote" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="forexQuote"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ForexQuote forexQuote, JsonSerializerOptions jsonSerializerOptions)
        {
            if (forexQuote.AccountOption.IsSet && forexQuote.Account == null)
                throw new ArgumentNullException(nameof(forexQuote.Account), "Property is required for class ForexQuote.");

            if (forexQuote.AccountTypeOption.IsSet && forexQuote.AccountType == null)
                throw new ArgumentNullException(nameof(forexQuote.AccountType), "Property is required for class ForexQuote.");

            if (forexQuote.BaseAmountOption.IsSet && forexQuote.BaseAmount == null)
                throw new ArgumentNullException(nameof(forexQuote.BaseAmount), "Property is required for class ForexQuote.");

            if (forexQuote.BuyOption.IsSet && forexQuote.Buy == null)
                throw new ArgumentNullException(nameof(forexQuote.Buy), "Property is required for class ForexQuote.");

            if (forexQuote.InterbankOption.IsSet && forexQuote.Interbank == null)
                throw new ArgumentNullException(nameof(forexQuote.Interbank), "Property is required for class ForexQuote.");

            if (forexQuote.ReferenceOption.IsSet && forexQuote.Reference == null)
                throw new ArgumentNullException(nameof(forexQuote.Reference), "Property is required for class ForexQuote.");

            if (forexQuote.SellOption.IsSet && forexQuote.Sell == null)
                throw new ArgumentNullException(nameof(forexQuote.Sell), "Property is required for class ForexQuote.");

            if (forexQuote.SignatureOption.IsSet && forexQuote.Signature == null)
                throw new ArgumentNullException(nameof(forexQuote.Signature), "Property is required for class ForexQuote.");

            if (forexQuote.SourceOption.IsSet && forexQuote.Source == null)
                throw new ArgumentNullException(nameof(forexQuote.Source), "Property is required for class ForexQuote.");

            if (forexQuote.TypeOption.IsSet && forexQuote.Type == null)
                throw new ArgumentNullException(nameof(forexQuote.Type), "Property is required for class ForexQuote.");

            writer.WriteNumber("basePoints", forexQuote.BasePoints);

            writer.WriteString("validTill", forexQuote.ValidTill.ToString(ValidTillFormat));

            if (forexQuote.AccountOption.IsSet)
                writer.WriteString("account", forexQuote.Account);

            if (forexQuote.AccountTypeOption.IsSet)
                writer.WriteString("accountType", forexQuote.AccountType);

            if (forexQuote.BaseAmountOption.IsSet)
            {
                writer.WritePropertyName("baseAmount");
                JsonSerializer.Serialize(writer, forexQuote.BaseAmount, jsonSerializerOptions);
            }
            if (forexQuote.BuyOption.IsSet)
            {
                writer.WritePropertyName("buy");
                JsonSerializer.Serialize(writer, forexQuote.Buy, jsonSerializerOptions);
            }
            if (forexQuote.InterbankOption.IsSet)
            {
                writer.WritePropertyName("interbank");
                JsonSerializer.Serialize(writer, forexQuote.Interbank, jsonSerializerOptions);
            }
            if (forexQuote.ReferenceOption.IsSet)
                writer.WriteString("reference", forexQuote.Reference);

            if (forexQuote.SellOption.IsSet)
            {
                writer.WritePropertyName("sell");
                JsonSerializer.Serialize(writer, forexQuote.Sell, jsonSerializerOptions);
            }
            if (forexQuote.SignatureOption.IsSet)
                writer.WriteString("signature", forexQuote.Signature);

            if (forexQuote.SourceOption.IsSet)
                writer.WriteString("source", forexQuote.Source);

            if (forexQuote.TypeOption.IsSet)
                writer.WriteString("type", forexQuote.Type);
        }
    }
}
