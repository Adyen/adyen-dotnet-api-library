// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataTemporaryServices
    /// </summary>
    public partial class AdditionalDataTemporaryServices : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataTemporaryServices" /> class.
        /// </summary>
        /// <param name="enhancedSchemeDataCustomerReference">The customer code, if supplied by a customer. * Encoding: ASCII * maxLength: 25</param>
        /// <param name="enhancedSchemeDataEmployeeName">The name or ID of the person working in a temporary capacity. * maxLength: 40.   * Must not be all spaces.  *Must not be all zeros.</param>
        /// <param name="enhancedSchemeDataJobDescription">The job description of the person working in a temporary capacity. * maxLength: 40  * Must not be all spaces.  *Must not be all zeros.</param>
        /// <param name="enhancedSchemeDataRegularHoursRate">The amount paid for regular hours worked, [minor units](https://docs.adyen.com/development-resources/currency-codes). * maxLength: 7 * Must not be empty * Can be all zeros</param>
        /// <param name="enhancedSchemeDataRegularHoursWorked">The hours worked. * maxLength: 7 * Must not be empty * Can be all zeros</param>
        /// <param name="enhancedSchemeDataRequestName">The name of the person requesting temporary services. * maxLength: 40 * Must not be all zeros * Must not be all spaces</param>
        /// <param name="enhancedSchemeDataTempStartDate">The billing period start date. * Format: ddMMyy * maxLength: 6</param>
        /// <param name="enhancedSchemeDataTempWeekEnding">The billing period end date. * Format: ddMMyy * maxLength: 6</param>
        /// <param name="enhancedSchemeDataTotalTaxAmount">The total tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). For example, 2000 means USD 20.00 * maxLength: 12</param>
        [JsonConstructor]
        public AdditionalDataTemporaryServices(Option<string> enhancedSchemeDataCustomerReference = default, Option<string> enhancedSchemeDataEmployeeName = default, Option<string> enhancedSchemeDataJobDescription = default, Option<string> enhancedSchemeDataRegularHoursRate = default, Option<string> enhancedSchemeDataRegularHoursWorked = default, Option<string> enhancedSchemeDataRequestName = default, Option<string> enhancedSchemeDataTempStartDate = default, Option<string> enhancedSchemeDataTempWeekEnding = default, Option<string> enhancedSchemeDataTotalTaxAmount = default)
        {
            EnhancedSchemeDataCustomerReferenceOption = enhancedSchemeDataCustomerReference;
            EnhancedSchemeDataEmployeeNameOption = enhancedSchemeDataEmployeeName;
            EnhancedSchemeDataJobDescriptionOption = enhancedSchemeDataJobDescription;
            EnhancedSchemeDataRegularHoursRateOption = enhancedSchemeDataRegularHoursRate;
            EnhancedSchemeDataRegularHoursWorkedOption = enhancedSchemeDataRegularHoursWorked;
            EnhancedSchemeDataRequestNameOption = enhancedSchemeDataRequestName;
            EnhancedSchemeDataTempStartDateOption = enhancedSchemeDataTempStartDate;
            EnhancedSchemeDataTempWeekEndingOption = enhancedSchemeDataTempWeekEnding;
            EnhancedSchemeDataTotalTaxAmountOption = enhancedSchemeDataTotalTaxAmount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataCustomerReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataCustomerReferenceOption { get; private set; }

        /// <summary>
        /// The customer code, if supplied by a customer. * Encoding: ASCII * maxLength: 25
        /// </summary>
        /// <value>The customer code, if supplied by a customer. * Encoding: ASCII * maxLength: 25</value>
        [JsonPropertyName("enhancedSchemeData.customerReference")]
        public string EnhancedSchemeDataCustomerReference { get { return this.EnhancedSchemeDataCustomerReferenceOption; } set { this.EnhancedSchemeDataCustomerReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataEmployeeName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataEmployeeNameOption { get; private set; }

        /// <summary>
        /// The name or ID of the person working in a temporary capacity. * maxLength: 40.   * Must not be all spaces.  *Must not be all zeros.
        /// </summary>
        /// <value>The name or ID of the person working in a temporary capacity. * maxLength: 40.   * Must not be all spaces.  *Must not be all zeros.</value>
        [JsonPropertyName("enhancedSchemeData.employeeName")]
        public string EnhancedSchemeDataEmployeeName { get { return this.EnhancedSchemeDataEmployeeNameOption; } set { this.EnhancedSchemeDataEmployeeNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataJobDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataJobDescriptionOption { get; private set; }

        /// <summary>
        /// The job description of the person working in a temporary capacity. * maxLength: 40  * Must not be all spaces.  *Must not be all zeros.
        /// </summary>
        /// <value>The job description of the person working in a temporary capacity. * maxLength: 40  * Must not be all spaces.  *Must not be all zeros.</value>
        [JsonPropertyName("enhancedSchemeData.jobDescription")]
        public string EnhancedSchemeDataJobDescription { get { return this.EnhancedSchemeDataJobDescriptionOption; } set { this.EnhancedSchemeDataJobDescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataRegularHoursRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataRegularHoursRateOption { get; private set; }

        /// <summary>
        /// The amount paid for regular hours worked, [minor units](https://docs.adyen.com/development-resources/currency-codes). * maxLength: 7 * Must not be empty * Can be all zeros
        /// </summary>
        /// <value>The amount paid for regular hours worked, [minor units](https://docs.adyen.com/development-resources/currency-codes). * maxLength: 7 * Must not be empty * Can be all zeros</value>
        [JsonPropertyName("enhancedSchemeData.regularHoursRate")]
        public string EnhancedSchemeDataRegularHoursRate { get { return this.EnhancedSchemeDataRegularHoursRateOption; } set { this.EnhancedSchemeDataRegularHoursRateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataRegularHoursWorked
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataRegularHoursWorkedOption { get; private set; }

        /// <summary>
        /// The hours worked. * maxLength: 7 * Must not be empty * Can be all zeros
        /// </summary>
        /// <value>The hours worked. * maxLength: 7 * Must not be empty * Can be all zeros</value>
        [JsonPropertyName("enhancedSchemeData.regularHoursWorked")]
        public string EnhancedSchemeDataRegularHoursWorked { get { return this.EnhancedSchemeDataRegularHoursWorkedOption; } set { this.EnhancedSchemeDataRegularHoursWorkedOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataRequestName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataRequestNameOption { get; private set; }

        /// <summary>
        /// The name of the person requesting temporary services. * maxLength: 40 * Must not be all zeros * Must not be all spaces
        /// </summary>
        /// <value>The name of the person requesting temporary services. * maxLength: 40 * Must not be all zeros * Must not be all spaces</value>
        [JsonPropertyName("enhancedSchemeData.requestName")]
        public string EnhancedSchemeDataRequestName { get { return this.EnhancedSchemeDataRequestNameOption; } set { this.EnhancedSchemeDataRequestNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataTempStartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataTempStartDateOption { get; private set; }

        /// <summary>
        /// The billing period start date. * Format: ddMMyy * maxLength: 6
        /// </summary>
        /// <value>The billing period start date. * Format: ddMMyy * maxLength: 6</value>
        [JsonPropertyName("enhancedSchemeData.tempStartDate")]
        public string EnhancedSchemeDataTempStartDate { get { return this.EnhancedSchemeDataTempStartDateOption; } set { this.EnhancedSchemeDataTempStartDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataTempWeekEnding
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataTempWeekEndingOption { get; private set; }

        /// <summary>
        /// The billing period end date. * Format: ddMMyy * maxLength: 6
        /// </summary>
        /// <value>The billing period end date. * Format: ddMMyy * maxLength: 6</value>
        [JsonPropertyName("enhancedSchemeData.tempWeekEnding")]
        public string EnhancedSchemeDataTempWeekEnding { get { return this.EnhancedSchemeDataTempWeekEndingOption; } set { this.EnhancedSchemeDataTempWeekEndingOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnhancedSchemeDataTotalTaxAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnhancedSchemeDataTotalTaxAmountOption { get; private set; }

        /// <summary>
        /// The total tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). For example, 2000 means USD 20.00 * maxLength: 12
        /// </summary>
        /// <value>The total tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). For example, 2000 means USD 20.00 * maxLength: 12</value>
        [JsonPropertyName("enhancedSchemeData.totalTaxAmount")]
        public string EnhancedSchemeDataTotalTaxAmount { get { return this.EnhancedSchemeDataTotalTaxAmountOption; } set { this.EnhancedSchemeDataTotalTaxAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataTemporaryServices {\n");
            sb.Append("  EnhancedSchemeDataCustomerReference: ").Append(EnhancedSchemeDataCustomerReference).Append("\n");
            sb.Append("  EnhancedSchemeDataEmployeeName: ").Append(EnhancedSchemeDataEmployeeName).Append("\n");
            sb.Append("  EnhancedSchemeDataJobDescription: ").Append(EnhancedSchemeDataJobDescription).Append("\n");
            sb.Append("  EnhancedSchemeDataRegularHoursRate: ").Append(EnhancedSchemeDataRegularHoursRate).Append("\n");
            sb.Append("  EnhancedSchemeDataRegularHoursWorked: ").Append(EnhancedSchemeDataRegularHoursWorked).Append("\n");
            sb.Append("  EnhancedSchemeDataRequestName: ").Append(EnhancedSchemeDataRequestName).Append("\n");
            sb.Append("  EnhancedSchemeDataTempStartDate: ").Append(EnhancedSchemeDataTempStartDate).Append("\n");
            sb.Append("  EnhancedSchemeDataTempWeekEnding: ").Append(EnhancedSchemeDataTempWeekEnding).Append("\n");
            sb.Append("  EnhancedSchemeDataTotalTaxAmount: ").Append(EnhancedSchemeDataTotalTaxAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalDataTemporaryServices" />
    /// </summary>
    public class AdditionalDataTemporaryServicesJsonConverter : JsonConverter<AdditionalDataTemporaryServices>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalDataTemporaryServices" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalDataTemporaryServices Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> enhancedSchemeDataCustomerReference = default;
            Option<string> enhancedSchemeDataEmployeeName = default;
            Option<string> enhancedSchemeDataJobDescription = default;
            Option<string> enhancedSchemeDataRegularHoursRate = default;
            Option<string> enhancedSchemeDataRegularHoursWorked = default;
            Option<string> enhancedSchemeDataRequestName = default;
            Option<string> enhancedSchemeDataTempStartDate = default;
            Option<string> enhancedSchemeDataTempWeekEnding = default;
            Option<string> enhancedSchemeDataTotalTaxAmount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "enhancedSchemeData.customerReference":
                            enhancedSchemeDataCustomerReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.employeeName":
                            enhancedSchemeDataEmployeeName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.jobDescription":
                            enhancedSchemeDataJobDescription = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.regularHoursRate":
                            enhancedSchemeDataRegularHoursRate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.regularHoursWorked":
                            enhancedSchemeDataRegularHoursWorked = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.requestName":
                            enhancedSchemeDataRequestName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.tempStartDate":
                            enhancedSchemeDataTempStartDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.tempWeekEnding":
                            enhancedSchemeDataTempWeekEnding = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enhancedSchemeData.totalTaxAmount":
                            enhancedSchemeDataTotalTaxAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (enhancedSchemeDataCustomerReference.IsSet && enhancedSchemeDataCustomerReference.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataCustomerReference), "Property is not nullable for class AdditionalDataTemporaryServices.");

            if (enhancedSchemeDataEmployeeName.IsSet && enhancedSchemeDataEmployeeName.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataEmployeeName), "Property is not nullable for class AdditionalDataTemporaryServices.");

            if (enhancedSchemeDataJobDescription.IsSet && enhancedSchemeDataJobDescription.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataJobDescription), "Property is not nullable for class AdditionalDataTemporaryServices.");

            if (enhancedSchemeDataRegularHoursRate.IsSet && enhancedSchemeDataRegularHoursRate.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataRegularHoursRate), "Property is not nullable for class AdditionalDataTemporaryServices.");

            if (enhancedSchemeDataRegularHoursWorked.IsSet && enhancedSchemeDataRegularHoursWorked.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataRegularHoursWorked), "Property is not nullable for class AdditionalDataTemporaryServices.");

            if (enhancedSchemeDataRequestName.IsSet && enhancedSchemeDataRequestName.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataRequestName), "Property is not nullable for class AdditionalDataTemporaryServices.");

            if (enhancedSchemeDataTempStartDate.IsSet && enhancedSchemeDataTempStartDate.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataTempStartDate), "Property is not nullable for class AdditionalDataTemporaryServices.");

            if (enhancedSchemeDataTempWeekEnding.IsSet && enhancedSchemeDataTempWeekEnding.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataTempWeekEnding), "Property is not nullable for class AdditionalDataTemporaryServices.");

            if (enhancedSchemeDataTotalTaxAmount.IsSet && enhancedSchemeDataTotalTaxAmount.Value == null)
                throw new ArgumentNullException(nameof(enhancedSchemeDataTotalTaxAmount), "Property is not nullable for class AdditionalDataTemporaryServices.");

            return new AdditionalDataTemporaryServices(enhancedSchemeDataCustomerReference, enhancedSchemeDataEmployeeName, enhancedSchemeDataJobDescription, enhancedSchemeDataRegularHoursRate, enhancedSchemeDataRegularHoursWorked, enhancedSchemeDataRequestName, enhancedSchemeDataTempStartDate, enhancedSchemeDataTempWeekEnding, enhancedSchemeDataTotalTaxAmount);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalDataTemporaryServices" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataTemporaryServices"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalDataTemporaryServices additionalDataTemporaryServices, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalDataTemporaryServices, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalDataTemporaryServices" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataTemporaryServices"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalDataTemporaryServices additionalDataTemporaryServices, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalDataTemporaryServices.EnhancedSchemeDataCustomerReferenceOption.IsSet && additionalDataTemporaryServices.EnhancedSchemeDataCustomerReference == null)
                throw new ArgumentNullException(nameof(additionalDataTemporaryServices.EnhancedSchemeDataCustomerReference), "Property is required for class AdditionalDataTemporaryServices.");

            if (additionalDataTemporaryServices.EnhancedSchemeDataEmployeeNameOption.IsSet && additionalDataTemporaryServices.EnhancedSchemeDataEmployeeName == null)
                throw new ArgumentNullException(nameof(additionalDataTemporaryServices.EnhancedSchemeDataEmployeeName), "Property is required for class AdditionalDataTemporaryServices.");

            if (additionalDataTemporaryServices.EnhancedSchemeDataJobDescriptionOption.IsSet && additionalDataTemporaryServices.EnhancedSchemeDataJobDescription == null)
                throw new ArgumentNullException(nameof(additionalDataTemporaryServices.EnhancedSchemeDataJobDescription), "Property is required for class AdditionalDataTemporaryServices.");

            if (additionalDataTemporaryServices.EnhancedSchemeDataRegularHoursRateOption.IsSet && additionalDataTemporaryServices.EnhancedSchemeDataRegularHoursRate == null)
                throw new ArgumentNullException(nameof(additionalDataTemporaryServices.EnhancedSchemeDataRegularHoursRate), "Property is required for class AdditionalDataTemporaryServices.");

            if (additionalDataTemporaryServices.EnhancedSchemeDataRegularHoursWorkedOption.IsSet && additionalDataTemporaryServices.EnhancedSchemeDataRegularHoursWorked == null)
                throw new ArgumentNullException(nameof(additionalDataTemporaryServices.EnhancedSchemeDataRegularHoursWorked), "Property is required for class AdditionalDataTemporaryServices.");

            if (additionalDataTemporaryServices.EnhancedSchemeDataRequestNameOption.IsSet && additionalDataTemporaryServices.EnhancedSchemeDataRequestName == null)
                throw new ArgumentNullException(nameof(additionalDataTemporaryServices.EnhancedSchemeDataRequestName), "Property is required for class AdditionalDataTemporaryServices.");

            if (additionalDataTemporaryServices.EnhancedSchemeDataTempStartDateOption.IsSet && additionalDataTemporaryServices.EnhancedSchemeDataTempStartDate == null)
                throw new ArgumentNullException(nameof(additionalDataTemporaryServices.EnhancedSchemeDataTempStartDate), "Property is required for class AdditionalDataTemporaryServices.");

            if (additionalDataTemporaryServices.EnhancedSchemeDataTempWeekEndingOption.IsSet && additionalDataTemporaryServices.EnhancedSchemeDataTempWeekEnding == null)
                throw new ArgumentNullException(nameof(additionalDataTemporaryServices.EnhancedSchemeDataTempWeekEnding), "Property is required for class AdditionalDataTemporaryServices.");

            if (additionalDataTemporaryServices.EnhancedSchemeDataTotalTaxAmountOption.IsSet && additionalDataTemporaryServices.EnhancedSchemeDataTotalTaxAmount == null)
                throw new ArgumentNullException(nameof(additionalDataTemporaryServices.EnhancedSchemeDataTotalTaxAmount), "Property is required for class AdditionalDataTemporaryServices.");

            if (additionalDataTemporaryServices.EnhancedSchemeDataCustomerReferenceOption.IsSet)
                writer.WriteString("enhancedSchemeData.customerReference", additionalDataTemporaryServices.EnhancedSchemeDataCustomerReference);

            if (additionalDataTemporaryServices.EnhancedSchemeDataEmployeeNameOption.IsSet)
                writer.WriteString("enhancedSchemeData.employeeName", additionalDataTemporaryServices.EnhancedSchemeDataEmployeeName);

            if (additionalDataTemporaryServices.EnhancedSchemeDataJobDescriptionOption.IsSet)
                writer.WriteString("enhancedSchemeData.jobDescription", additionalDataTemporaryServices.EnhancedSchemeDataJobDescription);

            if (additionalDataTemporaryServices.EnhancedSchemeDataRegularHoursRateOption.IsSet)
                writer.WriteString("enhancedSchemeData.regularHoursRate", additionalDataTemporaryServices.EnhancedSchemeDataRegularHoursRate);

            if (additionalDataTemporaryServices.EnhancedSchemeDataRegularHoursWorkedOption.IsSet)
                writer.WriteString("enhancedSchemeData.regularHoursWorked", additionalDataTemporaryServices.EnhancedSchemeDataRegularHoursWorked);

            if (additionalDataTemporaryServices.EnhancedSchemeDataRequestNameOption.IsSet)
                writer.WriteString("enhancedSchemeData.requestName", additionalDataTemporaryServices.EnhancedSchemeDataRequestName);

            if (additionalDataTemporaryServices.EnhancedSchemeDataTempStartDateOption.IsSet)
                writer.WriteString("enhancedSchemeData.tempStartDate", additionalDataTemporaryServices.EnhancedSchemeDataTempStartDate);

            if (additionalDataTemporaryServices.EnhancedSchemeDataTempWeekEndingOption.IsSet)
                writer.WriteString("enhancedSchemeData.tempWeekEnding", additionalDataTemporaryServices.EnhancedSchemeDataTempWeekEnding);

            if (additionalDataTemporaryServices.EnhancedSchemeDataTotalTaxAmountOption.IsSet)
                writer.WriteString("enhancedSchemeData.totalTaxAmount", additionalDataTemporaryServices.EnhancedSchemeDataTotalTaxAmount);
        }
    }
}
