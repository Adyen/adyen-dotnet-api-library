// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PaymentMethodsRequest
    /// </summary>
    public partial class PaymentMethodsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodsRequest" /> class.
        /// </summary>
        /// <param name="merchantAccount">The merchant account identifier, with which you want to process the transaction.</param>
        /// <param name="additionalData">This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value.</param>
        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</param>
        /// <param name="amount">amount</param>
        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</param>
        /// <param name="browserInfo">browserInfo</param>
        /// <param name="channel">The platform where a payment transaction takes place. This field can be used for filtering out payment methods that are only available on specific platforms. Possible values: * iOS * Android * Web</param>
        /// <param name="countryCode">The shopper&#39;s country code.</param>
        /// <param name="order">order</param>
        /// <param name="shopperConversionId">A unique ID that can be used to associate &#x60;/paymentMethods&#x60; and &#x60;/payments&#x60; requests with the same shopper transaction, offering insights into conversion rates.</param>
        /// <param name="shopperEmail">The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks. &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperEmail&#x60; for all browser-based and mobile implementations.</param>
        /// <param name="shopperIP">The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).</param>
        /// <param name="shopperLocale">The combination of a language code and a country code to specify the language to be used in the payment.</param>
        /// <param name="shopperReference">Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.</param>
        /// <param name="splitCardFundingSources">Boolean value indicating whether the card payment method should be split into separate debit and credit options. (default to false)</param>
        /// <param name="store">Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.</param>
        /// <param name="storeFiltrationMode">Specifies how payment methods should be filtered based on the &#39;store&#39; parameter:   - &#39;exclusive&#39;: Only payment methods belonging to the specified &#39;store&#39; are returned.   - &#39;inclusive&#39;: Payment methods from the &#39;store&#39; and those not associated with any other store are returned.</param>
        /// <param name="telephoneNumber">The shopper&#39;s telephone number.</param>
        [JsonConstructor]
        public PaymentMethodsRequest(string merchantAccount, Option<Dictionary<string, string>> additionalData = default, Option<List<string>> allowedPaymentMethods = default, Option<Amount> amount = default, Option<List<string>> blockedPaymentMethods = default, Option<BrowserInfo> browserInfo = default, Option<ChannelEnum?> channel = default, Option<string> countryCode = default, Option<EncryptedOrderData> order = default, Option<string> shopperConversionId = default, Option<string> shopperEmail = default, Option<string> shopperIP = default, Option<string> shopperLocale = default, Option<string> shopperReference = default, Option<bool?> splitCardFundingSources = default, Option<string> store = default, Option<StoreFiltrationModeEnum?> storeFiltrationMode = default, Option<string> telephoneNumber = default)
        {
            MerchantAccount = merchantAccount;
            AdditionalDataOption = additionalData;
            AllowedPaymentMethodsOption = allowedPaymentMethods;
            AmountOption = amount;
            BlockedPaymentMethodsOption = blockedPaymentMethods;
            BrowserInfoOption = browserInfo;
            ChannelOption = channel;
            CountryCodeOption = countryCode;
            OrderOption = order;
            ShopperConversionIdOption = shopperConversionId;
            ShopperEmailOption = shopperEmail;
            ShopperIPOption = shopperIP;
            ShopperLocaleOption = shopperLocale;
            ShopperReferenceOption = shopperReference;
            SplitCardFundingSourcesOption = splitCardFundingSources;
            StoreOption = store;
            StoreFiltrationModeOption = storeFiltrationMode;
            TelephoneNumberOption = telephoneNumber;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The platform where a payment transaction takes place. This field can be used for filtering out payment methods that are only available on specific platforms. Possible values: * iOS * Android * Web
        /// </summary>
        /// <value>The platform where a payment transaction takes place. This field can be used for filtering out payment methods that are only available on specific platforms. Possible values: * iOS * Android * Web</value>
        public enum ChannelEnum
        {
            /// <summary>
            /// Enum IOS for value: iOS
            /// </summary>
            IOS = 1,

            /// <summary>
            /// Enum Android for value: Android
            /// </summary>
            Android = 2,

            /// <summary>
            /// Enum Web for value: Web
            /// </summary>
            Web = 3
        }

        /// <summary>
        /// Returns a <see cref="ChannelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ChannelEnum ChannelEnumFromString(string value)
        {
            if (value.Equals("iOS"))
                return ChannelEnum.IOS;

            if (value.Equals("Android"))
                return ChannelEnum.Android;

            if (value.Equals("Web"))
                return ChannelEnum.Web;

            throw new NotImplementedException($"Could not convert value to type ChannelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ChannelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChannelEnum? ChannelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("iOS"))
                return ChannelEnum.IOS;

            if (value.Equals("Android"))
                return ChannelEnum.Android;

            if (value.Equals("Web"))
                return ChannelEnum.Web;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChannelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ChannelEnumToJsonValue(ChannelEnum? value)
        {
            if (value == ChannelEnum.IOS)
                return "iOS";

            if (value == ChannelEnum.Android)
                return "Android";

            if (value == ChannelEnum.Web)
                return "Web";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Channel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChannelEnum?> ChannelOption { get; private set; }

        /// <summary>
        /// The platform where a payment transaction takes place. This field can be used for filtering out payment methods that are only available on specific platforms. Possible values: * iOS * Android * Web
        /// </summary>
        /// <value>The platform where a payment transaction takes place. This field can be used for filtering out payment methods that are only available on specific platforms. Possible values: * iOS * Android * Web</value>
        [JsonPropertyName("channel")]
        public ChannelEnum? Channel { get { return this.ChannelOption; } set { this.ChannelOption = new Option<ChannelEnum?>(value); } }

        /// <summary>
        /// Specifies how payment methods should be filtered based on the &#39;store&#39; parameter:   - &#39;exclusive&#39;: Only payment methods belonging to the specified &#39;store&#39; are returned.   - &#39;inclusive&#39;: Payment methods from the &#39;store&#39; and those not associated with any other store are returned.
        /// </summary>
        /// <value>Specifies how payment methods should be filtered based on the &#39;store&#39; parameter:   - &#39;exclusive&#39;: Only payment methods belonging to the specified &#39;store&#39; are returned.   - &#39;inclusive&#39;: Payment methods from the &#39;store&#39; and those not associated with any other store are returned.</value>
        public enum StoreFiltrationModeEnum
        {
            /// <summary>
            /// Enum Exclusive for value: exclusive
            /// </summary>
            Exclusive = 1,

            /// <summary>
            /// Enum Inclusive for value: inclusive
            /// </summary>
            Inclusive = 2,

            /// <summary>
            /// Enum SkipFilter for value: skipFilter
            /// </summary>
            SkipFilter = 3
        }

        /// <summary>
        /// Returns a <see cref="StoreFiltrationModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StoreFiltrationModeEnum StoreFiltrationModeEnumFromString(string value)
        {
            if (value.Equals("exclusive"))
                return StoreFiltrationModeEnum.Exclusive;

            if (value.Equals("inclusive"))
                return StoreFiltrationModeEnum.Inclusive;

            if (value.Equals("skipFilter"))
                return StoreFiltrationModeEnum.SkipFilter;

            throw new NotImplementedException($"Could not convert value to type StoreFiltrationModeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StoreFiltrationModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StoreFiltrationModeEnum? StoreFiltrationModeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("exclusive"))
                return StoreFiltrationModeEnum.Exclusive;

            if (value.Equals("inclusive"))
                return StoreFiltrationModeEnum.Inclusive;

            if (value.Equals("skipFilter"))
                return StoreFiltrationModeEnum.SkipFilter;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StoreFiltrationModeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StoreFiltrationModeEnumToJsonValue(StoreFiltrationModeEnum? value)
        {
            if (value == StoreFiltrationModeEnum.Exclusive)
                return "exclusive";

            if (value == StoreFiltrationModeEnum.Inclusive)
                return "inclusive";

            if (value == StoreFiltrationModeEnum.SkipFilter)
                return "skipFilter";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of StoreFiltrationMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StoreFiltrationModeEnum?> StoreFiltrationModeOption { get; private set; }

        /// <summary>
        /// Specifies how payment methods should be filtered based on the &#39;store&#39; parameter:   - &#39;exclusive&#39;: Only payment methods belonging to the specified &#39;store&#39; are returned.   - &#39;inclusive&#39;: Payment methods from the &#39;store&#39; and those not associated with any other store are returned.
        /// </summary>
        /// <value>Specifies how payment methods should be filtered based on the &#39;store&#39; parameter:   - &#39;exclusive&#39;: Only payment methods belonging to the specified &#39;store&#39; are returned.   - &#39;inclusive&#39;: Payment methods from the &#39;store&#39; and those not associated with any other store are returned.</value>
        [JsonPropertyName("storeFiltrationMode")]
        public StoreFiltrationModeEnum? StoreFiltrationMode { get { return this.StoreFiltrationModeOption; } set { this.StoreFiltrationModeOption = new Option<StoreFiltrationModeEnum?>(value); } }

        /// <summary>
        /// The merchant account identifier, with which you want to process the transaction.
        /// </summary>
        /// <value>The merchant account identifier, with which you want to process the transaction.</value>
        [JsonPropertyName("merchantAccount")]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// Used to track the state of AdditionalData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> AdditionalDataOption { get; private set; }

        /// <summary>
        /// This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value.
        /// </summary>
        /// <value>This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value.</value>
        [JsonPropertyName("additionalData")]
        public Dictionary<string, string> AdditionalData { get { return this.AdditionalDataOption; } set { this.AdditionalDataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of AllowedPaymentMethods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> AllowedPaymentMethodsOption { get; private set; }

        /// <summary>
        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
        /// </summary>
        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
        [JsonPropertyName("allowedPaymentMethods")]
        public List<string> AllowedPaymentMethods { get { return this.AllowedPaymentMethodsOption; } set { this.AllowedPaymentMethodsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> AmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public Amount Amount { get { return this.AmountOption; } set { this.AmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of BlockedPaymentMethods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BlockedPaymentMethodsOption { get; private set; }

        /// <summary>
        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
        /// </summary>
        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
        [JsonPropertyName("blockedPaymentMethods")]
        public List<string> BlockedPaymentMethods { get { return this.BlockedPaymentMethodsOption; } set { this.BlockedPaymentMethodsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of BrowserInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BrowserInfo> BrowserInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets BrowserInfo
        /// </summary>
        [JsonPropertyName("browserInfo")]
        public BrowserInfo BrowserInfo { get { return this.BrowserInfoOption; } set { this.BrowserInfoOption = new Option<BrowserInfo>(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryCodeOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s country code.
        /// </summary>
        /// <value>The shopper&#39;s country code.</value>
        [JsonPropertyName("countryCode")]
        public string CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EncryptedOrderData> OrderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [JsonPropertyName("order")]
        public EncryptedOrderData Order { get { return this.OrderOption; } set { this.OrderOption = new Option<EncryptedOrderData>(value); } }

        /// <summary>
        /// Used to track the state of ShopperConversionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperConversionIdOption { get; private set; }

        /// <summary>
        /// A unique ID that can be used to associate &#x60;/paymentMethods&#x60; and &#x60;/payments&#x60; requests with the same shopper transaction, offering insights into conversion rates.
        /// </summary>
        /// <value>A unique ID that can be used to associate &#x60;/paymentMethods&#x60; and &#x60;/payments&#x60; requests with the same shopper transaction, offering insights into conversion rates.</value>
        [JsonPropertyName("shopperConversionId")]
        public string ShopperConversionId { get { return this.ShopperConversionIdOption; } set { this.ShopperConversionIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperEmailOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks. &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperEmail&#x60; for all browser-based and mobile implementations.
        /// </summary>
        /// <value>The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks. &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperEmail&#x60; for all browser-based and mobile implementations.</value>
        [JsonPropertyName("shopperEmail")]
        public string ShopperEmail { get { return this.ShopperEmailOption; } set { this.ShopperEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperIP
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperIPOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
        /// </summary>
        /// <value>The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).</value>
        [JsonPropertyName("shopperIP")]
        public string ShopperIP { get { return this.ShopperIPOption; } set { this.ShopperIPOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperLocale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperLocaleOption { get; private set; }

        /// <summary>
        /// The combination of a language code and a country code to specify the language to be used in the payment.
        /// </summary>
        /// <value>The combination of a language code and a country code to specify the language to be used in the payment.</value>
        [JsonPropertyName("shopperLocale")]
        public string ShopperLocale { get { return this.ShopperLocaleOption; } set { this.ShopperLocaleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperReferenceOption { get; private set; }

        /// <summary>
        /// Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.
        /// </summary>
        /// <value>Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.</value>
        [JsonPropertyName("shopperReference")]
        public string ShopperReference { get { return this.ShopperReferenceOption; } set { this.ShopperReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SplitCardFundingSources
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SplitCardFundingSourcesOption { get; private set; }

        /// <summary>
        /// Boolean value indicating whether the card payment method should be split into separate debit and credit options.
        /// </summary>
        /// <value>Boolean value indicating whether the card payment method should be split into separate debit and credit options.</value>
        [JsonPropertyName("splitCardFundingSources")]
        public bool? SplitCardFundingSources { get { return this.SplitCardFundingSourcesOption; } set { this.SplitCardFundingSourcesOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Store
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StoreOption { get; private set; }

        /// <summary>
        /// Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.
        /// </summary>
        /// <value>Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.</value>
        [JsonPropertyName("store")]
        public string Store { get { return this.StoreOption; } set { this.StoreOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TelephoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TelephoneNumberOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s telephone number.
        /// </summary>
        /// <value>The shopper&#39;s telephone number.</value>
        [JsonPropertyName("telephoneNumber")]
        public string TelephoneNumber { get { return this.TelephoneNumberOption; } set { this.TelephoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethodsRequest {\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  AllowedPaymentMethods: ").Append(AllowedPaymentMethods).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BlockedPaymentMethods: ").Append(BlockedPaymentMethods).Append("\n");
            sb.Append("  BrowserInfo: ").Append(BrowserInfo).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  ShopperConversionId: ").Append(ShopperConversionId).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("  ShopperIP: ").Append(ShopperIP).Append("\n");
            sb.Append("  ShopperLocale: ").Append(ShopperLocale).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("  SplitCardFundingSources: ").Append(SplitCardFundingSources).Append("\n");
            sb.Append("  Store: ").Append(Store).Append("\n");
            sb.Append("  StoreFiltrationMode: ").Append(StoreFiltrationMode).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ShopperConversionId (string) maxLength
            if (this.ShopperConversionId != null && this.ShopperConversionId.Length > 256)
            {
                yield return new ValidationResult("Invalid value for ShopperConversionId, length must be less than 256.", new [] { "ShopperConversionId" });
            }

            // Store (string) maxLength
            if (this.Store != null && this.Store.Length > 16)
            {
                yield return new ValidationResult("Invalid value for Store, length must be less than 16.", new [] { "Store" });
            }

            // Store (string) minLength
            if (this.Store != null && this.Store.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Store, length must be greater than 1.", new [] { "Store" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentMethodsRequest" />
    /// </summary>
    public class PaymentMethodsRequestJsonConverter : JsonConverter<PaymentMethodsRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentMethodsRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentMethodsRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> merchantAccount = default;
            Option<Dictionary<string, string>> additionalData = default;
            Option<List<string>> allowedPaymentMethods = default;
            Option<Amount> amount = default;
            Option<List<string>> blockedPaymentMethods = default;
            Option<BrowserInfo> browserInfo = default;
            Option<PaymentMethodsRequest.ChannelEnum?> channel = default;
            Option<string> countryCode = default;
            Option<EncryptedOrderData> order = default;
            Option<string> shopperConversionId = default;
            Option<string> shopperEmail = default;
            Option<string> shopperIP = default;
            Option<string> shopperLocale = default;
            Option<string> shopperReference = default;
            Option<bool?> splitCardFundingSources = default;
            Option<string> store = default;
            Option<PaymentMethodsRequest.StoreFiltrationModeEnum?> storeFiltrationMode = default;
            Option<string> telephoneNumber = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "merchantAccount":
                            merchantAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "additionalData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalData = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "allowedPaymentMethods":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowedPaymentMethods = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "blockedPaymentMethods":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                blockedPaymentMethods = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "browserInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                browserInfo = new Option<BrowserInfo>(JsonSerializer.Deserialize<BrowserInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "channel":
                            string channelRawValue = utf8JsonReader.GetString();
                            if (channelRawValue != null)
                                channel = new Option<PaymentMethodsRequest.ChannelEnum?>(PaymentMethodsRequest.ChannelEnumFromStringOrDefault(channelRawValue));
                            break;
                        case "countryCode":
                            countryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "order":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                order = new Option<EncryptedOrderData>(JsonSerializer.Deserialize<EncryptedOrderData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shopperConversionId":
                            shopperConversionId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperEmail":
                            shopperEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperIP":
                            shopperIP = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperLocale":
                            shopperLocale = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperReference":
                            shopperReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "splitCardFundingSources":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                splitCardFundingSources = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "store":
                            store = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "storeFiltrationMode":
                            string storeFiltrationModeRawValue = utf8JsonReader.GetString();
                            if (storeFiltrationModeRawValue != null)
                                storeFiltrationMode = new Option<PaymentMethodsRequest.StoreFiltrationModeEnum?>(PaymentMethodsRequest.StoreFiltrationModeEnumFromStringOrDefault(storeFiltrationModeRawValue));
                            break;
                        case "telephoneNumber":
                            telephoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!merchantAccount.IsSet)
                throw new ArgumentException("Property is required for class PaymentMethodsRequest.", nameof(merchantAccount));

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount), "Property is not nullable for class PaymentMethodsRequest.");

            if (additionalData.IsSet && additionalData.Value == null)
                throw new ArgumentNullException(nameof(additionalData), "Property is not nullable for class PaymentMethodsRequest.");

            if (allowedPaymentMethods.IsSet && allowedPaymentMethods.Value == null)
                throw new ArgumentNullException(nameof(allowedPaymentMethods), "Property is not nullable for class PaymentMethodsRequest.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class PaymentMethodsRequest.");

            if (blockedPaymentMethods.IsSet && blockedPaymentMethods.Value == null)
                throw new ArgumentNullException(nameof(blockedPaymentMethods), "Property is not nullable for class PaymentMethodsRequest.");

            if (browserInfo.IsSet && browserInfo.Value == null)
                throw new ArgumentNullException(nameof(browserInfo), "Property is not nullable for class PaymentMethodsRequest.");

            if (channel.IsSet && channel.Value == null)
                throw new ArgumentNullException(nameof(channel), "Property is not nullable for class PaymentMethodsRequest.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class PaymentMethodsRequest.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class PaymentMethodsRequest.");

            if (shopperConversionId.IsSet && shopperConversionId.Value == null)
                throw new ArgumentNullException(nameof(shopperConversionId), "Property is not nullable for class PaymentMethodsRequest.");

            if (shopperEmail.IsSet && shopperEmail.Value == null)
                throw new ArgumentNullException(nameof(shopperEmail), "Property is not nullable for class PaymentMethodsRequest.");

            if (shopperIP.IsSet && shopperIP.Value == null)
                throw new ArgumentNullException(nameof(shopperIP), "Property is not nullable for class PaymentMethodsRequest.");

            if (shopperLocale.IsSet && shopperLocale.Value == null)
                throw new ArgumentNullException(nameof(shopperLocale), "Property is not nullable for class PaymentMethodsRequest.");

            if (shopperReference.IsSet && shopperReference.Value == null)
                throw new ArgumentNullException(nameof(shopperReference), "Property is not nullable for class PaymentMethodsRequest.");

            if (splitCardFundingSources.IsSet && splitCardFundingSources.Value == null)
                throw new ArgumentNullException(nameof(splitCardFundingSources), "Property is not nullable for class PaymentMethodsRequest.");

            if (store.IsSet && store.Value == null)
                throw new ArgumentNullException(nameof(store), "Property is not nullable for class PaymentMethodsRequest.");

            if (storeFiltrationMode.IsSet && storeFiltrationMode.Value == null)
                throw new ArgumentNullException(nameof(storeFiltrationMode), "Property is not nullable for class PaymentMethodsRequest.");

            if (telephoneNumber.IsSet && telephoneNumber.Value == null)
                throw new ArgumentNullException(nameof(telephoneNumber), "Property is not nullable for class PaymentMethodsRequest.");

            return new PaymentMethodsRequest(merchantAccount.Value, additionalData, allowedPaymentMethods, amount, blockedPaymentMethods, browserInfo, channel, countryCode, order, shopperConversionId, shopperEmail, shopperIP, shopperLocale, shopperReference, splitCardFundingSources, store, storeFiltrationMode, telephoneNumber);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentMethodsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentMethodsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentMethodsRequest paymentMethodsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentMethodsRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentMethodsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentMethodsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentMethodsRequest paymentMethodsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentMethodsRequest.MerchantAccount == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.MerchantAccount), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.AdditionalDataOption.IsSet && paymentMethodsRequest.AdditionalData == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.AdditionalData), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.AllowedPaymentMethodsOption.IsSet && paymentMethodsRequest.AllowedPaymentMethods == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.AllowedPaymentMethods), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.AmountOption.IsSet && paymentMethodsRequest.Amount == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.Amount), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.BlockedPaymentMethodsOption.IsSet && paymentMethodsRequest.BlockedPaymentMethods == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.BlockedPaymentMethods), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.BrowserInfoOption.IsSet && paymentMethodsRequest.BrowserInfo == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.BrowserInfo), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.CountryCodeOption.IsSet && paymentMethodsRequest.CountryCode == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.CountryCode), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.OrderOption.IsSet && paymentMethodsRequest.Order == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.Order), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.ShopperConversionIdOption.IsSet && paymentMethodsRequest.ShopperConversionId == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.ShopperConversionId), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.ShopperEmailOption.IsSet && paymentMethodsRequest.ShopperEmail == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.ShopperEmail), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.ShopperIPOption.IsSet && paymentMethodsRequest.ShopperIP == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.ShopperIP), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.ShopperLocaleOption.IsSet && paymentMethodsRequest.ShopperLocale == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.ShopperLocale), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.ShopperReferenceOption.IsSet && paymentMethodsRequest.ShopperReference == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.ShopperReference), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.StoreOption.IsSet && paymentMethodsRequest.Store == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.Store), "Property is required for class PaymentMethodsRequest.");

            if (paymentMethodsRequest.TelephoneNumberOption.IsSet && paymentMethodsRequest.TelephoneNumber == null)
                throw new ArgumentNullException(nameof(paymentMethodsRequest.TelephoneNumber), "Property is required for class PaymentMethodsRequest.");

            writer.WriteString("merchantAccount", paymentMethodsRequest.MerchantAccount);

            if (paymentMethodsRequest.AdditionalDataOption.IsSet)
            {
                writer.WritePropertyName("additionalData");
                JsonSerializer.Serialize(writer, paymentMethodsRequest.AdditionalData, jsonSerializerOptions);
            }
            if (paymentMethodsRequest.AllowedPaymentMethodsOption.IsSet)
            {
                writer.WritePropertyName("allowedPaymentMethods");
                JsonSerializer.Serialize(writer, paymentMethodsRequest.AllowedPaymentMethods, jsonSerializerOptions);
            }
            if (paymentMethodsRequest.AmountOption.IsSet)
            {
                writer.WritePropertyName("amount");
                JsonSerializer.Serialize(writer, paymentMethodsRequest.Amount, jsonSerializerOptions);
            }
            if (paymentMethodsRequest.BlockedPaymentMethodsOption.IsSet)
            {
                writer.WritePropertyName("blockedPaymentMethods");
                JsonSerializer.Serialize(writer, paymentMethodsRequest.BlockedPaymentMethods, jsonSerializerOptions);
            }
            if (paymentMethodsRequest.BrowserInfoOption.IsSet)
            {
                writer.WritePropertyName("browserInfo");
                JsonSerializer.Serialize(writer, paymentMethodsRequest.BrowserInfo, jsonSerializerOptions);
            }
            var channelRawValue = PaymentMethodsRequest.ChannelEnumToJsonValue(paymentMethodsRequest.ChannelOption.Value.Value);
            writer.WriteString("channel", channelRawValue);
            if (paymentMethodsRequest.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", paymentMethodsRequest.CountryCode);

            if (paymentMethodsRequest.OrderOption.IsSet)
            {
                writer.WritePropertyName("order");
                JsonSerializer.Serialize(writer, paymentMethodsRequest.Order, jsonSerializerOptions);
            }
            if (paymentMethodsRequest.ShopperConversionIdOption.IsSet)
                writer.WriteString("shopperConversionId", paymentMethodsRequest.ShopperConversionId);

            if (paymentMethodsRequest.ShopperEmailOption.IsSet)
                writer.WriteString("shopperEmail", paymentMethodsRequest.ShopperEmail);

            if (paymentMethodsRequest.ShopperIPOption.IsSet)
                writer.WriteString("shopperIP", paymentMethodsRequest.ShopperIP);

            if (paymentMethodsRequest.ShopperLocaleOption.IsSet)
                writer.WriteString("shopperLocale", paymentMethodsRequest.ShopperLocale);

            if (paymentMethodsRequest.ShopperReferenceOption.IsSet)
                writer.WriteString("shopperReference", paymentMethodsRequest.ShopperReference);

            if (paymentMethodsRequest.SplitCardFundingSourcesOption.IsSet)
                writer.WriteBoolean("splitCardFundingSources", paymentMethodsRequest.SplitCardFundingSourcesOption.Value.Value);

            if (paymentMethodsRequest.StoreOption.IsSet)
                writer.WriteString("store", paymentMethodsRequest.Store);

            var storeFiltrationModeRawValue = PaymentMethodsRequest.StoreFiltrationModeEnumToJsonValue(paymentMethodsRequest.StoreFiltrationModeOption.Value.Value);
            writer.WriteString("storeFiltrationMode", storeFiltrationModeRawValue);
            if (paymentMethodsRequest.TelephoneNumberOption.IsSet)
                writer.WriteString("telephoneNumber", paymentMethodsRequest.TelephoneNumber);
        }
    }
}
