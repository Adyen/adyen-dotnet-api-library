// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ResponseAdditionalDataCommon
    /// </summary>
    public partial class ResponseAdditionalDataCommon : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseAdditionalDataCommon" /> class.
        /// </summary>
        /// <param name="acquirerAccountCode">The name of the Adyen acquirer account.  Example: PayPalSandbox_TestAcquirer  &gt; Only relevant for PayPal transactions.</param>
        /// <param name="acquirerCode">The name of the acquirer processing the payment request.  Example: TestPmmAcquirer</param>
        /// <param name="acquirerReference">The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.  Example: 7C9N3FNBKT9</param>
        /// <param name="alias">The Adyen alias of the card.  Example: H167852639363479</param>
        /// <param name="aliasType">The type of the card alias.  Example: Default</param>
        /// <param name="authCode">Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.  Example: 58747</param>
        /// <param name="authorisationMid">Merchant ID known by the acquirer.</param>
        /// <param name="authorisedAmountCurrency">The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).</param>
        /// <param name="authorisedAmountValue">Value of the amount authorised.  This amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).</param>
        /// <param name="avsResult">The AVS result code of the payment, which provides information about the outcome of the AVS check.  For possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).</param>
        /// <param name="avsResultRaw">Raw AVS result received from the acquirer, where available.  Example: D</param>
        /// <param name="bic">BIC of a bank account.  Example: TESTNL01  &gt; Only relevant for SEPA Direct Debit transactions.</param>
        /// <param name="coBrandedWith">Includes the co-branded card information.</param>
        /// <param name="cvcResult">The result of CVC verification.</param>
        /// <param name="cvcResultRaw">The raw result of CVC verification.</param>
        /// <param name="dsTransID">Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.</param>
        /// <param name="eci">The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.  Example: 02</param>
        /// <param name="expiryDate">The expiry date on the card.  Example: 6/2016  &gt; Returned only in case of a card payment.</param>
        /// <param name="extraCostsCurrency">The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.  Example: EUR</param>
        /// <param name="extraCostsValue">The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.</param>
        /// <param name="fraudCheckItemNrFraudCheckname">The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.</param>
        /// <param name="fraudManualReview">Indicates if the payment is sent to manual review.</param>
        /// <param name="fraudResultType">The fraud result properties of the payment.</param>
        /// <param name="fraudRiskLevel">The risk level of the transaction as classified by the [machine learning](https://docs.adyen.com/risk-management/configure-your-risk-profile/machine-learning-rules/) fraud risk rule. The risk level indicates the likelihood that a transaction will result in a fraudulent dispute. The possible return values are: * veryLow * low * medium * high * veryHigh  &gt;</param>
        /// <param name="fundingSource">Information regarding the funding type of the card. The possible return values are: * CHARGE * CREDIT * DEBIT * PREPAID * PREPAID_RELOADABLE  * PREPAID_NONRELOADABLE * DEFFERED_DEBIT  &gt; This functionality requires additional configuration on Adyen&#39;s end. To enable it, contact the Support Team.  For receiving this field in the notification, enable **Include Funding Source** in **Notifications** &gt; **Additional settings**.</param>
        /// <param name="fundsAvailability">Indicates availability of funds.  Visa: * \&quot;I\&quot; (fast funds are supported) * \&quot;N\&quot; (otherwise)  Mastercard: * \&quot;I\&quot; (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \&quot;N\&quot; (otherwise)  &gt; Returned when you verify a card BIN or estimate costs, and only if payoutEligible is \&quot;Y\&quot; or \&quot;D\&quot;.</param>
        /// <param name="inferredRefusalReason">Provides the more granular indication of why a transaction was refused. When a transaction fails with either \&quot;Refused\&quot;, \&quot;Restricted Card\&quot;, \&quot;Transaction Not Permitted\&quot;, \&quot;Not supported\&quot; or \&quot;DeclinedNon Generic\&quot; refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the &#x60;inferredRefusalReason&#x60;, field is populated and the &#x60;refusalReason&#x60;, is set to \&quot;Not Supported\&quot;.  Possible values:  * 3D Secure Mandated * Closed Account * ContAuth Not Supported * CVC Mandated * Ecommerce Not Allowed * Crossborder Not Supported * Card Updated  * Low Authrate Bin * Non-reloadable prepaid card</param>
        /// <param name="isCardCommercial">Indicates if the card is used for business purposes only.</param>
        /// <param name="issuerCountry">The issuing country of the card based on the BIN list that Adyen maintains.  Example: JP</param>
        /// <param name="liabilityShift">A Boolean value indicating whether a liability shift was offered for this payment.</param>
        /// <param name="mcBankNetReferenceNumber">The &#x60;mcBankNetReferenceNumber&#x60;, is a minimum of six characters and a maximum of nine characters long.  &gt; Contact Support Team to enable this field.</param>
        /// <param name="merchantAdviceCode">The Merchant Advice Code (MAC) can be returned by Mastercard issuers for refused payments. If present, the MAC contains information about why the payment failed, and whether it can be retried.  For more information see [Mastercard Merchant Advice Codes](https://docs.adyen.com/development-resources/raw-acquirer-responses#mastercard-merchant-advice-codes).</param>
        /// <param name="merchantReference">The reference provided for the transaction.</param>
        /// <param name="networkTxReference">Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.</param>
        /// <param name="ownerName">The owner name of a bank account.  Only relevant for SEPA Direct Debit transactions.</param>
        /// <param name="paymentAccountReference">The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.</param>
        /// <param name="paymentMethod">The payment method used in the transaction.</param>
        /// <param name="paymentMethodVariant">The Adyen sub-variant of the payment method used for the payment request.  For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).  Example: mcpro</param>
        /// <param name="payoutEligible">Indicates whether a payout is eligible or not for this card.  Visa: * \&quot;Y\&quot; * \&quot;N\&quot;  Mastercard: * \&quot;Y\&quot; (domestic and cross-border)  * \&quot;D\&quot; (only domestic) * \&quot;N\&quot; (no MoneySend) * \&quot;U\&quot; (unknown)</param>
        /// <param name="realtimeAccountUpdaterStatus">The response code from the Real Time Account Updater service.  Possible return values are: * CardChanged * CardExpiryChanged * CloseAccount  * ContactCardAccountHolder</param>
        /// <param name="receiptFreeText">Message to be displayed on the terminal.</param>
        /// <param name="recurringContractTypes">The recurring contract types applicable to the transaction.</param>
        /// <param name="recurringFirstPspReference">The &#x60;pspReference&#x60;, of the first recurring payment that created the recurring detail.  This functionality requires additional configuration on Adyen&#39;s end. To enable it, contact the Support Team.</param>
        /// <param name="recurringRecurringDetailReference">The reference that uniquely identifies the recurring transaction.</param>
        /// <param name="recurringShopperReference">The provided reference of the shopper for a recurring transaction.</param>
        /// <param name="recurringProcessingModel">The processing model used for the recurring transaction.</param>
        /// <param name="referred">If the payment is referred, this field is set to true.  This field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.  Example: true</param>
        /// <param name="refusalReasonRaw">Raw refusal reason received from the acquirer, where available.  Example: AUTHORISED</param>
        /// <param name="requestAmount">The amount of the payment request.</param>
        /// <param name="requestCurrencyCode">The currency of the payment request.</param>
        /// <param name="shopperInteraction">The shopper interaction type of the payment request.  Example: Ecommerce</param>
        /// <param name="shopperReference">The shopperReference passed in the payment request.  Example: AdyenTestShopperXX</param>
        /// <param name="terminalId">The terminal ID used in a point-of-sale payment.  Example: 06022622</param>
        /// <param name="threeDAuthenticated">A Boolean value indicating whether 3DS authentication was completed on this payment.  Example: true</param>
        /// <param name="threeDAuthenticatedResponse">The raw 3DS authentication result from the card issuer.  Example: N</param>
        /// <param name="threeDOffered">A Boolean value indicating whether 3DS was offered for this payment.  Example: true</param>
        /// <param name="threeDOfferedResponse">The raw enrollment result from the 3DS directory services of the card schemes.  Example: Y</param>
        /// <param name="threeDSVersion">The 3D Secure 2 version.</param>
        /// <param name="tokenizationShopperReference">The reference for the shopper that you sent when tokenizing the payment details.</param>
        /// <param name="tokenizationStoreOperationType">The operation performed on the token. Possible values:  * **created**: the token has been created. * **updated**: the existing token has been updated. * **alreadyExisting**: the details have already been stored. </param>
        /// <param name="tokenizationStoredPaymentMethodId">The reference that uniquely identifies tokenized payment details.</param>
        /// <param name="visaTransactionId">The &#x60;visaTransactionId&#x60;, has a fixed length of 15 numeric characters.  &gt; Contact Support Team to enable this field.</param>
        /// <param name="xid">The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse &#39;N&#39; or &#39;Y&#39;.   Example: ODgxNDc2MDg2MDExODk5MAAAAAA&#x3D;</param>
        [JsonConstructor]
        public ResponseAdditionalDataCommon(Option<string> acquirerAccountCode = default, Option<string> acquirerCode = default, Option<string> acquirerReference = default, Option<string> alias = default, Option<string> aliasType = default, Option<string> authCode = default, Option<string> authorisationMid = default, Option<string> authorisedAmountCurrency = default, Option<string> authorisedAmountValue = default, Option<string> avsResult = default, Option<string> avsResultRaw = default, Option<string> bic = default, Option<string> coBrandedWith = default, Option<string> cvcResult = default, Option<string> cvcResultRaw = default, Option<string> dsTransID = default, Option<string> eci = default, Option<string> expiryDate = default, Option<string> extraCostsCurrency = default, Option<string> extraCostsValue = default, Option<string> fraudCheckItemNrFraudCheckname = default, Option<string> fraudManualReview = default, Option<FraudResultTypeEnum?> fraudResultType = default, Option<FraudRiskLevelEnum?> fraudRiskLevel = default, Option<string> fundingSource = default, Option<string> fundsAvailability = default, Option<string> inferredRefusalReason = default, Option<string> isCardCommercial = default, Option<string> issuerCountry = default, Option<string> liabilityShift = default, Option<string> mcBankNetReferenceNumber = default, Option<string> merchantAdviceCode = default, Option<string> merchantReference = default, Option<string> networkTxReference = default, Option<string> ownerName = default, Option<string> paymentAccountReference = default, Option<string> paymentMethod = default, Option<string> paymentMethodVariant = default, Option<string> payoutEligible = default, Option<string> realtimeAccountUpdaterStatus = default, Option<string> receiptFreeText = default, Option<string> recurringContractTypes = default, Option<string> recurringFirstPspReference = default, Option<string> recurringRecurringDetailReference = default, Option<string> recurringShopperReference = default, Option<RecurringProcessingModelEnum?> recurringProcessingModel = default, Option<string> referred = default, Option<string> refusalReasonRaw = default, Option<string> requestAmount = default, Option<string> requestCurrencyCode = default, Option<string> shopperInteraction = default, Option<string> shopperReference = default, Option<string> terminalId = default, Option<string> threeDAuthenticated = default, Option<string> threeDAuthenticatedResponse = default, Option<string> threeDOffered = default, Option<string> threeDOfferedResponse = default, Option<string> threeDSVersion = default, Option<string> tokenizationShopperReference = default, Option<TokenizationStoreOperationTypeEnum?> tokenizationStoreOperationType = default, Option<string> tokenizationStoredPaymentMethodId = default, Option<string> visaTransactionId = default, Option<string> xid = default)
        {
            AcquirerAccountCodeOption = acquirerAccountCode;
            AcquirerCodeOption = acquirerCode;
            AcquirerReferenceOption = acquirerReference;
            AliasOption = alias;
            AliasTypeOption = aliasType;
            AuthCodeOption = authCode;
            AuthorisationMidOption = authorisationMid;
            AuthorisedAmountCurrencyOption = authorisedAmountCurrency;
            AuthorisedAmountValueOption = authorisedAmountValue;
            AvsResultOption = avsResult;
            AvsResultRawOption = avsResultRaw;
            BicOption = bic;
            CoBrandedWithOption = coBrandedWith;
            CvcResultOption = cvcResult;
            CvcResultRawOption = cvcResultRaw;
            DsTransIDOption = dsTransID;
            EciOption = eci;
            ExpiryDateOption = expiryDate;
            ExtraCostsCurrencyOption = extraCostsCurrency;
            ExtraCostsValueOption = extraCostsValue;
            FraudCheckItemNrFraudChecknameOption = fraudCheckItemNrFraudCheckname;
            FraudManualReviewOption = fraudManualReview;
            FraudResultTypeOption = fraudResultType;
            FraudRiskLevelOption = fraudRiskLevel;
            FundingSourceOption = fundingSource;
            FundsAvailabilityOption = fundsAvailability;
            InferredRefusalReasonOption = inferredRefusalReason;
            IsCardCommercialOption = isCardCommercial;
            IssuerCountryOption = issuerCountry;
            LiabilityShiftOption = liabilityShift;
            McBankNetReferenceNumberOption = mcBankNetReferenceNumber;
            MerchantAdviceCodeOption = merchantAdviceCode;
            MerchantReferenceOption = merchantReference;
            NetworkTxReferenceOption = networkTxReference;
            OwnerNameOption = ownerName;
            PaymentAccountReferenceOption = paymentAccountReference;
            PaymentMethodOption = paymentMethod;
            PaymentMethodVariantOption = paymentMethodVariant;
            PayoutEligibleOption = payoutEligible;
            RealtimeAccountUpdaterStatusOption = realtimeAccountUpdaterStatus;
            ReceiptFreeTextOption = receiptFreeText;
            RecurringContractTypesOption = recurringContractTypes;
            RecurringFirstPspReferenceOption = recurringFirstPspReference;
            RecurringRecurringDetailReferenceOption = recurringRecurringDetailReference;
            RecurringShopperReferenceOption = recurringShopperReference;
            RecurringProcessingModelOption = recurringProcessingModel;
            ReferredOption = referred;
            RefusalReasonRawOption = refusalReasonRaw;
            RequestAmountOption = requestAmount;
            RequestCurrencyCodeOption = requestCurrencyCode;
            ShopperInteractionOption = shopperInteraction;
            ShopperReferenceOption = shopperReference;
            TerminalIdOption = terminalId;
            ThreeDAuthenticatedOption = threeDAuthenticated;
            ThreeDAuthenticatedResponseOption = threeDAuthenticatedResponse;
            ThreeDOfferedOption = threeDOffered;
            ThreeDOfferedResponseOption = threeDOfferedResponse;
            ThreeDSVersionOption = threeDSVersion;
            TokenizationShopperReferenceOption = tokenizationShopperReference;
            TokenizationStoreOperationTypeOption = tokenizationStoreOperationType;
            TokenizationStoredPaymentMethodIdOption = tokenizationStoredPaymentMethodId;
            VisaTransactionIdOption = visaTransactionId;
            XidOption = xid;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The fraud result properties of the payment.
        /// </summary>
        /// <value>The fraud result properties of the payment.</value>
        public enum FraudResultTypeEnum
        {
            /// <summary>
            /// Enum GREEN for value: GREEN
            /// </summary>
            GREEN = 1,

            /// <summary>
            /// Enum FRAUD for value: FRAUD
            /// </summary>
            FRAUD = 2
        }

        /// <summary>
        /// Returns a <see cref="FraudResultTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FraudResultTypeEnum FraudResultTypeEnumFromString(string value)
        {
            if (value.Equals("GREEN"))
                return FraudResultTypeEnum.GREEN;

            if (value.Equals("FRAUD"))
                return FraudResultTypeEnum.FRAUD;

            throw new NotImplementedException($"Could not convert value to type FraudResultTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FraudResultTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FraudResultTypeEnum? FraudResultTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("GREEN"))
                return FraudResultTypeEnum.GREEN;

            if (value.Equals("FRAUD"))
                return FraudResultTypeEnum.FRAUD;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FraudResultTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FraudResultTypeEnumToJsonValue(FraudResultTypeEnum? value)
        {
            if (value == FraudResultTypeEnum.GREEN)
                return "GREEN";

            if (value == FraudResultTypeEnum.FRAUD)
                return "FRAUD";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of FraudResultType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FraudResultTypeEnum?> FraudResultTypeOption { get; private set; }

        /// <summary>
        /// The fraud result properties of the payment.
        /// </summary>
        /// <value>The fraud result properties of the payment.</value>
        [JsonPropertyName("fraudResultType")]
        public FraudResultTypeEnum? FraudResultType { get { return this.FraudResultTypeOption; } set { this.FraudResultTypeOption = new Option<FraudResultTypeEnum?>(value); } }

        /// <summary>
        /// The risk level of the transaction as classified by the [machine learning](https://docs.adyen.com/risk-management/configure-your-risk-profile/machine-learning-rules/) fraud risk rule. The risk level indicates the likelihood that a transaction will result in a fraudulent dispute. The possible return values are: * veryLow * low * medium * high * veryHigh  &gt;
        /// </summary>
        /// <value>The risk level of the transaction as classified by the [machine learning](https://docs.adyen.com/risk-management/configure-your-risk-profile/machine-learning-rules/) fraud risk rule. The risk level indicates the likelihood that a transaction will result in a fraudulent dispute. The possible return values are: * veryLow * low * medium * high * veryHigh  &gt;</value>
        public enum FraudRiskLevelEnum
        {
            /// <summary>
            /// Enum VeryLow for value: veryLow
            /// </summary>
            VeryLow = 1,

            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            Low = 2,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            Medium = 3,

            /// <summary>
            /// Enum High for value: high
            /// </summary>
            High = 4,

            /// <summary>
            /// Enum VeryHigh for value: veryHigh
            /// </summary>
            VeryHigh = 5
        }

        /// <summary>
        /// Returns a <see cref="FraudRiskLevelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FraudRiskLevelEnum FraudRiskLevelEnumFromString(string value)
        {
            if (value.Equals("veryLow"))
                return FraudRiskLevelEnum.VeryLow;

            if (value.Equals("low"))
                return FraudRiskLevelEnum.Low;

            if (value.Equals("medium"))
                return FraudRiskLevelEnum.Medium;

            if (value.Equals("high"))
                return FraudRiskLevelEnum.High;

            if (value.Equals("veryHigh"))
                return FraudRiskLevelEnum.VeryHigh;

            throw new NotImplementedException($"Could not convert value to type FraudRiskLevelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FraudRiskLevelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FraudRiskLevelEnum? FraudRiskLevelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("veryLow"))
                return FraudRiskLevelEnum.VeryLow;

            if (value.Equals("low"))
                return FraudRiskLevelEnum.Low;

            if (value.Equals("medium"))
                return FraudRiskLevelEnum.Medium;

            if (value.Equals("high"))
                return FraudRiskLevelEnum.High;

            if (value.Equals("veryHigh"))
                return FraudRiskLevelEnum.VeryHigh;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FraudRiskLevelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FraudRiskLevelEnumToJsonValue(FraudRiskLevelEnum? value)
        {
            if (value == FraudRiskLevelEnum.VeryLow)
                return "veryLow";

            if (value == FraudRiskLevelEnum.Low)
                return "low";

            if (value == FraudRiskLevelEnum.Medium)
                return "medium";

            if (value == FraudRiskLevelEnum.High)
                return "high";

            if (value == FraudRiskLevelEnum.VeryHigh)
                return "veryHigh";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of FraudRiskLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FraudRiskLevelEnum?> FraudRiskLevelOption { get; private set; }

        /// <summary>
        /// The risk level of the transaction as classified by the [machine learning](https://docs.adyen.com/risk-management/configure-your-risk-profile/machine-learning-rules/) fraud risk rule. The risk level indicates the likelihood that a transaction will result in a fraudulent dispute. The possible return values are: * veryLow * low * medium * high * veryHigh  &gt;
        /// </summary>
        /// <value>The risk level of the transaction as classified by the [machine learning](https://docs.adyen.com/risk-management/configure-your-risk-profile/machine-learning-rules/) fraud risk rule. The risk level indicates the likelihood that a transaction will result in a fraudulent dispute. The possible return values are: * veryLow * low * medium * high * veryHigh  &gt;</value>
        [JsonPropertyName("fraudRiskLevel")]
        public FraudRiskLevelEnum? FraudRiskLevel { get { return this.FraudRiskLevelOption; } set { this.FraudRiskLevelOption = new Option<FraudRiskLevelEnum?>(value); } }

        /// <summary>
        /// The processing model used for the recurring transaction.
        /// </summary>
        /// <value>The processing model used for the recurring transaction.</value>
        public enum RecurringProcessingModelEnum
        {
            /// <summary>
            /// Enum CardOnFile for value: CardOnFile
            /// </summary>
            CardOnFile = 1,

            /// <summary>
            /// Enum Subscription for value: Subscription
            /// </summary>
            Subscription = 2,

            /// <summary>
            /// Enum UnscheduledCardOnFile for value: UnscheduledCardOnFile
            /// </summary>
            UnscheduledCardOnFile = 3
        }

        /// <summary>
        /// Returns a <see cref="RecurringProcessingModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RecurringProcessingModelEnum RecurringProcessingModelEnumFromString(string value)
        {
            if (value.Equals("CardOnFile"))
                return RecurringProcessingModelEnum.CardOnFile;

            if (value.Equals("Subscription"))
                return RecurringProcessingModelEnum.Subscription;

            if (value.Equals("UnscheduledCardOnFile"))
                return RecurringProcessingModelEnum.UnscheduledCardOnFile;

            throw new NotImplementedException($"Could not convert value to type RecurringProcessingModelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RecurringProcessingModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RecurringProcessingModelEnum? RecurringProcessingModelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CardOnFile"))
                return RecurringProcessingModelEnum.CardOnFile;

            if (value.Equals("Subscription"))
                return RecurringProcessingModelEnum.Subscription;

            if (value.Equals("UnscheduledCardOnFile"))
                return RecurringProcessingModelEnum.UnscheduledCardOnFile;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RecurringProcessingModelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RecurringProcessingModelEnumToJsonValue(RecurringProcessingModelEnum? value)
        {
            if (value == RecurringProcessingModelEnum.CardOnFile)
                return "CardOnFile";

            if (value == RecurringProcessingModelEnum.Subscription)
                return "Subscription";

            if (value == RecurringProcessingModelEnum.UnscheduledCardOnFile)
                return "UnscheduledCardOnFile";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of RecurringProcessingModel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RecurringProcessingModelEnum?> RecurringProcessingModelOption { get; private set; }

        /// <summary>
        /// The processing model used for the recurring transaction.
        /// </summary>
        /// <value>The processing model used for the recurring transaction.</value>
        [JsonPropertyName("recurringProcessingModel")]
        public RecurringProcessingModelEnum? RecurringProcessingModel { get { return this.RecurringProcessingModelOption; } set { this.RecurringProcessingModelOption = new Option<RecurringProcessingModelEnum?>(value); } }

        /// <summary>
        /// The operation performed on the token. Possible values:  * **created**: the token has been created. * **updated**: the existing token has been updated. * **alreadyExisting**: the details have already been stored. 
        /// </summary>
        /// <value>The operation performed on the token. Possible values:  * **created**: the token has been created. * **updated**: the existing token has been updated. * **alreadyExisting**: the details have already been stored. </value>
        public enum TokenizationStoreOperationTypeEnum
        {
            /// <summary>
            /// Enum Created for value: created
            /// </summary>
            Created = 1,

            /// <summary>
            /// Enum Updated for value: updated
            /// </summary>
            Updated = 2,

            /// <summary>
            /// Enum AlreadyExisting for value: alreadyExisting
            /// </summary>
            AlreadyExisting = 3
        }

        /// <summary>
        /// Returns a <see cref="TokenizationStoreOperationTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TokenizationStoreOperationTypeEnum TokenizationStoreOperationTypeEnumFromString(string value)
        {
            if (value.Equals("created"))
                return TokenizationStoreOperationTypeEnum.Created;

            if (value.Equals("updated"))
                return TokenizationStoreOperationTypeEnum.Updated;

            if (value.Equals("alreadyExisting"))
                return TokenizationStoreOperationTypeEnum.AlreadyExisting;

            throw new NotImplementedException($"Could not convert value to type TokenizationStoreOperationTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TokenizationStoreOperationTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TokenizationStoreOperationTypeEnum? TokenizationStoreOperationTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("created"))
                return TokenizationStoreOperationTypeEnum.Created;

            if (value.Equals("updated"))
                return TokenizationStoreOperationTypeEnum.Updated;

            if (value.Equals("alreadyExisting"))
                return TokenizationStoreOperationTypeEnum.AlreadyExisting;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TokenizationStoreOperationTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TokenizationStoreOperationTypeEnumToJsonValue(TokenizationStoreOperationTypeEnum? value)
        {
            if (value == TokenizationStoreOperationTypeEnum.Created)
                return "created";

            if (value == TokenizationStoreOperationTypeEnum.Updated)
                return "updated";

            if (value == TokenizationStoreOperationTypeEnum.AlreadyExisting)
                return "alreadyExisting";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of TokenizationStoreOperationType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TokenizationStoreOperationTypeEnum?> TokenizationStoreOperationTypeOption { get; private set; }

        /// <summary>
        /// The operation performed on the token. Possible values:  * **created**: the token has been created. * **updated**: the existing token has been updated. * **alreadyExisting**: the details have already been stored. 
        /// </summary>
        /// <value>The operation performed on the token. Possible values:  * **created**: the token has been created. * **updated**: the existing token has been updated. * **alreadyExisting**: the details have already been stored. </value>
        [JsonPropertyName("tokenization.store.operationType")]
        public TokenizationStoreOperationTypeEnum? TokenizationStoreOperationType { get { return this.TokenizationStoreOperationTypeOption; } set { this.TokenizationStoreOperationTypeOption = new Option<TokenizationStoreOperationTypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of AcquirerAccountCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AcquirerAccountCodeOption { get; private set; }

        /// <summary>
        /// The name of the Adyen acquirer account.  Example: PayPalSandbox_TestAcquirer  &gt; Only relevant for PayPal transactions.
        /// </summary>
        /// <value>The name of the Adyen acquirer account.  Example: PayPalSandbox_TestAcquirer  &gt; Only relevant for PayPal transactions.</value>
        [JsonPropertyName("acquirerAccountCode")]
        public string AcquirerAccountCode { get { return this.AcquirerAccountCodeOption; } set { this.AcquirerAccountCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AcquirerCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AcquirerCodeOption { get; private set; }

        /// <summary>
        /// The name of the acquirer processing the payment request.  Example: TestPmmAcquirer
        /// </summary>
        /// <value>The name of the acquirer processing the payment request.  Example: TestPmmAcquirer</value>
        [JsonPropertyName("acquirerCode")]
        public string AcquirerCode { get { return this.AcquirerCodeOption; } set { this.AcquirerCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AcquirerReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AcquirerReferenceOption { get; private set; }

        /// <summary>
        /// The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.  Example: 7C9N3FNBKT9
        /// </summary>
        /// <value>The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.  Example: 7C9N3FNBKT9</value>
        [JsonPropertyName("acquirerReference")]
        public string AcquirerReference { get { return this.AcquirerReferenceOption; } set { this.AcquirerReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Alias
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AliasOption { get; private set; }

        /// <summary>
        /// The Adyen alias of the card.  Example: H167852639363479
        /// </summary>
        /// <value>The Adyen alias of the card.  Example: H167852639363479</value>
        [JsonPropertyName("alias")]
        public string Alias { get { return this.AliasOption; } set { this.AliasOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AliasType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AliasTypeOption { get; private set; }

        /// <summary>
        /// The type of the card alias.  Example: Default
        /// </summary>
        /// <value>The type of the card alias.  Example: Default</value>
        [JsonPropertyName("aliasType")]
        public string AliasType { get { return this.AliasTypeOption; } set { this.AliasTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AuthCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AuthCodeOption { get; private set; }

        /// <summary>
        /// Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.  Example: 58747
        /// </summary>
        /// <value>Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.  Example: 58747</value>
        [JsonPropertyName("authCode")]
        public string AuthCode { get { return this.AuthCodeOption; } set { this.AuthCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AuthorisationMid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AuthorisationMidOption { get; private set; }

        /// <summary>
        /// Merchant ID known by the acquirer.
        /// </summary>
        /// <value>Merchant ID known by the acquirer.</value>
        [JsonPropertyName("authorisationMid")]
        public string AuthorisationMid { get { return this.AuthorisationMidOption; } set { this.AuthorisationMidOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AuthorisedAmountCurrency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AuthorisedAmountCurrencyOption { get; private set; }

        /// <summary>
        /// The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
        /// </summary>
        /// <value>The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).</value>
        [JsonPropertyName("authorisedAmountCurrency")]
        public string AuthorisedAmountCurrency { get { return this.AuthorisedAmountCurrencyOption; } set { this.AuthorisedAmountCurrencyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AuthorisedAmountValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AuthorisedAmountValueOption { get; private set; }

        /// <summary>
        /// Value of the amount authorised.  This amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
        /// </summary>
        /// <value>Value of the amount authorised.  This amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).</value>
        [JsonPropertyName("authorisedAmountValue")]
        public string AuthorisedAmountValue { get { return this.AuthorisedAmountValueOption; } set { this.AuthorisedAmountValueOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AvsResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AvsResultOption { get; private set; }

        /// <summary>
        /// The AVS result code of the payment, which provides information about the outcome of the AVS check.  For possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).
        /// </summary>
        /// <value>The AVS result code of the payment, which provides information about the outcome of the AVS check.  For possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).</value>
        [JsonPropertyName("avsResult")]
        public string AvsResult { get { return this.AvsResultOption; } set { this.AvsResultOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AvsResultRaw
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AvsResultRawOption { get; private set; }

        /// <summary>
        /// Raw AVS result received from the acquirer, where available.  Example: D
        /// </summary>
        /// <value>Raw AVS result received from the acquirer, where available.  Example: D</value>
        [JsonPropertyName("avsResultRaw")]
        public string AvsResultRaw { get { return this.AvsResultRawOption; } set { this.AvsResultRawOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Bic
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BicOption { get; private set; }

        /// <summary>
        /// BIC of a bank account.  Example: TESTNL01  &gt; Only relevant for SEPA Direct Debit transactions.
        /// </summary>
        /// <value>BIC of a bank account.  Example: TESTNL01  &gt; Only relevant for SEPA Direct Debit transactions.</value>
        [JsonPropertyName("bic")]
        public string Bic { get { return this.BicOption; } set { this.BicOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CoBrandedWith
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CoBrandedWithOption { get; private set; }

        /// <summary>
        /// Includes the co-branded card information.
        /// </summary>
        /// <value>Includes the co-branded card information.</value>
        [JsonPropertyName("coBrandedWith")]
        public string CoBrandedWith { get { return this.CoBrandedWithOption; } set { this.CoBrandedWithOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CvcResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CvcResultOption { get; private set; }

        /// <summary>
        /// The result of CVC verification.
        /// </summary>
        /// <value>The result of CVC verification.</value>
        /* <example>1 Matches</example> */
        [JsonPropertyName("cvcResult")]
        public string CvcResult { get { return this.CvcResultOption; } set { this.CvcResultOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CvcResultRaw
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CvcResultRawOption { get; private set; }

        /// <summary>
        /// The raw result of CVC verification.
        /// </summary>
        /// <value>The raw result of CVC verification.</value>
        /* <example>M</example> */
        [JsonPropertyName("cvcResultRaw")]
        public string CvcResultRaw { get { return this.CvcResultRawOption; } set { this.CvcResultRawOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DsTransID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DsTransIDOption { get; private set; }

        /// <summary>
        /// Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.
        /// </summary>
        /// <value>Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.</value>
        [JsonPropertyName("dsTransID")]
        public string DsTransID { get { return this.DsTransIDOption; } set { this.DsTransIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Eci
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EciOption { get; private set; }

        /// <summary>
        /// The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.  Example: 02
        /// </summary>
        /// <value>The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.  Example: 02</value>
        [JsonPropertyName("eci")]
        public string Eci { get { return this.EciOption; } set { this.EciOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpiryDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExpiryDateOption { get; private set; }

        /// <summary>
        /// The expiry date on the card.  Example: 6/2016  &gt; Returned only in case of a card payment.
        /// </summary>
        /// <value>The expiry date on the card.  Example: 6/2016  &gt; Returned only in case of a card payment.</value>
        [JsonPropertyName("expiryDate")]
        public string ExpiryDate { get { return this.ExpiryDateOption; } set { this.ExpiryDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExtraCostsCurrency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExtraCostsCurrencyOption { get; private set; }

        /// <summary>
        /// The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.  Example: EUR
        /// </summary>
        /// <value>The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.  Example: EUR</value>
        [JsonPropertyName("extraCostsCurrency")]
        public string ExtraCostsCurrency { get { return this.ExtraCostsCurrencyOption; } set { this.ExtraCostsCurrencyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExtraCostsValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExtraCostsValueOption { get; private set; }

        /// <summary>
        /// The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.
        /// </summary>
        /// <value>The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.</value>
        [JsonPropertyName("extraCostsValue")]
        public string ExtraCostsValue { get { return this.ExtraCostsValueOption; } set { this.ExtraCostsValueOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FraudCheckItemNrFraudCheckname
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FraudCheckItemNrFraudChecknameOption { get; private set; }

        /// <summary>
        /// The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.
        /// </summary>
        /// <value>The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.</value>
        [JsonPropertyName("fraudCheck-[itemNr]-[FraudCheckname]")]
        public string FraudCheckItemNrFraudCheckname { get { return this.FraudCheckItemNrFraudChecknameOption; } set { this.FraudCheckItemNrFraudChecknameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FraudManualReview
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FraudManualReviewOption { get; private set; }

        /// <summary>
        /// Indicates if the payment is sent to manual review.
        /// </summary>
        /// <value>Indicates if the payment is sent to manual review.</value>
        [JsonPropertyName("fraudManualReview")]
        public string FraudManualReview { get { return this.FraudManualReviewOption; } set { this.FraudManualReviewOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FundingSource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FundingSourceOption { get; private set; }

        /// <summary>
        /// Information regarding the funding type of the card. The possible return values are: * CHARGE * CREDIT * DEBIT * PREPAID * PREPAID_RELOADABLE  * PREPAID_NONRELOADABLE * DEFFERED_DEBIT  &gt; This functionality requires additional configuration on Adyen&#39;s end. To enable it, contact the Support Team.  For receiving this field in the notification, enable **Include Funding Source** in **Notifications** &gt; **Additional settings**.
        /// </summary>
        /// <value>Information regarding the funding type of the card. The possible return values are: * CHARGE * CREDIT * DEBIT * PREPAID * PREPAID_RELOADABLE  * PREPAID_NONRELOADABLE * DEFFERED_DEBIT  &gt; This functionality requires additional configuration on Adyen&#39;s end. To enable it, contact the Support Team.  For receiving this field in the notification, enable **Include Funding Source** in **Notifications** &gt; **Additional settings**.</value>
        [JsonPropertyName("fundingSource")]
        public string FundingSource { get { return this.FundingSourceOption; } set { this.FundingSourceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FundsAvailability
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FundsAvailabilityOption { get; private set; }

        /// <summary>
        /// Indicates availability of funds.  Visa: * \&quot;I\&quot; (fast funds are supported) * \&quot;N\&quot; (otherwise)  Mastercard: * \&quot;I\&quot; (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \&quot;N\&quot; (otherwise)  &gt; Returned when you verify a card BIN or estimate costs, and only if payoutEligible is \&quot;Y\&quot; or \&quot;D\&quot;.
        /// </summary>
        /// <value>Indicates availability of funds.  Visa: * \&quot;I\&quot; (fast funds are supported) * \&quot;N\&quot; (otherwise)  Mastercard: * \&quot;I\&quot; (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \&quot;N\&quot; (otherwise)  &gt; Returned when you verify a card BIN or estimate costs, and only if payoutEligible is \&quot;Y\&quot; or \&quot;D\&quot;.</value>
        [JsonPropertyName("fundsAvailability")]
        public string FundsAvailability { get { return this.FundsAvailabilityOption; } set { this.FundsAvailabilityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InferredRefusalReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InferredRefusalReasonOption { get; private set; }

        /// <summary>
        /// Provides the more granular indication of why a transaction was refused. When a transaction fails with either \&quot;Refused\&quot;, \&quot;Restricted Card\&quot;, \&quot;Transaction Not Permitted\&quot;, \&quot;Not supported\&quot; or \&quot;DeclinedNon Generic\&quot; refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the &#x60;inferredRefusalReason&#x60;, field is populated and the &#x60;refusalReason&#x60;, is set to \&quot;Not Supported\&quot;.  Possible values:  * 3D Secure Mandated * Closed Account * ContAuth Not Supported * CVC Mandated * Ecommerce Not Allowed * Crossborder Not Supported * Card Updated  * Low Authrate Bin * Non-reloadable prepaid card
        /// </summary>
        /// <value>Provides the more granular indication of why a transaction was refused. When a transaction fails with either \&quot;Refused\&quot;, \&quot;Restricted Card\&quot;, \&quot;Transaction Not Permitted\&quot;, \&quot;Not supported\&quot; or \&quot;DeclinedNon Generic\&quot; refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the &#x60;inferredRefusalReason&#x60;, field is populated and the &#x60;refusalReason&#x60;, is set to \&quot;Not Supported\&quot;.  Possible values:  * 3D Secure Mandated * Closed Account * ContAuth Not Supported * CVC Mandated * Ecommerce Not Allowed * Crossborder Not Supported * Card Updated  * Low Authrate Bin * Non-reloadable prepaid card</value>
        [JsonPropertyName("inferredRefusalReason")]
        public string InferredRefusalReason { get { return this.InferredRefusalReasonOption; } set { this.InferredRefusalReasonOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsCardCommercial
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IsCardCommercialOption { get; private set; }

        /// <summary>
        /// Indicates if the card is used for business purposes only.
        /// </summary>
        /// <value>Indicates if the card is used for business purposes only.</value>
        [JsonPropertyName("isCardCommercial")]
        public string IsCardCommercial { get { return this.IsCardCommercialOption; } set { this.IsCardCommercialOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IssuerCountry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IssuerCountryOption { get; private set; }

        /// <summary>
        /// The issuing country of the card based on the BIN list that Adyen maintains.  Example: JP
        /// </summary>
        /// <value>The issuing country of the card based on the BIN list that Adyen maintains.  Example: JP</value>
        [JsonPropertyName("issuerCountry")]
        public string IssuerCountry { get { return this.IssuerCountryOption; } set { this.IssuerCountryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LiabilityShift
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LiabilityShiftOption { get; private set; }

        /// <summary>
        /// A Boolean value indicating whether a liability shift was offered for this payment.
        /// </summary>
        /// <value>A Boolean value indicating whether a liability shift was offered for this payment.</value>
        [JsonPropertyName("liabilityShift")]
        public string LiabilityShift { get { return this.LiabilityShiftOption; } set { this.LiabilityShiftOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of McBankNetReferenceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> McBankNetReferenceNumberOption { get; private set; }

        /// <summary>
        /// The &#x60;mcBankNetReferenceNumber&#x60;, is a minimum of six characters and a maximum of nine characters long.  &gt; Contact Support Team to enable this field.
        /// </summary>
        /// <value>The &#x60;mcBankNetReferenceNumber&#x60;, is a minimum of six characters and a maximum of nine characters long.  &gt; Contact Support Team to enable this field.</value>
        [JsonPropertyName("mcBankNetReferenceNumber")]
        public string McBankNetReferenceNumber { get { return this.McBankNetReferenceNumberOption; } set { this.McBankNetReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MerchantAdviceCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MerchantAdviceCodeOption { get; private set; }

        /// <summary>
        /// The Merchant Advice Code (MAC) can be returned by Mastercard issuers for refused payments. If present, the MAC contains information about why the payment failed, and whether it can be retried.  For more information see [Mastercard Merchant Advice Codes](https://docs.adyen.com/development-resources/raw-acquirer-responses#mastercard-merchant-advice-codes).
        /// </summary>
        /// <value>The Merchant Advice Code (MAC) can be returned by Mastercard issuers for refused payments. If present, the MAC contains information about why the payment failed, and whether it can be retried.  For more information see [Mastercard Merchant Advice Codes](https://docs.adyen.com/development-resources/raw-acquirer-responses#mastercard-merchant-advice-codes).</value>
        [JsonPropertyName("merchantAdviceCode")]
        public string MerchantAdviceCode { get { return this.MerchantAdviceCodeOption; } set { this.MerchantAdviceCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MerchantReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MerchantReferenceOption { get; private set; }

        /// <summary>
        /// The reference provided for the transaction.
        /// </summary>
        /// <value>The reference provided for the transaction.</value>
        [JsonPropertyName("merchantReference")]
        public string MerchantReference { get { return this.MerchantReferenceOption; } set { this.MerchantReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NetworkTxReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NetworkTxReferenceOption { get; private set; }

        /// <summary>
        /// Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.
        /// </summary>
        /// <value>Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.</value>
        [JsonPropertyName("networkTxReference")]
        public string NetworkTxReference { get { return this.NetworkTxReferenceOption; } set { this.NetworkTxReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OwnerName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OwnerNameOption { get; private set; }

        /// <summary>
        /// The owner name of a bank account.  Only relevant for SEPA Direct Debit transactions.
        /// </summary>
        /// <value>The owner name of a bank account.  Only relevant for SEPA Direct Debit transactions.</value>
        [JsonPropertyName("ownerName")]
        public string OwnerName { get { return this.OwnerNameOption; } set { this.OwnerNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAccountReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentAccountReferenceOption { get; private set; }

        /// <summary>
        /// The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.
        /// </summary>
        /// <value>The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.</value>
        [JsonPropertyName("paymentAccountReference")]
        public string PaymentAccountReference { get { return this.PaymentAccountReferenceOption; } set { this.PaymentAccountReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentMethodOption { get; private set; }

        /// <summary>
        /// The payment method used in the transaction.
        /// </summary>
        /// <value>The payment method used in the transaction.</value>
        [JsonPropertyName("paymentMethod")]
        public string PaymentMethod { get { return this.PaymentMethodOption; } set { this.PaymentMethodOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethodVariant
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentMethodVariantOption { get; private set; }

        /// <summary>
        /// The Adyen sub-variant of the payment method used for the payment request.  For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).  Example: mcpro
        /// </summary>
        /// <value>The Adyen sub-variant of the payment method used for the payment request.  For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).  Example: mcpro</value>
        [JsonPropertyName("paymentMethodVariant")]
        public string PaymentMethodVariant { get { return this.PaymentMethodVariantOption; } set { this.PaymentMethodVariantOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PayoutEligible
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayoutEligibleOption { get; private set; }

        /// <summary>
        /// Indicates whether a payout is eligible or not for this card.  Visa: * \&quot;Y\&quot; * \&quot;N\&quot;  Mastercard: * \&quot;Y\&quot; (domestic and cross-border)  * \&quot;D\&quot; (only domestic) * \&quot;N\&quot; (no MoneySend) * \&quot;U\&quot; (unknown)
        /// </summary>
        /// <value>Indicates whether a payout is eligible or not for this card.  Visa: * \&quot;Y\&quot; * \&quot;N\&quot;  Mastercard: * \&quot;Y\&quot; (domestic and cross-border)  * \&quot;D\&quot; (only domestic) * \&quot;N\&quot; (no MoneySend) * \&quot;U\&quot; (unknown)</value>
        [JsonPropertyName("payoutEligible")]
        public string PayoutEligible { get { return this.PayoutEligibleOption; } set { this.PayoutEligibleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RealtimeAccountUpdaterStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RealtimeAccountUpdaterStatusOption { get; private set; }

        /// <summary>
        /// The response code from the Real Time Account Updater service.  Possible return values are: * CardChanged * CardExpiryChanged * CloseAccount  * ContactCardAccountHolder
        /// </summary>
        /// <value>The response code from the Real Time Account Updater service.  Possible return values are: * CardChanged * CardExpiryChanged * CloseAccount  * ContactCardAccountHolder</value>
        [JsonPropertyName("realtimeAccountUpdaterStatus")]
        public string RealtimeAccountUpdaterStatus { get { return this.RealtimeAccountUpdaterStatusOption; } set { this.RealtimeAccountUpdaterStatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReceiptFreeText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReceiptFreeTextOption { get; private set; }

        /// <summary>
        /// Message to be displayed on the terminal.
        /// </summary>
        /// <value>Message to be displayed on the terminal.</value>
        [JsonPropertyName("receiptFreeText")]
        public string ReceiptFreeText { get { return this.ReceiptFreeTextOption; } set { this.ReceiptFreeTextOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecurringContractTypes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringContractTypesOption { get; private set; }

        /// <summary>
        /// The recurring contract types applicable to the transaction.
        /// </summary>
        /// <value>The recurring contract types applicable to the transaction.</value>
        [JsonPropertyName("recurring.contractTypes")]
        public string RecurringContractTypes { get { return this.RecurringContractTypesOption; } set { this.RecurringContractTypesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecurringFirstPspReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringFirstPspReferenceOption { get; private set; }

        /// <summary>
        /// The &#x60;pspReference&#x60;, of the first recurring payment that created the recurring detail.  This functionality requires additional configuration on Adyen&#39;s end. To enable it, contact the Support Team.
        /// </summary>
        /// <value>The &#x60;pspReference&#x60;, of the first recurring payment that created the recurring detail.  This functionality requires additional configuration on Adyen&#39;s end. To enable it, contact the Support Team.</value>
        [JsonPropertyName("recurring.firstPspReference")]
        public string RecurringFirstPspReference { get { return this.RecurringFirstPspReferenceOption; } set { this.RecurringFirstPspReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecurringRecurringDetailReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringRecurringDetailReferenceOption { get; private set; }

        /// <summary>
        /// The reference that uniquely identifies the recurring transaction.
        /// </summary>
        /// <value>The reference that uniquely identifies the recurring transaction.</value>
        [JsonPropertyName("recurring.recurringDetailReference")]
        [Obsolete]
        public string RecurringRecurringDetailReference { get { return this.RecurringRecurringDetailReferenceOption; } set { this.RecurringRecurringDetailReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecurringShopperReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringShopperReferenceOption { get; private set; }

        /// <summary>
        /// The provided reference of the shopper for a recurring transaction.
        /// </summary>
        /// <value>The provided reference of the shopper for a recurring transaction.</value>
        [JsonPropertyName("recurring.shopperReference")]
        [Obsolete]
        public string RecurringShopperReference { get { return this.RecurringShopperReferenceOption; } set { this.RecurringShopperReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Referred
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferredOption { get; private set; }

        /// <summary>
        /// If the payment is referred, this field is set to true.  This field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.  Example: true
        /// </summary>
        /// <value>If the payment is referred, this field is set to true.  This field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.  Example: true</value>
        [JsonPropertyName("referred")]
        public string Referred { get { return this.ReferredOption; } set { this.ReferredOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefusalReasonRaw
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RefusalReasonRawOption { get; private set; }

        /// <summary>
        /// Raw refusal reason received from the acquirer, where available.  Example: AUTHORISED
        /// </summary>
        /// <value>Raw refusal reason received from the acquirer, where available.  Example: AUTHORISED</value>
        [JsonPropertyName("refusalReasonRaw")]
        public string RefusalReasonRaw { get { return this.RefusalReasonRawOption; } set { this.RefusalReasonRawOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RequestAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RequestAmountOption { get; private set; }

        /// <summary>
        /// The amount of the payment request.
        /// </summary>
        /// <value>The amount of the payment request.</value>
        [JsonPropertyName("requestAmount")]
        public string RequestAmount { get { return this.RequestAmountOption; } set { this.RequestAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RequestCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RequestCurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency of the payment request.
        /// </summary>
        /// <value>The currency of the payment request.</value>
        [JsonPropertyName("requestCurrencyCode")]
        public string RequestCurrencyCode { get { return this.RequestCurrencyCodeOption; } set { this.RequestCurrencyCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperInteraction
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperInteractionOption { get; private set; }

        /// <summary>
        /// The shopper interaction type of the payment request.  Example: Ecommerce
        /// </summary>
        /// <value>The shopper interaction type of the payment request.  Example: Ecommerce</value>
        [JsonPropertyName("shopperInteraction")]
        public string ShopperInteraction { get { return this.ShopperInteractionOption; } set { this.ShopperInteractionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperReferenceOption { get; private set; }

        /// <summary>
        /// The shopperReference passed in the payment request.  Example: AdyenTestShopperXX
        /// </summary>
        /// <value>The shopperReference passed in the payment request.  Example: AdyenTestShopperXX</value>
        [JsonPropertyName("shopperReference")]
        public string ShopperReference { get { return this.ShopperReferenceOption; } set { this.ShopperReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TerminalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TerminalIdOption { get; private set; }

        /// <summary>
        /// The terminal ID used in a point-of-sale payment.  Example: 06022622
        /// </summary>
        /// <value>The terminal ID used in a point-of-sale payment.  Example: 06022622</value>
        [JsonPropertyName("terminalId")]
        public string TerminalId { get { return this.TerminalIdOption; } set { this.TerminalIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDAuthenticated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDAuthenticatedOption { get; private set; }

        /// <summary>
        /// A Boolean value indicating whether 3DS authentication was completed on this payment.  Example: true
        /// </summary>
        /// <value>A Boolean value indicating whether 3DS authentication was completed on this payment.  Example: true</value>
        [JsonPropertyName("threeDAuthenticated")]
        public string ThreeDAuthenticated { get { return this.ThreeDAuthenticatedOption; } set { this.ThreeDAuthenticatedOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDAuthenticatedResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDAuthenticatedResponseOption { get; private set; }

        /// <summary>
        /// The raw 3DS authentication result from the card issuer.  Example: N
        /// </summary>
        /// <value>The raw 3DS authentication result from the card issuer.  Example: N</value>
        [JsonPropertyName("threeDAuthenticatedResponse")]
        public string ThreeDAuthenticatedResponse { get { return this.ThreeDAuthenticatedResponseOption; } set { this.ThreeDAuthenticatedResponseOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDOffered
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDOfferedOption { get; private set; }

        /// <summary>
        /// A Boolean value indicating whether 3DS was offered for this payment.  Example: true
        /// </summary>
        /// <value>A Boolean value indicating whether 3DS was offered for this payment.  Example: true</value>
        [JsonPropertyName("threeDOffered")]
        public string ThreeDOffered { get { return this.ThreeDOfferedOption; } set { this.ThreeDOfferedOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDOfferedResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDOfferedResponseOption { get; private set; }

        /// <summary>
        /// The raw enrollment result from the 3DS directory services of the card schemes.  Example: Y
        /// </summary>
        /// <value>The raw enrollment result from the 3DS directory services of the card schemes.  Example: Y</value>
        [JsonPropertyName("threeDOfferedResponse")]
        public string ThreeDOfferedResponse { get { return this.ThreeDOfferedResponseOption; } set { this.ThreeDOfferedResponseOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSVersionOption { get; private set; }

        /// <summary>
        /// The 3D Secure 2 version.
        /// </summary>
        /// <value>The 3D Secure 2 version.</value>
        [JsonPropertyName("threeDSVersion")]
        public string ThreeDSVersion { get { return this.ThreeDSVersionOption; } set { this.ThreeDSVersionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TokenizationShopperReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TokenizationShopperReferenceOption { get; private set; }

        /// <summary>
        /// The reference for the shopper that you sent when tokenizing the payment details.
        /// </summary>
        /// <value>The reference for the shopper that you sent when tokenizing the payment details.</value>
        [JsonPropertyName("tokenization.shopperReference")]
        public string TokenizationShopperReference { get { return this.TokenizationShopperReferenceOption; } set { this.TokenizationShopperReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TokenizationStoredPaymentMethodId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TokenizationStoredPaymentMethodIdOption { get; private set; }

        /// <summary>
        /// The reference that uniquely identifies tokenized payment details.
        /// </summary>
        /// <value>The reference that uniquely identifies tokenized payment details.</value>
        [JsonPropertyName("tokenization.storedPaymentMethodId")]
        public string TokenizationStoredPaymentMethodId { get { return this.TokenizationStoredPaymentMethodIdOption; } set { this.TokenizationStoredPaymentMethodIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VisaTransactionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> VisaTransactionIdOption { get; private set; }

        /// <summary>
        /// The &#x60;visaTransactionId&#x60;, has a fixed length of 15 numeric characters.  &gt; Contact Support Team to enable this field.
        /// </summary>
        /// <value>The &#x60;visaTransactionId&#x60;, has a fixed length of 15 numeric characters.  &gt; Contact Support Team to enable this field.</value>
        [JsonPropertyName("visaTransactionId")]
        public string VisaTransactionId { get { return this.VisaTransactionIdOption; } set { this.VisaTransactionIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Xid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> XidOption { get; private set; }

        /// <summary>
        /// The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse &#39;N&#39; or &#39;Y&#39;.   Example: ODgxNDc2MDg2MDExODk5MAAAAAA&#x3D;
        /// </summary>
        /// <value>The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse &#39;N&#39; or &#39;Y&#39;.   Example: ODgxNDc2MDg2MDExODk5MAAAAAA&#x3D;</value>
        [JsonPropertyName("xid")]
        public string Xid { get { return this.XidOption; } set { this.XidOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseAdditionalDataCommon {\n");
            sb.Append("  AcquirerAccountCode: ").Append(AcquirerAccountCode).Append("\n");
            sb.Append("  AcquirerCode: ").Append(AcquirerCode).Append("\n");
            sb.Append("  AcquirerReference: ").Append(AcquirerReference).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  AliasType: ").Append(AliasType).Append("\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  AuthorisationMid: ").Append(AuthorisationMid).Append("\n");
            sb.Append("  AuthorisedAmountCurrency: ").Append(AuthorisedAmountCurrency).Append("\n");
            sb.Append("  AuthorisedAmountValue: ").Append(AuthorisedAmountValue).Append("\n");
            sb.Append("  AvsResult: ").Append(AvsResult).Append("\n");
            sb.Append("  AvsResultRaw: ").Append(AvsResultRaw).Append("\n");
            sb.Append("  Bic: ").Append(Bic).Append("\n");
            sb.Append("  CoBrandedWith: ").Append(CoBrandedWith).Append("\n");
            sb.Append("  CvcResult: ").Append(CvcResult).Append("\n");
            sb.Append("  CvcResultRaw: ").Append(CvcResultRaw).Append("\n");
            sb.Append("  DsTransID: ").Append(DsTransID).Append("\n");
            sb.Append("  Eci: ").Append(Eci).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  ExtraCostsCurrency: ").Append(ExtraCostsCurrency).Append("\n");
            sb.Append("  ExtraCostsValue: ").Append(ExtraCostsValue).Append("\n");
            sb.Append("  FraudCheckItemNrFraudCheckname: ").Append(FraudCheckItemNrFraudCheckname).Append("\n");
            sb.Append("  FraudManualReview: ").Append(FraudManualReview).Append("\n");
            sb.Append("  FraudResultType: ").Append(FraudResultType).Append("\n");
            sb.Append("  FraudRiskLevel: ").Append(FraudRiskLevel).Append("\n");
            sb.Append("  FundingSource: ").Append(FundingSource).Append("\n");
            sb.Append("  FundsAvailability: ").Append(FundsAvailability).Append("\n");
            sb.Append("  InferredRefusalReason: ").Append(InferredRefusalReason).Append("\n");
            sb.Append("  IsCardCommercial: ").Append(IsCardCommercial).Append("\n");
            sb.Append("  IssuerCountry: ").Append(IssuerCountry).Append("\n");
            sb.Append("  LiabilityShift: ").Append(LiabilityShift).Append("\n");
            sb.Append("  McBankNetReferenceNumber: ").Append(McBankNetReferenceNumber).Append("\n");
            sb.Append("  MerchantAdviceCode: ").Append(MerchantAdviceCode).Append("\n");
            sb.Append("  MerchantReference: ").Append(MerchantReference).Append("\n");
            sb.Append("  NetworkTxReference: ").Append(NetworkTxReference).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  PaymentAccountReference: ").Append(PaymentAccountReference).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentMethodVariant: ").Append(PaymentMethodVariant).Append("\n");
            sb.Append("  PayoutEligible: ").Append(PayoutEligible).Append("\n");
            sb.Append("  RealtimeAccountUpdaterStatus: ").Append(RealtimeAccountUpdaterStatus).Append("\n");
            sb.Append("  ReceiptFreeText: ").Append(ReceiptFreeText).Append("\n");
            sb.Append("  RecurringContractTypes: ").Append(RecurringContractTypes).Append("\n");
            sb.Append("  RecurringFirstPspReference: ").Append(RecurringFirstPspReference).Append("\n");
            sb.Append("  RecurringRecurringDetailReference: ").Append(RecurringRecurringDetailReference).Append("\n");
            sb.Append("  RecurringShopperReference: ").Append(RecurringShopperReference).Append("\n");
            sb.Append("  RecurringProcessingModel: ").Append(RecurringProcessingModel).Append("\n");
            sb.Append("  Referred: ").Append(Referred).Append("\n");
            sb.Append("  RefusalReasonRaw: ").Append(RefusalReasonRaw).Append("\n");
            sb.Append("  RequestAmount: ").Append(RequestAmount).Append("\n");
            sb.Append("  RequestCurrencyCode: ").Append(RequestCurrencyCode).Append("\n");
            sb.Append("  ShopperInteraction: ").Append(ShopperInteraction).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  ThreeDAuthenticated: ").Append(ThreeDAuthenticated).Append("\n");
            sb.Append("  ThreeDAuthenticatedResponse: ").Append(ThreeDAuthenticatedResponse).Append("\n");
            sb.Append("  ThreeDOffered: ").Append(ThreeDOffered).Append("\n");
            sb.Append("  ThreeDOfferedResponse: ").Append(ThreeDOfferedResponse).Append("\n");
            sb.Append("  ThreeDSVersion: ").Append(ThreeDSVersion).Append("\n");
            sb.Append("  TokenizationShopperReference: ").Append(TokenizationShopperReference).Append("\n");
            sb.Append("  TokenizationStoreOperationType: ").Append(TokenizationStoreOperationType).Append("\n");
            sb.Append("  TokenizationStoredPaymentMethodId: ").Append(TokenizationStoredPaymentMethodId).Append("\n");
            sb.Append("  VisaTransactionId: ").Append(VisaTransactionId).Append("\n");
            sb.Append("  Xid: ").Append(Xid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResponseAdditionalDataCommon" />
    /// </summary>
    public class ResponseAdditionalDataCommonJsonConverter : JsonConverter<ResponseAdditionalDataCommon>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResponseAdditionalDataCommon" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResponseAdditionalDataCommon Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> acquirerAccountCode = default;
            Option<string> acquirerCode = default;
            Option<string> acquirerReference = default;
            Option<string> alias = default;
            Option<string> aliasType = default;
            Option<string> authCode = default;
            Option<string> authorisationMid = default;
            Option<string> authorisedAmountCurrency = default;
            Option<string> authorisedAmountValue = default;
            Option<string> avsResult = default;
            Option<string> avsResultRaw = default;
            Option<string> bic = default;
            Option<string> coBrandedWith = default;
            Option<string> cvcResult = default;
            Option<string> cvcResultRaw = default;
            Option<string> dsTransID = default;
            Option<string> eci = default;
            Option<string> expiryDate = default;
            Option<string> extraCostsCurrency = default;
            Option<string> extraCostsValue = default;
            Option<string> fraudCheckItemNrFraudCheckname = default;
            Option<string> fraudManualReview = default;
            Option<ResponseAdditionalDataCommon.FraudResultTypeEnum?> fraudResultType = default;
            Option<ResponseAdditionalDataCommon.FraudRiskLevelEnum?> fraudRiskLevel = default;
            Option<string> fundingSource = default;
            Option<string> fundsAvailability = default;
            Option<string> inferredRefusalReason = default;
            Option<string> isCardCommercial = default;
            Option<string> issuerCountry = default;
            Option<string> liabilityShift = default;
            Option<string> mcBankNetReferenceNumber = default;
            Option<string> merchantAdviceCode = default;
            Option<string> merchantReference = default;
            Option<string> networkTxReference = default;
            Option<string> ownerName = default;
            Option<string> paymentAccountReference = default;
            Option<string> paymentMethod = default;
            Option<string> paymentMethodVariant = default;
            Option<string> payoutEligible = default;
            Option<string> realtimeAccountUpdaterStatus = default;
            Option<string> receiptFreeText = default;
            Option<string> recurringContractTypes = default;
            Option<string> recurringFirstPspReference = default;
            Option<string> recurringRecurringDetailReference = default;
            Option<string> recurringShopperReference = default;
            Option<ResponseAdditionalDataCommon.RecurringProcessingModelEnum?> recurringProcessingModel = default;
            Option<string> referred = default;
            Option<string> refusalReasonRaw = default;
            Option<string> requestAmount = default;
            Option<string> requestCurrencyCode = default;
            Option<string> shopperInteraction = default;
            Option<string> shopperReference = default;
            Option<string> terminalId = default;
            Option<string> threeDAuthenticated = default;
            Option<string> threeDAuthenticatedResponse = default;
            Option<string> threeDOffered = default;
            Option<string> threeDOfferedResponse = default;
            Option<string> threeDSVersion = default;
            Option<string> tokenizationShopperReference = default;
            Option<ResponseAdditionalDataCommon.TokenizationStoreOperationTypeEnum?> tokenizationStoreOperationType = default;
            Option<string> tokenizationStoredPaymentMethodId = default;
            Option<string> visaTransactionId = default;
            Option<string> xid = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "acquirerAccountCode":
                            acquirerAccountCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "acquirerCode":
                            acquirerCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "acquirerReference":
                            acquirerReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "alias":
                            alias = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "aliasType":
                            aliasType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "authCode":
                            authCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "authorisationMid":
                            authorisationMid = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "authorisedAmountCurrency":
                            authorisedAmountCurrency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "authorisedAmountValue":
                            authorisedAmountValue = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "avsResult":
                            avsResult = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "avsResultRaw":
                            avsResultRaw = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bic":
                            bic = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "coBrandedWith":
                            coBrandedWith = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cvcResult":
                            cvcResult = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cvcResultRaw":
                            cvcResultRaw = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dsTransID":
                            dsTransID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "eci":
                            eci = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expiryDate":
                            expiryDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "extraCostsCurrency":
                            extraCostsCurrency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "extraCostsValue":
                            extraCostsValue = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fraudCheck-[itemNr]-[FraudCheckname]":
                            fraudCheckItemNrFraudCheckname = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fraudManualReview":
                            fraudManualReview = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fraudResultType":
                            string fraudResultTypeRawValue = utf8JsonReader.GetString();
                            if (fraudResultTypeRawValue != null)
                                fraudResultType = new Option<ResponseAdditionalDataCommon.FraudResultTypeEnum?>(ResponseAdditionalDataCommon.FraudResultTypeEnumFromStringOrDefault(fraudResultTypeRawValue));
                            break;
                        case "fraudRiskLevel":
                            string fraudRiskLevelRawValue = utf8JsonReader.GetString();
                            if (fraudRiskLevelRawValue != null)
                                fraudRiskLevel = new Option<ResponseAdditionalDataCommon.FraudRiskLevelEnum?>(ResponseAdditionalDataCommon.FraudRiskLevelEnumFromStringOrDefault(fraudRiskLevelRawValue));
                            break;
                        case "fundingSource":
                            fundingSource = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fundsAvailability":
                            fundsAvailability = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "inferredRefusalReason":
                            inferredRefusalReason = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isCardCommercial":
                            isCardCommercial = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "issuerCountry":
                            issuerCountry = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "liabilityShift":
                            liabilityShift = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mcBankNetReferenceNumber":
                            mcBankNetReferenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantAdviceCode":
                            merchantAdviceCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantReference":
                            merchantReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "networkTxReference":
                            networkTxReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ownerName":
                            ownerName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentAccountReference":
                            paymentAccountReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentMethod":
                            paymentMethod = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentMethodVariant":
                            paymentMethodVariant = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "payoutEligible":
                            payoutEligible = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "realtimeAccountUpdaterStatus":
                            realtimeAccountUpdaterStatus = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "receiptFreeText":
                            receiptFreeText = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurring.contractTypes":
                            recurringContractTypes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurring.firstPspReference":
                            recurringFirstPspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurring.recurringDetailReference":
                            recurringRecurringDetailReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurring.shopperReference":
                            recurringShopperReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurringProcessingModel":
                            string recurringProcessingModelRawValue = utf8JsonReader.GetString();
                            if (recurringProcessingModelRawValue != null)
                                recurringProcessingModel = new Option<ResponseAdditionalDataCommon.RecurringProcessingModelEnum?>(ResponseAdditionalDataCommon.RecurringProcessingModelEnumFromStringOrDefault(recurringProcessingModelRawValue));
                            break;
                        case "referred":
                            referred = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refusalReasonRaw":
                            refusalReasonRaw = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "requestAmount":
                            requestAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "requestCurrencyCode":
                            requestCurrencyCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperInteraction":
                            shopperInteraction = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperReference":
                            shopperReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "terminalId":
                            terminalId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDAuthenticated":
                            threeDAuthenticated = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDAuthenticatedResponse":
                            threeDAuthenticatedResponse = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDOffered":
                            threeDOffered = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDOfferedResponse":
                            threeDOfferedResponse = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDSVersion":
                            threeDSVersion = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tokenization.shopperReference":
                            tokenizationShopperReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tokenization.store.operationType":
                            string tokenizationStoreOperationTypeRawValue = utf8JsonReader.GetString();
                            if (tokenizationStoreOperationTypeRawValue != null)
                                tokenizationStoreOperationType = new Option<ResponseAdditionalDataCommon.TokenizationStoreOperationTypeEnum?>(ResponseAdditionalDataCommon.TokenizationStoreOperationTypeEnumFromStringOrDefault(tokenizationStoreOperationTypeRawValue));
                            break;
                        case "tokenization.storedPaymentMethodId":
                            tokenizationStoredPaymentMethodId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "visaTransactionId":
                            visaTransactionId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "xid":
                            xid = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (acquirerAccountCode.IsSet && acquirerAccountCode.Value == null)
                throw new ArgumentNullException(nameof(acquirerAccountCode), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (acquirerCode.IsSet && acquirerCode.Value == null)
                throw new ArgumentNullException(nameof(acquirerCode), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (acquirerReference.IsSet && acquirerReference.Value == null)
                throw new ArgumentNullException(nameof(acquirerReference), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (alias.IsSet && alias.Value == null)
                throw new ArgumentNullException(nameof(alias), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (aliasType.IsSet && aliasType.Value == null)
                throw new ArgumentNullException(nameof(aliasType), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (authCode.IsSet && authCode.Value == null)
                throw new ArgumentNullException(nameof(authCode), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (authorisationMid.IsSet && authorisationMid.Value == null)
                throw new ArgumentNullException(nameof(authorisationMid), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (authorisedAmountCurrency.IsSet && authorisedAmountCurrency.Value == null)
                throw new ArgumentNullException(nameof(authorisedAmountCurrency), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (authorisedAmountValue.IsSet && authorisedAmountValue.Value == null)
                throw new ArgumentNullException(nameof(authorisedAmountValue), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (avsResult.IsSet && avsResult.Value == null)
                throw new ArgumentNullException(nameof(avsResult), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (avsResultRaw.IsSet && avsResultRaw.Value == null)
                throw new ArgumentNullException(nameof(avsResultRaw), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (bic.IsSet && bic.Value == null)
                throw new ArgumentNullException(nameof(bic), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (coBrandedWith.IsSet && coBrandedWith.Value == null)
                throw new ArgumentNullException(nameof(coBrandedWith), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (cvcResult.IsSet && cvcResult.Value == null)
                throw new ArgumentNullException(nameof(cvcResult), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (cvcResultRaw.IsSet && cvcResultRaw.Value == null)
                throw new ArgumentNullException(nameof(cvcResultRaw), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (dsTransID.IsSet && dsTransID.Value == null)
                throw new ArgumentNullException(nameof(dsTransID), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (eci.IsSet && eci.Value == null)
                throw new ArgumentNullException(nameof(eci), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (expiryDate.IsSet && expiryDate.Value == null)
                throw new ArgumentNullException(nameof(expiryDate), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (extraCostsCurrency.IsSet && extraCostsCurrency.Value == null)
                throw new ArgumentNullException(nameof(extraCostsCurrency), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (extraCostsValue.IsSet && extraCostsValue.Value == null)
                throw new ArgumentNullException(nameof(extraCostsValue), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (fraudCheckItemNrFraudCheckname.IsSet && fraudCheckItemNrFraudCheckname.Value == null)
                throw new ArgumentNullException(nameof(fraudCheckItemNrFraudCheckname), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (fraudManualReview.IsSet && fraudManualReview.Value == null)
                throw new ArgumentNullException(nameof(fraudManualReview), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (fraudResultType.IsSet && fraudResultType.Value == null)
                throw new ArgumentNullException(nameof(fraudResultType), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (fraudRiskLevel.IsSet && fraudRiskLevel.Value == null)
                throw new ArgumentNullException(nameof(fraudRiskLevel), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (fundingSource.IsSet && fundingSource.Value == null)
                throw new ArgumentNullException(nameof(fundingSource), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (fundsAvailability.IsSet && fundsAvailability.Value == null)
                throw new ArgumentNullException(nameof(fundsAvailability), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (inferredRefusalReason.IsSet && inferredRefusalReason.Value == null)
                throw new ArgumentNullException(nameof(inferredRefusalReason), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (isCardCommercial.IsSet && isCardCommercial.Value == null)
                throw new ArgumentNullException(nameof(isCardCommercial), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (issuerCountry.IsSet && issuerCountry.Value == null)
                throw new ArgumentNullException(nameof(issuerCountry), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (liabilityShift.IsSet && liabilityShift.Value == null)
                throw new ArgumentNullException(nameof(liabilityShift), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (mcBankNetReferenceNumber.IsSet && mcBankNetReferenceNumber.Value == null)
                throw new ArgumentNullException(nameof(mcBankNetReferenceNumber), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (merchantAdviceCode.IsSet && merchantAdviceCode.Value == null)
                throw new ArgumentNullException(nameof(merchantAdviceCode), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (merchantReference.IsSet && merchantReference.Value == null)
                throw new ArgumentNullException(nameof(merchantReference), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (networkTxReference.IsSet && networkTxReference.Value == null)
                throw new ArgumentNullException(nameof(networkTxReference), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (ownerName.IsSet && ownerName.Value == null)
                throw new ArgumentNullException(nameof(ownerName), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (paymentAccountReference.IsSet && paymentAccountReference.Value == null)
                throw new ArgumentNullException(nameof(paymentAccountReference), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (paymentMethod.IsSet && paymentMethod.Value == null)
                throw new ArgumentNullException(nameof(paymentMethod), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (paymentMethodVariant.IsSet && paymentMethodVariant.Value == null)
                throw new ArgumentNullException(nameof(paymentMethodVariant), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (payoutEligible.IsSet && payoutEligible.Value == null)
                throw new ArgumentNullException(nameof(payoutEligible), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (realtimeAccountUpdaterStatus.IsSet && realtimeAccountUpdaterStatus.Value == null)
                throw new ArgumentNullException(nameof(realtimeAccountUpdaterStatus), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (receiptFreeText.IsSet && receiptFreeText.Value == null)
                throw new ArgumentNullException(nameof(receiptFreeText), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (recurringContractTypes.IsSet && recurringContractTypes.Value == null)
                throw new ArgumentNullException(nameof(recurringContractTypes), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (recurringFirstPspReference.IsSet && recurringFirstPspReference.Value == null)
                throw new ArgumentNullException(nameof(recurringFirstPspReference), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (recurringRecurringDetailReference.IsSet && recurringRecurringDetailReference.Value == null)
                throw new ArgumentNullException(nameof(recurringRecurringDetailReference), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (recurringShopperReference.IsSet && recurringShopperReference.Value == null)
                throw new ArgumentNullException(nameof(recurringShopperReference), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (recurringProcessingModel.IsSet && recurringProcessingModel.Value == null)
                throw new ArgumentNullException(nameof(recurringProcessingModel), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (referred.IsSet && referred.Value == null)
                throw new ArgumentNullException(nameof(referred), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (refusalReasonRaw.IsSet && refusalReasonRaw.Value == null)
                throw new ArgumentNullException(nameof(refusalReasonRaw), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (requestAmount.IsSet && requestAmount.Value == null)
                throw new ArgumentNullException(nameof(requestAmount), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (requestCurrencyCode.IsSet && requestCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(requestCurrencyCode), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (shopperInteraction.IsSet && shopperInteraction.Value == null)
                throw new ArgumentNullException(nameof(shopperInteraction), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (shopperReference.IsSet && shopperReference.Value == null)
                throw new ArgumentNullException(nameof(shopperReference), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (terminalId.IsSet && terminalId.Value == null)
                throw new ArgumentNullException(nameof(terminalId), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (threeDAuthenticated.IsSet && threeDAuthenticated.Value == null)
                throw new ArgumentNullException(nameof(threeDAuthenticated), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (threeDAuthenticatedResponse.IsSet && threeDAuthenticatedResponse.Value == null)
                throw new ArgumentNullException(nameof(threeDAuthenticatedResponse), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (threeDOffered.IsSet && threeDOffered.Value == null)
                throw new ArgumentNullException(nameof(threeDOffered), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (threeDOfferedResponse.IsSet && threeDOfferedResponse.Value == null)
                throw new ArgumentNullException(nameof(threeDOfferedResponse), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (threeDSVersion.IsSet && threeDSVersion.Value == null)
                throw new ArgumentNullException(nameof(threeDSVersion), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (tokenizationShopperReference.IsSet && tokenizationShopperReference.Value == null)
                throw new ArgumentNullException(nameof(tokenizationShopperReference), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (tokenizationStoreOperationType.IsSet && tokenizationStoreOperationType.Value == null)
                throw new ArgumentNullException(nameof(tokenizationStoreOperationType), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (tokenizationStoredPaymentMethodId.IsSet && tokenizationStoredPaymentMethodId.Value == null)
                throw new ArgumentNullException(nameof(tokenizationStoredPaymentMethodId), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (visaTransactionId.IsSet && visaTransactionId.Value == null)
                throw new ArgumentNullException(nameof(visaTransactionId), "Property is not nullable for class ResponseAdditionalDataCommon.");

            if (xid.IsSet && xid.Value == null)
                throw new ArgumentNullException(nameof(xid), "Property is not nullable for class ResponseAdditionalDataCommon.");

            return new ResponseAdditionalDataCommon(acquirerAccountCode, acquirerCode, acquirerReference, alias, aliasType, authCode, authorisationMid, authorisedAmountCurrency, authorisedAmountValue, avsResult, avsResultRaw, bic, coBrandedWith, cvcResult, cvcResultRaw, dsTransID, eci, expiryDate, extraCostsCurrency, extraCostsValue, fraudCheckItemNrFraudCheckname, fraudManualReview, fraudResultType, fraudRiskLevel, fundingSource, fundsAvailability, inferredRefusalReason, isCardCommercial, issuerCountry, liabilityShift, mcBankNetReferenceNumber, merchantAdviceCode, merchantReference, networkTxReference, ownerName, paymentAccountReference, paymentMethod, paymentMethodVariant, payoutEligible, realtimeAccountUpdaterStatus, receiptFreeText, recurringContractTypes, recurringFirstPspReference, recurringRecurringDetailReference, recurringShopperReference, recurringProcessingModel, referred, refusalReasonRaw, requestAmount, requestCurrencyCode, shopperInteraction, shopperReference, terminalId, threeDAuthenticated, threeDAuthenticatedResponse, threeDOffered, threeDOfferedResponse, threeDSVersion, tokenizationShopperReference, tokenizationStoreOperationType, tokenizationStoredPaymentMethodId, visaTransactionId, xid);
        }

        /// <summary>
        /// Serializes a <see cref="ResponseAdditionalDataCommon" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="responseAdditionalDataCommon"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResponseAdditionalDataCommon responseAdditionalDataCommon, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, responseAdditionalDataCommon, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResponseAdditionalDataCommon" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="responseAdditionalDataCommon"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResponseAdditionalDataCommon responseAdditionalDataCommon, JsonSerializerOptions jsonSerializerOptions)
        {
            if (responseAdditionalDataCommon.AcquirerAccountCodeOption.IsSet && responseAdditionalDataCommon.AcquirerAccountCode == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.AcquirerAccountCode), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.AcquirerCodeOption.IsSet && responseAdditionalDataCommon.AcquirerCode == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.AcquirerCode), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.AcquirerReferenceOption.IsSet && responseAdditionalDataCommon.AcquirerReference == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.AcquirerReference), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.AliasOption.IsSet && responseAdditionalDataCommon.Alias == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.Alias), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.AliasTypeOption.IsSet && responseAdditionalDataCommon.AliasType == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.AliasType), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.AuthCodeOption.IsSet && responseAdditionalDataCommon.AuthCode == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.AuthCode), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.AuthorisationMidOption.IsSet && responseAdditionalDataCommon.AuthorisationMid == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.AuthorisationMid), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.AuthorisedAmountCurrencyOption.IsSet && responseAdditionalDataCommon.AuthorisedAmountCurrency == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.AuthorisedAmountCurrency), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.AuthorisedAmountValueOption.IsSet && responseAdditionalDataCommon.AuthorisedAmountValue == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.AuthorisedAmountValue), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.AvsResultOption.IsSet && responseAdditionalDataCommon.AvsResult == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.AvsResult), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.AvsResultRawOption.IsSet && responseAdditionalDataCommon.AvsResultRaw == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.AvsResultRaw), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.BicOption.IsSet && responseAdditionalDataCommon.Bic == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.Bic), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.CoBrandedWithOption.IsSet && responseAdditionalDataCommon.CoBrandedWith == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.CoBrandedWith), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.CvcResultOption.IsSet && responseAdditionalDataCommon.CvcResult == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.CvcResult), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.CvcResultRawOption.IsSet && responseAdditionalDataCommon.CvcResultRaw == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.CvcResultRaw), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.DsTransIDOption.IsSet && responseAdditionalDataCommon.DsTransID == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.DsTransID), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.EciOption.IsSet && responseAdditionalDataCommon.Eci == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.Eci), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.ExpiryDateOption.IsSet && responseAdditionalDataCommon.ExpiryDate == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.ExpiryDate), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.ExtraCostsCurrencyOption.IsSet && responseAdditionalDataCommon.ExtraCostsCurrency == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.ExtraCostsCurrency), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.ExtraCostsValueOption.IsSet && responseAdditionalDataCommon.ExtraCostsValue == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.ExtraCostsValue), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.FraudCheckItemNrFraudChecknameOption.IsSet && responseAdditionalDataCommon.FraudCheckItemNrFraudCheckname == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.FraudCheckItemNrFraudCheckname), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.FraudManualReviewOption.IsSet && responseAdditionalDataCommon.FraudManualReview == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.FraudManualReview), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.FundingSourceOption.IsSet && responseAdditionalDataCommon.FundingSource == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.FundingSource), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.FundsAvailabilityOption.IsSet && responseAdditionalDataCommon.FundsAvailability == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.FundsAvailability), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.InferredRefusalReasonOption.IsSet && responseAdditionalDataCommon.InferredRefusalReason == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.InferredRefusalReason), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.IsCardCommercialOption.IsSet && responseAdditionalDataCommon.IsCardCommercial == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.IsCardCommercial), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.IssuerCountryOption.IsSet && responseAdditionalDataCommon.IssuerCountry == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.IssuerCountry), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.LiabilityShiftOption.IsSet && responseAdditionalDataCommon.LiabilityShift == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.LiabilityShift), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.McBankNetReferenceNumberOption.IsSet && responseAdditionalDataCommon.McBankNetReferenceNumber == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.McBankNetReferenceNumber), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.MerchantAdviceCodeOption.IsSet && responseAdditionalDataCommon.MerchantAdviceCode == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.MerchantAdviceCode), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.MerchantReferenceOption.IsSet && responseAdditionalDataCommon.MerchantReference == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.MerchantReference), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.NetworkTxReferenceOption.IsSet && responseAdditionalDataCommon.NetworkTxReference == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.NetworkTxReference), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.OwnerNameOption.IsSet && responseAdditionalDataCommon.OwnerName == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.OwnerName), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.PaymentAccountReferenceOption.IsSet && responseAdditionalDataCommon.PaymentAccountReference == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.PaymentAccountReference), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.PaymentMethodOption.IsSet && responseAdditionalDataCommon.PaymentMethod == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.PaymentMethod), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.PaymentMethodVariantOption.IsSet && responseAdditionalDataCommon.PaymentMethodVariant == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.PaymentMethodVariant), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.PayoutEligibleOption.IsSet && responseAdditionalDataCommon.PayoutEligible == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.PayoutEligible), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.RealtimeAccountUpdaterStatusOption.IsSet && responseAdditionalDataCommon.RealtimeAccountUpdaterStatus == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.RealtimeAccountUpdaterStatus), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.ReceiptFreeTextOption.IsSet && responseAdditionalDataCommon.ReceiptFreeText == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.ReceiptFreeText), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.RecurringContractTypesOption.IsSet && responseAdditionalDataCommon.RecurringContractTypes == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.RecurringContractTypes), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.RecurringFirstPspReferenceOption.IsSet && responseAdditionalDataCommon.RecurringFirstPspReference == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.RecurringFirstPspReference), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.RecurringRecurringDetailReferenceOption.IsSet && responseAdditionalDataCommon.RecurringRecurringDetailReference == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.RecurringRecurringDetailReference), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.RecurringShopperReferenceOption.IsSet && responseAdditionalDataCommon.RecurringShopperReference == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.RecurringShopperReference), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.ReferredOption.IsSet && responseAdditionalDataCommon.Referred == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.Referred), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.RefusalReasonRawOption.IsSet && responseAdditionalDataCommon.RefusalReasonRaw == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.RefusalReasonRaw), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.RequestAmountOption.IsSet && responseAdditionalDataCommon.RequestAmount == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.RequestAmount), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.RequestCurrencyCodeOption.IsSet && responseAdditionalDataCommon.RequestCurrencyCode == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.RequestCurrencyCode), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.ShopperInteractionOption.IsSet && responseAdditionalDataCommon.ShopperInteraction == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.ShopperInteraction), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.ShopperReferenceOption.IsSet && responseAdditionalDataCommon.ShopperReference == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.ShopperReference), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.TerminalIdOption.IsSet && responseAdditionalDataCommon.TerminalId == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.TerminalId), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.ThreeDAuthenticatedOption.IsSet && responseAdditionalDataCommon.ThreeDAuthenticated == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.ThreeDAuthenticated), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.ThreeDAuthenticatedResponseOption.IsSet && responseAdditionalDataCommon.ThreeDAuthenticatedResponse == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.ThreeDAuthenticatedResponse), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.ThreeDOfferedOption.IsSet && responseAdditionalDataCommon.ThreeDOffered == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.ThreeDOffered), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.ThreeDOfferedResponseOption.IsSet && responseAdditionalDataCommon.ThreeDOfferedResponse == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.ThreeDOfferedResponse), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.ThreeDSVersionOption.IsSet && responseAdditionalDataCommon.ThreeDSVersion == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.ThreeDSVersion), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.TokenizationShopperReferenceOption.IsSet && responseAdditionalDataCommon.TokenizationShopperReference == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.TokenizationShopperReference), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.TokenizationStoredPaymentMethodIdOption.IsSet && responseAdditionalDataCommon.TokenizationStoredPaymentMethodId == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.TokenizationStoredPaymentMethodId), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.VisaTransactionIdOption.IsSet && responseAdditionalDataCommon.VisaTransactionId == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.VisaTransactionId), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.XidOption.IsSet && responseAdditionalDataCommon.Xid == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCommon.Xid), "Property is required for class ResponseAdditionalDataCommon.");

            if (responseAdditionalDataCommon.AcquirerAccountCodeOption.IsSet)
                writer.WriteString("acquirerAccountCode", responseAdditionalDataCommon.AcquirerAccountCode);

            if (responseAdditionalDataCommon.AcquirerCodeOption.IsSet)
                writer.WriteString("acquirerCode", responseAdditionalDataCommon.AcquirerCode);

            if (responseAdditionalDataCommon.AcquirerReferenceOption.IsSet)
                writer.WriteString("acquirerReference", responseAdditionalDataCommon.AcquirerReference);

            if (responseAdditionalDataCommon.AliasOption.IsSet)
                writer.WriteString("alias", responseAdditionalDataCommon.Alias);

            if (responseAdditionalDataCommon.AliasTypeOption.IsSet)
                writer.WriteString("aliasType", responseAdditionalDataCommon.AliasType);

            if (responseAdditionalDataCommon.AuthCodeOption.IsSet)
                writer.WriteString("authCode", responseAdditionalDataCommon.AuthCode);

            if (responseAdditionalDataCommon.AuthorisationMidOption.IsSet)
                writer.WriteString("authorisationMid", responseAdditionalDataCommon.AuthorisationMid);

            if (responseAdditionalDataCommon.AuthorisedAmountCurrencyOption.IsSet)
                writer.WriteString("authorisedAmountCurrency", responseAdditionalDataCommon.AuthorisedAmountCurrency);

            if (responseAdditionalDataCommon.AuthorisedAmountValueOption.IsSet)
                writer.WriteString("authorisedAmountValue", responseAdditionalDataCommon.AuthorisedAmountValue);

            if (responseAdditionalDataCommon.AvsResultOption.IsSet)
                writer.WriteString("avsResult", responseAdditionalDataCommon.AvsResult);

            if (responseAdditionalDataCommon.AvsResultRawOption.IsSet)
                writer.WriteString("avsResultRaw", responseAdditionalDataCommon.AvsResultRaw);

            if (responseAdditionalDataCommon.BicOption.IsSet)
                writer.WriteString("bic", responseAdditionalDataCommon.Bic);

            if (responseAdditionalDataCommon.CoBrandedWithOption.IsSet)
                writer.WriteString("coBrandedWith", responseAdditionalDataCommon.CoBrandedWith);

            if (responseAdditionalDataCommon.CvcResultOption.IsSet)
                writer.WriteString("cvcResult", responseAdditionalDataCommon.CvcResult);

            if (responseAdditionalDataCommon.CvcResultRawOption.IsSet)
                writer.WriteString("cvcResultRaw", responseAdditionalDataCommon.CvcResultRaw);

            if (responseAdditionalDataCommon.DsTransIDOption.IsSet)
                writer.WriteString("dsTransID", responseAdditionalDataCommon.DsTransID);

            if (responseAdditionalDataCommon.EciOption.IsSet)
                writer.WriteString("eci", responseAdditionalDataCommon.Eci);

            if (responseAdditionalDataCommon.ExpiryDateOption.IsSet)
                writer.WriteString("expiryDate", responseAdditionalDataCommon.ExpiryDate);

            if (responseAdditionalDataCommon.ExtraCostsCurrencyOption.IsSet)
                writer.WriteString("extraCostsCurrency", responseAdditionalDataCommon.ExtraCostsCurrency);

            if (responseAdditionalDataCommon.ExtraCostsValueOption.IsSet)
                writer.WriteString("extraCostsValue", responseAdditionalDataCommon.ExtraCostsValue);

            if (responseAdditionalDataCommon.FraudCheckItemNrFraudChecknameOption.IsSet)
                writer.WriteString("fraudCheck-[itemNr]-[FraudCheckname]", responseAdditionalDataCommon.FraudCheckItemNrFraudCheckname);

            if (responseAdditionalDataCommon.FraudManualReviewOption.IsSet)
                writer.WriteString("fraudManualReview", responseAdditionalDataCommon.FraudManualReview);

            var fraudResultTypeRawValue = ResponseAdditionalDataCommon.FraudResultTypeEnumToJsonValue(responseAdditionalDataCommon.FraudResultTypeOption.Value.Value);
            writer.WriteString("fraudResultType", fraudResultTypeRawValue);
            var fraudRiskLevelRawValue = ResponseAdditionalDataCommon.FraudRiskLevelEnumToJsonValue(responseAdditionalDataCommon.FraudRiskLevelOption.Value.Value);
            writer.WriteString("fraudRiskLevel", fraudRiskLevelRawValue);
            if (responseAdditionalDataCommon.FundingSourceOption.IsSet)
                writer.WriteString("fundingSource", responseAdditionalDataCommon.FundingSource);

            if (responseAdditionalDataCommon.FundsAvailabilityOption.IsSet)
                writer.WriteString("fundsAvailability", responseAdditionalDataCommon.FundsAvailability);

            if (responseAdditionalDataCommon.InferredRefusalReasonOption.IsSet)
                writer.WriteString("inferredRefusalReason", responseAdditionalDataCommon.InferredRefusalReason);

            if (responseAdditionalDataCommon.IsCardCommercialOption.IsSet)
                writer.WriteString("isCardCommercial", responseAdditionalDataCommon.IsCardCommercial);

            if (responseAdditionalDataCommon.IssuerCountryOption.IsSet)
                writer.WriteString("issuerCountry", responseAdditionalDataCommon.IssuerCountry);

            if (responseAdditionalDataCommon.LiabilityShiftOption.IsSet)
                writer.WriteString("liabilityShift", responseAdditionalDataCommon.LiabilityShift);

            if (responseAdditionalDataCommon.McBankNetReferenceNumberOption.IsSet)
                writer.WriteString("mcBankNetReferenceNumber", responseAdditionalDataCommon.McBankNetReferenceNumber);

            if (responseAdditionalDataCommon.MerchantAdviceCodeOption.IsSet)
                writer.WriteString("merchantAdviceCode", responseAdditionalDataCommon.MerchantAdviceCode);

            if (responseAdditionalDataCommon.MerchantReferenceOption.IsSet)
                writer.WriteString("merchantReference", responseAdditionalDataCommon.MerchantReference);

            if (responseAdditionalDataCommon.NetworkTxReferenceOption.IsSet)
                writer.WriteString("networkTxReference", responseAdditionalDataCommon.NetworkTxReference);

            if (responseAdditionalDataCommon.OwnerNameOption.IsSet)
                writer.WriteString("ownerName", responseAdditionalDataCommon.OwnerName);

            if (responseAdditionalDataCommon.PaymentAccountReferenceOption.IsSet)
                writer.WriteString("paymentAccountReference", responseAdditionalDataCommon.PaymentAccountReference);

            if (responseAdditionalDataCommon.PaymentMethodOption.IsSet)
                writer.WriteString("paymentMethod", responseAdditionalDataCommon.PaymentMethod);

            if (responseAdditionalDataCommon.PaymentMethodVariantOption.IsSet)
                writer.WriteString("paymentMethodVariant", responseAdditionalDataCommon.PaymentMethodVariant);

            if (responseAdditionalDataCommon.PayoutEligibleOption.IsSet)
                writer.WriteString("payoutEligible", responseAdditionalDataCommon.PayoutEligible);

            if (responseAdditionalDataCommon.RealtimeAccountUpdaterStatusOption.IsSet)
                writer.WriteString("realtimeAccountUpdaterStatus", responseAdditionalDataCommon.RealtimeAccountUpdaterStatus);

            if (responseAdditionalDataCommon.ReceiptFreeTextOption.IsSet)
                writer.WriteString("receiptFreeText", responseAdditionalDataCommon.ReceiptFreeText);

            if (responseAdditionalDataCommon.RecurringContractTypesOption.IsSet)
                writer.WriteString("recurring.contractTypes", responseAdditionalDataCommon.RecurringContractTypes);

            if (responseAdditionalDataCommon.RecurringFirstPspReferenceOption.IsSet)
                writer.WriteString("recurring.firstPspReference", responseAdditionalDataCommon.RecurringFirstPspReference);

            if (responseAdditionalDataCommon.RecurringRecurringDetailReferenceOption.IsSet)
                writer.WriteString("recurring.recurringDetailReference", responseAdditionalDataCommon.RecurringRecurringDetailReference);

            if (responseAdditionalDataCommon.RecurringShopperReferenceOption.IsSet)
                writer.WriteString("recurring.shopperReference", responseAdditionalDataCommon.RecurringShopperReference);

            var recurringProcessingModelRawValue = ResponseAdditionalDataCommon.RecurringProcessingModelEnumToJsonValue(responseAdditionalDataCommon.RecurringProcessingModelOption.Value.Value);
            writer.WriteString("recurringProcessingModel", recurringProcessingModelRawValue);
            if (responseAdditionalDataCommon.ReferredOption.IsSet)
                writer.WriteString("referred", responseAdditionalDataCommon.Referred);

            if (responseAdditionalDataCommon.RefusalReasonRawOption.IsSet)
                writer.WriteString("refusalReasonRaw", responseAdditionalDataCommon.RefusalReasonRaw);

            if (responseAdditionalDataCommon.RequestAmountOption.IsSet)
                writer.WriteString("requestAmount", responseAdditionalDataCommon.RequestAmount);

            if (responseAdditionalDataCommon.RequestCurrencyCodeOption.IsSet)
                writer.WriteString("requestCurrencyCode", responseAdditionalDataCommon.RequestCurrencyCode);

            if (responseAdditionalDataCommon.ShopperInteractionOption.IsSet)
                writer.WriteString("shopperInteraction", responseAdditionalDataCommon.ShopperInteraction);

            if (responseAdditionalDataCommon.ShopperReferenceOption.IsSet)
                writer.WriteString("shopperReference", responseAdditionalDataCommon.ShopperReference);

            if (responseAdditionalDataCommon.TerminalIdOption.IsSet)
                writer.WriteString("terminalId", responseAdditionalDataCommon.TerminalId);

            if (responseAdditionalDataCommon.ThreeDAuthenticatedOption.IsSet)
                writer.WriteString("threeDAuthenticated", responseAdditionalDataCommon.ThreeDAuthenticated);

            if (responseAdditionalDataCommon.ThreeDAuthenticatedResponseOption.IsSet)
                writer.WriteString("threeDAuthenticatedResponse", responseAdditionalDataCommon.ThreeDAuthenticatedResponse);

            if (responseAdditionalDataCommon.ThreeDOfferedOption.IsSet)
                writer.WriteString("threeDOffered", responseAdditionalDataCommon.ThreeDOffered);

            if (responseAdditionalDataCommon.ThreeDOfferedResponseOption.IsSet)
                writer.WriteString("threeDOfferedResponse", responseAdditionalDataCommon.ThreeDOfferedResponse);

            if (responseAdditionalDataCommon.ThreeDSVersionOption.IsSet)
                writer.WriteString("threeDSVersion", responseAdditionalDataCommon.ThreeDSVersion);

            if (responseAdditionalDataCommon.TokenizationShopperReferenceOption.IsSet)
                writer.WriteString("tokenization.shopperReference", responseAdditionalDataCommon.TokenizationShopperReference);

            var tokenizationStoreOperationTypeRawValue = ResponseAdditionalDataCommon.TokenizationStoreOperationTypeEnumToJsonValue(responseAdditionalDataCommon.TokenizationStoreOperationTypeOption.Value.Value);
            writer.WriteString("tokenization.store.operationType", tokenizationStoreOperationTypeRawValue);
            if (responseAdditionalDataCommon.TokenizationStoredPaymentMethodIdOption.IsSet)
                writer.WriteString("tokenization.storedPaymentMethodId", responseAdditionalDataCommon.TokenizationStoredPaymentMethodId);

            if (responseAdditionalDataCommon.VisaTransactionIdOption.IsSet)
                writer.WriteString("visaTransactionId", responseAdditionalDataCommon.VisaTransactionId);

            if (responseAdditionalDataCommon.XidOption.IsSet)
                writer.WriteString("xid", responseAdditionalDataCommon.Xid);
        }
    }
}
