// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// CreateOrderResponse
    /// </summary>
    public partial class CreateOrderResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrderResponse" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="expiresAt">The date that the order will expire.</param>
        /// <param name="orderData">The encrypted data that will be used by merchant for adding payments to the order.</param>
        /// <param name="remainingAmount">remainingAmount</param>
        /// <param name="resultCode">The result of the order creation request.  The value is always **Success**.</param>
        /// <param name="additionalData">Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** &gt; **Developers** &gt; **Additional data**.</param>
        /// <param name="fraudResult">fraudResult</param>
        /// <param name="pspReference">Adyen&#39;s 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.</param>
        /// <param name="reference">The reference provided by merchant for creating the order.</param>
        /// <param name="refusalReason">If the payment&#39;s authorisation is refused or an error occurs during authorisation, this field holds Adyen&#39;s mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes &#x60;resultCode&#x60; and &#x60;refusalReason&#x60; values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).</param>
        [JsonConstructor]
        public CreateOrderResponse(Amount amount, string expiresAt, string orderData, Amount remainingAmount, ResultCodeEnum resultCode, Option<Dictionary<string, string>> additionalData = default, Option<FraudResult> fraudResult = default, Option<string> pspReference = default, Option<string> reference = default, Option<string> refusalReason = default)
        {
            Amount = amount;
            ExpiresAt = expiresAt;
            OrderData = orderData;
            RemainingAmount = remainingAmount;
            ResultCode = resultCode;
            AdditionalDataOption = additionalData;
            FraudResultOption = fraudResult;
            PspReferenceOption = pspReference;
            ReferenceOption = reference;
            RefusalReasonOption = refusalReason;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The result of the order creation request.  The value is always **Success**.
        /// </summary>
        /// <value>The result of the order creation request.  The value is always **Success**.</value>
        public enum ResultCodeEnum
        {
            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            Success = 1
        }

        /// <summary>
        /// Returns a <see cref="ResultCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ResultCodeEnum ResultCodeEnumFromString(string value)
        {
            if (value.Equals("Success"))
                return ResultCodeEnum.Success;

            throw new NotImplementedException($"Could not convert value to type ResultCodeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ResultCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ResultCodeEnum? ResultCodeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Success"))
                return ResultCodeEnum.Success;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ResultCodeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ResultCodeEnumToJsonValue(ResultCodeEnum value)
        {
            if (value == ResultCodeEnum.Success)
                return "Success";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The result of the order creation request.  The value is always **Success**.
        /// </summary>
        /// <value>The result of the order creation request.  The value is always **Success**.</value>
        [JsonPropertyName("resultCode")]
        public ResultCodeEnum ResultCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public Amount Amount { get; set; }

        /// <summary>
        /// The date that the order will expire.
        /// </summary>
        /// <value>The date that the order will expire.</value>
        [JsonPropertyName("expiresAt")]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// The encrypted data that will be used by merchant for adding payments to the order.
        /// </summary>
        /// <value>The encrypted data that will be used by merchant for adding payments to the order.</value>
        [JsonPropertyName("orderData")]
        public string OrderData { get; set; }

        /// <summary>
        /// Gets or Sets RemainingAmount
        /// </summary>
        [JsonPropertyName("remainingAmount")]
        public Amount RemainingAmount { get; set; }

        /// <summary>
        /// Used to track the state of AdditionalData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> AdditionalDataOption { get; private set; }

        /// <summary>
        /// Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** &gt; **Developers** &gt; **Additional data**.
        /// </summary>
        /// <value>Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** &gt; **Developers** &gt; **Additional data**.</value>
        [JsonPropertyName("additionalData")]
        public Dictionary<string, string> AdditionalData { get { return this.AdditionalDataOption; } set { this.AdditionalDataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of FraudResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FraudResult> FraudResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets FraudResult
        /// </summary>
        [JsonPropertyName("fraudResult")]
        public FraudResult FraudResult { get { return this.FraudResultOption; } set { this.FraudResultOption = new Option<FraudResult>(value); } }

        /// <summary>
        /// Used to track the state of PspReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PspReferenceOption { get; private set; }

        /// <summary>
        /// Adyen&#39;s 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.
        /// </summary>
        /// <value>Adyen&#39;s 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.</value>
        [JsonPropertyName("pspReference")]
        public string PspReference { get { return this.PspReferenceOption; } set { this.PspReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// The reference provided by merchant for creating the order.
        /// </summary>
        /// <value>The reference provided by merchant for creating the order.</value>
        [JsonPropertyName("reference")]
        public string Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefusalReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RefusalReasonOption { get; private set; }

        /// <summary>
        /// If the payment&#39;s authorisation is refused or an error occurs during authorisation, this field holds Adyen&#39;s mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes &#x60;resultCode&#x60; and &#x60;refusalReason&#x60; values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).
        /// </summary>
        /// <value>If the payment&#39;s authorisation is refused or an error occurs during authorisation, this field holds Adyen&#39;s mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes &#x60;resultCode&#x60; and &#x60;refusalReason&#x60; values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).</value>
        [JsonPropertyName("refusalReason")]
        public string RefusalReason { get { return this.RefusalReasonOption; } set { this.RefusalReasonOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateOrderResponse {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  OrderData: ").Append(OrderData).Append("\n");
            sb.Append("  RemainingAmount: ").Append(RemainingAmount).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  FraudResult: ").Append(FraudResult).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  RefusalReason: ").Append(RefusalReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateOrderResponse" />
    /// </summary>
    public class CreateOrderResponseJsonConverter : JsonConverter<CreateOrderResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateOrderResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateOrderResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Amount> amount = default;
            Option<string> expiresAt = default;
            Option<string> orderData = default;
            Option<Amount> remainingAmount = default;
            Option<CreateOrderResponse.ResultCodeEnum?> resultCode = default;
            Option<Dictionary<string, string>> additionalData = default;
            Option<FraudResult> fraudResult = default;
            Option<string> pspReference = default;
            Option<string> reference = default;
            Option<string> refusalReason = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "expiresAt":
                            expiresAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "orderData":
                            orderData = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "remainingAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                remainingAmount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "resultCode":
                            string resultCodeRawValue = utf8JsonReader.GetString();
                            if (resultCodeRawValue != null)
                                resultCode = new Option<CreateOrderResponse.ResultCodeEnum?>(CreateOrderResponse.ResultCodeEnumFromStringOrDefault(resultCodeRawValue));
                            break;
                        case "additionalData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalData = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fraudResult":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fraudResult = new Option<FraudResult>(JsonSerializer.Deserialize<FraudResult>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pspReference":
                            pspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refusalReason":
                            refusalReason = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class CreateOrderResponse.", nameof(amount));

            if (!expiresAt.IsSet)
                throw new ArgumentException("Property is required for class CreateOrderResponse.", nameof(expiresAt));

            if (!orderData.IsSet)
                throw new ArgumentException("Property is required for class CreateOrderResponse.", nameof(orderData));

            if (!remainingAmount.IsSet)
                throw new ArgumentException("Property is required for class CreateOrderResponse.", nameof(remainingAmount));

            if (!resultCode.IsSet)
                throw new ArgumentException("Property is required for class CreateOrderResponse.", nameof(resultCode));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class CreateOrderResponse.");

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class CreateOrderResponse.");

            if (orderData.IsSet && orderData.Value == null)
                throw new ArgumentNullException(nameof(orderData), "Property is not nullable for class CreateOrderResponse.");

            if (remainingAmount.IsSet && remainingAmount.Value == null)
                throw new ArgumentNullException(nameof(remainingAmount), "Property is not nullable for class CreateOrderResponse.");

            if (resultCode.IsSet && resultCode.Value == null)
                throw new ArgumentNullException(nameof(resultCode), "Property is not nullable for class CreateOrderResponse.");

            if (additionalData.IsSet && additionalData.Value == null)
                throw new ArgumentNullException(nameof(additionalData), "Property is not nullable for class CreateOrderResponse.");

            if (fraudResult.IsSet && fraudResult.Value == null)
                throw new ArgumentNullException(nameof(fraudResult), "Property is not nullable for class CreateOrderResponse.");

            if (pspReference.IsSet && pspReference.Value == null)
                throw new ArgumentNullException(nameof(pspReference), "Property is not nullable for class CreateOrderResponse.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class CreateOrderResponse.");

            if (refusalReason.IsSet && refusalReason.Value == null)
                throw new ArgumentNullException(nameof(refusalReason), "Property is not nullable for class CreateOrderResponse.");

            return new CreateOrderResponse(amount.Value, expiresAt.Value, orderData.Value, remainingAmount.Value, resultCode.Value.Value, additionalData, fraudResult, pspReference, reference, refusalReason);
        }

        /// <summary>
        /// Serializes a <see cref="CreateOrderResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createOrderResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateOrderResponse createOrderResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createOrderResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateOrderResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createOrderResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateOrderResponse createOrderResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createOrderResponse.Amount == null)
                throw new ArgumentNullException(nameof(createOrderResponse.Amount), "Property is required for class CreateOrderResponse.");

            if (createOrderResponse.ExpiresAt == null)
                throw new ArgumentNullException(nameof(createOrderResponse.ExpiresAt), "Property is required for class CreateOrderResponse.");

            if (createOrderResponse.OrderData == null)
                throw new ArgumentNullException(nameof(createOrderResponse.OrderData), "Property is required for class CreateOrderResponse.");

            if (createOrderResponse.RemainingAmount == null)
                throw new ArgumentNullException(nameof(createOrderResponse.RemainingAmount), "Property is required for class CreateOrderResponse.");

            if (createOrderResponse.AdditionalDataOption.IsSet && createOrderResponse.AdditionalData == null)
                throw new ArgumentNullException(nameof(createOrderResponse.AdditionalData), "Property is required for class CreateOrderResponse.");

            if (createOrderResponse.FraudResultOption.IsSet && createOrderResponse.FraudResult == null)
                throw new ArgumentNullException(nameof(createOrderResponse.FraudResult), "Property is required for class CreateOrderResponse.");

            if (createOrderResponse.PspReferenceOption.IsSet && createOrderResponse.PspReference == null)
                throw new ArgumentNullException(nameof(createOrderResponse.PspReference), "Property is required for class CreateOrderResponse.");

            if (createOrderResponse.ReferenceOption.IsSet && createOrderResponse.Reference == null)
                throw new ArgumentNullException(nameof(createOrderResponse.Reference), "Property is required for class CreateOrderResponse.");

            if (createOrderResponse.RefusalReasonOption.IsSet && createOrderResponse.RefusalReason == null)
                throw new ArgumentNullException(nameof(createOrderResponse.RefusalReason), "Property is required for class CreateOrderResponse.");

            writer.WritePropertyName("amount");
            JsonSerializer.Serialize(writer, createOrderResponse.Amount, jsonSerializerOptions);
            writer.WriteString("expiresAt", createOrderResponse.ExpiresAt);

            writer.WriteString("orderData", createOrderResponse.OrderData);

            writer.WritePropertyName("remainingAmount");
            JsonSerializer.Serialize(writer, createOrderResponse.RemainingAmount, jsonSerializerOptions);
            var resultCodeRawValue = CreateOrderResponse.ResultCodeEnumToJsonValue(createOrderResponse.ResultCode);
            writer.WriteString("resultCode", resultCodeRawValue);
            if (createOrderResponse.AdditionalDataOption.IsSet)
            {
                writer.WritePropertyName("additionalData");
                JsonSerializer.Serialize(writer, createOrderResponse.AdditionalData, jsonSerializerOptions);
            }
            if (createOrderResponse.FraudResultOption.IsSet)
            {
                writer.WritePropertyName("fraudResult");
                JsonSerializer.Serialize(writer, createOrderResponse.FraudResult, jsonSerializerOptions);
            }
            if (createOrderResponse.PspReferenceOption.IsSet)
                writer.WriteString("pspReference", createOrderResponse.PspReference);

            if (createOrderResponse.ReferenceOption.IsSet)
                writer.WriteString("reference", createOrderResponse.Reference);

            if (createOrderResponse.RefusalReasonOption.IsSet)
                writer.WriteString("refusalReason", createOrderResponse.RefusalReason);
        }
    }
}
