// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Recurring
    /// </summary>
    public partial class Recurring : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Recurring" /> class.
        /// </summary>
        /// <param name="contract">The type of recurring contract to be used. Possible values: * &#x60;ONECLICK&#x60; – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid). * &#x60;RECURRING&#x60; – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp). * &#x60;ONECLICK,RECURRING&#x60; – Payment details can be used regardless of whether the shopper is on your site or not. * &#x60;PAYOUT&#x60; – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).</param>
        /// <param name="recurringDetailName">A descriptive name for this detail.</param>
        /// <param name="recurringExpiry">Date after which no further authorisations shall be performed. Only for 3D Secure 2.</param>
        /// <param name="recurringFrequency">Minimum number of days between authorisations. Only for 3D Secure 2.</param>
        /// <param name="tokenService">The name of the token service.</param>
        [JsonConstructor]
        public Recurring(Option<ContractEnum?> contract = default, Option<string> recurringDetailName = default, Option<DateTime?> recurringExpiry = default, Option<string> recurringFrequency = default, Option<TokenServiceEnum?> tokenService = default)
        {
            ContractOption = contract;
            RecurringDetailNameOption = recurringDetailName;
            RecurringExpiryOption = recurringExpiry;
            RecurringFrequencyOption = recurringFrequency;
            TokenServiceOption = tokenService;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of recurring contract to be used. Possible values: * &#x60;ONECLICK&#x60; – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid). * &#x60;RECURRING&#x60; – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp). * &#x60;ONECLICK,RECURRING&#x60; – Payment details can be used regardless of whether the shopper is on your site or not. * &#x60;PAYOUT&#x60; – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).
        /// </summary>
        /// <value>The type of recurring contract to be used. Possible values: * &#x60;ONECLICK&#x60; – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid). * &#x60;RECURRING&#x60; – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp). * &#x60;ONECLICK,RECURRING&#x60; – Payment details can be used regardless of whether the shopper is on your site or not. * &#x60;PAYOUT&#x60; – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).</value>
        public enum ContractEnum
        {
            /// <summary>
            /// Enum ONECLICK for value: ONECLICK
            /// </summary>
            ONECLICK = 1,

            /// <summary>
            /// Enum RECURRING for value: RECURRING
            /// </summary>
            RECURRING = 2,

            /// <summary>
            /// Enum PAYOUT for value: PAYOUT
            /// </summary>
            PAYOUT = 3
        }

        /// <summary>
        /// Returns a <see cref="ContractEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ContractEnum ContractEnumFromString(string value)
        {
            if (value.Equals("ONECLICK"))
                return ContractEnum.ONECLICK;

            if (value.Equals("RECURRING"))
                return ContractEnum.RECURRING;

            if (value.Equals("PAYOUT"))
                return ContractEnum.PAYOUT;

            throw new NotImplementedException($"Could not convert value to type ContractEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ContractEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ContractEnum? ContractEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ONECLICK"))
                return ContractEnum.ONECLICK;

            if (value.Equals("RECURRING"))
                return ContractEnum.RECURRING;

            if (value.Equals("PAYOUT"))
                return ContractEnum.PAYOUT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ContractEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ContractEnumToJsonValue(ContractEnum? value)
        {
            if (value == ContractEnum.ONECLICK)
                return "ONECLICK";

            if (value == ContractEnum.RECURRING)
                return "RECURRING";

            if (value == ContractEnum.PAYOUT)
                return "PAYOUT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Contract
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContractEnum?> ContractOption { get; private set; }

        /// <summary>
        /// The type of recurring contract to be used. Possible values: * &#x60;ONECLICK&#x60; – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid). * &#x60;RECURRING&#x60; – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp). * &#x60;ONECLICK,RECURRING&#x60; – Payment details can be used regardless of whether the shopper is on your site or not. * &#x60;PAYOUT&#x60; – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).
        /// </summary>
        /// <value>The type of recurring contract to be used. Possible values: * &#x60;ONECLICK&#x60; – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid). * &#x60;RECURRING&#x60; – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp). * &#x60;ONECLICK,RECURRING&#x60; – Payment details can be used regardless of whether the shopper is on your site or not. * &#x60;PAYOUT&#x60; – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).</value>
        [JsonPropertyName("contract")]
        public ContractEnum? Contract { get { return this.ContractOption; } set { this.ContractOption = new Option<ContractEnum?>(value); } }

        /// <summary>
        /// The name of the token service.
        /// </summary>
        /// <value>The name of the token service.</value>
        public enum TokenServiceEnum
        {
            /// <summary>
            /// Enum VISATOKENSERVICE for value: VISATOKENSERVICE
            /// </summary>
            VISATOKENSERVICE = 1,

            /// <summary>
            /// Enum MCTOKENSERVICE for value: MCTOKENSERVICE
            /// </summary>
            MCTOKENSERVICE = 2,

            /// <summary>
            /// Enum AMEXTOKENSERVICE for value: AMEXTOKENSERVICE
            /// </summary>
            AMEXTOKENSERVICE = 3,

            /// <summary>
            /// Enum TOKENSHARING for value: TOKEN_SHARING
            /// </summary>
            TOKENSHARING = 4
        }

        /// <summary>
        /// Returns a <see cref="TokenServiceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TokenServiceEnum TokenServiceEnumFromString(string value)
        {
            if (value.Equals("VISATOKENSERVICE"))
                return TokenServiceEnum.VISATOKENSERVICE;

            if (value.Equals("MCTOKENSERVICE"))
                return TokenServiceEnum.MCTOKENSERVICE;

            if (value.Equals("AMEXTOKENSERVICE"))
                return TokenServiceEnum.AMEXTOKENSERVICE;

            if (value.Equals("TOKEN_SHARING"))
                return TokenServiceEnum.TOKENSHARING;

            throw new NotImplementedException($"Could not convert value to type TokenServiceEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TokenServiceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TokenServiceEnum? TokenServiceEnumFromStringOrDefault(string value)
        {
            if (value.Equals("VISATOKENSERVICE"))
                return TokenServiceEnum.VISATOKENSERVICE;

            if (value.Equals("MCTOKENSERVICE"))
                return TokenServiceEnum.MCTOKENSERVICE;

            if (value.Equals("AMEXTOKENSERVICE"))
                return TokenServiceEnum.AMEXTOKENSERVICE;

            if (value.Equals("TOKEN_SHARING"))
                return TokenServiceEnum.TOKENSHARING;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TokenServiceEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TokenServiceEnumToJsonValue(TokenServiceEnum? value)
        {
            if (value == TokenServiceEnum.VISATOKENSERVICE)
                return "VISATOKENSERVICE";

            if (value == TokenServiceEnum.MCTOKENSERVICE)
                return "MCTOKENSERVICE";

            if (value == TokenServiceEnum.AMEXTOKENSERVICE)
                return "AMEXTOKENSERVICE";

            if (value == TokenServiceEnum.TOKENSHARING)
                return "TOKEN_SHARING";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of TokenService
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TokenServiceEnum?> TokenServiceOption { get; private set; }

        /// <summary>
        /// The name of the token service.
        /// </summary>
        /// <value>The name of the token service.</value>
        [JsonPropertyName("tokenService")]
        public TokenServiceEnum? TokenService { get { return this.TokenServiceOption; } set { this.TokenServiceOption = new Option<TokenServiceEnum?>(value); } }

        /// <summary>
        /// Used to track the state of RecurringDetailName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringDetailNameOption { get; private set; }

        /// <summary>
        /// A descriptive name for this detail.
        /// </summary>
        /// <value>A descriptive name for this detail.</value>
        [JsonPropertyName("recurringDetailName")]
        public string RecurringDetailName { get { return this.RecurringDetailNameOption; } set { this.RecurringDetailNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecurringExpiry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> RecurringExpiryOption { get; private set; }

        /// <summary>
        /// Date after which no further authorisations shall be performed. Only for 3D Secure 2.
        /// </summary>
        /// <value>Date after which no further authorisations shall be performed. Only for 3D Secure 2.</value>
        [JsonPropertyName("recurringExpiry")]
        public DateTime? RecurringExpiry { get { return this.RecurringExpiryOption; } set { this.RecurringExpiryOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of RecurringFrequency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringFrequencyOption { get; private set; }

        /// <summary>
        /// Minimum number of days between authorisations. Only for 3D Secure 2.
        /// </summary>
        /// <value>Minimum number of days between authorisations. Only for 3D Secure 2.</value>
        [JsonPropertyName("recurringFrequency")]
        public string RecurringFrequency { get { return this.RecurringFrequencyOption; } set { this.RecurringFrequencyOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Recurring {\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  RecurringDetailName: ").Append(RecurringDetailName).Append("\n");
            sb.Append("  RecurringExpiry: ").Append(RecurringExpiry).Append("\n");
            sb.Append("  RecurringFrequency: ").Append(RecurringFrequency).Append("\n");
            sb.Append("  TokenService: ").Append(TokenService).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Recurring" />
    /// </summary>
    public class RecurringJsonConverter : JsonConverter<Recurring>
    {
        /// <summary>
        /// The format to use to serialize RecurringExpiry
        /// </summary>
        public static string RecurringExpiryFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Recurring" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Recurring Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Recurring.ContractEnum?> contract = default;
            Option<string> recurringDetailName = default;
            Option<DateTime?> recurringExpiry = default;
            Option<string> recurringFrequency = default;
            Option<Recurring.TokenServiceEnum?> tokenService = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contract":
                            string contractRawValue = utf8JsonReader.GetString();
                            if (contractRawValue != null)
                                contract = new Option<Recurring.ContractEnum?>(Recurring.ContractEnumFromStringOrDefault(contractRawValue));
                            break;
                        case "recurringDetailName":
                            recurringDetailName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurringExpiry":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                recurringExpiry = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recurringFrequency":
                            recurringFrequency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tokenService":
                            string tokenServiceRawValue = utf8JsonReader.GetString();
                            if (tokenServiceRawValue != null)
                                tokenService = new Option<Recurring.TokenServiceEnum?>(Recurring.TokenServiceEnumFromStringOrDefault(tokenServiceRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contract.IsSet && contract.Value == null)
                throw new ArgumentNullException(nameof(contract), "Property is not nullable for class Recurring.");

            if (recurringDetailName.IsSet && recurringDetailName.Value == null)
                throw new ArgumentNullException(nameof(recurringDetailName), "Property is not nullable for class Recurring.");

            if (recurringExpiry.IsSet && recurringExpiry.Value == null)
                throw new ArgumentNullException(nameof(recurringExpiry), "Property is not nullable for class Recurring.");

            if (recurringFrequency.IsSet && recurringFrequency.Value == null)
                throw new ArgumentNullException(nameof(recurringFrequency), "Property is not nullable for class Recurring.");

            if (tokenService.IsSet && tokenService.Value == null)
                throw new ArgumentNullException(nameof(tokenService), "Property is not nullable for class Recurring.");

            return new Recurring(contract, recurringDetailName, recurringExpiry, recurringFrequency, tokenService);
        }

        /// <summary>
        /// Serializes a <see cref="Recurring" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recurring"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Recurring recurring, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, recurring, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Recurring" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recurring"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Recurring recurring, JsonSerializerOptions jsonSerializerOptions)
        {
            if (recurring.RecurringDetailNameOption.IsSet && recurring.RecurringDetailName == null)
                throw new ArgumentNullException(nameof(recurring.RecurringDetailName), "Property is required for class Recurring.");

            if (recurring.RecurringFrequencyOption.IsSet && recurring.RecurringFrequency == null)
                throw new ArgumentNullException(nameof(recurring.RecurringFrequency), "Property is required for class Recurring.");

            var contractRawValue = Recurring.ContractEnumToJsonValue(recurring.ContractOption.Value.Value);
            writer.WriteString("contract", contractRawValue);
            if (recurring.RecurringDetailNameOption.IsSet)
                writer.WriteString("recurringDetailName", recurring.RecurringDetailName);

            if (recurring.RecurringExpiryOption.IsSet)
                writer.WriteString("recurringExpiry", recurring.RecurringExpiryOption.Value.Value.ToString(RecurringExpiryFormat));

            if (recurring.RecurringFrequencyOption.IsSet)
                writer.WriteString("recurringFrequency", recurring.RecurringFrequency);

            var tokenServiceRawValue = Recurring.TokenServiceEnumToJsonValue(recurring.TokenServiceOption.Value.Value);
            writer.WriteString("tokenService", tokenServiceRawValue);
        }
    }
}
