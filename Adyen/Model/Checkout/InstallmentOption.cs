// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// InstallmentOption
    /// </summary>
    public partial class InstallmentOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentOption" /> class.
        /// </summary>
        /// <param name="maxValue">The maximum number of installments offered for this payment method.</param>
        /// <param name="plans">Defines the type of installment plan. If not set, defaults to **regular**.  Possible values: * **regular** * **revolving**</param>
        /// <param name="preselectedValue">Preselected number of installments offered for this payment method.</param>
        /// <param name="values">An array of the number of installments that the shopper can choose from. For example, **[2,3,5]**. This cannot be specified simultaneously with &#x60;maxValue&#x60;.</param>
        [JsonConstructor]
        public InstallmentOption(Option<int?> maxValue = default, Option<List<InstallmentOption.PlansEnum>> plans = default, Option<int?> preselectedValue = default, Option<List<int>> values = default)
        {
            MaxValueOption = maxValue;
            PlansOption = plans;
            PreselectedValueOption = preselectedValue;
            ValuesOption = values;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Plans
        /// </summary>
        public enum PlansEnum
        {
            /// <summary>
            /// Enum Bonus for value: bonus
            /// </summary>
            Bonus = 1,

            /// <summary>
            /// Enum BuynowPaylater for value: buynow_paylater
            /// </summary>
            BuynowPaylater = 2,

            /// <summary>
            /// Enum InteresRefundPrctg for value: interes_refund_prctg
            /// </summary>
            InteresRefundPrctg = 3,

            /// <summary>
            /// Enum InterestBonus for value: interest_bonus
            /// </summary>
            InterestBonus = 4,

            /// <summary>
            /// Enum NointeresRefundPrctg for value: nointeres_refund_prctg
            /// </summary>
            NointeresRefundPrctg = 5,

            /// <summary>
            /// Enum NointerestBonus for value: nointerest_bonus
            /// </summary>
            NointerestBonus = 6,

            /// <summary>
            /// Enum RefundPrctg for value: refund_prctg
            /// </summary>
            RefundPrctg = 7,

            /// <summary>
            /// Enum Regular for value: regular
            /// </summary>
            Regular = 8,

            /// <summary>
            /// Enum Revolving for value: revolving
            /// </summary>
            Revolving = 9,

            /// <summary>
            /// Enum WithInterest for value: with_interest
            /// </summary>
            WithInterest = 10
        }

        /// <summary>
        /// Returns a <see cref="PlansEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PlansEnum PlansEnumFromString(string value)
        {
            if (value.Equals("bonus"))
                return PlansEnum.Bonus;

            if (value.Equals("buynow_paylater"))
                return PlansEnum.BuynowPaylater;

            if (value.Equals("interes_refund_prctg"))
                return PlansEnum.InteresRefundPrctg;

            if (value.Equals("interest_bonus"))
                return PlansEnum.InterestBonus;

            if (value.Equals("nointeres_refund_prctg"))
                return PlansEnum.NointeresRefundPrctg;

            if (value.Equals("nointerest_bonus"))
                return PlansEnum.NointerestBonus;

            if (value.Equals("refund_prctg"))
                return PlansEnum.RefundPrctg;

            if (value.Equals("regular"))
                return PlansEnum.Regular;

            if (value.Equals("revolving"))
                return PlansEnum.Revolving;

            if (value.Equals("with_interest"))
                return PlansEnum.WithInterest;

            throw new NotImplementedException($"Could not convert value to type PlansEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PlansEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PlansEnum? PlansEnumFromStringOrDefault(string value)
        {
            if (value.Equals("bonus"))
                return PlansEnum.Bonus;

            if (value.Equals("buynow_paylater"))
                return PlansEnum.BuynowPaylater;

            if (value.Equals("interes_refund_prctg"))
                return PlansEnum.InteresRefundPrctg;

            if (value.Equals("interest_bonus"))
                return PlansEnum.InterestBonus;

            if (value.Equals("nointeres_refund_prctg"))
                return PlansEnum.NointeresRefundPrctg;

            if (value.Equals("nointerest_bonus"))
                return PlansEnum.NointerestBonus;

            if (value.Equals("refund_prctg"))
                return PlansEnum.RefundPrctg;

            if (value.Equals("regular"))
                return PlansEnum.Regular;

            if (value.Equals("revolving"))
                return PlansEnum.Revolving;

            if (value.Equals("with_interest"))
                return PlansEnum.WithInterest;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PlansEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PlansEnumToJsonValue(PlansEnum value)
        {
            if (value == PlansEnum.Bonus)
                return "bonus";

            if (value == PlansEnum.BuynowPaylater)
                return "buynow_paylater";

            if (value == PlansEnum.InteresRefundPrctg)
                return "interes_refund_prctg";

            if (value == PlansEnum.InterestBonus)
                return "interest_bonus";

            if (value == PlansEnum.NointeresRefundPrctg)
                return "nointeres_refund_prctg";

            if (value == PlansEnum.NointerestBonus)
                return "nointerest_bonus";

            if (value == PlansEnum.RefundPrctg)
                return "refund_prctg";

            if (value == PlansEnum.Regular)
                return "regular";

            if (value == PlansEnum.Revolving)
                return "revolving";

            if (value == PlansEnum.WithInterest)
                return "with_interest";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of MaxValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxValueOption { get; private set; }

        /// <summary>
        /// The maximum number of installments offered for this payment method.
        /// </summary>
        /// <value>The maximum number of installments offered for this payment method.</value>
        [JsonPropertyName("maxValue")]
        public int? MaxValue { get { return this.MaxValueOption; } set { this.MaxValueOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Plans
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<InstallmentOption.PlansEnum>> PlansOption { get; private set; }

        /// <summary>
        /// Defines the type of installment plan. If not set, defaults to **regular**.  Possible values: * **regular** * **revolving**
        /// </summary>
        /// <value>Defines the type of installment plan. If not set, defaults to **regular**.  Possible values: * **regular** * **revolving**</value>
        [JsonPropertyName("plans")]
        public List<InstallmentOption.PlansEnum> Plans { get { return this.PlansOption; } set { this.PlansOption = new Option<List<InstallmentOption.PlansEnum>>(value); } }

        /// <summary>
        /// Used to track the state of PreselectedValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PreselectedValueOption { get; private set; }

        /// <summary>
        /// Preselected number of installments offered for this payment method.
        /// </summary>
        /// <value>Preselected number of installments offered for this payment method.</value>
        [JsonPropertyName("preselectedValue")]
        public int? PreselectedValue { get { return this.PreselectedValueOption; } set { this.PreselectedValueOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Values
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>> ValuesOption { get; private set; }

        /// <summary>
        /// An array of the number of installments that the shopper can choose from. For example, **[2,3,5]**. This cannot be specified simultaneously with &#x60;maxValue&#x60;.
        /// </summary>
        /// <value>An array of the number of installments that the shopper can choose from. For example, **[2,3,5]**. This cannot be specified simultaneously with &#x60;maxValue&#x60;.</value>
        [JsonPropertyName("values")]
        public List<int> Values { get { return this.ValuesOption; } set { this.ValuesOption = new Option<List<int>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstallmentOption {\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  Plans: ").Append(Plans).Append("\n");
            sb.Append("  PreselectedValue: ").Append(PreselectedValue).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InstallmentOption" />
    /// </summary>
    public class InstallmentOptionJsonConverter : JsonConverter<InstallmentOption>
    {
        /// <summary>
        /// Deserializes json to <see cref="InstallmentOption" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InstallmentOption Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> maxValue = default;
            Option<List<InstallmentOption.PlansEnum>> plans = default;
            Option<int?> preselectedValue = default;
            Option<List<int>> values = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "maxValue":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxValue = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "plans":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                plans = new Option<List<InstallmentOption.PlansEnum>>(JsonSerializer.Deserialize<List<InstallmentOption.PlansEnum>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "preselectedValue":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                preselectedValue = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "values":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                values = new Option<List<int>>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (maxValue.IsSet && maxValue.Value == null)
                throw new ArgumentNullException(nameof(maxValue), "Property is not nullable for class InstallmentOption.");

            if (plans.IsSet && plans.Value == null)
                throw new ArgumentNullException(nameof(plans), "Property is not nullable for class InstallmentOption.");

            if (preselectedValue.IsSet && preselectedValue.Value == null)
                throw new ArgumentNullException(nameof(preselectedValue), "Property is not nullable for class InstallmentOption.");

            if (values.IsSet && values.Value == null)
                throw new ArgumentNullException(nameof(values), "Property is not nullable for class InstallmentOption.");

            return new InstallmentOption(maxValue, plans, preselectedValue, values);
        }

        /// <summary>
        /// Serializes a <see cref="InstallmentOption" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installmentOption"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InstallmentOption installmentOption, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, installmentOption, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InstallmentOption" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installmentOption"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InstallmentOption installmentOption, JsonSerializerOptions jsonSerializerOptions)
        {
            if (installmentOption.PlansOption.IsSet && installmentOption.Plans == null)
                throw new ArgumentNullException(nameof(installmentOption.Plans), "Property is required for class InstallmentOption.");

            if (installmentOption.ValuesOption.IsSet && installmentOption.Values == null)
                throw new ArgumentNullException(nameof(installmentOption.Values), "Property is required for class InstallmentOption.");

            if (installmentOption.MaxValueOption.IsSet)
                writer.WriteNumber("maxValue", installmentOption.MaxValueOption.Value.Value);

            if (installmentOption.PlansOption.IsSet)
            {
                writer.WritePropertyName("plans");
                JsonSerializer.Serialize(writer, installmentOption.Plans, jsonSerializerOptions);
            }
            if (installmentOption.PreselectedValueOption.IsSet)
                writer.WriteNumber("preselectedValue", installmentOption.PreselectedValueOption.Value.Value);

            if (installmentOption.ValuesOption.IsSet)
            {
                writer.WritePropertyName("values");
                JsonSerializer.Serialize(writer, installmentOption.Values, jsonSerializerOptions);
            }
        }
    }
}
