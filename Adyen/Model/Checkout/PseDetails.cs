// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PseDetails
    /// </summary>
    public partial class PseDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PseDetails" /> class.
        /// </summary>
        /// <param name="bank">The shopper&#39;s bank.</param>
        /// <param name="clientType">The client type.</param>
        /// <param name="identification">The identification code.</param>
        /// <param name="identificationType">The identification type.</param>
        /// <param name="checkoutAttemptId">The checkout attempt identifier.</param>
        /// <param name="type">The payment method type.</param>
        [JsonConstructor]
        public PseDetails(string bank, string clientType, string identification, string identificationType, Option<string> checkoutAttemptId = default, Option<TypeEnum?> type = default)
        {
            Bank = bank;
            ClientType = clientType;
            Identification = identification;
            IdentificationType = identificationType;
            CheckoutAttemptIdOption = checkoutAttemptId;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The payment method type.
        /// </summary>
        /// <value>The payment method type.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PsePayulatam for value: pse_payulatam
            /// </summary>
            PsePayulatam = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("pse_payulatam"))
                return TypeEnum.PsePayulatam;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("pse_payulatam"))
                return TypeEnum.PsePayulatam;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.PsePayulatam)
                return "pse_payulatam";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// The payment method type.
        /// </summary>
        /// <value>The payment method type.</value>
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// The shopper&#39;s bank.
        /// </summary>
        /// <value>The shopper&#39;s bank.</value>
        [JsonPropertyName("bank")]
        public string Bank { get; set; }

        /// <summary>
        /// The client type.
        /// </summary>
        /// <value>The client type.</value>
        [JsonPropertyName("clientType")]
        public string ClientType { get; set; }

        /// <summary>
        /// The identification code.
        /// </summary>
        /// <value>The identification code.</value>
        [JsonPropertyName("identification")]
        public string Identification { get; set; }

        /// <summary>
        /// The identification type.
        /// </summary>
        /// <value>The identification type.</value>
        [JsonPropertyName("identificationType")]
        public string IdentificationType { get; set; }

        /// <summary>
        /// Used to track the state of CheckoutAttemptId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CheckoutAttemptIdOption { get; private set; }

        /// <summary>
        /// The checkout attempt identifier.
        /// </summary>
        /// <value>The checkout attempt identifier.</value>
        [JsonPropertyName("checkoutAttemptId")]
        public string CheckoutAttemptId { get { return this.CheckoutAttemptIdOption; } set { this.CheckoutAttemptIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PseDetails {\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  ClientType: ").Append(ClientType).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  IdentificationType: ").Append(IdentificationType).Append("\n");
            sb.Append("  CheckoutAttemptId: ").Append(CheckoutAttemptId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PseDetails" />
    /// </summary>
    public class PseDetailsJsonConverter : JsonConverter<PseDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="PseDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PseDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> bank = default;
            Option<string> clientType = default;
            Option<string> identification = default;
            Option<string> identificationType = default;
            Option<string> checkoutAttemptId = default;
            Option<PseDetails.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bank":
                            bank = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "clientType":
                            clientType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "identification":
                            identification = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "identificationType":
                            identificationType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "checkoutAttemptId":
                            checkoutAttemptId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<PseDetails.TypeEnum?>(PseDetails.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!bank.IsSet)
                throw new ArgumentException("Property is required for class PseDetails.", nameof(bank));

            if (!clientType.IsSet)
                throw new ArgumentException("Property is required for class PseDetails.", nameof(clientType));

            if (!identification.IsSet)
                throw new ArgumentException("Property is required for class PseDetails.", nameof(identification));

            if (!identificationType.IsSet)
                throw new ArgumentException("Property is required for class PseDetails.", nameof(identificationType));

            if (bank.IsSet && bank.Value == null)
                throw new ArgumentNullException(nameof(bank), "Property is not nullable for class PseDetails.");

            if (clientType.IsSet && clientType.Value == null)
                throw new ArgumentNullException(nameof(clientType), "Property is not nullable for class PseDetails.");

            if (identification.IsSet && identification.Value == null)
                throw new ArgumentNullException(nameof(identification), "Property is not nullable for class PseDetails.");

            if (identificationType.IsSet && identificationType.Value == null)
                throw new ArgumentNullException(nameof(identificationType), "Property is not nullable for class PseDetails.");

            if (checkoutAttemptId.IsSet && checkoutAttemptId.Value == null)
                throw new ArgumentNullException(nameof(checkoutAttemptId), "Property is not nullable for class PseDetails.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PseDetails.");

            return new PseDetails(bank.Value, clientType.Value, identification.Value, identificationType.Value, checkoutAttemptId, type);
        }

        /// <summary>
        /// Serializes a <see cref="PseDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pseDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PseDetails pseDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pseDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PseDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pseDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PseDetails pseDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pseDetails.Bank == null)
                throw new ArgumentNullException(nameof(pseDetails.Bank), "Property is required for class PseDetails.");

            if (pseDetails.ClientType == null)
                throw new ArgumentNullException(nameof(pseDetails.ClientType), "Property is required for class PseDetails.");

            if (pseDetails.Identification == null)
                throw new ArgumentNullException(nameof(pseDetails.Identification), "Property is required for class PseDetails.");

            if (pseDetails.IdentificationType == null)
                throw new ArgumentNullException(nameof(pseDetails.IdentificationType), "Property is required for class PseDetails.");

            if (pseDetails.CheckoutAttemptIdOption.IsSet && pseDetails.CheckoutAttemptId == null)
                throw new ArgumentNullException(nameof(pseDetails.CheckoutAttemptId), "Property is required for class PseDetails.");

            writer.WriteString("bank", pseDetails.Bank);

            writer.WriteString("clientType", pseDetails.ClientType);

            writer.WriteString("identification", pseDetails.Identification);

            writer.WriteString("identificationType", pseDetails.IdentificationType);

            if (pseDetails.CheckoutAttemptIdOption.IsSet)
                writer.WriteString("checkoutAttemptId", pseDetails.CheckoutAttemptId);

            var typeRawValue = PseDetails.TypeEnumToJsonValue(pseDetails.TypeOption.Value.Value);
            writer.WriteString("type", typeRawValue);
        }
    }
}
