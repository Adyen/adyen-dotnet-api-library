// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// DragonpayDetails
    /// </summary>
    public partial class DragonpayDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DragonpayDetails" /> class.
        /// </summary>
        /// <param name="issuer">The Dragonpay issuer value of the shopper&#39;s selected bank. Set this to an **id** of a Dragonpay issuer to preselect it.</param>
        /// <param name="type">**dragonpay**</param>
        /// <param name="checkoutAttemptId">The checkout attempt identifier.</param>
        /// <param name="shopperEmail">The shopper’s email address.</param>
        [JsonConstructor]
        public DragonpayDetails(string issuer, TypeEnum type, Option<string> checkoutAttemptId = default, Option<string> shopperEmail = default)
        {
            Issuer = issuer;
            Type = type;
            CheckoutAttemptIdOption = checkoutAttemptId;
            ShopperEmailOption = shopperEmail;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// **dragonpay**
        /// </summary>
        /// <value>**dragonpay**</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum DragonpayEbanking for value: dragonpay_ebanking
            /// </summary>
            DragonpayEbanking = 1,

            /// <summary>
            /// Enum DragonpayOtcBanking for value: dragonpay_otc_banking
            /// </summary>
            DragonpayOtcBanking = 2,

            /// <summary>
            /// Enum DragonpayOtcNonBanking for value: dragonpay_otc_non_banking
            /// </summary>
            DragonpayOtcNonBanking = 3,

            /// <summary>
            /// Enum DragonpayOtcPhilippines for value: dragonpay_otc_philippines
            /// </summary>
            DragonpayOtcPhilippines = 4
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("dragonpay_ebanking"))
                return TypeEnum.DragonpayEbanking;

            if (value.Equals("dragonpay_otc_banking"))
                return TypeEnum.DragonpayOtcBanking;

            if (value.Equals("dragonpay_otc_non_banking"))
                return TypeEnum.DragonpayOtcNonBanking;

            if (value.Equals("dragonpay_otc_philippines"))
                return TypeEnum.DragonpayOtcPhilippines;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("dragonpay_ebanking"))
                return TypeEnum.DragonpayEbanking;

            if (value.Equals("dragonpay_otc_banking"))
                return TypeEnum.DragonpayOtcBanking;

            if (value.Equals("dragonpay_otc_non_banking"))
                return TypeEnum.DragonpayOtcNonBanking;

            if (value.Equals("dragonpay_otc_philippines"))
                return TypeEnum.DragonpayOtcPhilippines;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.DragonpayEbanking)
                return "dragonpay_ebanking";

            if (value == TypeEnum.DragonpayOtcBanking)
                return "dragonpay_otc_banking";

            if (value == TypeEnum.DragonpayOtcNonBanking)
                return "dragonpay_otc_non_banking";

            if (value == TypeEnum.DragonpayOtcPhilippines)
                return "dragonpay_otc_philippines";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// **dragonpay**
        /// </summary>
        /// <value>**dragonpay**</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The Dragonpay issuer value of the shopper&#39;s selected bank. Set this to an **id** of a Dragonpay issuer to preselect it.
        /// </summary>
        /// <value>The Dragonpay issuer value of the shopper&#39;s selected bank. Set this to an **id** of a Dragonpay issuer to preselect it.</value>
        [JsonPropertyName("issuer")]
        public string Issuer { get; set; }

        /// <summary>
        /// Used to track the state of CheckoutAttemptId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CheckoutAttemptIdOption { get; private set; }

        /// <summary>
        /// The checkout attempt identifier.
        /// </summary>
        /// <value>The checkout attempt identifier.</value>
        [JsonPropertyName("checkoutAttemptId")]
        public string CheckoutAttemptId { get { return this.CheckoutAttemptIdOption; } set { this.CheckoutAttemptIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperEmailOption { get; private set; }

        /// <summary>
        /// The shopper’s email address.
        /// </summary>
        /// <value>The shopper’s email address.</value>
        [JsonPropertyName("shopperEmail")]
        public string ShopperEmail { get { return this.ShopperEmailOption; } set { this.ShopperEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DragonpayDetails {\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CheckoutAttemptId: ").Append(CheckoutAttemptId).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DragonpayDetails" />
    /// </summary>
    public class DragonpayDetailsJsonConverter : JsonConverter<DragonpayDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="DragonpayDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DragonpayDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> issuer = default;
            Option<DragonpayDetails.TypeEnum?> type = default;
            Option<string> checkoutAttemptId = default;
            Option<string> shopperEmail = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "issuer":
                            issuer = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<DragonpayDetails.TypeEnum?>(DragonpayDetails.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "checkoutAttemptId":
                            checkoutAttemptId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperEmail":
                            shopperEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!issuer.IsSet)
                throw new ArgumentException("Property is required for class DragonpayDetails.", nameof(issuer));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class DragonpayDetails.", nameof(type));

            if (issuer.IsSet && issuer.Value == null)
                throw new ArgumentNullException(nameof(issuer), "Property is not nullable for class DragonpayDetails.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class DragonpayDetails.");

            if (checkoutAttemptId.IsSet && checkoutAttemptId.Value == null)
                throw new ArgumentNullException(nameof(checkoutAttemptId), "Property is not nullable for class DragonpayDetails.");

            if (shopperEmail.IsSet && shopperEmail.Value == null)
                throw new ArgumentNullException(nameof(shopperEmail), "Property is not nullable for class DragonpayDetails.");

            return new DragonpayDetails(issuer.Value, type.Value.Value, checkoutAttemptId, shopperEmail);
        }

        /// <summary>
        /// Serializes a <see cref="DragonpayDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dragonpayDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DragonpayDetails dragonpayDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dragonpayDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DragonpayDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dragonpayDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DragonpayDetails dragonpayDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dragonpayDetails.Issuer == null)
                throw new ArgumentNullException(nameof(dragonpayDetails.Issuer), "Property is required for class DragonpayDetails.");

            if (dragonpayDetails.CheckoutAttemptIdOption.IsSet && dragonpayDetails.CheckoutAttemptId == null)
                throw new ArgumentNullException(nameof(dragonpayDetails.CheckoutAttemptId), "Property is required for class DragonpayDetails.");

            if (dragonpayDetails.ShopperEmailOption.IsSet && dragonpayDetails.ShopperEmail == null)
                throw new ArgumentNullException(nameof(dragonpayDetails.ShopperEmail), "Property is required for class DragonpayDetails.");

            writer.WriteString("issuer", dragonpayDetails.Issuer);

            var typeRawValue = DragonpayDetails.TypeEnumToJsonValue(dragonpayDetails.Type);
            writer.WriteString("type", typeRawValue);
            if (dragonpayDetails.CheckoutAttemptIdOption.IsSet)
                writer.WriteString("checkoutAttemptId", dragonpayDetails.CheckoutAttemptId);

            if (dragonpayDetails.ShopperEmailOption.IsSet)
                writer.WriteString("shopperEmail", dragonpayDetails.ShopperEmail);
        }
    }
}
