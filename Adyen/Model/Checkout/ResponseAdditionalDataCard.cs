// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ResponseAdditionalDataCard
    /// </summary>
    public partial class ResponseAdditionalDataCard : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseAdditionalDataCard" /> class.
        /// </summary>
        /// <param name="cardBin">The first six digits of the card number.  This is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with a six-digit BIN.  Example: 521234</param>
        /// <param name="cardHolderName">The cardholder name passed in the payment request.</param>
        /// <param name="cardIssuingBank">The bank or the financial institution granting lines of credit through card association branded payment cards. This information can be included when available.</param>
        /// <param name="cardIssuingCountry">The country where the card was issued.  Example: US</param>
        /// <param name="cardIssuingCurrency">The currency in which the card is issued, if this information is available. Provided as the currency code or currency number from the ISO-4217 standard.   Example: USD</param>
        /// <param name="cardPaymentMethod">The card payment method used for the transaction.  Example: amex</param>
        /// <param name="cardProductId">The Card Product ID represents the type of card following card scheme product definitions and can be returned for Adyen Acquiring service level payments.  Possible values Visa: * **A** - Visa Traditional * **B** - Visa Traditional Rewards * **C** - Visa Signature * **D** - Visa Signature Preferred * **F** - Visa Classic  Possible values Mastercard: * **MCC** - Mastercard Card * **MCE** - Mastercard Electronic Card * **MCF** - Mastercard Corporate Fleet Card * **MCG** - Gold Mastercard Card * **MCH** - Mastercard Premium Charge * **MCI** - Mastercard Select Debit </param>
        /// <param name="cardSummary">The last four digits of a card number.  &gt; Returned only in case of a card payment.</param>
        /// <param name="issuerBin">The first eight digits of the card number. Only returned if the card number is 16 digits or more.  This is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with an eight-digit BIN.  Example: 52123423</param>
        [JsonConstructor]
        public ResponseAdditionalDataCard(Option<string> cardBin = default, Option<string> cardHolderName = default, Option<string> cardIssuingBank = default, Option<string> cardIssuingCountry = default, Option<string> cardIssuingCurrency = default, Option<string> cardPaymentMethod = default, Option<CardProductIdEnum?> cardProductId = default, Option<string> cardSummary = default, Option<string> issuerBin = default)
        {
            CardBinOption = cardBin;
            CardHolderNameOption = cardHolderName;
            CardIssuingBankOption = cardIssuingBank;
            CardIssuingCountryOption = cardIssuingCountry;
            CardIssuingCurrencyOption = cardIssuingCurrency;
            CardPaymentMethodOption = cardPaymentMethod;
            CardProductIdOption = cardProductId;
            CardSummaryOption = cardSummary;
            IssuerBinOption = issuerBin;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The Card Product ID represents the type of card following card scheme product definitions and can be returned for Adyen Acquiring service level payments.  Possible values Visa: * **A** - Visa Traditional * **B** - Visa Traditional Rewards * **C** - Visa Signature * **D** - Visa Signature Preferred * **F** - Visa Classic  Possible values Mastercard: * **MCC** - Mastercard Card * **MCE** - Mastercard Electronic Card * **MCF** - Mastercard Corporate Fleet Card * **MCG** - Gold Mastercard Card * **MCH** - Mastercard Premium Charge * **MCI** - Mastercard Select Debit 
        /// </summary>
        /// <value>The Card Product ID represents the type of card following card scheme product definitions and can be returned for Adyen Acquiring service level payments.  Possible values Visa: * **A** - Visa Traditional * **B** - Visa Traditional Rewards * **C** - Visa Signature * **D** - Visa Signature Preferred * **F** - Visa Classic  Possible values Mastercard: * **MCC** - Mastercard Card * **MCE** - Mastercard Electronic Card * **MCF** - Mastercard Corporate Fleet Card * **MCG** - Gold Mastercard Card * **MCH** - Mastercard Premium Charge * **MCI** - Mastercard Select Debit </value>
        public enum CardProductIdEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            A = 1,

            /// <summary>
            /// Enum B for value: B
            /// </summary>
            B = 2,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            C = 3,

            /// <summary>
            /// Enum D for value: D
            /// </summary>
            D = 4,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            F = 5,

            /// <summary>
            /// Enum MCC for value: MCC
            /// </summary>
            MCC = 6,

            /// <summary>
            /// Enum MCE for value: MCE
            /// </summary>
            MCE = 7,

            /// <summary>
            /// Enum MCF for value: MCF
            /// </summary>
            MCF = 8,

            /// <summary>
            /// Enum MCG for value: MCG
            /// </summary>
            MCG = 9,

            /// <summary>
            /// Enum MCH for value: MCH
            /// </summary>
            MCH = 10,

            /// <summary>
            /// Enum MCI for value: MCI
            /// </summary>
            MCI = 11
        }

        /// <summary>
        /// Returns a <see cref="CardProductIdEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CardProductIdEnum CardProductIdEnumFromString(string value)
        {
            if (value.Equals("A"))
                return CardProductIdEnum.A;

            if (value.Equals("B"))
                return CardProductIdEnum.B;

            if (value.Equals("C"))
                return CardProductIdEnum.C;

            if (value.Equals("D"))
                return CardProductIdEnum.D;

            if (value.Equals("F"))
                return CardProductIdEnum.F;

            if (value.Equals("MCC"))
                return CardProductIdEnum.MCC;

            if (value.Equals("MCE"))
                return CardProductIdEnum.MCE;

            if (value.Equals("MCF"))
                return CardProductIdEnum.MCF;

            if (value.Equals("MCG"))
                return CardProductIdEnum.MCG;

            if (value.Equals("MCH"))
                return CardProductIdEnum.MCH;

            if (value.Equals("MCI"))
                return CardProductIdEnum.MCI;

            throw new NotImplementedException($"Could not convert value to type CardProductIdEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CardProductIdEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CardProductIdEnum? CardProductIdEnumFromStringOrDefault(string value)
        {
            if (value.Equals("A"))
                return CardProductIdEnum.A;

            if (value.Equals("B"))
                return CardProductIdEnum.B;

            if (value.Equals("C"))
                return CardProductIdEnum.C;

            if (value.Equals("D"))
                return CardProductIdEnum.D;

            if (value.Equals("F"))
                return CardProductIdEnum.F;

            if (value.Equals("MCC"))
                return CardProductIdEnum.MCC;

            if (value.Equals("MCE"))
                return CardProductIdEnum.MCE;

            if (value.Equals("MCF"))
                return CardProductIdEnum.MCF;

            if (value.Equals("MCG"))
                return CardProductIdEnum.MCG;

            if (value.Equals("MCH"))
                return CardProductIdEnum.MCH;

            if (value.Equals("MCI"))
                return CardProductIdEnum.MCI;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CardProductIdEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CardProductIdEnumToJsonValue(CardProductIdEnum? value)
        {
            if (value == CardProductIdEnum.A)
                return "A";

            if (value == CardProductIdEnum.B)
                return "B";

            if (value == CardProductIdEnum.C)
                return "C";

            if (value == CardProductIdEnum.D)
                return "D";

            if (value == CardProductIdEnum.F)
                return "F";

            if (value == CardProductIdEnum.MCC)
                return "MCC";

            if (value == CardProductIdEnum.MCE)
                return "MCE";

            if (value == CardProductIdEnum.MCF)
                return "MCF";

            if (value == CardProductIdEnum.MCG)
                return "MCG";

            if (value == CardProductIdEnum.MCH)
                return "MCH";

            if (value == CardProductIdEnum.MCI)
                return "MCI";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of CardProductId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CardProductIdEnum?> CardProductIdOption { get; private set; }

        /// <summary>
        /// The Card Product ID represents the type of card following card scheme product definitions and can be returned for Adyen Acquiring service level payments.  Possible values Visa: * **A** - Visa Traditional * **B** - Visa Traditional Rewards * **C** - Visa Signature * **D** - Visa Signature Preferred * **F** - Visa Classic  Possible values Mastercard: * **MCC** - Mastercard Card * **MCE** - Mastercard Electronic Card * **MCF** - Mastercard Corporate Fleet Card * **MCG** - Gold Mastercard Card * **MCH** - Mastercard Premium Charge * **MCI** - Mastercard Select Debit 
        /// </summary>
        /// <value>The Card Product ID represents the type of card following card scheme product definitions and can be returned for Adyen Acquiring service level payments.  Possible values Visa: * **A** - Visa Traditional * **B** - Visa Traditional Rewards * **C** - Visa Signature * **D** - Visa Signature Preferred * **F** - Visa Classic  Possible values Mastercard: * **MCC** - Mastercard Card * **MCE** - Mastercard Electronic Card * **MCF** - Mastercard Corporate Fleet Card * **MCG** - Gold Mastercard Card * **MCH** - Mastercard Premium Charge * **MCI** - Mastercard Select Debit </value>
        [JsonPropertyName("cardProductId")]
        public CardProductIdEnum? CardProductId { get { return this.CardProductIdOption; } set { this.CardProductIdOption = new Option<CardProductIdEnum?>(value); } }

        /// <summary>
        /// Used to track the state of CardBin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CardBinOption { get; private set; }

        /// <summary>
        /// The first six digits of the card number.  This is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with a six-digit BIN.  Example: 521234
        /// </summary>
        /// <value>The first six digits of the card number.  This is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with a six-digit BIN.  Example: 521234</value>
        [JsonPropertyName("cardBin")]
        public string CardBin { get { return this.CardBinOption; } set { this.CardBinOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CardHolderName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CardHolderNameOption { get; private set; }

        /// <summary>
        /// The cardholder name passed in the payment request.
        /// </summary>
        /// <value>The cardholder name passed in the payment request.</value>
        [JsonPropertyName("cardHolderName")]
        public string CardHolderName { get { return this.CardHolderNameOption; } set { this.CardHolderNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CardIssuingBank
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CardIssuingBankOption { get; private set; }

        /// <summary>
        /// The bank or the financial institution granting lines of credit through card association branded payment cards. This information can be included when available.
        /// </summary>
        /// <value>The bank or the financial institution granting lines of credit through card association branded payment cards. This information can be included when available.</value>
        [JsonPropertyName("cardIssuingBank")]
        public string CardIssuingBank { get { return this.CardIssuingBankOption; } set { this.CardIssuingBankOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CardIssuingCountry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CardIssuingCountryOption { get; private set; }

        /// <summary>
        /// The country where the card was issued.  Example: US
        /// </summary>
        /// <value>The country where the card was issued.  Example: US</value>
        [JsonPropertyName("cardIssuingCountry")]
        public string CardIssuingCountry { get { return this.CardIssuingCountryOption; } set { this.CardIssuingCountryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CardIssuingCurrency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CardIssuingCurrencyOption { get; private set; }

        /// <summary>
        /// The currency in which the card is issued, if this information is available. Provided as the currency code or currency number from the ISO-4217 standard.   Example: USD
        /// </summary>
        /// <value>The currency in which the card is issued, if this information is available. Provided as the currency code or currency number from the ISO-4217 standard.   Example: USD</value>
        [JsonPropertyName("cardIssuingCurrency")]
        public string CardIssuingCurrency { get { return this.CardIssuingCurrencyOption; } set { this.CardIssuingCurrencyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CardPaymentMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CardPaymentMethodOption { get; private set; }

        /// <summary>
        /// The card payment method used for the transaction.  Example: amex
        /// </summary>
        /// <value>The card payment method used for the transaction.  Example: amex</value>
        [JsonPropertyName("cardPaymentMethod")]
        public string CardPaymentMethod { get { return this.CardPaymentMethodOption; } set { this.CardPaymentMethodOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CardSummary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CardSummaryOption { get; private set; }

        /// <summary>
        /// The last four digits of a card number.  &gt; Returned only in case of a card payment.
        /// </summary>
        /// <value>The last four digits of a card number.  &gt; Returned only in case of a card payment.</value>
        [JsonPropertyName("cardSummary")]
        public string CardSummary { get { return this.CardSummaryOption; } set { this.CardSummaryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IssuerBin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IssuerBinOption { get; private set; }

        /// <summary>
        /// The first eight digits of the card number. Only returned if the card number is 16 digits or more.  This is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with an eight-digit BIN.  Example: 52123423
        /// </summary>
        /// <value>The first eight digits of the card number. Only returned if the card number is 16 digits or more.  This is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with an eight-digit BIN.  Example: 52123423</value>
        [JsonPropertyName("issuerBin")]
        public string IssuerBin { get { return this.IssuerBinOption; } set { this.IssuerBinOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseAdditionalDataCard {\n");
            sb.Append("  CardBin: ").Append(CardBin).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  CardIssuingBank: ").Append(CardIssuingBank).Append("\n");
            sb.Append("  CardIssuingCountry: ").Append(CardIssuingCountry).Append("\n");
            sb.Append("  CardIssuingCurrency: ").Append(CardIssuingCurrency).Append("\n");
            sb.Append("  CardPaymentMethod: ").Append(CardPaymentMethod).Append("\n");
            sb.Append("  CardProductId: ").Append(CardProductId).Append("\n");
            sb.Append("  CardSummary: ").Append(CardSummary).Append("\n");
            sb.Append("  IssuerBin: ").Append(IssuerBin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResponseAdditionalDataCard" />
    /// </summary>
    public class ResponseAdditionalDataCardJsonConverter : JsonConverter<ResponseAdditionalDataCard>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResponseAdditionalDataCard" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResponseAdditionalDataCard Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> cardBin = default;
            Option<string> cardHolderName = default;
            Option<string> cardIssuingBank = default;
            Option<string> cardIssuingCountry = default;
            Option<string> cardIssuingCurrency = default;
            Option<string> cardPaymentMethod = default;
            Option<ResponseAdditionalDataCard.CardProductIdEnum?> cardProductId = default;
            Option<string> cardSummary = default;
            Option<string> issuerBin = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cardBin":
                            cardBin = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cardHolderName":
                            cardHolderName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cardIssuingBank":
                            cardIssuingBank = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cardIssuingCountry":
                            cardIssuingCountry = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cardIssuingCurrency":
                            cardIssuingCurrency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cardPaymentMethod":
                            cardPaymentMethod = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cardProductId":
                            string cardProductIdRawValue = utf8JsonReader.GetString();
                            if (cardProductIdRawValue != null)
                                cardProductId = new Option<ResponseAdditionalDataCard.CardProductIdEnum?>(ResponseAdditionalDataCard.CardProductIdEnumFromStringOrDefault(cardProductIdRawValue));
                            break;
                        case "cardSummary":
                            cardSummary = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "issuerBin":
                            issuerBin = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (cardBin.IsSet && cardBin.Value == null)
                throw new ArgumentNullException(nameof(cardBin), "Property is not nullable for class ResponseAdditionalDataCard.");

            if (cardHolderName.IsSet && cardHolderName.Value == null)
                throw new ArgumentNullException(nameof(cardHolderName), "Property is not nullable for class ResponseAdditionalDataCard.");

            if (cardIssuingBank.IsSet && cardIssuingBank.Value == null)
                throw new ArgumentNullException(nameof(cardIssuingBank), "Property is not nullable for class ResponseAdditionalDataCard.");

            if (cardIssuingCountry.IsSet && cardIssuingCountry.Value == null)
                throw new ArgumentNullException(nameof(cardIssuingCountry), "Property is not nullable for class ResponseAdditionalDataCard.");

            if (cardIssuingCurrency.IsSet && cardIssuingCurrency.Value == null)
                throw new ArgumentNullException(nameof(cardIssuingCurrency), "Property is not nullable for class ResponseAdditionalDataCard.");

            if (cardPaymentMethod.IsSet && cardPaymentMethod.Value == null)
                throw new ArgumentNullException(nameof(cardPaymentMethod), "Property is not nullable for class ResponseAdditionalDataCard.");

            if (cardProductId.IsSet && cardProductId.Value == null)
                throw new ArgumentNullException(nameof(cardProductId), "Property is not nullable for class ResponseAdditionalDataCard.");

            if (cardSummary.IsSet && cardSummary.Value == null)
                throw new ArgumentNullException(nameof(cardSummary), "Property is not nullable for class ResponseAdditionalDataCard.");

            if (issuerBin.IsSet && issuerBin.Value == null)
                throw new ArgumentNullException(nameof(issuerBin), "Property is not nullable for class ResponseAdditionalDataCard.");

            return new ResponseAdditionalDataCard(cardBin, cardHolderName, cardIssuingBank, cardIssuingCountry, cardIssuingCurrency, cardPaymentMethod, cardProductId, cardSummary, issuerBin);
        }

        /// <summary>
        /// Serializes a <see cref="ResponseAdditionalDataCard" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="responseAdditionalDataCard"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResponseAdditionalDataCard responseAdditionalDataCard, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, responseAdditionalDataCard, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResponseAdditionalDataCard" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="responseAdditionalDataCard"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResponseAdditionalDataCard responseAdditionalDataCard, JsonSerializerOptions jsonSerializerOptions)
        {
            if (responseAdditionalDataCard.CardBinOption.IsSet && responseAdditionalDataCard.CardBin == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCard.CardBin), "Property is required for class ResponseAdditionalDataCard.");

            if (responseAdditionalDataCard.CardHolderNameOption.IsSet && responseAdditionalDataCard.CardHolderName == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCard.CardHolderName), "Property is required for class ResponseAdditionalDataCard.");

            if (responseAdditionalDataCard.CardIssuingBankOption.IsSet && responseAdditionalDataCard.CardIssuingBank == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCard.CardIssuingBank), "Property is required for class ResponseAdditionalDataCard.");

            if (responseAdditionalDataCard.CardIssuingCountryOption.IsSet && responseAdditionalDataCard.CardIssuingCountry == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCard.CardIssuingCountry), "Property is required for class ResponseAdditionalDataCard.");

            if (responseAdditionalDataCard.CardIssuingCurrencyOption.IsSet && responseAdditionalDataCard.CardIssuingCurrency == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCard.CardIssuingCurrency), "Property is required for class ResponseAdditionalDataCard.");

            if (responseAdditionalDataCard.CardPaymentMethodOption.IsSet && responseAdditionalDataCard.CardPaymentMethod == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCard.CardPaymentMethod), "Property is required for class ResponseAdditionalDataCard.");

            if (responseAdditionalDataCard.CardSummaryOption.IsSet && responseAdditionalDataCard.CardSummary == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCard.CardSummary), "Property is required for class ResponseAdditionalDataCard.");

            if (responseAdditionalDataCard.IssuerBinOption.IsSet && responseAdditionalDataCard.IssuerBin == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataCard.IssuerBin), "Property is required for class ResponseAdditionalDataCard.");

            if (responseAdditionalDataCard.CardBinOption.IsSet)
                writer.WriteString("cardBin", responseAdditionalDataCard.CardBin);

            if (responseAdditionalDataCard.CardHolderNameOption.IsSet)
                writer.WriteString("cardHolderName", responseAdditionalDataCard.CardHolderName);

            if (responseAdditionalDataCard.CardIssuingBankOption.IsSet)
                writer.WriteString("cardIssuingBank", responseAdditionalDataCard.CardIssuingBank);

            if (responseAdditionalDataCard.CardIssuingCountryOption.IsSet)
                writer.WriteString("cardIssuingCountry", responseAdditionalDataCard.CardIssuingCountry);

            if (responseAdditionalDataCard.CardIssuingCurrencyOption.IsSet)
                writer.WriteString("cardIssuingCurrency", responseAdditionalDataCard.CardIssuingCurrency);

            if (responseAdditionalDataCard.CardPaymentMethodOption.IsSet)
                writer.WriteString("cardPaymentMethod", responseAdditionalDataCard.CardPaymentMethod);

            var cardProductIdRawValue = ResponseAdditionalDataCard.CardProductIdEnumToJsonValue(responseAdditionalDataCard.CardProductIdOption.Value.Value);
            writer.WriteString("cardProductId", cardProductIdRawValue);
            if (responseAdditionalDataCard.CardSummaryOption.IsSet)
                writer.WriteString("cardSummary", responseAdditionalDataCard.CardSummary);

            if (responseAdditionalDataCard.IssuerBinOption.IsSet)
                writer.WriteString("issuerBin", responseAdditionalDataCard.IssuerBin);
        }
    }
}
