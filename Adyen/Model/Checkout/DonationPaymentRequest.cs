// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// DonationPaymentRequest
    /// </summary>
    public partial class DonationPaymentRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DonationPaymentRequest" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="merchantAccount">The merchant account identifier, with which you want to process the transaction.</param>
        /// <param name="paymentMethod">paymentMethod</param>
        /// <param name="reference">The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\&quot;-\&quot;). Maximum length: 80 characters.</param>
        /// <param name="returnUrl">The URL to return to in case of a redirection. The format depends on the channel. This URL can have a maximum of 1024 characters. * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;  If the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value. &gt; The URL must not include personally identifiable information (PII), for example name or email address.</param>
        /// <param name="accountInfo">accountInfo</param>
        /// <param name="additionalData">This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value.</param>
        /// <param name="applicationInfo">applicationInfo</param>
        /// <param name="authenticationData">authenticationData</param>
        /// <param name="billingAddress">billingAddress</param>
        /// <param name="browserInfo">browserInfo</param>
        /// <param name="channel">The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * iOS * Android * Web</param>
        /// <param name="checkoutAttemptId">Checkout attempt ID that corresponds to the Id generated by the client SDK for tracking user payment journey.</param>
        /// <param name="conversionId">Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.</param>
        /// <param name="countryCode">The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE</param>
        /// <param name="dateOfBirth">The shopper&#39;s date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD</param>
        /// <param name="deliverAt">The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00</param>
        /// <param name="deliveryAddress">deliveryAddress</param>
        /// <param name="deviceFingerprint">A string containing the shopper&#39;s device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).</param>
        /// <param name="donationAccount">Donation account to which the transaction is credited.</param>
        /// <param name="donationCampaignId">The donation campaign ID received in the &#x60;/donationCampaigns&#x60; call.</param>
        /// <param name="donationOriginalPspReference">PSP reference of the transaction from which the donation token is generated. Required when &#x60;donationToken&#x60; is provided.</param>
        /// <param name="donationToken">Donation token received in the &#x60;/payments&#x60; call.</param>
        /// <param name="lineItems">Price and product information about the purchased items, to be included on the invoice sent to the shopper. &gt; This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, Riverty, and Zip.</param>
        /// <param name="merchantRiskIndicator">merchantRiskIndicator</param>
        /// <param name="metadata">Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \&quot;177\&quot; error occurs: \&quot;Metadata size exceeds limit\&quot;. * Maximum 20 characters per key. * Maximum 80 characters per value. </param>
        /// <param name="mpiData">mpiData</param>
        /// <param name="origin">Required for the 3D Secure 2 &#x60;channel&#x60; **Web** integration.  Set this parameter to the origin URL of the page that you are loading the 3D Secure Component from.</param>
        /// <param name="recurringProcessingModel">Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </param>
        /// <param name="redirectFromIssuerMethod">Specifies the redirect method (GET or POST) when redirecting back from the issuer.</param>
        /// <param name="redirectToIssuerMethod">Specifies the redirect method (GET or POST) when redirecting to the issuer.</param>
        /// <param name="sessionValidity">The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00</param>
        /// <param name="shopperEmail">The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks. &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperEmail&#x60; for all browser-based and mobile implementations.</param>
        /// <param name="shopperIP">The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).</param>
        /// <param name="shopperInteraction">Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.</param>
        /// <param name="shopperLocale">The combination of a language code and a country code to specify the language to be used in the payment.</param>
        /// <param name="shopperName">shopperName</param>
        /// <param name="shopperReference">Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.</param>
        /// <param name="socialSecurityNumber">The shopper&#39;s social security number.</param>
        /// <param name="telephoneNumber">The shopper&#39;s telephone number.</param>
        /// <param name="threeDS2RequestData">threeDS2RequestData</param>
        /// <param name="threeDSAuthenticationOnly">If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. (default to false)</param>
        [JsonConstructor]
        public DonationPaymentRequest(Amount amount, string merchantAccount, DonationPaymentMethod paymentMethod, string reference, string returnUrl, Option<AccountInfo> accountInfo = default, Option<Dictionary<string, string>> additionalData = default, Option<ApplicationInfo> applicationInfo = default, Option<AuthenticationData> authenticationData = default, Option<BillingAddress> billingAddress = default, Option<BrowserInfo> browserInfo = default, Option<ChannelEnum?> channel = default, Option<string> checkoutAttemptId = default, Option<string> conversionId = default, Option<string> countryCode = default, Option<DateTime?> dateOfBirth = default, Option<DateTime?> deliverAt = default, Option<DeliveryAddress> deliveryAddress = default, Option<string> deviceFingerprint = default, Option<string> donationAccount = default, Option<string> donationCampaignId = default, Option<string> donationOriginalPspReference = default, Option<string> donationToken = default, Option<List<LineItem>> lineItems = default, Option<MerchantRiskIndicator> merchantRiskIndicator = default, Option<Dictionary<string, string>> metadata = default, Option<ThreeDSecureData> mpiData = default, Option<string> origin = default, Option<RecurringProcessingModelEnum?> recurringProcessingModel = default, Option<string> redirectFromIssuerMethod = default, Option<string> redirectToIssuerMethod = default, Option<string> sessionValidity = default, Option<string> shopperEmail = default, Option<string> shopperIP = default, Option<ShopperInteractionEnum?> shopperInteraction = default, Option<string> shopperLocale = default, Option<Name> shopperName = default, Option<string> shopperReference = default, Option<string> socialSecurityNumber = default, Option<string> telephoneNumber = default, Option<ThreeDS2RequestFields> threeDS2RequestData = default, Option<bool?> threeDSAuthenticationOnly = default)
        {
            Amount = amount;
            MerchantAccount = merchantAccount;
            PaymentMethod = paymentMethod;
            Reference = reference;
            ReturnUrl = returnUrl;
            AccountInfoOption = accountInfo;
            AdditionalDataOption = additionalData;
            ApplicationInfoOption = applicationInfo;
            AuthenticationDataOption = authenticationData;
            BillingAddressOption = billingAddress;
            BrowserInfoOption = browserInfo;
            ChannelOption = channel;
            CheckoutAttemptIdOption = checkoutAttemptId;
            ConversionIdOption = conversionId;
            CountryCodeOption = countryCode;
            DateOfBirthOption = dateOfBirth;
            DeliverAtOption = deliverAt;
            DeliveryAddressOption = deliveryAddress;
            DeviceFingerprintOption = deviceFingerprint;
            DonationAccountOption = donationAccount;
            DonationCampaignIdOption = donationCampaignId;
            DonationOriginalPspReferenceOption = donationOriginalPspReference;
            DonationTokenOption = donationToken;
            LineItemsOption = lineItems;
            MerchantRiskIndicatorOption = merchantRiskIndicator;
            MetadataOption = metadata;
            MpiDataOption = mpiData;
            OriginOption = origin;
            RecurringProcessingModelOption = recurringProcessingModel;
            RedirectFromIssuerMethodOption = redirectFromIssuerMethod;
            RedirectToIssuerMethodOption = redirectToIssuerMethod;
            SessionValidityOption = sessionValidity;
            ShopperEmailOption = shopperEmail;
            ShopperIPOption = shopperIP;
            ShopperInteractionOption = shopperInteraction;
            ShopperLocaleOption = shopperLocale;
            ShopperNameOption = shopperName;
            ShopperReferenceOption = shopperReference;
            SocialSecurityNumberOption = socialSecurityNumber;
            TelephoneNumberOption = telephoneNumber;
            ThreeDS2RequestDataOption = threeDS2RequestData;
            ThreeDSAuthenticationOnlyOption = threeDSAuthenticationOnly;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * iOS * Android * Web
        /// </summary>
        /// <value>The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * iOS * Android * Web</value>
        public enum ChannelEnum
        {
            /// <summary>
            /// Enum IOS for value: iOS
            /// </summary>
            IOS = 1,

            /// <summary>
            /// Enum Android for value: Android
            /// </summary>
            Android = 2,

            /// <summary>
            /// Enum Web for value: Web
            /// </summary>
            Web = 3
        }

        /// <summary>
        /// Returns a <see cref="ChannelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ChannelEnum ChannelEnumFromString(string value)
        {
            if (value.Equals("iOS"))
                return ChannelEnum.IOS;

            if (value.Equals("Android"))
                return ChannelEnum.Android;

            if (value.Equals("Web"))
                return ChannelEnum.Web;

            throw new NotImplementedException($"Could not convert value to type ChannelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ChannelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChannelEnum? ChannelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("iOS"))
                return ChannelEnum.IOS;

            if (value.Equals("Android"))
                return ChannelEnum.Android;

            if (value.Equals("Web"))
                return ChannelEnum.Web;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChannelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ChannelEnumToJsonValue(ChannelEnum? value)
        {
            if (value == ChannelEnum.IOS)
                return "iOS";

            if (value == ChannelEnum.Android)
                return "Android";

            if (value == ChannelEnum.Web)
                return "Web";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Channel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChannelEnum?> ChannelOption { get; private set; }

        /// <summary>
        /// The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * iOS * Android * Web
        /// </summary>
        /// <value>The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * iOS * Android * Web</value>
        [JsonPropertyName("channel")]
        public ChannelEnum? Channel { get { return this.ChannelOption; } set { this.ChannelOption = new Option<ChannelEnum?>(value); } }

        /// <summary>
        /// Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. 
        /// </summary>
        /// <value>Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </value>
        public enum RecurringProcessingModelEnum
        {
            /// <summary>
            /// Enum CardOnFile for value: CardOnFile
            /// </summary>
            CardOnFile = 1,

            /// <summary>
            /// Enum Subscription for value: Subscription
            /// </summary>
            Subscription = 2,

            /// <summary>
            /// Enum UnscheduledCardOnFile for value: UnscheduledCardOnFile
            /// </summary>
            UnscheduledCardOnFile = 3
        }

        /// <summary>
        /// Returns a <see cref="RecurringProcessingModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RecurringProcessingModelEnum RecurringProcessingModelEnumFromString(string value)
        {
            if (value.Equals("CardOnFile"))
                return RecurringProcessingModelEnum.CardOnFile;

            if (value.Equals("Subscription"))
                return RecurringProcessingModelEnum.Subscription;

            if (value.Equals("UnscheduledCardOnFile"))
                return RecurringProcessingModelEnum.UnscheduledCardOnFile;

            throw new NotImplementedException($"Could not convert value to type RecurringProcessingModelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RecurringProcessingModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RecurringProcessingModelEnum? RecurringProcessingModelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CardOnFile"))
                return RecurringProcessingModelEnum.CardOnFile;

            if (value.Equals("Subscription"))
                return RecurringProcessingModelEnum.Subscription;

            if (value.Equals("UnscheduledCardOnFile"))
                return RecurringProcessingModelEnum.UnscheduledCardOnFile;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RecurringProcessingModelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RecurringProcessingModelEnumToJsonValue(RecurringProcessingModelEnum? value)
        {
            if (value == RecurringProcessingModelEnum.CardOnFile)
                return "CardOnFile";

            if (value == RecurringProcessingModelEnum.Subscription)
                return "Subscription";

            if (value == RecurringProcessingModelEnum.UnscheduledCardOnFile)
                return "UnscheduledCardOnFile";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of RecurringProcessingModel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RecurringProcessingModelEnum?> RecurringProcessingModelOption { get; private set; }

        /// <summary>
        /// Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. 
        /// </summary>
        /// <value>Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </value>
        [JsonPropertyName("recurringProcessingModel")]
        public RecurringProcessingModelEnum? RecurringProcessingModel { get { return this.RecurringProcessingModelOption; } set { this.RecurringProcessingModelOption = new Option<RecurringProcessingModelEnum?>(value); } }

        /// <summary>
        /// Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
        /// </summary>
        /// <value>Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.</value>
        public enum ShopperInteractionEnum
        {
            /// <summary>
            /// Enum Ecommerce for value: Ecommerce
            /// </summary>
            Ecommerce = 1,

            /// <summary>
            /// Enum ContAuth for value: ContAuth
            /// </summary>
            ContAuth = 2,

            /// <summary>
            /// Enum Moto for value: Moto
            /// </summary>
            Moto = 3,

            /// <summary>
            /// Enum POS for value: POS
            /// </summary>
            POS = 4
        }

        /// <summary>
        /// Returns a <see cref="ShopperInteractionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ShopperInteractionEnum ShopperInteractionEnumFromString(string value)
        {
            if (value.Equals("Ecommerce"))
                return ShopperInteractionEnum.Ecommerce;

            if (value.Equals("ContAuth"))
                return ShopperInteractionEnum.ContAuth;

            if (value.Equals("Moto"))
                return ShopperInteractionEnum.Moto;

            if (value.Equals("POS"))
                return ShopperInteractionEnum.POS;

            throw new NotImplementedException($"Could not convert value to type ShopperInteractionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ShopperInteractionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ShopperInteractionEnum? ShopperInteractionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Ecommerce"))
                return ShopperInteractionEnum.Ecommerce;

            if (value.Equals("ContAuth"))
                return ShopperInteractionEnum.ContAuth;

            if (value.Equals("Moto"))
                return ShopperInteractionEnum.Moto;

            if (value.Equals("POS"))
                return ShopperInteractionEnum.POS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ShopperInteractionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ShopperInteractionEnumToJsonValue(ShopperInteractionEnum? value)
        {
            if (value == ShopperInteractionEnum.Ecommerce)
                return "Ecommerce";

            if (value == ShopperInteractionEnum.ContAuth)
                return "ContAuth";

            if (value == ShopperInteractionEnum.Moto)
                return "Moto";

            if (value == ShopperInteractionEnum.POS)
                return "POS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ShopperInteraction
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShopperInteractionEnum?> ShopperInteractionOption { get; private set; }

        /// <summary>
        /// Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
        /// </summary>
        /// <value>Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.</value>
        [JsonPropertyName("shopperInteraction")]
        public ShopperInteractionEnum? ShopperInteraction { get { return this.ShopperInteractionOption; } set { this.ShopperInteractionOption = new Option<ShopperInteractionEnum?>(value); } }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public Amount Amount { get; set; }

        /// <summary>
        /// The merchant account identifier, with which you want to process the transaction.
        /// </summary>
        /// <value>The merchant account identifier, with which you want to process the transaction.</value>
        [JsonPropertyName("merchantAccount")]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [JsonPropertyName("paymentMethod")]
        public DonationPaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\&quot;-\&quot;). Maximum length: 80 characters.
        /// </summary>
        /// <value>The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\&quot;-\&quot;). Maximum length: 80 characters.</value>
        [JsonPropertyName("reference")]
        public string Reference { get; set; }

        /// <summary>
        /// The URL to return to in case of a redirection. The format depends on the channel. This URL can have a maximum of 1024 characters. * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;  If the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value. &gt; The URL must not include personally identifiable information (PII), for example name or email address.
        /// </summary>
        /// <value>The URL to return to in case of a redirection. The format depends on the channel. This URL can have a maximum of 1024 characters. * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;  If the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value. &gt; The URL must not include personally identifiable information (PII), for example name or email address.</value>
        [JsonPropertyName("returnUrl")]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Used to track the state of AccountInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountInfo> AccountInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccountInfo
        /// </summary>
        [JsonPropertyName("accountInfo")]
        public AccountInfo AccountInfo { get { return this.AccountInfoOption; } set { this.AccountInfoOption = new Option<AccountInfo>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> AdditionalDataOption { get; private set; }

        /// <summary>
        /// This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value.
        /// </summary>
        /// <value>This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value.</value>
        [JsonPropertyName("additionalData")]
        public Dictionary<string, string> AdditionalData { get { return this.AdditionalDataOption; } set { this.AdditionalDataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of ApplicationInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApplicationInfo> ApplicationInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets ApplicationInfo
        /// </summary>
        [JsonPropertyName("applicationInfo")]
        public ApplicationInfo ApplicationInfo { get { return this.ApplicationInfoOption; } set { this.ApplicationInfoOption = new Option<ApplicationInfo>(value); } }

        /// <summary>
        /// Used to track the state of AuthenticationData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AuthenticationData> AuthenticationDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthenticationData
        /// </summary>
        [JsonPropertyName("authenticationData")]
        public AuthenticationData AuthenticationData { get { return this.AuthenticationDataOption; } set { this.AuthenticationDataOption = new Option<AuthenticationData>(value); } }

        /// <summary>
        /// Used to track the state of BillingAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BillingAddress> BillingAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [JsonPropertyName("billingAddress")]
        public BillingAddress BillingAddress { get { return this.BillingAddressOption; } set { this.BillingAddressOption = new Option<BillingAddress>(value); } }

        /// <summary>
        /// Used to track the state of BrowserInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BrowserInfo> BrowserInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets BrowserInfo
        /// </summary>
        [JsonPropertyName("browserInfo")]
        public BrowserInfo BrowserInfo { get { return this.BrowserInfoOption; } set { this.BrowserInfoOption = new Option<BrowserInfo>(value); } }

        /// <summary>
        /// Used to track the state of CheckoutAttemptId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CheckoutAttemptIdOption { get; private set; }

        /// <summary>
        /// Checkout attempt ID that corresponds to the Id generated by the client SDK for tracking user payment journey.
        /// </summary>
        /// <value>Checkout attempt ID that corresponds to the Id generated by the client SDK for tracking user payment journey.</value>
        [JsonPropertyName("checkoutAttemptId")]
        public string CheckoutAttemptId { get { return this.CheckoutAttemptIdOption; } set { this.CheckoutAttemptIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ConversionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ConversionIdOption { get; private set; }

        /// <summary>
        /// Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.
        /// </summary>
        /// <value>Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.</value>
        [JsonPropertyName("conversionId")]
        [Obsolete]
        public string ConversionId { get { return this.ConversionIdOption; } set { this.ConversionIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryCodeOption { get; private set; }

        /// <summary>
        /// The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE
        /// </summary>
        /// <value>The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE</value>
        [JsonPropertyName("countryCode")]
        public string CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DateOfBirth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateOfBirthOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
        /// </summary>
        /// <value>The shopper&#39;s date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD</value>
        [JsonPropertyName("dateOfBirth")]
        public DateTime? DateOfBirth { get { return this.DateOfBirthOption; } set { this.DateOfBirthOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DeliverAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DeliverAtOption { get; private set; }

        /// <summary>
        /// The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00
        /// </summary>
        /// <value>The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00</value>
        [JsonPropertyName("deliverAt")]
        public DateTime? DeliverAt { get { return this.DeliverAtOption; } set { this.DeliverAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DeliveryAddress> DeliveryAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [JsonPropertyName("deliveryAddress")]
        public DeliveryAddress DeliveryAddress { get { return this.DeliveryAddressOption; } set { this.DeliveryAddressOption = new Option<DeliveryAddress>(value); } }

        /// <summary>
        /// Used to track the state of DeviceFingerprint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DeviceFingerprintOption { get; private set; }

        /// <summary>
        /// A string containing the shopper&#39;s device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).
        /// </summary>
        /// <value>A string containing the shopper&#39;s device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).</value>
        [JsonPropertyName("deviceFingerprint")]
        public string DeviceFingerprint { get { return this.DeviceFingerprintOption; } set { this.DeviceFingerprintOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DonationAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DonationAccountOption { get; private set; }

        /// <summary>
        /// Donation account to which the transaction is credited.
        /// </summary>
        /// <value>Donation account to which the transaction is credited.</value>
        [JsonPropertyName("donationAccount")]
        public string DonationAccount { get { return this.DonationAccountOption; } set { this.DonationAccountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DonationCampaignId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DonationCampaignIdOption { get; private set; }

        /// <summary>
        /// The donation campaign ID received in the &#x60;/donationCampaigns&#x60; call.
        /// </summary>
        /// <value>The donation campaign ID received in the &#x60;/donationCampaigns&#x60; call.</value>
        [JsonPropertyName("donationCampaignId")]
        public string DonationCampaignId { get { return this.DonationCampaignIdOption; } set { this.DonationCampaignIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DonationOriginalPspReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DonationOriginalPspReferenceOption { get; private set; }

        /// <summary>
        /// PSP reference of the transaction from which the donation token is generated. Required when &#x60;donationToken&#x60; is provided.
        /// </summary>
        /// <value>PSP reference of the transaction from which the donation token is generated. Required when &#x60;donationToken&#x60; is provided.</value>
        [JsonPropertyName("donationOriginalPspReference")]
        public string DonationOriginalPspReference { get { return this.DonationOriginalPspReferenceOption; } set { this.DonationOriginalPspReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DonationToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DonationTokenOption { get; private set; }

        /// <summary>
        /// Donation token received in the &#x60;/payments&#x60; call.
        /// </summary>
        /// <value>Donation token received in the &#x60;/payments&#x60; call.</value>
        [JsonPropertyName("donationToken")]
        public string DonationToken { get { return this.DonationTokenOption; } set { this.DonationTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LineItems
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LineItem>> LineItemsOption { get; private set; }

        /// <summary>
        /// Price and product information about the purchased items, to be included on the invoice sent to the shopper. &gt; This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, Riverty, and Zip.
        /// </summary>
        /// <value>Price and product information about the purchased items, to be included on the invoice sent to the shopper. &gt; This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, Riverty, and Zip.</value>
        [JsonPropertyName("lineItems")]
        public List<LineItem> LineItems { get { return this.LineItemsOption; } set { this.LineItemsOption = new Option<List<LineItem>>(value); } }

        /// <summary>
        /// Used to track the state of MerchantRiskIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MerchantRiskIndicator> MerchantRiskIndicatorOption { get; private set; }

        /// <summary>
        /// Gets or Sets MerchantRiskIndicator
        /// </summary>
        [JsonPropertyName("merchantRiskIndicator")]
        public MerchantRiskIndicator MerchantRiskIndicator { get { return this.MerchantRiskIndicatorOption; } set { this.MerchantRiskIndicatorOption = new Option<MerchantRiskIndicator>(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> MetadataOption { get; private set; }

        /// <summary>
        /// Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \&quot;177\&quot; error occurs: \&quot;Metadata size exceeds limit\&quot;. * Maximum 20 characters per key. * Maximum 80 characters per value. 
        /// </summary>
        /// <value>Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \&quot;177\&quot; error occurs: \&quot;Metadata size exceeds limit\&quot;. * Maximum 20 characters per key. * Maximum 80 characters per value. </value>
        [JsonPropertyName("metadata")]
        public Dictionary<string, string> Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of MpiData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDSecureData> MpiDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets MpiData
        /// </summary>
        [JsonPropertyName("mpiData")]
        public ThreeDSecureData MpiData { get { return this.MpiDataOption; } set { this.MpiDataOption = new Option<ThreeDSecureData>(value); } }

        /// <summary>
        /// Used to track the state of Origin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OriginOption { get; private set; }

        /// <summary>
        /// Required for the 3D Secure 2 &#x60;channel&#x60; **Web** integration.  Set this parameter to the origin URL of the page that you are loading the 3D Secure Component from.
        /// </summary>
        /// <value>Required for the 3D Secure 2 &#x60;channel&#x60; **Web** integration.  Set this parameter to the origin URL of the page that you are loading the 3D Secure Component from.</value>
        [JsonPropertyName("origin")]
        public string Origin { get { return this.OriginOption; } set { this.OriginOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RedirectFromIssuerMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RedirectFromIssuerMethodOption { get; private set; }

        /// <summary>
        /// Specifies the redirect method (GET or POST) when redirecting back from the issuer.
        /// </summary>
        /// <value>Specifies the redirect method (GET or POST) when redirecting back from the issuer.</value>
        [JsonPropertyName("redirectFromIssuerMethod")]
        public string RedirectFromIssuerMethod { get { return this.RedirectFromIssuerMethodOption; } set { this.RedirectFromIssuerMethodOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RedirectToIssuerMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RedirectToIssuerMethodOption { get; private set; }

        /// <summary>
        /// Specifies the redirect method (GET or POST) when redirecting to the issuer.
        /// </summary>
        /// <value>Specifies the redirect method (GET or POST) when redirecting to the issuer.</value>
        [JsonPropertyName("redirectToIssuerMethod")]
        public string RedirectToIssuerMethod { get { return this.RedirectToIssuerMethodOption; } set { this.RedirectToIssuerMethodOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SessionValidity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SessionValidityOption { get; private set; }

        /// <summary>
        /// The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00
        /// </summary>
        /// <value>The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00</value>
        [JsonPropertyName("sessionValidity")]
        public string SessionValidity { get { return this.SessionValidityOption; } set { this.SessionValidityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperEmailOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks. &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperEmail&#x60; for all browser-based and mobile implementations.
        /// </summary>
        /// <value>The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks. &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperEmail&#x60; for all browser-based and mobile implementations.</value>
        [JsonPropertyName("shopperEmail")]
        public string ShopperEmail { get { return this.ShopperEmailOption; } set { this.ShopperEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperIP
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperIPOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
        /// </summary>
        /// <value>The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).</value>
        [JsonPropertyName("shopperIP")]
        public string ShopperIP { get { return this.ShopperIPOption; } set { this.ShopperIPOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperLocale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperLocaleOption { get; private set; }

        /// <summary>
        /// The combination of a language code and a country code to specify the language to be used in the payment.
        /// </summary>
        /// <value>The combination of a language code and a country code to specify the language to be used in the payment.</value>
        [JsonPropertyName("shopperLocale")]
        public string ShopperLocale { get { return this.ShopperLocaleOption; } set { this.ShopperLocaleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Name> ShopperNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShopperName
        /// </summary>
        [JsonPropertyName("shopperName")]
        public Name ShopperName { get { return this.ShopperNameOption; } set { this.ShopperNameOption = new Option<Name>(value); } }

        /// <summary>
        /// Used to track the state of ShopperReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperReferenceOption { get; private set; }

        /// <summary>
        /// Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.
        /// </summary>
        /// <value>Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.</value>
        [JsonPropertyName("shopperReference")]
        public string ShopperReference { get { return this.ShopperReferenceOption; } set { this.ShopperReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SocialSecurityNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SocialSecurityNumberOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s social security number.
        /// </summary>
        /// <value>The shopper&#39;s social security number.</value>
        [JsonPropertyName("socialSecurityNumber")]
        public string SocialSecurityNumber { get { return this.SocialSecurityNumberOption; } set { this.SocialSecurityNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TelephoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TelephoneNumberOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s telephone number.
        /// </summary>
        /// <value>The shopper&#39;s telephone number.</value>
        [JsonPropertyName("telephoneNumber")]
        public string TelephoneNumber { get { return this.TelephoneNumberOption; } set { this.TelephoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDS2RequestData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDS2RequestFields> ThreeDS2RequestDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreeDS2RequestData
        /// </summary>
        [JsonPropertyName("threeDS2RequestData")]
        public ThreeDS2RequestFields ThreeDS2RequestData { get { return this.ThreeDS2RequestDataOption; } set { this.ThreeDS2RequestDataOption = new Option<ThreeDS2RequestFields>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSAuthenticationOnly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ThreeDSAuthenticationOnlyOption { get; private set; }

        /// <summary>
        /// If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
        /// </summary>
        /// <value>If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.</value>
        [JsonPropertyName("threeDSAuthenticationOnly")]
        [Obsolete]
        public bool? ThreeDSAuthenticationOnly { get { return this.ThreeDSAuthenticationOnlyOption; } set { this.ThreeDSAuthenticationOnlyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DonationPaymentRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  AccountInfo: ").Append(AccountInfo).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  ApplicationInfo: ").Append(ApplicationInfo).Append("\n");
            sb.Append("  AuthenticationData: ").Append(AuthenticationData).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  BrowserInfo: ").Append(BrowserInfo).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  CheckoutAttemptId: ").Append(CheckoutAttemptId).Append("\n");
            sb.Append("  ConversionId: ").Append(ConversionId).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DeliverAt: ").Append(DeliverAt).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  DeviceFingerprint: ").Append(DeviceFingerprint).Append("\n");
            sb.Append("  DonationAccount: ").Append(DonationAccount).Append("\n");
            sb.Append("  DonationCampaignId: ").Append(DonationCampaignId).Append("\n");
            sb.Append("  DonationOriginalPspReference: ").Append(DonationOriginalPspReference).Append("\n");
            sb.Append("  DonationToken: ").Append(DonationToken).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  MerchantRiskIndicator: ").Append(MerchantRiskIndicator).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  MpiData: ").Append(MpiData).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  RecurringProcessingModel: ").Append(RecurringProcessingModel).Append("\n");
            sb.Append("  RedirectFromIssuerMethod: ").Append(RedirectFromIssuerMethod).Append("\n");
            sb.Append("  RedirectToIssuerMethod: ").Append(RedirectToIssuerMethod).Append("\n");
            sb.Append("  SessionValidity: ").Append(SessionValidity).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("  ShopperIP: ").Append(ShopperIP).Append("\n");
            sb.Append("  ShopperInteraction: ").Append(ShopperInteraction).Append("\n");
            sb.Append("  ShopperLocale: ").Append(ShopperLocale).Append("\n");
            sb.Append("  ShopperName: ").Append(ShopperName).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("  SocialSecurityNumber: ").Append(SocialSecurityNumber).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  ThreeDS2RequestData: ").Append(ThreeDS2RequestData).Append("\n");
            sb.Append("  ThreeDSAuthenticationOnly: ").Append(ThreeDSAuthenticationOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReturnUrl (string) maxLength
            if (this.ReturnUrl != null && this.ReturnUrl.Length > 8000)
            {
                yield return new ValidationResult("Invalid value for ReturnUrl, length must be less than 8000.", new [] { "ReturnUrl" });
            }

            // CountryCode (string) maxLength
            if (this.CountryCode != null && this.CountryCode.Length > 100)
            {
                yield return new ValidationResult("Invalid value for CountryCode, length must be less than 100.", new [] { "CountryCode" });
            }

            // DeviceFingerprint (string) maxLength
            if (this.DeviceFingerprint != null && this.DeviceFingerprint.Length > 5000)
            {
                yield return new ValidationResult("Invalid value for DeviceFingerprint, length must be less than 5000.", new [] { "DeviceFingerprint" });
            }

            // Origin (string) maxLength
            if (this.Origin != null && this.Origin.Length > 80)
            {
                yield return new ValidationResult("Invalid value for Origin, length must be less than 80.", new [] { "Origin" });
            }

            // ShopperIP (string) maxLength
            if (this.ShopperIP != null && this.ShopperIP.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for ShopperIP, length must be less than 1000.", new [] { "ShopperIP" });
            }

            // ShopperReference (string) maxLength
            if (this.ShopperReference != null && this.ShopperReference.Length > 256)
            {
                yield return new ValidationResult("Invalid value for ShopperReference, length must be less than 256.", new [] { "ShopperReference" });
            }

            // ShopperReference (string) minLength
            if (this.ShopperReference != null && this.ShopperReference.Length < 3)
            {
                yield return new ValidationResult("Invalid value for ShopperReference, length must be greater than 3.", new [] { "ShopperReference" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DonationPaymentRequest" />
    /// </summary>
    public class DonationPaymentRequestJsonConverter : JsonConverter<DonationPaymentRequest>
    {
        /// <summary>
        /// The format to use to serialize DateOfBirth
        /// </summary>
        public static string DateOfBirthFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeliverAt
        /// </summary>
        public static string DeliverAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DonationPaymentRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DonationPaymentRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Amount> amount = default;
            Option<string> merchantAccount = default;
            Option<DonationPaymentMethod> paymentMethod = default;
            Option<string> reference = default;
            Option<string> returnUrl = default;
            Option<AccountInfo> accountInfo = default;
            Option<Dictionary<string, string>> additionalData = default;
            Option<ApplicationInfo> applicationInfo = default;
            Option<AuthenticationData> authenticationData = default;
            Option<BillingAddress> billingAddress = default;
            Option<BrowserInfo> browserInfo = default;
            Option<DonationPaymentRequest.ChannelEnum?> channel = default;
            Option<string> checkoutAttemptId = default;
            Option<string> conversionId = default;
            Option<string> countryCode = default;
            Option<DateTime?> dateOfBirth = default;
            Option<DateTime?> deliverAt = default;
            Option<DeliveryAddress> deliveryAddress = default;
            Option<string> deviceFingerprint = default;
            Option<string> donationAccount = default;
            Option<string> donationCampaignId = default;
            Option<string> donationOriginalPspReference = default;
            Option<string> donationToken = default;
            Option<List<LineItem>> lineItems = default;
            Option<MerchantRiskIndicator> merchantRiskIndicator = default;
            Option<Dictionary<string, string>> metadata = default;
            Option<ThreeDSecureData> mpiData = default;
            Option<string> origin = default;
            Option<DonationPaymentRequest.RecurringProcessingModelEnum?> recurringProcessingModel = default;
            Option<string> redirectFromIssuerMethod = default;
            Option<string> redirectToIssuerMethod = default;
            Option<string> sessionValidity = default;
            Option<string> shopperEmail = default;
            Option<string> shopperIP = default;
            Option<DonationPaymentRequest.ShopperInteractionEnum?> shopperInteraction = default;
            Option<string> shopperLocale = default;
            Option<Name> shopperName = default;
            Option<string> shopperReference = default;
            Option<string> socialSecurityNumber = default;
            Option<string> telephoneNumber = default;
            Option<ThreeDS2RequestFields> threeDS2RequestData = default;
            Option<bool?> threeDSAuthenticationOnly = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "merchantAccount":
                            merchantAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentMethod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentMethod = new Option<DonationPaymentMethod>(JsonSerializer.Deserialize<DonationPaymentMethod>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "returnUrl":
                            returnUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "accountInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountInfo = new Option<AccountInfo>(JsonSerializer.Deserialize<AccountInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "additionalData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalData = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "applicationInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                applicationInfo = new Option<ApplicationInfo>(JsonSerializer.Deserialize<ApplicationInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "authenticationData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                authenticationData = new Option<AuthenticationData>(JsonSerializer.Deserialize<AuthenticationData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "billingAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                billingAddress = new Option<BillingAddress>(JsonSerializer.Deserialize<BillingAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "browserInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                browserInfo = new Option<BrowserInfo>(JsonSerializer.Deserialize<BrowserInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "channel":
                            string channelRawValue = utf8JsonReader.GetString();
                            if (channelRawValue != null)
                                channel = new Option<DonationPaymentRequest.ChannelEnum?>(DonationPaymentRequest.ChannelEnumFromStringOrDefault(channelRawValue));
                            break;
                        case "checkoutAttemptId":
                            checkoutAttemptId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "conversionId":
                            conversionId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "countryCode":
                            countryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dateOfBirth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateOfBirth = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliverAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliverAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryAddress = new Option<DeliveryAddress>(JsonSerializer.Deserialize<DeliveryAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deviceFingerprint":
                            deviceFingerprint = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "donationAccount":
                            donationAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "donationCampaignId":
                            donationCampaignId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "donationOriginalPspReference":
                            donationOriginalPspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "donationToken":
                            donationToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lineItems":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lineItems = new Option<List<LineItem>>(JsonSerializer.Deserialize<List<LineItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "merchantRiskIndicator":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                merchantRiskIndicator = new Option<MerchantRiskIndicator>(JsonSerializer.Deserialize<MerchantRiskIndicator>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metadata":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                metadata = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mpiData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mpiData = new Option<ThreeDSecureData>(JsonSerializer.Deserialize<ThreeDSecureData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "origin":
                            origin = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurringProcessingModel":
                            string recurringProcessingModelRawValue = utf8JsonReader.GetString();
                            if (recurringProcessingModelRawValue != null)
                                recurringProcessingModel = new Option<DonationPaymentRequest.RecurringProcessingModelEnum?>(DonationPaymentRequest.RecurringProcessingModelEnumFromStringOrDefault(recurringProcessingModelRawValue));
                            break;
                        case "redirectFromIssuerMethod":
                            redirectFromIssuerMethod = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "redirectToIssuerMethod":
                            redirectToIssuerMethod = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sessionValidity":
                            sessionValidity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperEmail":
                            shopperEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperIP":
                            shopperIP = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperInteraction":
                            string shopperInteractionRawValue = utf8JsonReader.GetString();
                            if (shopperInteractionRawValue != null)
                                shopperInteraction = new Option<DonationPaymentRequest.ShopperInteractionEnum?>(DonationPaymentRequest.ShopperInteractionEnumFromStringOrDefault(shopperInteractionRawValue));
                            break;
                        case "shopperLocale":
                            shopperLocale = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperName":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shopperName = new Option<Name>(JsonSerializer.Deserialize<Name>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shopperReference":
                            shopperReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "socialSecurityNumber":
                            socialSecurityNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "telephoneNumber":
                            telephoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDS2RequestData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeDS2RequestData = new Option<ThreeDS2RequestFields>(JsonSerializer.Deserialize<ThreeDS2RequestFields>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "threeDSAuthenticationOnly":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeDSAuthenticationOnly = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class DonationPaymentRequest.", nameof(amount));

            if (!merchantAccount.IsSet)
                throw new ArgumentException("Property is required for class DonationPaymentRequest.", nameof(merchantAccount));

            if (!paymentMethod.IsSet)
                throw new ArgumentException("Property is required for class DonationPaymentRequest.", nameof(paymentMethod));

            if (!reference.IsSet)
                throw new ArgumentException("Property is required for class DonationPaymentRequest.", nameof(reference));

            if (!returnUrl.IsSet)
                throw new ArgumentException("Property is required for class DonationPaymentRequest.", nameof(returnUrl));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class DonationPaymentRequest.");

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount), "Property is not nullable for class DonationPaymentRequest.");

            if (paymentMethod.IsSet && paymentMethod.Value == null)
                throw new ArgumentNullException(nameof(paymentMethod), "Property is not nullable for class DonationPaymentRequest.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class DonationPaymentRequest.");

            if (returnUrl.IsSet && returnUrl.Value == null)
                throw new ArgumentNullException(nameof(returnUrl), "Property is not nullable for class DonationPaymentRequest.");

            if (accountInfo.IsSet && accountInfo.Value == null)
                throw new ArgumentNullException(nameof(accountInfo), "Property is not nullable for class DonationPaymentRequest.");

            if (additionalData.IsSet && additionalData.Value == null)
                throw new ArgumentNullException(nameof(additionalData), "Property is not nullable for class DonationPaymentRequest.");

            if (applicationInfo.IsSet && applicationInfo.Value == null)
                throw new ArgumentNullException(nameof(applicationInfo), "Property is not nullable for class DonationPaymentRequest.");

            if (authenticationData.IsSet && authenticationData.Value == null)
                throw new ArgumentNullException(nameof(authenticationData), "Property is not nullable for class DonationPaymentRequest.");

            if (billingAddress.IsSet && billingAddress.Value == null)
                throw new ArgumentNullException(nameof(billingAddress), "Property is not nullable for class DonationPaymentRequest.");

            if (browserInfo.IsSet && browserInfo.Value == null)
                throw new ArgumentNullException(nameof(browserInfo), "Property is not nullable for class DonationPaymentRequest.");

            if (channel.IsSet && channel.Value == null)
                throw new ArgumentNullException(nameof(channel), "Property is not nullable for class DonationPaymentRequest.");

            if (checkoutAttemptId.IsSet && checkoutAttemptId.Value == null)
                throw new ArgumentNullException(nameof(checkoutAttemptId), "Property is not nullable for class DonationPaymentRequest.");

            if (conversionId.IsSet && conversionId.Value == null)
                throw new ArgumentNullException(nameof(conversionId), "Property is not nullable for class DonationPaymentRequest.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class DonationPaymentRequest.");

            if (dateOfBirth.IsSet && dateOfBirth.Value == null)
                throw new ArgumentNullException(nameof(dateOfBirth), "Property is not nullable for class DonationPaymentRequest.");

            if (deliverAt.IsSet && deliverAt.Value == null)
                throw new ArgumentNullException(nameof(deliverAt), "Property is not nullable for class DonationPaymentRequest.");

            if (deliveryAddress.IsSet && deliveryAddress.Value == null)
                throw new ArgumentNullException(nameof(deliveryAddress), "Property is not nullable for class DonationPaymentRequest.");

            if (deviceFingerprint.IsSet && deviceFingerprint.Value == null)
                throw new ArgumentNullException(nameof(deviceFingerprint), "Property is not nullable for class DonationPaymentRequest.");

            if (donationAccount.IsSet && donationAccount.Value == null)
                throw new ArgumentNullException(nameof(donationAccount), "Property is not nullable for class DonationPaymentRequest.");

            if (donationCampaignId.IsSet && donationCampaignId.Value == null)
                throw new ArgumentNullException(nameof(donationCampaignId), "Property is not nullable for class DonationPaymentRequest.");

            if (donationOriginalPspReference.IsSet && donationOriginalPspReference.Value == null)
                throw new ArgumentNullException(nameof(donationOriginalPspReference), "Property is not nullable for class DonationPaymentRequest.");

            if (donationToken.IsSet && donationToken.Value == null)
                throw new ArgumentNullException(nameof(donationToken), "Property is not nullable for class DonationPaymentRequest.");

            if (lineItems.IsSet && lineItems.Value == null)
                throw new ArgumentNullException(nameof(lineItems), "Property is not nullable for class DonationPaymentRequest.");

            if (merchantRiskIndicator.IsSet && merchantRiskIndicator.Value == null)
                throw new ArgumentNullException(nameof(merchantRiskIndicator), "Property is not nullable for class DonationPaymentRequest.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class DonationPaymentRequest.");

            if (mpiData.IsSet && mpiData.Value == null)
                throw new ArgumentNullException(nameof(mpiData), "Property is not nullable for class DonationPaymentRequest.");

            if (origin.IsSet && origin.Value == null)
                throw new ArgumentNullException(nameof(origin), "Property is not nullable for class DonationPaymentRequest.");

            if (recurringProcessingModel.IsSet && recurringProcessingModel.Value == null)
                throw new ArgumentNullException(nameof(recurringProcessingModel), "Property is not nullable for class DonationPaymentRequest.");

            if (redirectFromIssuerMethod.IsSet && redirectFromIssuerMethod.Value == null)
                throw new ArgumentNullException(nameof(redirectFromIssuerMethod), "Property is not nullable for class DonationPaymentRequest.");

            if (redirectToIssuerMethod.IsSet && redirectToIssuerMethod.Value == null)
                throw new ArgumentNullException(nameof(redirectToIssuerMethod), "Property is not nullable for class DonationPaymentRequest.");

            if (sessionValidity.IsSet && sessionValidity.Value == null)
                throw new ArgumentNullException(nameof(sessionValidity), "Property is not nullable for class DonationPaymentRequest.");

            if (shopperEmail.IsSet && shopperEmail.Value == null)
                throw new ArgumentNullException(nameof(shopperEmail), "Property is not nullable for class DonationPaymentRequest.");

            if (shopperIP.IsSet && shopperIP.Value == null)
                throw new ArgumentNullException(nameof(shopperIP), "Property is not nullable for class DonationPaymentRequest.");

            if (shopperInteraction.IsSet && shopperInteraction.Value == null)
                throw new ArgumentNullException(nameof(shopperInteraction), "Property is not nullable for class DonationPaymentRequest.");

            if (shopperLocale.IsSet && shopperLocale.Value == null)
                throw new ArgumentNullException(nameof(shopperLocale), "Property is not nullable for class DonationPaymentRequest.");

            if (shopperName.IsSet && shopperName.Value == null)
                throw new ArgumentNullException(nameof(shopperName), "Property is not nullable for class DonationPaymentRequest.");

            if (shopperReference.IsSet && shopperReference.Value == null)
                throw new ArgumentNullException(nameof(shopperReference), "Property is not nullable for class DonationPaymentRequest.");

            if (socialSecurityNumber.IsSet && socialSecurityNumber.Value == null)
                throw new ArgumentNullException(nameof(socialSecurityNumber), "Property is not nullable for class DonationPaymentRequest.");

            if (telephoneNumber.IsSet && telephoneNumber.Value == null)
                throw new ArgumentNullException(nameof(telephoneNumber), "Property is not nullable for class DonationPaymentRequest.");

            if (threeDS2RequestData.IsSet && threeDS2RequestData.Value == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData), "Property is not nullable for class DonationPaymentRequest.");

            if (threeDSAuthenticationOnly.IsSet && threeDSAuthenticationOnly.Value == null)
                throw new ArgumentNullException(nameof(threeDSAuthenticationOnly), "Property is not nullable for class DonationPaymentRequest.");

            return new DonationPaymentRequest(amount.Value, merchantAccount.Value, paymentMethod.Value, reference.Value, returnUrl.Value, accountInfo, additionalData, applicationInfo, authenticationData, billingAddress, browserInfo, channel, checkoutAttemptId, conversionId, countryCode, dateOfBirth, deliverAt, deliveryAddress, deviceFingerprint, donationAccount, donationCampaignId, donationOriginalPspReference, donationToken, lineItems, merchantRiskIndicator, metadata, mpiData, origin, recurringProcessingModel, redirectFromIssuerMethod, redirectToIssuerMethod, sessionValidity, shopperEmail, shopperIP, shopperInteraction, shopperLocale, shopperName, shopperReference, socialSecurityNumber, telephoneNumber, threeDS2RequestData, threeDSAuthenticationOnly);
        }

        /// <summary>
        /// Serializes a <see cref="DonationPaymentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="donationPaymentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DonationPaymentRequest donationPaymentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, donationPaymentRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DonationPaymentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="donationPaymentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DonationPaymentRequest donationPaymentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (donationPaymentRequest.Amount == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.Amount), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.MerchantAccount == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.MerchantAccount), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.PaymentMethod == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.PaymentMethod), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.Reference == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.Reference), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.ReturnUrl == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.ReturnUrl), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.AccountInfoOption.IsSet && donationPaymentRequest.AccountInfo == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.AccountInfo), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.AdditionalDataOption.IsSet && donationPaymentRequest.AdditionalData == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.AdditionalData), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.ApplicationInfoOption.IsSet && donationPaymentRequest.ApplicationInfo == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.ApplicationInfo), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.AuthenticationDataOption.IsSet && donationPaymentRequest.AuthenticationData == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.AuthenticationData), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.BillingAddressOption.IsSet && donationPaymentRequest.BillingAddress == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.BillingAddress), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.BrowserInfoOption.IsSet && donationPaymentRequest.BrowserInfo == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.BrowserInfo), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.CheckoutAttemptIdOption.IsSet && donationPaymentRequest.CheckoutAttemptId == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.CheckoutAttemptId), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.ConversionIdOption.IsSet && donationPaymentRequest.ConversionId == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.ConversionId), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.CountryCodeOption.IsSet && donationPaymentRequest.CountryCode == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.CountryCode), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.DeliveryAddressOption.IsSet && donationPaymentRequest.DeliveryAddress == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.DeliveryAddress), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.DeviceFingerprintOption.IsSet && donationPaymentRequest.DeviceFingerprint == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.DeviceFingerprint), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.DonationAccountOption.IsSet && donationPaymentRequest.DonationAccount == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.DonationAccount), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.DonationCampaignIdOption.IsSet && donationPaymentRequest.DonationCampaignId == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.DonationCampaignId), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.DonationOriginalPspReferenceOption.IsSet && donationPaymentRequest.DonationOriginalPspReference == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.DonationOriginalPspReference), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.DonationTokenOption.IsSet && donationPaymentRequest.DonationToken == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.DonationToken), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.LineItemsOption.IsSet && donationPaymentRequest.LineItems == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.LineItems), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.MerchantRiskIndicatorOption.IsSet && donationPaymentRequest.MerchantRiskIndicator == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.MerchantRiskIndicator), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.MetadataOption.IsSet && donationPaymentRequest.Metadata == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.Metadata), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.MpiDataOption.IsSet && donationPaymentRequest.MpiData == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.MpiData), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.OriginOption.IsSet && donationPaymentRequest.Origin == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.Origin), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.RedirectFromIssuerMethodOption.IsSet && donationPaymentRequest.RedirectFromIssuerMethod == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.RedirectFromIssuerMethod), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.RedirectToIssuerMethodOption.IsSet && donationPaymentRequest.RedirectToIssuerMethod == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.RedirectToIssuerMethod), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.SessionValidityOption.IsSet && donationPaymentRequest.SessionValidity == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.SessionValidity), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.ShopperEmailOption.IsSet && donationPaymentRequest.ShopperEmail == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.ShopperEmail), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.ShopperIPOption.IsSet && donationPaymentRequest.ShopperIP == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.ShopperIP), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.ShopperLocaleOption.IsSet && donationPaymentRequest.ShopperLocale == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.ShopperLocale), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.ShopperNameOption.IsSet && donationPaymentRequest.ShopperName == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.ShopperName), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.ShopperReferenceOption.IsSet && donationPaymentRequest.ShopperReference == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.ShopperReference), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.SocialSecurityNumberOption.IsSet && donationPaymentRequest.SocialSecurityNumber == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.SocialSecurityNumber), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.TelephoneNumberOption.IsSet && donationPaymentRequest.TelephoneNumber == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.TelephoneNumber), "Property is required for class DonationPaymentRequest.");

            if (donationPaymentRequest.ThreeDS2RequestDataOption.IsSet && donationPaymentRequest.ThreeDS2RequestData == null)
                throw new ArgumentNullException(nameof(donationPaymentRequest.ThreeDS2RequestData), "Property is required for class DonationPaymentRequest.");

            writer.WritePropertyName("amount");
            JsonSerializer.Serialize(writer, donationPaymentRequest.Amount, jsonSerializerOptions);
            writer.WriteString("merchantAccount", donationPaymentRequest.MerchantAccount);

            writer.WritePropertyName("paymentMethod");
            JsonSerializer.Serialize(writer, donationPaymentRequest.PaymentMethod, jsonSerializerOptions);
            writer.WriteString("reference", donationPaymentRequest.Reference);

            writer.WriteString("returnUrl", donationPaymentRequest.ReturnUrl);

            if (donationPaymentRequest.AccountInfoOption.IsSet)
            {
                writer.WritePropertyName("accountInfo");
                JsonSerializer.Serialize(writer, donationPaymentRequest.AccountInfo, jsonSerializerOptions);
            }
            if (donationPaymentRequest.AdditionalDataOption.IsSet)
            {
                writer.WritePropertyName("additionalData");
                JsonSerializer.Serialize(writer, donationPaymentRequest.AdditionalData, jsonSerializerOptions);
            }
            if (donationPaymentRequest.ApplicationInfoOption.IsSet)
            {
                writer.WritePropertyName("applicationInfo");
                JsonSerializer.Serialize(writer, donationPaymentRequest.ApplicationInfo, jsonSerializerOptions);
            }
            if (donationPaymentRequest.AuthenticationDataOption.IsSet)
            {
                writer.WritePropertyName("authenticationData");
                JsonSerializer.Serialize(writer, donationPaymentRequest.AuthenticationData, jsonSerializerOptions);
            }
            if (donationPaymentRequest.BillingAddressOption.IsSet)
            {
                writer.WritePropertyName("billingAddress");
                JsonSerializer.Serialize(writer, donationPaymentRequest.BillingAddress, jsonSerializerOptions);
            }
            if (donationPaymentRequest.BrowserInfoOption.IsSet)
            {
                writer.WritePropertyName("browserInfo");
                JsonSerializer.Serialize(writer, donationPaymentRequest.BrowserInfo, jsonSerializerOptions);
            }
            var channelRawValue = DonationPaymentRequest.ChannelEnumToJsonValue(donationPaymentRequest.ChannelOption.Value.Value);
            writer.WriteString("channel", channelRawValue);
            if (donationPaymentRequest.CheckoutAttemptIdOption.IsSet)
                writer.WriteString("checkoutAttemptId", donationPaymentRequest.CheckoutAttemptId);

            if (donationPaymentRequest.ConversionIdOption.IsSet)
                writer.WriteString("conversionId", donationPaymentRequest.ConversionId);

            if (donationPaymentRequest.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", donationPaymentRequest.CountryCode);

            if (donationPaymentRequest.DateOfBirthOption.IsSet)
                writer.WriteString("dateOfBirth", donationPaymentRequest.DateOfBirthOption.Value.Value.ToString(DateOfBirthFormat));

            if (donationPaymentRequest.DeliverAtOption.IsSet)
                writer.WriteString("deliverAt", donationPaymentRequest.DeliverAtOption.Value.Value.ToString(DeliverAtFormat));

            if (donationPaymentRequest.DeliveryAddressOption.IsSet)
            {
                writer.WritePropertyName("deliveryAddress");
                JsonSerializer.Serialize(writer, donationPaymentRequest.DeliveryAddress, jsonSerializerOptions);
            }
            if (donationPaymentRequest.DeviceFingerprintOption.IsSet)
                writer.WriteString("deviceFingerprint", donationPaymentRequest.DeviceFingerprint);

            if (donationPaymentRequest.DonationAccountOption.IsSet)
                writer.WriteString("donationAccount", donationPaymentRequest.DonationAccount);

            if (donationPaymentRequest.DonationCampaignIdOption.IsSet)
                writer.WriteString("donationCampaignId", donationPaymentRequest.DonationCampaignId);

            if (donationPaymentRequest.DonationOriginalPspReferenceOption.IsSet)
                writer.WriteString("donationOriginalPspReference", donationPaymentRequest.DonationOriginalPspReference);

            if (donationPaymentRequest.DonationTokenOption.IsSet)
                writer.WriteString("donationToken", donationPaymentRequest.DonationToken);

            if (donationPaymentRequest.LineItemsOption.IsSet)
            {
                writer.WritePropertyName("lineItems");
                JsonSerializer.Serialize(writer, donationPaymentRequest.LineItems, jsonSerializerOptions);
            }
            if (donationPaymentRequest.MerchantRiskIndicatorOption.IsSet)
            {
                writer.WritePropertyName("merchantRiskIndicator");
                JsonSerializer.Serialize(writer, donationPaymentRequest.MerchantRiskIndicator, jsonSerializerOptions);
            }
            if (donationPaymentRequest.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, donationPaymentRequest.Metadata, jsonSerializerOptions);
            }
            if (donationPaymentRequest.MpiDataOption.IsSet)
            {
                writer.WritePropertyName("mpiData");
                JsonSerializer.Serialize(writer, donationPaymentRequest.MpiData, jsonSerializerOptions);
            }
            if (donationPaymentRequest.OriginOption.IsSet)
                writer.WriteString("origin", donationPaymentRequest.Origin);

            var recurringProcessingModelRawValue = DonationPaymentRequest.RecurringProcessingModelEnumToJsonValue(donationPaymentRequest.RecurringProcessingModelOption.Value.Value);
            writer.WriteString("recurringProcessingModel", recurringProcessingModelRawValue);
            if (donationPaymentRequest.RedirectFromIssuerMethodOption.IsSet)
                writer.WriteString("redirectFromIssuerMethod", donationPaymentRequest.RedirectFromIssuerMethod);

            if (donationPaymentRequest.RedirectToIssuerMethodOption.IsSet)
                writer.WriteString("redirectToIssuerMethod", donationPaymentRequest.RedirectToIssuerMethod);

            if (donationPaymentRequest.SessionValidityOption.IsSet)
                writer.WriteString("sessionValidity", donationPaymentRequest.SessionValidity);

            if (donationPaymentRequest.ShopperEmailOption.IsSet)
                writer.WriteString("shopperEmail", donationPaymentRequest.ShopperEmail);

            if (donationPaymentRequest.ShopperIPOption.IsSet)
                writer.WriteString("shopperIP", donationPaymentRequest.ShopperIP);

            var shopperInteractionRawValue = DonationPaymentRequest.ShopperInteractionEnumToJsonValue(donationPaymentRequest.ShopperInteractionOption.Value.Value);
            writer.WriteString("shopperInteraction", shopperInteractionRawValue);
            if (donationPaymentRequest.ShopperLocaleOption.IsSet)
                writer.WriteString("shopperLocale", donationPaymentRequest.ShopperLocale);

            if (donationPaymentRequest.ShopperNameOption.IsSet)
            {
                writer.WritePropertyName("shopperName");
                JsonSerializer.Serialize(writer, donationPaymentRequest.ShopperName, jsonSerializerOptions);
            }
            if (donationPaymentRequest.ShopperReferenceOption.IsSet)
                writer.WriteString("shopperReference", donationPaymentRequest.ShopperReference);

            if (donationPaymentRequest.SocialSecurityNumberOption.IsSet)
                writer.WriteString("socialSecurityNumber", donationPaymentRequest.SocialSecurityNumber);

            if (donationPaymentRequest.TelephoneNumberOption.IsSet)
                writer.WriteString("telephoneNumber", donationPaymentRequest.TelephoneNumber);

            if (donationPaymentRequest.ThreeDS2RequestDataOption.IsSet)
            {
                writer.WritePropertyName("threeDS2RequestData");
                JsonSerializer.Serialize(writer, donationPaymentRequest.ThreeDS2RequestData, jsonSerializerOptions);
            }
            if (donationPaymentRequest.ThreeDSAuthenticationOnlyOption.IsSet)
                writer.WriteBoolean("threeDSAuthenticationOnly", donationPaymentRequest.ThreeDSAuthenticationOnlyOption.Value.Value);
        }
    }
}
