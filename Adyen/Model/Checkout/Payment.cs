// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Payment
    /// </summary>
    public partial class Payment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="paymentMethod">paymentMethod</param>
        /// <param name="pspReference">Adyen&#39;s 16-character reference associated with the transaction/request. This value is globally unique. Use this reference when you communicate with us about this request.</param>
        /// <param name="resultCode">The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. </param>
        [JsonConstructor]
        public Payment(Option<Amount> amount = default, Option<ResponsePaymentMethod> paymentMethod = default, Option<string> pspReference = default, Option<ResultCodeEnum?> resultCode = default)
        {
            AmountOption = amount;
            PaymentMethodOption = paymentMethod;
            PspReferenceOption = pspReference;
            ResultCodeOption = resultCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. 
        /// </summary>
        /// <value>The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. </value>
        public enum ResultCodeEnum
        {
            /// <summary>
            /// Enum Authorised for value: Authorised
            /// </summary>
            Authorised = 1
        }

        /// <summary>
        /// Returns a <see cref="ResultCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ResultCodeEnum ResultCodeEnumFromString(string value)
        {
            if (value.Equals("Authorised"))
                return ResultCodeEnum.Authorised;

            throw new NotImplementedException($"Could not convert value to type ResultCodeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ResultCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ResultCodeEnum? ResultCodeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Authorised"))
                return ResultCodeEnum.Authorised;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ResultCodeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ResultCodeEnumToJsonValue(ResultCodeEnum? value)
        {
            if (value == ResultCodeEnum.Authorised)
                return "Authorised";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ResultCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResultCodeEnum?> ResultCodeOption { get; private set; }

        /// <summary>
        /// The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. 
        /// </summary>
        /// <value>The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. </value>
        [JsonPropertyName("resultCode")]
        public ResultCodeEnum? ResultCode { get { return this.ResultCodeOption; } set { this.ResultCodeOption = new Option<ResultCodeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> AmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public Amount Amount { get { return this.AmountOption; } set { this.AmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResponsePaymentMethod> PaymentMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [JsonPropertyName("paymentMethod")]
        public ResponsePaymentMethod PaymentMethod { get { return this.PaymentMethodOption; } set { this.PaymentMethodOption = new Option<ResponsePaymentMethod>(value); } }

        /// <summary>
        /// Used to track the state of PspReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PspReferenceOption { get; private set; }

        /// <summary>
        /// Adyen&#39;s 16-character reference associated with the transaction/request. This value is globally unique. Use this reference when you communicate with us about this request.
        /// </summary>
        /// <value>Adyen&#39;s 16-character reference associated with the transaction/request. This value is globally unique. Use this reference when you communicate with us about this request.</value>
        [JsonPropertyName("pspReference")]
        public string PspReference { get { return this.PspReferenceOption; } set { this.PspReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Payment" />
    /// </summary>
    public class PaymentJsonConverter : JsonConverter<Payment>
    {
        /// <summary>
        /// Deserializes json to <see cref="Payment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Payment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Amount> amount = default;
            Option<ResponsePaymentMethod> paymentMethod = default;
            Option<string> pspReference = default;
            Option<Payment.ResultCodeEnum?> resultCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "paymentMethod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentMethod = new Option<ResponsePaymentMethod>(JsonSerializer.Deserialize<ResponsePaymentMethod>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pspReference":
                            pspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "resultCode":
                            string resultCodeRawValue = utf8JsonReader.GetString();
                            if (resultCodeRawValue != null)
                                resultCode = new Option<Payment.ResultCodeEnum?>(Payment.ResultCodeEnumFromStringOrDefault(resultCodeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class Payment.");

            if (paymentMethod.IsSet && paymentMethod.Value == null)
                throw new ArgumentNullException(nameof(paymentMethod), "Property is not nullable for class Payment.");

            if (pspReference.IsSet && pspReference.Value == null)
                throw new ArgumentNullException(nameof(pspReference), "Property is not nullable for class Payment.");

            if (resultCode.IsSet && resultCode.Value == null)
                throw new ArgumentNullException(nameof(resultCode), "Property is not nullable for class Payment.");

            return new Payment(amount, paymentMethod, pspReference, resultCode);
        }

        /// <summary>
        /// Serializes a <see cref="Payment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="payment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Payment payment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, payment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Payment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="payment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Payment payment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (payment.AmountOption.IsSet && payment.Amount == null)
                throw new ArgumentNullException(nameof(payment.Amount), "Property is required for class Payment.");

            if (payment.PaymentMethodOption.IsSet && payment.PaymentMethod == null)
                throw new ArgumentNullException(nameof(payment.PaymentMethod), "Property is required for class Payment.");

            if (payment.PspReferenceOption.IsSet && payment.PspReference == null)
                throw new ArgumentNullException(nameof(payment.PspReference), "Property is required for class Payment.");

            if (payment.AmountOption.IsSet)
            {
                writer.WritePropertyName("amount");
                JsonSerializer.Serialize(writer, payment.Amount, jsonSerializerOptions);
            }
            if (payment.PaymentMethodOption.IsSet)
            {
                writer.WritePropertyName("paymentMethod");
                JsonSerializer.Serialize(writer, payment.PaymentMethod, jsonSerializerOptions);
            }
            if (payment.PspReferenceOption.IsSet)
                writer.WriteString("pspReference", payment.PspReference);

            var resultCodeRawValue = Payment.ResultCodeEnumToJsonValue(payment.ResultCodeOption.Value.Value);
            writer.WriteString("resultCode", resultCodeRawValue);
        }
    }
}
