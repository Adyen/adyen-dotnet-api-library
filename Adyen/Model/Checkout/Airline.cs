/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Airline
    /// </summary>
    [DataContract(Name = "Airline")]
    public partial class Airline : IEquatable<Airline>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Airline" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Airline() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Airline" /> class.
        /// </summary>
        /// <param name="agency">agency.</param>
        /// <param name="boardingFee">The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 11 characters.</param>
        /// <param name="code">The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros..</param>
        /// <param name="computerizedReservationSystem">The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters.</param>
        /// <param name="customerReferenceNumber">The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not start with a space or be all spaces..</param>
        /// <param name="designatorCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not start with a space or be all spaces..</param>
        /// <param name="documentType">A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters.</param>
        /// <param name="flightDate">The flight departure date. Time is optional. * Format for date only: &#x60;yyyy-MM-dd&#x60; * Format for date and time: &#x60;yyyy-MM-ddTHH:mm&#x60; * Use local time of departure airport. * minLength: 10 characters * maxLength: 16 characters.</param>
        /// <param name="legs">legs.</param>
        /// <param name="passengerName">The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not start with a space or be all spaces. * Must not be all zeros. (required).</param>
        /// <param name="passengers">passengers.</param>
        /// <param name="ticket">ticket.</param>
        /// <param name="travelAgency">travelAgency.</param>
        public Airline(Agency agency = default(Agency), long? boardingFee = default(long?), string code = default(string), string computerizedReservationSystem = default(string), string customerReferenceNumber = default(string), string designatorCode = default(string), string documentType = default(string), DateTime flightDate = default(DateTime), List<Leg> legs = default(List<Leg>), string passengerName = default(string), List<Passenger> passengers = default(List<Passenger>), Ticket ticket = default(Ticket), TravelAgency travelAgency = default(TravelAgency))
        {
            this.PassengerName = passengerName;
            this.Agency = agency;
            this.BoardingFee = boardingFee;
            this.Code = code;
            this.ComputerizedReservationSystem = computerizedReservationSystem;
            this.CustomerReferenceNumber = customerReferenceNumber;
            this.DesignatorCode = designatorCode;
            this.DocumentType = documentType;
            this.FlightDate = flightDate;
            this.Legs = legs;
            this.Passengers = passengers;
            this.Ticket = ticket;
            this.TravelAgency = travelAgency;
        }

        /// <summary>
        /// Gets or Sets Agency
        /// </summary>
        [DataMember(Name = "agency", EmitDefaultValue = false)]
        public Agency Agency { get; set; }

        /// <summary>
        /// The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 11 characters
        /// </summary>
        /// <value>The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 11 characters</value>
        [DataMember(Name = "boardingFee", EmitDefaultValue = false)]
        public long? BoardingFee { get; set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters
        /// </summary>
        /// <value>The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters</value>
        [DataMember(Name = "computerizedReservationSystem", EmitDefaultValue = false)]
        public string ComputerizedReservationSystem { get; set; }

        /// <summary>
        /// The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not start with a space or be all spaces.
        /// </summary>
        /// <value>The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not start with a space or be all spaces.</value>
        [DataMember(Name = "customerReferenceNumber", EmitDefaultValue = false)]
        public string CustomerReferenceNumber { get; set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not start with a space or be all spaces.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not start with a space or be all spaces.</value>
        [DataMember(Name = "designatorCode", EmitDefaultValue = false)]
        public string DesignatorCode { get; set; }

        /// <summary>
        /// A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters
        /// </summary>
        /// <value>A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters</value>
        [DataMember(Name = "documentType", EmitDefaultValue = false)]
        public string DocumentType { get; set; }

        /// <summary>
        /// The flight departure date. Time is optional. * Format for date only: &#x60;yyyy-MM-dd&#x60; * Format for date and time: &#x60;yyyy-MM-ddTHH:mm&#x60; * Use local time of departure airport. * minLength: 10 characters * maxLength: 16 characters
        /// </summary>
        /// <value>The flight departure date. Time is optional. * Format for date only: &#x60;yyyy-MM-dd&#x60; * Format for date and time: &#x60;yyyy-MM-ddTHH:mm&#x60; * Use local time of departure airport. * minLength: 10 characters * maxLength: 16 characters</value>
        [DataMember(Name = "flightDate", EmitDefaultValue = false)]
        public DateTime FlightDate { get; set; }

        /// <summary>
        /// Gets or Sets Legs
        /// </summary>
        [DataMember(Name = "legs", EmitDefaultValue = false)]
        public List<Leg> Legs { get; set; }

        /// <summary>
        /// The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [DataMember(Name = "passengerName", IsRequired = false, EmitDefaultValue = false)]
        public string PassengerName { get; set; }

        /// <summary>
        /// Gets or Sets Passengers
        /// </summary>
        [DataMember(Name = "passengers", EmitDefaultValue = false)]
        public List<Passenger> Passengers { get; set; }

        /// <summary>
        /// Gets or Sets Ticket
        /// </summary>
        [DataMember(Name = "ticket", EmitDefaultValue = false)]
        public Ticket Ticket { get; set; }

        /// <summary>
        /// Gets or Sets TravelAgency
        /// </summary>
        [DataMember(Name = "travelAgency", EmitDefaultValue = false)]
        public TravelAgency TravelAgency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Airline {\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  BoardingFee: ").Append(BoardingFee).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ComputerizedReservationSystem: ").Append(ComputerizedReservationSystem).Append("\n");
            sb.Append("  CustomerReferenceNumber: ").Append(CustomerReferenceNumber).Append("\n");
            sb.Append("  DesignatorCode: ").Append(DesignatorCode).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  FlightDate: ").Append(FlightDate).Append("\n");
            sb.Append("  Legs: ").Append(Legs).Append("\n");
            sb.Append("  PassengerName: ").Append(PassengerName).Append("\n");
            sb.Append("  Passengers: ").Append(Passengers).Append("\n");
            sb.Append("  Ticket: ").Append(Ticket).Append("\n");
            sb.Append("  TravelAgency: ").Append(TravelAgency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Airline);
        }

        /// <summary>
        /// Returns true if Airline instances are equal
        /// </summary>
        /// <param name="input">Instance of Airline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Airline input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Agency == input.Agency ||
                    (this.Agency != null &&
                    this.Agency.Equals(input.Agency))
                ) && 
                (
                    this.BoardingFee == input.BoardingFee ||
                    this.BoardingFee.Equals(input.BoardingFee)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.ComputerizedReservationSystem == input.ComputerizedReservationSystem ||
                    (this.ComputerizedReservationSystem != null &&
                    this.ComputerizedReservationSystem.Equals(input.ComputerizedReservationSystem))
                ) && 
                (
                    this.CustomerReferenceNumber == input.CustomerReferenceNumber ||
                    (this.CustomerReferenceNumber != null &&
                    this.CustomerReferenceNumber.Equals(input.CustomerReferenceNumber))
                ) && 
                (
                    this.DesignatorCode == input.DesignatorCode ||
                    (this.DesignatorCode != null &&
                    this.DesignatorCode.Equals(input.DesignatorCode))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.FlightDate == input.FlightDate ||
                    (this.FlightDate != null &&
                    this.FlightDate.Equals(input.FlightDate))
                ) && 
                (
                    this.Legs == input.Legs ||
                    this.Legs != null &&
                    input.Legs != null &&
                    this.Legs.SequenceEqual(input.Legs)
                ) && 
                (
                    this.PassengerName == input.PassengerName ||
                    (this.PassengerName != null &&
                    this.PassengerName.Equals(input.PassengerName))
                ) && 
                (
                    this.Passengers == input.Passengers ||
                    this.Passengers != null &&
                    input.Passengers != null &&
                    this.Passengers.SequenceEqual(input.Passengers)
                ) && 
                (
                    this.Ticket == input.Ticket ||
                    (this.Ticket != null &&
                    this.Ticket.Equals(input.Ticket))
                ) && 
                (
                    this.TravelAgency == input.TravelAgency ||
                    (this.TravelAgency != null &&
                    this.TravelAgency.Equals(input.TravelAgency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Agency != null)
                {
                    hashCode = (hashCode * 59) + this.Agency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BoardingFee.GetHashCode();
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.ComputerizedReservationSystem != null)
                {
                    hashCode = (hashCode * 59) + this.ComputerizedReservationSystem.GetHashCode();
                }
                if (this.CustomerReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerReferenceNumber.GetHashCode();
                }
                if (this.DesignatorCode != null)
                {
                    hashCode = (hashCode * 59) + this.DesignatorCode.GetHashCode();
                }
                if (this.DocumentType != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentType.GetHashCode();
                }
                if (this.FlightDate != null)
                {
                    hashCode = (hashCode * 59) + this.FlightDate.GetHashCode();
                }
                if (this.Legs != null)
                {
                    hashCode = (hashCode * 59) + this.Legs.GetHashCode();
                }
                if (this.PassengerName != null)
                {
                    hashCode = (hashCode * 59) + this.PassengerName.GetHashCode();
                }
                if (this.Passengers != null)
                {
                    hashCode = (hashCode * 59) + this.Passengers.GetHashCode();
                }
                if (this.Ticket != null)
                {
                    hashCode = (hashCode * 59) + this.Ticket.GetHashCode();
                }
                if (this.TravelAgency != null)
                {
                    hashCode = (hashCode * 59) + this.TravelAgency.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
