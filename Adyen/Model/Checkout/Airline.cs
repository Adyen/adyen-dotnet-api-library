// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Airline
    /// </summary>
    public partial class Airline : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Airline" /> class.
        /// </summary>
        /// <param name="passengerName">The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="agency">agency</param>
        /// <param name="boardingFee">The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 11 characters</param>
        /// <param name="code">The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.</param>
        /// <param name="computerizedReservationSystem">The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters</param>
        /// <param name="customerReferenceNumber">The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not start with a space or be all spaces.</param>
        /// <param name="designatorCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not start with a space or be all spaces.</param>
        /// <param name="documentType">A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters</param>
        /// <param name="flightDate">The flight departure date. Time is optional. * Format for date only: &#x60;yyyy-MM-dd&#x60; * Format for date and time: &#x60;yyyy-MM-ddTHH:mm&#x60; * Use local time of departure airport. * minLength: 10 characters * maxLength: 16 characters</param>
        /// <param name="legs">legs</param>
        /// <param name="passengers">passengers</param>
        /// <param name="ticket">ticket</param>
        /// <param name="travelAgency">travelAgency</param>
        [JsonConstructor]
        public Airline(string passengerName, Option<Agency> agency = default, Option<long?> boardingFee = default, Option<string> code = default, Option<string> computerizedReservationSystem = default, Option<string> customerReferenceNumber = default, Option<string> designatorCode = default, Option<string> documentType = default, Option<DateTime?> flightDate = default, Option<List<Leg>> legs = default, Option<List<Passenger>> passengers = default, Option<Ticket> ticket = default, Option<TravelAgency> travelAgency = default)
        {
            PassengerName = passengerName;
            AgencyOption = agency;
            BoardingFeeOption = boardingFee;
            CodeOption = code;
            ComputerizedReservationSystemOption = computerizedReservationSystem;
            CustomerReferenceNumberOption = customerReferenceNumber;
            DesignatorCodeOption = designatorCode;
            DocumentTypeOption = documentType;
            FlightDateOption = flightDate;
            LegsOption = legs;
            PassengersOption = passengers;
            TicketOption = ticket;
            TravelAgencyOption = travelAgency;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("passengerName")]
        public string PassengerName { get; set; }

        /// <summary>
        /// Used to track the state of Agency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Agency> AgencyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Agency
        /// </summary>
        [JsonPropertyName("agency")]
        public Agency Agency { get { return this.AgencyOption; } set { this.AgencyOption = new Option<Agency>(value); } }

        /// <summary>
        /// Used to track the state of BoardingFee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> BoardingFeeOption { get; private set; }

        /// <summary>
        /// The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 11 characters
        /// </summary>
        /// <value>The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 11 characters</value>
        [JsonPropertyName("boardingFee")]
        public long? BoardingFee { get { return this.BoardingFeeOption; } set { this.BoardingFeeOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodeOption { get; private set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not start with a space or be all spaces. * Must not be all zeros.</value>
        [JsonPropertyName("code")]
        public string Code { get { return this.CodeOption; } set { this.CodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ComputerizedReservationSystem
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ComputerizedReservationSystemOption { get; private set; }

        /// <summary>
        /// The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters
        /// </summary>
        /// <value>The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters</value>
        [JsonPropertyName("computerizedReservationSystem")]
        public string ComputerizedReservationSystem { get { return this.ComputerizedReservationSystemOption; } set { this.ComputerizedReservationSystemOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CustomerReferenceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CustomerReferenceNumberOption { get; private set; }

        /// <summary>
        /// The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not start with a space or be all spaces.
        /// </summary>
        /// <value>The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not start with a space or be all spaces.</value>
        [JsonPropertyName("customerReferenceNumber")]
        public string CustomerReferenceNumber { get { return this.CustomerReferenceNumberOption; } set { this.CustomerReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DesignatorCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DesignatorCodeOption { get; private set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not start with a space or be all spaces.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not start with a space or be all spaces.</value>
        [JsonPropertyName("designatorCode")]
        public string DesignatorCode { get { return this.DesignatorCodeOption; } set { this.DesignatorCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DocumentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DocumentTypeOption { get; private set; }

        /// <summary>
        /// A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters
        /// </summary>
        /// <value>A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters</value>
        [JsonPropertyName("documentType")]
        public string DocumentType { get { return this.DocumentTypeOption; } set { this.DocumentTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FlightDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> FlightDateOption { get; private set; }

        /// <summary>
        /// The flight departure date. Time is optional. * Format for date only: &#x60;yyyy-MM-dd&#x60; * Format for date and time: &#x60;yyyy-MM-ddTHH:mm&#x60; * Use local time of departure airport. * minLength: 10 characters * maxLength: 16 characters
        /// </summary>
        /// <value>The flight departure date. Time is optional. * Format for date only: &#x60;yyyy-MM-dd&#x60; * Format for date and time: &#x60;yyyy-MM-ddTHH:mm&#x60; * Use local time of departure airport. * minLength: 10 characters * maxLength: 16 characters</value>
        [JsonPropertyName("flightDate")]
        public DateTime? FlightDate { get { return this.FlightDateOption; } set { this.FlightDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Legs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Leg>> LegsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Legs
        /// </summary>
        [JsonPropertyName("legs")]
        public List<Leg> Legs { get { return this.LegsOption; } set { this.LegsOption = new Option<List<Leg>>(value); } }

        /// <summary>
        /// Used to track the state of Passengers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Passenger>> PassengersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Passengers
        /// </summary>
        [JsonPropertyName("passengers")]
        public List<Passenger> Passengers { get { return this.PassengersOption; } set { this.PassengersOption = new Option<List<Passenger>>(value); } }

        /// <summary>
        /// Used to track the state of Ticket
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Ticket> TicketOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ticket
        /// </summary>
        [JsonPropertyName("ticket")]
        public Ticket Ticket { get { return this.TicketOption; } set { this.TicketOption = new Option<Ticket>(value); } }

        /// <summary>
        /// Used to track the state of TravelAgency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TravelAgency> TravelAgencyOption { get; private set; }

        /// <summary>
        /// Gets or Sets TravelAgency
        /// </summary>
        [JsonPropertyName("travelAgency")]
        public TravelAgency TravelAgency { get { return this.TravelAgencyOption; } set { this.TravelAgencyOption = new Option<TravelAgency>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Airline {\n");
            sb.Append("  PassengerName: ").Append(PassengerName).Append("\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  BoardingFee: ").Append(BoardingFee).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ComputerizedReservationSystem: ").Append(ComputerizedReservationSystem).Append("\n");
            sb.Append("  CustomerReferenceNumber: ").Append(CustomerReferenceNumber).Append("\n");
            sb.Append("  DesignatorCode: ").Append(DesignatorCode).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  FlightDate: ").Append(FlightDate).Append("\n");
            sb.Append("  Legs: ").Append(Legs).Append("\n");
            sb.Append("  Passengers: ").Append(Passengers).Append("\n");
            sb.Append("  Ticket: ").Append(Ticket).Append("\n");
            sb.Append("  TravelAgency: ").Append(TravelAgency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Airline" />
    /// </summary>
    public class AirlineJsonConverter : JsonConverter<Airline>
    {
        /// <summary>
        /// The format to use to serialize FlightDate
        /// </summary>
        public static string FlightDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Airline" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Airline Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> passengerName = default;
            Option<Agency> agency = default;
            Option<long?> boardingFee = default;
            Option<string> code = default;
            Option<string> computerizedReservationSystem = default;
            Option<string> customerReferenceNumber = default;
            Option<string> designatorCode = default;
            Option<string> documentType = default;
            Option<DateTime?> flightDate = default;
            Option<List<Leg>> legs = default;
            Option<List<Passenger>> passengers = default;
            Option<Ticket> ticket = default;
            Option<TravelAgency> travelAgency = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "passengerName":
                            passengerName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "agency":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                agency = new Option<Agency>(JsonSerializer.Deserialize<Agency>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "boardingFee":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                boardingFee = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "code":
                            code = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "computerizedReservationSystem":
                            computerizedReservationSystem = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "customerReferenceNumber":
                            customerReferenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "designatorCode":
                            designatorCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "documentType":
                            documentType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "flightDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                flightDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "legs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                legs = new Option<List<Leg>>(JsonSerializer.Deserialize<List<Leg>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "passengers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passengers = new Option<List<Passenger>>(JsonSerializer.Deserialize<List<Passenger>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ticket":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ticket = new Option<Ticket>(JsonSerializer.Deserialize<Ticket>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "travelAgency":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                travelAgency = new Option<TravelAgency>(JsonSerializer.Deserialize<TravelAgency>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!passengerName.IsSet)
                throw new ArgumentException("Property is required for class Airline.", nameof(passengerName));

            if (passengerName.IsSet && passengerName.Value == null)
                throw new ArgumentNullException(nameof(passengerName), "Property is not nullable for class Airline.");

            if (agency.IsSet && agency.Value == null)
                throw new ArgumentNullException(nameof(agency), "Property is not nullable for class Airline.");

            if (boardingFee.IsSet && boardingFee.Value == null)
                throw new ArgumentNullException(nameof(boardingFee), "Property is not nullable for class Airline.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class Airline.");

            if (computerizedReservationSystem.IsSet && computerizedReservationSystem.Value == null)
                throw new ArgumentNullException(nameof(computerizedReservationSystem), "Property is not nullable for class Airline.");

            if (customerReferenceNumber.IsSet && customerReferenceNumber.Value == null)
                throw new ArgumentNullException(nameof(customerReferenceNumber), "Property is not nullable for class Airline.");

            if (designatorCode.IsSet && designatorCode.Value == null)
                throw new ArgumentNullException(nameof(designatorCode), "Property is not nullable for class Airline.");

            if (documentType.IsSet && documentType.Value == null)
                throw new ArgumentNullException(nameof(documentType), "Property is not nullable for class Airline.");

            if (flightDate.IsSet && flightDate.Value == null)
                throw new ArgumentNullException(nameof(flightDate), "Property is not nullable for class Airline.");

            if (legs.IsSet && legs.Value == null)
                throw new ArgumentNullException(nameof(legs), "Property is not nullable for class Airline.");

            if (passengers.IsSet && passengers.Value == null)
                throw new ArgumentNullException(nameof(passengers), "Property is not nullable for class Airline.");

            if (ticket.IsSet && ticket.Value == null)
                throw new ArgumentNullException(nameof(ticket), "Property is not nullable for class Airline.");

            if (travelAgency.IsSet && travelAgency.Value == null)
                throw new ArgumentNullException(nameof(travelAgency), "Property is not nullable for class Airline.");

            return new Airline(passengerName.Value, agency, boardingFee, code, computerizedReservationSystem, customerReferenceNumber, designatorCode, documentType, flightDate, legs, passengers, ticket, travelAgency);
        }

        /// <summary>
        /// Serializes a <see cref="Airline" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="airline"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Airline airline, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, airline, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Airline" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="airline"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Airline airline, JsonSerializerOptions jsonSerializerOptions)
        {
            if (airline.PassengerName == null)
                throw new ArgumentNullException(nameof(airline.PassengerName), "Property is required for class Airline.");

            if (airline.AgencyOption.IsSet && airline.Agency == null)
                throw new ArgumentNullException(nameof(airline.Agency), "Property is required for class Airline.");

            if (airline.CodeOption.IsSet && airline.Code == null)
                throw new ArgumentNullException(nameof(airline.Code), "Property is required for class Airline.");

            if (airline.ComputerizedReservationSystemOption.IsSet && airline.ComputerizedReservationSystem == null)
                throw new ArgumentNullException(nameof(airline.ComputerizedReservationSystem), "Property is required for class Airline.");

            if (airline.CustomerReferenceNumberOption.IsSet && airline.CustomerReferenceNumber == null)
                throw new ArgumentNullException(nameof(airline.CustomerReferenceNumber), "Property is required for class Airline.");

            if (airline.DesignatorCodeOption.IsSet && airline.DesignatorCode == null)
                throw new ArgumentNullException(nameof(airline.DesignatorCode), "Property is required for class Airline.");

            if (airline.DocumentTypeOption.IsSet && airline.DocumentType == null)
                throw new ArgumentNullException(nameof(airline.DocumentType), "Property is required for class Airline.");

            if (airline.LegsOption.IsSet && airline.Legs == null)
                throw new ArgumentNullException(nameof(airline.Legs), "Property is required for class Airline.");

            if (airline.PassengersOption.IsSet && airline.Passengers == null)
                throw new ArgumentNullException(nameof(airline.Passengers), "Property is required for class Airline.");

            if (airline.TicketOption.IsSet && airline.Ticket == null)
                throw new ArgumentNullException(nameof(airline.Ticket), "Property is required for class Airline.");

            if (airline.TravelAgencyOption.IsSet && airline.TravelAgency == null)
                throw new ArgumentNullException(nameof(airline.TravelAgency), "Property is required for class Airline.");

            writer.WriteString("passengerName", airline.PassengerName);

            if (airline.AgencyOption.IsSet)
            {
                writer.WritePropertyName("agency");
                JsonSerializer.Serialize(writer, airline.Agency, jsonSerializerOptions);
            }
            if (airline.BoardingFeeOption.IsSet)
                writer.WriteNumber("boardingFee", airline.BoardingFeeOption.Value.Value);

            if (airline.CodeOption.IsSet)
                writer.WriteString("code", airline.Code);

            if (airline.ComputerizedReservationSystemOption.IsSet)
                writer.WriteString("computerizedReservationSystem", airline.ComputerizedReservationSystem);

            if (airline.CustomerReferenceNumberOption.IsSet)
                writer.WriteString("customerReferenceNumber", airline.CustomerReferenceNumber);

            if (airline.DesignatorCodeOption.IsSet)
                writer.WriteString("designatorCode", airline.DesignatorCode);

            if (airline.DocumentTypeOption.IsSet)
                writer.WriteString("documentType", airline.DocumentType);

            if (airline.FlightDateOption.IsSet)
                writer.WriteString("flightDate", airline.FlightDateOption.Value.Value.ToString(FlightDateFormat));

            if (airline.LegsOption.IsSet)
            {
                writer.WritePropertyName("legs");
                JsonSerializer.Serialize(writer, airline.Legs, jsonSerializerOptions);
            }
            if (airline.PassengersOption.IsSet)
            {
                writer.WritePropertyName("passengers");
                JsonSerializer.Serialize(writer, airline.Passengers, jsonSerializerOptions);
            }
            if (airline.TicketOption.IsSet)
            {
                writer.WritePropertyName("ticket");
                JsonSerializer.Serialize(writer, airline.Ticket, jsonSerializerOptions);
            }
            if (airline.TravelAgencyOption.IsSet)
            {
                writer.WritePropertyName("travelAgency");
                JsonSerializer.Serialize(writer, airline.TravelAgency, jsonSerializerOptions);
            }
        }
    }
}
