// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// DonationPaymentResponse
    /// </summary>
    public partial class DonationPaymentResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DonationPaymentResponse" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="donationAccount">The Adyen account name of your charity. We will provide you with this account name once your chosen charity has been [onboarded](https://docs.adyen.com/online-payments/donations#onboarding).</param>
        /// <param name="id">Your unique resource identifier.</param>
        /// <param name="merchantAccount">The merchant account identifier, with which you want to process the transaction.</param>
        /// <param name="payment">payment</param>
        /// <param name="reference">The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\&quot;-\&quot;). Maximum length: 80 characters.</param>
        /// <param name="status">The status of the donation transaction.  Possible values: * **completed** * **pending** * **refused**</param>
        [JsonConstructor]
        public DonationPaymentResponse(Option<Amount> amount = default, Option<string> donationAccount = default, Option<string> id = default, Option<string> merchantAccount = default, Option<PaymentResponse> payment = default, Option<string> reference = default, Option<StatusEnum?> status = default)
        {
            AmountOption = amount;
            DonationAccountOption = donationAccount;
            IdOption = id;
            MerchantAccountOption = merchantAccount;
            PaymentOption = payment;
            ReferenceOption = reference;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The status of the donation transaction.  Possible values: * **completed** * **pending** * **refused**
        /// </summary>
        /// <value>The status of the donation transaction.  Possible values: * **completed** * **pending** * **refused**</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            Completed = 1,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 2,

            /// <summary>
            /// Enum Refused for value: refused
            /// </summary>
            Refused = 3
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("completed"))
                return StatusEnum.Completed;

            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("refused"))
                return StatusEnum.Refused;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("completed"))
                return StatusEnum.Completed;

            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("refused"))
                return StatusEnum.Refused;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == StatusEnum.Completed)
                return "completed";

            if (value == StatusEnum.Pending)
                return "pending";

            if (value == StatusEnum.Refused)
                return "refused";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// The status of the donation transaction.  Possible values: * **completed** * **pending** * **refused**
        /// </summary>
        /// <value>The status of the donation transaction.  Possible values: * **completed** * **pending** * **refused**</value>
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<StatusEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> AmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public Amount Amount { get { return this.AmountOption; } set { this.AmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of DonationAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DonationAccountOption { get; private set; }

        /// <summary>
        /// The Adyen account name of your charity. We will provide you with this account name once your chosen charity has been [onboarded](https://docs.adyen.com/online-payments/donations#onboarding).
        /// </summary>
        /// <value>The Adyen account name of your charity. We will provide you with this account name once your chosen charity has been [onboarded](https://docs.adyen.com/online-payments/donations#onboarding).</value>
        [JsonPropertyName("donationAccount")]
        public string DonationAccount { get { return this.DonationAccountOption; } set { this.DonationAccountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Your unique resource identifier.
        /// </summary>
        /// <value>Your unique resource identifier.</value>
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MerchantAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MerchantAccountOption { get; private set; }

        /// <summary>
        /// The merchant account identifier, with which you want to process the transaction.
        /// </summary>
        /// <value>The merchant account identifier, with which you want to process the transaction.</value>
        [JsonPropertyName("merchantAccount")]
        public string MerchantAccount { get { return this.MerchantAccountOption; } set { this.MerchantAccountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Payment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentResponse> PaymentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [JsonPropertyName("payment")]
        public PaymentResponse Payment { get { return this.PaymentOption; } set { this.PaymentOption = new Option<PaymentResponse>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\&quot;-\&quot;). Maximum length: 80 characters.
        /// </summary>
        /// <value>The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\&quot;-\&quot;). Maximum length: 80 characters.</value>
        [JsonPropertyName("reference")]
        public string Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DonationPaymentResponse {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  DonationAccount: ").Append(DonationAccount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DonationPaymentResponse" />
    /// </summary>
    public class DonationPaymentResponseJsonConverter : JsonConverter<DonationPaymentResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="DonationPaymentResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DonationPaymentResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Amount> amount = default;
            Option<string> donationAccount = default;
            Option<string> id = default;
            Option<string> merchantAccount = default;
            Option<PaymentResponse> payment = default;
            Option<string> reference = default;
            Option<DonationPaymentResponse.StatusEnum?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "donationAccount":
                            donationAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantAccount":
                            merchantAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "payment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payment = new Option<PaymentResponse>(JsonSerializer.Deserialize<PaymentResponse>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<DonationPaymentResponse.StatusEnum?>(DonationPaymentResponse.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class DonationPaymentResponse.");

            if (donationAccount.IsSet && donationAccount.Value == null)
                throw new ArgumentNullException(nameof(donationAccount), "Property is not nullable for class DonationPaymentResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DonationPaymentResponse.");

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount), "Property is not nullable for class DonationPaymentResponse.");

            if (payment.IsSet && payment.Value == null)
                throw new ArgumentNullException(nameof(payment), "Property is not nullable for class DonationPaymentResponse.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class DonationPaymentResponse.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DonationPaymentResponse.");

            return new DonationPaymentResponse(amount, donationAccount, id, merchantAccount, payment, reference, status);
        }

        /// <summary>
        /// Serializes a <see cref="DonationPaymentResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="donationPaymentResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DonationPaymentResponse donationPaymentResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, donationPaymentResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DonationPaymentResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="donationPaymentResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DonationPaymentResponse donationPaymentResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (donationPaymentResponse.AmountOption.IsSet && donationPaymentResponse.Amount == null)
                throw new ArgumentNullException(nameof(donationPaymentResponse.Amount), "Property is required for class DonationPaymentResponse.");

            if (donationPaymentResponse.DonationAccountOption.IsSet && donationPaymentResponse.DonationAccount == null)
                throw new ArgumentNullException(nameof(donationPaymentResponse.DonationAccount), "Property is required for class DonationPaymentResponse.");

            if (donationPaymentResponse.IdOption.IsSet && donationPaymentResponse.Id == null)
                throw new ArgumentNullException(nameof(donationPaymentResponse.Id), "Property is required for class DonationPaymentResponse.");

            if (donationPaymentResponse.MerchantAccountOption.IsSet && donationPaymentResponse.MerchantAccount == null)
                throw new ArgumentNullException(nameof(donationPaymentResponse.MerchantAccount), "Property is required for class DonationPaymentResponse.");

            if (donationPaymentResponse.PaymentOption.IsSet && donationPaymentResponse.Payment == null)
                throw new ArgumentNullException(nameof(donationPaymentResponse.Payment), "Property is required for class DonationPaymentResponse.");

            if (donationPaymentResponse.ReferenceOption.IsSet && donationPaymentResponse.Reference == null)
                throw new ArgumentNullException(nameof(donationPaymentResponse.Reference), "Property is required for class DonationPaymentResponse.");

            if (donationPaymentResponse.AmountOption.IsSet)
            {
                writer.WritePropertyName("amount");
                JsonSerializer.Serialize(writer, donationPaymentResponse.Amount, jsonSerializerOptions);
            }
            if (donationPaymentResponse.DonationAccountOption.IsSet)
                writer.WriteString("donationAccount", donationPaymentResponse.DonationAccount);

            if (donationPaymentResponse.IdOption.IsSet)
                writer.WriteString("id", donationPaymentResponse.Id);

            if (donationPaymentResponse.MerchantAccountOption.IsSet)
                writer.WriteString("merchantAccount", donationPaymentResponse.MerchantAccount);

            if (donationPaymentResponse.PaymentOption.IsSet)
            {
                writer.WritePropertyName("payment");
                JsonSerializer.Serialize(writer, donationPaymentResponse.Payment, jsonSerializerOptions);
            }
            if (donationPaymentResponse.ReferenceOption.IsSet)
                writer.WriteString("reference", donationPaymentResponse.Reference);

            var statusRawValue = DonationPaymentResponse.StatusEnumToJsonValue(donationPaymentResponse.StatusOption.Value.Value);
            writer.WriteString("status", statusRawValue);
        }
    }
}
