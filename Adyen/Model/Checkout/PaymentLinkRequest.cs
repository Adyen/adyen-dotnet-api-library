// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PaymentLinkRequest
    /// </summary>
    public partial class PaymentLinkRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentLinkRequest" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="merchantAccount">The merchant account identifier for which the payment link is created.</param>
        /// <param name="reference">A reference that is used to uniquely identify the payment in future communications about the payment status.</param>
        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</param>
        /// <param name="applicationInfo">applicationInfo</param>
        /// <param name="billingAddress">billingAddress</param>
        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</param>
        /// <param name="captureDelayHours">The delay between the authorisation and scheduled auto-capture, specified in hours.</param>
        /// <param name="countryCode">The shopper&#39;s two-letter country code.</param>
        /// <param name="dateOfBirth">The shopper&#39;s date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD</param>
        /// <param name="deliverAt">The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.</param>
        /// <param name="deliveryAddress">deliveryAddress</param>
        /// <param name="description">A short description visible on the payment page. Maximum length: 280 characters.</param>
        /// <param name="expiresAt">The date when the payment link expires.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format with time zone offset: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.  The maximum expiry date is 70 days after the payment link is created.  If not provided, the payment link expires 24 hours after it was created.</param>
        /// <param name="fundOrigin">fundOrigin</param>
        /// <param name="fundRecipient">fundRecipient</param>
        /// <param name="installmentOptions">A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.</param>
        /// <param name="lineItems">Price and product information about the purchased items, to be included on the invoice sent to the shopper. This parameter is required for open invoice (_buy now, pay later_) payment methods such Afterpay, Clearpay, Klarna, RatePay, Riverty, and Zip.</param>
        /// <param name="manualCapture">Indicates if the payment must be [captured manually](https://docs.adyen.com/online-payments/capture).</param>
        /// <param name="mcc">The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.</param>
        /// <param name="merchantOrderReference">This reference allows linking multiple transactions to each other for reporting purposes (for example, order auth-rate). The reference should be unique per billing cycle.</param>
        /// <param name="metadata">Metadata consists of entries, each of which includes a key and a value. Limitations: * Maximum 20 key-value pairs per request. Otherwise, error \&quot;177\&quot; occurs: \&quot;Metadata size exceeds limit\&quot; * Maximum 20 characters per key. Otherwise, error \&quot;178\&quot; occurs: \&quot;Metadata key size exceeds limit\&quot; * A key cannot have the name &#x60;checkout.linkId&#x60;. Any value that you provide with this key is going to be replaced by the real payment link ID.</param>
        /// <param name="platformChargebackLogic">platformChargebackLogic</param>
        /// <param name="recurringProcessingModel">Defines a recurring payment type. Required when &#x60;storePaymentMethodMode&#x60; is set to **askForConsent** or **enabled**. Possible values: * **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule. * **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </param>
        /// <param name="requiredShopperFields">List of fields that the shopper has to provide on the payment page before completing the payment. For more information, refer to [Provide shopper information](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#shopper-information).  Possible values: * **billingAddress** – The address where to send the invoice. * **deliveryAddress** – The address where the purchased goods should be delivered. * **shopperEmail** – The shopper&#39;s email address. * **shopperName** – The shopper&#39;s full name. * **telephoneNumber** – The shopper&#39;s phone number. </param>
        /// <param name="returnUrl">Website URL used for redirection after payment is completed. If provided, a **Continue** button will be shown on the payment page. If shoppers select the button, they are redirected to the specified URL.</param>
        /// <param name="reusable">Indicates whether the payment link can be reused for multiple payments. If not provided, this defaults to **false** which means the link can be used for one successful payment only.</param>
        /// <param name="riskData">riskData</param>
        /// <param name="shopperEmail">The shopper&#39;s email address.</param>
        /// <param name="shopperLocale">The language to be used in the payment page, specified by a combination of a language and country code. For example, &#x60;en-US&#x60;.  For a list of shopper locales that Pay by Link supports, refer to [Language and localization](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#language).</param>
        /// <param name="shopperName">shopperName</param>
        /// <param name="shopperReference">Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.</param>
        /// <param name="shopperStatement">The text to be shown on the shopper&#39;s bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , &#39; _ - ? + * /_**.</param>
        /// <param name="showRemovePaymentMethodButton">Set to **false** to hide the button that lets the shopper remove a stored payment method. (default to true)</param>
        /// <param name="socialSecurityNumber">The shopper&#39;s social security number.</param>
        /// <param name="splitCardFundingSources">Boolean value indicating whether the card payment method should be split into separate debit and credit options. (default to false)</param>
        /// <param name="splits">An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/platforms/process-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/classic-platforms/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).</param>
        /// <param name="store">The physical store, for which this payment is processed.</param>
        /// <param name="storePaymentMethodMode">Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the &#x60;shopperReference&#x60; is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the &#x60;shopperReference&#x60; is provided, the details will be stored without asking the shopper for consent.   When set to **askForConsent** or **enabled**, you must also include the &#x60;recurringProcessingModel&#x60; parameter.</param>
        /// <param name="telephoneNumber">The shopper&#39;s telephone number.</param>
        /// <param name="themeId">A [theme](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#themes) to customize the appearance of the payment page. If not specified, the payment page is rendered according to the theme set as default in your Customer Area.</param>
        /// <param name="threeDS2RequestData">threeDS2RequestData</param>
        [JsonConstructor]
        public PaymentLinkRequest(Amount amount, string merchantAccount, string reference, Option<List<string>> allowedPaymentMethods = default, Option<ApplicationInfo> applicationInfo = default, Option<Address> billingAddress = default, Option<List<string>> blockedPaymentMethods = default, Option<int?> captureDelayHours = default, Option<string> countryCode = default, Option<DateTime?> dateOfBirth = default, Option<DateTime?> deliverAt = default, Option<Address> deliveryAddress = default, Option<string> description = default, Option<DateTime?> expiresAt = default, Option<FundOrigin> fundOrigin = default, Option<FundRecipient> fundRecipient = default, Option<Dictionary<string, InstallmentOption>> installmentOptions = default, Option<List<LineItem>> lineItems = default, Option<bool?> manualCapture = default, Option<string> mcc = default, Option<string> merchantOrderReference = default, Option<Dictionary<string, string>> metadata = default, Option<PlatformChargebackLogic> platformChargebackLogic = default, Option<RecurringProcessingModelEnum?> recurringProcessingModel = default, Option<List<PaymentLinkRequest.RequiredShopperFieldsEnum>> requiredShopperFields = default, Option<string> returnUrl = default, Option<bool?> reusable = default, Option<RiskData> riskData = default, Option<string> shopperEmail = default, Option<string> shopperLocale = default, Option<Name> shopperName = default, Option<string> shopperReference = default, Option<string> shopperStatement = default, Option<bool?> showRemovePaymentMethodButton = default, Option<string> socialSecurityNumber = default, Option<bool?> splitCardFundingSources = default, Option<List<Split>> splits = default, Option<string> store = default, Option<StorePaymentMethodModeEnum?> storePaymentMethodMode = default, Option<string> telephoneNumber = default, Option<string> themeId = default, Option<CheckoutSessionThreeDS2RequestData> threeDS2RequestData = default)
        {
            Amount = amount;
            MerchantAccount = merchantAccount;
            Reference = reference;
            AllowedPaymentMethodsOption = allowedPaymentMethods;
            ApplicationInfoOption = applicationInfo;
            BillingAddressOption = billingAddress;
            BlockedPaymentMethodsOption = blockedPaymentMethods;
            CaptureDelayHoursOption = captureDelayHours;
            CountryCodeOption = countryCode;
            DateOfBirthOption = dateOfBirth;
            DeliverAtOption = deliverAt;
            DeliveryAddressOption = deliveryAddress;
            DescriptionOption = description;
            ExpiresAtOption = expiresAt;
            FundOriginOption = fundOrigin;
            FundRecipientOption = fundRecipient;
            InstallmentOptionsOption = installmentOptions;
            LineItemsOption = lineItems;
            ManualCaptureOption = manualCapture;
            MccOption = mcc;
            MerchantOrderReferenceOption = merchantOrderReference;
            MetadataOption = metadata;
            PlatformChargebackLogicOption = platformChargebackLogic;
            RecurringProcessingModelOption = recurringProcessingModel;
            RequiredShopperFieldsOption = requiredShopperFields;
            ReturnUrlOption = returnUrl;
            ReusableOption = reusable;
            RiskDataOption = riskData;
            ShopperEmailOption = shopperEmail;
            ShopperLocaleOption = shopperLocale;
            ShopperNameOption = shopperName;
            ShopperReferenceOption = shopperReference;
            ShopperStatementOption = shopperStatement;
            ShowRemovePaymentMethodButtonOption = showRemovePaymentMethodButton;
            SocialSecurityNumberOption = socialSecurityNumber;
            SplitCardFundingSourcesOption = splitCardFundingSources;
            SplitsOption = splits;
            StoreOption = store;
            StorePaymentMethodModeOption = storePaymentMethodMode;
            TelephoneNumberOption = telephoneNumber;
            ThemeIdOption = themeId;
            ThreeDS2RequestDataOption = threeDS2RequestData;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines a recurring payment type. Required when &#x60;storePaymentMethodMode&#x60; is set to **askForConsent** or **enabled**. Possible values: * **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule. * **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. 
        /// </summary>
        /// <value>Defines a recurring payment type. Required when &#x60;storePaymentMethodMode&#x60; is set to **askForConsent** or **enabled**. Possible values: * **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule. * **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </value>
        public enum RecurringProcessingModelEnum
        {
            /// <summary>
            /// Enum CardOnFile for value: CardOnFile
            /// </summary>
            CardOnFile = 1,

            /// <summary>
            /// Enum Subscription for value: Subscription
            /// </summary>
            Subscription = 2,

            /// <summary>
            /// Enum UnscheduledCardOnFile for value: UnscheduledCardOnFile
            /// </summary>
            UnscheduledCardOnFile = 3
        }

        /// <summary>
        /// Returns a <see cref="RecurringProcessingModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RecurringProcessingModelEnum RecurringProcessingModelEnumFromString(string value)
        {
            if (value.Equals("CardOnFile"))
                return RecurringProcessingModelEnum.CardOnFile;

            if (value.Equals("Subscription"))
                return RecurringProcessingModelEnum.Subscription;

            if (value.Equals("UnscheduledCardOnFile"))
                return RecurringProcessingModelEnum.UnscheduledCardOnFile;

            throw new NotImplementedException($"Could not convert value to type RecurringProcessingModelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RecurringProcessingModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RecurringProcessingModelEnum? RecurringProcessingModelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CardOnFile"))
                return RecurringProcessingModelEnum.CardOnFile;

            if (value.Equals("Subscription"))
                return RecurringProcessingModelEnum.Subscription;

            if (value.Equals("UnscheduledCardOnFile"))
                return RecurringProcessingModelEnum.UnscheduledCardOnFile;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RecurringProcessingModelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RecurringProcessingModelEnumToJsonValue(RecurringProcessingModelEnum? value)
        {
            if (value == RecurringProcessingModelEnum.CardOnFile)
                return "CardOnFile";

            if (value == RecurringProcessingModelEnum.Subscription)
                return "Subscription";

            if (value == RecurringProcessingModelEnum.UnscheduledCardOnFile)
                return "UnscheduledCardOnFile";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of RecurringProcessingModel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RecurringProcessingModelEnum?> RecurringProcessingModelOption { get; private set; }

        /// <summary>
        /// Defines a recurring payment type. Required when &#x60;storePaymentMethodMode&#x60; is set to **askForConsent** or **enabled**. Possible values: * **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule. * **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. 
        /// </summary>
        /// <value>Defines a recurring payment type. Required when &#x60;storePaymentMethodMode&#x60; is set to **askForConsent** or **enabled**. Possible values: * **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule. * **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </value>
        [JsonPropertyName("recurringProcessingModel")]
        public RecurringProcessingModelEnum? RecurringProcessingModel { get { return this.RecurringProcessingModelOption; } set { this.RecurringProcessingModelOption = new Option<RecurringProcessingModelEnum?>(value); } }

        /// <summary>
        /// Defines RequiredShopperFields
        /// </summary>
        public enum RequiredShopperFieldsEnum
        {
            /// <summary>
            /// Enum BillingAddress for value: billingAddress
            /// </summary>
            BillingAddress = 1,

            /// <summary>
            /// Enum DeliveryAddress for value: deliveryAddress
            /// </summary>
            DeliveryAddress = 2,

            /// <summary>
            /// Enum ShopperEmail for value: shopperEmail
            /// </summary>
            ShopperEmail = 3,

            /// <summary>
            /// Enum ShopperName for value: shopperName
            /// </summary>
            ShopperName = 4,

            /// <summary>
            /// Enum TelephoneNumber for value: telephoneNumber
            /// </summary>
            TelephoneNumber = 5
        }

        /// <summary>
        /// Returns a <see cref="RequiredShopperFieldsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RequiredShopperFieldsEnum RequiredShopperFieldsEnumFromString(string value)
        {
            if (value.Equals("billingAddress"))
                return RequiredShopperFieldsEnum.BillingAddress;

            if (value.Equals("deliveryAddress"))
                return RequiredShopperFieldsEnum.DeliveryAddress;

            if (value.Equals("shopperEmail"))
                return RequiredShopperFieldsEnum.ShopperEmail;

            if (value.Equals("shopperName"))
                return RequiredShopperFieldsEnum.ShopperName;

            if (value.Equals("telephoneNumber"))
                return RequiredShopperFieldsEnum.TelephoneNumber;

            throw new NotImplementedException($"Could not convert value to type RequiredShopperFieldsEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RequiredShopperFieldsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RequiredShopperFieldsEnum? RequiredShopperFieldsEnumFromStringOrDefault(string value)
        {
            if (value.Equals("billingAddress"))
                return RequiredShopperFieldsEnum.BillingAddress;

            if (value.Equals("deliveryAddress"))
                return RequiredShopperFieldsEnum.DeliveryAddress;

            if (value.Equals("shopperEmail"))
                return RequiredShopperFieldsEnum.ShopperEmail;

            if (value.Equals("shopperName"))
                return RequiredShopperFieldsEnum.ShopperName;

            if (value.Equals("telephoneNumber"))
                return RequiredShopperFieldsEnum.TelephoneNumber;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RequiredShopperFieldsEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RequiredShopperFieldsEnumToJsonValue(RequiredShopperFieldsEnum value)
        {
            if (value == RequiredShopperFieldsEnum.BillingAddress)
                return "billingAddress";

            if (value == RequiredShopperFieldsEnum.DeliveryAddress)
                return "deliveryAddress";

            if (value == RequiredShopperFieldsEnum.ShopperEmail)
                return "shopperEmail";

            if (value == RequiredShopperFieldsEnum.ShopperName)
                return "shopperName";

            if (value == RequiredShopperFieldsEnum.TelephoneNumber)
                return "telephoneNumber";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the &#x60;shopperReference&#x60; is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the &#x60;shopperReference&#x60; is provided, the details will be stored without asking the shopper for consent.   When set to **askForConsent** or **enabled**, you must also include the &#x60;recurringProcessingModel&#x60; parameter.
        /// </summary>
        /// <value>Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the &#x60;shopperReference&#x60; is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the &#x60;shopperReference&#x60; is provided, the details will be stored without asking the shopper for consent.   When set to **askForConsent** or **enabled**, you must also include the &#x60;recurringProcessingModel&#x60; parameter.</value>
        public enum StorePaymentMethodModeEnum
        {
            /// <summary>
            /// Enum AskForConsent for value: askForConsent
            /// </summary>
            AskForConsent = 1,

            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            Disabled = 2,

            /// <summary>
            /// Enum Enabled for value: enabled
            /// </summary>
            Enabled = 3
        }

        /// <summary>
        /// Returns a <see cref="StorePaymentMethodModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StorePaymentMethodModeEnum StorePaymentMethodModeEnumFromString(string value)
        {
            if (value.Equals("askForConsent"))
                return StorePaymentMethodModeEnum.AskForConsent;

            if (value.Equals("disabled"))
                return StorePaymentMethodModeEnum.Disabled;

            if (value.Equals("enabled"))
                return StorePaymentMethodModeEnum.Enabled;

            throw new NotImplementedException($"Could not convert value to type StorePaymentMethodModeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StorePaymentMethodModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StorePaymentMethodModeEnum? StorePaymentMethodModeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("askForConsent"))
                return StorePaymentMethodModeEnum.AskForConsent;

            if (value.Equals("disabled"))
                return StorePaymentMethodModeEnum.Disabled;

            if (value.Equals("enabled"))
                return StorePaymentMethodModeEnum.Enabled;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StorePaymentMethodModeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StorePaymentMethodModeEnumToJsonValue(StorePaymentMethodModeEnum? value)
        {
            if (value == StorePaymentMethodModeEnum.AskForConsent)
                return "askForConsent";

            if (value == StorePaymentMethodModeEnum.Disabled)
                return "disabled";

            if (value == StorePaymentMethodModeEnum.Enabled)
                return "enabled";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of StorePaymentMethodMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StorePaymentMethodModeEnum?> StorePaymentMethodModeOption { get; private set; }

        /// <summary>
        /// Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the &#x60;shopperReference&#x60; is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the &#x60;shopperReference&#x60; is provided, the details will be stored without asking the shopper for consent.   When set to **askForConsent** or **enabled**, you must also include the &#x60;recurringProcessingModel&#x60; parameter.
        /// </summary>
        /// <value>Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the &#x60;shopperReference&#x60; is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the &#x60;shopperReference&#x60; is provided, the details will be stored without asking the shopper for consent.   When set to **askForConsent** or **enabled**, you must also include the &#x60;recurringProcessingModel&#x60; parameter.</value>
        [JsonPropertyName("storePaymentMethodMode")]
        public StorePaymentMethodModeEnum? StorePaymentMethodMode { get { return this.StorePaymentMethodModeOption; } set { this.StorePaymentMethodModeOption = new Option<StorePaymentMethodModeEnum?>(value); } }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public Amount Amount { get; set; }

        /// <summary>
        /// The merchant account identifier for which the payment link is created.
        /// </summary>
        /// <value>The merchant account identifier for which the payment link is created.</value>
        [JsonPropertyName("merchantAccount")]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// A reference that is used to uniquely identify the payment in future communications about the payment status.
        /// </summary>
        /// <value>A reference that is used to uniquely identify the payment in future communications about the payment status.</value>
        [JsonPropertyName("reference")]
        public string Reference { get; set; }

        /// <summary>
        /// Used to track the state of AllowedPaymentMethods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> AllowedPaymentMethodsOption { get; private set; }

        /// <summary>
        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
        /// </summary>
        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
        [JsonPropertyName("allowedPaymentMethods")]
        public List<string> AllowedPaymentMethods { get { return this.AllowedPaymentMethodsOption; } set { this.AllowedPaymentMethodsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of ApplicationInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApplicationInfo> ApplicationInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets ApplicationInfo
        /// </summary>
        [JsonPropertyName("applicationInfo")]
        public ApplicationInfo ApplicationInfo { get { return this.ApplicationInfoOption; } set { this.ApplicationInfoOption = new Option<ApplicationInfo>(value); } }

        /// <summary>
        /// Used to track the state of BillingAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Address> BillingAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [JsonPropertyName("billingAddress")]
        public Address BillingAddress { get { return this.BillingAddressOption; } set { this.BillingAddressOption = new Option<Address>(value); } }

        /// <summary>
        /// Used to track the state of BlockedPaymentMethods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BlockedPaymentMethodsOption { get; private set; }

        /// <summary>
        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
        /// </summary>
        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
        [JsonPropertyName("blockedPaymentMethods")]
        public List<string> BlockedPaymentMethods { get { return this.BlockedPaymentMethodsOption; } set { this.BlockedPaymentMethodsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of CaptureDelayHours
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CaptureDelayHoursOption { get; private set; }

        /// <summary>
        /// The delay between the authorisation and scheduled auto-capture, specified in hours.
        /// </summary>
        /// <value>The delay between the authorisation and scheduled auto-capture, specified in hours.</value>
        [JsonPropertyName("captureDelayHours")]
        public int? CaptureDelayHours { get { return this.CaptureDelayHoursOption; } set { this.CaptureDelayHoursOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryCodeOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s two-letter country code.
        /// </summary>
        /// <value>The shopper&#39;s two-letter country code.</value>
        [JsonPropertyName("countryCode")]
        public string CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DateOfBirth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateOfBirthOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
        /// </summary>
        /// <value>The shopper&#39;s date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD</value>
        [JsonPropertyName("dateOfBirth")]
        public DateTime? DateOfBirth { get { return this.DateOfBirthOption; } set { this.DateOfBirthOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DeliverAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DeliverAtOption { get; private set; }

        /// <summary>
        /// The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.
        /// </summary>
        /// <value>The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.</value>
        [JsonPropertyName("deliverAt")]
        public DateTime? DeliverAt { get { return this.DeliverAtOption; } set { this.DeliverAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Address> DeliveryAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [JsonPropertyName("deliveryAddress")]
        public Address DeliveryAddress { get { return this.DeliveryAddressOption; } set { this.DeliveryAddressOption = new Option<Address>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// A short description visible on the payment page. Maximum length: 280 characters.
        /// </summary>
        /// <value>A short description visible on the payment page. Maximum length: 280 characters.</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpiresAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ExpiresAtOption { get; private set; }

        /// <summary>
        /// The date when the payment link expires.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format with time zone offset: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.  The maximum expiry date is 70 days after the payment link is created.  If not provided, the payment link expires 24 hours after it was created.
        /// </summary>
        /// <value>The date when the payment link expires.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format with time zone offset: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.  The maximum expiry date is 70 days after the payment link is created.  If not provided, the payment link expires 24 hours after it was created.</value>
        [JsonPropertyName("expiresAt")]
        public DateTime? ExpiresAt { get { return this.ExpiresAtOption; } set { this.ExpiresAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of FundOrigin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FundOrigin> FundOriginOption { get; private set; }

        /// <summary>
        /// Gets or Sets FundOrigin
        /// </summary>
        [JsonPropertyName("fundOrigin")]
        public FundOrigin FundOrigin { get { return this.FundOriginOption; } set { this.FundOriginOption = new Option<FundOrigin>(value); } }

        /// <summary>
        /// Used to track the state of FundRecipient
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FundRecipient> FundRecipientOption { get; private set; }

        /// <summary>
        /// Gets or Sets FundRecipient
        /// </summary>
        [JsonPropertyName("fundRecipient")]
        public FundRecipient FundRecipient { get { return this.FundRecipientOption; } set { this.FundRecipientOption = new Option<FundRecipient>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, InstallmentOption>> InstallmentOptionsOption { get; private set; }

        /// <summary>
        /// A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.
        /// </summary>
        /// <value>A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.</value>
        [JsonPropertyName("installmentOptions")]
        public Dictionary<string, InstallmentOption> InstallmentOptions { get { return this.InstallmentOptionsOption; } set { this.InstallmentOptionsOption = new Option<Dictionary<string, InstallmentOption>>(value); } }

        /// <summary>
        /// Used to track the state of LineItems
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LineItem>> LineItemsOption { get; private set; }

        /// <summary>
        /// Price and product information about the purchased items, to be included on the invoice sent to the shopper. This parameter is required for open invoice (_buy now, pay later_) payment methods such Afterpay, Clearpay, Klarna, RatePay, Riverty, and Zip.
        /// </summary>
        /// <value>Price and product information about the purchased items, to be included on the invoice sent to the shopper. This parameter is required for open invoice (_buy now, pay later_) payment methods such Afterpay, Clearpay, Klarna, RatePay, Riverty, and Zip.</value>
        [JsonPropertyName("lineItems")]
        public List<LineItem> LineItems { get { return this.LineItemsOption; } set { this.LineItemsOption = new Option<List<LineItem>>(value); } }

        /// <summary>
        /// Used to track the state of ManualCapture
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ManualCaptureOption { get; private set; }

        /// <summary>
        /// Indicates if the payment must be [captured manually](https://docs.adyen.com/online-payments/capture).
        /// </summary>
        /// <value>Indicates if the payment must be [captured manually](https://docs.adyen.com/online-payments/capture).</value>
        [JsonPropertyName("manualCapture")]
        public bool? ManualCapture { get { return this.ManualCaptureOption; } set { this.ManualCaptureOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Mcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MccOption { get; private set; }

        /// <summary>
        /// The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
        /// </summary>
        /// <value>The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.</value>
        [JsonPropertyName("mcc")]
        public string Mcc { get { return this.MccOption; } set { this.MccOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MerchantOrderReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MerchantOrderReferenceOption { get; private set; }

        /// <summary>
        /// This reference allows linking multiple transactions to each other for reporting purposes (for example, order auth-rate). The reference should be unique per billing cycle.
        /// </summary>
        /// <value>This reference allows linking multiple transactions to each other for reporting purposes (for example, order auth-rate). The reference should be unique per billing cycle.</value>
        [JsonPropertyName("merchantOrderReference")]
        public string MerchantOrderReference { get { return this.MerchantOrderReferenceOption; } set { this.MerchantOrderReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> MetadataOption { get; private set; }

        /// <summary>
        /// Metadata consists of entries, each of which includes a key and a value. Limitations: * Maximum 20 key-value pairs per request. Otherwise, error \&quot;177\&quot; occurs: \&quot;Metadata size exceeds limit\&quot; * Maximum 20 characters per key. Otherwise, error \&quot;178\&quot; occurs: \&quot;Metadata key size exceeds limit\&quot; * A key cannot have the name &#x60;checkout.linkId&#x60;. Any value that you provide with this key is going to be replaced by the real payment link ID.
        /// </summary>
        /// <value>Metadata consists of entries, each of which includes a key and a value. Limitations: * Maximum 20 key-value pairs per request. Otherwise, error \&quot;177\&quot; occurs: \&quot;Metadata size exceeds limit\&quot; * Maximum 20 characters per key. Otherwise, error \&quot;178\&quot; occurs: \&quot;Metadata key size exceeds limit\&quot; * A key cannot have the name &#x60;checkout.linkId&#x60;. Any value that you provide with this key is going to be replaced by the real payment link ID.</value>
        [JsonPropertyName("metadata")]
        public Dictionary<string, string> Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of PlatformChargebackLogic
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PlatformChargebackLogic> PlatformChargebackLogicOption { get; private set; }

        /// <summary>
        /// Gets or Sets PlatformChargebackLogic
        /// </summary>
        [JsonPropertyName("platformChargebackLogic")]
        public PlatformChargebackLogic PlatformChargebackLogic { get { return this.PlatformChargebackLogicOption; } set { this.PlatformChargebackLogicOption = new Option<PlatformChargebackLogic>(value); } }

        /// <summary>
        /// Used to track the state of RequiredShopperFields
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PaymentLinkRequest.RequiredShopperFieldsEnum>> RequiredShopperFieldsOption { get; private set; }

        /// <summary>
        /// List of fields that the shopper has to provide on the payment page before completing the payment. For more information, refer to [Provide shopper information](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#shopper-information).  Possible values: * **billingAddress** – The address where to send the invoice. * **deliveryAddress** – The address where the purchased goods should be delivered. * **shopperEmail** – The shopper&#39;s email address. * **shopperName** – The shopper&#39;s full name. * **telephoneNumber** – The shopper&#39;s phone number. 
        /// </summary>
        /// <value>List of fields that the shopper has to provide on the payment page before completing the payment. For more information, refer to [Provide shopper information](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#shopper-information).  Possible values: * **billingAddress** – The address where to send the invoice. * **deliveryAddress** – The address where the purchased goods should be delivered. * **shopperEmail** – The shopper&#39;s email address. * **shopperName** – The shopper&#39;s full name. * **telephoneNumber** – The shopper&#39;s phone number. </value>
        [JsonPropertyName("requiredShopperFields")]
        public List<PaymentLinkRequest.RequiredShopperFieldsEnum> RequiredShopperFields { get { return this.RequiredShopperFieldsOption; } set { this.RequiredShopperFieldsOption = new Option<List<PaymentLinkRequest.RequiredShopperFieldsEnum>>(value); } }

        /// <summary>
        /// Used to track the state of ReturnUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReturnUrlOption { get; private set; }

        /// <summary>
        /// Website URL used for redirection after payment is completed. If provided, a **Continue** button will be shown on the payment page. If shoppers select the button, they are redirected to the specified URL.
        /// </summary>
        /// <value>Website URL used for redirection after payment is completed. If provided, a **Continue** button will be shown on the payment page. If shoppers select the button, they are redirected to the specified URL.</value>
        [JsonPropertyName("returnUrl")]
        public string ReturnUrl { get { return this.ReturnUrlOption; } set { this.ReturnUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reusable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReusableOption { get; private set; }

        /// <summary>
        /// Indicates whether the payment link can be reused for multiple payments. If not provided, this defaults to **false** which means the link can be used for one successful payment only.
        /// </summary>
        /// <value>Indicates whether the payment link can be reused for multiple payments. If not provided, this defaults to **false** which means the link can be used for one successful payment only.</value>
        [JsonPropertyName("reusable")]
        public bool? Reusable { get { return this.ReusableOption; } set { this.ReusableOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of RiskData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RiskData> RiskDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets RiskData
        /// </summary>
        [JsonPropertyName("riskData")]
        public RiskData RiskData { get { return this.RiskDataOption; } set { this.RiskDataOption = new Option<RiskData>(value); } }

        /// <summary>
        /// Used to track the state of ShopperEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperEmailOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s email address.
        /// </summary>
        /// <value>The shopper&#39;s email address.</value>
        [JsonPropertyName("shopperEmail")]
        public string ShopperEmail { get { return this.ShopperEmailOption; } set { this.ShopperEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperLocale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperLocaleOption { get; private set; }

        /// <summary>
        /// The language to be used in the payment page, specified by a combination of a language and country code. For example, &#x60;en-US&#x60;.  For a list of shopper locales that Pay by Link supports, refer to [Language and localization](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#language).
        /// </summary>
        /// <value>The language to be used in the payment page, specified by a combination of a language and country code. For example, &#x60;en-US&#x60;.  For a list of shopper locales that Pay by Link supports, refer to [Language and localization](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#language).</value>
        [JsonPropertyName("shopperLocale")]
        public string ShopperLocale { get { return this.ShopperLocaleOption; } set { this.ShopperLocaleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Name> ShopperNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShopperName
        /// </summary>
        [JsonPropertyName("shopperName")]
        public Name ShopperName { get { return this.ShopperNameOption; } set { this.ShopperNameOption = new Option<Name>(value); } }

        /// <summary>
        /// Used to track the state of ShopperReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperReferenceOption { get; private set; }

        /// <summary>
        /// Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.
        /// </summary>
        /// <value>Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.</value>
        [JsonPropertyName("shopperReference")]
        public string ShopperReference { get { return this.ShopperReferenceOption; } set { this.ShopperReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperStatement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperStatementOption { get; private set; }

        /// <summary>
        /// The text to be shown on the shopper&#39;s bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , &#39; _ - ? + * /_**.
        /// </summary>
        /// <value>The text to be shown on the shopper&#39;s bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , &#39; _ - ? + * /_**.</value>
        [JsonPropertyName("shopperStatement")]
        public string ShopperStatement { get { return this.ShopperStatementOption; } set { this.ShopperStatementOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShowRemovePaymentMethodButton
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowRemovePaymentMethodButtonOption { get; private set; }

        /// <summary>
        /// Set to **false** to hide the button that lets the shopper remove a stored payment method.
        /// </summary>
        /// <value>Set to **false** to hide the button that lets the shopper remove a stored payment method.</value>
        [JsonPropertyName("showRemovePaymentMethodButton")]
        public bool? ShowRemovePaymentMethodButton { get { return this.ShowRemovePaymentMethodButtonOption; } set { this.ShowRemovePaymentMethodButtonOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SocialSecurityNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SocialSecurityNumberOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s social security number.
        /// </summary>
        /// <value>The shopper&#39;s social security number.</value>
        [JsonPropertyName("socialSecurityNumber")]
        public string SocialSecurityNumber { get { return this.SocialSecurityNumberOption; } set { this.SocialSecurityNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SplitCardFundingSources
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SplitCardFundingSourcesOption { get; private set; }

        /// <summary>
        /// Boolean value indicating whether the card payment method should be split into separate debit and credit options.
        /// </summary>
        /// <value>Boolean value indicating whether the card payment method should be split into separate debit and credit options.</value>
        [JsonPropertyName("splitCardFundingSources")]
        public bool? SplitCardFundingSources { get { return this.SplitCardFundingSourcesOption; } set { this.SplitCardFundingSourcesOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Splits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Split>> SplitsOption { get; private set; }

        /// <summary>
        /// An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/platforms/process-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/classic-platforms/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).
        /// </summary>
        /// <value>An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/platforms/process-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/classic-platforms/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).</value>
        [JsonPropertyName("splits")]
        public List<Split> Splits { get { return this.SplitsOption; } set { this.SplitsOption = new Option<List<Split>>(value); } }

        /// <summary>
        /// Used to track the state of Store
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StoreOption { get; private set; }

        /// <summary>
        /// The physical store, for which this payment is processed.
        /// </summary>
        /// <value>The physical store, for which this payment is processed.</value>
        [JsonPropertyName("store")]
        public string Store { get { return this.StoreOption; } set { this.StoreOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TelephoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TelephoneNumberOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s telephone number.
        /// </summary>
        /// <value>The shopper&#39;s telephone number.</value>
        [JsonPropertyName("telephoneNumber")]
        public string TelephoneNumber { get { return this.TelephoneNumberOption; } set { this.TelephoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThemeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThemeIdOption { get; private set; }

        /// <summary>
        /// A [theme](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#themes) to customize the appearance of the payment page. If not specified, the payment page is rendered according to the theme set as default in your Customer Area.
        /// </summary>
        /// <value>A [theme](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#themes) to customize the appearance of the payment page. If not specified, the payment page is rendered according to the theme set as default in your Customer Area.</value>
        [JsonPropertyName("themeId")]
        public string ThemeId { get { return this.ThemeIdOption; } set { this.ThemeIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDS2RequestData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CheckoutSessionThreeDS2RequestData> ThreeDS2RequestDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreeDS2RequestData
        /// </summary>
        [JsonPropertyName("threeDS2RequestData")]
        public CheckoutSessionThreeDS2RequestData ThreeDS2RequestData { get { return this.ThreeDS2RequestDataOption; } set { this.ThreeDS2RequestDataOption = new Option<CheckoutSessionThreeDS2RequestData>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentLinkRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  AllowedPaymentMethods: ").Append(AllowedPaymentMethods).Append("\n");
            sb.Append("  ApplicationInfo: ").Append(ApplicationInfo).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  BlockedPaymentMethods: ").Append(BlockedPaymentMethods).Append("\n");
            sb.Append("  CaptureDelayHours: ").Append(CaptureDelayHours).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DeliverAt: ").Append(DeliverAt).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  FundOrigin: ").Append(FundOrigin).Append("\n");
            sb.Append("  FundRecipient: ").Append(FundRecipient).Append("\n");
            sb.Append("  InstallmentOptions: ").Append(InstallmentOptions).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  ManualCapture: ").Append(ManualCapture).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  MerchantOrderReference: ").Append(MerchantOrderReference).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  PlatformChargebackLogic: ").Append(PlatformChargebackLogic).Append("\n");
            sb.Append("  RecurringProcessingModel: ").Append(RecurringProcessingModel).Append("\n");
            sb.Append("  RequiredShopperFields: ").Append(RequiredShopperFields).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  Reusable: ").Append(Reusable).Append("\n");
            sb.Append("  RiskData: ").Append(RiskData).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("  ShopperLocale: ").Append(ShopperLocale).Append("\n");
            sb.Append("  ShopperName: ").Append(ShopperName).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("  ShopperStatement: ").Append(ShopperStatement).Append("\n");
            sb.Append("  ShowRemovePaymentMethodButton: ").Append(ShowRemovePaymentMethodButton).Append("\n");
            sb.Append("  SocialSecurityNumber: ").Append(SocialSecurityNumber).Append("\n");
            sb.Append("  SplitCardFundingSources: ").Append(SplitCardFundingSources).Append("\n");
            sb.Append("  Splits: ").Append(Splits).Append("\n");
            sb.Append("  Store: ").Append(Store).Append("\n");
            sb.Append("  StorePaymentMethodMode: ").Append(StorePaymentMethodMode).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  ThemeId: ").Append(ThemeId).Append("\n");
            sb.Append("  ThreeDS2RequestData: ").Append(ThreeDS2RequestData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CountryCode (string) maxLength
            if (this.CountryCode != null && this.CountryCode.Length > 100)
            {
                yield return new ValidationResult("Invalid value for CountryCode, length must be less than 100.", new [] { "CountryCode" });
            }

            // Mcc (string) maxLength
            if (this.Mcc != null && this.Mcc.Length > 16)
            {
                yield return new ValidationResult("Invalid value for Mcc, length must be less than 16.", new [] { "Mcc" });
            }

            // MerchantOrderReference (string) maxLength
            if (this.MerchantOrderReference != null && this.MerchantOrderReference.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for MerchantOrderReference, length must be less than 1000.", new [] { "MerchantOrderReference" });
            }

            // ReturnUrl (string) maxLength
            if (this.ReturnUrl != null && this.ReturnUrl.Length > 8000)
            {
                yield return new ValidationResult("Invalid value for ReturnUrl, length must be less than 8000.", new [] { "ReturnUrl" });
            }

            // ShopperEmail (string) maxLength
            if (this.ShopperEmail != null && this.ShopperEmail.Length > 500)
            {
                yield return new ValidationResult("Invalid value for ShopperEmail, length must be less than 500.", new [] { "ShopperEmail" });
            }

            // ShopperLocale (string) maxLength
            if (this.ShopperLocale != null && this.ShopperLocale.Length > 32)
            {
                yield return new ValidationResult("Invalid value for ShopperLocale, length must be less than 32.", new [] { "ShopperLocale" });
            }

            // ShopperReference (string) maxLength
            if (this.ShopperReference != null && this.ShopperReference.Length > 256)
            {
                yield return new ValidationResult("Invalid value for ShopperReference, length must be less than 256.", new [] { "ShopperReference" });
            }

            // ShopperReference (string) minLength
            if (this.ShopperReference != null && this.ShopperReference.Length < 3)
            {
                yield return new ValidationResult("Invalid value for ShopperReference, length must be greater than 3.", new [] { "ShopperReference" });
            }

            // ShopperStatement (string) maxLength
            if (this.ShopperStatement != null && this.ShopperStatement.Length > 10000)
            {
                yield return new ValidationResult("Invalid value for ShopperStatement, length must be less than 10000.", new [] { "ShopperStatement" });
            }

            // SocialSecurityNumber (string) maxLength
            if (this.SocialSecurityNumber != null && this.SocialSecurityNumber.Length > 32)
            {
                yield return new ValidationResult("Invalid value for SocialSecurityNumber, length must be less than 32.", new [] { "SocialSecurityNumber" });
            }

            // TelephoneNumber (string) maxLength
            if (this.TelephoneNumber != null && this.TelephoneNumber.Length > 32)
            {
                yield return new ValidationResult("Invalid value for TelephoneNumber, length must be less than 32.", new [] { "TelephoneNumber" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentLinkRequest" />
    /// </summary>
    public class PaymentLinkRequestJsonConverter : JsonConverter<PaymentLinkRequest>
    {
        /// <summary>
        /// The format to use to serialize DateOfBirth
        /// </summary>
        public static string DateOfBirthFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize DeliverAt
        /// </summary>
        public static string DeliverAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ExpiresAt
        /// </summary>
        public static string ExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PaymentLinkRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentLinkRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Amount> amount = default;
            Option<string> merchantAccount = default;
            Option<string> reference = default;
            Option<List<string>> allowedPaymentMethods = default;
            Option<ApplicationInfo> applicationInfo = default;
            Option<Address> billingAddress = default;
            Option<List<string>> blockedPaymentMethods = default;
            Option<int?> captureDelayHours = default;
            Option<string> countryCode = default;
            Option<DateTime?> dateOfBirth = default;
            Option<DateTime?> deliverAt = default;
            Option<Address> deliveryAddress = default;
            Option<string> description = default;
            Option<DateTime?> expiresAt = default;
            Option<FundOrigin> fundOrigin = default;
            Option<FundRecipient> fundRecipient = default;
            Option<Dictionary<string, InstallmentOption>> installmentOptions = default;
            Option<List<LineItem>> lineItems = default;
            Option<bool?> manualCapture = default;
            Option<string> mcc = default;
            Option<string> merchantOrderReference = default;
            Option<Dictionary<string, string>> metadata = default;
            Option<PlatformChargebackLogic> platformChargebackLogic = default;
            Option<PaymentLinkRequest.RecurringProcessingModelEnum?> recurringProcessingModel = default;
            Option<List<PaymentLinkRequest.RequiredShopperFieldsEnum>> requiredShopperFields = default;
            Option<string> returnUrl = default;
            Option<bool?> reusable = default;
            Option<RiskData> riskData = default;
            Option<string> shopperEmail = default;
            Option<string> shopperLocale = default;
            Option<Name> shopperName = default;
            Option<string> shopperReference = default;
            Option<string> shopperStatement = default;
            Option<bool?> showRemovePaymentMethodButton = default;
            Option<string> socialSecurityNumber = default;
            Option<bool?> splitCardFundingSources = default;
            Option<List<Split>> splits = default;
            Option<string> store = default;
            Option<PaymentLinkRequest.StorePaymentMethodModeEnum?> storePaymentMethodMode = default;
            Option<string> telephoneNumber = default;
            Option<string> themeId = default;
            Option<CheckoutSessionThreeDS2RequestData> threeDS2RequestData = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "merchantAccount":
                            merchantAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "allowedPaymentMethods":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowedPaymentMethods = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "applicationInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                applicationInfo = new Option<ApplicationInfo>(JsonSerializer.Deserialize<ApplicationInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "billingAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                billingAddress = new Option<Address>(JsonSerializer.Deserialize<Address>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "blockedPaymentMethods":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                blockedPaymentMethods = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "captureDelayHours":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                captureDelayHours = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "countryCode":
                            countryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dateOfBirth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateOfBirth = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliverAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliverAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryAddress = new Option<Address>(JsonSerializer.Deserialize<Address>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expiresAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fundOrigin":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fundOrigin = new Option<FundOrigin>(JsonSerializer.Deserialize<FundOrigin>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fundRecipient":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fundRecipient = new Option<FundRecipient>(JsonSerializer.Deserialize<FundRecipient>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "installmentOptions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                installmentOptions = new Option<Dictionary<string, InstallmentOption>>(JsonSerializer.Deserialize<Dictionary<string, InstallmentOption>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "lineItems":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lineItems = new Option<List<LineItem>>(JsonSerializer.Deserialize<List<LineItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "manualCapture":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                manualCapture = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "mcc":
                            mcc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantOrderReference":
                            merchantOrderReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "metadata":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                metadata = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "platformChargebackLogic":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                platformChargebackLogic = new Option<PlatformChargebackLogic>(JsonSerializer.Deserialize<PlatformChargebackLogic>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recurringProcessingModel":
                            string recurringProcessingModelRawValue = utf8JsonReader.GetString();
                            if (recurringProcessingModelRawValue != null)
                                recurringProcessingModel = new Option<PaymentLinkRequest.RecurringProcessingModelEnum?>(PaymentLinkRequest.RecurringProcessingModelEnumFromStringOrDefault(recurringProcessingModelRawValue));
                            break;
                        case "requiredShopperFields":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                requiredShopperFields = new Option<List<PaymentLinkRequest.RequiredShopperFieldsEnum>>(JsonSerializer.Deserialize<List<PaymentLinkRequest.RequiredShopperFieldsEnum>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "returnUrl":
                            returnUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reusable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reusable = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "riskData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                riskData = new Option<RiskData>(JsonSerializer.Deserialize<RiskData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shopperEmail":
                            shopperEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperLocale":
                            shopperLocale = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperName":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shopperName = new Option<Name>(JsonSerializer.Deserialize<Name>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shopperReference":
                            shopperReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperStatement":
                            shopperStatement = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "showRemovePaymentMethodButton":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                showRemovePaymentMethodButton = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "socialSecurityNumber":
                            socialSecurityNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "splitCardFundingSources":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                splitCardFundingSources = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "splits":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                splits = new Option<List<Split>>(JsonSerializer.Deserialize<List<Split>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "store":
                            store = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "storePaymentMethodMode":
                            string storePaymentMethodModeRawValue = utf8JsonReader.GetString();
                            if (storePaymentMethodModeRawValue != null)
                                storePaymentMethodMode = new Option<PaymentLinkRequest.StorePaymentMethodModeEnum?>(PaymentLinkRequest.StorePaymentMethodModeEnumFromStringOrDefault(storePaymentMethodModeRawValue));
                            break;
                        case "telephoneNumber":
                            telephoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "themeId":
                            themeId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDS2RequestData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeDS2RequestData = new Option<CheckoutSessionThreeDS2RequestData>(JsonSerializer.Deserialize<CheckoutSessionThreeDS2RequestData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class PaymentLinkRequest.", nameof(amount));

            if (!merchantAccount.IsSet)
                throw new ArgumentException("Property is required for class PaymentLinkRequest.", nameof(merchantAccount));

            if (!reference.IsSet)
                throw new ArgumentException("Property is required for class PaymentLinkRequest.", nameof(reference));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class PaymentLinkRequest.");

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount), "Property is not nullable for class PaymentLinkRequest.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class PaymentLinkRequest.");

            if (allowedPaymentMethods.IsSet && allowedPaymentMethods.Value == null)
                throw new ArgumentNullException(nameof(allowedPaymentMethods), "Property is not nullable for class PaymentLinkRequest.");

            if (applicationInfo.IsSet && applicationInfo.Value == null)
                throw new ArgumentNullException(nameof(applicationInfo), "Property is not nullable for class PaymentLinkRequest.");

            if (billingAddress.IsSet && billingAddress.Value == null)
                throw new ArgumentNullException(nameof(billingAddress), "Property is not nullable for class PaymentLinkRequest.");

            if (blockedPaymentMethods.IsSet && blockedPaymentMethods.Value == null)
                throw new ArgumentNullException(nameof(blockedPaymentMethods), "Property is not nullable for class PaymentLinkRequest.");

            if (captureDelayHours.IsSet && captureDelayHours.Value == null)
                throw new ArgumentNullException(nameof(captureDelayHours), "Property is not nullable for class PaymentLinkRequest.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class PaymentLinkRequest.");

            if (dateOfBirth.IsSet && dateOfBirth.Value == null)
                throw new ArgumentNullException(nameof(dateOfBirth), "Property is not nullable for class PaymentLinkRequest.");

            if (deliverAt.IsSet && deliverAt.Value == null)
                throw new ArgumentNullException(nameof(deliverAt), "Property is not nullable for class PaymentLinkRequest.");

            if (deliveryAddress.IsSet && deliveryAddress.Value == null)
                throw new ArgumentNullException(nameof(deliveryAddress), "Property is not nullable for class PaymentLinkRequest.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class PaymentLinkRequest.");

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class PaymentLinkRequest.");

            if (fundOrigin.IsSet && fundOrigin.Value == null)
                throw new ArgumentNullException(nameof(fundOrigin), "Property is not nullable for class PaymentLinkRequest.");

            if (fundRecipient.IsSet && fundRecipient.Value == null)
                throw new ArgumentNullException(nameof(fundRecipient), "Property is not nullable for class PaymentLinkRequest.");

            if (installmentOptions.IsSet && installmentOptions.Value == null)
                throw new ArgumentNullException(nameof(installmentOptions), "Property is not nullable for class PaymentLinkRequest.");

            if (lineItems.IsSet && lineItems.Value == null)
                throw new ArgumentNullException(nameof(lineItems), "Property is not nullable for class PaymentLinkRequest.");

            if (manualCapture.IsSet && manualCapture.Value == null)
                throw new ArgumentNullException(nameof(manualCapture), "Property is not nullable for class PaymentLinkRequest.");

            if (mcc.IsSet && mcc.Value == null)
                throw new ArgumentNullException(nameof(mcc), "Property is not nullable for class PaymentLinkRequest.");

            if (merchantOrderReference.IsSet && merchantOrderReference.Value == null)
                throw new ArgumentNullException(nameof(merchantOrderReference), "Property is not nullable for class PaymentLinkRequest.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class PaymentLinkRequest.");

            if (platformChargebackLogic.IsSet && platformChargebackLogic.Value == null)
                throw new ArgumentNullException(nameof(platformChargebackLogic), "Property is not nullable for class PaymentLinkRequest.");

            if (recurringProcessingModel.IsSet && recurringProcessingModel.Value == null)
                throw new ArgumentNullException(nameof(recurringProcessingModel), "Property is not nullable for class PaymentLinkRequest.");

            if (requiredShopperFields.IsSet && requiredShopperFields.Value == null)
                throw new ArgumentNullException(nameof(requiredShopperFields), "Property is not nullable for class PaymentLinkRequest.");

            if (returnUrl.IsSet && returnUrl.Value == null)
                throw new ArgumentNullException(nameof(returnUrl), "Property is not nullable for class PaymentLinkRequest.");

            if (reusable.IsSet && reusable.Value == null)
                throw new ArgumentNullException(nameof(reusable), "Property is not nullable for class PaymentLinkRequest.");

            if (riskData.IsSet && riskData.Value == null)
                throw new ArgumentNullException(nameof(riskData), "Property is not nullable for class PaymentLinkRequest.");

            if (shopperEmail.IsSet && shopperEmail.Value == null)
                throw new ArgumentNullException(nameof(shopperEmail), "Property is not nullable for class PaymentLinkRequest.");

            if (shopperLocale.IsSet && shopperLocale.Value == null)
                throw new ArgumentNullException(nameof(shopperLocale), "Property is not nullable for class PaymentLinkRequest.");

            if (shopperName.IsSet && shopperName.Value == null)
                throw new ArgumentNullException(nameof(shopperName), "Property is not nullable for class PaymentLinkRequest.");

            if (shopperReference.IsSet && shopperReference.Value == null)
                throw new ArgumentNullException(nameof(shopperReference), "Property is not nullable for class PaymentLinkRequest.");

            if (shopperStatement.IsSet && shopperStatement.Value == null)
                throw new ArgumentNullException(nameof(shopperStatement), "Property is not nullable for class PaymentLinkRequest.");

            if (showRemovePaymentMethodButton.IsSet && showRemovePaymentMethodButton.Value == null)
                throw new ArgumentNullException(nameof(showRemovePaymentMethodButton), "Property is not nullable for class PaymentLinkRequest.");

            if (socialSecurityNumber.IsSet && socialSecurityNumber.Value == null)
                throw new ArgumentNullException(nameof(socialSecurityNumber), "Property is not nullable for class PaymentLinkRequest.");

            if (splitCardFundingSources.IsSet && splitCardFundingSources.Value == null)
                throw new ArgumentNullException(nameof(splitCardFundingSources), "Property is not nullable for class PaymentLinkRequest.");

            if (splits.IsSet && splits.Value == null)
                throw new ArgumentNullException(nameof(splits), "Property is not nullable for class PaymentLinkRequest.");

            if (store.IsSet && store.Value == null)
                throw new ArgumentNullException(nameof(store), "Property is not nullable for class PaymentLinkRequest.");

            if (storePaymentMethodMode.IsSet && storePaymentMethodMode.Value == null)
                throw new ArgumentNullException(nameof(storePaymentMethodMode), "Property is not nullable for class PaymentLinkRequest.");

            if (telephoneNumber.IsSet && telephoneNumber.Value == null)
                throw new ArgumentNullException(nameof(telephoneNumber), "Property is not nullable for class PaymentLinkRequest.");

            if (themeId.IsSet && themeId.Value == null)
                throw new ArgumentNullException(nameof(themeId), "Property is not nullable for class PaymentLinkRequest.");

            if (threeDS2RequestData.IsSet && threeDS2RequestData.Value == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData), "Property is not nullable for class PaymentLinkRequest.");

            return new PaymentLinkRequest(amount.Value, merchantAccount.Value, reference.Value, allowedPaymentMethods, applicationInfo, billingAddress, blockedPaymentMethods, captureDelayHours, countryCode, dateOfBirth, deliverAt, deliveryAddress, description, expiresAt, fundOrigin, fundRecipient, installmentOptions, lineItems, manualCapture, mcc, merchantOrderReference, metadata, platformChargebackLogic, recurringProcessingModel, requiredShopperFields, returnUrl, reusable, riskData, shopperEmail, shopperLocale, shopperName, shopperReference, shopperStatement, showRemovePaymentMethodButton, socialSecurityNumber, splitCardFundingSources, splits, store, storePaymentMethodMode, telephoneNumber, themeId, threeDS2RequestData);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentLinkRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentLinkRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentLinkRequest paymentLinkRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentLinkRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentLinkRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentLinkRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentLinkRequest paymentLinkRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentLinkRequest.Amount == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.Amount), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.MerchantAccount == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.MerchantAccount), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.Reference == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.Reference), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.AllowedPaymentMethodsOption.IsSet && paymentLinkRequest.AllowedPaymentMethods == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.AllowedPaymentMethods), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.ApplicationInfoOption.IsSet && paymentLinkRequest.ApplicationInfo == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.ApplicationInfo), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.BillingAddressOption.IsSet && paymentLinkRequest.BillingAddress == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.BillingAddress), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.BlockedPaymentMethodsOption.IsSet && paymentLinkRequest.BlockedPaymentMethods == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.BlockedPaymentMethods), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.CountryCodeOption.IsSet && paymentLinkRequest.CountryCode == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.CountryCode), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.DeliveryAddressOption.IsSet && paymentLinkRequest.DeliveryAddress == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.DeliveryAddress), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.DescriptionOption.IsSet && paymentLinkRequest.Description == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.Description), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.FundOriginOption.IsSet && paymentLinkRequest.FundOrigin == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.FundOrigin), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.FundRecipientOption.IsSet && paymentLinkRequest.FundRecipient == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.FundRecipient), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.InstallmentOptionsOption.IsSet && paymentLinkRequest.InstallmentOptions == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.InstallmentOptions), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.LineItemsOption.IsSet && paymentLinkRequest.LineItems == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.LineItems), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.MccOption.IsSet && paymentLinkRequest.Mcc == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.Mcc), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.MerchantOrderReferenceOption.IsSet && paymentLinkRequest.MerchantOrderReference == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.MerchantOrderReference), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.MetadataOption.IsSet && paymentLinkRequest.Metadata == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.Metadata), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.PlatformChargebackLogicOption.IsSet && paymentLinkRequest.PlatformChargebackLogic == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.PlatformChargebackLogic), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.RequiredShopperFieldsOption.IsSet && paymentLinkRequest.RequiredShopperFields == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.RequiredShopperFields), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.ReturnUrlOption.IsSet && paymentLinkRequest.ReturnUrl == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.ReturnUrl), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.RiskDataOption.IsSet && paymentLinkRequest.RiskData == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.RiskData), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.ShopperEmailOption.IsSet && paymentLinkRequest.ShopperEmail == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.ShopperEmail), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.ShopperLocaleOption.IsSet && paymentLinkRequest.ShopperLocale == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.ShopperLocale), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.ShopperNameOption.IsSet && paymentLinkRequest.ShopperName == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.ShopperName), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.ShopperReferenceOption.IsSet && paymentLinkRequest.ShopperReference == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.ShopperReference), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.ShopperStatementOption.IsSet && paymentLinkRequest.ShopperStatement == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.ShopperStatement), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.SocialSecurityNumberOption.IsSet && paymentLinkRequest.SocialSecurityNumber == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.SocialSecurityNumber), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.SplitsOption.IsSet && paymentLinkRequest.Splits == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.Splits), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.StoreOption.IsSet && paymentLinkRequest.Store == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.Store), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.TelephoneNumberOption.IsSet && paymentLinkRequest.TelephoneNumber == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.TelephoneNumber), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.ThemeIdOption.IsSet && paymentLinkRequest.ThemeId == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.ThemeId), "Property is required for class PaymentLinkRequest.");

            if (paymentLinkRequest.ThreeDS2RequestDataOption.IsSet && paymentLinkRequest.ThreeDS2RequestData == null)
                throw new ArgumentNullException(nameof(paymentLinkRequest.ThreeDS2RequestData), "Property is required for class PaymentLinkRequest.");

            writer.WritePropertyName("amount");
            JsonSerializer.Serialize(writer, paymentLinkRequest.Amount, jsonSerializerOptions);
            writer.WriteString("merchantAccount", paymentLinkRequest.MerchantAccount);

            writer.WriteString("reference", paymentLinkRequest.Reference);

            if (paymentLinkRequest.AllowedPaymentMethodsOption.IsSet)
            {
                writer.WritePropertyName("allowedPaymentMethods");
                JsonSerializer.Serialize(writer, paymentLinkRequest.AllowedPaymentMethods, jsonSerializerOptions);
            }
            if (paymentLinkRequest.ApplicationInfoOption.IsSet)
            {
                writer.WritePropertyName("applicationInfo");
                JsonSerializer.Serialize(writer, paymentLinkRequest.ApplicationInfo, jsonSerializerOptions);
            }
            if (paymentLinkRequest.BillingAddressOption.IsSet)
            {
                writer.WritePropertyName("billingAddress");
                JsonSerializer.Serialize(writer, paymentLinkRequest.BillingAddress, jsonSerializerOptions);
            }
            if (paymentLinkRequest.BlockedPaymentMethodsOption.IsSet)
            {
                writer.WritePropertyName("blockedPaymentMethods");
                JsonSerializer.Serialize(writer, paymentLinkRequest.BlockedPaymentMethods, jsonSerializerOptions);
            }
            if (paymentLinkRequest.CaptureDelayHoursOption.IsSet)
                writer.WriteNumber("captureDelayHours", paymentLinkRequest.CaptureDelayHoursOption.Value.Value);

            if (paymentLinkRequest.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", paymentLinkRequest.CountryCode);

            if (paymentLinkRequest.DateOfBirthOption.IsSet)
                writer.WriteString("dateOfBirth", paymentLinkRequest.DateOfBirthOption.Value.Value.ToString(DateOfBirthFormat));

            if (paymentLinkRequest.DeliverAtOption.IsSet)
                writer.WriteString("deliverAt", paymentLinkRequest.DeliverAtOption.Value.Value.ToString(DeliverAtFormat));

            if (paymentLinkRequest.DeliveryAddressOption.IsSet)
            {
                writer.WritePropertyName("deliveryAddress");
                JsonSerializer.Serialize(writer, paymentLinkRequest.DeliveryAddress, jsonSerializerOptions);
            }
            if (paymentLinkRequest.DescriptionOption.IsSet)
                writer.WriteString("description", paymentLinkRequest.Description);

            if (paymentLinkRequest.ExpiresAtOption.IsSet)
                writer.WriteString("expiresAt", paymentLinkRequest.ExpiresAtOption.Value.Value.ToString(ExpiresAtFormat));

            if (paymentLinkRequest.FundOriginOption.IsSet)
            {
                writer.WritePropertyName("fundOrigin");
                JsonSerializer.Serialize(writer, paymentLinkRequest.FundOrigin, jsonSerializerOptions);
            }
            if (paymentLinkRequest.FundRecipientOption.IsSet)
            {
                writer.WritePropertyName("fundRecipient");
                JsonSerializer.Serialize(writer, paymentLinkRequest.FundRecipient, jsonSerializerOptions);
            }
            if (paymentLinkRequest.InstallmentOptionsOption.IsSet)
            {
                writer.WritePropertyName("installmentOptions");
                JsonSerializer.Serialize(writer, paymentLinkRequest.InstallmentOptions, jsonSerializerOptions);
            }
            if (paymentLinkRequest.LineItemsOption.IsSet)
            {
                writer.WritePropertyName("lineItems");
                JsonSerializer.Serialize(writer, paymentLinkRequest.LineItems, jsonSerializerOptions);
            }
            if (paymentLinkRequest.ManualCaptureOption.IsSet)
                writer.WriteBoolean("manualCapture", paymentLinkRequest.ManualCaptureOption.Value.Value);

            if (paymentLinkRequest.MccOption.IsSet)
                writer.WriteString("mcc", paymentLinkRequest.Mcc);

            if (paymentLinkRequest.MerchantOrderReferenceOption.IsSet)
                writer.WriteString("merchantOrderReference", paymentLinkRequest.MerchantOrderReference);

            if (paymentLinkRequest.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, paymentLinkRequest.Metadata, jsonSerializerOptions);
            }
            if (paymentLinkRequest.PlatformChargebackLogicOption.IsSet)
            {
                writer.WritePropertyName("platformChargebackLogic");
                JsonSerializer.Serialize(writer, paymentLinkRequest.PlatformChargebackLogic, jsonSerializerOptions);
            }
            var recurringProcessingModelRawValue = PaymentLinkRequest.RecurringProcessingModelEnumToJsonValue(paymentLinkRequest.RecurringProcessingModelOption.Value.Value);
            writer.WriteString("recurringProcessingModel", recurringProcessingModelRawValue);
            if (paymentLinkRequest.RequiredShopperFieldsOption.IsSet)
            {
                writer.WritePropertyName("requiredShopperFields");
                JsonSerializer.Serialize(writer, paymentLinkRequest.RequiredShopperFields, jsonSerializerOptions);
            }
            if (paymentLinkRequest.ReturnUrlOption.IsSet)
                writer.WriteString("returnUrl", paymentLinkRequest.ReturnUrl);

            if (paymentLinkRequest.ReusableOption.IsSet)
                writer.WriteBoolean("reusable", paymentLinkRequest.ReusableOption.Value.Value);

            if (paymentLinkRequest.RiskDataOption.IsSet)
            {
                writer.WritePropertyName("riskData");
                JsonSerializer.Serialize(writer, paymentLinkRequest.RiskData, jsonSerializerOptions);
            }
            if (paymentLinkRequest.ShopperEmailOption.IsSet)
                writer.WriteString("shopperEmail", paymentLinkRequest.ShopperEmail);

            if (paymentLinkRequest.ShopperLocaleOption.IsSet)
                writer.WriteString("shopperLocale", paymentLinkRequest.ShopperLocale);

            if (paymentLinkRequest.ShopperNameOption.IsSet)
            {
                writer.WritePropertyName("shopperName");
                JsonSerializer.Serialize(writer, paymentLinkRequest.ShopperName, jsonSerializerOptions);
            }
            if (paymentLinkRequest.ShopperReferenceOption.IsSet)
                writer.WriteString("shopperReference", paymentLinkRequest.ShopperReference);

            if (paymentLinkRequest.ShopperStatementOption.IsSet)
                writer.WriteString("shopperStatement", paymentLinkRequest.ShopperStatement);

            if (paymentLinkRequest.ShowRemovePaymentMethodButtonOption.IsSet)
                writer.WriteBoolean("showRemovePaymentMethodButton", paymentLinkRequest.ShowRemovePaymentMethodButtonOption.Value.Value);

            if (paymentLinkRequest.SocialSecurityNumberOption.IsSet)
                writer.WriteString("socialSecurityNumber", paymentLinkRequest.SocialSecurityNumber);

            if (paymentLinkRequest.SplitCardFundingSourcesOption.IsSet)
                writer.WriteBoolean("splitCardFundingSources", paymentLinkRequest.SplitCardFundingSourcesOption.Value.Value);

            if (paymentLinkRequest.SplitsOption.IsSet)
            {
                writer.WritePropertyName("splits");
                JsonSerializer.Serialize(writer, paymentLinkRequest.Splits, jsonSerializerOptions);
            }
            if (paymentLinkRequest.StoreOption.IsSet)
                writer.WriteString("store", paymentLinkRequest.Store);

            var storePaymentMethodModeRawValue = PaymentLinkRequest.StorePaymentMethodModeEnumToJsonValue(paymentLinkRequest.StorePaymentMethodModeOption.Value.Value);
            writer.WriteString("storePaymentMethodMode", storePaymentMethodModeRawValue);
            if (paymentLinkRequest.TelephoneNumberOption.IsSet)
                writer.WriteString("telephoneNumber", paymentLinkRequest.TelephoneNumber);

            if (paymentLinkRequest.ThemeIdOption.IsSet)
                writer.WriteString("themeId", paymentLinkRequest.ThemeId);

            if (paymentLinkRequest.ThreeDS2RequestDataOption.IsSet)
            {
                writer.WritePropertyName("threeDS2RequestData");
                JsonSerializer.Serialize(writer, paymentLinkRequest.ThreeDS2RequestData, jsonSerializerOptions);
            }
        }
    }
}
