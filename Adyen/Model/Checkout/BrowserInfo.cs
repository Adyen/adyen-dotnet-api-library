// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// BrowserInfo
    /// </summary>
    public partial class BrowserInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowserInfo" /> class.
        /// </summary>
        /// <param name="acceptHeader">The accept header value of the shopper&#39;s browser.</param>
        /// <param name="colorDepth">The color depth of the shopper&#39;s browser in bits per pixel. This should be obtained by using the browser&#39;s &#x60;screen.colorDepth&#x60; property. Accepted values: 1, 4, 8, 15, 16, 24, 30, 32 or 48 bit color depth.</param>
        /// <param name="javaEnabled">Boolean value indicating if the shopper&#39;s browser is able to execute Java.</param>
        /// <param name="language">The &#x60;navigator.language&#x60; value of the shopper&#39;s browser (as defined in IETF BCP 47).</param>
        /// <param name="screenHeight">The total height of the shopper&#39;s device screen in pixels.</param>
        /// <param name="screenWidth">The total width of the shopper&#39;s device screen in pixels.</param>
        /// <param name="timeZoneOffset">Time difference between UTC time and the shopper&#39;s browser local time, in minutes.</param>
        /// <param name="userAgent">The user agent value of the shopper&#39;s browser.</param>
        /// <param name="javaScriptEnabled">Boolean value indicating if the shopper&#39;s browser is able to execute JavaScript. A default &#39;true&#39; value is assumed if the field is not present. (default to true)</param>
        [JsonConstructor]
        public BrowserInfo(string acceptHeader, int colorDepth, bool javaEnabled, string language, int screenHeight, int screenWidth, int timeZoneOffset, string userAgent, Option<bool?> javaScriptEnabled = default)
        {
            AcceptHeader = acceptHeader;
            ColorDepth = colorDepth;
            JavaEnabled = javaEnabled;
            Language = language;
            ScreenHeight = screenHeight;
            ScreenWidth = screenWidth;
            TimeZoneOffset = timeZoneOffset;
            UserAgent = userAgent;
            JavaScriptEnabledOption = javaScriptEnabled;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The accept header value of the shopper&#39;s browser.
        /// </summary>
        /// <value>The accept header value of the shopper&#39;s browser.</value>
        [JsonPropertyName("acceptHeader")]
        public string AcceptHeader { get; set; }

        /// <summary>
        /// The color depth of the shopper&#39;s browser in bits per pixel. This should be obtained by using the browser&#39;s &#x60;screen.colorDepth&#x60; property. Accepted values: 1, 4, 8, 15, 16, 24, 30, 32 or 48 bit color depth.
        /// </summary>
        /// <value>The color depth of the shopper&#39;s browser in bits per pixel. This should be obtained by using the browser&#39;s &#x60;screen.colorDepth&#x60; property. Accepted values: 1, 4, 8, 15, 16, 24, 30, 32 or 48 bit color depth.</value>
        [JsonPropertyName("colorDepth")]
        public int ColorDepth { get; set; }

        /// <summary>
        /// Boolean value indicating if the shopper&#39;s browser is able to execute Java.
        /// </summary>
        /// <value>Boolean value indicating if the shopper&#39;s browser is able to execute Java.</value>
        [JsonPropertyName("javaEnabled")]
        public bool JavaEnabled { get; set; }

        /// <summary>
        /// The &#x60;navigator.language&#x60; value of the shopper&#39;s browser (as defined in IETF BCP 47).
        /// </summary>
        /// <value>The &#x60;navigator.language&#x60; value of the shopper&#39;s browser (as defined in IETF BCP 47).</value>
        [JsonPropertyName("language")]
        public string Language { get; set; }

        /// <summary>
        /// The total height of the shopper&#39;s device screen in pixels.
        /// </summary>
        /// <value>The total height of the shopper&#39;s device screen in pixels.</value>
        [JsonPropertyName("screenHeight")]
        public int ScreenHeight { get; set; }

        /// <summary>
        /// The total width of the shopper&#39;s device screen in pixels.
        /// </summary>
        /// <value>The total width of the shopper&#39;s device screen in pixels.</value>
        [JsonPropertyName("screenWidth")]
        public int ScreenWidth { get; set; }

        /// <summary>
        /// Time difference between UTC time and the shopper&#39;s browser local time, in minutes.
        /// </summary>
        /// <value>Time difference between UTC time and the shopper&#39;s browser local time, in minutes.</value>
        [JsonPropertyName("timeZoneOffset")]
        public int TimeZoneOffset { get; set; }

        /// <summary>
        /// The user agent value of the shopper&#39;s browser.
        /// </summary>
        /// <value>The user agent value of the shopper&#39;s browser.</value>
        [JsonPropertyName("userAgent")]
        public string UserAgent { get; set; }

        /// <summary>
        /// Used to track the state of JavaScriptEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> JavaScriptEnabledOption { get; private set; }

        /// <summary>
        /// Boolean value indicating if the shopper&#39;s browser is able to execute JavaScript. A default &#39;true&#39; value is assumed if the field is not present.
        /// </summary>
        /// <value>Boolean value indicating if the shopper&#39;s browser is able to execute JavaScript. A default &#39;true&#39; value is assumed if the field is not present.</value>
        [JsonPropertyName("javaScriptEnabled")]
        public bool? JavaScriptEnabled { get { return this.JavaScriptEnabledOption; } set { this.JavaScriptEnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrowserInfo {\n");
            sb.Append("  AcceptHeader: ").Append(AcceptHeader).Append("\n");
            sb.Append("  ColorDepth: ").Append(ColorDepth).Append("\n");
            sb.Append("  JavaEnabled: ").Append(JavaEnabled).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ScreenHeight: ").Append(ScreenHeight).Append("\n");
            sb.Append("  ScreenWidth: ").Append(ScreenWidth).Append("\n");
            sb.Append("  TimeZoneOffset: ").Append(TimeZoneOffset).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  JavaScriptEnabled: ").Append(JavaScriptEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BrowserInfo" />
    /// </summary>
    public class BrowserInfoJsonConverter : JsonConverter<BrowserInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="BrowserInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BrowserInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> acceptHeader = default;
            Option<int?> colorDepth = default;
            Option<bool?> javaEnabled = default;
            Option<string> language = default;
            Option<int?> screenHeight = default;
            Option<int?> screenWidth = default;
            Option<int?> timeZoneOffset = default;
            Option<string> userAgent = default;
            Option<bool?> javaScriptEnabled = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "acceptHeader":
                            acceptHeader = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "colorDepth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                colorDepth = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "javaEnabled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                javaEnabled = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "language":
                            language = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "screenHeight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                screenHeight = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "screenWidth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                screenWidth = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "timeZoneOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                timeZoneOffset = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "userAgent":
                            userAgent = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "javaScriptEnabled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                javaScriptEnabled = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!acceptHeader.IsSet)
                throw new ArgumentException("Property is required for class BrowserInfo.", nameof(acceptHeader));

            if (!colorDepth.IsSet)
                throw new ArgumentException("Property is required for class BrowserInfo.", nameof(colorDepth));

            if (!javaEnabled.IsSet)
                throw new ArgumentException("Property is required for class BrowserInfo.", nameof(javaEnabled));

            if (!language.IsSet)
                throw new ArgumentException("Property is required for class BrowserInfo.", nameof(language));

            if (!screenHeight.IsSet)
                throw new ArgumentException("Property is required for class BrowserInfo.", nameof(screenHeight));

            if (!screenWidth.IsSet)
                throw new ArgumentException("Property is required for class BrowserInfo.", nameof(screenWidth));

            if (!timeZoneOffset.IsSet)
                throw new ArgumentException("Property is required for class BrowserInfo.", nameof(timeZoneOffset));

            if (!userAgent.IsSet)
                throw new ArgumentException("Property is required for class BrowserInfo.", nameof(userAgent));

            if (acceptHeader.IsSet && acceptHeader.Value == null)
                throw new ArgumentNullException(nameof(acceptHeader), "Property is not nullable for class BrowserInfo.");

            if (colorDepth.IsSet && colorDepth.Value == null)
                throw new ArgumentNullException(nameof(colorDepth), "Property is not nullable for class BrowserInfo.");

            if (javaEnabled.IsSet && javaEnabled.Value == null)
                throw new ArgumentNullException(nameof(javaEnabled), "Property is not nullable for class BrowserInfo.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class BrowserInfo.");

            if (screenHeight.IsSet && screenHeight.Value == null)
                throw new ArgumentNullException(nameof(screenHeight), "Property is not nullable for class BrowserInfo.");

            if (screenWidth.IsSet && screenWidth.Value == null)
                throw new ArgumentNullException(nameof(screenWidth), "Property is not nullable for class BrowserInfo.");

            if (timeZoneOffset.IsSet && timeZoneOffset.Value == null)
                throw new ArgumentNullException(nameof(timeZoneOffset), "Property is not nullable for class BrowserInfo.");

            if (userAgent.IsSet && userAgent.Value == null)
                throw new ArgumentNullException(nameof(userAgent), "Property is not nullable for class BrowserInfo.");

            if (javaScriptEnabled.IsSet && javaScriptEnabled.Value == null)
                throw new ArgumentNullException(nameof(javaScriptEnabled), "Property is not nullable for class BrowserInfo.");

            return new BrowserInfo(acceptHeader.Value, colorDepth.Value.Value, javaEnabled.Value.Value, language.Value, screenHeight.Value.Value, screenWidth.Value.Value, timeZoneOffset.Value.Value, userAgent.Value, javaScriptEnabled);
        }

        /// <summary>
        /// Serializes a <see cref="BrowserInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="browserInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BrowserInfo browserInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, browserInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BrowserInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="browserInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BrowserInfo browserInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (browserInfo.AcceptHeader == null)
                throw new ArgumentNullException(nameof(browserInfo.AcceptHeader), "Property is required for class BrowserInfo.");

            if (browserInfo.Language == null)
                throw new ArgumentNullException(nameof(browserInfo.Language), "Property is required for class BrowserInfo.");

            if (browserInfo.UserAgent == null)
                throw new ArgumentNullException(nameof(browserInfo.UserAgent), "Property is required for class BrowserInfo.");

            writer.WriteString("acceptHeader", browserInfo.AcceptHeader);

            writer.WriteNumber("colorDepth", browserInfo.ColorDepth);

            writer.WriteBoolean("javaEnabled", browserInfo.JavaEnabled);

            writer.WriteString("language", browserInfo.Language);

            writer.WriteNumber("screenHeight", browserInfo.ScreenHeight);

            writer.WriteNumber("screenWidth", browserInfo.ScreenWidth);

            writer.WriteNumber("timeZoneOffset", browserInfo.TimeZoneOffset);

            writer.WriteString("userAgent", browserInfo.UserAgent);

            if (browserInfo.JavaScriptEnabledOption.IsSet)
                writer.WriteBoolean("javaScriptEnabled", browserInfo.JavaScriptEnabledOption.Value.Value);
        }
    }
}
