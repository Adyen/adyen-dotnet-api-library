// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// DonationCampaign
    /// </summary>
    public partial class DonationCampaign : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DonationCampaign" /> class.
        /// </summary>
        /// <param name="amounts">amounts</param>
        /// <param name="bannerUrl">The URL for the banner of the nonprofit or campaign.</param>
        /// <param name="campaignName">The name of the donation campaign..</param>
        /// <param name="causeName">The cause of the nonprofit.</param>
        /// <param name="donation">donation</param>
        /// <param name="id">The unique campaign ID of the donation campaign.</param>
        /// <param name="logoUrl">The URL for the logo of the nonprofit.</param>
        /// <param name="nonprofitDescription">The description of the nonprofit.</param>
        /// <param name="nonprofitName">The name of the nonprofit organization that receives the donation.</param>
        /// <param name="nonprofitUrl">The website URL of the nonprofit.</param>
        /// <param name="termsAndConditionsUrl">The URL of the terms and conditions page of the nonprofit and the campaign.</param>
        [JsonConstructor]
        public DonationCampaign(Option<Amounts> amounts = default, Option<string> bannerUrl = default, Option<string> campaignName = default, Option<string> causeName = default, Option<Donation> donation = default, Option<string> id = default, Option<string> logoUrl = default, Option<string> nonprofitDescription = default, Option<string> nonprofitName = default, Option<string> nonprofitUrl = default, Option<string> termsAndConditionsUrl = default)
        {
            AmountsOption = amounts;
            BannerUrlOption = bannerUrl;
            CampaignNameOption = campaignName;
            CauseNameOption = causeName;
            DonationOption = donation;
            IdOption = id;
            LogoUrlOption = logoUrl;
            NonprofitDescriptionOption = nonprofitDescription;
            NonprofitNameOption = nonprofitName;
            NonprofitUrlOption = nonprofitUrl;
            TermsAndConditionsUrlOption = termsAndConditionsUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Amounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amounts> AmountsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Amounts
        /// </summary>
        [JsonPropertyName("amounts")]
        public Amounts Amounts { get { return this.AmountsOption; } set { this.AmountsOption = new Option<Amounts>(value); } }

        /// <summary>
        /// Used to track the state of BannerUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BannerUrlOption { get; private set; }

        /// <summary>
        /// The URL for the banner of the nonprofit or campaign.
        /// </summary>
        /// <value>The URL for the banner of the nonprofit or campaign.</value>
        [JsonPropertyName("bannerUrl")]
        public string BannerUrl { get { return this.BannerUrlOption; } set { this.BannerUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CampaignName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CampaignNameOption { get; private set; }

        /// <summary>
        /// The name of the donation campaign..
        /// </summary>
        /// <value>The name of the donation campaign..</value>
        [JsonPropertyName("campaignName")]
        public string CampaignName { get { return this.CampaignNameOption; } set { this.CampaignNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CauseName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CauseNameOption { get; private set; }

        /// <summary>
        /// The cause of the nonprofit.
        /// </summary>
        /// <value>The cause of the nonprofit.</value>
        [JsonPropertyName("causeName")]
        public string CauseName { get { return this.CauseNameOption; } set { this.CauseNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Donation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Donation> DonationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Donation
        /// </summary>
        [JsonPropertyName("donation")]
        public Donation Donation { get { return this.DonationOption; } set { this.DonationOption = new Option<Donation>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// The unique campaign ID of the donation campaign.
        /// </summary>
        /// <value>The unique campaign ID of the donation campaign.</value>
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LogoUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LogoUrlOption { get; private set; }

        /// <summary>
        /// The URL for the logo of the nonprofit.
        /// </summary>
        /// <value>The URL for the logo of the nonprofit.</value>
        [JsonPropertyName("logoUrl")]
        public string LogoUrl { get { return this.LogoUrlOption; } set { this.LogoUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NonprofitDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NonprofitDescriptionOption { get; private set; }

        /// <summary>
        /// The description of the nonprofit.
        /// </summary>
        /// <value>The description of the nonprofit.</value>
        [JsonPropertyName("nonprofitDescription")]
        public string NonprofitDescription { get { return this.NonprofitDescriptionOption; } set { this.NonprofitDescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NonprofitName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NonprofitNameOption { get; private set; }

        /// <summary>
        /// The name of the nonprofit organization that receives the donation.
        /// </summary>
        /// <value>The name of the nonprofit organization that receives the donation.</value>
        [JsonPropertyName("nonprofitName")]
        public string NonprofitName { get { return this.NonprofitNameOption; } set { this.NonprofitNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NonprofitUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NonprofitUrlOption { get; private set; }

        /// <summary>
        /// The website URL of the nonprofit.
        /// </summary>
        /// <value>The website URL of the nonprofit.</value>
        [JsonPropertyName("nonprofitUrl")]
        public string NonprofitUrl { get { return this.NonprofitUrlOption; } set { this.NonprofitUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TermsAndConditionsUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TermsAndConditionsUrlOption { get; private set; }

        /// <summary>
        /// The URL of the terms and conditions page of the nonprofit and the campaign.
        /// </summary>
        /// <value>The URL of the terms and conditions page of the nonprofit and the campaign.</value>
        [JsonPropertyName("termsAndConditionsUrl")]
        public string TermsAndConditionsUrl { get { return this.TermsAndConditionsUrlOption; } set { this.TermsAndConditionsUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DonationCampaign {\n");
            sb.Append("  Amounts: ").Append(Amounts).Append("\n");
            sb.Append("  BannerUrl: ").Append(BannerUrl).Append("\n");
            sb.Append("  CampaignName: ").Append(CampaignName).Append("\n");
            sb.Append("  CauseName: ").Append(CauseName).Append("\n");
            sb.Append("  Donation: ").Append(Donation).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  NonprofitDescription: ").Append(NonprofitDescription).Append("\n");
            sb.Append("  NonprofitName: ").Append(NonprofitName).Append("\n");
            sb.Append("  NonprofitUrl: ").Append(NonprofitUrl).Append("\n");
            sb.Append("  TermsAndConditionsUrl: ").Append(TermsAndConditionsUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DonationCampaign" />
    /// </summary>
    public class DonationCampaignJsonConverter : JsonConverter<DonationCampaign>
    {
        /// <summary>
        /// Deserializes json to <see cref="DonationCampaign" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DonationCampaign Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Amounts> amounts = default;
            Option<string> bannerUrl = default;
            Option<string> campaignName = default;
            Option<string> causeName = default;
            Option<Donation> donation = default;
            Option<string> id = default;
            Option<string> logoUrl = default;
            Option<string> nonprofitDescription = default;
            Option<string> nonprofitName = default;
            Option<string> nonprofitUrl = default;
            Option<string> termsAndConditionsUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amounts":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amounts = new Option<Amounts>(JsonSerializer.Deserialize<Amounts>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bannerUrl":
                            bannerUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "campaignName":
                            campaignName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "causeName":
                            causeName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "donation":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                donation = new Option<Donation>(JsonSerializer.Deserialize<Donation>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "logoUrl":
                            logoUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "nonprofitDescription":
                            nonprofitDescription = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "nonprofitName":
                            nonprofitName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "nonprofitUrl":
                            nonprofitUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "termsAndConditionsUrl":
                            termsAndConditionsUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (amounts.IsSet && amounts.Value == null)
                throw new ArgumentNullException(nameof(amounts), "Property is not nullable for class DonationCampaign.");

            if (bannerUrl.IsSet && bannerUrl.Value == null)
                throw new ArgumentNullException(nameof(bannerUrl), "Property is not nullable for class DonationCampaign.");

            if (campaignName.IsSet && campaignName.Value == null)
                throw new ArgumentNullException(nameof(campaignName), "Property is not nullable for class DonationCampaign.");

            if (causeName.IsSet && causeName.Value == null)
                throw new ArgumentNullException(nameof(causeName), "Property is not nullable for class DonationCampaign.");

            if (donation.IsSet && donation.Value == null)
                throw new ArgumentNullException(nameof(donation), "Property is not nullable for class DonationCampaign.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DonationCampaign.");

            if (logoUrl.IsSet && logoUrl.Value == null)
                throw new ArgumentNullException(nameof(logoUrl), "Property is not nullable for class DonationCampaign.");

            if (nonprofitDescription.IsSet && nonprofitDescription.Value == null)
                throw new ArgumentNullException(nameof(nonprofitDescription), "Property is not nullable for class DonationCampaign.");

            if (nonprofitName.IsSet && nonprofitName.Value == null)
                throw new ArgumentNullException(nameof(nonprofitName), "Property is not nullable for class DonationCampaign.");

            if (nonprofitUrl.IsSet && nonprofitUrl.Value == null)
                throw new ArgumentNullException(nameof(nonprofitUrl), "Property is not nullable for class DonationCampaign.");

            if (termsAndConditionsUrl.IsSet && termsAndConditionsUrl.Value == null)
                throw new ArgumentNullException(nameof(termsAndConditionsUrl), "Property is not nullable for class DonationCampaign.");

            return new DonationCampaign(amounts, bannerUrl, campaignName, causeName, donation, id, logoUrl, nonprofitDescription, nonprofitName, nonprofitUrl, termsAndConditionsUrl);
        }

        /// <summary>
        /// Serializes a <see cref="DonationCampaign" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="donationCampaign"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DonationCampaign donationCampaign, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, donationCampaign, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DonationCampaign" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="donationCampaign"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DonationCampaign donationCampaign, JsonSerializerOptions jsonSerializerOptions)
        {
            if (donationCampaign.AmountsOption.IsSet && donationCampaign.Amounts == null)
                throw new ArgumentNullException(nameof(donationCampaign.Amounts), "Property is required for class DonationCampaign.");

            if (donationCampaign.BannerUrlOption.IsSet && donationCampaign.BannerUrl == null)
                throw new ArgumentNullException(nameof(donationCampaign.BannerUrl), "Property is required for class DonationCampaign.");

            if (donationCampaign.CampaignNameOption.IsSet && donationCampaign.CampaignName == null)
                throw new ArgumentNullException(nameof(donationCampaign.CampaignName), "Property is required for class DonationCampaign.");

            if (donationCampaign.CauseNameOption.IsSet && donationCampaign.CauseName == null)
                throw new ArgumentNullException(nameof(donationCampaign.CauseName), "Property is required for class DonationCampaign.");

            if (donationCampaign.DonationOption.IsSet && donationCampaign.Donation == null)
                throw new ArgumentNullException(nameof(donationCampaign.Donation), "Property is required for class DonationCampaign.");

            if (donationCampaign.IdOption.IsSet && donationCampaign.Id == null)
                throw new ArgumentNullException(nameof(donationCampaign.Id), "Property is required for class DonationCampaign.");

            if (donationCampaign.LogoUrlOption.IsSet && donationCampaign.LogoUrl == null)
                throw new ArgumentNullException(nameof(donationCampaign.LogoUrl), "Property is required for class DonationCampaign.");

            if (donationCampaign.NonprofitDescriptionOption.IsSet && donationCampaign.NonprofitDescription == null)
                throw new ArgumentNullException(nameof(donationCampaign.NonprofitDescription), "Property is required for class DonationCampaign.");

            if (donationCampaign.NonprofitNameOption.IsSet && donationCampaign.NonprofitName == null)
                throw new ArgumentNullException(nameof(donationCampaign.NonprofitName), "Property is required for class DonationCampaign.");

            if (donationCampaign.NonprofitUrlOption.IsSet && donationCampaign.NonprofitUrl == null)
                throw new ArgumentNullException(nameof(donationCampaign.NonprofitUrl), "Property is required for class DonationCampaign.");

            if (donationCampaign.TermsAndConditionsUrlOption.IsSet && donationCampaign.TermsAndConditionsUrl == null)
                throw new ArgumentNullException(nameof(donationCampaign.TermsAndConditionsUrl), "Property is required for class DonationCampaign.");

            if (donationCampaign.AmountsOption.IsSet)
            {
                writer.WritePropertyName("amounts");
                JsonSerializer.Serialize(writer, donationCampaign.Amounts, jsonSerializerOptions);
            }
            if (donationCampaign.BannerUrlOption.IsSet)
                writer.WriteString("bannerUrl", donationCampaign.BannerUrl);

            if (donationCampaign.CampaignNameOption.IsSet)
                writer.WriteString("campaignName", donationCampaign.CampaignName);

            if (donationCampaign.CauseNameOption.IsSet)
                writer.WriteString("causeName", donationCampaign.CauseName);

            if (donationCampaign.DonationOption.IsSet)
            {
                writer.WritePropertyName("donation");
                JsonSerializer.Serialize(writer, donationCampaign.Donation, jsonSerializerOptions);
            }
            if (donationCampaign.IdOption.IsSet)
                writer.WriteString("id", donationCampaign.Id);

            if (donationCampaign.LogoUrlOption.IsSet)
                writer.WriteString("logoUrl", donationCampaign.LogoUrl);

            if (donationCampaign.NonprofitDescriptionOption.IsSet)
                writer.WriteString("nonprofitDescription", donationCampaign.NonprofitDescription);

            if (donationCampaign.NonprofitNameOption.IsSet)
                writer.WriteString("nonprofitName", donationCampaign.NonprofitName);

            if (donationCampaign.NonprofitUrlOption.IsSet)
                writer.WriteString("nonprofitUrl", donationCampaign.NonprofitUrl);

            if (donationCampaign.TermsAndConditionsUrlOption.IsSet)
                writer.WriteString("termsAndConditionsUrl", donationCampaign.TermsAndConditionsUrl);
        }
    }
}
