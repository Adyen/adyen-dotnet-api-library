// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Mandate
    /// </summary>
    public partial class Mandate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Mandate" /> class.
        /// </summary>
        /// <param name="amount">The billing amount (in minor units) of the recurring transactions.</param>
        /// <param name="endsAt">End date of the billing plan, in YYYY-MM-DD format.</param>
        /// <param name="frequency">The frequency with which a shopper should be charged.  Possible values: **adhoc**, **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.</param>
        /// <param name="amountRule">The limitation rule of the billing amount.  Possible values:  * **max**: The transaction amount can not exceed the &#x60;amount&#x60;.   * **exact**: The transaction amount should be the same as the &#x60;amount&#x60;.  </param>
        /// <param name="billingAttemptsRule">The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.  Possible values:   * **on**: On a specific date.   * **before**:  Before and on a specific date.   * **after**: On and after a specific date.  </param>
        /// <param name="billingDay">The number of the day, on which the recurring debit can happen. Should be within the same calendar month as the mandate recurring date.  Possible values: 1-31 based on the &#x60;frequency&#x60;.</param>
        /// <param name="count">The number of transactions that can be performed within the given frequency.</param>
        /// <param name="remarks">The message shown by UPI to the shopper on the approval screen.</param>
        /// <param name="startsAt">Start date of the billing plan, in YYYY-MM-DD format. By default, the transaction date.</param>
        [JsonConstructor]
        public Mandate(string amount, string endsAt, FrequencyEnum frequency, Option<AmountRuleEnum?> amountRule = default, Option<BillingAttemptsRuleEnum?> billingAttemptsRule = default, Option<string> billingDay = default, Option<string> count = default, Option<string> remarks = default, Option<string> startsAt = default)
        {
            Amount = amount;
            EndsAt = endsAt;
            Frequency = frequency;
            AmountRuleOption = amountRule;
            BillingAttemptsRuleOption = billingAttemptsRule;
            BillingDayOption = billingDay;
            CountOption = count;
            RemarksOption = remarks;
            StartsAtOption = startsAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The frequency with which a shopper should be charged.  Possible values: **adhoc**, **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.
        /// </summary>
        /// <value>The frequency with which a shopper should be charged.  Possible values: **adhoc**, **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.</value>
        public enum FrequencyEnum
        {
            /// <summary>
            /// Enum Adhoc for value: adhoc
            /// </summary>
            Adhoc = 1,

            /// <summary>
            /// Enum Daily for value: daily
            /// </summary>
            Daily = 2,

            /// <summary>
            /// Enum Weekly for value: weekly
            /// </summary>
            Weekly = 3,

            /// <summary>
            /// Enum BiWeekly for value: biWeekly
            /// </summary>
            BiWeekly = 4,

            /// <summary>
            /// Enum Monthly for value: monthly
            /// </summary>
            Monthly = 5,

            /// <summary>
            /// Enum Quarterly for value: quarterly
            /// </summary>
            Quarterly = 6,

            /// <summary>
            /// Enum HalfYearly for value: halfYearly
            /// </summary>
            HalfYearly = 7,

            /// <summary>
            /// Enum Yearly for value: yearly
            /// </summary>
            Yearly = 8
        }

        /// <summary>
        /// Returns a <see cref="FrequencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FrequencyEnum FrequencyEnumFromString(string value)
        {
            if (value.Equals("adhoc"))
                return FrequencyEnum.Adhoc;

            if (value.Equals("daily"))
                return FrequencyEnum.Daily;

            if (value.Equals("weekly"))
                return FrequencyEnum.Weekly;

            if (value.Equals("biWeekly"))
                return FrequencyEnum.BiWeekly;

            if (value.Equals("monthly"))
                return FrequencyEnum.Monthly;

            if (value.Equals("quarterly"))
                return FrequencyEnum.Quarterly;

            if (value.Equals("halfYearly"))
                return FrequencyEnum.HalfYearly;

            if (value.Equals("yearly"))
                return FrequencyEnum.Yearly;

            throw new NotImplementedException($"Could not convert value to type FrequencyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FrequencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FrequencyEnum? FrequencyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("adhoc"))
                return FrequencyEnum.Adhoc;

            if (value.Equals("daily"))
                return FrequencyEnum.Daily;

            if (value.Equals("weekly"))
                return FrequencyEnum.Weekly;

            if (value.Equals("biWeekly"))
                return FrequencyEnum.BiWeekly;

            if (value.Equals("monthly"))
                return FrequencyEnum.Monthly;

            if (value.Equals("quarterly"))
                return FrequencyEnum.Quarterly;

            if (value.Equals("halfYearly"))
                return FrequencyEnum.HalfYearly;

            if (value.Equals("yearly"))
                return FrequencyEnum.Yearly;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FrequencyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FrequencyEnumToJsonValue(FrequencyEnum value)
        {
            if (value == FrequencyEnum.Adhoc)
                return "adhoc";

            if (value == FrequencyEnum.Daily)
                return "daily";

            if (value == FrequencyEnum.Weekly)
                return "weekly";

            if (value == FrequencyEnum.BiWeekly)
                return "biWeekly";

            if (value == FrequencyEnum.Monthly)
                return "monthly";

            if (value == FrequencyEnum.Quarterly)
                return "quarterly";

            if (value == FrequencyEnum.HalfYearly)
                return "halfYearly";

            if (value == FrequencyEnum.Yearly)
                return "yearly";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The frequency with which a shopper should be charged.  Possible values: **adhoc**, **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.
        /// </summary>
        /// <value>The frequency with which a shopper should be charged.  Possible values: **adhoc**, **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.</value>
        [JsonPropertyName("frequency")]
        public FrequencyEnum Frequency { get; set; }

        /// <summary>
        /// The limitation rule of the billing amount.  Possible values:  * **max**: The transaction amount can not exceed the &#x60;amount&#x60;.   * **exact**: The transaction amount should be the same as the &#x60;amount&#x60;.  
        /// </summary>
        /// <value>The limitation rule of the billing amount.  Possible values:  * **max**: The transaction amount can not exceed the &#x60;amount&#x60;.   * **exact**: The transaction amount should be the same as the &#x60;amount&#x60;.  </value>
        public enum AmountRuleEnum
        {
            /// <summary>
            /// Enum Max for value: max
            /// </summary>
            Max = 1,

            /// <summary>
            /// Enum Exact for value: exact
            /// </summary>
            Exact = 2
        }

        /// <summary>
        /// Returns a <see cref="AmountRuleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AmountRuleEnum AmountRuleEnumFromString(string value)
        {
            if (value.Equals("max"))
                return AmountRuleEnum.Max;

            if (value.Equals("exact"))
                return AmountRuleEnum.Exact;

            throw new NotImplementedException($"Could not convert value to type AmountRuleEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AmountRuleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AmountRuleEnum? AmountRuleEnumFromStringOrDefault(string value)
        {
            if (value.Equals("max"))
                return AmountRuleEnum.Max;

            if (value.Equals("exact"))
                return AmountRuleEnum.Exact;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AmountRuleEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AmountRuleEnumToJsonValue(AmountRuleEnum? value)
        {
            if (value == AmountRuleEnum.Max)
                return "max";

            if (value == AmountRuleEnum.Exact)
                return "exact";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AmountRule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AmountRuleEnum?> AmountRuleOption { get; private set; }

        /// <summary>
        /// The limitation rule of the billing amount.  Possible values:  * **max**: The transaction amount can not exceed the &#x60;amount&#x60;.   * **exact**: The transaction amount should be the same as the &#x60;amount&#x60;.  
        /// </summary>
        /// <value>The limitation rule of the billing amount.  Possible values:  * **max**: The transaction amount can not exceed the &#x60;amount&#x60;.   * **exact**: The transaction amount should be the same as the &#x60;amount&#x60;.  </value>
        [JsonPropertyName("amountRule")]
        public AmountRuleEnum? AmountRule { get { return this.AmountRuleOption; } set { this.AmountRuleOption = new Option<AmountRuleEnum?>(value); } }

        /// <summary>
        /// The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.  Possible values:   * **on**: On a specific date.   * **before**:  Before and on a specific date.   * **after**: On and after a specific date.  
        /// </summary>
        /// <value>The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.  Possible values:   * **on**: On a specific date.   * **before**:  Before and on a specific date.   * **after**: On and after a specific date.  </value>
        public enum BillingAttemptsRuleEnum
        {
            /// <summary>
            /// Enum On for value: on
            /// </summary>
            On = 1,

            /// <summary>
            /// Enum Before for value: before
            /// </summary>
            Before = 2,

            /// <summary>
            /// Enum After for value: after
            /// </summary>
            After = 3
        }

        /// <summary>
        /// Returns a <see cref="BillingAttemptsRuleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static BillingAttemptsRuleEnum BillingAttemptsRuleEnumFromString(string value)
        {
            if (value.Equals("on"))
                return BillingAttemptsRuleEnum.On;

            if (value.Equals("before"))
                return BillingAttemptsRuleEnum.Before;

            if (value.Equals("after"))
                return BillingAttemptsRuleEnum.After;

            throw new NotImplementedException($"Could not convert value to type BillingAttemptsRuleEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="BillingAttemptsRuleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BillingAttemptsRuleEnum? BillingAttemptsRuleEnumFromStringOrDefault(string value)
        {
            if (value.Equals("on"))
                return BillingAttemptsRuleEnum.On;

            if (value.Equals("before"))
                return BillingAttemptsRuleEnum.Before;

            if (value.Equals("after"))
                return BillingAttemptsRuleEnum.After;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BillingAttemptsRuleEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string BillingAttemptsRuleEnumToJsonValue(BillingAttemptsRuleEnum? value)
        {
            if (value == BillingAttemptsRuleEnum.On)
                return "on";

            if (value == BillingAttemptsRuleEnum.Before)
                return "before";

            if (value == BillingAttemptsRuleEnum.After)
                return "after";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of BillingAttemptsRule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BillingAttemptsRuleEnum?> BillingAttemptsRuleOption { get; private set; }

        /// <summary>
        /// The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.  Possible values:   * **on**: On a specific date.   * **before**:  Before and on a specific date.   * **after**: On and after a specific date.  
        /// </summary>
        /// <value>The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.  Possible values:   * **on**: On a specific date.   * **before**:  Before and on a specific date.   * **after**: On and after a specific date.  </value>
        [JsonPropertyName("billingAttemptsRule")]
        public BillingAttemptsRuleEnum? BillingAttemptsRule { get { return this.BillingAttemptsRuleOption; } set { this.BillingAttemptsRuleOption = new Option<BillingAttemptsRuleEnum?>(value); } }

        /// <summary>
        /// The billing amount (in minor units) of the recurring transactions.
        /// </summary>
        /// <value>The billing amount (in minor units) of the recurring transactions.</value>
        [JsonPropertyName("amount")]
        public string Amount { get; set; }

        /// <summary>
        /// End date of the billing plan, in YYYY-MM-DD format.
        /// </summary>
        /// <value>End date of the billing plan, in YYYY-MM-DD format.</value>
        [JsonPropertyName("endsAt")]
        public string EndsAt { get; set; }

        /// <summary>
        /// Used to track the state of BillingDay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BillingDayOption { get; private set; }

        /// <summary>
        /// The number of the day, on which the recurring debit can happen. Should be within the same calendar month as the mandate recurring date.  Possible values: 1-31 based on the &#x60;frequency&#x60;.
        /// </summary>
        /// <value>The number of the day, on which the recurring debit can happen. Should be within the same calendar month as the mandate recurring date.  Possible values: 1-31 based on the &#x60;frequency&#x60;.</value>
        [JsonPropertyName("billingDay")]
        public string BillingDay { get { return this.BillingDayOption; } set { this.BillingDayOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Count
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountOption { get; private set; }

        /// <summary>
        /// The number of transactions that can be performed within the given frequency.
        /// </summary>
        /// <value>The number of transactions that can be performed within the given frequency.</value>
        [JsonPropertyName("count")]
        public string Count { get { return this.CountOption; } set { this.CountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Remarks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RemarksOption { get; private set; }

        /// <summary>
        /// The message shown by UPI to the shopper on the approval screen.
        /// </summary>
        /// <value>The message shown by UPI to the shopper on the approval screen.</value>
        [JsonPropertyName("remarks")]
        public string Remarks { get { return this.RemarksOption; } set { this.RemarksOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StartsAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StartsAtOption { get; private set; }

        /// <summary>
        /// Start date of the billing plan, in YYYY-MM-DD format. By default, the transaction date.
        /// </summary>
        /// <value>Start date of the billing plan, in YYYY-MM-DD format. By default, the transaction date.</value>
        [JsonPropertyName("startsAt")]
        public string StartsAt { get { return this.StartsAtOption; } set { this.StartsAtOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Mandate {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  EndsAt: ").Append(EndsAt).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  AmountRule: ").Append(AmountRule).Append("\n");
            sb.Append("  BillingAttemptsRule: ").Append(BillingAttemptsRule).Append("\n");
            sb.Append("  BillingDay: ").Append(BillingDay).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  StartsAt: ").Append(StartsAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Mandate" />
    /// </summary>
    public class MandateJsonConverter : JsonConverter<Mandate>
    {
        /// <summary>
        /// Deserializes json to <see cref="Mandate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Mandate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> amount = default;
            Option<string> endsAt = default;
            Option<Mandate.FrequencyEnum?> frequency = default;
            Option<Mandate.AmountRuleEnum?> amountRule = default;
            Option<Mandate.BillingAttemptsRuleEnum?> billingAttemptsRule = default;
            Option<string> billingDay = default;
            Option<string> count = default;
            Option<string> remarks = default;
            Option<string> startsAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            amount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "endsAt":
                            endsAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "frequency":
                            string frequencyRawValue = utf8JsonReader.GetString();
                            if (frequencyRawValue != null)
                                frequency = new Option<Mandate.FrequencyEnum?>(Mandate.FrequencyEnumFromStringOrDefault(frequencyRawValue));
                            break;
                        case "amountRule":
                            string amountRuleRawValue = utf8JsonReader.GetString();
                            if (amountRuleRawValue != null)
                                amountRule = new Option<Mandate.AmountRuleEnum?>(Mandate.AmountRuleEnumFromStringOrDefault(amountRuleRawValue));
                            break;
                        case "billingAttemptsRule":
                            string billingAttemptsRuleRawValue = utf8JsonReader.GetString();
                            if (billingAttemptsRuleRawValue != null)
                                billingAttemptsRule = new Option<Mandate.BillingAttemptsRuleEnum?>(Mandate.BillingAttemptsRuleEnumFromStringOrDefault(billingAttemptsRuleRawValue));
                            break;
                        case "billingDay":
                            billingDay = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "count":
                            count = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "remarks":
                            remarks = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "startsAt":
                            startsAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class Mandate.", nameof(amount));

            if (!endsAt.IsSet)
                throw new ArgumentException("Property is required for class Mandate.", nameof(endsAt));

            if (!frequency.IsSet)
                throw new ArgumentException("Property is required for class Mandate.", nameof(frequency));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class Mandate.");

            if (endsAt.IsSet && endsAt.Value == null)
                throw new ArgumentNullException(nameof(endsAt), "Property is not nullable for class Mandate.");

            if (frequency.IsSet && frequency.Value == null)
                throw new ArgumentNullException(nameof(frequency), "Property is not nullable for class Mandate.");

            if (amountRule.IsSet && amountRule.Value == null)
                throw new ArgumentNullException(nameof(amountRule), "Property is not nullable for class Mandate.");

            if (billingAttemptsRule.IsSet && billingAttemptsRule.Value == null)
                throw new ArgumentNullException(nameof(billingAttemptsRule), "Property is not nullable for class Mandate.");

            if (billingDay.IsSet && billingDay.Value == null)
                throw new ArgumentNullException(nameof(billingDay), "Property is not nullable for class Mandate.");

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class Mandate.");

            if (remarks.IsSet && remarks.Value == null)
                throw new ArgumentNullException(nameof(remarks), "Property is not nullable for class Mandate.");

            if (startsAt.IsSet && startsAt.Value == null)
                throw new ArgumentNullException(nameof(startsAt), "Property is not nullable for class Mandate.");

            return new Mandate(amount.Value, endsAt.Value, frequency.Value.Value, amountRule, billingAttemptsRule, billingDay, count, remarks, startsAt);
        }

        /// <summary>
        /// Serializes a <see cref="Mandate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mandate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Mandate mandate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, mandate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Mandate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mandate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Mandate mandate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (mandate.Amount == null)
                throw new ArgumentNullException(nameof(mandate.Amount), "Property is required for class Mandate.");

            if (mandate.EndsAt == null)
                throw new ArgumentNullException(nameof(mandate.EndsAt), "Property is required for class Mandate.");

            if (mandate.BillingDayOption.IsSet && mandate.BillingDay == null)
                throw new ArgumentNullException(nameof(mandate.BillingDay), "Property is required for class Mandate.");

            if (mandate.CountOption.IsSet && mandate.Count == null)
                throw new ArgumentNullException(nameof(mandate.Count), "Property is required for class Mandate.");

            if (mandate.RemarksOption.IsSet && mandate.Remarks == null)
                throw new ArgumentNullException(nameof(mandate.Remarks), "Property is required for class Mandate.");

            if (mandate.StartsAtOption.IsSet && mandate.StartsAt == null)
                throw new ArgumentNullException(nameof(mandate.StartsAt), "Property is required for class Mandate.");

            writer.WriteString("amount", mandate.Amount);

            writer.WriteString("endsAt", mandate.EndsAt);

            var frequencyRawValue = Mandate.FrequencyEnumToJsonValue(mandate.Frequency);
            writer.WriteString("frequency", frequencyRawValue);
            var amountRuleRawValue = Mandate.AmountRuleEnumToJsonValue(mandate.AmountRuleOption.Value.Value);
            writer.WriteString("amountRule", amountRuleRawValue);
            var billingAttemptsRuleRawValue = Mandate.BillingAttemptsRuleEnumToJsonValue(mandate.BillingAttemptsRuleOption.Value.Value);
            writer.WriteString("billingAttemptsRule", billingAttemptsRuleRawValue);
            if (mandate.BillingDayOption.IsSet)
                writer.WriteString("billingDay", mandate.BillingDay);

            if (mandate.CountOption.IsSet)
                writer.WriteString("count", mandate.Count);

            if (mandate.RemarksOption.IsSet)
                writer.WriteString("remarks", mandate.Remarks);

            if (mandate.StartsAtOption.IsSet)
                writer.WriteString("startsAt", mandate.StartsAt);
        }
    }
}
