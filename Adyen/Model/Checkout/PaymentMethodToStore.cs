// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PaymentMethodToStore
    /// </summary>
    public partial class PaymentMethodToStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodToStore" /> class.
        /// </summary>
        /// <param name="brand">Secondary brand of the card. For example: **plastix**, **hmclub**.</param>
        /// <param name="cvc">The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</param>
        /// <param name="encryptedCard">The encrypted card.</param>
        /// <param name="encryptedCardNumber">The encrypted card number.</param>
        /// <param name="encryptedExpiryMonth">The encrypted card expiry month.</param>
        /// <param name="encryptedExpiryYear">The encrypted card expiry year.</param>
        /// <param name="encryptedSecurityCode">The encrypted card verification code.</param>
        /// <param name="expiryMonth">The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</param>
        /// <param name="expiryYear">The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</param>
        /// <param name="holderName">The name of the card holder.</param>
        /// <param name="number">The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</param>
        /// <param name="type">Set to **scheme**.</param>
        [JsonConstructor]
        public PaymentMethodToStore(Option<string> brand = default, Option<string> cvc = default, Option<string> encryptedCard = default, Option<string> encryptedCardNumber = default, Option<string> encryptedExpiryMonth = default, Option<string> encryptedExpiryYear = default, Option<string> encryptedSecurityCode = default, Option<string> expiryMonth = default, Option<string> expiryYear = default, Option<string> holderName = default, Option<string> number = default, Option<string> type = default)
        {
            BrandOption = brand;
            CvcOption = cvc;
            EncryptedCardOption = encryptedCard;
            EncryptedCardNumberOption = encryptedCardNumber;
            EncryptedExpiryMonthOption = encryptedExpiryMonth;
            EncryptedExpiryYearOption = encryptedExpiryYear;
            EncryptedSecurityCodeOption = encryptedSecurityCode;
            ExpiryMonthOption = expiryMonth;
            ExpiryYearOption = expiryYear;
            HolderNameOption = holderName;
            NumberOption = number;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Brand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BrandOption { get; private set; }

        /// <summary>
        /// Secondary brand of the card. For example: **plastix**, **hmclub**.
        /// </summary>
        /// <value>Secondary brand of the card. For example: **plastix**, **hmclub**.</value>
        [JsonPropertyName("brand")]
        public string Brand { get { return this.BrandOption; } set { this.BrandOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Cvc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CvcOption { get; private set; }

        /// <summary>
        /// The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
        /// </summary>
        /// <value>The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</value>
        [JsonPropertyName("cvc")]
        public string Cvc { get { return this.CvcOption; } set { this.CvcOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EncryptedCard
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EncryptedCardOption { get; private set; }

        /// <summary>
        /// The encrypted card.
        /// </summary>
        /// <value>The encrypted card.</value>
        [JsonPropertyName("encryptedCard")]
        public string EncryptedCard { get { return this.EncryptedCardOption; } set { this.EncryptedCardOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EncryptedCardNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EncryptedCardNumberOption { get; private set; }

        /// <summary>
        /// The encrypted card number.
        /// </summary>
        /// <value>The encrypted card number.</value>
        [JsonPropertyName("encryptedCardNumber")]
        public string EncryptedCardNumber { get { return this.EncryptedCardNumberOption; } set { this.EncryptedCardNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EncryptedExpiryMonth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EncryptedExpiryMonthOption { get; private set; }

        /// <summary>
        /// The encrypted card expiry month.
        /// </summary>
        /// <value>The encrypted card expiry month.</value>
        [JsonPropertyName("encryptedExpiryMonth")]
        public string EncryptedExpiryMonth { get { return this.EncryptedExpiryMonthOption; } set { this.EncryptedExpiryMonthOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EncryptedExpiryYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EncryptedExpiryYearOption { get; private set; }

        /// <summary>
        /// The encrypted card expiry year.
        /// </summary>
        /// <value>The encrypted card expiry year.</value>
        [JsonPropertyName("encryptedExpiryYear")]
        public string EncryptedExpiryYear { get { return this.EncryptedExpiryYearOption; } set { this.EncryptedExpiryYearOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EncryptedSecurityCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EncryptedSecurityCodeOption { get; private set; }

        /// <summary>
        /// The encrypted card verification code.
        /// </summary>
        /// <value>The encrypted card verification code.</value>
        [JsonPropertyName("encryptedSecurityCode")]
        public string EncryptedSecurityCode { get { return this.EncryptedSecurityCodeOption; } set { this.EncryptedSecurityCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpiryMonth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExpiryMonthOption { get; private set; }

        /// <summary>
        /// The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
        /// </summary>
        /// <value>The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</value>
        [JsonPropertyName("expiryMonth")]
        public string ExpiryMonth { get { return this.ExpiryMonthOption; } set { this.ExpiryMonthOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpiryYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExpiryYearOption { get; private set; }

        /// <summary>
        /// The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
        /// </summary>
        /// <value>The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</value>
        [JsonPropertyName("expiryYear")]
        public string ExpiryYear { get { return this.ExpiryYearOption; } set { this.ExpiryYearOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of HolderName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> HolderNameOption { get; private set; }

        /// <summary>
        /// The name of the card holder.
        /// </summary>
        /// <value>The name of the card holder.</value>
        [JsonPropertyName("holderName")]
        public string HolderName { get { return this.HolderNameOption; } set { this.HolderNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
        /// </summary>
        /// <value>The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</value>
        [JsonPropertyName("number")]
        public string Number { get { return this.NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Set to **scheme**.
        /// </summary>
        /// <value>Set to **scheme**.</value>
        [JsonPropertyName("type")]
        public string Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethodToStore {\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Cvc: ").Append(Cvc).Append("\n");
            sb.Append("  EncryptedCard: ").Append(EncryptedCard).Append("\n");
            sb.Append("  EncryptedCardNumber: ").Append(EncryptedCardNumber).Append("\n");
            sb.Append("  EncryptedExpiryMonth: ").Append(EncryptedExpiryMonth).Append("\n");
            sb.Append("  EncryptedExpiryYear: ").Append(EncryptedExpiryYear).Append("\n");
            sb.Append("  EncryptedSecurityCode: ").Append(EncryptedSecurityCode).Append("\n");
            sb.Append("  ExpiryMonth: ").Append(ExpiryMonth).Append("\n");
            sb.Append("  ExpiryYear: ").Append(ExpiryYear).Append("\n");
            sb.Append("  HolderName: ").Append(HolderName).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EncryptedCard (string) maxLength
            if (this.EncryptedCard != null && this.EncryptedCard.Length > 40000)
            {
                yield return new ValidationResult("Invalid value for EncryptedCard, length must be less than 40000.", new [] { "EncryptedCard" });
            }

            // EncryptedCardNumber (string) maxLength
            if (this.EncryptedCardNumber != null && this.EncryptedCardNumber.Length > 15000)
            {
                yield return new ValidationResult("Invalid value for EncryptedCardNumber, length must be less than 15000.", new [] { "EncryptedCardNumber" });
            }

            // EncryptedExpiryMonth (string) maxLength
            if (this.EncryptedExpiryMonth != null && this.EncryptedExpiryMonth.Length > 15000)
            {
                yield return new ValidationResult("Invalid value for EncryptedExpiryMonth, length must be less than 15000.", new [] { "EncryptedExpiryMonth" });
            }

            // EncryptedExpiryYear (string) maxLength
            if (this.EncryptedExpiryYear != null && this.EncryptedExpiryYear.Length > 15000)
            {
                yield return new ValidationResult("Invalid value for EncryptedExpiryYear, length must be less than 15000.", new [] { "EncryptedExpiryYear" });
            }

            // EncryptedSecurityCode (string) maxLength
            if (this.EncryptedSecurityCode != null && this.EncryptedSecurityCode.Length > 15000)
            {
                yield return new ValidationResult("Invalid value for EncryptedSecurityCode, length must be less than 15000.", new [] { "EncryptedSecurityCode" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentMethodToStore" />
    /// </summary>
    public class PaymentMethodToStoreJsonConverter : JsonConverter<PaymentMethodToStore>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentMethodToStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentMethodToStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> brand = default;
            Option<string> cvc = default;
            Option<string> encryptedCard = default;
            Option<string> encryptedCardNumber = default;
            Option<string> encryptedExpiryMonth = default;
            Option<string> encryptedExpiryYear = default;
            Option<string> encryptedSecurityCode = default;
            Option<string> expiryMonth = default;
            Option<string> expiryYear = default;
            Option<string> holderName = default;
            Option<string> number = default;
            Option<string> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "brand":
                            brand = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cvc":
                            cvc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "encryptedCard":
                            encryptedCard = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "encryptedCardNumber":
                            encryptedCardNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "encryptedExpiryMonth":
                            encryptedExpiryMonth = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "encryptedExpiryYear":
                            encryptedExpiryYear = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "encryptedSecurityCode":
                            encryptedSecurityCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expiryMonth":
                            expiryMonth = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expiryYear":
                            expiryYear = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "holderName":
                            holderName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (brand.IsSet && brand.Value == null)
                throw new ArgumentNullException(nameof(brand), "Property is not nullable for class PaymentMethodToStore.");

            if (cvc.IsSet && cvc.Value == null)
                throw new ArgumentNullException(nameof(cvc), "Property is not nullable for class PaymentMethodToStore.");

            if (encryptedCard.IsSet && encryptedCard.Value == null)
                throw new ArgumentNullException(nameof(encryptedCard), "Property is not nullable for class PaymentMethodToStore.");

            if (encryptedCardNumber.IsSet && encryptedCardNumber.Value == null)
                throw new ArgumentNullException(nameof(encryptedCardNumber), "Property is not nullable for class PaymentMethodToStore.");

            if (encryptedExpiryMonth.IsSet && encryptedExpiryMonth.Value == null)
                throw new ArgumentNullException(nameof(encryptedExpiryMonth), "Property is not nullable for class PaymentMethodToStore.");

            if (encryptedExpiryYear.IsSet && encryptedExpiryYear.Value == null)
                throw new ArgumentNullException(nameof(encryptedExpiryYear), "Property is not nullable for class PaymentMethodToStore.");

            if (encryptedSecurityCode.IsSet && encryptedSecurityCode.Value == null)
                throw new ArgumentNullException(nameof(encryptedSecurityCode), "Property is not nullable for class PaymentMethodToStore.");

            if (expiryMonth.IsSet && expiryMonth.Value == null)
                throw new ArgumentNullException(nameof(expiryMonth), "Property is not nullable for class PaymentMethodToStore.");

            if (expiryYear.IsSet && expiryYear.Value == null)
                throw new ArgumentNullException(nameof(expiryYear), "Property is not nullable for class PaymentMethodToStore.");

            if (holderName.IsSet && holderName.Value == null)
                throw new ArgumentNullException(nameof(holderName), "Property is not nullable for class PaymentMethodToStore.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class PaymentMethodToStore.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PaymentMethodToStore.");

            return new PaymentMethodToStore(brand, cvc, encryptedCard, encryptedCardNumber, encryptedExpiryMonth, encryptedExpiryYear, encryptedSecurityCode, expiryMonth, expiryYear, holderName, number, type);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentMethodToStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentMethodToStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentMethodToStore paymentMethodToStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentMethodToStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentMethodToStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentMethodToStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentMethodToStore paymentMethodToStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentMethodToStore.BrandOption.IsSet && paymentMethodToStore.Brand == null)
                throw new ArgumentNullException(nameof(paymentMethodToStore.Brand), "Property is required for class PaymentMethodToStore.");

            if (paymentMethodToStore.CvcOption.IsSet && paymentMethodToStore.Cvc == null)
                throw new ArgumentNullException(nameof(paymentMethodToStore.Cvc), "Property is required for class PaymentMethodToStore.");

            if (paymentMethodToStore.EncryptedCardOption.IsSet && paymentMethodToStore.EncryptedCard == null)
                throw new ArgumentNullException(nameof(paymentMethodToStore.EncryptedCard), "Property is required for class PaymentMethodToStore.");

            if (paymentMethodToStore.EncryptedCardNumberOption.IsSet && paymentMethodToStore.EncryptedCardNumber == null)
                throw new ArgumentNullException(nameof(paymentMethodToStore.EncryptedCardNumber), "Property is required for class PaymentMethodToStore.");

            if (paymentMethodToStore.EncryptedExpiryMonthOption.IsSet && paymentMethodToStore.EncryptedExpiryMonth == null)
                throw new ArgumentNullException(nameof(paymentMethodToStore.EncryptedExpiryMonth), "Property is required for class PaymentMethodToStore.");

            if (paymentMethodToStore.EncryptedExpiryYearOption.IsSet && paymentMethodToStore.EncryptedExpiryYear == null)
                throw new ArgumentNullException(nameof(paymentMethodToStore.EncryptedExpiryYear), "Property is required for class PaymentMethodToStore.");

            if (paymentMethodToStore.EncryptedSecurityCodeOption.IsSet && paymentMethodToStore.EncryptedSecurityCode == null)
                throw new ArgumentNullException(nameof(paymentMethodToStore.EncryptedSecurityCode), "Property is required for class PaymentMethodToStore.");

            if (paymentMethodToStore.ExpiryMonthOption.IsSet && paymentMethodToStore.ExpiryMonth == null)
                throw new ArgumentNullException(nameof(paymentMethodToStore.ExpiryMonth), "Property is required for class PaymentMethodToStore.");

            if (paymentMethodToStore.ExpiryYearOption.IsSet && paymentMethodToStore.ExpiryYear == null)
                throw new ArgumentNullException(nameof(paymentMethodToStore.ExpiryYear), "Property is required for class PaymentMethodToStore.");

            if (paymentMethodToStore.HolderNameOption.IsSet && paymentMethodToStore.HolderName == null)
                throw new ArgumentNullException(nameof(paymentMethodToStore.HolderName), "Property is required for class PaymentMethodToStore.");

            if (paymentMethodToStore.NumberOption.IsSet && paymentMethodToStore.Number == null)
                throw new ArgumentNullException(nameof(paymentMethodToStore.Number), "Property is required for class PaymentMethodToStore.");

            if (paymentMethodToStore.TypeOption.IsSet && paymentMethodToStore.Type == null)
                throw new ArgumentNullException(nameof(paymentMethodToStore.Type), "Property is required for class PaymentMethodToStore.");

            if (paymentMethodToStore.BrandOption.IsSet)
                writer.WriteString("brand", paymentMethodToStore.Brand);

            if (paymentMethodToStore.CvcOption.IsSet)
                writer.WriteString("cvc", paymentMethodToStore.Cvc);

            if (paymentMethodToStore.EncryptedCardOption.IsSet)
                writer.WriteString("encryptedCard", paymentMethodToStore.EncryptedCard);

            if (paymentMethodToStore.EncryptedCardNumberOption.IsSet)
                writer.WriteString("encryptedCardNumber", paymentMethodToStore.EncryptedCardNumber);

            if (paymentMethodToStore.EncryptedExpiryMonthOption.IsSet)
                writer.WriteString("encryptedExpiryMonth", paymentMethodToStore.EncryptedExpiryMonth);

            if (paymentMethodToStore.EncryptedExpiryYearOption.IsSet)
                writer.WriteString("encryptedExpiryYear", paymentMethodToStore.EncryptedExpiryYear);

            if (paymentMethodToStore.EncryptedSecurityCodeOption.IsSet)
                writer.WriteString("encryptedSecurityCode", paymentMethodToStore.EncryptedSecurityCode);

            if (paymentMethodToStore.ExpiryMonthOption.IsSet)
                writer.WriteString("expiryMonth", paymentMethodToStore.ExpiryMonth);

            if (paymentMethodToStore.ExpiryYearOption.IsSet)
                writer.WriteString("expiryYear", paymentMethodToStore.ExpiryYear);

            if (paymentMethodToStore.HolderNameOption.IsSet)
                writer.WriteString("holderName", paymentMethodToStore.HolderName);

            if (paymentMethodToStore.NumberOption.IsSet)
                writer.WriteString("number", paymentMethodToStore.Number);

            if (paymentMethodToStore.TypeOption.IsSet)
                writer.WriteString("type", paymentMethodToStore.Type);
        }
    }
}
