// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PaymentDetailsResponse
    /// </summary>
    public partial class PaymentDetailsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetailsResponse" /> class.
        /// </summary>
        /// <param name="additionalData">Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** &gt; **Developers** &gt; **Additional data**.</param>
        /// <param name="amount">amount</param>
        /// <param name="donationToken">Donation Token containing payment details for Adyen Giving.</param>
        /// <param name="fraudResult">fraudResult</param>
        /// <param name="merchantReference">The reference used during the /payments request.</param>
        /// <param name="order">order</param>
        /// <param name="paymentMethod">paymentMethod</param>
        /// <param name="pspReference">Adyen&#39;s 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.</param>
        /// <param name="refusalReason">If the payment&#39;s authorisation is refused or an error occurs during authorisation, this field holds Adyen&#39;s mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes &#x60;resultCode&#x60; and &#x60;refusalReason&#x60; values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).</param>
        /// <param name="refusalReasonCode">Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).</param>
        /// <param name="resultCode">The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the &#x60;refusalReason&#x60; field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper&#39;s device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the &#x60;refusalReason&#x60; field. This is a final state.</param>
        /// <param name="shopperLocale">The shopperLocale.</param>
        /// <param name="threeDS2ResponseData">threeDS2ResponseData</param>
        /// <param name="threeDS2Result">threeDS2Result</param>
        /// <param name="threeDSPaymentData">When non-empty, contains a value that you must submit to the &#x60;/payments/details&#x60; endpoint as &#x60;paymentData&#x60;.</param>
        [JsonConstructor]
        public PaymentDetailsResponse(Option<Dictionary<string, string>> additionalData = default, Option<Amount> amount = default, Option<string> donationToken = default, Option<FraudResult> fraudResult = default, Option<string> merchantReference = default, Option<CheckoutOrderResponse> order = default, Option<ResponsePaymentMethod> paymentMethod = default, Option<string> pspReference = default, Option<string> refusalReason = default, Option<string> refusalReasonCode = default, Option<ResultCodeEnum?> resultCode = default, Option<string> shopperLocale = default, Option<ThreeDS2ResponseData> threeDS2ResponseData = default, Option<ThreeDS2Result> threeDS2Result = default, Option<string> threeDSPaymentData = default)
        {
            AdditionalDataOption = additionalData;
            AmountOption = amount;
            DonationTokenOption = donationToken;
            FraudResultOption = fraudResult;
            MerchantReferenceOption = merchantReference;
            OrderOption = order;
            PaymentMethodOption = paymentMethod;
            PspReferenceOption = pspReference;
            RefusalReasonOption = refusalReason;
            RefusalReasonCodeOption = refusalReasonCode;
            ResultCodeOption = resultCode;
            ShopperLocaleOption = shopperLocale;
            ThreeDS2ResponseDataOption = threeDS2ResponseData;
            ThreeDS2ResultOption = threeDS2Result;
            ThreeDSPaymentDataOption = threeDSPaymentData;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the &#x60;refusalReason&#x60; field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper&#39;s device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the &#x60;refusalReason&#x60; field. This is a final state.
        /// </summary>
        /// <value>The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the &#x60;refusalReason&#x60; field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper&#39;s device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the &#x60;refusalReason&#x60; field. This is a final state.</value>
        public enum ResultCodeEnum
        {
            /// <summary>
            /// Enum AuthenticationFinished for value: AuthenticationFinished
            /// </summary>
            AuthenticationFinished = 1,

            /// <summary>
            /// Enum AuthenticationNotRequired for value: AuthenticationNotRequired
            /// </summary>
            AuthenticationNotRequired = 2,

            /// <summary>
            /// Enum Authorised for value: Authorised
            /// </summary>
            Authorised = 3,

            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            Cancelled = 4,

            /// <summary>
            /// Enum ChallengeShopper for value: ChallengeShopper
            /// </summary>
            ChallengeShopper = 5,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            Error = 6,

            /// <summary>
            /// Enum IdentifyShopper for value: IdentifyShopper
            /// </summary>
            IdentifyShopper = 7,

            /// <summary>
            /// Enum PartiallyAuthorised for value: PartiallyAuthorised
            /// </summary>
            PartiallyAuthorised = 8,

            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            Pending = 9,

            /// <summary>
            /// Enum PresentToShopper for value: PresentToShopper
            /// </summary>
            PresentToShopper = 10,

            /// <summary>
            /// Enum Received for value: Received
            /// </summary>
            Received = 11,

            /// <summary>
            /// Enum RedirectShopper for value: RedirectShopper
            /// </summary>
            RedirectShopper = 12,

            /// <summary>
            /// Enum Refused for value: Refused
            /// </summary>
            Refused = 13,

            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            Success = 14
        }

        /// <summary>
        /// Returns a <see cref="ResultCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ResultCodeEnum ResultCodeEnumFromString(string value)
        {
            if (value.Equals("AuthenticationFinished"))
                return ResultCodeEnum.AuthenticationFinished;

            if (value.Equals("AuthenticationNotRequired"))
                return ResultCodeEnum.AuthenticationNotRequired;

            if (value.Equals("Authorised"))
                return ResultCodeEnum.Authorised;

            if (value.Equals("Cancelled"))
                return ResultCodeEnum.Cancelled;

            if (value.Equals("ChallengeShopper"))
                return ResultCodeEnum.ChallengeShopper;

            if (value.Equals("Error"))
                return ResultCodeEnum.Error;

            if (value.Equals("IdentifyShopper"))
                return ResultCodeEnum.IdentifyShopper;

            if (value.Equals("PartiallyAuthorised"))
                return ResultCodeEnum.PartiallyAuthorised;

            if (value.Equals("Pending"))
                return ResultCodeEnum.Pending;

            if (value.Equals("PresentToShopper"))
                return ResultCodeEnum.PresentToShopper;

            if (value.Equals("Received"))
                return ResultCodeEnum.Received;

            if (value.Equals("RedirectShopper"))
                return ResultCodeEnum.RedirectShopper;

            if (value.Equals("Refused"))
                return ResultCodeEnum.Refused;

            if (value.Equals("Success"))
                return ResultCodeEnum.Success;

            throw new NotImplementedException($"Could not convert value to type ResultCodeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ResultCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ResultCodeEnum? ResultCodeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("AuthenticationFinished"))
                return ResultCodeEnum.AuthenticationFinished;

            if (value.Equals("AuthenticationNotRequired"))
                return ResultCodeEnum.AuthenticationNotRequired;

            if (value.Equals("Authorised"))
                return ResultCodeEnum.Authorised;

            if (value.Equals("Cancelled"))
                return ResultCodeEnum.Cancelled;

            if (value.Equals("ChallengeShopper"))
                return ResultCodeEnum.ChallengeShopper;

            if (value.Equals("Error"))
                return ResultCodeEnum.Error;

            if (value.Equals("IdentifyShopper"))
                return ResultCodeEnum.IdentifyShopper;

            if (value.Equals("PartiallyAuthorised"))
                return ResultCodeEnum.PartiallyAuthorised;

            if (value.Equals("Pending"))
                return ResultCodeEnum.Pending;

            if (value.Equals("PresentToShopper"))
                return ResultCodeEnum.PresentToShopper;

            if (value.Equals("Received"))
                return ResultCodeEnum.Received;

            if (value.Equals("RedirectShopper"))
                return ResultCodeEnum.RedirectShopper;

            if (value.Equals("Refused"))
                return ResultCodeEnum.Refused;

            if (value.Equals("Success"))
                return ResultCodeEnum.Success;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ResultCodeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ResultCodeEnumToJsonValue(ResultCodeEnum? value)
        {
            if (value == ResultCodeEnum.AuthenticationFinished)
                return "AuthenticationFinished";

            if (value == ResultCodeEnum.AuthenticationNotRequired)
                return "AuthenticationNotRequired";

            if (value == ResultCodeEnum.Authorised)
                return "Authorised";

            if (value == ResultCodeEnum.Cancelled)
                return "Cancelled";

            if (value == ResultCodeEnum.ChallengeShopper)
                return "ChallengeShopper";

            if (value == ResultCodeEnum.Error)
                return "Error";

            if (value == ResultCodeEnum.IdentifyShopper)
                return "IdentifyShopper";

            if (value == ResultCodeEnum.PartiallyAuthorised)
                return "PartiallyAuthorised";

            if (value == ResultCodeEnum.Pending)
                return "Pending";

            if (value == ResultCodeEnum.PresentToShopper)
                return "PresentToShopper";

            if (value == ResultCodeEnum.Received)
                return "Received";

            if (value == ResultCodeEnum.RedirectShopper)
                return "RedirectShopper";

            if (value == ResultCodeEnum.Refused)
                return "Refused";

            if (value == ResultCodeEnum.Success)
                return "Success";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ResultCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResultCodeEnum?> ResultCodeOption { get; private set; }

        /// <summary>
        /// The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the &#x60;refusalReason&#x60; field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper&#39;s device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the &#x60;refusalReason&#x60; field. This is a final state.
        /// </summary>
        /// <value>The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the &#x60;refusalReason&#x60; field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper&#39;s device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the &#x60;refusalReason&#x60; field. This is a final state.</value>
        [JsonPropertyName("resultCode")]
        public ResultCodeEnum? ResultCode { get { return this.ResultCodeOption; } set { this.ResultCodeOption = new Option<ResultCodeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> AdditionalDataOption { get; private set; }

        /// <summary>
        /// Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** &gt; **Developers** &gt; **Additional data**.
        /// </summary>
        /// <value>Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** &gt; **Developers** &gt; **Additional data**.</value>
        [JsonPropertyName("additionalData")]
        public Dictionary<string, string> AdditionalData { get { return this.AdditionalDataOption; } set { this.AdditionalDataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> AmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public Amount Amount { get { return this.AmountOption; } set { this.AmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of DonationToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DonationTokenOption { get; private set; }

        /// <summary>
        /// Donation Token containing payment details for Adyen Giving.
        /// </summary>
        /// <value>Donation Token containing payment details for Adyen Giving.</value>
        [JsonPropertyName("donationToken")]
        public string DonationToken { get { return this.DonationTokenOption; } set { this.DonationTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FraudResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FraudResult> FraudResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets FraudResult
        /// </summary>
        [JsonPropertyName("fraudResult")]
        public FraudResult FraudResult { get { return this.FraudResultOption; } set { this.FraudResultOption = new Option<FraudResult>(value); } }

        /// <summary>
        /// Used to track the state of MerchantReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MerchantReferenceOption { get; private set; }

        /// <summary>
        /// The reference used during the /payments request.
        /// </summary>
        /// <value>The reference used during the /payments request.</value>
        [JsonPropertyName("merchantReference")]
        public string MerchantReference { get { return this.MerchantReferenceOption; } set { this.MerchantReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CheckoutOrderResponse> OrderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [JsonPropertyName("order")]
        public CheckoutOrderResponse Order { get { return this.OrderOption; } set { this.OrderOption = new Option<CheckoutOrderResponse>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResponsePaymentMethod> PaymentMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [JsonPropertyName("paymentMethod")]
        public ResponsePaymentMethod PaymentMethod { get { return this.PaymentMethodOption; } set { this.PaymentMethodOption = new Option<ResponsePaymentMethod>(value); } }

        /// <summary>
        /// Used to track the state of PspReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PspReferenceOption { get; private set; }

        /// <summary>
        /// Adyen&#39;s 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.
        /// </summary>
        /// <value>Adyen&#39;s 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.</value>
        [JsonPropertyName("pspReference")]
        public string PspReference { get { return this.PspReferenceOption; } set { this.PspReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefusalReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RefusalReasonOption { get; private set; }

        /// <summary>
        /// If the payment&#39;s authorisation is refused or an error occurs during authorisation, this field holds Adyen&#39;s mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes &#x60;resultCode&#x60; and &#x60;refusalReason&#x60; values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).
        /// </summary>
        /// <value>If the payment&#39;s authorisation is refused or an error occurs during authorisation, this field holds Adyen&#39;s mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes &#x60;resultCode&#x60; and &#x60;refusalReason&#x60; values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).</value>
        [JsonPropertyName("refusalReason")]
        public string RefusalReason { get { return this.RefusalReasonOption; } set { this.RefusalReasonOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefusalReasonCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RefusalReasonCodeOption { get; private set; }

        /// <summary>
        /// Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).
        /// </summary>
        /// <value>Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).</value>
        [JsonPropertyName("refusalReasonCode")]
        public string RefusalReasonCode { get { return this.RefusalReasonCodeOption; } set { this.RefusalReasonCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperLocale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperLocaleOption { get; private set; }

        /// <summary>
        /// The shopperLocale.
        /// </summary>
        /// <value>The shopperLocale.</value>
        [JsonPropertyName("shopperLocale")]
        public string ShopperLocale { get { return this.ShopperLocaleOption; } set { this.ShopperLocaleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDS2ResponseData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDS2ResponseData> ThreeDS2ResponseDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreeDS2ResponseData
        /// </summary>
        [JsonPropertyName("threeDS2ResponseData")]
        public ThreeDS2ResponseData ThreeDS2ResponseData { get { return this.ThreeDS2ResponseDataOption; } set { this.ThreeDS2ResponseDataOption = new Option<ThreeDS2ResponseData>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDS2Result
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDS2Result> ThreeDS2ResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreeDS2Result
        /// </summary>
        [JsonPropertyName("threeDS2Result")]
        public ThreeDS2Result ThreeDS2Result { get { return this.ThreeDS2ResultOption; } set { this.ThreeDS2ResultOption = new Option<ThreeDS2Result>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSPaymentData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSPaymentDataOption { get; private set; }

        /// <summary>
        /// When non-empty, contains a value that you must submit to the &#x60;/payments/details&#x60; endpoint as &#x60;paymentData&#x60;.
        /// </summary>
        /// <value>When non-empty, contains a value that you must submit to the &#x60;/payments/details&#x60; endpoint as &#x60;paymentData&#x60;.</value>
        [JsonPropertyName("threeDSPaymentData")]
        public string ThreeDSPaymentData { get { return this.ThreeDSPaymentDataOption; } set { this.ThreeDSPaymentDataOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentDetailsResponse {\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  DonationToken: ").Append(DonationToken).Append("\n");
            sb.Append("  FraudResult: ").Append(FraudResult).Append("\n");
            sb.Append("  MerchantReference: ").Append(MerchantReference).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  RefusalReason: ").Append(RefusalReason).Append("\n");
            sb.Append("  RefusalReasonCode: ").Append(RefusalReasonCode).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  ShopperLocale: ").Append(ShopperLocale).Append("\n");
            sb.Append("  ThreeDS2ResponseData: ").Append(ThreeDS2ResponseData).Append("\n");
            sb.Append("  ThreeDS2Result: ").Append(ThreeDS2Result).Append("\n");
            sb.Append("  ThreeDSPaymentData: ").Append(ThreeDSPaymentData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentDetailsResponse" />
    /// </summary>
    public class PaymentDetailsResponseJsonConverter : JsonConverter<PaymentDetailsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentDetailsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentDetailsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, string>> additionalData = default;
            Option<Amount> amount = default;
            Option<string> donationToken = default;
            Option<FraudResult> fraudResult = default;
            Option<string> merchantReference = default;
            Option<CheckoutOrderResponse> order = default;
            Option<ResponsePaymentMethod> paymentMethod = default;
            Option<string> pspReference = default;
            Option<string> refusalReason = default;
            Option<string> refusalReasonCode = default;
            Option<PaymentDetailsResponse.ResultCodeEnum?> resultCode = default;
            Option<string> shopperLocale = default;
            Option<ThreeDS2ResponseData> threeDS2ResponseData = default;
            Option<ThreeDS2Result> threeDS2Result = default;
            Option<string> threeDSPaymentData = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "additionalData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalData = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "donationToken":
                            donationToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fraudResult":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fraudResult = new Option<FraudResult>(JsonSerializer.Deserialize<FraudResult>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "merchantReference":
                            merchantReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "order":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                order = new Option<CheckoutOrderResponse>(JsonSerializer.Deserialize<CheckoutOrderResponse>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "paymentMethod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentMethod = new Option<ResponsePaymentMethod>(JsonSerializer.Deserialize<ResponsePaymentMethod>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pspReference":
                            pspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refusalReason":
                            refusalReason = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refusalReasonCode":
                            refusalReasonCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "resultCode":
                            string resultCodeRawValue = utf8JsonReader.GetString();
                            if (resultCodeRawValue != null)
                                resultCode = new Option<PaymentDetailsResponse.ResultCodeEnum?>(PaymentDetailsResponse.ResultCodeEnumFromStringOrDefault(resultCodeRawValue));
                            break;
                        case "shopperLocale":
                            shopperLocale = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDS2ResponseData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeDS2ResponseData = new Option<ThreeDS2ResponseData>(JsonSerializer.Deserialize<ThreeDS2ResponseData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "threeDS2Result":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeDS2Result = new Option<ThreeDS2Result>(JsonSerializer.Deserialize<ThreeDS2Result>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "threeDSPaymentData":
                            threeDSPaymentData = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (additionalData.IsSet && additionalData.Value == null)
                throw new ArgumentNullException(nameof(additionalData), "Property is not nullable for class PaymentDetailsResponse.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class PaymentDetailsResponse.");

            if (donationToken.IsSet && donationToken.Value == null)
                throw new ArgumentNullException(nameof(donationToken), "Property is not nullable for class PaymentDetailsResponse.");

            if (fraudResult.IsSet && fraudResult.Value == null)
                throw new ArgumentNullException(nameof(fraudResult), "Property is not nullable for class PaymentDetailsResponse.");

            if (merchantReference.IsSet && merchantReference.Value == null)
                throw new ArgumentNullException(nameof(merchantReference), "Property is not nullable for class PaymentDetailsResponse.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class PaymentDetailsResponse.");

            if (paymentMethod.IsSet && paymentMethod.Value == null)
                throw new ArgumentNullException(nameof(paymentMethod), "Property is not nullable for class PaymentDetailsResponse.");

            if (pspReference.IsSet && pspReference.Value == null)
                throw new ArgumentNullException(nameof(pspReference), "Property is not nullable for class PaymentDetailsResponse.");

            if (refusalReason.IsSet && refusalReason.Value == null)
                throw new ArgumentNullException(nameof(refusalReason), "Property is not nullable for class PaymentDetailsResponse.");

            if (refusalReasonCode.IsSet && refusalReasonCode.Value == null)
                throw new ArgumentNullException(nameof(refusalReasonCode), "Property is not nullable for class PaymentDetailsResponse.");

            if (resultCode.IsSet && resultCode.Value == null)
                throw new ArgumentNullException(nameof(resultCode), "Property is not nullable for class PaymentDetailsResponse.");

            if (shopperLocale.IsSet && shopperLocale.Value == null)
                throw new ArgumentNullException(nameof(shopperLocale), "Property is not nullable for class PaymentDetailsResponse.");

            if (threeDS2ResponseData.IsSet && threeDS2ResponseData.Value == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData), "Property is not nullable for class PaymentDetailsResponse.");

            if (threeDS2Result.IsSet && threeDS2Result.Value == null)
                throw new ArgumentNullException(nameof(threeDS2Result), "Property is not nullable for class PaymentDetailsResponse.");

            if (threeDSPaymentData.IsSet && threeDSPaymentData.Value == null)
                throw new ArgumentNullException(nameof(threeDSPaymentData), "Property is not nullable for class PaymentDetailsResponse.");

            return new PaymentDetailsResponse(additionalData, amount, donationToken, fraudResult, merchantReference, order, paymentMethod, pspReference, refusalReason, refusalReasonCode, resultCode, shopperLocale, threeDS2ResponseData, threeDS2Result, threeDSPaymentData);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentDetailsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentDetailsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentDetailsResponse paymentDetailsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentDetailsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentDetailsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentDetailsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentDetailsResponse paymentDetailsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentDetailsResponse.AdditionalDataOption.IsSet && paymentDetailsResponse.AdditionalData == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.AdditionalData), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.AmountOption.IsSet && paymentDetailsResponse.Amount == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.Amount), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.DonationTokenOption.IsSet && paymentDetailsResponse.DonationToken == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.DonationToken), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.FraudResultOption.IsSet && paymentDetailsResponse.FraudResult == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.FraudResult), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.MerchantReferenceOption.IsSet && paymentDetailsResponse.MerchantReference == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.MerchantReference), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.OrderOption.IsSet && paymentDetailsResponse.Order == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.Order), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.PaymentMethodOption.IsSet && paymentDetailsResponse.PaymentMethod == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.PaymentMethod), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.PspReferenceOption.IsSet && paymentDetailsResponse.PspReference == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.PspReference), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.RefusalReasonOption.IsSet && paymentDetailsResponse.RefusalReason == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.RefusalReason), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.RefusalReasonCodeOption.IsSet && paymentDetailsResponse.RefusalReasonCode == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.RefusalReasonCode), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.ShopperLocaleOption.IsSet && paymentDetailsResponse.ShopperLocale == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.ShopperLocale), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.ThreeDS2ResponseDataOption.IsSet && paymentDetailsResponse.ThreeDS2ResponseData == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.ThreeDS2ResponseData), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.ThreeDS2ResultOption.IsSet && paymentDetailsResponse.ThreeDS2Result == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.ThreeDS2Result), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.ThreeDSPaymentDataOption.IsSet && paymentDetailsResponse.ThreeDSPaymentData == null)
                throw new ArgumentNullException(nameof(paymentDetailsResponse.ThreeDSPaymentData), "Property is required for class PaymentDetailsResponse.");

            if (paymentDetailsResponse.AdditionalDataOption.IsSet)
            {
                writer.WritePropertyName("additionalData");
                JsonSerializer.Serialize(writer, paymentDetailsResponse.AdditionalData, jsonSerializerOptions);
            }
            if (paymentDetailsResponse.AmountOption.IsSet)
            {
                writer.WritePropertyName("amount");
                JsonSerializer.Serialize(writer, paymentDetailsResponse.Amount, jsonSerializerOptions);
            }
            if (paymentDetailsResponse.DonationTokenOption.IsSet)
                writer.WriteString("donationToken", paymentDetailsResponse.DonationToken);

            if (paymentDetailsResponse.FraudResultOption.IsSet)
            {
                writer.WritePropertyName("fraudResult");
                JsonSerializer.Serialize(writer, paymentDetailsResponse.FraudResult, jsonSerializerOptions);
            }
            if (paymentDetailsResponse.MerchantReferenceOption.IsSet)
                writer.WriteString("merchantReference", paymentDetailsResponse.MerchantReference);

            if (paymentDetailsResponse.OrderOption.IsSet)
            {
                writer.WritePropertyName("order");
                JsonSerializer.Serialize(writer, paymentDetailsResponse.Order, jsonSerializerOptions);
            }
            if (paymentDetailsResponse.PaymentMethodOption.IsSet)
            {
                writer.WritePropertyName("paymentMethod");
                JsonSerializer.Serialize(writer, paymentDetailsResponse.PaymentMethod, jsonSerializerOptions);
            }
            if (paymentDetailsResponse.PspReferenceOption.IsSet)
                writer.WriteString("pspReference", paymentDetailsResponse.PspReference);

            if (paymentDetailsResponse.RefusalReasonOption.IsSet)
                writer.WriteString("refusalReason", paymentDetailsResponse.RefusalReason);

            if (paymentDetailsResponse.RefusalReasonCodeOption.IsSet)
                writer.WriteString("refusalReasonCode", paymentDetailsResponse.RefusalReasonCode);

            var resultCodeRawValue = PaymentDetailsResponse.ResultCodeEnumToJsonValue(paymentDetailsResponse.ResultCodeOption.Value.Value);
            writer.WriteString("resultCode", resultCodeRawValue);
            if (paymentDetailsResponse.ShopperLocaleOption.IsSet)
                writer.WriteString("shopperLocale", paymentDetailsResponse.ShopperLocale);

            if (paymentDetailsResponse.ThreeDS2ResponseDataOption.IsSet)
            {
                writer.WritePropertyName("threeDS2ResponseData");
                JsonSerializer.Serialize(writer, paymentDetailsResponse.ThreeDS2ResponseData, jsonSerializerOptions);
            }
            if (paymentDetailsResponse.ThreeDS2ResultOption.IsSet)
            {
                writer.WritePropertyName("threeDS2Result");
                JsonSerializer.Serialize(writer, paymentDetailsResponse.ThreeDS2Result, jsonSerializerOptions);
            }
            if (paymentDetailsResponse.ThreeDSPaymentDataOption.IsSet)
                writer.WriteString("threeDSPaymentData", paymentDetailsResponse.ThreeDSPaymentData);
        }
    }
}
