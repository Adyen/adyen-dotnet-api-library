// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ThreeDSRequestorAuthenticationInfo
    /// </summary>
    public partial class ThreeDSRequestorAuthenticationInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDSRequestorAuthenticationInfo" /> class.
        /// </summary>
        /// <param name="threeDSReqAuthData">Data that documents and supports a specific authentication process. Maximum length: 2048 bytes.</param>
        /// <param name="threeDSReqAuthMethod">Mechanism used by the Cardholder to authenticate to the 3DS Requestor. Allowed values: * **01** — No 3DS Requestor authentication occurred (for example, cardholder “logged in” as guest). * **02** — Login to the cardholder account at the 3DS Requestor system using 3DS Requestor’s own credentials. * **03** — Login to the cardholder account at the 3DS Requestor system using federated ID. * **04** — Login to the cardholder account at the 3DS Requestor system using issuer credentials. * **05** — Login to the cardholder account at the 3DS Requestor system using third-party authentication. * **06** — Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator.</param>
        /// <param name="threeDSReqAuthTimestamp">Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM</param>
        [JsonConstructor]
        public ThreeDSRequestorAuthenticationInfo(Option<string> threeDSReqAuthData = default, Option<ThreeDSReqAuthMethodEnum?> threeDSReqAuthMethod = default, Option<string> threeDSReqAuthTimestamp = default)
        {
            ThreeDSReqAuthDataOption = threeDSReqAuthData;
            ThreeDSReqAuthMethodOption = threeDSReqAuthMethod;
            ThreeDSReqAuthTimestampOption = threeDSReqAuthTimestamp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Mechanism used by the Cardholder to authenticate to the 3DS Requestor. Allowed values: * **01** — No 3DS Requestor authentication occurred (for example, cardholder “logged in” as guest). * **02** — Login to the cardholder account at the 3DS Requestor system using 3DS Requestor’s own credentials. * **03** — Login to the cardholder account at the 3DS Requestor system using federated ID. * **04** — Login to the cardholder account at the 3DS Requestor system using issuer credentials. * **05** — Login to the cardholder account at the 3DS Requestor system using third-party authentication. * **06** — Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator.
        /// </summary>
        /// <value>Mechanism used by the Cardholder to authenticate to the 3DS Requestor. Allowed values: * **01** — No 3DS Requestor authentication occurred (for example, cardholder “logged in” as guest). * **02** — Login to the cardholder account at the 3DS Requestor system using 3DS Requestor’s own credentials. * **03** — Login to the cardholder account at the 3DS Requestor system using federated ID. * **04** — Login to the cardholder account at the 3DS Requestor system using issuer credentials. * **05** — Login to the cardholder account at the 3DS Requestor system using third-party authentication. * **06** — Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator.</value>
        public enum ThreeDSReqAuthMethodEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            _05 = 5,

            /// <summary>
            /// Enum _06 for value: 06
            /// </summary>
            _06 = 6
        }

        /// <summary>
        /// Returns a <see cref="ThreeDSReqAuthMethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ThreeDSReqAuthMethodEnum ThreeDSReqAuthMethodEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ThreeDSReqAuthMethodEnum._01;

            if (value.Equals("02"))
                return ThreeDSReqAuthMethodEnum._02;

            if (value.Equals("03"))
                return ThreeDSReqAuthMethodEnum._03;

            if (value.Equals("04"))
                return ThreeDSReqAuthMethodEnum._04;

            if (value.Equals("05"))
                return ThreeDSReqAuthMethodEnum._05;

            if (value.Equals("06"))
                return ThreeDSReqAuthMethodEnum._06;

            throw new NotImplementedException($"Could not convert value to type ThreeDSReqAuthMethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ThreeDSReqAuthMethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThreeDSReqAuthMethodEnum? ThreeDSReqAuthMethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ThreeDSReqAuthMethodEnum._01;

            if (value.Equals("02"))
                return ThreeDSReqAuthMethodEnum._02;

            if (value.Equals("03"))
                return ThreeDSReqAuthMethodEnum._03;

            if (value.Equals("04"))
                return ThreeDSReqAuthMethodEnum._04;

            if (value.Equals("05"))
                return ThreeDSReqAuthMethodEnum._05;

            if (value.Equals("06"))
                return ThreeDSReqAuthMethodEnum._06;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ThreeDSReqAuthMethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ThreeDSReqAuthMethodEnumToJsonValue(ThreeDSReqAuthMethodEnum? value)
        {
            if (value == ThreeDSReqAuthMethodEnum._01)
                return "01";

            if (value == ThreeDSReqAuthMethodEnum._02)
                return "02";

            if (value == ThreeDSReqAuthMethodEnum._03)
                return "03";

            if (value == ThreeDSReqAuthMethodEnum._04)
                return "04";

            if (value == ThreeDSReqAuthMethodEnum._05)
                return "05";

            if (value == ThreeDSReqAuthMethodEnum._06)
                return "06";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ThreeDSReqAuthMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDSReqAuthMethodEnum?> ThreeDSReqAuthMethodOption { get; private set; }

        /// <summary>
        /// Mechanism used by the Cardholder to authenticate to the 3DS Requestor. Allowed values: * **01** — No 3DS Requestor authentication occurred (for example, cardholder “logged in” as guest). * **02** — Login to the cardholder account at the 3DS Requestor system using 3DS Requestor’s own credentials. * **03** — Login to the cardholder account at the 3DS Requestor system using federated ID. * **04** — Login to the cardholder account at the 3DS Requestor system using issuer credentials. * **05** — Login to the cardholder account at the 3DS Requestor system using third-party authentication. * **06** — Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator.
        /// </summary>
        /// <value>Mechanism used by the Cardholder to authenticate to the 3DS Requestor. Allowed values: * **01** — No 3DS Requestor authentication occurred (for example, cardholder “logged in” as guest). * **02** — Login to the cardholder account at the 3DS Requestor system using 3DS Requestor’s own credentials. * **03** — Login to the cardholder account at the 3DS Requestor system using federated ID. * **04** — Login to the cardholder account at the 3DS Requestor system using issuer credentials. * **05** — Login to the cardholder account at the 3DS Requestor system using third-party authentication. * **06** — Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator.</value>
        [JsonPropertyName("threeDSReqAuthMethod")]
        public ThreeDSReqAuthMethodEnum? ThreeDSReqAuthMethod { get { return this.ThreeDSReqAuthMethodOption; } set { this.ThreeDSReqAuthMethodOption = new Option<ThreeDSReqAuthMethodEnum?>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSReqAuthData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSReqAuthDataOption { get; private set; }

        /// <summary>
        /// Data that documents and supports a specific authentication process. Maximum length: 2048 bytes.
        /// </summary>
        /// <value>Data that documents and supports a specific authentication process. Maximum length: 2048 bytes.</value>
        [JsonPropertyName("threeDSReqAuthData")]
        public string ThreeDSReqAuthData { get { return this.ThreeDSReqAuthDataOption; } set { this.ThreeDSReqAuthDataOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSReqAuthTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSReqAuthTimestampOption { get; private set; }

        /// <summary>
        /// Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM
        /// </summary>
        /// <value>Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM</value>
        [JsonPropertyName("threeDSReqAuthTimestamp")]
        public string ThreeDSReqAuthTimestamp { get { return this.ThreeDSReqAuthTimestampOption; } set { this.ThreeDSReqAuthTimestampOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDSRequestorAuthenticationInfo {\n");
            sb.Append("  ThreeDSReqAuthData: ").Append(ThreeDSReqAuthData).Append("\n");
            sb.Append("  ThreeDSReqAuthMethod: ").Append(ThreeDSReqAuthMethod).Append("\n");
            sb.Append("  ThreeDSReqAuthTimestamp: ").Append(ThreeDSReqAuthTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ThreeDSReqAuthTimestamp (string) maxLength
            if (this.ThreeDSReqAuthTimestamp != null && this.ThreeDSReqAuthTimestamp.Length > 12)
            {
                yield return new ValidationResult("Invalid value for ThreeDSReqAuthTimestamp, length must be less than 12.", new [] { "ThreeDSReqAuthTimestamp" });
            }

            // ThreeDSReqAuthTimestamp (string) minLength
            if (this.ThreeDSReqAuthTimestamp != null && this.ThreeDSReqAuthTimestamp.Length < 12)
            {
                yield return new ValidationResult("Invalid value for ThreeDSReqAuthTimestamp, length must be greater than 12.", new [] { "ThreeDSReqAuthTimestamp" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ThreeDSRequestorAuthenticationInfo" />
    /// </summary>
    public class ThreeDSRequestorAuthenticationInfoJsonConverter : JsonConverter<ThreeDSRequestorAuthenticationInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="ThreeDSRequestorAuthenticationInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ThreeDSRequestorAuthenticationInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> threeDSReqAuthData = default;
            Option<ThreeDSRequestorAuthenticationInfo.ThreeDSReqAuthMethodEnum?> threeDSReqAuthMethod = default;
            Option<string> threeDSReqAuthTimestamp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "threeDSReqAuthData":
                            threeDSReqAuthData = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDSReqAuthMethod":
                            string threeDSReqAuthMethodRawValue = utf8JsonReader.GetString();
                            if (threeDSReqAuthMethodRawValue != null)
                                threeDSReqAuthMethod = new Option<ThreeDSRequestorAuthenticationInfo.ThreeDSReqAuthMethodEnum?>(ThreeDSRequestorAuthenticationInfo.ThreeDSReqAuthMethodEnumFromStringOrDefault(threeDSReqAuthMethodRawValue));
                            break;
                        case "threeDSReqAuthTimestamp":
                            threeDSReqAuthTimestamp = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (threeDSReqAuthData.IsSet && threeDSReqAuthData.Value == null)
                throw new ArgumentNullException(nameof(threeDSReqAuthData), "Property is not nullable for class ThreeDSRequestorAuthenticationInfo.");

            if (threeDSReqAuthMethod.IsSet && threeDSReqAuthMethod.Value == null)
                throw new ArgumentNullException(nameof(threeDSReqAuthMethod), "Property is not nullable for class ThreeDSRequestorAuthenticationInfo.");

            if (threeDSReqAuthTimestamp.IsSet && threeDSReqAuthTimestamp.Value == null)
                throw new ArgumentNullException(nameof(threeDSReqAuthTimestamp), "Property is not nullable for class ThreeDSRequestorAuthenticationInfo.");

            return new ThreeDSRequestorAuthenticationInfo(threeDSReqAuthData, threeDSReqAuthMethod, threeDSReqAuthTimestamp);
        }

        /// <summary>
        /// Serializes a <see cref="ThreeDSRequestorAuthenticationInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="threeDSRequestorAuthenticationInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ThreeDSRequestorAuthenticationInfo threeDSRequestorAuthenticationInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, threeDSRequestorAuthenticationInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ThreeDSRequestorAuthenticationInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="threeDSRequestorAuthenticationInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ThreeDSRequestorAuthenticationInfo threeDSRequestorAuthenticationInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (threeDSRequestorAuthenticationInfo.ThreeDSReqAuthDataOption.IsSet && threeDSRequestorAuthenticationInfo.ThreeDSReqAuthData == null)
                throw new ArgumentNullException(nameof(threeDSRequestorAuthenticationInfo.ThreeDSReqAuthData), "Property is required for class ThreeDSRequestorAuthenticationInfo.");

            if (threeDSRequestorAuthenticationInfo.ThreeDSReqAuthTimestampOption.IsSet && threeDSRequestorAuthenticationInfo.ThreeDSReqAuthTimestamp == null)
                throw new ArgumentNullException(nameof(threeDSRequestorAuthenticationInfo.ThreeDSReqAuthTimestamp), "Property is required for class ThreeDSRequestorAuthenticationInfo.");

            if (threeDSRequestorAuthenticationInfo.ThreeDSReqAuthDataOption.IsSet)
                writer.WriteString("threeDSReqAuthData", threeDSRequestorAuthenticationInfo.ThreeDSReqAuthData);

            var threeDSReqAuthMethodRawValue = ThreeDSRequestorAuthenticationInfo.ThreeDSReqAuthMethodEnumToJsonValue(threeDSRequestorAuthenticationInfo.ThreeDSReqAuthMethodOption.Value.Value);
            writer.WriteString("threeDSReqAuthMethod", threeDSReqAuthMethodRawValue);
            if (threeDSRequestorAuthenticationInfo.ThreeDSReqAuthTimestampOption.IsSet)
                writer.WriteString("threeDSReqAuthTimestamp", threeDSRequestorAuthenticationInfo.ThreeDSReqAuthTimestamp);
        }
    }
}
