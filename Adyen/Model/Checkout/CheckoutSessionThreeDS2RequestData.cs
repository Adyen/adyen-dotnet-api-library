// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// CheckoutSessionThreeDS2RequestData
    /// </summary>
    public partial class CheckoutSessionThreeDS2RequestData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutSessionThreeDS2RequestData" /> class.
        /// </summary>
        /// <param name="homePhone">homePhone</param>
        /// <param name="mobilePhone">mobilePhone</param>
        /// <param name="threeDSRequestorChallengeInd">Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only</param>
        /// <param name="workPhone">workPhone</param>
        [JsonConstructor]
        public CheckoutSessionThreeDS2RequestData(Option<Phone> homePhone = default, Option<Phone> mobilePhone = default, Option<ThreeDSRequestorChallengeIndEnum?> threeDSRequestorChallengeInd = default, Option<Phone> workPhone = default)
        {
            HomePhoneOption = homePhone;
            MobilePhoneOption = mobilePhone;
            ThreeDSRequestorChallengeIndOption = threeDSRequestorChallengeInd;
            WorkPhoneOption = workPhone;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only
        /// </summary>
        /// <value>Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only</value>
        public enum ThreeDSRequestorChallengeIndEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            _05 = 5,

            /// <summary>
            /// Enum _06 for value: 06
            /// </summary>
            _06 = 6
        }

        /// <summary>
        /// Returns a <see cref="ThreeDSRequestorChallengeIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ThreeDSRequestorChallengeIndEnum ThreeDSRequestorChallengeIndEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ThreeDSRequestorChallengeIndEnum._01;

            if (value.Equals("02"))
                return ThreeDSRequestorChallengeIndEnum._02;

            if (value.Equals("03"))
                return ThreeDSRequestorChallengeIndEnum._03;

            if (value.Equals("04"))
                return ThreeDSRequestorChallengeIndEnum._04;

            if (value.Equals("05"))
                return ThreeDSRequestorChallengeIndEnum._05;

            if (value.Equals("06"))
                return ThreeDSRequestorChallengeIndEnum._06;

            throw new NotImplementedException($"Could not convert value to type ThreeDSRequestorChallengeIndEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ThreeDSRequestorChallengeIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThreeDSRequestorChallengeIndEnum? ThreeDSRequestorChallengeIndEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ThreeDSRequestorChallengeIndEnum._01;

            if (value.Equals("02"))
                return ThreeDSRequestorChallengeIndEnum._02;

            if (value.Equals("03"))
                return ThreeDSRequestorChallengeIndEnum._03;

            if (value.Equals("04"))
                return ThreeDSRequestorChallengeIndEnum._04;

            if (value.Equals("05"))
                return ThreeDSRequestorChallengeIndEnum._05;

            if (value.Equals("06"))
                return ThreeDSRequestorChallengeIndEnum._06;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ThreeDSRequestorChallengeIndEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ThreeDSRequestorChallengeIndEnumToJsonValue(ThreeDSRequestorChallengeIndEnum? value)
        {
            if (value == ThreeDSRequestorChallengeIndEnum._01)
                return "01";

            if (value == ThreeDSRequestorChallengeIndEnum._02)
                return "02";

            if (value == ThreeDSRequestorChallengeIndEnum._03)
                return "03";

            if (value == ThreeDSRequestorChallengeIndEnum._04)
                return "04";

            if (value == ThreeDSRequestorChallengeIndEnum._05)
                return "05";

            if (value == ThreeDSRequestorChallengeIndEnum._06)
                return "06";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ThreeDSRequestorChallengeInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDSRequestorChallengeIndEnum?> ThreeDSRequestorChallengeIndOption { get; private set; }

        /// <summary>
        /// Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only
        /// </summary>
        /// <value>Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only</value>
        [JsonPropertyName("threeDSRequestorChallengeInd")]
        public ThreeDSRequestorChallengeIndEnum? ThreeDSRequestorChallengeInd { get { return this.ThreeDSRequestorChallengeIndOption; } set { this.ThreeDSRequestorChallengeIndOption = new Option<ThreeDSRequestorChallengeIndEnum?>(value); } }

        /// <summary>
        /// Used to track the state of HomePhone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Phone> HomePhoneOption { get; private set; }

        /// <summary>
        /// Gets or Sets HomePhone
        /// </summary>
        [JsonPropertyName("homePhone")]
        public Phone HomePhone { get { return this.HomePhoneOption; } set { this.HomePhoneOption = new Option<Phone>(value); } }

        /// <summary>
        /// Used to track the state of MobilePhone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Phone> MobilePhoneOption { get; private set; }

        /// <summary>
        /// Gets or Sets MobilePhone
        /// </summary>
        [JsonPropertyName("mobilePhone")]
        public Phone MobilePhone { get { return this.MobilePhoneOption; } set { this.MobilePhoneOption = new Option<Phone>(value); } }

        /// <summary>
        /// Used to track the state of WorkPhone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Phone> WorkPhoneOption { get; private set; }

        /// <summary>
        /// Gets or Sets WorkPhone
        /// </summary>
        [JsonPropertyName("workPhone")]
        public Phone WorkPhone { get { return this.WorkPhoneOption; } set { this.WorkPhoneOption = new Option<Phone>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutSessionThreeDS2RequestData {\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  ThreeDSRequestorChallengeInd: ").Append(ThreeDSRequestorChallengeInd).Append("\n");
            sb.Append("  WorkPhone: ").Append(WorkPhone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheckoutSessionThreeDS2RequestData" />
    /// </summary>
    public class CheckoutSessionThreeDS2RequestDataJsonConverter : JsonConverter<CheckoutSessionThreeDS2RequestData>
    {
        /// <summary>
        /// Deserializes json to <see cref="CheckoutSessionThreeDS2RequestData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CheckoutSessionThreeDS2RequestData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Phone> homePhone = default;
            Option<Phone> mobilePhone = default;
            Option<CheckoutSessionThreeDS2RequestData.ThreeDSRequestorChallengeIndEnum?> threeDSRequestorChallengeInd = default;
            Option<Phone> workPhone = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "homePhone":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homePhone = new Option<Phone>(JsonSerializer.Deserialize<Phone>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mobilePhone":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mobilePhone = new Option<Phone>(JsonSerializer.Deserialize<Phone>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "threeDSRequestorChallengeInd":
                            string threeDSRequestorChallengeIndRawValue = utf8JsonReader.GetString();
                            if (threeDSRequestorChallengeIndRawValue != null)
                                threeDSRequestorChallengeInd = new Option<CheckoutSessionThreeDS2RequestData.ThreeDSRequestorChallengeIndEnum?>(CheckoutSessionThreeDS2RequestData.ThreeDSRequestorChallengeIndEnumFromStringOrDefault(threeDSRequestorChallengeIndRawValue));
                            break;
                        case "workPhone":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                workPhone = new Option<Phone>(JsonSerializer.Deserialize<Phone>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (homePhone.IsSet && homePhone.Value == null)
                throw new ArgumentNullException(nameof(homePhone), "Property is not nullable for class CheckoutSessionThreeDS2RequestData.");

            if (mobilePhone.IsSet && mobilePhone.Value == null)
                throw new ArgumentNullException(nameof(mobilePhone), "Property is not nullable for class CheckoutSessionThreeDS2RequestData.");

            if (threeDSRequestorChallengeInd.IsSet && threeDSRequestorChallengeInd.Value == null)
                throw new ArgumentNullException(nameof(threeDSRequestorChallengeInd), "Property is not nullable for class CheckoutSessionThreeDS2RequestData.");

            if (workPhone.IsSet && workPhone.Value == null)
                throw new ArgumentNullException(nameof(workPhone), "Property is not nullable for class CheckoutSessionThreeDS2RequestData.");

            return new CheckoutSessionThreeDS2RequestData(homePhone, mobilePhone, threeDSRequestorChallengeInd, workPhone);
        }

        /// <summary>
        /// Serializes a <see cref="CheckoutSessionThreeDS2RequestData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkoutSessionThreeDS2RequestData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CheckoutSessionThreeDS2RequestData checkoutSessionThreeDS2RequestData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, checkoutSessionThreeDS2RequestData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CheckoutSessionThreeDS2RequestData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkoutSessionThreeDS2RequestData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CheckoutSessionThreeDS2RequestData checkoutSessionThreeDS2RequestData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (checkoutSessionThreeDS2RequestData.HomePhoneOption.IsSet && checkoutSessionThreeDS2RequestData.HomePhone == null)
                throw new ArgumentNullException(nameof(checkoutSessionThreeDS2RequestData.HomePhone), "Property is required for class CheckoutSessionThreeDS2RequestData.");

            if (checkoutSessionThreeDS2RequestData.MobilePhoneOption.IsSet && checkoutSessionThreeDS2RequestData.MobilePhone == null)
                throw new ArgumentNullException(nameof(checkoutSessionThreeDS2RequestData.MobilePhone), "Property is required for class CheckoutSessionThreeDS2RequestData.");

            if (checkoutSessionThreeDS2RequestData.WorkPhoneOption.IsSet && checkoutSessionThreeDS2RequestData.WorkPhone == null)
                throw new ArgumentNullException(nameof(checkoutSessionThreeDS2RequestData.WorkPhone), "Property is required for class CheckoutSessionThreeDS2RequestData.");

            if (checkoutSessionThreeDS2RequestData.HomePhoneOption.IsSet)
            {
                writer.WritePropertyName("homePhone");
                JsonSerializer.Serialize(writer, checkoutSessionThreeDS2RequestData.HomePhone, jsonSerializerOptions);
            }
            if (checkoutSessionThreeDS2RequestData.MobilePhoneOption.IsSet)
            {
                writer.WritePropertyName("mobilePhone");
                JsonSerializer.Serialize(writer, checkoutSessionThreeDS2RequestData.MobilePhone, jsonSerializerOptions);
            }
            var threeDSRequestorChallengeIndRawValue = CheckoutSessionThreeDS2RequestData.ThreeDSRequestorChallengeIndEnumToJsonValue(checkoutSessionThreeDS2RequestData.ThreeDSRequestorChallengeIndOption.Value.Value);
            writer.WriteString("threeDSRequestorChallengeInd", threeDSRequestorChallengeIndRawValue);
            if (checkoutSessionThreeDS2RequestData.WorkPhoneOption.IsSet)
            {
                writer.WritePropertyName("workPhone");
                JsonSerializer.Serialize(writer, checkoutSessionThreeDS2RequestData.WorkPhone, jsonSerializerOptions);
            }
        }
    }
}
