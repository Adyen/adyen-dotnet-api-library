// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// CheckoutNativeRedirectAction
    /// </summary>
    public partial class CheckoutNativeRedirectAction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutNativeRedirectAction" /> class.
        /// </summary>
        /// <param name="type">**nativeRedirect**</param>
        /// <param name="data">When the redirect URL must be accessed via POST, use this data to post to the redirect URL.</param>
        /// <param name="method">Specifies the HTTP method, for example GET or POST.</param>
        /// <param name="nativeRedirectData">Native SDK&#39;s redirect data containing the direct issuer link and state data that must be submitted to the /v1/nativeRedirect/redirectResult.</param>
        /// <param name="paymentMethodType">Specifies the payment method.</param>
        /// <param name="url">Specifies the URL to redirect to.</param>
        [JsonConstructor]
        public CheckoutNativeRedirectAction(TypeEnum type, Option<Dictionary<string, string>> data = default, Option<string> method = default, Option<string> nativeRedirectData = default, Option<string> paymentMethodType = default, Option<string> url = default)
        {
            Type = type;
            DataOption = data;
            MethodOption = method;
            NativeRedirectDataOption = nativeRedirectData;
            PaymentMethodTypeOption = paymentMethodType;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// **nativeRedirect**
        /// </summary>
        /// <value>**nativeRedirect**</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum NativeRedirect for value: nativeRedirect
            /// </summary>
            NativeRedirect = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("nativeRedirect"))
                return TypeEnum.NativeRedirect;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("nativeRedirect"))
                return TypeEnum.NativeRedirect;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.NativeRedirect)
                return "nativeRedirect";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// **nativeRedirect**
        /// </summary>
        /// <value>**nativeRedirect**</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> DataOption { get; private set; }

        /// <summary>
        /// When the redirect URL must be accessed via POST, use this data to post to the redirect URL.
        /// </summary>
        /// <value>When the redirect URL must be accessed via POST, use this data to post to the redirect URL.</value>
        [JsonPropertyName("data")]
        public Dictionary<string, string> Data { get { return this.DataOption; } set { this.DataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of Method
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MethodOption { get; private set; }

        /// <summary>
        /// Specifies the HTTP method, for example GET or POST.
        /// </summary>
        /// <value>Specifies the HTTP method, for example GET or POST.</value>
        [JsonPropertyName("method")]
        public string Method { get { return this.MethodOption; } set { this.MethodOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NativeRedirectData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NativeRedirectDataOption { get; private set; }

        /// <summary>
        /// Native SDK&#39;s redirect data containing the direct issuer link and state data that must be submitted to the /v1/nativeRedirect/redirectResult.
        /// </summary>
        /// <value>Native SDK&#39;s redirect data containing the direct issuer link and state data that must be submitted to the /v1/nativeRedirect/redirectResult.</value>
        [JsonPropertyName("nativeRedirectData")]
        public string NativeRedirectData { get { return this.NativeRedirectDataOption; } set { this.NativeRedirectDataOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethodType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentMethodTypeOption { get; private set; }

        /// <summary>
        /// Specifies the payment method.
        /// </summary>
        /// <value>Specifies the payment method.</value>
        [JsonPropertyName("paymentMethodType")]
        public string PaymentMethodType { get { return this.PaymentMethodTypeOption; } set { this.PaymentMethodTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UrlOption { get; private set; }

        /// <summary>
        /// Specifies the URL to redirect to.
        /// </summary>
        /// <value>Specifies the URL to redirect to.</value>
        [JsonPropertyName("url")]
        public string Url { get { return this.UrlOption; } set { this.UrlOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutNativeRedirectAction {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  NativeRedirectData: ").Append(NativeRedirectData).Append("\n");
            sb.Append("  PaymentMethodType: ").Append(PaymentMethodType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheckoutNativeRedirectAction" />
    /// </summary>
    public class CheckoutNativeRedirectActionJsonConverter : JsonConverter<CheckoutNativeRedirectAction>
    {
        /// <summary>
        /// Deserializes json to <see cref="CheckoutNativeRedirectAction" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CheckoutNativeRedirectAction Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CheckoutNativeRedirectAction.TypeEnum?> type = default;
            Option<Dictionary<string, string>> data = default;
            Option<string> method = default;
            Option<string> nativeRedirectData = default;
            Option<string> paymentMethodType = default;
            Option<string> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CheckoutNativeRedirectAction.TypeEnum?>(CheckoutNativeRedirectAction.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "data":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                data = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "method":
                            method = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "nativeRedirectData":
                            nativeRedirectData = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentMethodType":
                            paymentMethodType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class CheckoutNativeRedirectAction.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CheckoutNativeRedirectAction.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class CheckoutNativeRedirectAction.");

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class CheckoutNativeRedirectAction.");

            if (nativeRedirectData.IsSet && nativeRedirectData.Value == null)
                throw new ArgumentNullException(nameof(nativeRedirectData), "Property is not nullable for class CheckoutNativeRedirectAction.");

            if (paymentMethodType.IsSet && paymentMethodType.Value == null)
                throw new ArgumentNullException(nameof(paymentMethodType), "Property is not nullable for class CheckoutNativeRedirectAction.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class CheckoutNativeRedirectAction.");

            return new CheckoutNativeRedirectAction(type.Value.Value, data, method, nativeRedirectData, paymentMethodType, url);
        }

        /// <summary>
        /// Serializes a <see cref="CheckoutNativeRedirectAction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkoutNativeRedirectAction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CheckoutNativeRedirectAction checkoutNativeRedirectAction, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, checkoutNativeRedirectAction, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CheckoutNativeRedirectAction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkoutNativeRedirectAction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CheckoutNativeRedirectAction checkoutNativeRedirectAction, JsonSerializerOptions jsonSerializerOptions)
        {
            if (checkoutNativeRedirectAction.DataOption.IsSet && checkoutNativeRedirectAction.Data == null)
                throw new ArgumentNullException(nameof(checkoutNativeRedirectAction.Data), "Property is required for class CheckoutNativeRedirectAction.");

            if (checkoutNativeRedirectAction.MethodOption.IsSet && checkoutNativeRedirectAction.Method == null)
                throw new ArgumentNullException(nameof(checkoutNativeRedirectAction.Method), "Property is required for class CheckoutNativeRedirectAction.");

            if (checkoutNativeRedirectAction.NativeRedirectDataOption.IsSet && checkoutNativeRedirectAction.NativeRedirectData == null)
                throw new ArgumentNullException(nameof(checkoutNativeRedirectAction.NativeRedirectData), "Property is required for class CheckoutNativeRedirectAction.");

            if (checkoutNativeRedirectAction.PaymentMethodTypeOption.IsSet && checkoutNativeRedirectAction.PaymentMethodType == null)
                throw new ArgumentNullException(nameof(checkoutNativeRedirectAction.PaymentMethodType), "Property is required for class CheckoutNativeRedirectAction.");

            if (checkoutNativeRedirectAction.UrlOption.IsSet && checkoutNativeRedirectAction.Url == null)
                throw new ArgumentNullException(nameof(checkoutNativeRedirectAction.Url), "Property is required for class CheckoutNativeRedirectAction.");

            var typeRawValue = CheckoutNativeRedirectAction.TypeEnumToJsonValue(checkoutNativeRedirectAction.Type);
            writer.WriteString("type", typeRawValue);
            if (checkoutNativeRedirectAction.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, checkoutNativeRedirectAction.Data, jsonSerializerOptions);
            }
            if (checkoutNativeRedirectAction.MethodOption.IsSet)
                writer.WriteString("method", checkoutNativeRedirectAction.Method);

            if (checkoutNativeRedirectAction.NativeRedirectDataOption.IsSet)
                writer.WriteString("nativeRedirectData", checkoutNativeRedirectAction.NativeRedirectData);

            if (checkoutNativeRedirectAction.PaymentMethodTypeOption.IsSet)
                writer.WriteString("paymentMethodType", checkoutNativeRedirectAction.PaymentMethodType);

            if (checkoutNativeRedirectAction.UrlOption.IsSet)
                writer.WriteString("url", checkoutNativeRedirectAction.Url);
        }
    }
}
