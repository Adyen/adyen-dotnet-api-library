// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataAirline
    /// </summary>
    public partial class AdditionalDataAirline : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataAirline" /> class.
        /// </summary>
        /// <param name="airlinePassengerName">The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  * Must not be all zeros.</param>
        /// <param name="airlineAgencyInvoiceNumber">The reference number for the invoice, issued by the agency. * Encoding: ASCII * minLength: 1 character * maxLength: 6 characters</param>
        /// <param name="airlineAgencyPlanName">The two-letter agency plan identifier. * Encoding: ASCII * minLength: 2 characters * maxLength: 2 characters</param>
        /// <param name="airlineAirlineCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.</param>
        /// <param name="airlineAirlineDesignatorCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces * Must not be all zeros.</param>
        /// <param name="airlineBoardingFee">The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 18 characters</param>
        /// <param name="airlineComputerizedReservationSystem">The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters</param>
        /// <param name="airlineCustomerReferenceNumber">The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not be all spaces</param>
        /// <param name="airlineDocumentType">A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters</param>
        /// <param name="airlineFlightDate">The flight departure date. Local time &#x60;(HH:mm)&#x60; is optional. * Date format: &#x60;yyyy-MM-dd&#x60; * Date and time format: &#x60;yyyy-MM-dd HH:mm&#x60; * minLength: 10 characters * maxLength: 16 characters</param>
        /// <param name="airlineIssueDate">The date that the ticket was issued to the passenger. * minLength: 6 characters * maxLength: 6 characters * Date format: YYMMDD</param>
        /// <param name="airlineLegCarrierCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces * Must not be all zeros.</param>
        /// <param name="airlineLegClassOfTravel">A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces * Must not be all zeros.</param>
        /// <param name="airlineLegDateOfTravel">  Date and time of travel in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format &#x60;yyyy-MM-dd HH:mm&#x60;. * Encoding: ASCII * minLength: 16 characters * maxLength: 16 characters</param>
        /// <param name="airlineLegDepartAirport">The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.</param>
        /// <param name="airlineLegDepartTax">The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 * Must not be all zeros.</param>
        /// <param name="airlineLegDestinationCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.</param>
        /// <param name="airlineLegFareBaseCode">The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces * Must not be all zeros.</param>
        /// <param name="airlineLegFlightNumber">The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces * Must not be all zeros.</param>
        /// <param name="airlineLegStopOverCode">A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character</param>
        /// <param name="airlinePassengerDateOfBirth">The passenger&#39;s date of birth.  Date format: &#x60;yyyy-MM-dd&#x60; * minLength: 10 * maxLength: 10</param>
        /// <param name="airlinePassengerFirstName">The passenger&#39;s first name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII</param>
        /// <param name="airlinePassengerLastName">The passenger&#39;s last name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII</param>
        /// <param name="airlinePassengerPhoneNumber">The passenger&#39;s phone number, including country code. This is an alphanumeric field that can include the &#39;+&#39; and &#39;-&#39; signs. * Encoding: ASCII * minLength: 3 characters * maxLength: 30 characters</param>
        /// <param name="airlinePassengerTravellerType">The IATA passenger type code (PTC). * Encoding: ASCII * minLength: 3 characters * maxLength: 6 characters</param>
        /// <param name="airlineTicketIssueAddress">The address of the organization that issued the ticket. * minLength: 0 characters * maxLength: 16 characters</param>
        /// <param name="airlineTicketNumber">The ticket&#39;s unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces * Must not be all zeros.</param>
        /// <param name="airlineTravelAgencyCode">The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces * Must not be all zeros.</param>
        /// <param name="airlineTravelAgencyName">The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces * Must not be all zeros.</param>
        [JsonConstructor]
        public AdditionalDataAirline(string airlinePassengerName, Option<string> airlineAgencyInvoiceNumber = default, Option<string> airlineAgencyPlanName = default, Option<string> airlineAirlineCode = default, Option<string> airlineAirlineDesignatorCode = default, Option<string> airlineBoardingFee = default, Option<string> airlineComputerizedReservationSystem = default, Option<string> airlineCustomerReferenceNumber = default, Option<string> airlineDocumentType = default, Option<string> airlineFlightDate = default, Option<string> airlineIssueDate = default, Option<string> airlineLegCarrierCode = default, Option<string> airlineLegClassOfTravel = default, Option<string> airlineLegDateOfTravel = default, Option<string> airlineLegDepartAirport = default, Option<string> airlineLegDepartTax = default, Option<string> airlineLegDestinationCode = default, Option<string> airlineLegFareBaseCode = default, Option<string> airlineLegFlightNumber = default, Option<string> airlineLegStopOverCode = default, Option<string> airlinePassengerDateOfBirth = default, Option<string> airlinePassengerFirstName = default, Option<string> airlinePassengerLastName = default, Option<string> airlinePassengerPhoneNumber = default, Option<string> airlinePassengerTravellerType = default, Option<string> airlineTicketIssueAddress = default, Option<string> airlineTicketNumber = default, Option<string> airlineTravelAgencyCode = default, Option<string> airlineTravelAgencyName = default)
        {
            AirlinePassengerName = airlinePassengerName;
            AirlineAgencyInvoiceNumberOption = airlineAgencyInvoiceNumber;
            AirlineAgencyPlanNameOption = airlineAgencyPlanName;
            AirlineAirlineCodeOption = airlineAirlineCode;
            AirlineAirlineDesignatorCodeOption = airlineAirlineDesignatorCode;
            AirlineBoardingFeeOption = airlineBoardingFee;
            AirlineComputerizedReservationSystemOption = airlineComputerizedReservationSystem;
            AirlineCustomerReferenceNumberOption = airlineCustomerReferenceNumber;
            AirlineDocumentTypeOption = airlineDocumentType;
            AirlineFlightDateOption = airlineFlightDate;
            AirlineIssueDateOption = airlineIssueDate;
            AirlineLegCarrierCodeOption = airlineLegCarrierCode;
            AirlineLegClassOfTravelOption = airlineLegClassOfTravel;
            AirlineLegDateOfTravelOption = airlineLegDateOfTravel;
            AirlineLegDepartAirportOption = airlineLegDepartAirport;
            AirlineLegDepartTaxOption = airlineLegDepartTax;
            AirlineLegDestinationCodeOption = airlineLegDestinationCode;
            AirlineLegFareBaseCodeOption = airlineLegFareBaseCode;
            AirlineLegFlightNumberOption = airlineLegFlightNumber;
            AirlineLegStopOverCodeOption = airlineLegStopOverCode;
            AirlinePassengerDateOfBirthOption = airlinePassengerDateOfBirth;
            AirlinePassengerFirstNameOption = airlinePassengerFirstName;
            AirlinePassengerLastNameOption = airlinePassengerLastName;
            AirlinePassengerPhoneNumberOption = airlinePassengerPhoneNumber;
            AirlinePassengerTravellerTypeOption = airlinePassengerTravellerType;
            AirlineTicketIssueAddressOption = airlineTicketIssueAddress;
            AirlineTicketNumberOption = airlineTicketNumber;
            AirlineTravelAgencyCodeOption = airlineTravelAgencyCode;
            AirlineTravelAgencyNameOption = airlineTravelAgencyName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  * Must not be all zeros.
        /// </summary>
        /// <value>The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  * Must not be all zeros.</value>
        [JsonPropertyName("airline.passenger_name")]
        public string AirlinePassengerName { get; set; }

        /// <summary>
        /// Used to track the state of AirlineAgencyInvoiceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineAgencyInvoiceNumberOption { get; private set; }

        /// <summary>
        /// The reference number for the invoice, issued by the agency. * Encoding: ASCII * minLength: 1 character * maxLength: 6 characters
        /// </summary>
        /// <value>The reference number for the invoice, issued by the agency. * Encoding: ASCII * minLength: 1 character * maxLength: 6 characters</value>
        [JsonPropertyName("airline.agency_invoice_number")]
        public string AirlineAgencyInvoiceNumber { get { return this.AirlineAgencyInvoiceNumberOption; } set { this.AirlineAgencyInvoiceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineAgencyPlanName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineAgencyPlanNameOption { get; private set; }

        /// <summary>
        /// The two-letter agency plan identifier. * Encoding: ASCII * minLength: 2 characters * maxLength: 2 characters
        /// </summary>
        /// <value>The two-letter agency plan identifier. * Encoding: ASCII * minLength: 2 characters * maxLength: 2 characters</value>
        [JsonPropertyName("airline.agency_plan_name")]
        public string AirlineAgencyPlanName { get { return this.AirlineAgencyPlanNameOption; } set { this.AirlineAgencyPlanNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineAirlineCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineAirlineCodeOption { get; private set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.</value>
        [JsonPropertyName("airline.airline_code")]
        public string AirlineAirlineCode { get { return this.AirlineAirlineCodeOption; } set { this.AirlineAirlineCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineAirlineDesignatorCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineAirlineDesignatorCodeOption { get; private set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces * Must not be all zeros.</value>
        [JsonPropertyName("airline.airline_designator_code")]
        public string AirlineAirlineDesignatorCode { get { return this.AirlineAirlineDesignatorCodeOption; } set { this.AirlineAirlineDesignatorCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineBoardingFee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineBoardingFeeOption { get; private set; }

        /// <summary>
        /// The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 18 characters
        /// </summary>
        /// <value>The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 18 characters</value>
        [JsonPropertyName("airline.boarding_fee")]
        public string AirlineBoardingFee { get { return this.AirlineBoardingFeeOption; } set { this.AirlineBoardingFeeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineComputerizedReservationSystem
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineComputerizedReservationSystemOption { get; private set; }

        /// <summary>
        /// The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters
        /// </summary>
        /// <value>The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters</value>
        [JsonPropertyName("airline.computerized_reservation_system")]
        public string AirlineComputerizedReservationSystem { get { return this.AirlineComputerizedReservationSystemOption; } set { this.AirlineComputerizedReservationSystemOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineCustomerReferenceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineCustomerReferenceNumberOption { get; private set; }

        /// <summary>
        /// The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not be all spaces
        /// </summary>
        /// <value>The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not be all spaces</value>
        [JsonPropertyName("airline.customer_reference_number")]
        public string AirlineCustomerReferenceNumber { get { return this.AirlineCustomerReferenceNumberOption; } set { this.AirlineCustomerReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineDocumentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineDocumentTypeOption { get; private set; }

        /// <summary>
        /// A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters
        /// </summary>
        /// <value>A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters</value>
        [JsonPropertyName("airline.document_type")]
        public string AirlineDocumentType { get { return this.AirlineDocumentTypeOption; } set { this.AirlineDocumentTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineFlightDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineFlightDateOption { get; private set; }

        /// <summary>
        /// The flight departure date. Local time &#x60;(HH:mm)&#x60; is optional. * Date format: &#x60;yyyy-MM-dd&#x60; * Date and time format: &#x60;yyyy-MM-dd HH:mm&#x60; * minLength: 10 characters * maxLength: 16 characters
        /// </summary>
        /// <value>The flight departure date. Local time &#x60;(HH:mm)&#x60; is optional. * Date format: &#x60;yyyy-MM-dd&#x60; * Date and time format: &#x60;yyyy-MM-dd HH:mm&#x60; * minLength: 10 characters * maxLength: 16 characters</value>
        [JsonPropertyName("airline.flight_date")]
        public string AirlineFlightDate { get { return this.AirlineFlightDateOption; } set { this.AirlineFlightDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineIssueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineIssueDateOption { get; private set; }

        /// <summary>
        /// The date that the ticket was issued to the passenger. * minLength: 6 characters * maxLength: 6 characters * Date format: YYMMDD
        /// </summary>
        /// <value>The date that the ticket was issued to the passenger. * minLength: 6 characters * maxLength: 6 characters * Date format: YYMMDD</value>
        [JsonPropertyName("airline.issue_date")]
        public string AirlineIssueDate { get { return this.AirlineIssueDateOption; } set { this.AirlineIssueDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineLegCarrierCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineLegCarrierCodeOption { get; private set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces * Must not be all zeros.</value>
        [JsonPropertyName("airline.leg.carrier_code")]
        public string AirlineLegCarrierCode { get { return this.AirlineLegCarrierCodeOption; } set { this.AirlineLegCarrierCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineLegClassOfTravel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineLegClassOfTravelOption { get; private set; }

        /// <summary>
        /// A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces * Must not be all zeros.
        /// </summary>
        /// <value>A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces * Must not be all zeros.</value>
        [JsonPropertyName("airline.leg.class_of_travel")]
        public string AirlineLegClassOfTravel { get { return this.AirlineLegClassOfTravelOption; } set { this.AirlineLegClassOfTravelOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineLegDateOfTravel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineLegDateOfTravelOption { get; private set; }

        /// <summary>
        ///   Date and time of travel in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format &#x60;yyyy-MM-dd HH:mm&#x60;. * Encoding: ASCII * minLength: 16 characters * maxLength: 16 characters
        /// </summary>
        /// <value>  Date and time of travel in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format &#x60;yyyy-MM-dd HH:mm&#x60;. * Encoding: ASCII * minLength: 16 characters * maxLength: 16 characters</value>
        [JsonPropertyName("airline.leg.date_of_travel")]
        public string AirlineLegDateOfTravel { get { return this.AirlineLegDateOfTravelOption; } set { this.AirlineLegDateOfTravelOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineLegDepartAirport
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineLegDepartAirportOption { get; private set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.</value>
        [JsonPropertyName("airline.leg.depart_airport")]
        public string AirlineLegDepartAirport { get { return this.AirlineLegDepartAirportOption; } set { this.AirlineLegDepartAirportOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineLegDepartTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineLegDepartTaxOption { get; private set; }

        /// <summary>
        /// The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 * Must not be all zeros.
        /// </summary>
        /// <value>The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 * Must not be all zeros.</value>
        [JsonPropertyName("airline.leg.depart_tax")]
        public string AirlineLegDepartTax { get { return this.AirlineLegDepartTaxOption; } set { this.AirlineLegDepartTaxOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineLegDestinationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineLegDestinationCodeOption { get; private set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.</value>
        [JsonPropertyName("airline.leg.destination_code")]
        public string AirlineLegDestinationCode { get { return this.AirlineLegDestinationCodeOption; } set { this.AirlineLegDestinationCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineLegFareBaseCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineLegFareBaseCodeOption { get; private set; }

        /// <summary>
        /// The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces * Must not be all zeros.
        /// </summary>
        /// <value>The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces * Must not be all zeros.</value>
        [JsonPropertyName("airline.leg.fare_base_code")]
        public string AirlineLegFareBaseCode { get { return this.AirlineLegFareBaseCodeOption; } set { this.AirlineLegFareBaseCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineLegFlightNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineLegFlightNumberOption { get; private set; }

        /// <summary>
        /// The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces * Must not be all zeros.
        /// </summary>
        /// <value>The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces * Must not be all zeros.</value>
        [JsonPropertyName("airline.leg.flight_number")]
        public string AirlineLegFlightNumber { get { return this.AirlineLegFlightNumberOption; } set { this.AirlineLegFlightNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineLegStopOverCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineLegStopOverCodeOption { get; private set; }

        /// <summary>
        /// A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character
        /// </summary>
        /// <value>A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character</value>
        [JsonPropertyName("airline.leg.stop_over_code")]
        public string AirlineLegStopOverCode { get { return this.AirlineLegStopOverCodeOption; } set { this.AirlineLegStopOverCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlinePassengerDateOfBirth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlinePassengerDateOfBirthOption { get; private set; }

        /// <summary>
        /// The passenger&#39;s date of birth.  Date format: &#x60;yyyy-MM-dd&#x60; * minLength: 10 * maxLength: 10
        /// </summary>
        /// <value>The passenger&#39;s date of birth.  Date format: &#x60;yyyy-MM-dd&#x60; * minLength: 10 * maxLength: 10</value>
        [JsonPropertyName("airline.passenger.date_of_birth")]
        public string AirlinePassengerDateOfBirth { get { return this.AirlinePassengerDateOfBirthOption; } set { this.AirlinePassengerDateOfBirthOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlinePassengerFirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlinePassengerFirstNameOption { get; private set; }

        /// <summary>
        /// The passenger&#39;s first name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII
        /// </summary>
        /// <value>The passenger&#39;s first name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII</value>
        [JsonPropertyName("airline.passenger.first_name")]
        public string AirlinePassengerFirstName { get { return this.AirlinePassengerFirstNameOption; } set { this.AirlinePassengerFirstNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlinePassengerLastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlinePassengerLastNameOption { get; private set; }

        /// <summary>
        /// The passenger&#39;s last name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII
        /// </summary>
        /// <value>The passenger&#39;s last name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII</value>
        [JsonPropertyName("airline.passenger.last_name")]
        public string AirlinePassengerLastName { get { return this.AirlinePassengerLastNameOption; } set { this.AirlinePassengerLastNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlinePassengerPhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlinePassengerPhoneNumberOption { get; private set; }

        /// <summary>
        /// The passenger&#39;s phone number, including country code. This is an alphanumeric field that can include the &#39;+&#39; and &#39;-&#39; signs. * Encoding: ASCII * minLength: 3 characters * maxLength: 30 characters
        /// </summary>
        /// <value>The passenger&#39;s phone number, including country code. This is an alphanumeric field that can include the &#39;+&#39; and &#39;-&#39; signs. * Encoding: ASCII * minLength: 3 characters * maxLength: 30 characters</value>
        [JsonPropertyName("airline.passenger.phone_number")]
        public string AirlinePassengerPhoneNumber { get { return this.AirlinePassengerPhoneNumberOption; } set { this.AirlinePassengerPhoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlinePassengerTravellerType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlinePassengerTravellerTypeOption { get; private set; }

        /// <summary>
        /// The IATA passenger type code (PTC). * Encoding: ASCII * minLength: 3 characters * maxLength: 6 characters
        /// </summary>
        /// <value>The IATA passenger type code (PTC). * Encoding: ASCII * minLength: 3 characters * maxLength: 6 characters</value>
        [JsonPropertyName("airline.passenger.traveller_type")]
        public string AirlinePassengerTravellerType { get { return this.AirlinePassengerTravellerTypeOption; } set { this.AirlinePassengerTravellerTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineTicketIssueAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineTicketIssueAddressOption { get; private set; }

        /// <summary>
        /// The address of the organization that issued the ticket. * minLength: 0 characters * maxLength: 16 characters
        /// </summary>
        /// <value>The address of the organization that issued the ticket. * minLength: 0 characters * maxLength: 16 characters</value>
        [JsonPropertyName("airline.ticket_issue_address")]
        public string AirlineTicketIssueAddress { get { return this.AirlineTicketIssueAddressOption; } set { this.AirlineTicketIssueAddressOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineTicketNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineTicketNumberOption { get; private set; }

        /// <summary>
        /// The ticket&#39;s unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces * Must not be all zeros.
        /// </summary>
        /// <value>The ticket&#39;s unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces * Must not be all zeros.</value>
        [JsonPropertyName("airline.ticket_number")]
        public string AirlineTicketNumber { get { return this.AirlineTicketNumberOption; } set { this.AirlineTicketNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineTravelAgencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineTravelAgencyCodeOption { get; private set; }

        /// <summary>
        /// The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces * Must not be all zeros.
        /// </summary>
        /// <value>The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces * Must not be all zeros.</value>
        [JsonPropertyName("airline.travel_agency_code")]
        public string AirlineTravelAgencyCode { get { return this.AirlineTravelAgencyCodeOption; } set { this.AirlineTravelAgencyCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AirlineTravelAgencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AirlineTravelAgencyNameOption { get; private set; }

        /// <summary>
        /// The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces * Must not be all zeros.
        /// </summary>
        /// <value>The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces * Must not be all zeros.</value>
        [JsonPropertyName("airline.travel_agency_name")]
        public string AirlineTravelAgencyName { get { return this.AirlineTravelAgencyNameOption; } set { this.AirlineTravelAgencyNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataAirline {\n");
            sb.Append("  AirlinePassengerName: ").Append(AirlinePassengerName).Append("\n");
            sb.Append("  AirlineAgencyInvoiceNumber: ").Append(AirlineAgencyInvoiceNumber).Append("\n");
            sb.Append("  AirlineAgencyPlanName: ").Append(AirlineAgencyPlanName).Append("\n");
            sb.Append("  AirlineAirlineCode: ").Append(AirlineAirlineCode).Append("\n");
            sb.Append("  AirlineAirlineDesignatorCode: ").Append(AirlineAirlineDesignatorCode).Append("\n");
            sb.Append("  AirlineBoardingFee: ").Append(AirlineBoardingFee).Append("\n");
            sb.Append("  AirlineComputerizedReservationSystem: ").Append(AirlineComputerizedReservationSystem).Append("\n");
            sb.Append("  AirlineCustomerReferenceNumber: ").Append(AirlineCustomerReferenceNumber).Append("\n");
            sb.Append("  AirlineDocumentType: ").Append(AirlineDocumentType).Append("\n");
            sb.Append("  AirlineFlightDate: ").Append(AirlineFlightDate).Append("\n");
            sb.Append("  AirlineIssueDate: ").Append(AirlineIssueDate).Append("\n");
            sb.Append("  AirlineLegCarrierCode: ").Append(AirlineLegCarrierCode).Append("\n");
            sb.Append("  AirlineLegClassOfTravel: ").Append(AirlineLegClassOfTravel).Append("\n");
            sb.Append("  AirlineLegDateOfTravel: ").Append(AirlineLegDateOfTravel).Append("\n");
            sb.Append("  AirlineLegDepartAirport: ").Append(AirlineLegDepartAirport).Append("\n");
            sb.Append("  AirlineLegDepartTax: ").Append(AirlineLegDepartTax).Append("\n");
            sb.Append("  AirlineLegDestinationCode: ").Append(AirlineLegDestinationCode).Append("\n");
            sb.Append("  AirlineLegFareBaseCode: ").Append(AirlineLegFareBaseCode).Append("\n");
            sb.Append("  AirlineLegFlightNumber: ").Append(AirlineLegFlightNumber).Append("\n");
            sb.Append("  AirlineLegStopOverCode: ").Append(AirlineLegStopOverCode).Append("\n");
            sb.Append("  AirlinePassengerDateOfBirth: ").Append(AirlinePassengerDateOfBirth).Append("\n");
            sb.Append("  AirlinePassengerFirstName: ").Append(AirlinePassengerFirstName).Append("\n");
            sb.Append("  AirlinePassengerLastName: ").Append(AirlinePassengerLastName).Append("\n");
            sb.Append("  AirlinePassengerPhoneNumber: ").Append(AirlinePassengerPhoneNumber).Append("\n");
            sb.Append("  AirlinePassengerTravellerType: ").Append(AirlinePassengerTravellerType).Append("\n");
            sb.Append("  AirlineTicketIssueAddress: ").Append(AirlineTicketIssueAddress).Append("\n");
            sb.Append("  AirlineTicketNumber: ").Append(AirlineTicketNumber).Append("\n");
            sb.Append("  AirlineTravelAgencyCode: ").Append(AirlineTravelAgencyCode).Append("\n");
            sb.Append("  AirlineTravelAgencyName: ").Append(AirlineTravelAgencyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalDataAirline" />
    /// </summary>
    public class AdditionalDataAirlineJsonConverter : JsonConverter<AdditionalDataAirline>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalDataAirline" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalDataAirline Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> airlinePassengerName = default;
            Option<string> airlineAgencyInvoiceNumber = default;
            Option<string> airlineAgencyPlanName = default;
            Option<string> airlineAirlineCode = default;
            Option<string> airlineAirlineDesignatorCode = default;
            Option<string> airlineBoardingFee = default;
            Option<string> airlineComputerizedReservationSystem = default;
            Option<string> airlineCustomerReferenceNumber = default;
            Option<string> airlineDocumentType = default;
            Option<string> airlineFlightDate = default;
            Option<string> airlineIssueDate = default;
            Option<string> airlineLegCarrierCode = default;
            Option<string> airlineLegClassOfTravel = default;
            Option<string> airlineLegDateOfTravel = default;
            Option<string> airlineLegDepartAirport = default;
            Option<string> airlineLegDepartTax = default;
            Option<string> airlineLegDestinationCode = default;
            Option<string> airlineLegFareBaseCode = default;
            Option<string> airlineLegFlightNumber = default;
            Option<string> airlineLegStopOverCode = default;
            Option<string> airlinePassengerDateOfBirth = default;
            Option<string> airlinePassengerFirstName = default;
            Option<string> airlinePassengerLastName = default;
            Option<string> airlinePassengerPhoneNumber = default;
            Option<string> airlinePassengerTravellerType = default;
            Option<string> airlineTicketIssueAddress = default;
            Option<string> airlineTicketNumber = default;
            Option<string> airlineTravelAgencyCode = default;
            Option<string> airlineTravelAgencyName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "airline.passenger_name":
                            airlinePassengerName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.agency_invoice_number":
                            airlineAgencyInvoiceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.agency_plan_name":
                            airlineAgencyPlanName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.airline_code":
                            airlineAirlineCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.airline_designator_code":
                            airlineAirlineDesignatorCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.boarding_fee":
                            airlineBoardingFee = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.computerized_reservation_system":
                            airlineComputerizedReservationSystem = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.customer_reference_number":
                            airlineCustomerReferenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.document_type":
                            airlineDocumentType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.flight_date":
                            airlineFlightDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.issue_date":
                            airlineIssueDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.leg.carrier_code":
                            airlineLegCarrierCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.leg.class_of_travel":
                            airlineLegClassOfTravel = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.leg.date_of_travel":
                            airlineLegDateOfTravel = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.leg.depart_airport":
                            airlineLegDepartAirport = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.leg.depart_tax":
                            airlineLegDepartTax = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.leg.destination_code":
                            airlineLegDestinationCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.leg.fare_base_code":
                            airlineLegFareBaseCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.leg.flight_number":
                            airlineLegFlightNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.leg.stop_over_code":
                            airlineLegStopOverCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.passenger.date_of_birth":
                            airlinePassengerDateOfBirth = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.passenger.first_name":
                            airlinePassengerFirstName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.passenger.last_name":
                            airlinePassengerLastName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.passenger.phone_number":
                            airlinePassengerPhoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.passenger.traveller_type":
                            airlinePassengerTravellerType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.ticket_issue_address":
                            airlineTicketIssueAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.ticket_number":
                            airlineTicketNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.travel_agency_code":
                            airlineTravelAgencyCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "airline.travel_agency_name":
                            airlineTravelAgencyName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!airlinePassengerName.IsSet)
                throw new ArgumentException("Property is required for class AdditionalDataAirline.", nameof(airlinePassengerName));

            if (airlinePassengerName.IsSet && airlinePassengerName.Value == null)
                throw new ArgumentNullException(nameof(airlinePassengerName), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineAgencyInvoiceNumber.IsSet && airlineAgencyInvoiceNumber.Value == null)
                throw new ArgumentNullException(nameof(airlineAgencyInvoiceNumber), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineAgencyPlanName.IsSet && airlineAgencyPlanName.Value == null)
                throw new ArgumentNullException(nameof(airlineAgencyPlanName), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineAirlineCode.IsSet && airlineAirlineCode.Value == null)
                throw new ArgumentNullException(nameof(airlineAirlineCode), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineAirlineDesignatorCode.IsSet && airlineAirlineDesignatorCode.Value == null)
                throw new ArgumentNullException(nameof(airlineAirlineDesignatorCode), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineBoardingFee.IsSet && airlineBoardingFee.Value == null)
                throw new ArgumentNullException(nameof(airlineBoardingFee), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineComputerizedReservationSystem.IsSet && airlineComputerizedReservationSystem.Value == null)
                throw new ArgumentNullException(nameof(airlineComputerizedReservationSystem), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineCustomerReferenceNumber.IsSet && airlineCustomerReferenceNumber.Value == null)
                throw new ArgumentNullException(nameof(airlineCustomerReferenceNumber), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineDocumentType.IsSet && airlineDocumentType.Value == null)
                throw new ArgumentNullException(nameof(airlineDocumentType), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineFlightDate.IsSet && airlineFlightDate.Value == null)
                throw new ArgumentNullException(nameof(airlineFlightDate), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineIssueDate.IsSet && airlineIssueDate.Value == null)
                throw new ArgumentNullException(nameof(airlineIssueDate), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineLegCarrierCode.IsSet && airlineLegCarrierCode.Value == null)
                throw new ArgumentNullException(nameof(airlineLegCarrierCode), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineLegClassOfTravel.IsSet && airlineLegClassOfTravel.Value == null)
                throw new ArgumentNullException(nameof(airlineLegClassOfTravel), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineLegDateOfTravel.IsSet && airlineLegDateOfTravel.Value == null)
                throw new ArgumentNullException(nameof(airlineLegDateOfTravel), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineLegDepartAirport.IsSet && airlineLegDepartAirport.Value == null)
                throw new ArgumentNullException(nameof(airlineLegDepartAirport), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineLegDepartTax.IsSet && airlineLegDepartTax.Value == null)
                throw new ArgumentNullException(nameof(airlineLegDepartTax), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineLegDestinationCode.IsSet && airlineLegDestinationCode.Value == null)
                throw new ArgumentNullException(nameof(airlineLegDestinationCode), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineLegFareBaseCode.IsSet && airlineLegFareBaseCode.Value == null)
                throw new ArgumentNullException(nameof(airlineLegFareBaseCode), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineLegFlightNumber.IsSet && airlineLegFlightNumber.Value == null)
                throw new ArgumentNullException(nameof(airlineLegFlightNumber), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineLegStopOverCode.IsSet && airlineLegStopOverCode.Value == null)
                throw new ArgumentNullException(nameof(airlineLegStopOverCode), "Property is not nullable for class AdditionalDataAirline.");

            if (airlinePassengerDateOfBirth.IsSet && airlinePassengerDateOfBirth.Value == null)
                throw new ArgumentNullException(nameof(airlinePassengerDateOfBirth), "Property is not nullable for class AdditionalDataAirline.");

            if (airlinePassengerFirstName.IsSet && airlinePassengerFirstName.Value == null)
                throw new ArgumentNullException(nameof(airlinePassengerFirstName), "Property is not nullable for class AdditionalDataAirline.");

            if (airlinePassengerLastName.IsSet && airlinePassengerLastName.Value == null)
                throw new ArgumentNullException(nameof(airlinePassengerLastName), "Property is not nullable for class AdditionalDataAirline.");

            if (airlinePassengerPhoneNumber.IsSet && airlinePassengerPhoneNumber.Value == null)
                throw new ArgumentNullException(nameof(airlinePassengerPhoneNumber), "Property is not nullable for class AdditionalDataAirline.");

            if (airlinePassengerTravellerType.IsSet && airlinePassengerTravellerType.Value == null)
                throw new ArgumentNullException(nameof(airlinePassengerTravellerType), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineTicketIssueAddress.IsSet && airlineTicketIssueAddress.Value == null)
                throw new ArgumentNullException(nameof(airlineTicketIssueAddress), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineTicketNumber.IsSet && airlineTicketNumber.Value == null)
                throw new ArgumentNullException(nameof(airlineTicketNumber), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineTravelAgencyCode.IsSet && airlineTravelAgencyCode.Value == null)
                throw new ArgumentNullException(nameof(airlineTravelAgencyCode), "Property is not nullable for class AdditionalDataAirline.");

            if (airlineTravelAgencyName.IsSet && airlineTravelAgencyName.Value == null)
                throw new ArgumentNullException(nameof(airlineTravelAgencyName), "Property is not nullable for class AdditionalDataAirline.");

            return new AdditionalDataAirline(airlinePassengerName.Value, airlineAgencyInvoiceNumber, airlineAgencyPlanName, airlineAirlineCode, airlineAirlineDesignatorCode, airlineBoardingFee, airlineComputerizedReservationSystem, airlineCustomerReferenceNumber, airlineDocumentType, airlineFlightDate, airlineIssueDate, airlineLegCarrierCode, airlineLegClassOfTravel, airlineLegDateOfTravel, airlineLegDepartAirport, airlineLegDepartTax, airlineLegDestinationCode, airlineLegFareBaseCode, airlineLegFlightNumber, airlineLegStopOverCode, airlinePassengerDateOfBirth, airlinePassengerFirstName, airlinePassengerLastName, airlinePassengerPhoneNumber, airlinePassengerTravellerType, airlineTicketIssueAddress, airlineTicketNumber, airlineTravelAgencyCode, airlineTravelAgencyName);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalDataAirline" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataAirline"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalDataAirline additionalDataAirline, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalDataAirline, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalDataAirline" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataAirline"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalDataAirline additionalDataAirline, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalDataAirline.AirlinePassengerName == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlinePassengerName), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineAgencyInvoiceNumberOption.IsSet && additionalDataAirline.AirlineAgencyInvoiceNumber == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineAgencyInvoiceNumber), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineAgencyPlanNameOption.IsSet && additionalDataAirline.AirlineAgencyPlanName == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineAgencyPlanName), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineAirlineCodeOption.IsSet && additionalDataAirline.AirlineAirlineCode == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineAirlineCode), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineAirlineDesignatorCodeOption.IsSet && additionalDataAirline.AirlineAirlineDesignatorCode == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineAirlineDesignatorCode), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineBoardingFeeOption.IsSet && additionalDataAirline.AirlineBoardingFee == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineBoardingFee), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineComputerizedReservationSystemOption.IsSet && additionalDataAirline.AirlineComputerizedReservationSystem == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineComputerizedReservationSystem), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineCustomerReferenceNumberOption.IsSet && additionalDataAirline.AirlineCustomerReferenceNumber == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineCustomerReferenceNumber), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineDocumentTypeOption.IsSet && additionalDataAirline.AirlineDocumentType == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineDocumentType), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineFlightDateOption.IsSet && additionalDataAirline.AirlineFlightDate == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineFlightDate), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineIssueDateOption.IsSet && additionalDataAirline.AirlineIssueDate == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineIssueDate), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineLegCarrierCodeOption.IsSet && additionalDataAirline.AirlineLegCarrierCode == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineLegCarrierCode), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineLegClassOfTravelOption.IsSet && additionalDataAirline.AirlineLegClassOfTravel == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineLegClassOfTravel), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineLegDateOfTravelOption.IsSet && additionalDataAirline.AirlineLegDateOfTravel == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineLegDateOfTravel), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineLegDepartAirportOption.IsSet && additionalDataAirline.AirlineLegDepartAirport == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineLegDepartAirport), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineLegDepartTaxOption.IsSet && additionalDataAirline.AirlineLegDepartTax == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineLegDepartTax), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineLegDestinationCodeOption.IsSet && additionalDataAirline.AirlineLegDestinationCode == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineLegDestinationCode), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineLegFareBaseCodeOption.IsSet && additionalDataAirline.AirlineLegFareBaseCode == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineLegFareBaseCode), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineLegFlightNumberOption.IsSet && additionalDataAirline.AirlineLegFlightNumber == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineLegFlightNumber), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineLegStopOverCodeOption.IsSet && additionalDataAirline.AirlineLegStopOverCode == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineLegStopOverCode), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlinePassengerDateOfBirthOption.IsSet && additionalDataAirline.AirlinePassengerDateOfBirth == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlinePassengerDateOfBirth), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlinePassengerFirstNameOption.IsSet && additionalDataAirline.AirlinePassengerFirstName == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlinePassengerFirstName), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlinePassengerLastNameOption.IsSet && additionalDataAirline.AirlinePassengerLastName == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlinePassengerLastName), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlinePassengerPhoneNumberOption.IsSet && additionalDataAirline.AirlinePassengerPhoneNumber == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlinePassengerPhoneNumber), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlinePassengerTravellerTypeOption.IsSet && additionalDataAirline.AirlinePassengerTravellerType == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlinePassengerTravellerType), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineTicketIssueAddressOption.IsSet && additionalDataAirline.AirlineTicketIssueAddress == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineTicketIssueAddress), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineTicketNumberOption.IsSet && additionalDataAirline.AirlineTicketNumber == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineTicketNumber), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineTravelAgencyCodeOption.IsSet && additionalDataAirline.AirlineTravelAgencyCode == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineTravelAgencyCode), "Property is required for class AdditionalDataAirline.");

            if (additionalDataAirline.AirlineTravelAgencyNameOption.IsSet && additionalDataAirline.AirlineTravelAgencyName == null)
                throw new ArgumentNullException(nameof(additionalDataAirline.AirlineTravelAgencyName), "Property is required for class AdditionalDataAirline.");

            writer.WriteString("airline.passenger_name", additionalDataAirline.AirlinePassengerName);

            if (additionalDataAirline.AirlineAgencyInvoiceNumberOption.IsSet)
                writer.WriteString("airline.agency_invoice_number", additionalDataAirline.AirlineAgencyInvoiceNumber);

            if (additionalDataAirline.AirlineAgencyPlanNameOption.IsSet)
                writer.WriteString("airline.agency_plan_name", additionalDataAirline.AirlineAgencyPlanName);

            if (additionalDataAirline.AirlineAirlineCodeOption.IsSet)
                writer.WriteString("airline.airline_code", additionalDataAirline.AirlineAirlineCode);

            if (additionalDataAirline.AirlineAirlineDesignatorCodeOption.IsSet)
                writer.WriteString("airline.airline_designator_code", additionalDataAirline.AirlineAirlineDesignatorCode);

            if (additionalDataAirline.AirlineBoardingFeeOption.IsSet)
                writer.WriteString("airline.boarding_fee", additionalDataAirline.AirlineBoardingFee);

            if (additionalDataAirline.AirlineComputerizedReservationSystemOption.IsSet)
                writer.WriteString("airline.computerized_reservation_system", additionalDataAirline.AirlineComputerizedReservationSystem);

            if (additionalDataAirline.AirlineCustomerReferenceNumberOption.IsSet)
                writer.WriteString("airline.customer_reference_number", additionalDataAirline.AirlineCustomerReferenceNumber);

            if (additionalDataAirline.AirlineDocumentTypeOption.IsSet)
                writer.WriteString("airline.document_type", additionalDataAirline.AirlineDocumentType);

            if (additionalDataAirline.AirlineFlightDateOption.IsSet)
                writer.WriteString("airline.flight_date", additionalDataAirline.AirlineFlightDate);

            if (additionalDataAirline.AirlineIssueDateOption.IsSet)
                writer.WriteString("airline.issue_date", additionalDataAirline.AirlineIssueDate);

            if (additionalDataAirline.AirlineLegCarrierCodeOption.IsSet)
                writer.WriteString("airline.leg.carrier_code", additionalDataAirline.AirlineLegCarrierCode);

            if (additionalDataAirline.AirlineLegClassOfTravelOption.IsSet)
                writer.WriteString("airline.leg.class_of_travel", additionalDataAirline.AirlineLegClassOfTravel);

            if (additionalDataAirline.AirlineLegDateOfTravelOption.IsSet)
                writer.WriteString("airline.leg.date_of_travel", additionalDataAirline.AirlineLegDateOfTravel);

            if (additionalDataAirline.AirlineLegDepartAirportOption.IsSet)
                writer.WriteString("airline.leg.depart_airport", additionalDataAirline.AirlineLegDepartAirport);

            if (additionalDataAirline.AirlineLegDepartTaxOption.IsSet)
                writer.WriteString("airline.leg.depart_tax", additionalDataAirline.AirlineLegDepartTax);

            if (additionalDataAirline.AirlineLegDestinationCodeOption.IsSet)
                writer.WriteString("airline.leg.destination_code", additionalDataAirline.AirlineLegDestinationCode);

            if (additionalDataAirline.AirlineLegFareBaseCodeOption.IsSet)
                writer.WriteString("airline.leg.fare_base_code", additionalDataAirline.AirlineLegFareBaseCode);

            if (additionalDataAirline.AirlineLegFlightNumberOption.IsSet)
                writer.WriteString("airline.leg.flight_number", additionalDataAirline.AirlineLegFlightNumber);

            if (additionalDataAirline.AirlineLegStopOverCodeOption.IsSet)
                writer.WriteString("airline.leg.stop_over_code", additionalDataAirline.AirlineLegStopOverCode);

            if (additionalDataAirline.AirlinePassengerDateOfBirthOption.IsSet)
                writer.WriteString("airline.passenger.date_of_birth", additionalDataAirline.AirlinePassengerDateOfBirth);

            if (additionalDataAirline.AirlinePassengerFirstNameOption.IsSet)
                writer.WriteString("airline.passenger.first_name", additionalDataAirline.AirlinePassengerFirstName);

            if (additionalDataAirline.AirlinePassengerLastNameOption.IsSet)
                writer.WriteString("airline.passenger.last_name", additionalDataAirline.AirlinePassengerLastName);

            if (additionalDataAirline.AirlinePassengerPhoneNumberOption.IsSet)
                writer.WriteString("airline.passenger.phone_number", additionalDataAirline.AirlinePassengerPhoneNumber);

            if (additionalDataAirline.AirlinePassengerTravellerTypeOption.IsSet)
                writer.WriteString("airline.passenger.traveller_type", additionalDataAirline.AirlinePassengerTravellerType);

            if (additionalDataAirline.AirlineTicketIssueAddressOption.IsSet)
                writer.WriteString("airline.ticket_issue_address", additionalDataAirline.AirlineTicketIssueAddress);

            if (additionalDataAirline.AirlineTicketNumberOption.IsSet)
                writer.WriteString("airline.ticket_number", additionalDataAirline.AirlineTicketNumber);

            if (additionalDataAirline.AirlineTravelAgencyCodeOption.IsSet)
                writer.WriteString("airline.travel_agency_code", additionalDataAirline.AirlineTravelAgencyCode);

            if (additionalDataAirline.AirlineTravelAgencyNameOption.IsSet)
                writer.WriteString("airline.travel_agency_name", additionalDataAirline.AirlineTravelAgencyName);
        }
    }
}
