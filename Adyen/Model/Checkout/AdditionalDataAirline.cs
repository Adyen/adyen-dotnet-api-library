/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataAirline
    /// </summary>
    [DataContract(Name = "AdditionalDataAirline")]
    public partial class AdditionalDataAirline : IEquatable<AdditionalDataAirline>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataAirline" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdditionalDataAirline() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataAirline" /> class.
        /// </summary>
        /// <param name="airlineAgencyInvoiceNumber">The reference number for the invoice, issued by the agency. * Encoding: ASCII * minLength: 1 character * maxLength: 6 characters.</param>
        /// <param name="airlineAgencyPlanName">The two-letter agency plan identifier. * Encoding: ASCII * minLength: 2 characters * maxLength: 2 characters.</param>
        /// <param name="airlineAirlineCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros..</param>
        /// <param name="airlineAirlineDesignatorCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros..</param>
        /// <param name="airlineBoardingFee">The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 18 characters.</param>
        /// <param name="airlineComputerizedReservationSystem">The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters.</param>
        /// <param name="airlineCustomerReferenceNumber">The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not be all spaces.</param>
        /// <param name="airlineDocumentType">A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters.</param>
        /// <param name="airlineFlightDate">The flight departure date. Local time &#x60;(HH:mm)&#x60; is optional. * Date format: &#x60;yyyy-MM-dd&#x60; * Date and time format: &#x60;yyyy-MM-dd HH:mm&#x60; * minLength: 10 characters * maxLength: 16 characters.</param>
        /// <param name="airlineIssueDate">The date that the ticket was issued to the passenger. * minLength: 6 characters * maxLength: 6 characters * Date format: YYMMDD.</param>
        /// <param name="airlineLegCarrierCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros..</param>
        /// <param name="airlineLegClassOfTravel">A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces *Must not be all zeros..</param>
        /// <param name="airlineLegDateOfTravel">  Date and time of travel in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format &#x60;yyyy-MM-dd HH:mm&#x60;. * Encoding: ASCII * minLength: 16 characters * maxLength: 16 characters.</param>
        /// <param name="airlineLegDepartAirport">The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros..</param>
        /// <param name="airlineLegDepartTax">The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 *Must not be all zeros..</param>
        /// <param name="airlineLegDestinationCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros..</param>
        /// <param name="airlineLegFareBaseCode">The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces *Must not be all zeros..</param>
        /// <param name="airlineLegFlightNumber">The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces *Must not be all zeros..</param>
        /// <param name="airlineLegStopOverCode">A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character.</param>
        /// <param name="airlinePassengerDateOfBirth">The passenger&#39;s date of birth.  Date format: &#x60;yyyy-MM-dd&#x60; * minLength: 10 * maxLength: 10.</param>
        /// <param name="airlinePassengerFirstName">The passenger&#39;s first name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII.</param>
        /// <param name="airlinePassengerLastName">The passenger&#39;s last name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII.</param>
        /// <param name="airlinePassengerTelephoneNumber">The passenger&#39;s telephone number, including country code. This is an alphanumeric field that can include the &#39;+&#39; and &#39;-&#39; signs. * Encoding: ASCII * minLength: 3 characters * maxLength: 30 characters.</param>
        /// <param name="airlinePassengerTravellerType">The IATA passenger type code (PTC). * Encoding: ASCII * minLength: 3 characters * maxLength: 6 characters.</param>
        /// <param name="airlinePassengerName">The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  *Must not be all zeros. (required).</param>
        /// <param name="airlineTicketIssueAddress">The address of the organization that issued the ticket. * minLength: 0 characters * maxLength: 16 characters.</param>
        /// <param name="airlineTicketNumber">The ticket&#39;s unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces *Must not be all zeros..</param>
        /// <param name="airlineTravelAgencyCode">The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces *Must not be all zeros..</param>
        /// <param name="airlineTravelAgencyName">The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces *Must not be all zeros..</param>
        public AdditionalDataAirline(string airlineAgencyInvoiceNumber = default(string), string airlineAgencyPlanName = default(string), string airlineAirlineCode = default(string), string airlineAirlineDesignatorCode = default(string), string airlineBoardingFee = default(string), string airlineComputerizedReservationSystem = default(string), string airlineCustomerReferenceNumber = default(string), string airlineDocumentType = default(string), string airlineFlightDate = default(string), string airlineIssueDate = default(string), string airlineLegCarrierCode = default(string), string airlineLegClassOfTravel = default(string), string airlineLegDateOfTravel = default(string), string airlineLegDepartAirport = default(string), string airlineLegDepartTax = default(string), string airlineLegDestinationCode = default(string), string airlineLegFareBaseCode = default(string), string airlineLegFlightNumber = default(string), string airlineLegStopOverCode = default(string), string airlinePassengerDateOfBirth = default(string), string airlinePassengerFirstName = default(string), string airlinePassengerLastName = default(string), string airlinePassengerTelephoneNumber = default(string), string airlinePassengerTravellerType = default(string), string airlinePassengerName = default(string), string airlineTicketIssueAddress = default(string), string airlineTicketNumber = default(string), string airlineTravelAgencyCode = default(string), string airlineTravelAgencyName = default(string))
        {
            this.AirlinePassengerName = airlinePassengerName;
            this.AirlineAgencyInvoiceNumber = airlineAgencyInvoiceNumber;
            this.AirlineAgencyPlanName = airlineAgencyPlanName;
            this.AirlineAirlineCode = airlineAirlineCode;
            this.AirlineAirlineDesignatorCode = airlineAirlineDesignatorCode;
            this.AirlineBoardingFee = airlineBoardingFee;
            this.AirlineComputerizedReservationSystem = airlineComputerizedReservationSystem;
            this.AirlineCustomerReferenceNumber = airlineCustomerReferenceNumber;
            this.AirlineDocumentType = airlineDocumentType;
            this.AirlineFlightDate = airlineFlightDate;
            this.AirlineIssueDate = airlineIssueDate;
            this.AirlineLegCarrierCode = airlineLegCarrierCode;
            this.AirlineLegClassOfTravel = airlineLegClassOfTravel;
            this.AirlineLegDateOfTravel = airlineLegDateOfTravel;
            this.AirlineLegDepartAirport = airlineLegDepartAirport;
            this.AirlineLegDepartTax = airlineLegDepartTax;
            this.AirlineLegDestinationCode = airlineLegDestinationCode;
            this.AirlineLegFareBaseCode = airlineLegFareBaseCode;
            this.AirlineLegFlightNumber = airlineLegFlightNumber;
            this.AirlineLegStopOverCode = airlineLegStopOverCode;
            this.AirlinePassengerDateOfBirth = airlinePassengerDateOfBirth;
            this.AirlinePassengerFirstName = airlinePassengerFirstName;
            this.AirlinePassengerLastName = airlinePassengerLastName;
            this.AirlinePassengerTelephoneNumber = airlinePassengerTelephoneNumber;
            this.AirlinePassengerTravellerType = airlinePassengerTravellerType;
            this.AirlineTicketIssueAddress = airlineTicketIssueAddress;
            this.AirlineTicketNumber = airlineTicketNumber;
            this.AirlineTravelAgencyCode = airlineTravelAgencyCode;
            this.AirlineTravelAgencyName = airlineTravelAgencyName;
        }

        /// <summary>
        /// The reference number for the invoice, issued by the agency. * Encoding: ASCII * minLength: 1 character * maxLength: 6 characters
        /// </summary>
        /// <value>The reference number for the invoice, issued by the agency. * Encoding: ASCII * minLength: 1 character * maxLength: 6 characters</value>
        [DataMember(Name = "airline.agency_invoice_number", EmitDefaultValue = false)]
        public string AirlineAgencyInvoiceNumber { get; set; }

        /// <summary>
        /// The two-letter agency plan identifier. * Encoding: ASCII * minLength: 2 characters * maxLength: 2 characters
        /// </summary>
        /// <value>The two-letter agency plan identifier. * Encoding: ASCII * minLength: 2 characters * maxLength: 2 characters</value>
        [DataMember(Name = "airline.agency_plan_name", EmitDefaultValue = false)]
        public string AirlineAgencyPlanName { get; set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.</value>
        [DataMember(Name = "airline.airline_code", EmitDefaultValue = false)]
        public string AirlineAirlineCode { get; set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros.</value>
        [DataMember(Name = "airline.airline_designator_code", EmitDefaultValue = false)]
        public string AirlineAirlineDesignatorCode { get; set; }

        /// <summary>
        /// The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 18 characters
        /// </summary>
        /// <value>The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 18 characters</value>
        [DataMember(Name = "airline.boarding_fee", EmitDefaultValue = false)]
        public string AirlineBoardingFee { get; set; }

        /// <summary>
        /// The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters
        /// </summary>
        /// <value>The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters</value>
        [DataMember(Name = "airline.computerized_reservation_system", EmitDefaultValue = false)]
        public string AirlineComputerizedReservationSystem { get; set; }

        /// <summary>
        /// The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not be all spaces
        /// </summary>
        /// <value>The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not be all spaces</value>
        [DataMember(Name = "airline.customer_reference_number", EmitDefaultValue = false)]
        public string AirlineCustomerReferenceNumber { get; set; }

        /// <summary>
        /// A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters
        /// </summary>
        /// <value>A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters</value>
        [DataMember(Name = "airline.document_type", EmitDefaultValue = false)]
        public string AirlineDocumentType { get; set; }

        /// <summary>
        /// The flight departure date. Local time &#x60;(HH:mm)&#x60; is optional. * Date format: &#x60;yyyy-MM-dd&#x60; * Date and time format: &#x60;yyyy-MM-dd HH:mm&#x60; * minLength: 10 characters * maxLength: 16 characters
        /// </summary>
        /// <value>The flight departure date. Local time &#x60;(HH:mm)&#x60; is optional. * Date format: &#x60;yyyy-MM-dd&#x60; * Date and time format: &#x60;yyyy-MM-dd HH:mm&#x60; * minLength: 10 characters * maxLength: 16 characters</value>
        [DataMember(Name = "airline.flight_date", EmitDefaultValue = false)]
        public string AirlineFlightDate { get; set; }

        /// <summary>
        /// The date that the ticket was issued to the passenger. * minLength: 6 characters * maxLength: 6 characters * Date format: YYMMDD
        /// </summary>
        /// <value>The date that the ticket was issued to the passenger. * minLength: 6 characters * maxLength: 6 characters * Date format: YYMMDD</value>
        [DataMember(Name = "airline.issue_date", EmitDefaultValue = false)]
        public string AirlineIssueDate { get; set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros.</value>
        [DataMember(Name = "airline.leg.carrier_code", EmitDefaultValue = false)]
        public string AirlineLegCarrierCode { get; set; }

        /// <summary>
        /// A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces *Must not be all zeros.</value>
        [DataMember(Name = "airline.leg.class_of_travel", EmitDefaultValue = false)]
        public string AirlineLegClassOfTravel { get; set; }

        /// <summary>
        ///   Date and time of travel in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format &#x60;yyyy-MM-dd HH:mm&#x60;. * Encoding: ASCII * minLength: 16 characters * maxLength: 16 characters
        /// </summary>
        /// <value>  Date and time of travel in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format &#x60;yyyy-MM-dd HH:mm&#x60;. * Encoding: ASCII * minLength: 16 characters * maxLength: 16 characters</value>
        [DataMember(Name = "airline.leg.date_of_travel", EmitDefaultValue = false)]
        public string AirlineLegDateOfTravel { get; set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.</value>
        [DataMember(Name = "airline.leg.depart_airport", EmitDefaultValue = false)]
        public string AirlineLegDepartAirport { get; set; }

        /// <summary>
        /// The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 *Must not be all zeros.
        /// </summary>
        /// <value>The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 *Must not be all zeros.</value>
        [DataMember(Name = "airline.leg.depart_tax", EmitDefaultValue = false)]
        public string AirlineLegDepartTax { get; set; }

        /// <summary>
        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.</value>
        [DataMember(Name = "airline.leg.destination_code", EmitDefaultValue = false)]
        public string AirlineLegDestinationCode { get; set; }

        /// <summary>
        /// The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces *Must not be all zeros.</value>
        [DataMember(Name = "airline.leg.fare_base_code", EmitDefaultValue = false)]
        public string AirlineLegFareBaseCode { get; set; }

        /// <summary>
        /// The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces *Must not be all zeros.</value>
        [DataMember(Name = "airline.leg.flight_number", EmitDefaultValue = false)]
        public string AirlineLegFlightNumber { get; set; }

        /// <summary>
        /// A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character
        /// </summary>
        /// <value>A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character</value>
        [DataMember(Name = "airline.leg.stop_over_code", EmitDefaultValue = false)]
        public string AirlineLegStopOverCode { get; set; }

        /// <summary>
        /// The passenger&#39;s date of birth.  Date format: &#x60;yyyy-MM-dd&#x60; * minLength: 10 * maxLength: 10
        /// </summary>
        /// <value>The passenger&#39;s date of birth.  Date format: &#x60;yyyy-MM-dd&#x60; * minLength: 10 * maxLength: 10</value>
        [DataMember(Name = "airline.passenger.date_of_birth", EmitDefaultValue = false)]
        public string AirlinePassengerDateOfBirth { get; set; }

        /// <summary>
        /// The passenger&#39;s first name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII
        /// </summary>
        /// <value>The passenger&#39;s first name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII</value>
        [DataMember(Name = "airline.passenger.first_name", EmitDefaultValue = false)]
        public string AirlinePassengerFirstName { get; set; }

        /// <summary>
        /// The passenger&#39;s last name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII
        /// </summary>
        /// <value>The passenger&#39;s last name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII</value>
        [DataMember(Name = "airline.passenger.last_name", EmitDefaultValue = false)]
        public string AirlinePassengerLastName { get; set; }

        /// <summary>
        /// The passenger&#39;s telephone number, including country code. This is an alphanumeric field that can include the &#39;+&#39; and &#39;-&#39; signs. * Encoding: ASCII * minLength: 3 characters * maxLength: 30 characters
        /// </summary>
        /// <value>The passenger&#39;s telephone number, including country code. This is an alphanumeric field that can include the &#39;+&#39; and &#39;-&#39; signs. * Encoding: ASCII * minLength: 3 characters * maxLength: 30 characters</value>
        [DataMember(Name = "airline.passenger.telephone_number", EmitDefaultValue = false)]
        public string AirlinePassengerTelephoneNumber { get; set; }

        /// <summary>
        /// The IATA passenger type code (PTC). * Encoding: ASCII * minLength: 3 characters * maxLength: 6 characters
        /// </summary>
        /// <value>The IATA passenger type code (PTC). * Encoding: ASCII * minLength: 3 characters * maxLength: 6 characters</value>
        [DataMember(Name = "airline.passenger.traveller_type", EmitDefaultValue = false)]
        public string AirlinePassengerTravellerType { get; set; }

        /// <summary>
        /// The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  *Must not be all zeros.
        /// </summary>
        /// <value>The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  *Must not be all zeros.</value>
        [DataMember(Name = "airline.passenger_name", IsRequired = false, EmitDefaultValue = false)]
        public string AirlinePassengerName { get; set; }

        /// <summary>
        /// The address of the organization that issued the ticket. * minLength: 0 characters * maxLength: 16 characters
        /// </summary>
        /// <value>The address of the organization that issued the ticket. * minLength: 0 characters * maxLength: 16 characters</value>
        [DataMember(Name = "airline.ticket_issue_address", EmitDefaultValue = false)]
        public string AirlineTicketIssueAddress { get; set; }

        /// <summary>
        /// The ticket&#39;s unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The ticket&#39;s unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces *Must not be all zeros.</value>
        [DataMember(Name = "airline.ticket_number", EmitDefaultValue = false)]
        public string AirlineTicketNumber { get; set; }

        /// <summary>
        /// The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces *Must not be all zeros.</value>
        [DataMember(Name = "airline.travel_agency_code", EmitDefaultValue = false)]
        public string AirlineTravelAgencyCode { get; set; }

        /// <summary>
        /// The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces *Must not be all zeros.</value>
        [DataMember(Name = "airline.travel_agency_name", EmitDefaultValue = false)]
        public string AirlineTravelAgencyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataAirline {\n");
            sb.Append("  AirlineAgencyInvoiceNumber: ").Append(AirlineAgencyInvoiceNumber).Append("\n");
            sb.Append("  AirlineAgencyPlanName: ").Append(AirlineAgencyPlanName).Append("\n");
            sb.Append("  AirlineAirlineCode: ").Append(AirlineAirlineCode).Append("\n");
            sb.Append("  AirlineAirlineDesignatorCode: ").Append(AirlineAirlineDesignatorCode).Append("\n");
            sb.Append("  AirlineBoardingFee: ").Append(AirlineBoardingFee).Append("\n");
            sb.Append("  AirlineComputerizedReservationSystem: ").Append(AirlineComputerizedReservationSystem).Append("\n");
            sb.Append("  AirlineCustomerReferenceNumber: ").Append(AirlineCustomerReferenceNumber).Append("\n");
            sb.Append("  AirlineDocumentType: ").Append(AirlineDocumentType).Append("\n");
            sb.Append("  AirlineFlightDate: ").Append(AirlineFlightDate).Append("\n");
            sb.Append("  AirlineIssueDate: ").Append(AirlineIssueDate).Append("\n");
            sb.Append("  AirlineLegCarrierCode: ").Append(AirlineLegCarrierCode).Append("\n");
            sb.Append("  AirlineLegClassOfTravel: ").Append(AirlineLegClassOfTravel).Append("\n");
            sb.Append("  AirlineLegDateOfTravel: ").Append(AirlineLegDateOfTravel).Append("\n");
            sb.Append("  AirlineLegDepartAirport: ").Append(AirlineLegDepartAirport).Append("\n");
            sb.Append("  AirlineLegDepartTax: ").Append(AirlineLegDepartTax).Append("\n");
            sb.Append("  AirlineLegDestinationCode: ").Append(AirlineLegDestinationCode).Append("\n");
            sb.Append("  AirlineLegFareBaseCode: ").Append(AirlineLegFareBaseCode).Append("\n");
            sb.Append("  AirlineLegFlightNumber: ").Append(AirlineLegFlightNumber).Append("\n");
            sb.Append("  AirlineLegStopOverCode: ").Append(AirlineLegStopOverCode).Append("\n");
            sb.Append("  AirlinePassengerDateOfBirth: ").Append(AirlinePassengerDateOfBirth).Append("\n");
            sb.Append("  AirlinePassengerFirstName: ").Append(AirlinePassengerFirstName).Append("\n");
            sb.Append("  AirlinePassengerLastName: ").Append(AirlinePassengerLastName).Append("\n");
            sb.Append("  AirlinePassengerTelephoneNumber: ").Append(AirlinePassengerTelephoneNumber).Append("\n");
            sb.Append("  AirlinePassengerTravellerType: ").Append(AirlinePassengerTravellerType).Append("\n");
            sb.Append("  AirlinePassengerName: ").Append(AirlinePassengerName).Append("\n");
            sb.Append("  AirlineTicketIssueAddress: ").Append(AirlineTicketIssueAddress).Append("\n");
            sb.Append("  AirlineTicketNumber: ").Append(AirlineTicketNumber).Append("\n");
            sb.Append("  AirlineTravelAgencyCode: ").Append(AirlineTravelAgencyCode).Append("\n");
            sb.Append("  AirlineTravelAgencyName: ").Append(AirlineTravelAgencyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalDataAirline);
        }

        /// <summary>
        /// Returns true if AdditionalDataAirline instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalDataAirline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalDataAirline input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AirlineAgencyInvoiceNumber == input.AirlineAgencyInvoiceNumber ||
                    (this.AirlineAgencyInvoiceNumber != null &&
                    this.AirlineAgencyInvoiceNumber.Equals(input.AirlineAgencyInvoiceNumber))
                ) && 
                (
                    this.AirlineAgencyPlanName == input.AirlineAgencyPlanName ||
                    (this.AirlineAgencyPlanName != null &&
                    this.AirlineAgencyPlanName.Equals(input.AirlineAgencyPlanName))
                ) && 
                (
                    this.AirlineAirlineCode == input.AirlineAirlineCode ||
                    (this.AirlineAirlineCode != null &&
                    this.AirlineAirlineCode.Equals(input.AirlineAirlineCode))
                ) && 
                (
                    this.AirlineAirlineDesignatorCode == input.AirlineAirlineDesignatorCode ||
                    (this.AirlineAirlineDesignatorCode != null &&
                    this.AirlineAirlineDesignatorCode.Equals(input.AirlineAirlineDesignatorCode))
                ) && 
                (
                    this.AirlineBoardingFee == input.AirlineBoardingFee ||
                    (this.AirlineBoardingFee != null &&
                    this.AirlineBoardingFee.Equals(input.AirlineBoardingFee))
                ) && 
                (
                    this.AirlineComputerizedReservationSystem == input.AirlineComputerizedReservationSystem ||
                    (this.AirlineComputerizedReservationSystem != null &&
                    this.AirlineComputerizedReservationSystem.Equals(input.AirlineComputerizedReservationSystem))
                ) && 
                (
                    this.AirlineCustomerReferenceNumber == input.AirlineCustomerReferenceNumber ||
                    (this.AirlineCustomerReferenceNumber != null &&
                    this.AirlineCustomerReferenceNumber.Equals(input.AirlineCustomerReferenceNumber))
                ) && 
                (
                    this.AirlineDocumentType == input.AirlineDocumentType ||
                    (this.AirlineDocumentType != null &&
                    this.AirlineDocumentType.Equals(input.AirlineDocumentType))
                ) && 
                (
                    this.AirlineFlightDate == input.AirlineFlightDate ||
                    (this.AirlineFlightDate != null &&
                    this.AirlineFlightDate.Equals(input.AirlineFlightDate))
                ) && 
                (
                    this.AirlineIssueDate == input.AirlineIssueDate ||
                    (this.AirlineIssueDate != null &&
                    this.AirlineIssueDate.Equals(input.AirlineIssueDate))
                ) && 
                (
                    this.AirlineLegCarrierCode == input.AirlineLegCarrierCode ||
                    (this.AirlineLegCarrierCode != null &&
                    this.AirlineLegCarrierCode.Equals(input.AirlineLegCarrierCode))
                ) && 
                (
                    this.AirlineLegClassOfTravel == input.AirlineLegClassOfTravel ||
                    (this.AirlineLegClassOfTravel != null &&
                    this.AirlineLegClassOfTravel.Equals(input.AirlineLegClassOfTravel))
                ) && 
                (
                    this.AirlineLegDateOfTravel == input.AirlineLegDateOfTravel ||
                    (this.AirlineLegDateOfTravel != null &&
                    this.AirlineLegDateOfTravel.Equals(input.AirlineLegDateOfTravel))
                ) && 
                (
                    this.AirlineLegDepartAirport == input.AirlineLegDepartAirport ||
                    (this.AirlineLegDepartAirport != null &&
                    this.AirlineLegDepartAirport.Equals(input.AirlineLegDepartAirport))
                ) && 
                (
                    this.AirlineLegDepartTax == input.AirlineLegDepartTax ||
                    (this.AirlineLegDepartTax != null &&
                    this.AirlineLegDepartTax.Equals(input.AirlineLegDepartTax))
                ) && 
                (
                    this.AirlineLegDestinationCode == input.AirlineLegDestinationCode ||
                    (this.AirlineLegDestinationCode != null &&
                    this.AirlineLegDestinationCode.Equals(input.AirlineLegDestinationCode))
                ) && 
                (
                    this.AirlineLegFareBaseCode == input.AirlineLegFareBaseCode ||
                    (this.AirlineLegFareBaseCode != null &&
                    this.AirlineLegFareBaseCode.Equals(input.AirlineLegFareBaseCode))
                ) && 
                (
                    this.AirlineLegFlightNumber == input.AirlineLegFlightNumber ||
                    (this.AirlineLegFlightNumber != null &&
                    this.AirlineLegFlightNumber.Equals(input.AirlineLegFlightNumber))
                ) && 
                (
                    this.AirlineLegStopOverCode == input.AirlineLegStopOverCode ||
                    (this.AirlineLegStopOverCode != null &&
                    this.AirlineLegStopOverCode.Equals(input.AirlineLegStopOverCode))
                ) && 
                (
                    this.AirlinePassengerDateOfBirth == input.AirlinePassengerDateOfBirth ||
                    (this.AirlinePassengerDateOfBirth != null &&
                    this.AirlinePassengerDateOfBirth.Equals(input.AirlinePassengerDateOfBirth))
                ) && 
                (
                    this.AirlinePassengerFirstName == input.AirlinePassengerFirstName ||
                    (this.AirlinePassengerFirstName != null &&
                    this.AirlinePassengerFirstName.Equals(input.AirlinePassengerFirstName))
                ) && 
                (
                    this.AirlinePassengerLastName == input.AirlinePassengerLastName ||
                    (this.AirlinePassengerLastName != null &&
                    this.AirlinePassengerLastName.Equals(input.AirlinePassengerLastName))
                ) && 
                (
                    this.AirlinePassengerTelephoneNumber == input.AirlinePassengerTelephoneNumber ||
                    (this.AirlinePassengerTelephoneNumber != null &&
                    this.AirlinePassengerTelephoneNumber.Equals(input.AirlinePassengerTelephoneNumber))
                ) && 
                (
                    this.AirlinePassengerTravellerType == input.AirlinePassengerTravellerType ||
                    (this.AirlinePassengerTravellerType != null &&
                    this.AirlinePassengerTravellerType.Equals(input.AirlinePassengerTravellerType))
                ) && 
                (
                    this.AirlinePassengerName == input.AirlinePassengerName ||
                    (this.AirlinePassengerName != null &&
                    this.AirlinePassengerName.Equals(input.AirlinePassengerName))
                ) && 
                (
                    this.AirlineTicketIssueAddress == input.AirlineTicketIssueAddress ||
                    (this.AirlineTicketIssueAddress != null &&
                    this.AirlineTicketIssueAddress.Equals(input.AirlineTicketIssueAddress))
                ) && 
                (
                    this.AirlineTicketNumber == input.AirlineTicketNumber ||
                    (this.AirlineTicketNumber != null &&
                    this.AirlineTicketNumber.Equals(input.AirlineTicketNumber))
                ) && 
                (
                    this.AirlineTravelAgencyCode == input.AirlineTravelAgencyCode ||
                    (this.AirlineTravelAgencyCode != null &&
                    this.AirlineTravelAgencyCode.Equals(input.AirlineTravelAgencyCode))
                ) && 
                (
                    this.AirlineTravelAgencyName == input.AirlineTravelAgencyName ||
                    (this.AirlineTravelAgencyName != null &&
                    this.AirlineTravelAgencyName.Equals(input.AirlineTravelAgencyName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AirlineAgencyInvoiceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineAgencyInvoiceNumber.GetHashCode();
                }
                if (this.AirlineAgencyPlanName != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineAgencyPlanName.GetHashCode();
                }
                if (this.AirlineAirlineCode != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineAirlineCode.GetHashCode();
                }
                if (this.AirlineAirlineDesignatorCode != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineAirlineDesignatorCode.GetHashCode();
                }
                if (this.AirlineBoardingFee != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineBoardingFee.GetHashCode();
                }
                if (this.AirlineComputerizedReservationSystem != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineComputerizedReservationSystem.GetHashCode();
                }
                if (this.AirlineCustomerReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineCustomerReferenceNumber.GetHashCode();
                }
                if (this.AirlineDocumentType != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineDocumentType.GetHashCode();
                }
                if (this.AirlineFlightDate != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineFlightDate.GetHashCode();
                }
                if (this.AirlineIssueDate != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineIssueDate.GetHashCode();
                }
                if (this.AirlineLegCarrierCode != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineLegCarrierCode.GetHashCode();
                }
                if (this.AirlineLegClassOfTravel != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineLegClassOfTravel.GetHashCode();
                }
                if (this.AirlineLegDateOfTravel != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineLegDateOfTravel.GetHashCode();
                }
                if (this.AirlineLegDepartAirport != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineLegDepartAirport.GetHashCode();
                }
                if (this.AirlineLegDepartTax != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineLegDepartTax.GetHashCode();
                }
                if (this.AirlineLegDestinationCode != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineLegDestinationCode.GetHashCode();
                }
                if (this.AirlineLegFareBaseCode != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineLegFareBaseCode.GetHashCode();
                }
                if (this.AirlineLegFlightNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineLegFlightNumber.GetHashCode();
                }
                if (this.AirlineLegStopOverCode != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineLegStopOverCode.GetHashCode();
                }
                if (this.AirlinePassengerDateOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.AirlinePassengerDateOfBirth.GetHashCode();
                }
                if (this.AirlinePassengerFirstName != null)
                {
                    hashCode = (hashCode * 59) + this.AirlinePassengerFirstName.GetHashCode();
                }
                if (this.AirlinePassengerLastName != null)
                {
                    hashCode = (hashCode * 59) + this.AirlinePassengerLastName.GetHashCode();
                }
                if (this.AirlinePassengerTelephoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AirlinePassengerTelephoneNumber.GetHashCode();
                }
                if (this.AirlinePassengerTravellerType != null)
                {
                    hashCode = (hashCode * 59) + this.AirlinePassengerTravellerType.GetHashCode();
                }
                if (this.AirlinePassengerName != null)
                {
                    hashCode = (hashCode * 59) + this.AirlinePassengerName.GetHashCode();
                }
                if (this.AirlineTicketIssueAddress != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineTicketIssueAddress.GetHashCode();
                }
                if (this.AirlineTicketNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineTicketNumber.GetHashCode();
                }
                if (this.AirlineTravelAgencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineTravelAgencyCode.GetHashCode();
                }
                if (this.AirlineTravelAgencyName != null)
                {
                    hashCode = (hashCode * 59) + this.AirlineTravelAgencyName.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
