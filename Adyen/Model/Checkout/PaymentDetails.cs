// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PaymentDetails
    /// </summary>
    public partial class PaymentDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetails" /> class.
        /// </summary>
        /// <param name="checkoutAttemptId">The checkout attempt identifier.</param>
        /// <param name="type">The payment method type.</param>
        [JsonConstructor]
        public PaymentDetails(Option<string> checkoutAttemptId = default, Option<TypeEnum?> type = default)
        {
            CheckoutAttemptIdOption = checkoutAttemptId;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The payment method type.
        /// </summary>
        /// <value>The payment method type.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Alipay for value: alipay
            /// </summary>
            Alipay = 1,

            /// <summary>
            /// Enum Multibanco for value: multibanco
            /// </summary>
            Multibanco = 2,

            /// <summary>
            /// Enum BankTransferIBAN for value: bankTransfer_IBAN
            /// </summary>
            BankTransferIBAN = 3,

            /// <summary>
            /// Enum Paybright for value: paybright
            /// </summary>
            Paybright = 4,

            /// <summary>
            /// Enum Paynow for value: paynow
            /// </summary>
            Paynow = 5,

            /// <summary>
            /// Enum AffirmPos for value: affirm_pos
            /// </summary>
            AffirmPos = 6,

            /// <summary>
            /// Enum Trustly for value: trustly
            /// </summary>
            Trustly = 7,

            /// <summary>
            /// Enum Trustlyvector for value: trustlyvector
            /// </summary>
            Trustlyvector = 8,

            /// <summary>
            /// Enum Oney for value: oney
            /// </summary>
            Oney = 9,

            /// <summary>
            /// Enum Facilypay for value: facilypay
            /// </summary>
            Facilypay = 10,

            /// <summary>
            /// Enum Facilypay3x for value: facilypay_3x
            /// </summary>
            Facilypay3x = 11,

            /// <summary>
            /// Enum Facilypay4x for value: facilypay_4x
            /// </summary>
            Facilypay4x = 12,

            /// <summary>
            /// Enum Facilypay6x for value: facilypay_6x
            /// </summary>
            Facilypay6x = 13,

            /// <summary>
            /// Enum Facilypay10x for value: facilypay_10x
            /// </summary>
            Facilypay10x = 14,

            /// <summary>
            /// Enum Facilypay12x for value: facilypay_12x
            /// </summary>
            Facilypay12x = 15,

            /// <summary>
            /// Enum Unionpay for value: unionpay
            /// </summary>
            Unionpay = 16,

            /// <summary>
            /// Enum KcpBanktransfer for value: kcp_banktransfer
            /// </summary>
            KcpBanktransfer = 17,

            /// <summary>
            /// Enum KcpPayco for value: kcp_payco
            /// </summary>
            KcpPayco = 18,

            /// <summary>
            /// Enum KcpCreditcard for value: kcp_creditcard
            /// </summary>
            KcpCreditcard = 19,

            /// <summary>
            /// Enum WechatpaySDK for value: wechatpaySDK
            /// </summary>
            WechatpaySDK = 20,

            /// <summary>
            /// Enum WechatpayQR for value: wechatpayQR
            /// </summary>
            WechatpayQR = 21,

            /// <summary>
            /// Enum WechatpayWeb for value: wechatpayWeb
            /// </summary>
            WechatpayWeb = 22,

            /// <summary>
            /// Enum MolpayBoost for value: molpay_boost
            /// </summary>
            MolpayBoost = 23,

            /// <summary>
            /// Enum WalletIN for value: wallet_IN
            /// </summary>
            WalletIN = 24,

            /// <summary>
            /// Enum PayuINCashcard for value: payu_IN_cashcard
            /// </summary>
            PayuINCashcard = 25,

            /// <summary>
            /// Enum PayuINNb for value: payu_IN_nb
            /// </summary>
            PayuINNb = 26,

            /// <summary>
            /// Enum UpiQr for value: upi_qr
            /// </summary>
            UpiQr = 27,

            /// <summary>
            /// Enum Paytm for value: paytm
            /// </summary>
            Paytm = 28,

            /// <summary>
            /// Enum MolpayEbankingVN for value: molpay_ebanking_VN
            /// </summary>
            MolpayEbankingVN = 29,

            /// <summary>
            /// Enum MolpayEbankingMY for value: molpay_ebanking_MY
            /// </summary>
            MolpayEbankingMY = 30,

            /// <summary>
            /// Enum MolpayEbankingDirectMY for value: molpay_ebanking_direct_MY
            /// </summary>
            MolpayEbankingDirectMY = 31,

            /// <summary>
            /// Enum Swish for value: swish
            /// </summary>
            Swish = 32,

            /// <summary>
            /// Enum Bizum for value: bizum
            /// </summary>
            Bizum = 33,

            /// <summary>
            /// Enum Walley for value: walley
            /// </summary>
            Walley = 34,

            /// <summary>
            /// Enum WalleyB2b for value: walley_b2b
            /// </summary>
            WalleyB2b = 35,

            /// <summary>
            /// Enum Alma for value: alma
            /// </summary>
            Alma = 36,

            /// <summary>
            /// Enum Paypo for value: paypo
            /// </summary>
            Paypo = 37,

            /// <summary>
            /// Enum Scalapay for value: scalapay
            /// </summary>
            Scalapay = 38,

            /// <summary>
            /// Enum Scalapay3x for value: scalapay_3x
            /// </summary>
            Scalapay3x = 39,

            /// <summary>
            /// Enum Scalapay4x for value: scalapay_4x
            /// </summary>
            Scalapay4x = 40,

            /// <summary>
            /// Enum MolpayFpx for value: molpay_fpx
            /// </summary>
            MolpayFpx = 41,

            /// <summary>
            /// Enum Konbini for value: konbini
            /// </summary>
            Konbini = 42,

            /// <summary>
            /// Enum DirectEbanking for value: directEbanking
            /// </summary>
            DirectEbanking = 43,

            /// <summary>
            /// Enum Boletobancario for value: boletobancario
            /// </summary>
            Boletobancario = 44,

            /// <summary>
            /// Enum Neteller for value: neteller
            /// </summary>
            Neteller = 45,

            /// <summary>
            /// Enum Cashticket for value: cashticket
            /// </summary>
            Cashticket = 46,

            /// <summary>
            /// Enum Ikano for value: ikano
            /// </summary>
            Ikano = 47,

            /// <summary>
            /// Enum Karenmillen for value: karenmillen
            /// </summary>
            Karenmillen = 48,

            /// <summary>
            /// Enum Oasis for value: oasis
            /// </summary>
            Oasis = 49,

            /// <summary>
            /// Enum Warehouse for value: warehouse
            /// </summary>
            Warehouse = 50,

            /// <summary>
            /// Enum PrimeiropayBoleto for value: primeiropay_boleto
            /// </summary>
            PrimeiropayBoleto = 51,

            /// <summary>
            /// Enum Mada for value: mada
            /// </summary>
            Mada = 52,

            /// <summary>
            /// Enum Benefit for value: benefit
            /// </summary>
            Benefit = 53,

            /// <summary>
            /// Enum Knet for value: knet
            /// </summary>
            Knet = 54,

            /// <summary>
            /// Enum Omannet for value: omannet
            /// </summary>
            Omannet = 55,

            /// <summary>
            /// Enum GopayWallet for value: gopay_wallet
            /// </summary>
            GopayWallet = 56,

            /// <summary>
            /// Enum KcpNaverpay for value: kcp_naverpay
            /// </summary>
            KcpNaverpay = 57,

            /// <summary>
            /// Enum OnlinebankingIN for value: onlinebanking_IN
            /// </summary>
            OnlinebankingIN = 58,

            /// <summary>
            /// Enum Fawry for value: fawry
            /// </summary>
            Fawry = 59,

            /// <summary>
            /// Enum Atome for value: atome
            /// </summary>
            Atome = 60,

            /// <summary>
            /// Enum Moneybookers for value: moneybookers
            /// </summary>
            Moneybookers = 61,

            /// <summary>
            /// Enum Naps for value: naps
            /// </summary>
            Naps = 62,

            /// <summary>
            /// Enum Nordea for value: nordea
            /// </summary>
            Nordea = 63,

            /// <summary>
            /// Enum BoletobancarioBradesco for value: boletobancario_bradesco
            /// </summary>
            BoletobancarioBradesco = 64,

            /// <summary>
            /// Enum BoletobancarioItau for value: boletobancario_itau
            /// </summary>
            BoletobancarioItau = 65,

            /// <summary>
            /// Enum BoletobancarioSantander for value: boletobancario_santander
            /// </summary>
            BoletobancarioSantander = 66,

            /// <summary>
            /// Enum BoletobancarioBancodobrasil for value: boletobancario_bancodobrasil
            /// </summary>
            BoletobancarioBancodobrasil = 67,

            /// <summary>
            /// Enum BoletobancarioHsbc for value: boletobancario_hsbc
            /// </summary>
            BoletobancarioHsbc = 68,

            /// <summary>
            /// Enum MolpayMaybank2u for value: molpay_maybank2u
            /// </summary>
            MolpayMaybank2u = 69,

            /// <summary>
            /// Enum MolpayCimb for value: molpay_cimb
            /// </summary>
            MolpayCimb = 70,

            /// <summary>
            /// Enum MolpayRhb for value: molpay_rhb
            /// </summary>
            MolpayRhb = 71,

            /// <summary>
            /// Enum MolpayAmb for value: molpay_amb
            /// </summary>
            MolpayAmb = 72,

            /// <summary>
            /// Enum MolpayHlb for value: molpay_hlb
            /// </summary>
            MolpayHlb = 73,

            /// <summary>
            /// Enum MolpayAffinEpg for value: molpay_affin_epg
            /// </summary>
            MolpayAffinEpg = 74,

            /// <summary>
            /// Enum MolpayBankislam for value: molpay_bankislam
            /// </summary>
            MolpayBankislam = 75,

            /// <summary>
            /// Enum MolpayPublicbank for value: molpay_publicbank
            /// </summary>
            MolpayPublicbank = 76,

            /// <summary>
            /// Enum FpxAgrobank for value: fpx_agrobank
            /// </summary>
            FpxAgrobank = 77,

            /// <summary>
            /// Enum Touchngo for value: touchngo
            /// </summary>
            Touchngo = 78,

            /// <summary>
            /// Enum Maybank2uMae for value: maybank2u_mae
            /// </summary>
            Maybank2uMae = 79,

            /// <summary>
            /// Enum Duitnow for value: duitnow
            /// </summary>
            Duitnow = 80,

            /// <summary>
            /// Enum Promptpay for value: promptpay
            /// </summary>
            Promptpay = 81,

            /// <summary>
            /// Enum TwintPos for value: twint_pos
            /// </summary>
            TwintPos = 82,

            /// <summary>
            /// Enum AlipayHk for value: alipay_hk
            /// </summary>
            AlipayHk = 83,

            /// <summary>
            /// Enum AlipayHkWeb for value: alipay_hk_web
            /// </summary>
            AlipayHkWeb = 84,

            /// <summary>
            /// Enum AlipayHkWap for value: alipay_hk_wap
            /// </summary>
            AlipayHkWap = 85,

            /// <summary>
            /// Enum AlipayWap for value: alipay_wap
            /// </summary>
            AlipayWap = 86,

            /// <summary>
            /// Enum Balanceplatform for value: balanceplatform
            /// </summary>
            Balanceplatform = 87
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("alipay"))
                return TypeEnum.Alipay;

            if (value.Equals("multibanco"))
                return TypeEnum.Multibanco;

            if (value.Equals("bankTransfer_IBAN"))
                return TypeEnum.BankTransferIBAN;

            if (value.Equals("paybright"))
                return TypeEnum.Paybright;

            if (value.Equals("paynow"))
                return TypeEnum.Paynow;

            if (value.Equals("affirm_pos"))
                return TypeEnum.AffirmPos;

            if (value.Equals("trustly"))
                return TypeEnum.Trustly;

            if (value.Equals("trustlyvector"))
                return TypeEnum.Trustlyvector;

            if (value.Equals("oney"))
                return TypeEnum.Oney;

            if (value.Equals("facilypay"))
                return TypeEnum.Facilypay;

            if (value.Equals("facilypay_3x"))
                return TypeEnum.Facilypay3x;

            if (value.Equals("facilypay_4x"))
                return TypeEnum.Facilypay4x;

            if (value.Equals("facilypay_6x"))
                return TypeEnum.Facilypay6x;

            if (value.Equals("facilypay_10x"))
                return TypeEnum.Facilypay10x;

            if (value.Equals("facilypay_12x"))
                return TypeEnum.Facilypay12x;

            if (value.Equals("unionpay"))
                return TypeEnum.Unionpay;

            if (value.Equals("kcp_banktransfer"))
                return TypeEnum.KcpBanktransfer;

            if (value.Equals("kcp_payco"))
                return TypeEnum.KcpPayco;

            if (value.Equals("kcp_creditcard"))
                return TypeEnum.KcpCreditcard;

            if (value.Equals("wechatpaySDK"))
                return TypeEnum.WechatpaySDK;

            if (value.Equals("wechatpayQR"))
                return TypeEnum.WechatpayQR;

            if (value.Equals("wechatpayWeb"))
                return TypeEnum.WechatpayWeb;

            if (value.Equals("molpay_boost"))
                return TypeEnum.MolpayBoost;

            if (value.Equals("wallet_IN"))
                return TypeEnum.WalletIN;

            if (value.Equals("payu_IN_cashcard"))
                return TypeEnum.PayuINCashcard;

            if (value.Equals("payu_IN_nb"))
                return TypeEnum.PayuINNb;

            if (value.Equals("upi_qr"))
                return TypeEnum.UpiQr;

            if (value.Equals("paytm"))
                return TypeEnum.Paytm;

            if (value.Equals("molpay_ebanking_VN"))
                return TypeEnum.MolpayEbankingVN;

            if (value.Equals("molpay_ebanking_MY"))
                return TypeEnum.MolpayEbankingMY;

            if (value.Equals("molpay_ebanking_direct_MY"))
                return TypeEnum.MolpayEbankingDirectMY;

            if (value.Equals("swish"))
                return TypeEnum.Swish;

            if (value.Equals("bizum"))
                return TypeEnum.Bizum;

            if (value.Equals("walley"))
                return TypeEnum.Walley;

            if (value.Equals("walley_b2b"))
                return TypeEnum.WalleyB2b;

            if (value.Equals("alma"))
                return TypeEnum.Alma;

            if (value.Equals("paypo"))
                return TypeEnum.Paypo;

            if (value.Equals("scalapay"))
                return TypeEnum.Scalapay;

            if (value.Equals("scalapay_3x"))
                return TypeEnum.Scalapay3x;

            if (value.Equals("scalapay_4x"))
                return TypeEnum.Scalapay4x;

            if (value.Equals("molpay_fpx"))
                return TypeEnum.MolpayFpx;

            if (value.Equals("konbini"))
                return TypeEnum.Konbini;

            if (value.Equals("directEbanking"))
                return TypeEnum.DirectEbanking;

            if (value.Equals("boletobancario"))
                return TypeEnum.Boletobancario;

            if (value.Equals("neteller"))
                return TypeEnum.Neteller;

            if (value.Equals("cashticket"))
                return TypeEnum.Cashticket;

            if (value.Equals("ikano"))
                return TypeEnum.Ikano;

            if (value.Equals("karenmillen"))
                return TypeEnum.Karenmillen;

            if (value.Equals("oasis"))
                return TypeEnum.Oasis;

            if (value.Equals("warehouse"))
                return TypeEnum.Warehouse;

            if (value.Equals("primeiropay_boleto"))
                return TypeEnum.PrimeiropayBoleto;

            if (value.Equals("mada"))
                return TypeEnum.Mada;

            if (value.Equals("benefit"))
                return TypeEnum.Benefit;

            if (value.Equals("knet"))
                return TypeEnum.Knet;

            if (value.Equals("omannet"))
                return TypeEnum.Omannet;

            if (value.Equals("gopay_wallet"))
                return TypeEnum.GopayWallet;

            if (value.Equals("kcp_naverpay"))
                return TypeEnum.KcpNaverpay;

            if (value.Equals("onlinebanking_IN"))
                return TypeEnum.OnlinebankingIN;

            if (value.Equals("fawry"))
                return TypeEnum.Fawry;

            if (value.Equals("atome"))
                return TypeEnum.Atome;

            if (value.Equals("moneybookers"))
                return TypeEnum.Moneybookers;

            if (value.Equals("naps"))
                return TypeEnum.Naps;

            if (value.Equals("nordea"))
                return TypeEnum.Nordea;

            if (value.Equals("boletobancario_bradesco"))
                return TypeEnum.BoletobancarioBradesco;

            if (value.Equals("boletobancario_itau"))
                return TypeEnum.BoletobancarioItau;

            if (value.Equals("boletobancario_santander"))
                return TypeEnum.BoletobancarioSantander;

            if (value.Equals("boletobancario_bancodobrasil"))
                return TypeEnum.BoletobancarioBancodobrasil;

            if (value.Equals("boletobancario_hsbc"))
                return TypeEnum.BoletobancarioHsbc;

            if (value.Equals("molpay_maybank2u"))
                return TypeEnum.MolpayMaybank2u;

            if (value.Equals("molpay_cimb"))
                return TypeEnum.MolpayCimb;

            if (value.Equals("molpay_rhb"))
                return TypeEnum.MolpayRhb;

            if (value.Equals("molpay_amb"))
                return TypeEnum.MolpayAmb;

            if (value.Equals("molpay_hlb"))
                return TypeEnum.MolpayHlb;

            if (value.Equals("molpay_affin_epg"))
                return TypeEnum.MolpayAffinEpg;

            if (value.Equals("molpay_bankislam"))
                return TypeEnum.MolpayBankislam;

            if (value.Equals("molpay_publicbank"))
                return TypeEnum.MolpayPublicbank;

            if (value.Equals("fpx_agrobank"))
                return TypeEnum.FpxAgrobank;

            if (value.Equals("touchngo"))
                return TypeEnum.Touchngo;

            if (value.Equals("maybank2u_mae"))
                return TypeEnum.Maybank2uMae;

            if (value.Equals("duitnow"))
                return TypeEnum.Duitnow;

            if (value.Equals("promptpay"))
                return TypeEnum.Promptpay;

            if (value.Equals("twint_pos"))
                return TypeEnum.TwintPos;

            if (value.Equals("alipay_hk"))
                return TypeEnum.AlipayHk;

            if (value.Equals("alipay_hk_web"))
                return TypeEnum.AlipayHkWeb;

            if (value.Equals("alipay_hk_wap"))
                return TypeEnum.AlipayHkWap;

            if (value.Equals("alipay_wap"))
                return TypeEnum.AlipayWap;

            if (value.Equals("balanceplatform"))
                return TypeEnum.Balanceplatform;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("alipay"))
                return TypeEnum.Alipay;

            if (value.Equals("multibanco"))
                return TypeEnum.Multibanco;

            if (value.Equals("bankTransfer_IBAN"))
                return TypeEnum.BankTransferIBAN;

            if (value.Equals("paybright"))
                return TypeEnum.Paybright;

            if (value.Equals("paynow"))
                return TypeEnum.Paynow;

            if (value.Equals("affirm_pos"))
                return TypeEnum.AffirmPos;

            if (value.Equals("trustly"))
                return TypeEnum.Trustly;

            if (value.Equals("trustlyvector"))
                return TypeEnum.Trustlyvector;

            if (value.Equals("oney"))
                return TypeEnum.Oney;

            if (value.Equals("facilypay"))
                return TypeEnum.Facilypay;

            if (value.Equals("facilypay_3x"))
                return TypeEnum.Facilypay3x;

            if (value.Equals("facilypay_4x"))
                return TypeEnum.Facilypay4x;

            if (value.Equals("facilypay_6x"))
                return TypeEnum.Facilypay6x;

            if (value.Equals("facilypay_10x"))
                return TypeEnum.Facilypay10x;

            if (value.Equals("facilypay_12x"))
                return TypeEnum.Facilypay12x;

            if (value.Equals("unionpay"))
                return TypeEnum.Unionpay;

            if (value.Equals("kcp_banktransfer"))
                return TypeEnum.KcpBanktransfer;

            if (value.Equals("kcp_payco"))
                return TypeEnum.KcpPayco;

            if (value.Equals("kcp_creditcard"))
                return TypeEnum.KcpCreditcard;

            if (value.Equals("wechatpaySDK"))
                return TypeEnum.WechatpaySDK;

            if (value.Equals("wechatpayQR"))
                return TypeEnum.WechatpayQR;

            if (value.Equals("wechatpayWeb"))
                return TypeEnum.WechatpayWeb;

            if (value.Equals("molpay_boost"))
                return TypeEnum.MolpayBoost;

            if (value.Equals("wallet_IN"))
                return TypeEnum.WalletIN;

            if (value.Equals("payu_IN_cashcard"))
                return TypeEnum.PayuINCashcard;

            if (value.Equals("payu_IN_nb"))
                return TypeEnum.PayuINNb;

            if (value.Equals("upi_qr"))
                return TypeEnum.UpiQr;

            if (value.Equals("paytm"))
                return TypeEnum.Paytm;

            if (value.Equals("molpay_ebanking_VN"))
                return TypeEnum.MolpayEbankingVN;

            if (value.Equals("molpay_ebanking_MY"))
                return TypeEnum.MolpayEbankingMY;

            if (value.Equals("molpay_ebanking_direct_MY"))
                return TypeEnum.MolpayEbankingDirectMY;

            if (value.Equals("swish"))
                return TypeEnum.Swish;

            if (value.Equals("bizum"))
                return TypeEnum.Bizum;

            if (value.Equals("walley"))
                return TypeEnum.Walley;

            if (value.Equals("walley_b2b"))
                return TypeEnum.WalleyB2b;

            if (value.Equals("alma"))
                return TypeEnum.Alma;

            if (value.Equals("paypo"))
                return TypeEnum.Paypo;

            if (value.Equals("scalapay"))
                return TypeEnum.Scalapay;

            if (value.Equals("scalapay_3x"))
                return TypeEnum.Scalapay3x;

            if (value.Equals("scalapay_4x"))
                return TypeEnum.Scalapay4x;

            if (value.Equals("molpay_fpx"))
                return TypeEnum.MolpayFpx;

            if (value.Equals("konbini"))
                return TypeEnum.Konbini;

            if (value.Equals("directEbanking"))
                return TypeEnum.DirectEbanking;

            if (value.Equals("boletobancario"))
                return TypeEnum.Boletobancario;

            if (value.Equals("neteller"))
                return TypeEnum.Neteller;

            if (value.Equals("cashticket"))
                return TypeEnum.Cashticket;

            if (value.Equals("ikano"))
                return TypeEnum.Ikano;

            if (value.Equals("karenmillen"))
                return TypeEnum.Karenmillen;

            if (value.Equals("oasis"))
                return TypeEnum.Oasis;

            if (value.Equals("warehouse"))
                return TypeEnum.Warehouse;

            if (value.Equals("primeiropay_boleto"))
                return TypeEnum.PrimeiropayBoleto;

            if (value.Equals("mada"))
                return TypeEnum.Mada;

            if (value.Equals("benefit"))
                return TypeEnum.Benefit;

            if (value.Equals("knet"))
                return TypeEnum.Knet;

            if (value.Equals("omannet"))
                return TypeEnum.Omannet;

            if (value.Equals("gopay_wallet"))
                return TypeEnum.GopayWallet;

            if (value.Equals("kcp_naverpay"))
                return TypeEnum.KcpNaverpay;

            if (value.Equals("onlinebanking_IN"))
                return TypeEnum.OnlinebankingIN;

            if (value.Equals("fawry"))
                return TypeEnum.Fawry;

            if (value.Equals("atome"))
                return TypeEnum.Atome;

            if (value.Equals("moneybookers"))
                return TypeEnum.Moneybookers;

            if (value.Equals("naps"))
                return TypeEnum.Naps;

            if (value.Equals("nordea"))
                return TypeEnum.Nordea;

            if (value.Equals("boletobancario_bradesco"))
                return TypeEnum.BoletobancarioBradesco;

            if (value.Equals("boletobancario_itau"))
                return TypeEnum.BoletobancarioItau;

            if (value.Equals("boletobancario_santander"))
                return TypeEnum.BoletobancarioSantander;

            if (value.Equals("boletobancario_bancodobrasil"))
                return TypeEnum.BoletobancarioBancodobrasil;

            if (value.Equals("boletobancario_hsbc"))
                return TypeEnum.BoletobancarioHsbc;

            if (value.Equals("molpay_maybank2u"))
                return TypeEnum.MolpayMaybank2u;

            if (value.Equals("molpay_cimb"))
                return TypeEnum.MolpayCimb;

            if (value.Equals("molpay_rhb"))
                return TypeEnum.MolpayRhb;

            if (value.Equals("molpay_amb"))
                return TypeEnum.MolpayAmb;

            if (value.Equals("molpay_hlb"))
                return TypeEnum.MolpayHlb;

            if (value.Equals("molpay_affin_epg"))
                return TypeEnum.MolpayAffinEpg;

            if (value.Equals("molpay_bankislam"))
                return TypeEnum.MolpayBankislam;

            if (value.Equals("molpay_publicbank"))
                return TypeEnum.MolpayPublicbank;

            if (value.Equals("fpx_agrobank"))
                return TypeEnum.FpxAgrobank;

            if (value.Equals("touchngo"))
                return TypeEnum.Touchngo;

            if (value.Equals("maybank2u_mae"))
                return TypeEnum.Maybank2uMae;

            if (value.Equals("duitnow"))
                return TypeEnum.Duitnow;

            if (value.Equals("promptpay"))
                return TypeEnum.Promptpay;

            if (value.Equals("twint_pos"))
                return TypeEnum.TwintPos;

            if (value.Equals("alipay_hk"))
                return TypeEnum.AlipayHk;

            if (value.Equals("alipay_hk_web"))
                return TypeEnum.AlipayHkWeb;

            if (value.Equals("alipay_hk_wap"))
                return TypeEnum.AlipayHkWap;

            if (value.Equals("alipay_wap"))
                return TypeEnum.AlipayWap;

            if (value.Equals("balanceplatform"))
                return TypeEnum.Balanceplatform;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Alipay)
                return "alipay";

            if (value == TypeEnum.Multibanco)
                return "multibanco";

            if (value == TypeEnum.BankTransferIBAN)
                return "bankTransfer_IBAN";

            if (value == TypeEnum.Paybright)
                return "paybright";

            if (value == TypeEnum.Paynow)
                return "paynow";

            if (value == TypeEnum.AffirmPos)
                return "affirm_pos";

            if (value == TypeEnum.Trustly)
                return "trustly";

            if (value == TypeEnum.Trustlyvector)
                return "trustlyvector";

            if (value == TypeEnum.Oney)
                return "oney";

            if (value == TypeEnum.Facilypay)
                return "facilypay";

            if (value == TypeEnum.Facilypay3x)
                return "facilypay_3x";

            if (value == TypeEnum.Facilypay4x)
                return "facilypay_4x";

            if (value == TypeEnum.Facilypay6x)
                return "facilypay_6x";

            if (value == TypeEnum.Facilypay10x)
                return "facilypay_10x";

            if (value == TypeEnum.Facilypay12x)
                return "facilypay_12x";

            if (value == TypeEnum.Unionpay)
                return "unionpay";

            if (value == TypeEnum.KcpBanktransfer)
                return "kcp_banktransfer";

            if (value == TypeEnum.KcpPayco)
                return "kcp_payco";

            if (value == TypeEnum.KcpCreditcard)
                return "kcp_creditcard";

            if (value == TypeEnum.WechatpaySDK)
                return "wechatpaySDK";

            if (value == TypeEnum.WechatpayQR)
                return "wechatpayQR";

            if (value == TypeEnum.WechatpayWeb)
                return "wechatpayWeb";

            if (value == TypeEnum.MolpayBoost)
                return "molpay_boost";

            if (value == TypeEnum.WalletIN)
                return "wallet_IN";

            if (value == TypeEnum.PayuINCashcard)
                return "payu_IN_cashcard";

            if (value == TypeEnum.PayuINNb)
                return "payu_IN_nb";

            if (value == TypeEnum.UpiQr)
                return "upi_qr";

            if (value == TypeEnum.Paytm)
                return "paytm";

            if (value == TypeEnum.MolpayEbankingVN)
                return "molpay_ebanking_VN";

            if (value == TypeEnum.MolpayEbankingMY)
                return "molpay_ebanking_MY";

            if (value == TypeEnum.MolpayEbankingDirectMY)
                return "molpay_ebanking_direct_MY";

            if (value == TypeEnum.Swish)
                return "swish";

            if (value == TypeEnum.Bizum)
                return "bizum";

            if (value == TypeEnum.Walley)
                return "walley";

            if (value == TypeEnum.WalleyB2b)
                return "walley_b2b";

            if (value == TypeEnum.Alma)
                return "alma";

            if (value == TypeEnum.Paypo)
                return "paypo";

            if (value == TypeEnum.Scalapay)
                return "scalapay";

            if (value == TypeEnum.Scalapay3x)
                return "scalapay_3x";

            if (value == TypeEnum.Scalapay4x)
                return "scalapay_4x";

            if (value == TypeEnum.MolpayFpx)
                return "molpay_fpx";

            if (value == TypeEnum.Konbini)
                return "konbini";

            if (value == TypeEnum.DirectEbanking)
                return "directEbanking";

            if (value == TypeEnum.Boletobancario)
                return "boletobancario";

            if (value == TypeEnum.Neteller)
                return "neteller";

            if (value == TypeEnum.Cashticket)
                return "cashticket";

            if (value == TypeEnum.Ikano)
                return "ikano";

            if (value == TypeEnum.Karenmillen)
                return "karenmillen";

            if (value == TypeEnum.Oasis)
                return "oasis";

            if (value == TypeEnum.Warehouse)
                return "warehouse";

            if (value == TypeEnum.PrimeiropayBoleto)
                return "primeiropay_boleto";

            if (value == TypeEnum.Mada)
                return "mada";

            if (value == TypeEnum.Benefit)
                return "benefit";

            if (value == TypeEnum.Knet)
                return "knet";

            if (value == TypeEnum.Omannet)
                return "omannet";

            if (value == TypeEnum.GopayWallet)
                return "gopay_wallet";

            if (value == TypeEnum.KcpNaverpay)
                return "kcp_naverpay";

            if (value == TypeEnum.OnlinebankingIN)
                return "onlinebanking_IN";

            if (value == TypeEnum.Fawry)
                return "fawry";

            if (value == TypeEnum.Atome)
                return "atome";

            if (value == TypeEnum.Moneybookers)
                return "moneybookers";

            if (value == TypeEnum.Naps)
                return "naps";

            if (value == TypeEnum.Nordea)
                return "nordea";

            if (value == TypeEnum.BoletobancarioBradesco)
                return "boletobancario_bradesco";

            if (value == TypeEnum.BoletobancarioItau)
                return "boletobancario_itau";

            if (value == TypeEnum.BoletobancarioSantander)
                return "boletobancario_santander";

            if (value == TypeEnum.BoletobancarioBancodobrasil)
                return "boletobancario_bancodobrasil";

            if (value == TypeEnum.BoletobancarioHsbc)
                return "boletobancario_hsbc";

            if (value == TypeEnum.MolpayMaybank2u)
                return "molpay_maybank2u";

            if (value == TypeEnum.MolpayCimb)
                return "molpay_cimb";

            if (value == TypeEnum.MolpayRhb)
                return "molpay_rhb";

            if (value == TypeEnum.MolpayAmb)
                return "molpay_amb";

            if (value == TypeEnum.MolpayHlb)
                return "molpay_hlb";

            if (value == TypeEnum.MolpayAffinEpg)
                return "molpay_affin_epg";

            if (value == TypeEnum.MolpayBankislam)
                return "molpay_bankislam";

            if (value == TypeEnum.MolpayPublicbank)
                return "molpay_publicbank";

            if (value == TypeEnum.FpxAgrobank)
                return "fpx_agrobank";

            if (value == TypeEnum.Touchngo)
                return "touchngo";

            if (value == TypeEnum.Maybank2uMae)
                return "maybank2u_mae";

            if (value == TypeEnum.Duitnow)
                return "duitnow";

            if (value == TypeEnum.Promptpay)
                return "promptpay";

            if (value == TypeEnum.TwintPos)
                return "twint_pos";

            if (value == TypeEnum.AlipayHk)
                return "alipay_hk";

            if (value == TypeEnum.AlipayHkWeb)
                return "alipay_hk_web";

            if (value == TypeEnum.AlipayHkWap)
                return "alipay_hk_wap";

            if (value == TypeEnum.AlipayWap)
                return "alipay_wap";

            if (value == TypeEnum.Balanceplatform)
                return "balanceplatform";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// The payment method type.
        /// </summary>
        /// <value>The payment method type.</value>
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of CheckoutAttemptId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CheckoutAttemptIdOption { get; private set; }

        /// <summary>
        /// The checkout attempt identifier.
        /// </summary>
        /// <value>The checkout attempt identifier.</value>
        [JsonPropertyName("checkoutAttemptId")]
        public string CheckoutAttemptId { get { return this.CheckoutAttemptIdOption; } set { this.CheckoutAttemptIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentDetails {\n");
            sb.Append("  CheckoutAttemptId: ").Append(CheckoutAttemptId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentDetails" />
    /// </summary>
    public class PaymentDetailsJsonConverter : JsonConverter<PaymentDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> checkoutAttemptId = default;
            Option<PaymentDetails.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "checkoutAttemptId":
                            checkoutAttemptId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<PaymentDetails.TypeEnum?>(PaymentDetails.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (checkoutAttemptId.IsSet && checkoutAttemptId.Value == null)
                throw new ArgumentNullException(nameof(checkoutAttemptId), "Property is not nullable for class PaymentDetails.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PaymentDetails.");

            return new PaymentDetails(checkoutAttemptId, type);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentDetails paymentDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentDetails paymentDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentDetails.CheckoutAttemptIdOption.IsSet && paymentDetails.CheckoutAttemptId == null)
                throw new ArgumentNullException(nameof(paymentDetails.CheckoutAttemptId), "Property is required for class PaymentDetails.");

            if (paymentDetails.CheckoutAttemptIdOption.IsSet)
                writer.WriteString("checkoutAttemptId", paymentDetails.CheckoutAttemptId);

            var typeRawValue = PaymentDetails.TypeEnumToJsonValue(paymentDetails.TypeOption.Value.Value);
            writer.WriteString("type", typeRawValue);
        }
    }
}
