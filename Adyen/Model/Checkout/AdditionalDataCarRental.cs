// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataCarRental
    /// </summary>
    public partial class AdditionalDataCarRental : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataCarRental" /> class.
        /// </summary>
        /// <param name="carRentalCheckOutDate">The pick-up date. * Date format: &#x60;yyyyMMdd&#x60;</param>
        /// <param name="carRentalCustomerServiceTollFreeNumber">The customer service phone number of the car rental company. * Format: Alphanumeric * maxLength: 17 * For US and CA numbers must be 10 characters in length * Must not start with a space * Must not contain any special characters such as + or - *Must not be all zeros.</param>
        /// <param name="carRentalDaysRented">Number of days for which the car is being rented. * Format: Numeric * maxLength: 4 * Must not be all spaces</param>
        /// <param name="carRentalFuelCharges">Any fuel charges associated with the rental, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: Numeric * maxLength: 12</param>
        /// <param name="carRentalInsuranceCharges">Any insurance charges associated with the rental, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: Numeric * maxLength: 12 * Must not be all spaces *Must not be all zeros.</param>
        /// <param name="carRentalLocationCity">The city where the car is rented. * Format: Alphanumeric * maxLength: 18 * Must not start with a space or be all spaces *Must not be all zeros.</param>
        /// <param name="carRentalLocationCountry">The country where the car is rented, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. * Format: Alphanumeric * maxLength: 2</param>
        /// <param name="carRentalLocationStateProvince">The state or province where the car is rented. * Format: Alphanumeric * maxLength: 2 * Must not start with a space or be all spaces *Must not be all zeros.</param>
        /// <param name="carRentalNoShowIndicator">Indicates if the customer didn&#39;t pick up their rental car. * Y - Customer did not pick up their car * N - Not applicable</param>
        /// <param name="carRentalOneWayDropOffCharges">The charge for not returning a car to the original rental location, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * maxLength: 12</param>
        /// <param name="carRentalRate">The daily rental rate, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: Alphanumeric * maxLength: 12</param>
        /// <param name="carRentalRateIndicator">Specifies whether the given rate is applied daily or weekly. * D - Daily rate * W - Weekly rate</param>
        /// <param name="carRentalRentalAgreementNumber">The rental agreement number for the car rental. * Format: Alphanumeric * maxLength: 9 * Must not start with a space or be all spaces *Must not be all zeros.</param>
        /// <param name="carRentalRentalClassId">The classification of the rental car. * Format: Alphanumeric * maxLength: 4 * Must not start with a space or be all spaces *Must not be all zeros.</param>
        /// <param name="carRentalRenterName">The name of the person renting the car. * Format: Alphanumeric * maxLength: 26 * If you send more than 26 characters, the name is truncated * Must not start with a space or be all spaces *Must not be all zeros.</param>
        /// <param name="carRentalReturnCity">The city where the car must be returned. * Format: Alphanumeric * maxLength: 18 * Must not start with a space or be all spaces *Must not be all zeros.</param>
        /// <param name="carRentalReturnCountry">The country where the car must be returned, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. * Format: Alphanumeric * maxLength: 2</param>
        /// <param name="carRentalReturnDate">The last date to return the car by. * Date format: &#x60;yyyyMMdd&#x60; * maxLength: 8</param>
        /// <param name="carRentalReturnLocationId">The agency code, phone number, or address abbreviation * Format: Alphanumeric * maxLength: 10 * Must not start with a space or be all spaces *Must not be all zeros.</param>
        /// <param name="carRentalReturnStateProvince">The state or province where the car must be returned. * Format: Alphanumeric * maxLength: 3 * Must not start with a space or be all spaces *Must not be all zeros.</param>
        /// <param name="carRentalTaxExemptIndicator">Indicates if the goods or services were tax-exempt, or if tax was not paid on them.  Values: * Y - Goods or services were tax exempt * N - Tax was not collected</param>
        /// <param name="travelEntertainmentAuthDataDuration">Number of days the car is rented for. This should be included in the auth message. * Format: Numeric * maxLength: 4</param>
        /// <param name="travelEntertainmentAuthDataMarket">Indicates what market-specific dataset will be submitted or is being submitted. Value should be &#39;A&#39; for car rental. This should be included in the auth message. * Format: Alphanumeric * maxLength: 1</param>
        [JsonConstructor]
        public AdditionalDataCarRental(Option<string> carRentalCheckOutDate = default, Option<string> carRentalCustomerServiceTollFreeNumber = default, Option<string> carRentalDaysRented = default, Option<string> carRentalFuelCharges = default, Option<string> carRentalInsuranceCharges = default, Option<string> carRentalLocationCity = default, Option<string> carRentalLocationCountry = default, Option<string> carRentalLocationStateProvince = default, Option<string> carRentalNoShowIndicator = default, Option<string> carRentalOneWayDropOffCharges = default, Option<string> carRentalRate = default, Option<string> carRentalRateIndicator = default, Option<string> carRentalRentalAgreementNumber = default, Option<string> carRentalRentalClassId = default, Option<string> carRentalRenterName = default, Option<string> carRentalReturnCity = default, Option<string> carRentalReturnCountry = default, Option<string> carRentalReturnDate = default, Option<string> carRentalReturnLocationId = default, Option<string> carRentalReturnStateProvince = default, Option<string> carRentalTaxExemptIndicator = default, Option<string> travelEntertainmentAuthDataDuration = default, Option<string> travelEntertainmentAuthDataMarket = default)
        {
            CarRentalCheckOutDateOption = carRentalCheckOutDate;
            CarRentalCustomerServiceTollFreeNumberOption = carRentalCustomerServiceTollFreeNumber;
            CarRentalDaysRentedOption = carRentalDaysRented;
            CarRentalFuelChargesOption = carRentalFuelCharges;
            CarRentalInsuranceChargesOption = carRentalInsuranceCharges;
            CarRentalLocationCityOption = carRentalLocationCity;
            CarRentalLocationCountryOption = carRentalLocationCountry;
            CarRentalLocationStateProvinceOption = carRentalLocationStateProvince;
            CarRentalNoShowIndicatorOption = carRentalNoShowIndicator;
            CarRentalOneWayDropOffChargesOption = carRentalOneWayDropOffCharges;
            CarRentalRateOption = carRentalRate;
            CarRentalRateIndicatorOption = carRentalRateIndicator;
            CarRentalRentalAgreementNumberOption = carRentalRentalAgreementNumber;
            CarRentalRentalClassIdOption = carRentalRentalClassId;
            CarRentalRenterNameOption = carRentalRenterName;
            CarRentalReturnCityOption = carRentalReturnCity;
            CarRentalReturnCountryOption = carRentalReturnCountry;
            CarRentalReturnDateOption = carRentalReturnDate;
            CarRentalReturnLocationIdOption = carRentalReturnLocationId;
            CarRentalReturnStateProvinceOption = carRentalReturnStateProvince;
            CarRentalTaxExemptIndicatorOption = carRentalTaxExemptIndicator;
            TravelEntertainmentAuthDataDurationOption = travelEntertainmentAuthDataDuration;
            TravelEntertainmentAuthDataMarketOption = travelEntertainmentAuthDataMarket;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CarRentalCheckOutDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalCheckOutDateOption { get; private set; }

        /// <summary>
        /// The pick-up date. * Date format: &#x60;yyyyMMdd&#x60;
        /// </summary>
        /// <value>The pick-up date. * Date format: &#x60;yyyyMMdd&#x60;</value>
        [JsonPropertyName("carRental.checkOutDate")]
        public string CarRentalCheckOutDate { get { return this.CarRentalCheckOutDateOption; } set { this.CarRentalCheckOutDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalCustomerServiceTollFreeNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalCustomerServiceTollFreeNumberOption { get; private set; }

        /// <summary>
        /// The customer service phone number of the car rental company. * Format: Alphanumeric * maxLength: 17 * For US and CA numbers must be 10 characters in length * Must not start with a space * Must not contain any special characters such as + or - *Must not be all zeros.
        /// </summary>
        /// <value>The customer service phone number of the car rental company. * Format: Alphanumeric * maxLength: 17 * For US and CA numbers must be 10 characters in length * Must not start with a space * Must not contain any special characters such as + or - *Must not be all zeros.</value>
        [JsonPropertyName("carRental.customerServiceTollFreeNumber")]
        public string CarRentalCustomerServiceTollFreeNumber { get { return this.CarRentalCustomerServiceTollFreeNumberOption; } set { this.CarRentalCustomerServiceTollFreeNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalDaysRented
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalDaysRentedOption { get; private set; }

        /// <summary>
        /// Number of days for which the car is being rented. * Format: Numeric * maxLength: 4 * Must not be all spaces
        /// </summary>
        /// <value>Number of days for which the car is being rented. * Format: Numeric * maxLength: 4 * Must not be all spaces</value>
        [JsonPropertyName("carRental.daysRented")]
        public string CarRentalDaysRented { get { return this.CarRentalDaysRentedOption; } set { this.CarRentalDaysRentedOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalFuelCharges
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalFuelChargesOption { get; private set; }

        /// <summary>
        /// Any fuel charges associated with the rental, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: Numeric * maxLength: 12
        /// </summary>
        /// <value>Any fuel charges associated with the rental, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: Numeric * maxLength: 12</value>
        [JsonPropertyName("carRental.fuelCharges")]
        public string CarRentalFuelCharges { get { return this.CarRentalFuelChargesOption; } set { this.CarRentalFuelChargesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalInsuranceCharges
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalInsuranceChargesOption { get; private set; }

        /// <summary>
        /// Any insurance charges associated with the rental, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: Numeric * maxLength: 12 * Must not be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>Any insurance charges associated with the rental, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: Numeric * maxLength: 12 * Must not be all spaces *Must not be all zeros.</value>
        [JsonPropertyName("carRental.insuranceCharges")]
        public string CarRentalInsuranceCharges { get { return this.CarRentalInsuranceChargesOption; } set { this.CarRentalInsuranceChargesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalLocationCity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalLocationCityOption { get; private set; }

        /// <summary>
        /// The city where the car is rented. * Format: Alphanumeric * maxLength: 18 * Must not start with a space or be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The city where the car is rented. * Format: Alphanumeric * maxLength: 18 * Must not start with a space or be all spaces *Must not be all zeros.</value>
        [JsonPropertyName("carRental.locationCity")]
        public string CarRentalLocationCity { get { return this.CarRentalLocationCityOption; } set { this.CarRentalLocationCityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalLocationCountry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalLocationCountryOption { get; private set; }

        /// <summary>
        /// The country where the car is rented, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. * Format: Alphanumeric * maxLength: 2
        /// </summary>
        /// <value>The country where the car is rented, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. * Format: Alphanumeric * maxLength: 2</value>
        [JsonPropertyName("carRental.locationCountry")]
        public string CarRentalLocationCountry { get { return this.CarRentalLocationCountryOption; } set { this.CarRentalLocationCountryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalLocationStateProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalLocationStateProvinceOption { get; private set; }

        /// <summary>
        /// The state or province where the car is rented. * Format: Alphanumeric * maxLength: 2 * Must not start with a space or be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The state or province where the car is rented. * Format: Alphanumeric * maxLength: 2 * Must not start with a space or be all spaces *Must not be all zeros.</value>
        [JsonPropertyName("carRental.locationStateProvince")]
        public string CarRentalLocationStateProvince { get { return this.CarRentalLocationStateProvinceOption; } set { this.CarRentalLocationStateProvinceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalNoShowIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalNoShowIndicatorOption { get; private set; }

        /// <summary>
        /// Indicates if the customer didn&#39;t pick up their rental car. * Y - Customer did not pick up their car * N - Not applicable
        /// </summary>
        /// <value>Indicates if the customer didn&#39;t pick up their rental car. * Y - Customer did not pick up their car * N - Not applicable</value>
        [JsonPropertyName("carRental.noShowIndicator")]
        public string CarRentalNoShowIndicator { get { return this.CarRentalNoShowIndicatorOption; } set { this.CarRentalNoShowIndicatorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalOneWayDropOffCharges
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalOneWayDropOffChargesOption { get; private set; }

        /// <summary>
        /// The charge for not returning a car to the original rental location, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * maxLength: 12
        /// </summary>
        /// <value>The charge for not returning a car to the original rental location, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * maxLength: 12</value>
        [JsonPropertyName("carRental.oneWayDropOffCharges")]
        public string CarRentalOneWayDropOffCharges { get { return this.CarRentalOneWayDropOffChargesOption; } set { this.CarRentalOneWayDropOffChargesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalRateOption { get; private set; }

        /// <summary>
        /// The daily rental rate, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: Alphanumeric * maxLength: 12
        /// </summary>
        /// <value>The daily rental rate, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Format: Alphanumeric * maxLength: 12</value>
        [JsonPropertyName("carRental.rate")]
        public string CarRentalRate { get { return this.CarRentalRateOption; } set { this.CarRentalRateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalRateIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalRateIndicatorOption { get; private set; }

        /// <summary>
        /// Specifies whether the given rate is applied daily or weekly. * D - Daily rate * W - Weekly rate
        /// </summary>
        /// <value>Specifies whether the given rate is applied daily or weekly. * D - Daily rate * W - Weekly rate</value>
        [JsonPropertyName("carRental.rateIndicator")]
        public string CarRentalRateIndicator { get { return this.CarRentalRateIndicatorOption; } set { this.CarRentalRateIndicatorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalRentalAgreementNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalRentalAgreementNumberOption { get; private set; }

        /// <summary>
        /// The rental agreement number for the car rental. * Format: Alphanumeric * maxLength: 9 * Must not start with a space or be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The rental agreement number for the car rental. * Format: Alphanumeric * maxLength: 9 * Must not start with a space or be all spaces *Must not be all zeros.</value>
        [JsonPropertyName("carRental.rentalAgreementNumber")]
        public string CarRentalRentalAgreementNumber { get { return this.CarRentalRentalAgreementNumberOption; } set { this.CarRentalRentalAgreementNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalRentalClassId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalRentalClassIdOption { get; private set; }

        /// <summary>
        /// The classification of the rental car. * Format: Alphanumeric * maxLength: 4 * Must not start with a space or be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The classification of the rental car. * Format: Alphanumeric * maxLength: 4 * Must not start with a space or be all spaces *Must not be all zeros.</value>
        [JsonPropertyName("carRental.rentalClassId")]
        public string CarRentalRentalClassId { get { return this.CarRentalRentalClassIdOption; } set { this.CarRentalRentalClassIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalRenterName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalRenterNameOption { get; private set; }

        /// <summary>
        /// The name of the person renting the car. * Format: Alphanumeric * maxLength: 26 * If you send more than 26 characters, the name is truncated * Must not start with a space or be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The name of the person renting the car. * Format: Alphanumeric * maxLength: 26 * If you send more than 26 characters, the name is truncated * Must not start with a space or be all spaces *Must not be all zeros.</value>
        [JsonPropertyName("carRental.renterName")]
        public string CarRentalRenterName { get { return this.CarRentalRenterNameOption; } set { this.CarRentalRenterNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalReturnCity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalReturnCityOption { get; private set; }

        /// <summary>
        /// The city where the car must be returned. * Format: Alphanumeric * maxLength: 18 * Must not start with a space or be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The city where the car must be returned. * Format: Alphanumeric * maxLength: 18 * Must not start with a space or be all spaces *Must not be all zeros.</value>
        [JsonPropertyName("carRental.returnCity")]
        public string CarRentalReturnCity { get { return this.CarRentalReturnCityOption; } set { this.CarRentalReturnCityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalReturnCountry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalReturnCountryOption { get; private set; }

        /// <summary>
        /// The country where the car must be returned, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. * Format: Alphanumeric * maxLength: 2
        /// </summary>
        /// <value>The country where the car must be returned, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. * Format: Alphanumeric * maxLength: 2</value>
        [JsonPropertyName("carRental.returnCountry")]
        public string CarRentalReturnCountry { get { return this.CarRentalReturnCountryOption; } set { this.CarRentalReturnCountryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalReturnDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalReturnDateOption { get; private set; }

        /// <summary>
        /// The last date to return the car by. * Date format: &#x60;yyyyMMdd&#x60; * maxLength: 8
        /// </summary>
        /// <value>The last date to return the car by. * Date format: &#x60;yyyyMMdd&#x60; * maxLength: 8</value>
        [JsonPropertyName("carRental.returnDate")]
        public string CarRentalReturnDate { get { return this.CarRentalReturnDateOption; } set { this.CarRentalReturnDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalReturnLocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalReturnLocationIdOption { get; private set; }

        /// <summary>
        /// The agency code, phone number, or address abbreviation * Format: Alphanumeric * maxLength: 10 * Must not start with a space or be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The agency code, phone number, or address abbreviation * Format: Alphanumeric * maxLength: 10 * Must not start with a space or be all spaces *Must not be all zeros.</value>
        [JsonPropertyName("carRental.returnLocationId")]
        public string CarRentalReturnLocationId { get { return this.CarRentalReturnLocationIdOption; } set { this.CarRentalReturnLocationIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalReturnStateProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalReturnStateProvinceOption { get; private set; }

        /// <summary>
        /// The state or province where the car must be returned. * Format: Alphanumeric * maxLength: 3 * Must not start with a space or be all spaces *Must not be all zeros.
        /// </summary>
        /// <value>The state or province where the car must be returned. * Format: Alphanumeric * maxLength: 3 * Must not start with a space or be all spaces *Must not be all zeros.</value>
        [JsonPropertyName("carRental.returnStateProvince")]
        public string CarRentalReturnStateProvince { get { return this.CarRentalReturnStateProvinceOption; } set { this.CarRentalReturnStateProvinceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarRentalTaxExemptIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarRentalTaxExemptIndicatorOption { get; private set; }

        /// <summary>
        /// Indicates if the goods or services were tax-exempt, or if tax was not paid on them.  Values: * Y - Goods or services were tax exempt * N - Tax was not collected
        /// </summary>
        /// <value>Indicates if the goods or services were tax-exempt, or if tax was not paid on them.  Values: * Y - Goods or services were tax exempt * N - Tax was not collected</value>
        [JsonPropertyName("carRental.taxExemptIndicator")]
        public string CarRentalTaxExemptIndicator { get { return this.CarRentalTaxExemptIndicatorOption; } set { this.CarRentalTaxExemptIndicatorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TravelEntertainmentAuthDataDuration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TravelEntertainmentAuthDataDurationOption { get; private set; }

        /// <summary>
        /// Number of days the car is rented for. This should be included in the auth message. * Format: Numeric * maxLength: 4
        /// </summary>
        /// <value>Number of days the car is rented for. This should be included in the auth message. * Format: Numeric * maxLength: 4</value>
        [JsonPropertyName("travelEntertainmentAuthData.duration")]
        public string TravelEntertainmentAuthDataDuration { get { return this.TravelEntertainmentAuthDataDurationOption; } set { this.TravelEntertainmentAuthDataDurationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TravelEntertainmentAuthDataMarket
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TravelEntertainmentAuthDataMarketOption { get; private set; }

        /// <summary>
        /// Indicates what market-specific dataset will be submitted or is being submitted. Value should be &#39;A&#39; for car rental. This should be included in the auth message. * Format: Alphanumeric * maxLength: 1
        /// </summary>
        /// <value>Indicates what market-specific dataset will be submitted or is being submitted. Value should be &#39;A&#39; for car rental. This should be included in the auth message. * Format: Alphanumeric * maxLength: 1</value>
        [JsonPropertyName("travelEntertainmentAuthData.market")]
        public string TravelEntertainmentAuthDataMarket { get { return this.TravelEntertainmentAuthDataMarketOption; } set { this.TravelEntertainmentAuthDataMarketOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataCarRental {\n");
            sb.Append("  CarRentalCheckOutDate: ").Append(CarRentalCheckOutDate).Append("\n");
            sb.Append("  CarRentalCustomerServiceTollFreeNumber: ").Append(CarRentalCustomerServiceTollFreeNumber).Append("\n");
            sb.Append("  CarRentalDaysRented: ").Append(CarRentalDaysRented).Append("\n");
            sb.Append("  CarRentalFuelCharges: ").Append(CarRentalFuelCharges).Append("\n");
            sb.Append("  CarRentalInsuranceCharges: ").Append(CarRentalInsuranceCharges).Append("\n");
            sb.Append("  CarRentalLocationCity: ").Append(CarRentalLocationCity).Append("\n");
            sb.Append("  CarRentalLocationCountry: ").Append(CarRentalLocationCountry).Append("\n");
            sb.Append("  CarRentalLocationStateProvince: ").Append(CarRentalLocationStateProvince).Append("\n");
            sb.Append("  CarRentalNoShowIndicator: ").Append(CarRentalNoShowIndicator).Append("\n");
            sb.Append("  CarRentalOneWayDropOffCharges: ").Append(CarRentalOneWayDropOffCharges).Append("\n");
            sb.Append("  CarRentalRate: ").Append(CarRentalRate).Append("\n");
            sb.Append("  CarRentalRateIndicator: ").Append(CarRentalRateIndicator).Append("\n");
            sb.Append("  CarRentalRentalAgreementNumber: ").Append(CarRentalRentalAgreementNumber).Append("\n");
            sb.Append("  CarRentalRentalClassId: ").Append(CarRentalRentalClassId).Append("\n");
            sb.Append("  CarRentalRenterName: ").Append(CarRentalRenterName).Append("\n");
            sb.Append("  CarRentalReturnCity: ").Append(CarRentalReturnCity).Append("\n");
            sb.Append("  CarRentalReturnCountry: ").Append(CarRentalReturnCountry).Append("\n");
            sb.Append("  CarRentalReturnDate: ").Append(CarRentalReturnDate).Append("\n");
            sb.Append("  CarRentalReturnLocationId: ").Append(CarRentalReturnLocationId).Append("\n");
            sb.Append("  CarRentalReturnStateProvince: ").Append(CarRentalReturnStateProvince).Append("\n");
            sb.Append("  CarRentalTaxExemptIndicator: ").Append(CarRentalTaxExemptIndicator).Append("\n");
            sb.Append("  TravelEntertainmentAuthDataDuration: ").Append(TravelEntertainmentAuthDataDuration).Append("\n");
            sb.Append("  TravelEntertainmentAuthDataMarket: ").Append(TravelEntertainmentAuthDataMarket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalDataCarRental" />
    /// </summary>
    public class AdditionalDataCarRentalJsonConverter : JsonConverter<AdditionalDataCarRental>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalDataCarRental" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalDataCarRental Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> carRentalCheckOutDate = default;
            Option<string> carRentalCustomerServiceTollFreeNumber = default;
            Option<string> carRentalDaysRented = default;
            Option<string> carRentalFuelCharges = default;
            Option<string> carRentalInsuranceCharges = default;
            Option<string> carRentalLocationCity = default;
            Option<string> carRentalLocationCountry = default;
            Option<string> carRentalLocationStateProvince = default;
            Option<string> carRentalNoShowIndicator = default;
            Option<string> carRentalOneWayDropOffCharges = default;
            Option<string> carRentalRate = default;
            Option<string> carRentalRateIndicator = default;
            Option<string> carRentalRentalAgreementNumber = default;
            Option<string> carRentalRentalClassId = default;
            Option<string> carRentalRenterName = default;
            Option<string> carRentalReturnCity = default;
            Option<string> carRentalReturnCountry = default;
            Option<string> carRentalReturnDate = default;
            Option<string> carRentalReturnLocationId = default;
            Option<string> carRentalReturnStateProvince = default;
            Option<string> carRentalTaxExemptIndicator = default;
            Option<string> travelEntertainmentAuthDataDuration = default;
            Option<string> travelEntertainmentAuthDataMarket = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "carRental.checkOutDate":
                            carRentalCheckOutDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.customerServiceTollFreeNumber":
                            carRentalCustomerServiceTollFreeNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.daysRented":
                            carRentalDaysRented = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.fuelCharges":
                            carRentalFuelCharges = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.insuranceCharges":
                            carRentalInsuranceCharges = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.locationCity":
                            carRentalLocationCity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.locationCountry":
                            carRentalLocationCountry = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.locationStateProvince":
                            carRentalLocationStateProvince = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.noShowIndicator":
                            carRentalNoShowIndicator = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.oneWayDropOffCharges":
                            carRentalOneWayDropOffCharges = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.rate":
                            carRentalRate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.rateIndicator":
                            carRentalRateIndicator = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.rentalAgreementNumber":
                            carRentalRentalAgreementNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.rentalClassId":
                            carRentalRentalClassId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.renterName":
                            carRentalRenterName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.returnCity":
                            carRentalReturnCity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.returnCountry":
                            carRentalReturnCountry = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.returnDate":
                            carRentalReturnDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.returnLocationId":
                            carRentalReturnLocationId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.returnStateProvince":
                            carRentalReturnStateProvince = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carRental.taxExemptIndicator":
                            carRentalTaxExemptIndicator = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "travelEntertainmentAuthData.duration":
                            travelEntertainmentAuthDataDuration = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "travelEntertainmentAuthData.market":
                            travelEntertainmentAuthDataMarket = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (carRentalCheckOutDate.IsSet && carRentalCheckOutDate.Value == null)
                throw new ArgumentNullException(nameof(carRentalCheckOutDate), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalCustomerServiceTollFreeNumber.IsSet && carRentalCustomerServiceTollFreeNumber.Value == null)
                throw new ArgumentNullException(nameof(carRentalCustomerServiceTollFreeNumber), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalDaysRented.IsSet && carRentalDaysRented.Value == null)
                throw new ArgumentNullException(nameof(carRentalDaysRented), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalFuelCharges.IsSet && carRentalFuelCharges.Value == null)
                throw new ArgumentNullException(nameof(carRentalFuelCharges), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalInsuranceCharges.IsSet && carRentalInsuranceCharges.Value == null)
                throw new ArgumentNullException(nameof(carRentalInsuranceCharges), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalLocationCity.IsSet && carRentalLocationCity.Value == null)
                throw new ArgumentNullException(nameof(carRentalLocationCity), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalLocationCountry.IsSet && carRentalLocationCountry.Value == null)
                throw new ArgumentNullException(nameof(carRentalLocationCountry), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalLocationStateProvince.IsSet && carRentalLocationStateProvince.Value == null)
                throw new ArgumentNullException(nameof(carRentalLocationStateProvince), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalNoShowIndicator.IsSet && carRentalNoShowIndicator.Value == null)
                throw new ArgumentNullException(nameof(carRentalNoShowIndicator), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalOneWayDropOffCharges.IsSet && carRentalOneWayDropOffCharges.Value == null)
                throw new ArgumentNullException(nameof(carRentalOneWayDropOffCharges), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalRate.IsSet && carRentalRate.Value == null)
                throw new ArgumentNullException(nameof(carRentalRate), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalRateIndicator.IsSet && carRentalRateIndicator.Value == null)
                throw new ArgumentNullException(nameof(carRentalRateIndicator), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalRentalAgreementNumber.IsSet && carRentalRentalAgreementNumber.Value == null)
                throw new ArgumentNullException(nameof(carRentalRentalAgreementNumber), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalRentalClassId.IsSet && carRentalRentalClassId.Value == null)
                throw new ArgumentNullException(nameof(carRentalRentalClassId), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalRenterName.IsSet && carRentalRenterName.Value == null)
                throw new ArgumentNullException(nameof(carRentalRenterName), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalReturnCity.IsSet && carRentalReturnCity.Value == null)
                throw new ArgumentNullException(nameof(carRentalReturnCity), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalReturnCountry.IsSet && carRentalReturnCountry.Value == null)
                throw new ArgumentNullException(nameof(carRentalReturnCountry), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalReturnDate.IsSet && carRentalReturnDate.Value == null)
                throw new ArgumentNullException(nameof(carRentalReturnDate), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalReturnLocationId.IsSet && carRentalReturnLocationId.Value == null)
                throw new ArgumentNullException(nameof(carRentalReturnLocationId), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalReturnStateProvince.IsSet && carRentalReturnStateProvince.Value == null)
                throw new ArgumentNullException(nameof(carRentalReturnStateProvince), "Property is not nullable for class AdditionalDataCarRental.");

            if (carRentalTaxExemptIndicator.IsSet && carRentalTaxExemptIndicator.Value == null)
                throw new ArgumentNullException(nameof(carRentalTaxExemptIndicator), "Property is not nullable for class AdditionalDataCarRental.");

            if (travelEntertainmentAuthDataDuration.IsSet && travelEntertainmentAuthDataDuration.Value == null)
                throw new ArgumentNullException(nameof(travelEntertainmentAuthDataDuration), "Property is not nullable for class AdditionalDataCarRental.");

            if (travelEntertainmentAuthDataMarket.IsSet && travelEntertainmentAuthDataMarket.Value == null)
                throw new ArgumentNullException(nameof(travelEntertainmentAuthDataMarket), "Property is not nullable for class AdditionalDataCarRental.");

            return new AdditionalDataCarRental(carRentalCheckOutDate, carRentalCustomerServiceTollFreeNumber, carRentalDaysRented, carRentalFuelCharges, carRentalInsuranceCharges, carRentalLocationCity, carRentalLocationCountry, carRentalLocationStateProvince, carRentalNoShowIndicator, carRentalOneWayDropOffCharges, carRentalRate, carRentalRateIndicator, carRentalRentalAgreementNumber, carRentalRentalClassId, carRentalRenterName, carRentalReturnCity, carRentalReturnCountry, carRentalReturnDate, carRentalReturnLocationId, carRentalReturnStateProvince, carRentalTaxExemptIndicator, travelEntertainmentAuthDataDuration, travelEntertainmentAuthDataMarket);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalDataCarRental" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataCarRental"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalDataCarRental additionalDataCarRental, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalDataCarRental, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalDataCarRental" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataCarRental"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalDataCarRental additionalDataCarRental, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalDataCarRental.CarRentalCheckOutDateOption.IsSet && additionalDataCarRental.CarRentalCheckOutDate == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalCheckOutDate), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalCustomerServiceTollFreeNumberOption.IsSet && additionalDataCarRental.CarRentalCustomerServiceTollFreeNumber == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalCustomerServiceTollFreeNumber), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalDaysRentedOption.IsSet && additionalDataCarRental.CarRentalDaysRented == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalDaysRented), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalFuelChargesOption.IsSet && additionalDataCarRental.CarRentalFuelCharges == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalFuelCharges), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalInsuranceChargesOption.IsSet && additionalDataCarRental.CarRentalInsuranceCharges == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalInsuranceCharges), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalLocationCityOption.IsSet && additionalDataCarRental.CarRentalLocationCity == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalLocationCity), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalLocationCountryOption.IsSet && additionalDataCarRental.CarRentalLocationCountry == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalLocationCountry), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalLocationStateProvinceOption.IsSet && additionalDataCarRental.CarRentalLocationStateProvince == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalLocationStateProvince), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalNoShowIndicatorOption.IsSet && additionalDataCarRental.CarRentalNoShowIndicator == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalNoShowIndicator), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalOneWayDropOffChargesOption.IsSet && additionalDataCarRental.CarRentalOneWayDropOffCharges == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalOneWayDropOffCharges), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalRateOption.IsSet && additionalDataCarRental.CarRentalRate == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalRate), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalRateIndicatorOption.IsSet && additionalDataCarRental.CarRentalRateIndicator == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalRateIndicator), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalRentalAgreementNumberOption.IsSet && additionalDataCarRental.CarRentalRentalAgreementNumber == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalRentalAgreementNumber), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalRentalClassIdOption.IsSet && additionalDataCarRental.CarRentalRentalClassId == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalRentalClassId), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalRenterNameOption.IsSet && additionalDataCarRental.CarRentalRenterName == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalRenterName), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalReturnCityOption.IsSet && additionalDataCarRental.CarRentalReturnCity == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalReturnCity), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalReturnCountryOption.IsSet && additionalDataCarRental.CarRentalReturnCountry == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalReturnCountry), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalReturnDateOption.IsSet && additionalDataCarRental.CarRentalReturnDate == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalReturnDate), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalReturnLocationIdOption.IsSet && additionalDataCarRental.CarRentalReturnLocationId == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalReturnLocationId), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalReturnStateProvinceOption.IsSet && additionalDataCarRental.CarRentalReturnStateProvince == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalReturnStateProvince), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalTaxExemptIndicatorOption.IsSet && additionalDataCarRental.CarRentalTaxExemptIndicator == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.CarRentalTaxExemptIndicator), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.TravelEntertainmentAuthDataDurationOption.IsSet && additionalDataCarRental.TravelEntertainmentAuthDataDuration == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.TravelEntertainmentAuthDataDuration), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.TravelEntertainmentAuthDataMarketOption.IsSet && additionalDataCarRental.TravelEntertainmentAuthDataMarket == null)
                throw new ArgumentNullException(nameof(additionalDataCarRental.TravelEntertainmentAuthDataMarket), "Property is required for class AdditionalDataCarRental.");

            if (additionalDataCarRental.CarRentalCheckOutDateOption.IsSet)
                writer.WriteString("carRental.checkOutDate", additionalDataCarRental.CarRentalCheckOutDate);

            if (additionalDataCarRental.CarRentalCustomerServiceTollFreeNumberOption.IsSet)
                writer.WriteString("carRental.customerServiceTollFreeNumber", additionalDataCarRental.CarRentalCustomerServiceTollFreeNumber);

            if (additionalDataCarRental.CarRentalDaysRentedOption.IsSet)
                writer.WriteString("carRental.daysRented", additionalDataCarRental.CarRentalDaysRented);

            if (additionalDataCarRental.CarRentalFuelChargesOption.IsSet)
                writer.WriteString("carRental.fuelCharges", additionalDataCarRental.CarRentalFuelCharges);

            if (additionalDataCarRental.CarRentalInsuranceChargesOption.IsSet)
                writer.WriteString("carRental.insuranceCharges", additionalDataCarRental.CarRentalInsuranceCharges);

            if (additionalDataCarRental.CarRentalLocationCityOption.IsSet)
                writer.WriteString("carRental.locationCity", additionalDataCarRental.CarRentalLocationCity);

            if (additionalDataCarRental.CarRentalLocationCountryOption.IsSet)
                writer.WriteString("carRental.locationCountry", additionalDataCarRental.CarRentalLocationCountry);

            if (additionalDataCarRental.CarRentalLocationStateProvinceOption.IsSet)
                writer.WriteString("carRental.locationStateProvince", additionalDataCarRental.CarRentalLocationStateProvince);

            if (additionalDataCarRental.CarRentalNoShowIndicatorOption.IsSet)
                writer.WriteString("carRental.noShowIndicator", additionalDataCarRental.CarRentalNoShowIndicator);

            if (additionalDataCarRental.CarRentalOneWayDropOffChargesOption.IsSet)
                writer.WriteString("carRental.oneWayDropOffCharges", additionalDataCarRental.CarRentalOneWayDropOffCharges);

            if (additionalDataCarRental.CarRentalRateOption.IsSet)
                writer.WriteString("carRental.rate", additionalDataCarRental.CarRentalRate);

            if (additionalDataCarRental.CarRentalRateIndicatorOption.IsSet)
                writer.WriteString("carRental.rateIndicator", additionalDataCarRental.CarRentalRateIndicator);

            if (additionalDataCarRental.CarRentalRentalAgreementNumberOption.IsSet)
                writer.WriteString("carRental.rentalAgreementNumber", additionalDataCarRental.CarRentalRentalAgreementNumber);

            if (additionalDataCarRental.CarRentalRentalClassIdOption.IsSet)
                writer.WriteString("carRental.rentalClassId", additionalDataCarRental.CarRentalRentalClassId);

            if (additionalDataCarRental.CarRentalRenterNameOption.IsSet)
                writer.WriteString("carRental.renterName", additionalDataCarRental.CarRentalRenterName);

            if (additionalDataCarRental.CarRentalReturnCityOption.IsSet)
                writer.WriteString("carRental.returnCity", additionalDataCarRental.CarRentalReturnCity);

            if (additionalDataCarRental.CarRentalReturnCountryOption.IsSet)
                writer.WriteString("carRental.returnCountry", additionalDataCarRental.CarRentalReturnCountry);

            if (additionalDataCarRental.CarRentalReturnDateOption.IsSet)
                writer.WriteString("carRental.returnDate", additionalDataCarRental.CarRentalReturnDate);

            if (additionalDataCarRental.CarRentalReturnLocationIdOption.IsSet)
                writer.WriteString("carRental.returnLocationId", additionalDataCarRental.CarRentalReturnLocationId);

            if (additionalDataCarRental.CarRentalReturnStateProvinceOption.IsSet)
                writer.WriteString("carRental.returnStateProvince", additionalDataCarRental.CarRentalReturnStateProvince);

            if (additionalDataCarRental.CarRentalTaxExemptIndicatorOption.IsSet)
                writer.WriteString("carRental.taxExemptIndicator", additionalDataCarRental.CarRentalTaxExemptIndicator);

            if (additionalDataCarRental.TravelEntertainmentAuthDataDurationOption.IsSet)
                writer.WriteString("travelEntertainmentAuthData.duration", additionalDataCarRental.TravelEntertainmentAuthDataDuration);

            if (additionalDataCarRental.TravelEntertainmentAuthDataMarketOption.IsSet)
                writer.WriteString("travelEntertainmentAuthData.market", additionalDataCarRental.TravelEntertainmentAuthDataMarket);
        }
    }
}
