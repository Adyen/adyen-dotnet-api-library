/* 
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [Checkout documentation](https://docs.adyen.com/checkout).  ## Authentication Each request to the Checkout API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_Checkout_API_key\" \\ ... ``` Note that when going live, you need to generate a new API Key to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Checkout API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v66/payments ```
 *
 * OpenAPI spec version: 66
 * Contact: developer-experience@adyen.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CheckoutUtilityRequest
    /// </summary>
    [DataContract]
        public partial class CheckoutUtilityRequest :  IEquatable<CheckoutUtilityRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutUtilityRequest" /> class.
        /// </summary>
        /// <param name="originDomains">The list of origin domains, for which origin keys are requested. (required).</param>
        public CheckoutUtilityRequest(List<string> originDomains = default(List<string>))
        {
            // to ensure "originDomains" is required (not null)
            if (originDomains == null)
            {
                throw new InvalidDataException("originDomains is a required property for CheckoutUtilityRequest and cannot be null");
            }
            else
            {
                this.OriginDomains = originDomains;
            }
        }
        
        /// <summary>
        /// The list of origin domains, for which origin keys are requested.
        /// </summary>
        /// <value>The list of origin domains, for which origin keys are requested.</value>
        [DataMember(Name="originDomains", EmitDefaultValue=false)]
        public List<string> OriginDomains { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckoutUtilityRequest {\n");
            sb.Append("  OriginDomains: ").Append(OriginDomains).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckoutUtilityRequest);
        }

        /// <summary>
        /// Returns true if CheckoutUtilityRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckoutUtilityRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckoutUtilityRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OriginDomains == input.OriginDomains ||
                    this.OriginDomains != null &&
                    input.OriginDomains != null &&
                    this.OriginDomains.SequenceEqual(input.OriginDomains)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OriginDomains != null)
                    hashCode = hashCode * 59 + this.OriginDomains.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
