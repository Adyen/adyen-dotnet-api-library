// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PaymentAmountUpdateRequest
    /// </summary>
    public partial class PaymentAmountUpdateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentAmountUpdateRequest" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="merchantAccount">The merchant account that is used to process the payment.</param>
        /// <param name="applicationInfo">applicationInfo</param>
        /// <param name="industryUsage">The reason for the amount update. Possible values:  * **delayedCharge**  * **noShow**  * **installment**</param>
        /// <param name="lineItems">Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). &gt; This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.</param>
        /// <param name="reference">Your reference for the amount update request. Maximum length: 80 characters.</param>
        /// <param name="splits">An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/process-payments) or [platforms](https://docs.adyen.com/platforms/process-payments).</param>
        [JsonConstructor]
        public PaymentAmountUpdateRequest(Amount amount, string merchantAccount, Option<ApplicationInfo> applicationInfo = default, Option<IndustryUsageEnum?> industryUsage = default, Option<List<LineItem>> lineItems = default, Option<string> reference = default, Option<List<Split>> splits = default)
        {
            Amount = amount;
            MerchantAccount = merchantAccount;
            ApplicationInfoOption = applicationInfo;
            IndustryUsageOption = industryUsage;
            LineItemsOption = lineItems;
            ReferenceOption = reference;
            SplitsOption = splits;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The reason for the amount update. Possible values:  * **delayedCharge**  * **noShow**  * **installment**
        /// </summary>
        /// <value>The reason for the amount update. Possible values:  * **delayedCharge**  * **noShow**  * **installment**</value>
        public enum IndustryUsageEnum
        {
            /// <summary>
            /// Enum DelayedCharge for value: delayedCharge
            /// </summary>
            DelayedCharge = 1,

            /// <summary>
            /// Enum Installment for value: installment
            /// </summary>
            Installment = 2,

            /// <summary>
            /// Enum NoShow for value: noShow
            /// </summary>
            NoShow = 3
        }

        /// <summary>
        /// Returns a <see cref="IndustryUsageEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static IndustryUsageEnum IndustryUsageEnumFromString(string value)
        {
            if (value.Equals("delayedCharge"))
                return IndustryUsageEnum.DelayedCharge;

            if (value.Equals("installment"))
                return IndustryUsageEnum.Installment;

            if (value.Equals("noShow"))
                return IndustryUsageEnum.NoShow;

            throw new NotImplementedException($"Could not convert value to type IndustryUsageEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="IndustryUsageEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IndustryUsageEnum? IndustryUsageEnumFromStringOrDefault(string value)
        {
            if (value.Equals("delayedCharge"))
                return IndustryUsageEnum.DelayedCharge;

            if (value.Equals("installment"))
                return IndustryUsageEnum.Installment;

            if (value.Equals("noShow"))
                return IndustryUsageEnum.NoShow;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="IndustryUsageEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string IndustryUsageEnumToJsonValue(IndustryUsageEnum? value)
        {
            if (value == IndustryUsageEnum.DelayedCharge)
                return "delayedCharge";

            if (value == IndustryUsageEnum.Installment)
                return "installment";

            if (value == IndustryUsageEnum.NoShow)
                return "noShow";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of IndustryUsage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IndustryUsageEnum?> IndustryUsageOption { get; private set; }

        /// <summary>
        /// The reason for the amount update. Possible values:  * **delayedCharge**  * **noShow**  * **installment**
        /// </summary>
        /// <value>The reason for the amount update. Possible values:  * **delayedCharge**  * **noShow**  * **installment**</value>
        [JsonPropertyName("industryUsage")]
        public IndustryUsageEnum? IndustryUsage { get { return this.IndustryUsageOption; } set { this.IndustryUsageOption = new Option<IndustryUsageEnum?>(value); } }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public Amount Amount { get; set; }

        /// <summary>
        /// The merchant account that is used to process the payment.
        /// </summary>
        /// <value>The merchant account that is used to process the payment.</value>
        [JsonPropertyName("merchantAccount")]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// Used to track the state of ApplicationInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApplicationInfo> ApplicationInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets ApplicationInfo
        /// </summary>
        [JsonPropertyName("applicationInfo")]
        public ApplicationInfo ApplicationInfo { get { return this.ApplicationInfoOption; } set { this.ApplicationInfoOption = new Option<ApplicationInfo>(value); } }

        /// <summary>
        /// Used to track the state of LineItems
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LineItem>> LineItemsOption { get; private set; }

        /// <summary>
        /// Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). &gt; This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.
        /// </summary>
        /// <value>Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). &gt; This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.</value>
        [JsonPropertyName("lineItems")]
        public List<LineItem> LineItems { get { return this.LineItemsOption; } set { this.LineItemsOption = new Option<List<LineItem>>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Your reference for the amount update request. Maximum length: 80 characters.
        /// </summary>
        /// <value>Your reference for the amount update request. Maximum length: 80 characters.</value>
        [JsonPropertyName("reference")]
        public string Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Splits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Split>> SplitsOption { get; private set; }

        /// <summary>
        /// An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/process-payments) or [platforms](https://docs.adyen.com/platforms/process-payments).
        /// </summary>
        /// <value>An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/process-payments) or [platforms](https://docs.adyen.com/platforms/process-payments).</value>
        [JsonPropertyName("splits")]
        public List<Split> Splits { get { return this.SplitsOption; } set { this.SplitsOption = new Option<List<Split>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentAmountUpdateRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  ApplicationInfo: ").Append(ApplicationInfo).Append("\n");
            sb.Append("  IndustryUsage: ").Append(IndustryUsage).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Splits: ").Append(Splits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentAmountUpdateRequest" />
    /// </summary>
    public class PaymentAmountUpdateRequestJsonConverter : JsonConverter<PaymentAmountUpdateRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentAmountUpdateRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentAmountUpdateRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Amount> amount = default;
            Option<string> merchantAccount = default;
            Option<ApplicationInfo> applicationInfo = default;
            Option<PaymentAmountUpdateRequest.IndustryUsageEnum?> industryUsage = default;
            Option<List<LineItem>> lineItems = default;
            Option<string> reference = default;
            Option<List<Split>> splits = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "merchantAccount":
                            merchantAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "applicationInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                applicationInfo = new Option<ApplicationInfo>(JsonSerializer.Deserialize<ApplicationInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "industryUsage":
                            string industryUsageRawValue = utf8JsonReader.GetString();
                            if (industryUsageRawValue != null)
                                industryUsage = new Option<PaymentAmountUpdateRequest.IndustryUsageEnum?>(PaymentAmountUpdateRequest.IndustryUsageEnumFromStringOrDefault(industryUsageRawValue));
                            break;
                        case "lineItems":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lineItems = new Option<List<LineItem>>(JsonSerializer.Deserialize<List<LineItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "splits":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                splits = new Option<List<Split>>(JsonSerializer.Deserialize<List<Split>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class PaymentAmountUpdateRequest.", nameof(amount));

            if (!merchantAccount.IsSet)
                throw new ArgumentException("Property is required for class PaymentAmountUpdateRequest.", nameof(merchantAccount));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class PaymentAmountUpdateRequest.");

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount), "Property is not nullable for class PaymentAmountUpdateRequest.");

            if (applicationInfo.IsSet && applicationInfo.Value == null)
                throw new ArgumentNullException(nameof(applicationInfo), "Property is not nullable for class PaymentAmountUpdateRequest.");

            if (industryUsage.IsSet && industryUsage.Value == null)
                throw new ArgumentNullException(nameof(industryUsage), "Property is not nullable for class PaymentAmountUpdateRequest.");

            if (lineItems.IsSet && lineItems.Value == null)
                throw new ArgumentNullException(nameof(lineItems), "Property is not nullable for class PaymentAmountUpdateRequest.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class PaymentAmountUpdateRequest.");

            if (splits.IsSet && splits.Value == null)
                throw new ArgumentNullException(nameof(splits), "Property is not nullable for class PaymentAmountUpdateRequest.");

            return new PaymentAmountUpdateRequest(amount.Value, merchantAccount.Value, applicationInfo, industryUsage, lineItems, reference, splits);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentAmountUpdateRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentAmountUpdateRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentAmountUpdateRequest paymentAmountUpdateRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentAmountUpdateRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentAmountUpdateRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentAmountUpdateRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentAmountUpdateRequest paymentAmountUpdateRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentAmountUpdateRequest.Amount == null)
                throw new ArgumentNullException(nameof(paymentAmountUpdateRequest.Amount), "Property is required for class PaymentAmountUpdateRequest.");

            if (paymentAmountUpdateRequest.MerchantAccount == null)
                throw new ArgumentNullException(nameof(paymentAmountUpdateRequest.MerchantAccount), "Property is required for class PaymentAmountUpdateRequest.");

            if (paymentAmountUpdateRequest.ApplicationInfoOption.IsSet && paymentAmountUpdateRequest.ApplicationInfo == null)
                throw new ArgumentNullException(nameof(paymentAmountUpdateRequest.ApplicationInfo), "Property is required for class PaymentAmountUpdateRequest.");

            if (paymentAmountUpdateRequest.LineItemsOption.IsSet && paymentAmountUpdateRequest.LineItems == null)
                throw new ArgumentNullException(nameof(paymentAmountUpdateRequest.LineItems), "Property is required for class PaymentAmountUpdateRequest.");

            if (paymentAmountUpdateRequest.ReferenceOption.IsSet && paymentAmountUpdateRequest.Reference == null)
                throw new ArgumentNullException(nameof(paymentAmountUpdateRequest.Reference), "Property is required for class PaymentAmountUpdateRequest.");

            if (paymentAmountUpdateRequest.SplitsOption.IsSet && paymentAmountUpdateRequest.Splits == null)
                throw new ArgumentNullException(nameof(paymentAmountUpdateRequest.Splits), "Property is required for class PaymentAmountUpdateRequest.");

            writer.WritePropertyName("amount");
            JsonSerializer.Serialize(writer, paymentAmountUpdateRequest.Amount, jsonSerializerOptions);
            writer.WriteString("merchantAccount", paymentAmountUpdateRequest.MerchantAccount);

            if (paymentAmountUpdateRequest.ApplicationInfoOption.IsSet)
            {
                writer.WritePropertyName("applicationInfo");
                JsonSerializer.Serialize(writer, paymentAmountUpdateRequest.ApplicationInfo, jsonSerializerOptions);
            }
            var industryUsageRawValue = PaymentAmountUpdateRequest.IndustryUsageEnumToJsonValue(paymentAmountUpdateRequest.IndustryUsageOption.Value.Value);
            writer.WriteString("industryUsage", industryUsageRawValue);
            if (paymentAmountUpdateRequest.LineItemsOption.IsSet)
            {
                writer.WritePropertyName("lineItems");
                JsonSerializer.Serialize(writer, paymentAmountUpdateRequest.LineItems, jsonSerializerOptions);
            }
            if (paymentAmountUpdateRequest.ReferenceOption.IsSet)
                writer.WriteString("reference", paymentAmountUpdateRequest.Reference);

            if (paymentAmountUpdateRequest.SplitsOption.IsSet)
            {
                writer.WritePropertyName("splits");
                JsonSerializer.Serialize(writer, paymentAmountUpdateRequest.Splits, jsonSerializerOptions);
            }
        }
    }
}
