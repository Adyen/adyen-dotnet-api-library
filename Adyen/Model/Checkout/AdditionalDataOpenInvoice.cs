// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataOpenInvoice
    /// </summary>
    public partial class AdditionalDataOpenInvoice : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataOpenInvoice" /> class.
        /// </summary>
        /// <param name="openinvoicedataMerchantData">Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.  The &#x60;merchantData&#x60; parameter needs to be added to the &#x60;openinvoicedata&#x60; signature at the end.  Since the field is optional, if it&#39;s not included it does not impact computing the merchant signature.  Applies only to Klarna.  You can contact Klarna for the format and structure of the string.</param>
        /// <param name="openinvoicedataNumberOfLines">The number of invoice lines included in &#x60;openinvoicedata&#x60;.  There needs to be at least one line, so &#x60;numberOfLines&#x60; needs to be at least 1.</param>
        /// <param name="openinvoicedataRecipientFirstName">First name of the recipient. If the delivery address and the billing address are different, specify the &#x60;recipientFirstName&#x60; and &#x60;recipientLastName&#x60; to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.</param>
        /// <param name="openinvoicedataRecipientLastName">Last name of the recipient. If the delivery address and the billing address are different, specify the &#x60;recipientFirstName&#x60; and &#x60;recipientLastName&#x60; to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.</param>
        /// <param name="openinvoicedataLineItemNrCurrencyCode">The three-character ISO currency code.</param>
        /// <param name="openinvoicedataLineItemNrDescription">A text description of the product the invoice line refers to.</param>
        /// <param name="openinvoicedataLineItemNrItemAmount">The price for one item in the invoice line, represented in minor units.  The due amount for the item, VAT excluded.</param>
        /// <param name="openinvoicedataLineItemNrItemId">A unique id for this item. Required for RatePay if the description of each item is not unique.</param>
        /// <param name="openinvoicedataLineItemNrItemVatAmount">The VAT due for one item in the invoice line, represented in minor units.</param>
        /// <param name="openinvoicedataLineItemNrItemVatPercentage">The VAT percentage for one item in the invoice line, represented in minor units.  For example, 19% VAT is specified as 1900.</param>
        /// <param name="openinvoicedataLineItemNrNumberOfItems">The number of units purchased of a specific product.</param>
        /// <param name="openinvoicedataLineItemNrReturnShippingCompany">Name of the shipping company handling the the return shipment.</param>
        /// <param name="openinvoicedataLineItemNrReturnTrackingNumber">The tracking number for the return of the shipment.</param>
        /// <param name="openinvoicedataLineItemNrReturnTrackingUri">URI where the customer can track the return of their shipment.</param>
        /// <param name="openinvoicedataLineItemNrShippingCompany">Name of the shipping company handling the delivery.</param>
        /// <param name="openinvoicedataLineItemNrShippingMethod">Shipping method.</param>
        /// <param name="openinvoicedataLineItemNrTrackingNumber">The tracking number for the shipment.</param>
        /// <param name="openinvoicedataLineItemNrTrackingUri">URI where the customer can track their shipment.</param>
        [JsonConstructor]
        public AdditionalDataOpenInvoice(Option<string> openinvoicedataMerchantData = default, Option<string> openinvoicedataNumberOfLines = default, Option<string> openinvoicedataRecipientFirstName = default, Option<string> openinvoicedataRecipientLastName = default, Option<string> openinvoicedataLineItemNrCurrencyCode = default, Option<string> openinvoicedataLineItemNrDescription = default, Option<string> openinvoicedataLineItemNrItemAmount = default, Option<string> openinvoicedataLineItemNrItemId = default, Option<string> openinvoicedataLineItemNrItemVatAmount = default, Option<string> openinvoicedataLineItemNrItemVatPercentage = default, Option<string> openinvoicedataLineItemNrNumberOfItems = default, Option<string> openinvoicedataLineItemNrReturnShippingCompany = default, Option<string> openinvoicedataLineItemNrReturnTrackingNumber = default, Option<string> openinvoicedataLineItemNrReturnTrackingUri = default, Option<string> openinvoicedataLineItemNrShippingCompany = default, Option<string> openinvoicedataLineItemNrShippingMethod = default, Option<string> openinvoicedataLineItemNrTrackingNumber = default, Option<string> openinvoicedataLineItemNrTrackingUri = default)
        {
            OpeninvoicedataMerchantDataOption = openinvoicedataMerchantData;
            OpeninvoicedataNumberOfLinesOption = openinvoicedataNumberOfLines;
            OpeninvoicedataRecipientFirstNameOption = openinvoicedataRecipientFirstName;
            OpeninvoicedataRecipientLastNameOption = openinvoicedataRecipientLastName;
            OpeninvoicedataLineItemNrCurrencyCodeOption = openinvoicedataLineItemNrCurrencyCode;
            OpeninvoicedataLineItemNrDescriptionOption = openinvoicedataLineItemNrDescription;
            OpeninvoicedataLineItemNrItemAmountOption = openinvoicedataLineItemNrItemAmount;
            OpeninvoicedataLineItemNrItemIdOption = openinvoicedataLineItemNrItemId;
            OpeninvoicedataLineItemNrItemVatAmountOption = openinvoicedataLineItemNrItemVatAmount;
            OpeninvoicedataLineItemNrItemVatPercentageOption = openinvoicedataLineItemNrItemVatPercentage;
            OpeninvoicedataLineItemNrNumberOfItemsOption = openinvoicedataLineItemNrNumberOfItems;
            OpeninvoicedataLineItemNrReturnShippingCompanyOption = openinvoicedataLineItemNrReturnShippingCompany;
            OpeninvoicedataLineItemNrReturnTrackingNumberOption = openinvoicedataLineItemNrReturnTrackingNumber;
            OpeninvoicedataLineItemNrReturnTrackingUriOption = openinvoicedataLineItemNrReturnTrackingUri;
            OpeninvoicedataLineItemNrShippingCompanyOption = openinvoicedataLineItemNrShippingCompany;
            OpeninvoicedataLineItemNrShippingMethodOption = openinvoicedataLineItemNrShippingMethod;
            OpeninvoicedataLineItemNrTrackingNumberOption = openinvoicedataLineItemNrTrackingNumber;
            OpeninvoicedataLineItemNrTrackingUriOption = openinvoicedataLineItemNrTrackingUri;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OpeninvoicedataMerchantData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataMerchantDataOption { get; private set; }

        /// <summary>
        /// Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.  The &#x60;merchantData&#x60; parameter needs to be added to the &#x60;openinvoicedata&#x60; signature at the end.  Since the field is optional, if it&#39;s not included it does not impact computing the merchant signature.  Applies only to Klarna.  You can contact Klarna for the format and structure of the string.
        /// </summary>
        /// <value>Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.  The &#x60;merchantData&#x60; parameter needs to be added to the &#x60;openinvoicedata&#x60; signature at the end.  Since the field is optional, if it&#39;s not included it does not impact computing the merchant signature.  Applies only to Klarna.  You can contact Klarna for the format and structure of the string.</value>
        [JsonPropertyName("openinvoicedata.merchantData")]
        public string OpeninvoicedataMerchantData { get { return this.OpeninvoicedataMerchantDataOption; } set { this.OpeninvoicedataMerchantDataOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataNumberOfLines
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataNumberOfLinesOption { get; private set; }

        /// <summary>
        /// The number of invoice lines included in &#x60;openinvoicedata&#x60;.  There needs to be at least one line, so &#x60;numberOfLines&#x60; needs to be at least 1.
        /// </summary>
        /// <value>The number of invoice lines included in &#x60;openinvoicedata&#x60;.  There needs to be at least one line, so &#x60;numberOfLines&#x60; needs to be at least 1.</value>
        [JsonPropertyName("openinvoicedata.numberOfLines")]
        public string OpeninvoicedataNumberOfLines { get { return this.OpeninvoicedataNumberOfLinesOption; } set { this.OpeninvoicedataNumberOfLinesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataRecipientFirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataRecipientFirstNameOption { get; private set; }

        /// <summary>
        /// First name of the recipient. If the delivery address and the billing address are different, specify the &#x60;recipientFirstName&#x60; and &#x60;recipientLastName&#x60; to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.
        /// </summary>
        /// <value>First name of the recipient. If the delivery address and the billing address are different, specify the &#x60;recipientFirstName&#x60; and &#x60;recipientLastName&#x60; to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.</value>
        [JsonPropertyName("openinvoicedata.recipientFirstName")]
        public string OpeninvoicedataRecipientFirstName { get { return this.OpeninvoicedataRecipientFirstNameOption; } set { this.OpeninvoicedataRecipientFirstNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataRecipientLastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataRecipientLastNameOption { get; private set; }

        /// <summary>
        /// Last name of the recipient. If the delivery address and the billing address are different, specify the &#x60;recipientFirstName&#x60; and &#x60;recipientLastName&#x60; to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.
        /// </summary>
        /// <value>Last name of the recipient. If the delivery address and the billing address are different, specify the &#x60;recipientFirstName&#x60; and &#x60;recipientLastName&#x60; to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.</value>
        [JsonPropertyName("openinvoicedata.recipientLastName")]
        public string OpeninvoicedataRecipientLastName { get { return this.OpeninvoicedataRecipientLastNameOption; } set { this.OpeninvoicedataRecipientLastNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrCurrencyCodeOption { get; private set; }

        /// <summary>
        /// The three-character ISO currency code.
        /// </summary>
        /// <value>The three-character ISO currency code.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].currencyCode")]
        public string OpeninvoicedataLineItemNrCurrencyCode { get { return this.OpeninvoicedataLineItemNrCurrencyCodeOption; } set { this.OpeninvoicedataLineItemNrCurrencyCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrDescriptionOption { get; private set; }

        /// <summary>
        /// A text description of the product the invoice line refers to.
        /// </summary>
        /// <value>A text description of the product the invoice line refers to.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].description")]
        public string OpeninvoicedataLineItemNrDescription { get { return this.OpeninvoicedataLineItemNrDescriptionOption; } set { this.OpeninvoicedataLineItemNrDescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrItemAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrItemAmountOption { get; private set; }

        /// <summary>
        /// The price for one item in the invoice line, represented in minor units.  The due amount for the item, VAT excluded.
        /// </summary>
        /// <value>The price for one item in the invoice line, represented in minor units.  The due amount for the item, VAT excluded.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].itemAmount")]
        public string OpeninvoicedataLineItemNrItemAmount { get { return this.OpeninvoicedataLineItemNrItemAmountOption; } set { this.OpeninvoicedataLineItemNrItemAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrItemId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrItemIdOption { get; private set; }

        /// <summary>
        /// A unique id for this item. Required for RatePay if the description of each item is not unique.
        /// </summary>
        /// <value>A unique id for this item. Required for RatePay if the description of each item is not unique.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].itemId")]
        public string OpeninvoicedataLineItemNrItemId { get { return this.OpeninvoicedataLineItemNrItemIdOption; } set { this.OpeninvoicedataLineItemNrItemIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrItemVatAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrItemVatAmountOption { get; private set; }

        /// <summary>
        /// The VAT due for one item in the invoice line, represented in minor units.
        /// </summary>
        /// <value>The VAT due for one item in the invoice line, represented in minor units.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].itemVatAmount")]
        public string OpeninvoicedataLineItemNrItemVatAmount { get { return this.OpeninvoicedataLineItemNrItemVatAmountOption; } set { this.OpeninvoicedataLineItemNrItemVatAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrItemVatPercentage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrItemVatPercentageOption { get; private set; }

        /// <summary>
        /// The VAT percentage for one item in the invoice line, represented in minor units.  For example, 19% VAT is specified as 1900.
        /// </summary>
        /// <value>The VAT percentage for one item in the invoice line, represented in minor units.  For example, 19% VAT is specified as 1900.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].itemVatPercentage")]
        public string OpeninvoicedataLineItemNrItemVatPercentage { get { return this.OpeninvoicedataLineItemNrItemVatPercentageOption; } set { this.OpeninvoicedataLineItemNrItemVatPercentageOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrNumberOfItems
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrNumberOfItemsOption { get; private set; }

        /// <summary>
        /// The number of units purchased of a specific product.
        /// </summary>
        /// <value>The number of units purchased of a specific product.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].numberOfItems")]
        public string OpeninvoicedataLineItemNrNumberOfItems { get { return this.OpeninvoicedataLineItemNrNumberOfItemsOption; } set { this.OpeninvoicedataLineItemNrNumberOfItemsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrReturnShippingCompany
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrReturnShippingCompanyOption { get; private set; }

        /// <summary>
        /// Name of the shipping company handling the the return shipment.
        /// </summary>
        /// <value>Name of the shipping company handling the the return shipment.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].returnShippingCompany")]
        public string OpeninvoicedataLineItemNrReturnShippingCompany { get { return this.OpeninvoicedataLineItemNrReturnShippingCompanyOption; } set { this.OpeninvoicedataLineItemNrReturnShippingCompanyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrReturnTrackingNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrReturnTrackingNumberOption { get; private set; }

        /// <summary>
        /// The tracking number for the return of the shipment.
        /// </summary>
        /// <value>The tracking number for the return of the shipment.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].returnTrackingNumber")]
        public string OpeninvoicedataLineItemNrReturnTrackingNumber { get { return this.OpeninvoicedataLineItemNrReturnTrackingNumberOption; } set { this.OpeninvoicedataLineItemNrReturnTrackingNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrReturnTrackingUri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrReturnTrackingUriOption { get; private set; }

        /// <summary>
        /// URI where the customer can track the return of their shipment.
        /// </summary>
        /// <value>URI where the customer can track the return of their shipment.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].returnTrackingUri")]
        public string OpeninvoicedataLineItemNrReturnTrackingUri { get { return this.OpeninvoicedataLineItemNrReturnTrackingUriOption; } set { this.OpeninvoicedataLineItemNrReturnTrackingUriOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrShippingCompany
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrShippingCompanyOption { get; private set; }

        /// <summary>
        /// Name of the shipping company handling the delivery.
        /// </summary>
        /// <value>Name of the shipping company handling the delivery.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].shippingCompany")]
        public string OpeninvoicedataLineItemNrShippingCompany { get { return this.OpeninvoicedataLineItemNrShippingCompanyOption; } set { this.OpeninvoicedataLineItemNrShippingCompanyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrShippingMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrShippingMethodOption { get; private set; }

        /// <summary>
        /// Shipping method.
        /// </summary>
        /// <value>Shipping method.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].shippingMethod")]
        public string OpeninvoicedataLineItemNrShippingMethod { get { return this.OpeninvoicedataLineItemNrShippingMethodOption; } set { this.OpeninvoicedataLineItemNrShippingMethodOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrTrackingNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrTrackingNumberOption { get; private set; }

        /// <summary>
        /// The tracking number for the shipment.
        /// </summary>
        /// <value>The tracking number for the shipment.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].trackingNumber")]
        public string OpeninvoicedataLineItemNrTrackingNumber { get { return this.OpeninvoicedataLineItemNrTrackingNumberOption; } set { this.OpeninvoicedataLineItemNrTrackingNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpeninvoicedataLineItemNrTrackingUri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpeninvoicedataLineItemNrTrackingUriOption { get; private set; }

        /// <summary>
        /// URI where the customer can track their shipment.
        /// </summary>
        /// <value>URI where the customer can track their shipment.</value>
        [JsonPropertyName("openinvoicedataLine[itemNr].trackingUri")]
        public string OpeninvoicedataLineItemNrTrackingUri { get { return this.OpeninvoicedataLineItemNrTrackingUriOption; } set { this.OpeninvoicedataLineItemNrTrackingUriOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataOpenInvoice {\n");
            sb.Append("  OpeninvoicedataMerchantData: ").Append(OpeninvoicedataMerchantData).Append("\n");
            sb.Append("  OpeninvoicedataNumberOfLines: ").Append(OpeninvoicedataNumberOfLines).Append("\n");
            sb.Append("  OpeninvoicedataRecipientFirstName: ").Append(OpeninvoicedataRecipientFirstName).Append("\n");
            sb.Append("  OpeninvoicedataRecipientLastName: ").Append(OpeninvoicedataRecipientLastName).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrCurrencyCode: ").Append(OpeninvoicedataLineItemNrCurrencyCode).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrDescription: ").Append(OpeninvoicedataLineItemNrDescription).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrItemAmount: ").Append(OpeninvoicedataLineItemNrItemAmount).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrItemId: ").Append(OpeninvoicedataLineItemNrItemId).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrItemVatAmount: ").Append(OpeninvoicedataLineItemNrItemVatAmount).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrItemVatPercentage: ").Append(OpeninvoicedataLineItemNrItemVatPercentage).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrNumberOfItems: ").Append(OpeninvoicedataLineItemNrNumberOfItems).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrReturnShippingCompany: ").Append(OpeninvoicedataLineItemNrReturnShippingCompany).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrReturnTrackingNumber: ").Append(OpeninvoicedataLineItemNrReturnTrackingNumber).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrReturnTrackingUri: ").Append(OpeninvoicedataLineItemNrReturnTrackingUri).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrShippingCompany: ").Append(OpeninvoicedataLineItemNrShippingCompany).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrShippingMethod: ").Append(OpeninvoicedataLineItemNrShippingMethod).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrTrackingNumber: ").Append(OpeninvoicedataLineItemNrTrackingNumber).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrTrackingUri: ").Append(OpeninvoicedataLineItemNrTrackingUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalDataOpenInvoice" />
    /// </summary>
    public class AdditionalDataOpenInvoiceJsonConverter : JsonConverter<AdditionalDataOpenInvoice>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalDataOpenInvoice" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalDataOpenInvoice Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> openinvoicedataMerchantData = default;
            Option<string> openinvoicedataNumberOfLines = default;
            Option<string> openinvoicedataRecipientFirstName = default;
            Option<string> openinvoicedataRecipientLastName = default;
            Option<string> openinvoicedataLineItemNrCurrencyCode = default;
            Option<string> openinvoicedataLineItemNrDescription = default;
            Option<string> openinvoicedataLineItemNrItemAmount = default;
            Option<string> openinvoicedataLineItemNrItemId = default;
            Option<string> openinvoicedataLineItemNrItemVatAmount = default;
            Option<string> openinvoicedataLineItemNrItemVatPercentage = default;
            Option<string> openinvoicedataLineItemNrNumberOfItems = default;
            Option<string> openinvoicedataLineItemNrReturnShippingCompany = default;
            Option<string> openinvoicedataLineItemNrReturnTrackingNumber = default;
            Option<string> openinvoicedataLineItemNrReturnTrackingUri = default;
            Option<string> openinvoicedataLineItemNrShippingCompany = default;
            Option<string> openinvoicedataLineItemNrShippingMethod = default;
            Option<string> openinvoicedataLineItemNrTrackingNumber = default;
            Option<string> openinvoicedataLineItemNrTrackingUri = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "openinvoicedata.merchantData":
                            openinvoicedataMerchantData = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedata.numberOfLines":
                            openinvoicedataNumberOfLines = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedata.recipientFirstName":
                            openinvoicedataRecipientFirstName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedata.recipientLastName":
                            openinvoicedataRecipientLastName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].currencyCode":
                            openinvoicedataLineItemNrCurrencyCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].description":
                            openinvoicedataLineItemNrDescription = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].itemAmount":
                            openinvoicedataLineItemNrItemAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].itemId":
                            openinvoicedataLineItemNrItemId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].itemVatAmount":
                            openinvoicedataLineItemNrItemVatAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].itemVatPercentage":
                            openinvoicedataLineItemNrItemVatPercentage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].numberOfItems":
                            openinvoicedataLineItemNrNumberOfItems = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].returnShippingCompany":
                            openinvoicedataLineItemNrReturnShippingCompany = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].returnTrackingNumber":
                            openinvoicedataLineItemNrReturnTrackingNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].returnTrackingUri":
                            openinvoicedataLineItemNrReturnTrackingUri = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].shippingCompany":
                            openinvoicedataLineItemNrShippingCompany = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].shippingMethod":
                            openinvoicedataLineItemNrShippingMethod = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].trackingNumber":
                            openinvoicedataLineItemNrTrackingNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openinvoicedataLine[itemNr].trackingUri":
                            openinvoicedataLineItemNrTrackingUri = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (openinvoicedataMerchantData.IsSet && openinvoicedataMerchantData.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataMerchantData), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataNumberOfLines.IsSet && openinvoicedataNumberOfLines.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataNumberOfLines), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataRecipientFirstName.IsSet && openinvoicedataRecipientFirstName.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataRecipientFirstName), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataRecipientLastName.IsSet && openinvoicedataRecipientLastName.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataRecipientLastName), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrCurrencyCode.IsSet && openinvoicedataLineItemNrCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrCurrencyCode), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrDescription.IsSet && openinvoicedataLineItemNrDescription.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrDescription), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrItemAmount.IsSet && openinvoicedataLineItemNrItemAmount.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrItemAmount), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrItemId.IsSet && openinvoicedataLineItemNrItemId.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrItemId), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrItemVatAmount.IsSet && openinvoicedataLineItemNrItemVatAmount.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrItemVatAmount), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrItemVatPercentage.IsSet && openinvoicedataLineItemNrItemVatPercentage.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrItemVatPercentage), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrNumberOfItems.IsSet && openinvoicedataLineItemNrNumberOfItems.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrNumberOfItems), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrReturnShippingCompany.IsSet && openinvoicedataLineItemNrReturnShippingCompany.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrReturnShippingCompany), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrReturnTrackingNumber.IsSet && openinvoicedataLineItemNrReturnTrackingNumber.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrReturnTrackingNumber), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrReturnTrackingUri.IsSet && openinvoicedataLineItemNrReturnTrackingUri.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrReturnTrackingUri), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrShippingCompany.IsSet && openinvoicedataLineItemNrShippingCompany.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrShippingCompany), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrShippingMethod.IsSet && openinvoicedataLineItemNrShippingMethod.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrShippingMethod), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrTrackingNumber.IsSet && openinvoicedataLineItemNrTrackingNumber.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrTrackingNumber), "Property is not nullable for class AdditionalDataOpenInvoice.");

            if (openinvoicedataLineItemNrTrackingUri.IsSet && openinvoicedataLineItemNrTrackingUri.Value == null)
                throw new ArgumentNullException(nameof(openinvoicedataLineItemNrTrackingUri), "Property is not nullable for class AdditionalDataOpenInvoice.");

            return new AdditionalDataOpenInvoice(openinvoicedataMerchantData, openinvoicedataNumberOfLines, openinvoicedataRecipientFirstName, openinvoicedataRecipientLastName, openinvoicedataLineItemNrCurrencyCode, openinvoicedataLineItemNrDescription, openinvoicedataLineItemNrItemAmount, openinvoicedataLineItemNrItemId, openinvoicedataLineItemNrItemVatAmount, openinvoicedataLineItemNrItemVatPercentage, openinvoicedataLineItemNrNumberOfItems, openinvoicedataLineItemNrReturnShippingCompany, openinvoicedataLineItemNrReturnTrackingNumber, openinvoicedataLineItemNrReturnTrackingUri, openinvoicedataLineItemNrShippingCompany, openinvoicedataLineItemNrShippingMethod, openinvoicedataLineItemNrTrackingNumber, openinvoicedataLineItemNrTrackingUri);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalDataOpenInvoice" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataOpenInvoice"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalDataOpenInvoice additionalDataOpenInvoice, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalDataOpenInvoice, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalDataOpenInvoice" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataOpenInvoice"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalDataOpenInvoice additionalDataOpenInvoice, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalDataOpenInvoice.OpeninvoicedataMerchantDataOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataMerchantData == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataMerchantData), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataNumberOfLinesOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataNumberOfLines == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataNumberOfLines), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataRecipientFirstNameOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataRecipientFirstName == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataRecipientFirstName), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataRecipientLastNameOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataRecipientLastName == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataRecipientLastName), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrCurrencyCodeOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrCurrencyCode == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrCurrencyCode), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrDescriptionOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrDescription == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrDescription), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemAmountOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemAmount == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemAmount), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemIdOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemId == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemId), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemVatAmountOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemVatAmount == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemVatAmount), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemVatPercentageOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemVatPercentage == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemVatPercentage), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrNumberOfItemsOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrNumberOfItems == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrNumberOfItems), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnShippingCompanyOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnShippingCompany == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnShippingCompany), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnTrackingNumberOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnTrackingNumber == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnTrackingNumber), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnTrackingUriOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnTrackingUri == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnTrackingUri), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrShippingCompanyOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrShippingCompany == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrShippingCompany), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrShippingMethodOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrShippingMethod == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrShippingMethod), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrTrackingNumberOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrTrackingNumber == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrTrackingNumber), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrTrackingUriOption.IsSet && additionalDataOpenInvoice.OpeninvoicedataLineItemNrTrackingUri == null)
                throw new ArgumentNullException(nameof(additionalDataOpenInvoice.OpeninvoicedataLineItemNrTrackingUri), "Property is required for class AdditionalDataOpenInvoice.");

            if (additionalDataOpenInvoice.OpeninvoicedataMerchantDataOption.IsSet)
                writer.WriteString("openinvoicedata.merchantData", additionalDataOpenInvoice.OpeninvoicedataMerchantData);

            if (additionalDataOpenInvoice.OpeninvoicedataNumberOfLinesOption.IsSet)
                writer.WriteString("openinvoicedata.numberOfLines", additionalDataOpenInvoice.OpeninvoicedataNumberOfLines);

            if (additionalDataOpenInvoice.OpeninvoicedataRecipientFirstNameOption.IsSet)
                writer.WriteString("openinvoicedata.recipientFirstName", additionalDataOpenInvoice.OpeninvoicedataRecipientFirstName);

            if (additionalDataOpenInvoice.OpeninvoicedataRecipientLastNameOption.IsSet)
                writer.WriteString("openinvoicedata.recipientLastName", additionalDataOpenInvoice.OpeninvoicedataRecipientLastName);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrCurrencyCodeOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].currencyCode", additionalDataOpenInvoice.OpeninvoicedataLineItemNrCurrencyCode);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrDescriptionOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].description", additionalDataOpenInvoice.OpeninvoicedataLineItemNrDescription);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemAmountOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].itemAmount", additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemAmount);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemIdOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].itemId", additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemId);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemVatAmountOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].itemVatAmount", additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemVatAmount);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemVatPercentageOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].itemVatPercentage", additionalDataOpenInvoice.OpeninvoicedataLineItemNrItemVatPercentage);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrNumberOfItemsOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].numberOfItems", additionalDataOpenInvoice.OpeninvoicedataLineItemNrNumberOfItems);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnShippingCompanyOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].returnShippingCompany", additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnShippingCompany);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnTrackingNumberOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].returnTrackingNumber", additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnTrackingNumber);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnTrackingUriOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].returnTrackingUri", additionalDataOpenInvoice.OpeninvoicedataLineItemNrReturnTrackingUri);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrShippingCompanyOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].shippingCompany", additionalDataOpenInvoice.OpeninvoicedataLineItemNrShippingCompany);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrShippingMethodOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].shippingMethod", additionalDataOpenInvoice.OpeninvoicedataLineItemNrShippingMethod);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrTrackingNumberOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].trackingNumber", additionalDataOpenInvoice.OpeninvoicedataLineItemNrTrackingNumber);

            if (additionalDataOpenInvoice.OpeninvoicedataLineItemNrTrackingUriOption.IsSet)
                writer.WriteString("openinvoicedataLine[itemNr].trackingUri", additionalDataOpenInvoice.OpeninvoicedataLineItemNrTrackingUri);
        }
    }
}
