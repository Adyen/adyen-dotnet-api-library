// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ResponseAdditionalDataBillingAddress
    /// </summary>
    public partial class ResponseAdditionalDataBillingAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseAdditionalDataBillingAddress" /> class.
        /// </summary>
        /// <param name="billingAddressCity">The billing address city passed in the payment request.</param>
        /// <param name="billingAddressCountry">The billing address country passed in the payment request.  Example: NL</param>
        /// <param name="billingAddressHouseNumberOrName">The billing address house number or name passed in the payment request.</param>
        /// <param name="billingAddressPostalCode">The billing address postal code passed in the payment request.  Example: 1011 DJ</param>
        /// <param name="billingAddressStateOrProvince">The billing address state or province passed in the payment request.  Example: NH</param>
        /// <param name="billingAddressStreet">The billing address street passed in the payment request.</param>
        [JsonConstructor]
        public ResponseAdditionalDataBillingAddress(Option<string> billingAddressCity = default, Option<string> billingAddressCountry = default, Option<string> billingAddressHouseNumberOrName = default, Option<string> billingAddressPostalCode = default, Option<string> billingAddressStateOrProvince = default, Option<string> billingAddressStreet = default)
        {
            BillingAddressCityOption = billingAddressCity;
            BillingAddressCountryOption = billingAddressCountry;
            BillingAddressHouseNumberOrNameOption = billingAddressHouseNumberOrName;
            BillingAddressPostalCodeOption = billingAddressPostalCode;
            BillingAddressStateOrProvinceOption = billingAddressStateOrProvince;
            BillingAddressStreetOption = billingAddressStreet;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BillingAddressCity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BillingAddressCityOption { get; private set; }

        /// <summary>
        /// The billing address city passed in the payment request.
        /// </summary>
        /// <value>The billing address city passed in the payment request.</value>
        [JsonPropertyName("billingAddress.city")]
        public string BillingAddressCity { get { return this.BillingAddressCityOption; } set { this.BillingAddressCityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BillingAddressCountry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BillingAddressCountryOption { get; private set; }

        /// <summary>
        /// The billing address country passed in the payment request.  Example: NL
        /// </summary>
        /// <value>The billing address country passed in the payment request.  Example: NL</value>
        [JsonPropertyName("billingAddress.country")]
        public string BillingAddressCountry { get { return this.BillingAddressCountryOption; } set { this.BillingAddressCountryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BillingAddressHouseNumberOrName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BillingAddressHouseNumberOrNameOption { get; private set; }

        /// <summary>
        /// The billing address house number or name passed in the payment request.
        /// </summary>
        /// <value>The billing address house number or name passed in the payment request.</value>
        [JsonPropertyName("billingAddress.houseNumberOrName")]
        public string BillingAddressHouseNumberOrName { get { return this.BillingAddressHouseNumberOrNameOption; } set { this.BillingAddressHouseNumberOrNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BillingAddressPostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BillingAddressPostalCodeOption { get; private set; }

        /// <summary>
        /// The billing address postal code passed in the payment request.  Example: 1011 DJ
        /// </summary>
        /// <value>The billing address postal code passed in the payment request.  Example: 1011 DJ</value>
        [JsonPropertyName("billingAddress.postalCode")]
        public string BillingAddressPostalCode { get { return this.BillingAddressPostalCodeOption; } set { this.BillingAddressPostalCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BillingAddressStateOrProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BillingAddressStateOrProvinceOption { get; private set; }

        /// <summary>
        /// The billing address state or province passed in the payment request.  Example: NH
        /// </summary>
        /// <value>The billing address state or province passed in the payment request.  Example: NH</value>
        [JsonPropertyName("billingAddress.stateOrProvince")]
        public string BillingAddressStateOrProvince { get { return this.BillingAddressStateOrProvinceOption; } set { this.BillingAddressStateOrProvinceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BillingAddressStreet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BillingAddressStreetOption { get; private set; }

        /// <summary>
        /// The billing address street passed in the payment request.
        /// </summary>
        /// <value>The billing address street passed in the payment request.</value>
        [JsonPropertyName("billingAddress.street")]
        public string BillingAddressStreet { get { return this.BillingAddressStreetOption; } set { this.BillingAddressStreetOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseAdditionalDataBillingAddress {\n");
            sb.Append("  BillingAddressCity: ").Append(BillingAddressCity).Append("\n");
            sb.Append("  BillingAddressCountry: ").Append(BillingAddressCountry).Append("\n");
            sb.Append("  BillingAddressHouseNumberOrName: ").Append(BillingAddressHouseNumberOrName).Append("\n");
            sb.Append("  BillingAddressPostalCode: ").Append(BillingAddressPostalCode).Append("\n");
            sb.Append("  BillingAddressStateOrProvince: ").Append(BillingAddressStateOrProvince).Append("\n");
            sb.Append("  BillingAddressStreet: ").Append(BillingAddressStreet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResponseAdditionalDataBillingAddress" />
    /// </summary>
    public class ResponseAdditionalDataBillingAddressJsonConverter : JsonConverter<ResponseAdditionalDataBillingAddress>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResponseAdditionalDataBillingAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResponseAdditionalDataBillingAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> billingAddressCity = default;
            Option<string> billingAddressCountry = default;
            Option<string> billingAddressHouseNumberOrName = default;
            Option<string> billingAddressPostalCode = default;
            Option<string> billingAddressStateOrProvince = default;
            Option<string> billingAddressStreet = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "billingAddress.city":
                            billingAddressCity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "billingAddress.country":
                            billingAddressCountry = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "billingAddress.houseNumberOrName":
                            billingAddressHouseNumberOrName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "billingAddress.postalCode":
                            billingAddressPostalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "billingAddress.stateOrProvince":
                            billingAddressStateOrProvince = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "billingAddress.street":
                            billingAddressStreet = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (billingAddressCity.IsSet && billingAddressCity.Value == null)
                throw new ArgumentNullException(nameof(billingAddressCity), "Property is not nullable for class ResponseAdditionalDataBillingAddress.");

            if (billingAddressCountry.IsSet && billingAddressCountry.Value == null)
                throw new ArgumentNullException(nameof(billingAddressCountry), "Property is not nullable for class ResponseAdditionalDataBillingAddress.");

            if (billingAddressHouseNumberOrName.IsSet && billingAddressHouseNumberOrName.Value == null)
                throw new ArgumentNullException(nameof(billingAddressHouseNumberOrName), "Property is not nullable for class ResponseAdditionalDataBillingAddress.");

            if (billingAddressPostalCode.IsSet && billingAddressPostalCode.Value == null)
                throw new ArgumentNullException(nameof(billingAddressPostalCode), "Property is not nullable for class ResponseAdditionalDataBillingAddress.");

            if (billingAddressStateOrProvince.IsSet && billingAddressStateOrProvince.Value == null)
                throw new ArgumentNullException(nameof(billingAddressStateOrProvince), "Property is not nullable for class ResponseAdditionalDataBillingAddress.");

            if (billingAddressStreet.IsSet && billingAddressStreet.Value == null)
                throw new ArgumentNullException(nameof(billingAddressStreet), "Property is not nullable for class ResponseAdditionalDataBillingAddress.");

            return new ResponseAdditionalDataBillingAddress(billingAddressCity, billingAddressCountry, billingAddressHouseNumberOrName, billingAddressPostalCode, billingAddressStateOrProvince, billingAddressStreet);
        }

        /// <summary>
        /// Serializes a <see cref="ResponseAdditionalDataBillingAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="responseAdditionalDataBillingAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResponseAdditionalDataBillingAddress responseAdditionalDataBillingAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, responseAdditionalDataBillingAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResponseAdditionalDataBillingAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="responseAdditionalDataBillingAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResponseAdditionalDataBillingAddress responseAdditionalDataBillingAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (responseAdditionalDataBillingAddress.BillingAddressCityOption.IsSet && responseAdditionalDataBillingAddress.BillingAddressCity == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataBillingAddress.BillingAddressCity), "Property is required for class ResponseAdditionalDataBillingAddress.");

            if (responseAdditionalDataBillingAddress.BillingAddressCountryOption.IsSet && responseAdditionalDataBillingAddress.BillingAddressCountry == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataBillingAddress.BillingAddressCountry), "Property is required for class ResponseAdditionalDataBillingAddress.");

            if (responseAdditionalDataBillingAddress.BillingAddressHouseNumberOrNameOption.IsSet && responseAdditionalDataBillingAddress.BillingAddressHouseNumberOrName == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataBillingAddress.BillingAddressHouseNumberOrName), "Property is required for class ResponseAdditionalDataBillingAddress.");

            if (responseAdditionalDataBillingAddress.BillingAddressPostalCodeOption.IsSet && responseAdditionalDataBillingAddress.BillingAddressPostalCode == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataBillingAddress.BillingAddressPostalCode), "Property is required for class ResponseAdditionalDataBillingAddress.");

            if (responseAdditionalDataBillingAddress.BillingAddressStateOrProvinceOption.IsSet && responseAdditionalDataBillingAddress.BillingAddressStateOrProvince == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataBillingAddress.BillingAddressStateOrProvince), "Property is required for class ResponseAdditionalDataBillingAddress.");

            if (responseAdditionalDataBillingAddress.BillingAddressStreetOption.IsSet && responseAdditionalDataBillingAddress.BillingAddressStreet == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataBillingAddress.BillingAddressStreet), "Property is required for class ResponseAdditionalDataBillingAddress.");

            if (responseAdditionalDataBillingAddress.BillingAddressCityOption.IsSet)
                writer.WriteString("billingAddress.city", responseAdditionalDataBillingAddress.BillingAddressCity);

            if (responseAdditionalDataBillingAddress.BillingAddressCountryOption.IsSet)
                writer.WriteString("billingAddress.country", responseAdditionalDataBillingAddress.BillingAddressCountry);

            if (responseAdditionalDataBillingAddress.BillingAddressHouseNumberOrNameOption.IsSet)
                writer.WriteString("billingAddress.houseNumberOrName", responseAdditionalDataBillingAddress.BillingAddressHouseNumberOrName);

            if (responseAdditionalDataBillingAddress.BillingAddressPostalCodeOption.IsSet)
                writer.WriteString("billingAddress.postalCode", responseAdditionalDataBillingAddress.BillingAddressPostalCode);

            if (responseAdditionalDataBillingAddress.BillingAddressStateOrProvinceOption.IsSet)
                writer.WriteString("billingAddress.stateOrProvince", responseAdditionalDataBillingAddress.BillingAddressStateOrProvince);

            if (responseAdditionalDataBillingAddress.BillingAddressStreetOption.IsSet)
                writer.WriteString("billingAddress.street", responseAdditionalDataBillingAddress.BillingAddressStreet);
        }
    }
}
