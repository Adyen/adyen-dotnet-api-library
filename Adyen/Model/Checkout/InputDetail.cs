// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// InputDetail
    /// </summary>
    public partial class InputDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputDetail" /> class.
        /// </summary>
        /// <param name="varConfiguration">Configuration parameters for the required input.</param>
        /// <param name="details">Input details can also be provided recursively.</param>
        /// <param name="inputDetails">Input details can also be provided recursively (deprecated).</param>
        /// <param name="itemSearchUrl">In case of a select, the URL from which to query the items.</param>
        /// <param name="items">In case of a select, the items to choose from.</param>
        /// <param name="key">The value to provide in the result.</param>
        /// <param name="optional">True if this input value is optional.</param>
        /// <param name="type">The type of the required input.</param>
        /// <param name="value">The value can be pre-filled, if available.</param>
        [JsonConstructor]
        public InputDetail(Option<Dictionary<string, string>> varConfiguration = default, Option<List<SubInputDetail>> details = default, Option<List<SubInputDetail>> inputDetails = default, Option<string> itemSearchUrl = default, Option<List<Item>> items = default, Option<string> key = default, Option<bool?> optional = default, Option<string> type = default, Option<string> value = default)
        {
            VarConfigurationOption = varConfiguration;
            DetailsOption = details;
            InputDetailsOption = inputDetails;
            ItemSearchUrlOption = itemSearchUrl;
            ItemsOption = items;
            KeyOption = key;
            OptionalOption = optional;
            TypeOption = type;
            ValueOption = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VarConfiguration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> VarConfigurationOption { get; private set; }

        /// <summary>
        /// Configuration parameters for the required input.
        /// </summary>
        /// <value>Configuration parameters for the required input.</value>
        [JsonPropertyName("configuration")]
        public Dictionary<string, string> VarConfiguration { get { return this.VarConfigurationOption; } set { this.VarConfigurationOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of Details
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SubInputDetail>> DetailsOption { get; private set; }

        /// <summary>
        /// Input details can also be provided recursively.
        /// </summary>
        /// <value>Input details can also be provided recursively.</value>
        [JsonPropertyName("details")]
        public List<SubInputDetail> Details { get { return this.DetailsOption; } set { this.DetailsOption = new Option<List<SubInputDetail>>(value); } }

        /// <summary>
        /// Used to track the state of InputDetails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SubInputDetail>> InputDetailsOption { get; private set; }

        /// <summary>
        /// Input details can also be provided recursively (deprecated).
        /// </summary>
        /// <value>Input details can also be provided recursively (deprecated).</value>
        [JsonPropertyName("inputDetails")]
        [Obsolete]
        public List<SubInputDetail> InputDetails { get { return this.InputDetailsOption; } set { this.InputDetailsOption = new Option<List<SubInputDetail>>(value); } }

        /// <summary>
        /// Used to track the state of ItemSearchUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ItemSearchUrlOption { get; private set; }

        /// <summary>
        /// In case of a select, the URL from which to query the items.
        /// </summary>
        /// <value>In case of a select, the URL from which to query the items.</value>
        [JsonPropertyName("itemSearchUrl")]
        public string ItemSearchUrl { get { return this.ItemSearchUrlOption; } set { this.ItemSearchUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Items
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Item>> ItemsOption { get; private set; }

        /// <summary>
        /// In case of a select, the items to choose from.
        /// </summary>
        /// <value>In case of a select, the items to choose from.</value>
        [JsonPropertyName("items")]
        public List<Item> Items { get { return this.ItemsOption; } set { this.ItemsOption = new Option<List<Item>>(value); } }

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> KeyOption { get; private set; }

        /// <summary>
        /// The value to provide in the result.
        /// </summary>
        /// <value>The value to provide in the result.</value>
        [JsonPropertyName("key")]
        public string Key { get { return this.KeyOption; } set { this.KeyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Optional
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OptionalOption { get; private set; }

        /// <summary>
        /// True if this input value is optional.
        /// </summary>
        /// <value>True if this input value is optional.</value>
        [JsonPropertyName("optional")]
        public bool? Optional { get { return this.OptionalOption; } set { this.OptionalOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// The type of the required input.
        /// </summary>
        /// <value>The type of the required input.</value>
        [JsonPropertyName("type")]
        public string Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ValueOption { get; private set; }

        /// <summary>
        /// The value can be pre-filled, if available.
        /// </summary>
        /// <value>The value can be pre-filled, if available.</value>
        [JsonPropertyName("value")]
        public string Value { get { return this.ValueOption; } set { this.ValueOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InputDetail {\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  InputDetails: ").Append(InputDetails).Append("\n");
            sb.Append("  ItemSearchUrl: ").Append(ItemSearchUrl).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InputDetail" />
    /// </summary>
    public class InputDetailJsonConverter : JsonConverter<InputDetail>
    {
        /// <summary>
        /// Deserializes json to <see cref="InputDetail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InputDetail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, string>> varConfiguration = default;
            Option<List<SubInputDetail>> details = default;
            Option<List<SubInputDetail>> inputDetails = default;
            Option<string> itemSearchUrl = default;
            Option<List<Item>> items = default;
            Option<string> key = default;
            Option<bool?> optional = default;
            Option<string> type = default;
            Option<string> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "configuration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varConfiguration = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "details":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                details = new Option<List<SubInputDetail>>(JsonSerializer.Deserialize<List<SubInputDetail>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "inputDetails":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inputDetails = new Option<List<SubInputDetail>>(JsonSerializer.Deserialize<List<SubInputDetail>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "itemSearchUrl":
                            itemSearchUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "items":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                items = new Option<List<Item>>(JsonSerializer.Deserialize<List<Item>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "key":
                            key = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "optional":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                optional = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "value":
                            value = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varConfiguration.IsSet && varConfiguration.Value == null)
                throw new ArgumentNullException(nameof(varConfiguration), "Property is not nullable for class InputDetail.");

            if (details.IsSet && details.Value == null)
                throw new ArgumentNullException(nameof(details), "Property is not nullable for class InputDetail.");

            if (inputDetails.IsSet && inputDetails.Value == null)
                throw new ArgumentNullException(nameof(inputDetails), "Property is not nullable for class InputDetail.");

            if (itemSearchUrl.IsSet && itemSearchUrl.Value == null)
                throw new ArgumentNullException(nameof(itemSearchUrl), "Property is not nullable for class InputDetail.");

            if (items.IsSet && items.Value == null)
                throw new ArgumentNullException(nameof(items), "Property is not nullable for class InputDetail.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class InputDetail.");

            if (optional.IsSet && optional.Value == null)
                throw new ArgumentNullException(nameof(optional), "Property is not nullable for class InputDetail.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class InputDetail.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class InputDetail.");

            return new InputDetail(varConfiguration, details, inputDetails, itemSearchUrl, items, key, optional, type, value);
        }

        /// <summary>
        /// Serializes a <see cref="InputDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inputDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InputDetail inputDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, inputDetail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InputDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inputDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InputDetail inputDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (inputDetail.VarConfigurationOption.IsSet && inputDetail.VarConfiguration == null)
                throw new ArgumentNullException(nameof(inputDetail.VarConfiguration), "Property is required for class InputDetail.");

            if (inputDetail.DetailsOption.IsSet && inputDetail.Details == null)
                throw new ArgumentNullException(nameof(inputDetail.Details), "Property is required for class InputDetail.");

            if (inputDetail.InputDetailsOption.IsSet && inputDetail.InputDetails == null)
                throw new ArgumentNullException(nameof(inputDetail.InputDetails), "Property is required for class InputDetail.");

            if (inputDetail.ItemSearchUrlOption.IsSet && inputDetail.ItemSearchUrl == null)
                throw new ArgumentNullException(nameof(inputDetail.ItemSearchUrl), "Property is required for class InputDetail.");

            if (inputDetail.ItemsOption.IsSet && inputDetail.Items == null)
                throw new ArgumentNullException(nameof(inputDetail.Items), "Property is required for class InputDetail.");

            if (inputDetail.KeyOption.IsSet && inputDetail.Key == null)
                throw new ArgumentNullException(nameof(inputDetail.Key), "Property is required for class InputDetail.");

            if (inputDetail.TypeOption.IsSet && inputDetail.Type == null)
                throw new ArgumentNullException(nameof(inputDetail.Type), "Property is required for class InputDetail.");

            if (inputDetail.ValueOption.IsSet && inputDetail.Value == null)
                throw new ArgumentNullException(nameof(inputDetail.Value), "Property is required for class InputDetail.");

            if (inputDetail.VarConfigurationOption.IsSet)
            {
                writer.WritePropertyName("configuration");
                JsonSerializer.Serialize(writer, inputDetail.VarConfiguration, jsonSerializerOptions);
            }
            if (inputDetail.DetailsOption.IsSet)
            {
                writer.WritePropertyName("details");
                JsonSerializer.Serialize(writer, inputDetail.Details, jsonSerializerOptions);
            }
            if (inputDetail.InputDetailsOption.IsSet)
            {
                writer.WritePropertyName("inputDetails");
                JsonSerializer.Serialize(writer, inputDetail.InputDetails, jsonSerializerOptions);
            }
            if (inputDetail.ItemSearchUrlOption.IsSet)
                writer.WriteString("itemSearchUrl", inputDetail.ItemSearchUrl);

            if (inputDetail.ItemsOption.IsSet)
            {
                writer.WritePropertyName("items");
                JsonSerializer.Serialize(writer, inputDetail.Items, jsonSerializerOptions);
            }
            if (inputDetail.KeyOption.IsSet)
                writer.WriteString("key", inputDetail.Key);

            if (inputDetail.OptionalOption.IsSet)
                writer.WriteBoolean("optional", inputDetail.OptionalOption.Value.Value);

            if (inputDetail.TypeOption.IsSet)
                writer.WriteString("type", inputDetail.Type);

            if (inputDetail.ValueOption.IsSet)
                writer.WriteString("value", inputDetail.Value);
        }
    }
}
