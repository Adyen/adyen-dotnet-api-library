// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataWallets
    /// </summary>
    public partial class AdditionalDataWallets : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataWallets" /> class.
        /// </summary>
        /// <param name="androidpayToken">The Android Pay token retrieved from the SDK.</param>
        /// <param name="masterpassTransactionId">The Mastercard Masterpass Transaction ID retrieved from the SDK.</param>
        /// <param name="paymentToken">The Apple Pay token retrieved from the SDK.</param>
        /// <param name="paywithgoogleToken">The Google Pay token retrieved from the SDK.</param>
        /// <param name="samsungpayToken">The Samsung Pay token retrieved from the SDK.</param>
        /// <param name="visacheckoutCallId">The Visa Checkout Call ID retrieved from the SDK.</param>
        [JsonConstructor]
        public AdditionalDataWallets(Option<string> androidpayToken = default, Option<string> masterpassTransactionId = default, Option<string> paymentToken = default, Option<string> paywithgoogleToken = default, Option<string> samsungpayToken = default, Option<string> visacheckoutCallId = default)
        {
            AndroidpayTokenOption = androidpayToken;
            MasterpassTransactionIdOption = masterpassTransactionId;
            PaymentTokenOption = paymentToken;
            PaywithgoogleTokenOption = paywithgoogleToken;
            SamsungpayTokenOption = samsungpayToken;
            VisacheckoutCallIdOption = visacheckoutCallId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AndroidpayToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AndroidpayTokenOption { get; private set; }

        /// <summary>
        /// The Android Pay token retrieved from the SDK.
        /// </summary>
        /// <value>The Android Pay token retrieved from the SDK.</value>
        [JsonPropertyName("androidpay.token")]
        public string AndroidpayToken { get { return this.AndroidpayTokenOption; } set { this.AndroidpayTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MasterpassTransactionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MasterpassTransactionIdOption { get; private set; }

        /// <summary>
        /// The Mastercard Masterpass Transaction ID retrieved from the SDK.
        /// </summary>
        /// <value>The Mastercard Masterpass Transaction ID retrieved from the SDK.</value>
        [JsonPropertyName("masterpass.transactionId")]
        public string MasterpassTransactionId { get { return this.MasterpassTransactionIdOption; } set { this.MasterpassTransactionIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentTokenOption { get; private set; }

        /// <summary>
        /// The Apple Pay token retrieved from the SDK.
        /// </summary>
        /// <value>The Apple Pay token retrieved from the SDK.</value>
        [JsonPropertyName("payment.token")]
        public string PaymentToken { get { return this.PaymentTokenOption; } set { this.PaymentTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaywithgoogleToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaywithgoogleTokenOption { get; private set; }

        /// <summary>
        /// The Google Pay token retrieved from the SDK.
        /// </summary>
        /// <value>The Google Pay token retrieved from the SDK.</value>
        [JsonPropertyName("paywithgoogle.token")]
        public string PaywithgoogleToken { get { return this.PaywithgoogleTokenOption; } set { this.PaywithgoogleTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SamsungpayToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SamsungpayTokenOption { get; private set; }

        /// <summary>
        /// The Samsung Pay token retrieved from the SDK.
        /// </summary>
        /// <value>The Samsung Pay token retrieved from the SDK.</value>
        [JsonPropertyName("samsungpay.token")]
        public string SamsungpayToken { get { return this.SamsungpayTokenOption; } set { this.SamsungpayTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VisacheckoutCallId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> VisacheckoutCallIdOption { get; private set; }

        /// <summary>
        /// The Visa Checkout Call ID retrieved from the SDK.
        /// </summary>
        /// <value>The Visa Checkout Call ID retrieved from the SDK.</value>
        [JsonPropertyName("visacheckout.callId")]
        public string VisacheckoutCallId { get { return this.VisacheckoutCallIdOption; } set { this.VisacheckoutCallIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataWallets {\n");
            sb.Append("  AndroidpayToken: ").Append(AndroidpayToken).Append("\n");
            sb.Append("  MasterpassTransactionId: ").Append(MasterpassTransactionId).Append("\n");
            sb.Append("  PaymentToken: ").Append(PaymentToken).Append("\n");
            sb.Append("  PaywithgoogleToken: ").Append(PaywithgoogleToken).Append("\n");
            sb.Append("  SamsungpayToken: ").Append(SamsungpayToken).Append("\n");
            sb.Append("  VisacheckoutCallId: ").Append(VisacheckoutCallId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalDataWallets" />
    /// </summary>
    public class AdditionalDataWalletsJsonConverter : JsonConverter<AdditionalDataWallets>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalDataWallets" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalDataWallets Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> androidpayToken = default;
            Option<string> masterpassTransactionId = default;
            Option<string> paymentToken = default;
            Option<string> paywithgoogleToken = default;
            Option<string> samsungpayToken = default;
            Option<string> visacheckoutCallId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "androidpay.token":
                            androidpayToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "masterpass.transactionId":
                            masterpassTransactionId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "payment.token":
                            paymentToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paywithgoogle.token":
                            paywithgoogleToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "samsungpay.token":
                            samsungpayToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "visacheckout.callId":
                            visacheckoutCallId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (androidpayToken.IsSet && androidpayToken.Value == null)
                throw new ArgumentNullException(nameof(androidpayToken), "Property is not nullable for class AdditionalDataWallets.");

            if (masterpassTransactionId.IsSet && masterpassTransactionId.Value == null)
                throw new ArgumentNullException(nameof(masterpassTransactionId), "Property is not nullable for class AdditionalDataWallets.");

            if (paymentToken.IsSet && paymentToken.Value == null)
                throw new ArgumentNullException(nameof(paymentToken), "Property is not nullable for class AdditionalDataWallets.");

            if (paywithgoogleToken.IsSet && paywithgoogleToken.Value == null)
                throw new ArgumentNullException(nameof(paywithgoogleToken), "Property is not nullable for class AdditionalDataWallets.");

            if (samsungpayToken.IsSet && samsungpayToken.Value == null)
                throw new ArgumentNullException(nameof(samsungpayToken), "Property is not nullable for class AdditionalDataWallets.");

            if (visacheckoutCallId.IsSet && visacheckoutCallId.Value == null)
                throw new ArgumentNullException(nameof(visacheckoutCallId), "Property is not nullable for class AdditionalDataWallets.");

            return new AdditionalDataWallets(androidpayToken, masterpassTransactionId, paymentToken, paywithgoogleToken, samsungpayToken, visacheckoutCallId);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalDataWallets" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataWallets"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalDataWallets additionalDataWallets, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalDataWallets, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalDataWallets" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataWallets"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalDataWallets additionalDataWallets, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalDataWallets.AndroidpayTokenOption.IsSet && additionalDataWallets.AndroidpayToken == null)
                throw new ArgumentNullException(nameof(additionalDataWallets.AndroidpayToken), "Property is required for class AdditionalDataWallets.");

            if (additionalDataWallets.MasterpassTransactionIdOption.IsSet && additionalDataWallets.MasterpassTransactionId == null)
                throw new ArgumentNullException(nameof(additionalDataWallets.MasterpassTransactionId), "Property is required for class AdditionalDataWallets.");

            if (additionalDataWallets.PaymentTokenOption.IsSet && additionalDataWallets.PaymentToken == null)
                throw new ArgumentNullException(nameof(additionalDataWallets.PaymentToken), "Property is required for class AdditionalDataWallets.");

            if (additionalDataWallets.PaywithgoogleTokenOption.IsSet && additionalDataWallets.PaywithgoogleToken == null)
                throw new ArgumentNullException(nameof(additionalDataWallets.PaywithgoogleToken), "Property is required for class AdditionalDataWallets.");

            if (additionalDataWallets.SamsungpayTokenOption.IsSet && additionalDataWallets.SamsungpayToken == null)
                throw new ArgumentNullException(nameof(additionalDataWallets.SamsungpayToken), "Property is required for class AdditionalDataWallets.");

            if (additionalDataWallets.VisacheckoutCallIdOption.IsSet && additionalDataWallets.VisacheckoutCallId == null)
                throw new ArgumentNullException(nameof(additionalDataWallets.VisacheckoutCallId), "Property is required for class AdditionalDataWallets.");

            if (additionalDataWallets.AndroidpayTokenOption.IsSet)
                writer.WriteString("androidpay.token", additionalDataWallets.AndroidpayToken);

            if (additionalDataWallets.MasterpassTransactionIdOption.IsSet)
                writer.WriteString("masterpass.transactionId", additionalDataWallets.MasterpassTransactionId);

            if (additionalDataWallets.PaymentTokenOption.IsSet)
                writer.WriteString("payment.token", additionalDataWallets.PaymentToken);

            if (additionalDataWallets.PaywithgoogleTokenOption.IsSet)
                writer.WriteString("paywithgoogle.token", additionalDataWallets.PaywithgoogleToken);

            if (additionalDataWallets.SamsungpayTokenOption.IsSet)
                writer.WriteString("samsungpay.token", additionalDataWallets.SamsungpayToken);

            if (additionalDataWallets.VisacheckoutCallIdOption.IsSet)
                writer.WriteString("visacheckout.callId", additionalDataWallets.VisacheckoutCallId);
        }
    }
}
