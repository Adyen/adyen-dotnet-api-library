/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// UPIPaymentMethod
    /// </summary>
    [DataContract(Name = "UPIPaymentMethod")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(PayToPaymentMethod), "payTo")]
    [JsonSubtypes.KnownSubType(typeof(UPIPaymentMethod), "upi_collect")]
    public partial class UPIPaymentMethod : ShopperIdPaymentMethod, IEquatable<UPIPaymentMethod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UPIPaymentMethod" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UPIPaymentMethod() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UPIPaymentMethod" /> class.
        /// </summary>
        /// <param name="virtualPaymentAddress">virtualPaymentAddress.</param>
        /// <param name="type">type (required) (default to &quot;UPIPaymentMethod&quot;).</param>
        public UPIPaymentMethod(string virtualPaymentAddress = default(string), string type = "UPIPaymentMethod") : base(type)
        {
            this.VirtualPaymentAddress = virtualPaymentAddress;
        }

        /// <summary>
        /// Gets or Sets VirtualPaymentAddress
        /// </summary>
        [DataMember(Name = "virtualPaymentAddress", EmitDefaultValue = false)]
        public string VirtualPaymentAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UPIPaymentMethod {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  VirtualPaymentAddress: ").Append(VirtualPaymentAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UPIPaymentMethod);
        }

        /// <summary>
        /// Returns true if UPIPaymentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of UPIPaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UPIPaymentMethod input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.VirtualPaymentAddress == input.VirtualPaymentAddress ||
                    (this.VirtualPaymentAddress != null &&
                    this.VirtualPaymentAddress.Equals(input.VirtualPaymentAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.VirtualPaymentAddress != null)
                {
                    hashCode = (hashCode * 59) + this.VirtualPaymentAddress.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            // VirtualPaymentAddress (string) maxLength
            if (this.VirtualPaymentAddress != null && this.VirtualPaymentAddress.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VirtualPaymentAddress, length must be less than 256.", new [] { "VirtualPaymentAddress" });
            }

            // VirtualPaymentAddress (string) minLength
            if (this.VirtualPaymentAddress != null && this.VirtualPaymentAddress.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VirtualPaymentAddress, length must be greater than 1.", new [] { "VirtualPaymentAddress" });
            }

            yield break;
        }
    }

}
