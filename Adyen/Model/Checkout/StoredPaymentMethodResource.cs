// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// StoredPaymentMethodResource
    /// </summary>
    public partial class StoredPaymentMethodResource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredPaymentMethodResource" /> class.
        /// </summary>
        /// <param name="brand">The brand of the card.</param>
        /// <param name="expiryMonth">The month the card expires.</param>
        /// <param name="expiryYear">The last two digits of the year the card expires. For example, **22** for the year 2022.</param>
        /// <param name="externalResponseCode">The response code returned by an external system (for example after a provisioning operation).</param>
        /// <param name="externalTokenReference">The token reference of a linked token in an external system (for example a network token reference).</param>
        /// <param name="holderName">The unique payment method code.</param>
        /// <param name="iban">The IBAN of the bank account.</param>
        /// <param name="id">A unique identifier of this stored payment method.</param>
        /// <param name="issuerName">The name of the issuer of token or card.</param>
        /// <param name="lastFour">The last four digits of the PAN.</param>
        /// <param name="name">The display name of the stored payment method.</param>
        /// <param name="networkTxReference">Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.</param>
        /// <param name="ownerName">The name of the bank account holder.</param>
        /// <param name="shopperEmail">The shopper’s email address.</param>
        /// <param name="shopperReference">Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.</param>
        /// <param name="supportedRecurringProcessingModels">Defines a recurring payment type. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount.</param>
        /// <param name="type">The type of payment method.</param>
        [JsonConstructor]
        public StoredPaymentMethodResource(Option<string> brand = default, Option<string> expiryMonth = default, Option<string> expiryYear = default, Option<string> externalResponseCode = default, Option<string> externalTokenReference = default, Option<string> holderName = default, Option<string> iban = default, Option<string> id = default, Option<string> issuerName = default, Option<string> lastFour = default, Option<string> name = default, Option<string> networkTxReference = default, Option<string> ownerName = default, Option<string> shopperEmail = default, Option<string> shopperReference = default, Option<List<string>> supportedRecurringProcessingModels = default, Option<string> type = default)
        {
            BrandOption = brand;
            ExpiryMonthOption = expiryMonth;
            ExpiryYearOption = expiryYear;
            ExternalResponseCodeOption = externalResponseCode;
            ExternalTokenReferenceOption = externalTokenReference;
            HolderNameOption = holderName;
            IbanOption = iban;
            IdOption = id;
            IssuerNameOption = issuerName;
            LastFourOption = lastFour;
            NameOption = name;
            NetworkTxReferenceOption = networkTxReference;
            OwnerNameOption = ownerName;
            ShopperEmailOption = shopperEmail;
            ShopperReferenceOption = shopperReference;
            SupportedRecurringProcessingModelsOption = supportedRecurringProcessingModels;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Brand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BrandOption { get; private set; }

        /// <summary>
        /// The brand of the card.
        /// </summary>
        /// <value>The brand of the card.</value>
        [JsonPropertyName("brand")]
        public string Brand { get { return this.BrandOption; } set { this.BrandOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpiryMonth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExpiryMonthOption { get; private set; }

        /// <summary>
        /// The month the card expires.
        /// </summary>
        /// <value>The month the card expires.</value>
        [JsonPropertyName("expiryMonth")]
        public string ExpiryMonth { get { return this.ExpiryMonthOption; } set { this.ExpiryMonthOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpiryYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExpiryYearOption { get; private set; }

        /// <summary>
        /// The last two digits of the year the card expires. For example, **22** for the year 2022.
        /// </summary>
        /// <value>The last two digits of the year the card expires. For example, **22** for the year 2022.</value>
        [JsonPropertyName("expiryYear")]
        public string ExpiryYear { get { return this.ExpiryYearOption; } set { this.ExpiryYearOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExternalResponseCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExternalResponseCodeOption { get; private set; }

        /// <summary>
        /// The response code returned by an external system (for example after a provisioning operation).
        /// </summary>
        /// <value>The response code returned by an external system (for example after a provisioning operation).</value>
        [JsonPropertyName("externalResponseCode")]
        public string ExternalResponseCode { get { return this.ExternalResponseCodeOption; } set { this.ExternalResponseCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExternalTokenReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExternalTokenReferenceOption { get; private set; }

        /// <summary>
        /// The token reference of a linked token in an external system (for example a network token reference).
        /// </summary>
        /// <value>The token reference of a linked token in an external system (for example a network token reference).</value>
        [JsonPropertyName("externalTokenReference")]
        public string ExternalTokenReference { get { return this.ExternalTokenReferenceOption; } set { this.ExternalTokenReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of HolderName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> HolderNameOption { get; private set; }

        /// <summary>
        /// The unique payment method code.
        /// </summary>
        /// <value>The unique payment method code.</value>
        [JsonPropertyName("holderName")]
        public string HolderName { get { return this.HolderNameOption; } set { this.HolderNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Iban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IbanOption { get; private set; }

        /// <summary>
        /// The IBAN of the bank account.
        /// </summary>
        /// <value>The IBAN of the bank account.</value>
        [JsonPropertyName("iban")]
        public string Iban { get { return this.IbanOption; } set { this.IbanOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// A unique identifier of this stored payment method.
        /// </summary>
        /// <value>A unique identifier of this stored payment method.</value>
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IssuerName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IssuerNameOption { get; private set; }

        /// <summary>
        /// The name of the issuer of token or card.
        /// </summary>
        /// <value>The name of the issuer of token or card.</value>
        [JsonPropertyName("issuerName")]
        public string IssuerName { get { return this.IssuerNameOption; } set { this.IssuerNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastFour
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastFourOption { get; private set; }

        /// <summary>
        /// The last four digits of the PAN.
        /// </summary>
        /// <value>The last four digits of the PAN.</value>
        [JsonPropertyName("lastFour")]
        public string LastFour { get { return this.LastFourOption; } set { this.LastFourOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// The display name of the stored payment method.
        /// </summary>
        /// <value>The display name of the stored payment method.</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NetworkTxReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NetworkTxReferenceOption { get; private set; }

        /// <summary>
        /// Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.
        /// </summary>
        /// <value>Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.</value>
        [JsonPropertyName("networkTxReference")]
        public string NetworkTxReference { get { return this.NetworkTxReferenceOption; } set { this.NetworkTxReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OwnerName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OwnerNameOption { get; private set; }

        /// <summary>
        /// The name of the bank account holder.
        /// </summary>
        /// <value>The name of the bank account holder.</value>
        [JsonPropertyName("ownerName")]
        public string OwnerName { get { return this.OwnerNameOption; } set { this.OwnerNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperEmailOption { get; private set; }

        /// <summary>
        /// The shopper’s email address.
        /// </summary>
        /// <value>The shopper’s email address.</value>
        [JsonPropertyName("shopperEmail")]
        public string ShopperEmail { get { return this.ShopperEmailOption; } set { this.ShopperEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperReferenceOption { get; private set; }

        /// <summary>
        /// Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.
        /// </summary>
        /// <value>Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.</value>
        [JsonPropertyName("shopperReference")]
        public string ShopperReference { get { return this.ShopperReferenceOption; } set { this.ShopperReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SupportedRecurringProcessingModels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> SupportedRecurringProcessingModelsOption { get; private set; }

        /// <summary>
        /// Defines a recurring payment type. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount.
        /// </summary>
        /// <value>Defines a recurring payment type. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount.</value>
        [JsonPropertyName("supportedRecurringProcessingModels")]
        public List<string> SupportedRecurringProcessingModels { get { return this.SupportedRecurringProcessingModelsOption; } set { this.SupportedRecurringProcessingModelsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// The type of payment method.
        /// </summary>
        /// <value>The type of payment method.</value>
        [JsonPropertyName("type")]
        public string Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StoredPaymentMethodResource {\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  ExpiryMonth: ").Append(ExpiryMonth).Append("\n");
            sb.Append("  ExpiryYear: ").Append(ExpiryYear).Append("\n");
            sb.Append("  ExternalResponseCode: ").Append(ExternalResponseCode).Append("\n");
            sb.Append("  ExternalTokenReference: ").Append(ExternalTokenReference).Append("\n");
            sb.Append("  HolderName: ").Append(HolderName).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  LastFour: ").Append(LastFour).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NetworkTxReference: ").Append(NetworkTxReference).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("  SupportedRecurringProcessingModels: ").Append(SupportedRecurringProcessingModels).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ShopperReference (string) maxLength
            if (this.ShopperReference != null && this.ShopperReference.Length > 256)
            {
                yield return new ValidationResult("Invalid value for ShopperReference, length must be less than 256.", new [] { "ShopperReference" });
            }

            // ShopperReference (string) minLength
            if (this.ShopperReference != null && this.ShopperReference.Length < 3)
            {
                yield return new ValidationResult("Invalid value for ShopperReference, length must be greater than 3.", new [] { "ShopperReference" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StoredPaymentMethodResource" />
    /// </summary>
    public class StoredPaymentMethodResourceJsonConverter : JsonConverter<StoredPaymentMethodResource>
    {
        /// <summary>
        /// Deserializes json to <see cref="StoredPaymentMethodResource" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override StoredPaymentMethodResource Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> brand = default;
            Option<string> expiryMonth = default;
            Option<string> expiryYear = default;
            Option<string> externalResponseCode = default;
            Option<string> externalTokenReference = default;
            Option<string> holderName = default;
            Option<string> iban = default;
            Option<string> id = default;
            Option<string> issuerName = default;
            Option<string> lastFour = default;
            Option<string> name = default;
            Option<string> networkTxReference = default;
            Option<string> ownerName = default;
            Option<string> shopperEmail = default;
            Option<string> shopperReference = default;
            Option<List<string>> supportedRecurringProcessingModels = default;
            Option<string> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "brand":
                            brand = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expiryMonth":
                            expiryMonth = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expiryYear":
                            expiryYear = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "externalResponseCode":
                            externalResponseCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "externalTokenReference":
                            externalTokenReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "holderName":
                            holderName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "iban":
                            iban = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "issuerName":
                            issuerName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lastFour":
                            lastFour = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "networkTxReference":
                            networkTxReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ownerName":
                            ownerName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperEmail":
                            shopperEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperReference":
                            shopperReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "supportedRecurringProcessingModels":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supportedRecurringProcessingModels = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (brand.IsSet && brand.Value == null)
                throw new ArgumentNullException(nameof(brand), "Property is not nullable for class StoredPaymentMethodResource.");

            if (expiryMonth.IsSet && expiryMonth.Value == null)
                throw new ArgumentNullException(nameof(expiryMonth), "Property is not nullable for class StoredPaymentMethodResource.");

            if (expiryYear.IsSet && expiryYear.Value == null)
                throw new ArgumentNullException(nameof(expiryYear), "Property is not nullable for class StoredPaymentMethodResource.");

            if (externalResponseCode.IsSet && externalResponseCode.Value == null)
                throw new ArgumentNullException(nameof(externalResponseCode), "Property is not nullable for class StoredPaymentMethodResource.");

            if (externalTokenReference.IsSet && externalTokenReference.Value == null)
                throw new ArgumentNullException(nameof(externalTokenReference), "Property is not nullable for class StoredPaymentMethodResource.");

            if (holderName.IsSet && holderName.Value == null)
                throw new ArgumentNullException(nameof(holderName), "Property is not nullable for class StoredPaymentMethodResource.");

            if (iban.IsSet && iban.Value == null)
                throw new ArgumentNullException(nameof(iban), "Property is not nullable for class StoredPaymentMethodResource.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class StoredPaymentMethodResource.");

            if (issuerName.IsSet && issuerName.Value == null)
                throw new ArgumentNullException(nameof(issuerName), "Property is not nullable for class StoredPaymentMethodResource.");

            if (lastFour.IsSet && lastFour.Value == null)
                throw new ArgumentNullException(nameof(lastFour), "Property is not nullable for class StoredPaymentMethodResource.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class StoredPaymentMethodResource.");

            if (networkTxReference.IsSet && networkTxReference.Value == null)
                throw new ArgumentNullException(nameof(networkTxReference), "Property is not nullable for class StoredPaymentMethodResource.");

            if (ownerName.IsSet && ownerName.Value == null)
                throw new ArgumentNullException(nameof(ownerName), "Property is not nullable for class StoredPaymentMethodResource.");

            if (shopperEmail.IsSet && shopperEmail.Value == null)
                throw new ArgumentNullException(nameof(shopperEmail), "Property is not nullable for class StoredPaymentMethodResource.");

            if (shopperReference.IsSet && shopperReference.Value == null)
                throw new ArgumentNullException(nameof(shopperReference), "Property is not nullable for class StoredPaymentMethodResource.");

            if (supportedRecurringProcessingModels.IsSet && supportedRecurringProcessingModels.Value == null)
                throw new ArgumentNullException(nameof(supportedRecurringProcessingModels), "Property is not nullable for class StoredPaymentMethodResource.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class StoredPaymentMethodResource.");

            return new StoredPaymentMethodResource(brand, expiryMonth, expiryYear, externalResponseCode, externalTokenReference, holderName, iban, id, issuerName, lastFour, name, networkTxReference, ownerName, shopperEmail, shopperReference, supportedRecurringProcessingModels, type);
        }

        /// <summary>
        /// Serializes a <see cref="StoredPaymentMethodResource" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="storedPaymentMethodResource"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, StoredPaymentMethodResource storedPaymentMethodResource, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, storedPaymentMethodResource, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="StoredPaymentMethodResource" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="storedPaymentMethodResource"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, StoredPaymentMethodResource storedPaymentMethodResource, JsonSerializerOptions jsonSerializerOptions)
        {
            if (storedPaymentMethodResource.BrandOption.IsSet && storedPaymentMethodResource.Brand == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.Brand), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.ExpiryMonthOption.IsSet && storedPaymentMethodResource.ExpiryMonth == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.ExpiryMonth), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.ExpiryYearOption.IsSet && storedPaymentMethodResource.ExpiryYear == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.ExpiryYear), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.ExternalResponseCodeOption.IsSet && storedPaymentMethodResource.ExternalResponseCode == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.ExternalResponseCode), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.ExternalTokenReferenceOption.IsSet && storedPaymentMethodResource.ExternalTokenReference == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.ExternalTokenReference), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.HolderNameOption.IsSet && storedPaymentMethodResource.HolderName == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.HolderName), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.IbanOption.IsSet && storedPaymentMethodResource.Iban == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.Iban), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.IdOption.IsSet && storedPaymentMethodResource.Id == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.Id), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.IssuerNameOption.IsSet && storedPaymentMethodResource.IssuerName == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.IssuerName), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.LastFourOption.IsSet && storedPaymentMethodResource.LastFour == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.LastFour), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.NameOption.IsSet && storedPaymentMethodResource.Name == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.Name), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.NetworkTxReferenceOption.IsSet && storedPaymentMethodResource.NetworkTxReference == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.NetworkTxReference), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.OwnerNameOption.IsSet && storedPaymentMethodResource.OwnerName == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.OwnerName), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.ShopperEmailOption.IsSet && storedPaymentMethodResource.ShopperEmail == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.ShopperEmail), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.ShopperReferenceOption.IsSet && storedPaymentMethodResource.ShopperReference == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.ShopperReference), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.SupportedRecurringProcessingModelsOption.IsSet && storedPaymentMethodResource.SupportedRecurringProcessingModels == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.SupportedRecurringProcessingModels), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.TypeOption.IsSet && storedPaymentMethodResource.Type == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodResource.Type), "Property is required for class StoredPaymentMethodResource.");

            if (storedPaymentMethodResource.BrandOption.IsSet)
                writer.WriteString("brand", storedPaymentMethodResource.Brand);

            if (storedPaymentMethodResource.ExpiryMonthOption.IsSet)
                writer.WriteString("expiryMonth", storedPaymentMethodResource.ExpiryMonth);

            if (storedPaymentMethodResource.ExpiryYearOption.IsSet)
                writer.WriteString("expiryYear", storedPaymentMethodResource.ExpiryYear);

            if (storedPaymentMethodResource.ExternalResponseCodeOption.IsSet)
                writer.WriteString("externalResponseCode", storedPaymentMethodResource.ExternalResponseCode);

            if (storedPaymentMethodResource.ExternalTokenReferenceOption.IsSet)
                writer.WriteString("externalTokenReference", storedPaymentMethodResource.ExternalTokenReference);

            if (storedPaymentMethodResource.HolderNameOption.IsSet)
                writer.WriteString("holderName", storedPaymentMethodResource.HolderName);

            if (storedPaymentMethodResource.IbanOption.IsSet)
                writer.WriteString("iban", storedPaymentMethodResource.Iban);

            if (storedPaymentMethodResource.IdOption.IsSet)
                writer.WriteString("id", storedPaymentMethodResource.Id);

            if (storedPaymentMethodResource.IssuerNameOption.IsSet)
                writer.WriteString("issuerName", storedPaymentMethodResource.IssuerName);

            if (storedPaymentMethodResource.LastFourOption.IsSet)
                writer.WriteString("lastFour", storedPaymentMethodResource.LastFour);

            if (storedPaymentMethodResource.NameOption.IsSet)
                writer.WriteString("name", storedPaymentMethodResource.Name);

            if (storedPaymentMethodResource.NetworkTxReferenceOption.IsSet)
                writer.WriteString("networkTxReference", storedPaymentMethodResource.NetworkTxReference);

            if (storedPaymentMethodResource.OwnerNameOption.IsSet)
                writer.WriteString("ownerName", storedPaymentMethodResource.OwnerName);

            if (storedPaymentMethodResource.ShopperEmailOption.IsSet)
                writer.WriteString("shopperEmail", storedPaymentMethodResource.ShopperEmail);

            if (storedPaymentMethodResource.ShopperReferenceOption.IsSet)
                writer.WriteString("shopperReference", storedPaymentMethodResource.ShopperReference);

            if (storedPaymentMethodResource.SupportedRecurringProcessingModelsOption.IsSet)
            {
                writer.WritePropertyName("supportedRecurringProcessingModels");
                JsonSerializer.Serialize(writer, storedPaymentMethodResource.SupportedRecurringProcessingModels, jsonSerializerOptions);
            }
            if (storedPaymentMethodResource.TypeOption.IsSet)
                writer.WriteString("type", storedPaymentMethodResource.Type);
        }
    }
}
