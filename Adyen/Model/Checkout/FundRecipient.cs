// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// FundRecipient
    /// </summary>
    public partial class FundRecipient : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundRecipient" /> class.
        /// </summary>
        /// <param name="iBAN">The IBAN of the bank account where the funds are being transferred to.</param>
        /// <param name="billingAddress">billingAddress</param>
        /// <param name="paymentMethod">paymentMethod</param>
        /// <param name="shopperEmail">The email address of the shopper.</param>
        /// <param name="shopperName">shopperName</param>
        /// <param name="shopperReference">Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.</param>
        /// <param name="storedPaymentMethodId">This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</param>
        /// <param name="subMerchant">subMerchant</param>
        /// <param name="telephoneNumber">The telephone number of the shopper.</param>
        /// <param name="walletIdentifier">The unique identifier for the wallet the funds are being transferred to. You can use the shopper reference or any other identifier.</param>
        /// <param name="walletOwnerTaxId">The tax identifier of the person receiving the funds.</param>
        /// <param name="walletPurpose">The purpose of a digital wallet transaction.</param>
        [JsonConstructor]
        public FundRecipient(Option<string> iBAN = default, Option<Address> billingAddress = default, Option<CardDetails> paymentMethod = default, Option<string> shopperEmail = default, Option<Name> shopperName = default, Option<string> shopperReference = default, Option<string> storedPaymentMethodId = default, Option<SubMerchant> subMerchant = default, Option<string> telephoneNumber = default, Option<string> walletIdentifier = default, Option<string> walletOwnerTaxId = default, Option<WalletPurposeEnum?> walletPurpose = default)
        {
            IBANOption = iBAN;
            BillingAddressOption = billingAddress;
            PaymentMethodOption = paymentMethod;
            ShopperEmailOption = shopperEmail;
            ShopperNameOption = shopperName;
            ShopperReferenceOption = shopperReference;
            StoredPaymentMethodIdOption = storedPaymentMethodId;
            SubMerchantOption = subMerchant;
            TelephoneNumberOption = telephoneNumber;
            WalletIdentifierOption = walletIdentifier;
            WalletOwnerTaxIdOption = walletOwnerTaxId;
            WalletPurposeOption = walletPurpose;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The purpose of a digital wallet transaction.
        /// </summary>
        /// <value>The purpose of a digital wallet transaction.</value>
        public enum WalletPurposeEnum
        {
            /// <summary>
            /// Enum IdentifiedBoleto for value: identifiedBoleto
            /// </summary>
            IdentifiedBoleto = 1,

            /// <summary>
            /// Enum TransferDifferentWallet for value: transferDifferentWallet
            /// </summary>
            TransferDifferentWallet = 2,

            /// <summary>
            /// Enum TransferOwnWallet for value: transferOwnWallet
            /// </summary>
            TransferOwnWallet = 3,

            /// <summary>
            /// Enum TransferSameWallet for value: transferSameWallet
            /// </summary>
            TransferSameWallet = 4,

            /// <summary>
            /// Enum UnidentifiedBoleto for value: unidentifiedBoleto
            /// </summary>
            UnidentifiedBoleto = 5
        }

        /// <summary>
        /// Returns a <see cref="WalletPurposeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static WalletPurposeEnum WalletPurposeEnumFromString(string value)
        {
            if (value.Equals("identifiedBoleto"))
                return WalletPurposeEnum.IdentifiedBoleto;

            if (value.Equals("transferDifferentWallet"))
                return WalletPurposeEnum.TransferDifferentWallet;

            if (value.Equals("transferOwnWallet"))
                return WalletPurposeEnum.TransferOwnWallet;

            if (value.Equals("transferSameWallet"))
                return WalletPurposeEnum.TransferSameWallet;

            if (value.Equals("unidentifiedBoleto"))
                return WalletPurposeEnum.UnidentifiedBoleto;

            throw new NotImplementedException($"Could not convert value to type WalletPurposeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="WalletPurposeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WalletPurposeEnum? WalletPurposeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("identifiedBoleto"))
                return WalletPurposeEnum.IdentifiedBoleto;

            if (value.Equals("transferDifferentWallet"))
                return WalletPurposeEnum.TransferDifferentWallet;

            if (value.Equals("transferOwnWallet"))
                return WalletPurposeEnum.TransferOwnWallet;

            if (value.Equals("transferSameWallet"))
                return WalletPurposeEnum.TransferSameWallet;

            if (value.Equals("unidentifiedBoleto"))
                return WalletPurposeEnum.UnidentifiedBoleto;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="WalletPurposeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string WalletPurposeEnumToJsonValue(WalletPurposeEnum? value)
        {
            if (value == WalletPurposeEnum.IdentifiedBoleto)
                return "identifiedBoleto";

            if (value == WalletPurposeEnum.TransferDifferentWallet)
                return "transferDifferentWallet";

            if (value == WalletPurposeEnum.TransferOwnWallet)
                return "transferOwnWallet";

            if (value == WalletPurposeEnum.TransferSameWallet)
                return "transferSameWallet";

            if (value == WalletPurposeEnum.UnidentifiedBoleto)
                return "unidentifiedBoleto";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of WalletPurpose
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WalletPurposeEnum?> WalletPurposeOption { get; private set; }

        /// <summary>
        /// The purpose of a digital wallet transaction.
        /// </summary>
        /// <value>The purpose of a digital wallet transaction.</value>
        [JsonPropertyName("walletPurpose")]
        public WalletPurposeEnum? WalletPurpose { get { return this.WalletPurposeOption; } set { this.WalletPurposeOption = new Option<WalletPurposeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of IBAN
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IBANOption { get; private set; }

        /// <summary>
        /// The IBAN of the bank account where the funds are being transferred to.
        /// </summary>
        /// <value>The IBAN of the bank account where the funds are being transferred to.</value>
        [JsonPropertyName("IBAN")]
        public string IBAN { get { return this.IBANOption; } set { this.IBANOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BillingAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Address> BillingAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [JsonPropertyName("billingAddress")]
        public Address BillingAddress { get { return this.BillingAddressOption; } set { this.BillingAddressOption = new Option<Address>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CardDetails> PaymentMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [JsonPropertyName("paymentMethod")]
        public CardDetails PaymentMethod { get { return this.PaymentMethodOption; } set { this.PaymentMethodOption = new Option<CardDetails>(value); } }

        /// <summary>
        /// Used to track the state of ShopperEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperEmailOption { get; private set; }

        /// <summary>
        /// The email address of the shopper.
        /// </summary>
        /// <value>The email address of the shopper.</value>
        [JsonPropertyName("shopperEmail")]
        public string ShopperEmail { get { return this.ShopperEmailOption; } set { this.ShopperEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Name> ShopperNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShopperName
        /// </summary>
        [JsonPropertyName("shopperName")]
        public Name ShopperName { get { return this.ShopperNameOption; } set { this.ShopperNameOption = new Option<Name>(value); } }

        /// <summary>
        /// Used to track the state of ShopperReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperReferenceOption { get; private set; }

        /// <summary>
        /// Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.
        /// </summary>
        /// <value>Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.</value>
        [JsonPropertyName("shopperReference")]
        public string ShopperReference { get { return this.ShopperReferenceOption; } set { this.ShopperReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StoredPaymentMethodId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StoredPaymentMethodIdOption { get; private set; }

        /// <summary>
        /// This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.
        /// </summary>
        /// <value>This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</value>
        [JsonPropertyName("storedPaymentMethodId")]
        public string StoredPaymentMethodId { get { return this.StoredPaymentMethodIdOption; } set { this.StoredPaymentMethodIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMerchant
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SubMerchant> SubMerchantOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubMerchant
        /// </summary>
        [JsonPropertyName("subMerchant")]
        public SubMerchant SubMerchant { get { return this.SubMerchantOption; } set { this.SubMerchantOption = new Option<SubMerchant>(value); } }

        /// <summary>
        /// Used to track the state of TelephoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TelephoneNumberOption { get; private set; }

        /// <summary>
        /// The telephone number of the shopper.
        /// </summary>
        /// <value>The telephone number of the shopper.</value>
        [JsonPropertyName("telephoneNumber")]
        public string TelephoneNumber { get { return this.TelephoneNumberOption; } set { this.TelephoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of WalletIdentifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> WalletIdentifierOption { get; private set; }

        /// <summary>
        /// The unique identifier for the wallet the funds are being transferred to. You can use the shopper reference or any other identifier.
        /// </summary>
        /// <value>The unique identifier for the wallet the funds are being transferred to. You can use the shopper reference or any other identifier.</value>
        [JsonPropertyName("walletIdentifier")]
        public string WalletIdentifier { get { return this.WalletIdentifierOption; } set { this.WalletIdentifierOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of WalletOwnerTaxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> WalletOwnerTaxIdOption { get; private set; }

        /// <summary>
        /// The tax identifier of the person receiving the funds.
        /// </summary>
        /// <value>The tax identifier of the person receiving the funds.</value>
        [JsonPropertyName("walletOwnerTaxId")]
        public string WalletOwnerTaxId { get { return this.WalletOwnerTaxIdOption; } set { this.WalletOwnerTaxIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundRecipient {\n");
            sb.Append("  IBAN: ").Append(IBAN).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("  ShopperName: ").Append(ShopperName).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("  StoredPaymentMethodId: ").Append(StoredPaymentMethodId).Append("\n");
            sb.Append("  SubMerchant: ").Append(SubMerchant).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  WalletIdentifier: ").Append(WalletIdentifier).Append("\n");
            sb.Append("  WalletOwnerTaxId: ").Append(WalletOwnerTaxId).Append("\n");
            sb.Append("  WalletPurpose: ").Append(WalletPurpose).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ShopperReference (string) maxLength
            if (this.ShopperReference != null && this.ShopperReference.Length > 256)
            {
                yield return new ValidationResult("Invalid value for ShopperReference, length must be less than 256.", new [] { "ShopperReference" });
            }

            // ShopperReference (string) minLength
            if (this.ShopperReference != null && this.ShopperReference.Length < 3)
            {
                yield return new ValidationResult("Invalid value for ShopperReference, length must be greater than 3.", new [] { "ShopperReference" });
            }

            // StoredPaymentMethodId (string) maxLength
            if (this.StoredPaymentMethodId != null && this.StoredPaymentMethodId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for StoredPaymentMethodId, length must be less than 64.", new [] { "StoredPaymentMethodId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FundRecipient" />
    /// </summary>
    public class FundRecipientJsonConverter : JsonConverter<FundRecipient>
    {
        /// <summary>
        /// Deserializes json to <see cref="FundRecipient" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FundRecipient Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> iBAN = default;
            Option<Address> billingAddress = default;
            Option<CardDetails> paymentMethod = default;
            Option<string> shopperEmail = default;
            Option<Name> shopperName = default;
            Option<string> shopperReference = default;
            Option<string> storedPaymentMethodId = default;
            Option<SubMerchant> subMerchant = default;
            Option<string> telephoneNumber = default;
            Option<string> walletIdentifier = default;
            Option<string> walletOwnerTaxId = default;
            Option<FundRecipient.WalletPurposeEnum?> walletPurpose = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "IBAN":
                            iBAN = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "billingAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                billingAddress = new Option<Address>(JsonSerializer.Deserialize<Address>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "paymentMethod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentMethod = new Option<CardDetails>(JsonSerializer.Deserialize<CardDetails>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shopperEmail":
                            shopperEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperName":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shopperName = new Option<Name>(JsonSerializer.Deserialize<Name>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shopperReference":
                            shopperReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "storedPaymentMethodId":
                            storedPaymentMethodId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMerchant":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subMerchant = new Option<SubMerchant>(JsonSerializer.Deserialize<SubMerchant>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "telephoneNumber":
                            telephoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "walletIdentifier":
                            walletIdentifier = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "walletOwnerTaxId":
                            walletOwnerTaxId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "walletPurpose":
                            string walletPurposeRawValue = utf8JsonReader.GetString();
                            if (walletPurposeRawValue != null)
                                walletPurpose = new Option<FundRecipient.WalletPurposeEnum?>(FundRecipient.WalletPurposeEnumFromStringOrDefault(walletPurposeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (iBAN.IsSet && iBAN.Value == null)
                throw new ArgumentNullException(nameof(iBAN), "Property is not nullable for class FundRecipient.");

            if (billingAddress.IsSet && billingAddress.Value == null)
                throw new ArgumentNullException(nameof(billingAddress), "Property is not nullable for class FundRecipient.");

            if (paymentMethod.IsSet && paymentMethod.Value == null)
                throw new ArgumentNullException(nameof(paymentMethod), "Property is not nullable for class FundRecipient.");

            if (shopperEmail.IsSet && shopperEmail.Value == null)
                throw new ArgumentNullException(nameof(shopperEmail), "Property is not nullable for class FundRecipient.");

            if (shopperName.IsSet && shopperName.Value == null)
                throw new ArgumentNullException(nameof(shopperName), "Property is not nullable for class FundRecipient.");

            if (shopperReference.IsSet && shopperReference.Value == null)
                throw new ArgumentNullException(nameof(shopperReference), "Property is not nullable for class FundRecipient.");

            if (storedPaymentMethodId.IsSet && storedPaymentMethodId.Value == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodId), "Property is not nullable for class FundRecipient.");

            if (subMerchant.IsSet && subMerchant.Value == null)
                throw new ArgumentNullException(nameof(subMerchant), "Property is not nullable for class FundRecipient.");

            if (telephoneNumber.IsSet && telephoneNumber.Value == null)
                throw new ArgumentNullException(nameof(telephoneNumber), "Property is not nullable for class FundRecipient.");

            if (walletIdentifier.IsSet && walletIdentifier.Value == null)
                throw new ArgumentNullException(nameof(walletIdentifier), "Property is not nullable for class FundRecipient.");

            if (walletOwnerTaxId.IsSet && walletOwnerTaxId.Value == null)
                throw new ArgumentNullException(nameof(walletOwnerTaxId), "Property is not nullable for class FundRecipient.");

            if (walletPurpose.IsSet && walletPurpose.Value == null)
                throw new ArgumentNullException(nameof(walletPurpose), "Property is not nullable for class FundRecipient.");

            return new FundRecipient(iBAN, billingAddress, paymentMethod, shopperEmail, shopperName, shopperReference, storedPaymentMethodId, subMerchant, telephoneNumber, walletIdentifier, walletOwnerTaxId, walletPurpose);
        }

        /// <summary>
        /// Serializes a <see cref="FundRecipient" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fundRecipient"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FundRecipient fundRecipient, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fundRecipient, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FundRecipient" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fundRecipient"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FundRecipient fundRecipient, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fundRecipient.IBANOption.IsSet && fundRecipient.IBAN == null)
                throw new ArgumentNullException(nameof(fundRecipient.IBAN), "Property is required for class FundRecipient.");

            if (fundRecipient.BillingAddressOption.IsSet && fundRecipient.BillingAddress == null)
                throw new ArgumentNullException(nameof(fundRecipient.BillingAddress), "Property is required for class FundRecipient.");

            if (fundRecipient.PaymentMethodOption.IsSet && fundRecipient.PaymentMethod == null)
                throw new ArgumentNullException(nameof(fundRecipient.PaymentMethod), "Property is required for class FundRecipient.");

            if (fundRecipient.ShopperEmailOption.IsSet && fundRecipient.ShopperEmail == null)
                throw new ArgumentNullException(nameof(fundRecipient.ShopperEmail), "Property is required for class FundRecipient.");

            if (fundRecipient.ShopperNameOption.IsSet && fundRecipient.ShopperName == null)
                throw new ArgumentNullException(nameof(fundRecipient.ShopperName), "Property is required for class FundRecipient.");

            if (fundRecipient.ShopperReferenceOption.IsSet && fundRecipient.ShopperReference == null)
                throw new ArgumentNullException(nameof(fundRecipient.ShopperReference), "Property is required for class FundRecipient.");

            if (fundRecipient.StoredPaymentMethodIdOption.IsSet && fundRecipient.StoredPaymentMethodId == null)
                throw new ArgumentNullException(nameof(fundRecipient.StoredPaymentMethodId), "Property is required for class FundRecipient.");

            if (fundRecipient.SubMerchantOption.IsSet && fundRecipient.SubMerchant == null)
                throw new ArgumentNullException(nameof(fundRecipient.SubMerchant), "Property is required for class FundRecipient.");

            if (fundRecipient.TelephoneNumberOption.IsSet && fundRecipient.TelephoneNumber == null)
                throw new ArgumentNullException(nameof(fundRecipient.TelephoneNumber), "Property is required for class FundRecipient.");

            if (fundRecipient.WalletIdentifierOption.IsSet && fundRecipient.WalletIdentifier == null)
                throw new ArgumentNullException(nameof(fundRecipient.WalletIdentifier), "Property is required for class FundRecipient.");

            if (fundRecipient.WalletOwnerTaxIdOption.IsSet && fundRecipient.WalletOwnerTaxId == null)
                throw new ArgumentNullException(nameof(fundRecipient.WalletOwnerTaxId), "Property is required for class FundRecipient.");

            if (fundRecipient.IBANOption.IsSet)
                writer.WriteString("IBAN", fundRecipient.IBAN);

            if (fundRecipient.BillingAddressOption.IsSet)
            {
                writer.WritePropertyName("billingAddress");
                JsonSerializer.Serialize(writer, fundRecipient.BillingAddress, jsonSerializerOptions);
            }
            if (fundRecipient.PaymentMethodOption.IsSet)
            {
                writer.WritePropertyName("paymentMethod");
                JsonSerializer.Serialize(writer, fundRecipient.PaymentMethod, jsonSerializerOptions);
            }
            if (fundRecipient.ShopperEmailOption.IsSet)
                writer.WriteString("shopperEmail", fundRecipient.ShopperEmail);

            if (fundRecipient.ShopperNameOption.IsSet)
            {
                writer.WritePropertyName("shopperName");
                JsonSerializer.Serialize(writer, fundRecipient.ShopperName, jsonSerializerOptions);
            }
            if (fundRecipient.ShopperReferenceOption.IsSet)
                writer.WriteString("shopperReference", fundRecipient.ShopperReference);

            if (fundRecipient.StoredPaymentMethodIdOption.IsSet)
                writer.WriteString("storedPaymentMethodId", fundRecipient.StoredPaymentMethodId);

            if (fundRecipient.SubMerchantOption.IsSet)
            {
                writer.WritePropertyName("subMerchant");
                JsonSerializer.Serialize(writer, fundRecipient.SubMerchant, jsonSerializerOptions);
            }
            if (fundRecipient.TelephoneNumberOption.IsSet)
                writer.WriteString("telephoneNumber", fundRecipient.TelephoneNumber);

            if (fundRecipient.WalletIdentifierOption.IsSet)
                writer.WriteString("walletIdentifier", fundRecipient.WalletIdentifier);

            if (fundRecipient.WalletOwnerTaxIdOption.IsSet)
                writer.WriteString("walletOwnerTaxId", fundRecipient.WalletOwnerTaxId);

            var walletPurposeRawValue = FundRecipient.WalletPurposeEnumToJsonValue(fundRecipient.WalletPurposeOption.Value.Value);
            writer.WriteString("walletPurpose", walletPurposeRawValue);
        }
    }
}
