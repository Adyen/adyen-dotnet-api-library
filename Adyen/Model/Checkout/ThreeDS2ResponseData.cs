// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ThreeDS2ResponseData
    /// </summary>
    public partial class ThreeDS2ResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDS2ResponseData" /> class.
        /// </summary>
        /// <param name="acsChallengeMandated">acsChallengeMandated</param>
        /// <param name="acsOperatorID">acsOperatorID</param>
        /// <param name="acsReferenceNumber">acsReferenceNumber</param>
        /// <param name="acsSignedContent">acsSignedContent</param>
        /// <param name="acsTransID">acsTransID</param>
        /// <param name="acsURL">acsURL</param>
        /// <param name="authenticationType">authenticationType</param>
        /// <param name="cardHolderInfo">cardHolderInfo</param>
        /// <param name="cavvAlgorithm">cavvAlgorithm</param>
        /// <param name="challengeIndicator">challengeIndicator</param>
        /// <param name="dsReferenceNumber">dsReferenceNumber</param>
        /// <param name="dsTransID">dsTransID</param>
        /// <param name="exemptionIndicator">exemptionIndicator</param>
        /// <param name="messageVersion">messageVersion</param>
        /// <param name="riskScore">riskScore</param>
        /// <param name="sdkEphemPubKey">sdkEphemPubKey</param>
        /// <param name="threeDSServerTransID">threeDSServerTransID</param>
        /// <param name="transStatus">transStatus</param>
        /// <param name="transStatusReason">transStatusReason</param>
        [JsonConstructor]
        public ThreeDS2ResponseData(Option<string> acsChallengeMandated = default, Option<string> acsOperatorID = default, Option<string> acsReferenceNumber = default, Option<string> acsSignedContent = default, Option<string> acsTransID = default, Option<string> acsURL = default, Option<string> authenticationType = default, Option<string> cardHolderInfo = default, Option<string> cavvAlgorithm = default, Option<string> challengeIndicator = default, Option<string> dsReferenceNumber = default, Option<string> dsTransID = default, Option<string> exemptionIndicator = default, Option<string> messageVersion = default, Option<string> riskScore = default, Option<string> sdkEphemPubKey = default, Option<string> threeDSServerTransID = default, Option<string> transStatus = default, Option<string> transStatusReason = default)
        {
            AcsChallengeMandatedOption = acsChallengeMandated;
            AcsOperatorIDOption = acsOperatorID;
            AcsReferenceNumberOption = acsReferenceNumber;
            AcsSignedContentOption = acsSignedContent;
            AcsTransIDOption = acsTransID;
            AcsURLOption = acsURL;
            AuthenticationTypeOption = authenticationType;
            CardHolderInfoOption = cardHolderInfo;
            CavvAlgorithmOption = cavvAlgorithm;
            ChallengeIndicatorOption = challengeIndicator;
            DsReferenceNumberOption = dsReferenceNumber;
            DsTransIDOption = dsTransID;
            ExemptionIndicatorOption = exemptionIndicator;
            MessageVersionOption = messageVersion;
            RiskScoreOption = riskScore;
            SdkEphemPubKeyOption = sdkEphemPubKey;
            ThreeDSServerTransIDOption = threeDSServerTransID;
            TransStatusOption = transStatus;
            TransStatusReasonOption = transStatusReason;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AcsChallengeMandated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AcsChallengeMandatedOption { get; private set; }

        /// <summary>
        /// Gets or Sets AcsChallengeMandated
        /// </summary>
        [JsonPropertyName("acsChallengeMandated")]
        public string AcsChallengeMandated { get { return this.AcsChallengeMandatedOption; } set { this.AcsChallengeMandatedOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AcsOperatorID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AcsOperatorIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets AcsOperatorID
        /// </summary>
        [JsonPropertyName("acsOperatorID")]
        public string AcsOperatorID { get { return this.AcsOperatorIDOption; } set { this.AcsOperatorIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AcsReferenceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AcsReferenceNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets AcsReferenceNumber
        /// </summary>
        [JsonPropertyName("acsReferenceNumber")]
        public string AcsReferenceNumber { get { return this.AcsReferenceNumberOption; } set { this.AcsReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AcsSignedContent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AcsSignedContentOption { get; private set; }

        /// <summary>
        /// Gets or Sets AcsSignedContent
        /// </summary>
        [JsonPropertyName("acsSignedContent")]
        public string AcsSignedContent { get { return this.AcsSignedContentOption; } set { this.AcsSignedContentOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AcsTransID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AcsTransIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets AcsTransID
        /// </summary>
        [JsonPropertyName("acsTransID")]
        public string AcsTransID { get { return this.AcsTransIDOption; } set { this.AcsTransIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AcsURL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AcsURLOption { get; private set; }

        /// <summary>
        /// Gets or Sets AcsURL
        /// </summary>
        [JsonPropertyName("acsURL")]
        public string AcsURL { get { return this.AcsURLOption; } set { this.AcsURLOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AuthenticationType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AuthenticationTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthenticationType
        /// </summary>
        [JsonPropertyName("authenticationType")]
        public string AuthenticationType { get { return this.AuthenticationTypeOption; } set { this.AuthenticationTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CardHolderInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CardHolderInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets CardHolderInfo
        /// </summary>
        [JsonPropertyName("cardHolderInfo")]
        public string CardHolderInfo { get { return this.CardHolderInfoOption; } set { this.CardHolderInfoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CavvAlgorithm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CavvAlgorithmOption { get; private set; }

        /// <summary>
        /// Gets or Sets CavvAlgorithm
        /// </summary>
        [JsonPropertyName("cavvAlgorithm")]
        public string CavvAlgorithm { get { return this.CavvAlgorithmOption; } set { this.CavvAlgorithmOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ChallengeIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ChallengeIndicatorOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChallengeIndicator
        /// </summary>
        [JsonPropertyName("challengeIndicator")]
        public string ChallengeIndicator { get { return this.ChallengeIndicatorOption; } set { this.ChallengeIndicatorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DsReferenceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DsReferenceNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets DsReferenceNumber
        /// </summary>
        [JsonPropertyName("dsReferenceNumber")]
        public string DsReferenceNumber { get { return this.DsReferenceNumberOption; } set { this.DsReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DsTransID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DsTransIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets DsTransID
        /// </summary>
        [JsonPropertyName("dsTransID")]
        public string DsTransID { get { return this.DsTransIDOption; } set { this.DsTransIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExemptionIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExemptionIndicatorOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExemptionIndicator
        /// </summary>
        [JsonPropertyName("exemptionIndicator")]
        public string ExemptionIndicator { get { return this.ExemptionIndicatorOption; } set { this.ExemptionIndicatorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MessageVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets MessageVersion
        /// </summary>
        [JsonPropertyName("messageVersion")]
        public string MessageVersion { get { return this.MessageVersionOption; } set { this.MessageVersionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskScoreOption { get; private set; }

        /// <summary>
        /// Gets or Sets RiskScore
        /// </summary>
        [JsonPropertyName("riskScore")]
        public string RiskScore { get { return this.RiskScoreOption; } set { this.RiskScoreOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SdkEphemPubKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SdkEphemPubKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets SdkEphemPubKey
        /// </summary>
        [JsonPropertyName("sdkEphemPubKey")]
        public string SdkEphemPubKey { get { return this.SdkEphemPubKeyOption; } set { this.SdkEphemPubKeyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSServerTransID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSServerTransIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreeDSServerTransID
        /// </summary>
        [JsonPropertyName("threeDSServerTransID")]
        public string ThreeDSServerTransID { get { return this.ThreeDSServerTransIDOption; } set { this.ThreeDSServerTransIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TransStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TransStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets TransStatus
        /// </summary>
        [JsonPropertyName("transStatus")]
        public string TransStatus { get { return this.TransStatusOption; } set { this.TransStatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TransStatusReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TransStatusReasonOption { get; private set; }

        /// <summary>
        /// Gets or Sets TransStatusReason
        /// </summary>
        [JsonPropertyName("transStatusReason")]
        public string TransStatusReason { get { return this.TransStatusReasonOption; } set { this.TransStatusReasonOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDS2ResponseData {\n");
            sb.Append("  AcsChallengeMandated: ").Append(AcsChallengeMandated).Append("\n");
            sb.Append("  AcsOperatorID: ").Append(AcsOperatorID).Append("\n");
            sb.Append("  AcsReferenceNumber: ").Append(AcsReferenceNumber).Append("\n");
            sb.Append("  AcsSignedContent: ").Append(AcsSignedContent).Append("\n");
            sb.Append("  AcsTransID: ").Append(AcsTransID).Append("\n");
            sb.Append("  AcsURL: ").Append(AcsURL).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  CardHolderInfo: ").Append(CardHolderInfo).Append("\n");
            sb.Append("  CavvAlgorithm: ").Append(CavvAlgorithm).Append("\n");
            sb.Append("  ChallengeIndicator: ").Append(ChallengeIndicator).Append("\n");
            sb.Append("  DsReferenceNumber: ").Append(DsReferenceNumber).Append("\n");
            sb.Append("  DsTransID: ").Append(DsTransID).Append("\n");
            sb.Append("  ExemptionIndicator: ").Append(ExemptionIndicator).Append("\n");
            sb.Append("  MessageVersion: ").Append(MessageVersion).Append("\n");
            sb.Append("  RiskScore: ").Append(RiskScore).Append("\n");
            sb.Append("  SdkEphemPubKey: ").Append(SdkEphemPubKey).Append("\n");
            sb.Append("  ThreeDSServerTransID: ").Append(ThreeDSServerTransID).Append("\n");
            sb.Append("  TransStatus: ").Append(TransStatus).Append("\n");
            sb.Append("  TransStatusReason: ").Append(TransStatusReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ThreeDS2ResponseData" />
    /// </summary>
    public class ThreeDS2ResponseDataJsonConverter : JsonConverter<ThreeDS2ResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="ThreeDS2ResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ThreeDS2ResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> acsChallengeMandated = default;
            Option<string> acsOperatorID = default;
            Option<string> acsReferenceNumber = default;
            Option<string> acsSignedContent = default;
            Option<string> acsTransID = default;
            Option<string> acsURL = default;
            Option<string> authenticationType = default;
            Option<string> cardHolderInfo = default;
            Option<string> cavvAlgorithm = default;
            Option<string> challengeIndicator = default;
            Option<string> dsReferenceNumber = default;
            Option<string> dsTransID = default;
            Option<string> exemptionIndicator = default;
            Option<string> messageVersion = default;
            Option<string> riskScore = default;
            Option<string> sdkEphemPubKey = default;
            Option<string> threeDSServerTransID = default;
            Option<string> transStatus = default;
            Option<string> transStatusReason = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "acsChallengeMandated":
                            acsChallengeMandated = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "acsOperatorID":
                            acsOperatorID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "acsReferenceNumber":
                            acsReferenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "acsSignedContent":
                            acsSignedContent = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "acsTransID":
                            acsTransID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "acsURL":
                            acsURL = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "authenticationType":
                            authenticationType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cardHolderInfo":
                            cardHolderInfo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cavvAlgorithm":
                            cavvAlgorithm = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "challengeIndicator":
                            challengeIndicator = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dsReferenceNumber":
                            dsReferenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dsTransID":
                            dsTransID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "exemptionIndicator":
                            exemptionIndicator = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "messageVersion":
                            messageVersion = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskScore":
                            riskScore = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sdkEphemPubKey":
                            sdkEphemPubKey = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDSServerTransID":
                            threeDSServerTransID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "transStatus":
                            transStatus = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "transStatusReason":
                            transStatusReason = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (acsChallengeMandated.IsSet && acsChallengeMandated.Value == null)
                throw new ArgumentNullException(nameof(acsChallengeMandated), "Property is not nullable for class ThreeDS2ResponseData.");

            if (acsOperatorID.IsSet && acsOperatorID.Value == null)
                throw new ArgumentNullException(nameof(acsOperatorID), "Property is not nullable for class ThreeDS2ResponseData.");

            if (acsReferenceNumber.IsSet && acsReferenceNumber.Value == null)
                throw new ArgumentNullException(nameof(acsReferenceNumber), "Property is not nullable for class ThreeDS2ResponseData.");

            if (acsSignedContent.IsSet && acsSignedContent.Value == null)
                throw new ArgumentNullException(nameof(acsSignedContent), "Property is not nullable for class ThreeDS2ResponseData.");

            if (acsTransID.IsSet && acsTransID.Value == null)
                throw new ArgumentNullException(nameof(acsTransID), "Property is not nullable for class ThreeDS2ResponseData.");

            if (acsURL.IsSet && acsURL.Value == null)
                throw new ArgumentNullException(nameof(acsURL), "Property is not nullable for class ThreeDS2ResponseData.");

            if (authenticationType.IsSet && authenticationType.Value == null)
                throw new ArgumentNullException(nameof(authenticationType), "Property is not nullable for class ThreeDS2ResponseData.");

            if (cardHolderInfo.IsSet && cardHolderInfo.Value == null)
                throw new ArgumentNullException(nameof(cardHolderInfo), "Property is not nullable for class ThreeDS2ResponseData.");

            if (cavvAlgorithm.IsSet && cavvAlgorithm.Value == null)
                throw new ArgumentNullException(nameof(cavvAlgorithm), "Property is not nullable for class ThreeDS2ResponseData.");

            if (challengeIndicator.IsSet && challengeIndicator.Value == null)
                throw new ArgumentNullException(nameof(challengeIndicator), "Property is not nullable for class ThreeDS2ResponseData.");

            if (dsReferenceNumber.IsSet && dsReferenceNumber.Value == null)
                throw new ArgumentNullException(nameof(dsReferenceNumber), "Property is not nullable for class ThreeDS2ResponseData.");

            if (dsTransID.IsSet && dsTransID.Value == null)
                throw new ArgumentNullException(nameof(dsTransID), "Property is not nullable for class ThreeDS2ResponseData.");

            if (exemptionIndicator.IsSet && exemptionIndicator.Value == null)
                throw new ArgumentNullException(nameof(exemptionIndicator), "Property is not nullable for class ThreeDS2ResponseData.");

            if (messageVersion.IsSet && messageVersion.Value == null)
                throw new ArgumentNullException(nameof(messageVersion), "Property is not nullable for class ThreeDS2ResponseData.");

            if (riskScore.IsSet && riskScore.Value == null)
                throw new ArgumentNullException(nameof(riskScore), "Property is not nullable for class ThreeDS2ResponseData.");

            if (sdkEphemPubKey.IsSet && sdkEphemPubKey.Value == null)
                throw new ArgumentNullException(nameof(sdkEphemPubKey), "Property is not nullable for class ThreeDS2ResponseData.");

            if (threeDSServerTransID.IsSet && threeDSServerTransID.Value == null)
                throw new ArgumentNullException(nameof(threeDSServerTransID), "Property is not nullable for class ThreeDS2ResponseData.");

            if (transStatus.IsSet && transStatus.Value == null)
                throw new ArgumentNullException(nameof(transStatus), "Property is not nullable for class ThreeDS2ResponseData.");

            if (transStatusReason.IsSet && transStatusReason.Value == null)
                throw new ArgumentNullException(nameof(transStatusReason), "Property is not nullable for class ThreeDS2ResponseData.");

            return new ThreeDS2ResponseData(acsChallengeMandated, acsOperatorID, acsReferenceNumber, acsSignedContent, acsTransID, acsURL, authenticationType, cardHolderInfo, cavvAlgorithm, challengeIndicator, dsReferenceNumber, dsTransID, exemptionIndicator, messageVersion, riskScore, sdkEphemPubKey, threeDSServerTransID, transStatus, transStatusReason);
        }

        /// <summary>
        /// Serializes a <see cref="ThreeDS2ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="threeDS2ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ThreeDS2ResponseData threeDS2ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, threeDS2ResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ThreeDS2ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="threeDS2ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ThreeDS2ResponseData threeDS2ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (threeDS2ResponseData.AcsChallengeMandatedOption.IsSet && threeDS2ResponseData.AcsChallengeMandated == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.AcsChallengeMandated), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.AcsOperatorIDOption.IsSet && threeDS2ResponseData.AcsOperatorID == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.AcsOperatorID), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.AcsReferenceNumberOption.IsSet && threeDS2ResponseData.AcsReferenceNumber == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.AcsReferenceNumber), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.AcsSignedContentOption.IsSet && threeDS2ResponseData.AcsSignedContent == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.AcsSignedContent), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.AcsTransIDOption.IsSet && threeDS2ResponseData.AcsTransID == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.AcsTransID), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.AcsURLOption.IsSet && threeDS2ResponseData.AcsURL == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.AcsURL), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.AuthenticationTypeOption.IsSet && threeDS2ResponseData.AuthenticationType == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.AuthenticationType), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.CardHolderInfoOption.IsSet && threeDS2ResponseData.CardHolderInfo == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.CardHolderInfo), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.CavvAlgorithmOption.IsSet && threeDS2ResponseData.CavvAlgorithm == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.CavvAlgorithm), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.ChallengeIndicatorOption.IsSet && threeDS2ResponseData.ChallengeIndicator == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.ChallengeIndicator), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.DsReferenceNumberOption.IsSet && threeDS2ResponseData.DsReferenceNumber == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.DsReferenceNumber), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.DsTransIDOption.IsSet && threeDS2ResponseData.DsTransID == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.DsTransID), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.ExemptionIndicatorOption.IsSet && threeDS2ResponseData.ExemptionIndicator == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.ExemptionIndicator), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.MessageVersionOption.IsSet && threeDS2ResponseData.MessageVersion == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.MessageVersion), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.RiskScoreOption.IsSet && threeDS2ResponseData.RiskScore == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.RiskScore), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.SdkEphemPubKeyOption.IsSet && threeDS2ResponseData.SdkEphemPubKey == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.SdkEphemPubKey), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.ThreeDSServerTransIDOption.IsSet && threeDS2ResponseData.ThreeDSServerTransID == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.ThreeDSServerTransID), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.TransStatusOption.IsSet && threeDS2ResponseData.TransStatus == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.TransStatus), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.TransStatusReasonOption.IsSet && threeDS2ResponseData.TransStatusReason == null)
                throw new ArgumentNullException(nameof(threeDS2ResponseData.TransStatusReason), "Property is required for class ThreeDS2ResponseData.");

            if (threeDS2ResponseData.AcsChallengeMandatedOption.IsSet)
                writer.WriteString("acsChallengeMandated", threeDS2ResponseData.AcsChallengeMandated);

            if (threeDS2ResponseData.AcsOperatorIDOption.IsSet)
                writer.WriteString("acsOperatorID", threeDS2ResponseData.AcsOperatorID);

            if (threeDS2ResponseData.AcsReferenceNumberOption.IsSet)
                writer.WriteString("acsReferenceNumber", threeDS2ResponseData.AcsReferenceNumber);

            if (threeDS2ResponseData.AcsSignedContentOption.IsSet)
                writer.WriteString("acsSignedContent", threeDS2ResponseData.AcsSignedContent);

            if (threeDS2ResponseData.AcsTransIDOption.IsSet)
                writer.WriteString("acsTransID", threeDS2ResponseData.AcsTransID);

            if (threeDS2ResponseData.AcsURLOption.IsSet)
                writer.WriteString("acsURL", threeDS2ResponseData.AcsURL);

            if (threeDS2ResponseData.AuthenticationTypeOption.IsSet)
                writer.WriteString("authenticationType", threeDS2ResponseData.AuthenticationType);

            if (threeDS2ResponseData.CardHolderInfoOption.IsSet)
                writer.WriteString("cardHolderInfo", threeDS2ResponseData.CardHolderInfo);

            if (threeDS2ResponseData.CavvAlgorithmOption.IsSet)
                writer.WriteString("cavvAlgorithm", threeDS2ResponseData.CavvAlgorithm);

            if (threeDS2ResponseData.ChallengeIndicatorOption.IsSet)
                writer.WriteString("challengeIndicator", threeDS2ResponseData.ChallengeIndicator);

            if (threeDS2ResponseData.DsReferenceNumberOption.IsSet)
                writer.WriteString("dsReferenceNumber", threeDS2ResponseData.DsReferenceNumber);

            if (threeDS2ResponseData.DsTransIDOption.IsSet)
                writer.WriteString("dsTransID", threeDS2ResponseData.DsTransID);

            if (threeDS2ResponseData.ExemptionIndicatorOption.IsSet)
                writer.WriteString("exemptionIndicator", threeDS2ResponseData.ExemptionIndicator);

            if (threeDS2ResponseData.MessageVersionOption.IsSet)
                writer.WriteString("messageVersion", threeDS2ResponseData.MessageVersion);

            if (threeDS2ResponseData.RiskScoreOption.IsSet)
                writer.WriteString("riskScore", threeDS2ResponseData.RiskScore);

            if (threeDS2ResponseData.SdkEphemPubKeyOption.IsSet)
                writer.WriteString("sdkEphemPubKey", threeDS2ResponseData.SdkEphemPubKey);

            if (threeDS2ResponseData.ThreeDSServerTransIDOption.IsSet)
                writer.WriteString("threeDSServerTransID", threeDS2ResponseData.ThreeDSServerTransID);

            if (threeDS2ResponseData.TransStatusOption.IsSet)
                writer.WriteString("transStatus", threeDS2ResponseData.TransStatus);

            if (threeDS2ResponseData.TransStatusReasonOption.IsSet)
                writer.WriteString("transStatusReason", threeDS2ResponseData.TransStatusReason);
        }
    }
}
