// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ApplePaySessionRequest
    /// </summary>
    public partial class ApplePaySessionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplePaySessionRequest" /> class.
        /// </summary>
        /// <param name="displayName">This is the name that your shoppers will see in the Apple Pay interface.  The value returned as &#x60;configuration.merchantName&#x60; field from the [&#x60;/paymentMethods&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.</param>
        /// <param name="domainName">The domain name you provided when you added Apple Pay in your Customer Area.  This must match the &#x60;window.location.hostname&#x60; of the web shop.</param>
        /// <param name="merchantIdentifier">Your merchant identifier registered with Apple Pay.  Use the value of the &#x60;configuration.merchantId&#x60; field from the [&#x60;/paymentMethods&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.</param>
        [JsonConstructor]
        public ApplePaySessionRequest(string displayName, string domainName, string merchantIdentifier)
        {
            DisplayName = displayName;
            DomainName = domainName;
            MerchantIdentifier = merchantIdentifier;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// This is the name that your shoppers will see in the Apple Pay interface.  The value returned as &#x60;configuration.merchantName&#x60; field from the [&#x60;/paymentMethods&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.
        /// </summary>
        /// <value>This is the name that your shoppers will see in the Apple Pay interface.  The value returned as &#x60;configuration.merchantName&#x60; field from the [&#x60;/paymentMethods&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.</value>
        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// The domain name you provided when you added Apple Pay in your Customer Area.  This must match the &#x60;window.location.hostname&#x60; of the web shop.
        /// </summary>
        /// <value>The domain name you provided when you added Apple Pay in your Customer Area.  This must match the &#x60;window.location.hostname&#x60; of the web shop.</value>
        [JsonPropertyName("domainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// Your merchant identifier registered with Apple Pay.  Use the value of the &#x60;configuration.merchantId&#x60; field from the [&#x60;/paymentMethods&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.
        /// </summary>
        /// <value>Your merchant identifier registered with Apple Pay.  Use the value of the &#x60;configuration.merchantId&#x60; field from the [&#x60;/paymentMethods&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.</value>
        [JsonPropertyName("merchantIdentifier")]
        public string MerchantIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplePaySessionRequest {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  MerchantIdentifier: ").Append(MerchantIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 64)
            {
                yield return new ValidationResult("Invalid value for DisplayName, length must be less than 64.", new [] { "DisplayName" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApplePaySessionRequest" />
    /// </summary>
    public class ApplePaySessionRequestJsonConverter : JsonConverter<ApplePaySessionRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApplePaySessionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApplePaySessionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> displayName = default;
            Option<string> domainName = default;
            Option<string> merchantIdentifier = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "displayName":
                            displayName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "domainName":
                            domainName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantIdentifier":
                            merchantIdentifier = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!displayName.IsSet)
                throw new ArgumentException("Property is required for class ApplePaySessionRequest.", nameof(displayName));

            if (!domainName.IsSet)
                throw new ArgumentException("Property is required for class ApplePaySessionRequest.", nameof(domainName));

            if (!merchantIdentifier.IsSet)
                throw new ArgumentException("Property is required for class ApplePaySessionRequest.", nameof(merchantIdentifier));

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class ApplePaySessionRequest.");

            if (domainName.IsSet && domainName.Value == null)
                throw new ArgumentNullException(nameof(domainName), "Property is not nullable for class ApplePaySessionRequest.");

            if (merchantIdentifier.IsSet && merchantIdentifier.Value == null)
                throw new ArgumentNullException(nameof(merchantIdentifier), "Property is not nullable for class ApplePaySessionRequest.");

            return new ApplePaySessionRequest(displayName.Value, domainName.Value, merchantIdentifier.Value);
        }

        /// <summary>
        /// Serializes a <see cref="ApplePaySessionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="applePaySessionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApplePaySessionRequest applePaySessionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, applePaySessionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApplePaySessionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="applePaySessionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApplePaySessionRequest applePaySessionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (applePaySessionRequest.DisplayName == null)
                throw new ArgumentNullException(nameof(applePaySessionRequest.DisplayName), "Property is required for class ApplePaySessionRequest.");

            if (applePaySessionRequest.DomainName == null)
                throw new ArgumentNullException(nameof(applePaySessionRequest.DomainName), "Property is required for class ApplePaySessionRequest.");

            if (applePaySessionRequest.MerchantIdentifier == null)
                throw new ArgumentNullException(nameof(applePaySessionRequest.MerchantIdentifier), "Property is required for class ApplePaySessionRequest.");

            writer.WriteString("displayName", applePaySessionRequest.DisplayName);

            writer.WriteString("domainName", applePaySessionRequest.DomainName);

            writer.WriteString("merchantIdentifier", applePaySessionRequest.MerchantIdentifier);
        }
    }
}
