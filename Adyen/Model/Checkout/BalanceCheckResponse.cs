// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// BalanceCheckResponse
    /// </summary>
    public partial class BalanceCheckResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceCheckResponse" /> class.
        /// </summary>
        /// <param name="balance">balance</param>
        /// <param name="resultCode">The result of the cancellation request.  Possible values:  * **Success** – Indicates that the balance check was successful. * **NotEnoughBalance** – Commonly indicates that the card did not have enough balance to pay the amount in the request, or that the currency of the balance on the card did not match the currency of the requested amount. * **Failed** – Indicates that the balance check failed.</param>
        /// <param name="additionalData">Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** &gt; **Developers** &gt; **Additional data**.</param>
        /// <param name="fraudResult">fraudResult</param>
        /// <param name="pspReference">Adyen&#39;s 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.</param>
        /// <param name="refusalReason">If the payment&#39;s authorisation is refused or an error occurs during authorisation, this field holds Adyen&#39;s mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes &#x60;resultCode&#x60; and &#x60;refusalReason&#x60; values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).</param>
        /// <param name="transactionLimit">transactionLimit</param>
        [JsonConstructor]
        public BalanceCheckResponse(Amount balance, ResultCodeEnum resultCode, Option<Dictionary<string, string>> additionalData = default, Option<FraudResult> fraudResult = default, Option<string> pspReference = default, Option<string> refusalReason = default, Option<Amount> transactionLimit = default)
        {
            Balance = balance;
            ResultCode = resultCode;
            AdditionalDataOption = additionalData;
            FraudResultOption = fraudResult;
            PspReferenceOption = pspReference;
            RefusalReasonOption = refusalReason;
            TransactionLimitOption = transactionLimit;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The result of the cancellation request.  Possible values:  * **Success** – Indicates that the balance check was successful. * **NotEnoughBalance** – Commonly indicates that the card did not have enough balance to pay the amount in the request, or that the currency of the balance on the card did not match the currency of the requested amount. * **Failed** – Indicates that the balance check failed.
        /// </summary>
        /// <value>The result of the cancellation request.  Possible values:  * **Success** – Indicates that the balance check was successful. * **NotEnoughBalance** – Commonly indicates that the card did not have enough balance to pay the amount in the request, or that the currency of the balance on the card did not match the currency of the requested amount. * **Failed** – Indicates that the balance check failed.</value>
        public enum ResultCodeEnum
        {
            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            Success = 1,

            /// <summary>
            /// Enum NotEnoughBalance for value: NotEnoughBalance
            /// </summary>
            NotEnoughBalance = 2,

            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            Failed = 3
        }

        /// <summary>
        /// Returns a <see cref="ResultCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ResultCodeEnum ResultCodeEnumFromString(string value)
        {
            if (value.Equals("Success"))
                return ResultCodeEnum.Success;

            if (value.Equals("NotEnoughBalance"))
                return ResultCodeEnum.NotEnoughBalance;

            if (value.Equals("Failed"))
                return ResultCodeEnum.Failed;

            throw new NotImplementedException($"Could not convert value to type ResultCodeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ResultCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ResultCodeEnum? ResultCodeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Success"))
                return ResultCodeEnum.Success;

            if (value.Equals("NotEnoughBalance"))
                return ResultCodeEnum.NotEnoughBalance;

            if (value.Equals("Failed"))
                return ResultCodeEnum.Failed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ResultCodeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ResultCodeEnumToJsonValue(ResultCodeEnum value)
        {
            if (value == ResultCodeEnum.Success)
                return "Success";

            if (value == ResultCodeEnum.NotEnoughBalance)
                return "NotEnoughBalance";

            if (value == ResultCodeEnum.Failed)
                return "Failed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The result of the cancellation request.  Possible values:  * **Success** – Indicates that the balance check was successful. * **NotEnoughBalance** – Commonly indicates that the card did not have enough balance to pay the amount in the request, or that the currency of the balance on the card did not match the currency of the requested amount. * **Failed** – Indicates that the balance check failed.
        /// </summary>
        /// <value>The result of the cancellation request.  Possible values:  * **Success** – Indicates that the balance check was successful. * **NotEnoughBalance** – Commonly indicates that the card did not have enough balance to pay the amount in the request, or that the currency of the balance on the card did not match the currency of the requested amount. * **Failed** – Indicates that the balance check failed.</value>
        [JsonPropertyName("resultCode")]
        public ResultCodeEnum ResultCode { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [JsonPropertyName("balance")]
        public Amount Balance { get; set; }

        /// <summary>
        /// Used to track the state of AdditionalData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> AdditionalDataOption { get; private set; }

        /// <summary>
        /// Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** &gt; **Developers** &gt; **Additional data**.
        /// </summary>
        /// <value>Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** &gt; **Developers** &gt; **Additional data**.</value>
        [JsonPropertyName("additionalData")]
        public Dictionary<string, string> AdditionalData { get { return this.AdditionalDataOption; } set { this.AdditionalDataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of FraudResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FraudResult> FraudResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets FraudResult
        /// </summary>
        [JsonPropertyName("fraudResult")]
        public FraudResult FraudResult { get { return this.FraudResultOption; } set { this.FraudResultOption = new Option<FraudResult>(value); } }

        /// <summary>
        /// Used to track the state of PspReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PspReferenceOption { get; private set; }

        /// <summary>
        /// Adyen&#39;s 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.
        /// </summary>
        /// <value>Adyen&#39;s 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.</value>
        [JsonPropertyName("pspReference")]
        public string PspReference { get { return this.PspReferenceOption; } set { this.PspReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefusalReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RefusalReasonOption { get; private set; }

        /// <summary>
        /// If the payment&#39;s authorisation is refused or an error occurs during authorisation, this field holds Adyen&#39;s mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes &#x60;resultCode&#x60; and &#x60;refusalReason&#x60; values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).
        /// </summary>
        /// <value>If the payment&#39;s authorisation is refused or an error occurs during authorisation, this field holds Adyen&#39;s mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes &#x60;resultCode&#x60; and &#x60;refusalReason&#x60; values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).</value>
        [JsonPropertyName("refusalReason")]
        public string RefusalReason { get { return this.RefusalReasonOption; } set { this.RefusalReasonOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TransactionLimit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> TransactionLimitOption { get; private set; }

        /// <summary>
        /// Gets or Sets TransactionLimit
        /// </summary>
        [JsonPropertyName("transactionLimit")]
        public Amount TransactionLimit { get { return this.TransactionLimitOption; } set { this.TransactionLimitOption = new Option<Amount>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BalanceCheckResponse {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  FraudResult: ").Append(FraudResult).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  RefusalReason: ").Append(RefusalReason).Append("\n");
            sb.Append("  TransactionLimit: ").Append(TransactionLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BalanceCheckResponse" />
    /// </summary>
    public class BalanceCheckResponseJsonConverter : JsonConverter<BalanceCheckResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="BalanceCheckResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BalanceCheckResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Amount> balance = default;
            Option<BalanceCheckResponse.ResultCodeEnum?> resultCode = default;
            Option<Dictionary<string, string>> additionalData = default;
            Option<FraudResult> fraudResult = default;
            Option<string> pspReference = default;
            Option<string> refusalReason = default;
            Option<Amount> transactionLimit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "balance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balance = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "resultCode":
                            string resultCodeRawValue = utf8JsonReader.GetString();
                            if (resultCodeRawValue != null)
                                resultCode = new Option<BalanceCheckResponse.ResultCodeEnum?>(BalanceCheckResponse.ResultCodeEnumFromStringOrDefault(resultCodeRawValue));
                            break;
                        case "additionalData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalData = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fraudResult":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fraudResult = new Option<FraudResult>(JsonSerializer.Deserialize<FraudResult>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pspReference":
                            pspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refusalReason":
                            refusalReason = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "transactionLimit":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transactionLimit = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!balance.IsSet)
                throw new ArgumentException("Property is required for class BalanceCheckResponse.", nameof(balance));

            if (!resultCode.IsSet)
                throw new ArgumentException("Property is required for class BalanceCheckResponse.", nameof(resultCode));

            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class BalanceCheckResponse.");

            if (resultCode.IsSet && resultCode.Value == null)
                throw new ArgumentNullException(nameof(resultCode), "Property is not nullable for class BalanceCheckResponse.");

            if (additionalData.IsSet && additionalData.Value == null)
                throw new ArgumentNullException(nameof(additionalData), "Property is not nullable for class BalanceCheckResponse.");

            if (fraudResult.IsSet && fraudResult.Value == null)
                throw new ArgumentNullException(nameof(fraudResult), "Property is not nullable for class BalanceCheckResponse.");

            if (pspReference.IsSet && pspReference.Value == null)
                throw new ArgumentNullException(nameof(pspReference), "Property is not nullable for class BalanceCheckResponse.");

            if (refusalReason.IsSet && refusalReason.Value == null)
                throw new ArgumentNullException(nameof(refusalReason), "Property is not nullable for class BalanceCheckResponse.");

            if (transactionLimit.IsSet && transactionLimit.Value == null)
                throw new ArgumentNullException(nameof(transactionLimit), "Property is not nullable for class BalanceCheckResponse.");

            return new BalanceCheckResponse(balance.Value, resultCode.Value.Value, additionalData, fraudResult, pspReference, refusalReason, transactionLimit);
        }

        /// <summary>
        /// Serializes a <see cref="BalanceCheckResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="balanceCheckResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BalanceCheckResponse balanceCheckResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, balanceCheckResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BalanceCheckResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="balanceCheckResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BalanceCheckResponse balanceCheckResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (balanceCheckResponse.Balance == null)
                throw new ArgumentNullException(nameof(balanceCheckResponse.Balance), "Property is required for class BalanceCheckResponse.");

            if (balanceCheckResponse.AdditionalDataOption.IsSet && balanceCheckResponse.AdditionalData == null)
                throw new ArgumentNullException(nameof(balanceCheckResponse.AdditionalData), "Property is required for class BalanceCheckResponse.");

            if (balanceCheckResponse.FraudResultOption.IsSet && balanceCheckResponse.FraudResult == null)
                throw new ArgumentNullException(nameof(balanceCheckResponse.FraudResult), "Property is required for class BalanceCheckResponse.");

            if (balanceCheckResponse.PspReferenceOption.IsSet && balanceCheckResponse.PspReference == null)
                throw new ArgumentNullException(nameof(balanceCheckResponse.PspReference), "Property is required for class BalanceCheckResponse.");

            if (balanceCheckResponse.RefusalReasonOption.IsSet && balanceCheckResponse.RefusalReason == null)
                throw new ArgumentNullException(nameof(balanceCheckResponse.RefusalReason), "Property is required for class BalanceCheckResponse.");

            if (balanceCheckResponse.TransactionLimitOption.IsSet && balanceCheckResponse.TransactionLimit == null)
                throw new ArgumentNullException(nameof(balanceCheckResponse.TransactionLimit), "Property is required for class BalanceCheckResponse.");

            writer.WritePropertyName("balance");
            JsonSerializer.Serialize(writer, balanceCheckResponse.Balance, jsonSerializerOptions);
            var resultCodeRawValue = BalanceCheckResponse.ResultCodeEnumToJsonValue(balanceCheckResponse.ResultCode);
            writer.WriteString("resultCode", resultCodeRawValue);
            if (balanceCheckResponse.AdditionalDataOption.IsSet)
            {
                writer.WritePropertyName("additionalData");
                JsonSerializer.Serialize(writer, balanceCheckResponse.AdditionalData, jsonSerializerOptions);
            }
            if (balanceCheckResponse.FraudResultOption.IsSet)
            {
                writer.WritePropertyName("fraudResult");
                JsonSerializer.Serialize(writer, balanceCheckResponse.FraudResult, jsonSerializerOptions);
            }
            if (balanceCheckResponse.PspReferenceOption.IsSet)
                writer.WriteString("pspReference", balanceCheckResponse.PspReference);

            if (balanceCheckResponse.RefusalReasonOption.IsSet)
                writer.WriteString("refusalReason", balanceCheckResponse.RefusalReason);

            if (balanceCheckResponse.TransactionLimitOption.IsSet)
            {
                writer.WritePropertyName("transactionLimit");
                JsonSerializer.Serialize(writer, balanceCheckResponse.TransactionLimit, jsonSerializerOptions);
            }
        }
    }
}
