// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// BalanceCheckRequest
    /// </summary>
    public partial class BalanceCheckRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceCheckRequest" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="merchantAccount">The merchant account identifier, with which you want to process the transaction.</param>
        /// <param name="paymentMethod">The collection that contains the type of the payment method and its specific information.</param>
        /// <param name="accountInfo">accountInfo</param>
        /// <param name="additionalAmount">additionalAmount</param>
        /// <param name="additionalData">This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value.</param>
        /// <param name="applicationInfo">applicationInfo</param>
        /// <param name="billingAddress">billingAddress</param>
        /// <param name="browserInfo">browserInfo</param>
        /// <param name="captureDelayHours">The delay between the authorisation and scheduled auto-capture, specified in hours.</param>
        /// <param name="dateOfBirth">The shopper&#39;s date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD</param>
        /// <param name="dccQuote">dccQuote</param>
        /// <param name="deliveryAddress">deliveryAddress</param>
        /// <param name="deliveryDate">The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00</param>
        /// <param name="deviceFingerprint">A string containing the shopper&#39;s device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).</param>
        /// <param name="fraudOffset">An integer value that is added to the normal fraud score. The value can be either positive or negative.</param>
        /// <param name="installments">installments</param>
        /// <param name="localizedShopperStatement">The &#x60;localizedShopperStatement&#x60; field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana and ja-Hani character set for Visa, Mastercard and JCB payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, Kanji, capital letters, numbers and special characters.  * Half-width or full-width characters.</param>
        /// <param name="mcc">The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.</param>
        /// <param name="merchantOrderReference">This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. &gt; We strongly recommend you send the &#x60;merchantOrderReference&#x60; value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide &#x60;retry.orderAttemptNumber&#x60;, &#x60;retry.chainAttemptNumber&#x60;, and &#x60;retry.skipRetry&#x60; values in &#x60;PaymentRequest.additionalData&#x60;.</param>
        /// <param name="merchantRiskIndicator">merchantRiskIndicator</param>
        /// <param name="metadata">Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \&quot;177\&quot; error occurs: \&quot;Metadata size exceeds limit\&quot;. * Maximum 20 characters per key. * Maximum 80 characters per value. </param>
        /// <param name="orderReference">When you are doing multiple partial (gift card) payments, this is the &#x60;pspReference&#x60; of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the &#x60;merchantOrderReference&#x60;instead.</param>
        /// <param name="recurring">recurring</param>
        /// <param name="recurringProcessingModel">Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </param>
        /// <param name="reference">The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\&quot;-\&quot;). Maximum length: 80 characters.</param>
        /// <param name="selectedBrand">Some payment methods require defining a value for this field to specify how to process the transaction.  For the Bancontact payment method, it can be set to: * &#x60;maestro&#x60; (default), to be processed like a Maestro card, or * &#x60;bcmc&#x60;, to be processed like a Bancontact card.</param>
        /// <param name="selectedRecurringDetailReference">The &#x60;recurringDetailReference&#x60; you want to use for this payment. The value &#x60;LATEST&#x60; can be used to select the most recently stored recurring detail.</param>
        /// <param name="sessionId">A session ID used to identify a payment session.</param>
        /// <param name="shopperEmail">The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks. &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperEmail&#x60; for all browser-based and mobile implementations.</param>
        /// <param name="shopperIP">The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).</param>
        /// <param name="shopperInteraction">Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.</param>
        /// <param name="shopperLocale">The combination of a language code and a country code to specify the language to be used in the payment.</param>
        /// <param name="shopperName">shopperName</param>
        /// <param name="shopperReference">Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.</param>
        /// <param name="shopperStatement">The text to be shown on the shopper&#39;s bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , &#39; _ - ? + * /_**.</param>
        /// <param name="socialSecurityNumber">The shopper&#39;s social security number.</param>
        /// <param name="splits">An array of objects specifying how the payment should be split when using either Adyen for Platforms for [marketplaces](https://docs.adyen.com/marketplaces/split-payments) or [platforms](https://docs.adyen.com/platforms/split-payments), or standalone [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).</param>
        /// <param name="store">Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.</param>
        /// <param name="telephoneNumber">The shopper&#39;s telephone number.</param>
        /// <param name="threeDS2RequestData">threeDS2RequestData</param>
        /// <param name="threeDSAuthenticationOnly">If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. (default to false)</param>
        /// <param name="totalsGroup">The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).</param>
        /// <param name="trustedShopper">Set to true if the payment should be routed to a trusted MID.</param>
        [JsonConstructor]
        public BalanceCheckRequest(Amount amount, string merchantAccount, Dictionary<string, string> paymentMethod, Option<AccountInfo> accountInfo = default, Option<Amount> additionalAmount = default, Option<Dictionary<string, string>> additionalData = default, Option<ApplicationInfo> applicationInfo = default, Option<Address> billingAddress = default, Option<BrowserInfo> browserInfo = default, Option<int?> captureDelayHours = default, Option<DateTime?> dateOfBirth = default, Option<ForexQuote> dccQuote = default, Option<Address> deliveryAddress = default, Option<DateTime?> deliveryDate = default, Option<string> deviceFingerprint = default, Option<int?> fraudOffset = default, Option<Installments> installments = default, Option<Dictionary<string, string>> localizedShopperStatement = default, Option<string> mcc = default, Option<string> merchantOrderReference = default, Option<MerchantRiskIndicator> merchantRiskIndicator = default, Option<Dictionary<string, string>> metadata = default, Option<string> orderReference = default, Option<Recurring> recurring = default, Option<RecurringProcessingModelEnum?> recurringProcessingModel = default, Option<string> reference = default, Option<string> selectedBrand = default, Option<string> selectedRecurringDetailReference = default, Option<string> sessionId = default, Option<string> shopperEmail = default, Option<string> shopperIP = default, Option<ShopperInteractionEnum?> shopperInteraction = default, Option<string> shopperLocale = default, Option<Name> shopperName = default, Option<string> shopperReference = default, Option<string> shopperStatement = default, Option<string> socialSecurityNumber = default, Option<List<Split>> splits = default, Option<string> store = default, Option<string> telephoneNumber = default, Option<ThreeDS2RequestData> threeDS2RequestData = default, Option<bool?> threeDSAuthenticationOnly = default, Option<string> totalsGroup = default, Option<bool?> trustedShopper = default)
        {
            Amount = amount;
            MerchantAccount = merchantAccount;
            PaymentMethod = paymentMethod;
            AccountInfoOption = accountInfo;
            AdditionalAmountOption = additionalAmount;
            AdditionalDataOption = additionalData;
            ApplicationInfoOption = applicationInfo;
            BillingAddressOption = billingAddress;
            BrowserInfoOption = browserInfo;
            CaptureDelayHoursOption = captureDelayHours;
            DateOfBirthOption = dateOfBirth;
            DccQuoteOption = dccQuote;
            DeliveryAddressOption = deliveryAddress;
            DeliveryDateOption = deliveryDate;
            DeviceFingerprintOption = deviceFingerprint;
            FraudOffsetOption = fraudOffset;
            InstallmentsOption = installments;
            LocalizedShopperStatementOption = localizedShopperStatement;
            MccOption = mcc;
            MerchantOrderReferenceOption = merchantOrderReference;
            MerchantRiskIndicatorOption = merchantRiskIndicator;
            MetadataOption = metadata;
            OrderReferenceOption = orderReference;
            RecurringOption = recurring;
            RecurringProcessingModelOption = recurringProcessingModel;
            ReferenceOption = reference;
            SelectedBrandOption = selectedBrand;
            SelectedRecurringDetailReferenceOption = selectedRecurringDetailReference;
            SessionIdOption = sessionId;
            ShopperEmailOption = shopperEmail;
            ShopperIPOption = shopperIP;
            ShopperInteractionOption = shopperInteraction;
            ShopperLocaleOption = shopperLocale;
            ShopperNameOption = shopperName;
            ShopperReferenceOption = shopperReference;
            ShopperStatementOption = shopperStatement;
            SocialSecurityNumberOption = socialSecurityNumber;
            SplitsOption = splits;
            StoreOption = store;
            TelephoneNumberOption = telephoneNumber;
            ThreeDS2RequestDataOption = threeDS2RequestData;
            ThreeDSAuthenticationOnlyOption = threeDSAuthenticationOnly;
            TotalsGroupOption = totalsGroup;
            TrustedShopperOption = trustedShopper;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. 
        /// </summary>
        /// <value>Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </value>
        public enum RecurringProcessingModelEnum
        {
            /// <summary>
            /// Enum CardOnFile for value: CardOnFile
            /// </summary>
            CardOnFile = 1,

            /// <summary>
            /// Enum Subscription for value: Subscription
            /// </summary>
            Subscription = 2,

            /// <summary>
            /// Enum UnscheduledCardOnFile for value: UnscheduledCardOnFile
            /// </summary>
            UnscheduledCardOnFile = 3
        }

        /// <summary>
        /// Returns a <see cref="RecurringProcessingModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RecurringProcessingModelEnum RecurringProcessingModelEnumFromString(string value)
        {
            if (value.Equals("CardOnFile"))
                return RecurringProcessingModelEnum.CardOnFile;

            if (value.Equals("Subscription"))
                return RecurringProcessingModelEnum.Subscription;

            if (value.Equals("UnscheduledCardOnFile"))
                return RecurringProcessingModelEnum.UnscheduledCardOnFile;

            throw new NotImplementedException($"Could not convert value to type RecurringProcessingModelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RecurringProcessingModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RecurringProcessingModelEnum? RecurringProcessingModelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CardOnFile"))
                return RecurringProcessingModelEnum.CardOnFile;

            if (value.Equals("Subscription"))
                return RecurringProcessingModelEnum.Subscription;

            if (value.Equals("UnscheduledCardOnFile"))
                return RecurringProcessingModelEnum.UnscheduledCardOnFile;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RecurringProcessingModelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RecurringProcessingModelEnumToJsonValue(RecurringProcessingModelEnum? value)
        {
            if (value == RecurringProcessingModelEnum.CardOnFile)
                return "CardOnFile";

            if (value == RecurringProcessingModelEnum.Subscription)
                return "Subscription";

            if (value == RecurringProcessingModelEnum.UnscheduledCardOnFile)
                return "UnscheduledCardOnFile";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of RecurringProcessingModel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RecurringProcessingModelEnum?> RecurringProcessingModelOption { get; private set; }

        /// <summary>
        /// Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. 
        /// </summary>
        /// <value>Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </value>
        [JsonPropertyName("recurringProcessingModel")]
        public RecurringProcessingModelEnum? RecurringProcessingModel { get { return this.RecurringProcessingModelOption; } set { this.RecurringProcessingModelOption = new Option<RecurringProcessingModelEnum?>(value); } }

        /// <summary>
        /// Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
        /// </summary>
        /// <value>Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.</value>
        public enum ShopperInteractionEnum
        {
            /// <summary>
            /// Enum Ecommerce for value: Ecommerce
            /// </summary>
            Ecommerce = 1,

            /// <summary>
            /// Enum ContAuth for value: ContAuth
            /// </summary>
            ContAuth = 2,

            /// <summary>
            /// Enum Moto for value: Moto
            /// </summary>
            Moto = 3,

            /// <summary>
            /// Enum POS for value: POS
            /// </summary>
            POS = 4
        }

        /// <summary>
        /// Returns a <see cref="ShopperInteractionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ShopperInteractionEnum ShopperInteractionEnumFromString(string value)
        {
            if (value.Equals("Ecommerce"))
                return ShopperInteractionEnum.Ecommerce;

            if (value.Equals("ContAuth"))
                return ShopperInteractionEnum.ContAuth;

            if (value.Equals("Moto"))
                return ShopperInteractionEnum.Moto;

            if (value.Equals("POS"))
                return ShopperInteractionEnum.POS;

            throw new NotImplementedException($"Could not convert value to type ShopperInteractionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ShopperInteractionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ShopperInteractionEnum? ShopperInteractionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Ecommerce"))
                return ShopperInteractionEnum.Ecommerce;

            if (value.Equals("ContAuth"))
                return ShopperInteractionEnum.ContAuth;

            if (value.Equals("Moto"))
                return ShopperInteractionEnum.Moto;

            if (value.Equals("POS"))
                return ShopperInteractionEnum.POS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ShopperInteractionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ShopperInteractionEnumToJsonValue(ShopperInteractionEnum? value)
        {
            if (value == ShopperInteractionEnum.Ecommerce)
                return "Ecommerce";

            if (value == ShopperInteractionEnum.ContAuth)
                return "ContAuth";

            if (value == ShopperInteractionEnum.Moto)
                return "Moto";

            if (value == ShopperInteractionEnum.POS)
                return "POS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ShopperInteraction
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShopperInteractionEnum?> ShopperInteractionOption { get; private set; }

        /// <summary>
        /// Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
        /// </summary>
        /// <value>Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.</value>
        [JsonPropertyName("shopperInteraction")]
        public ShopperInteractionEnum? ShopperInteraction { get { return this.ShopperInteractionOption; } set { this.ShopperInteractionOption = new Option<ShopperInteractionEnum?>(value); } }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public Amount Amount { get; set; }

        /// <summary>
        /// The merchant account identifier, with which you want to process the transaction.
        /// </summary>
        /// <value>The merchant account identifier, with which you want to process the transaction.</value>
        [JsonPropertyName("merchantAccount")]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// The collection that contains the type of the payment method and its specific information.
        /// </summary>
        /// <value>The collection that contains the type of the payment method and its specific information.</value>
        [JsonPropertyName("paymentMethod")]
        public Dictionary<string, string> PaymentMethod { get; set; }

        /// <summary>
        /// Used to track the state of AccountInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountInfo> AccountInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccountInfo
        /// </summary>
        [JsonPropertyName("accountInfo")]
        public AccountInfo AccountInfo { get { return this.AccountInfoOption; } set { this.AccountInfoOption = new Option<AccountInfo>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Amount> AdditionalAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets AdditionalAmount
        /// </summary>
        [JsonPropertyName("additionalAmount")]
        public Amount AdditionalAmount { get { return this.AdditionalAmountOption; } set { this.AdditionalAmountOption = new Option<Amount>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> AdditionalDataOption { get; private set; }

        /// <summary>
        /// This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value.
        /// </summary>
        /// <value>This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value.</value>
        [JsonPropertyName("additionalData")]
        public Dictionary<string, string> AdditionalData { get { return this.AdditionalDataOption; } set { this.AdditionalDataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of ApplicationInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApplicationInfo> ApplicationInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets ApplicationInfo
        /// </summary>
        [JsonPropertyName("applicationInfo")]
        public ApplicationInfo ApplicationInfo { get { return this.ApplicationInfoOption; } set { this.ApplicationInfoOption = new Option<ApplicationInfo>(value); } }

        /// <summary>
        /// Used to track the state of BillingAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Address> BillingAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [JsonPropertyName("billingAddress")]
        public Address BillingAddress { get { return this.BillingAddressOption; } set { this.BillingAddressOption = new Option<Address>(value); } }

        /// <summary>
        /// Used to track the state of BrowserInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BrowserInfo> BrowserInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets BrowserInfo
        /// </summary>
        [JsonPropertyName("browserInfo")]
        public BrowserInfo BrowserInfo { get { return this.BrowserInfoOption; } set { this.BrowserInfoOption = new Option<BrowserInfo>(value); } }

        /// <summary>
        /// Used to track the state of CaptureDelayHours
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CaptureDelayHoursOption { get; private set; }

        /// <summary>
        /// The delay between the authorisation and scheduled auto-capture, specified in hours.
        /// </summary>
        /// <value>The delay between the authorisation and scheduled auto-capture, specified in hours.</value>
        [JsonPropertyName("captureDelayHours")]
        public int? CaptureDelayHours { get { return this.CaptureDelayHoursOption; } set { this.CaptureDelayHoursOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of DateOfBirth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateOfBirthOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
        /// </summary>
        /// <value>The shopper&#39;s date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD</value>
        [JsonPropertyName("dateOfBirth")]
        public DateTime? DateOfBirth { get { return this.DateOfBirthOption; } set { this.DateOfBirthOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DccQuote
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ForexQuote> DccQuoteOption { get; private set; }

        /// <summary>
        /// Gets or Sets DccQuote
        /// </summary>
        [JsonPropertyName("dccQuote")]
        public ForexQuote DccQuote { get { return this.DccQuoteOption; } set { this.DccQuoteOption = new Option<ForexQuote>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Address> DeliveryAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [JsonPropertyName("deliveryAddress")]
        public Address DeliveryAddress { get { return this.DeliveryAddressOption; } set { this.DeliveryAddressOption = new Option<Address>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DeliveryDateOption { get; private set; }

        /// <summary>
        /// The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00
        /// </summary>
        /// <value>The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00</value>
        [JsonPropertyName("deliveryDate")]
        public DateTime? DeliveryDate { get { return this.DeliveryDateOption; } set { this.DeliveryDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DeviceFingerprint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DeviceFingerprintOption { get; private set; }

        /// <summary>
        /// A string containing the shopper&#39;s device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).
        /// </summary>
        /// <value>A string containing the shopper&#39;s device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).</value>
        [JsonPropertyName("deviceFingerprint")]
        public string DeviceFingerprint { get { return this.DeviceFingerprintOption; } set { this.DeviceFingerprintOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FraudOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FraudOffsetOption { get; private set; }

        /// <summary>
        /// An integer value that is added to the normal fraud score. The value can be either positive or negative.
        /// </summary>
        /// <value>An integer value that is added to the normal fraud score. The value can be either positive or negative.</value>
        [JsonPropertyName("fraudOffset")]
        public int? FraudOffset { get { return this.FraudOffsetOption; } set { this.FraudOffsetOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Installments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Installments> InstallmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Installments
        /// </summary>
        [JsonPropertyName("installments")]
        public Installments Installments { get { return this.InstallmentsOption; } set { this.InstallmentsOption = new Option<Installments>(value); } }

        /// <summary>
        /// Used to track the state of LocalizedShopperStatement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> LocalizedShopperStatementOption { get; private set; }

        /// <summary>
        /// The &#x60;localizedShopperStatement&#x60; field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana and ja-Hani character set for Visa, Mastercard and JCB payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, Kanji, capital letters, numbers and special characters.  * Half-width or full-width characters.
        /// </summary>
        /// <value>The &#x60;localizedShopperStatement&#x60; field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana and ja-Hani character set for Visa, Mastercard and JCB payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, Kanji, capital letters, numbers and special characters.  * Half-width or full-width characters.</value>
        [JsonPropertyName("localizedShopperStatement")]
        public Dictionary<string, string> LocalizedShopperStatement { get { return this.LocalizedShopperStatementOption; } set { this.LocalizedShopperStatementOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of Mcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MccOption { get; private set; }

        /// <summary>
        /// The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
        /// </summary>
        /// <value>The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.</value>
        [JsonPropertyName("mcc")]
        public string Mcc { get { return this.MccOption; } set { this.MccOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MerchantOrderReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MerchantOrderReferenceOption { get; private set; }

        /// <summary>
        /// This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. &gt; We strongly recommend you send the &#x60;merchantOrderReference&#x60; value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide &#x60;retry.orderAttemptNumber&#x60;, &#x60;retry.chainAttemptNumber&#x60;, and &#x60;retry.skipRetry&#x60; values in &#x60;PaymentRequest.additionalData&#x60;.
        /// </summary>
        /// <value>This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. &gt; We strongly recommend you send the &#x60;merchantOrderReference&#x60; value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide &#x60;retry.orderAttemptNumber&#x60;, &#x60;retry.chainAttemptNumber&#x60;, and &#x60;retry.skipRetry&#x60; values in &#x60;PaymentRequest.additionalData&#x60;.</value>
        [JsonPropertyName("merchantOrderReference")]
        public string MerchantOrderReference { get { return this.MerchantOrderReferenceOption; } set { this.MerchantOrderReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MerchantRiskIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MerchantRiskIndicator> MerchantRiskIndicatorOption { get; private set; }

        /// <summary>
        /// Gets or Sets MerchantRiskIndicator
        /// </summary>
        [JsonPropertyName("merchantRiskIndicator")]
        public MerchantRiskIndicator MerchantRiskIndicator { get { return this.MerchantRiskIndicatorOption; } set { this.MerchantRiskIndicatorOption = new Option<MerchantRiskIndicator>(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> MetadataOption { get; private set; }

        /// <summary>
        /// Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \&quot;177\&quot; error occurs: \&quot;Metadata size exceeds limit\&quot;. * Maximum 20 characters per key. * Maximum 80 characters per value. 
        /// </summary>
        /// <value>Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \&quot;177\&quot; error occurs: \&quot;Metadata size exceeds limit\&quot;. * Maximum 20 characters per key. * Maximum 80 characters per value. </value>
        [JsonPropertyName("metadata")]
        public Dictionary<string, string> Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of OrderReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OrderReferenceOption { get; private set; }

        /// <summary>
        /// When you are doing multiple partial (gift card) payments, this is the &#x60;pspReference&#x60; of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the &#x60;merchantOrderReference&#x60;instead.
        /// </summary>
        /// <value>When you are doing multiple partial (gift card) payments, this is the &#x60;pspReference&#x60; of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the &#x60;merchantOrderReference&#x60;instead.</value>
        [JsonPropertyName("orderReference")]
        public string OrderReference { get { return this.OrderReferenceOption; } set { this.OrderReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Recurring
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Recurring> RecurringOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recurring
        /// </summary>
        [JsonPropertyName("recurring")]
        public Recurring Recurring { get { return this.RecurringOption; } set { this.RecurringOption = new Option<Recurring>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\&quot;-\&quot;). Maximum length: 80 characters.
        /// </summary>
        /// <value>The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\&quot;-\&quot;). Maximum length: 80 characters.</value>
        [JsonPropertyName("reference")]
        public string Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SelectedBrand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SelectedBrandOption { get; private set; }

        /// <summary>
        /// Some payment methods require defining a value for this field to specify how to process the transaction.  For the Bancontact payment method, it can be set to: * &#x60;maestro&#x60; (default), to be processed like a Maestro card, or * &#x60;bcmc&#x60;, to be processed like a Bancontact card.
        /// </summary>
        /// <value>Some payment methods require defining a value for this field to specify how to process the transaction.  For the Bancontact payment method, it can be set to: * &#x60;maestro&#x60; (default), to be processed like a Maestro card, or * &#x60;bcmc&#x60;, to be processed like a Bancontact card.</value>
        [JsonPropertyName("selectedBrand")]
        public string SelectedBrand { get { return this.SelectedBrandOption; } set { this.SelectedBrandOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SelectedRecurringDetailReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SelectedRecurringDetailReferenceOption { get; private set; }

        /// <summary>
        /// The &#x60;recurringDetailReference&#x60; you want to use for this payment. The value &#x60;LATEST&#x60; can be used to select the most recently stored recurring detail.
        /// </summary>
        /// <value>The &#x60;recurringDetailReference&#x60; you want to use for this payment. The value &#x60;LATEST&#x60; can be used to select the most recently stored recurring detail.</value>
        [JsonPropertyName("selectedRecurringDetailReference")]
        public string SelectedRecurringDetailReference { get { return this.SelectedRecurringDetailReferenceOption; } set { this.SelectedRecurringDetailReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SessionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SessionIdOption { get; private set; }

        /// <summary>
        /// A session ID used to identify a payment session.
        /// </summary>
        /// <value>A session ID used to identify a payment session.</value>
        [JsonPropertyName("sessionId")]
        public string SessionId { get { return this.SessionIdOption; } set { this.SessionIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperEmailOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks. &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperEmail&#x60; for all browser-based and mobile implementations.
        /// </summary>
        /// <value>The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks. &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperEmail&#x60; for all browser-based and mobile implementations.</value>
        [JsonPropertyName("shopperEmail")]
        public string ShopperEmail { get { return this.ShopperEmailOption; } set { this.ShopperEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperIP
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperIPOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
        /// </summary>
        /// <value>The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).</value>
        [JsonPropertyName("shopperIP")]
        public string ShopperIP { get { return this.ShopperIPOption; } set { this.ShopperIPOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperLocale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperLocaleOption { get; private set; }

        /// <summary>
        /// The combination of a language code and a country code to specify the language to be used in the payment.
        /// </summary>
        /// <value>The combination of a language code and a country code to specify the language to be used in the payment.</value>
        [JsonPropertyName("shopperLocale")]
        public string ShopperLocale { get { return this.ShopperLocaleOption; } set { this.ShopperLocaleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Name> ShopperNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShopperName
        /// </summary>
        [JsonPropertyName("shopperName")]
        public Name ShopperName { get { return this.ShopperNameOption; } set { this.ShopperNameOption = new Option<Name>(value); } }

        /// <summary>
        /// Used to track the state of ShopperReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperReferenceOption { get; private set; }

        /// <summary>
        /// Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.
        /// </summary>
        /// <value>Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. &gt; Your reference must not include personally identifiable information (PII) such as name or email address.</value>
        [JsonPropertyName("shopperReference")]
        public string ShopperReference { get { return this.ShopperReferenceOption; } set { this.ShopperReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperStatement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperStatementOption { get; private set; }

        /// <summary>
        /// The text to be shown on the shopper&#39;s bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , &#39; _ - ? + * /_**.
        /// </summary>
        /// <value>The text to be shown on the shopper&#39;s bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , &#39; _ - ? + * /_**.</value>
        [JsonPropertyName("shopperStatement")]
        public string ShopperStatement { get { return this.ShopperStatementOption; } set { this.ShopperStatementOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SocialSecurityNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SocialSecurityNumberOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s social security number.
        /// </summary>
        /// <value>The shopper&#39;s social security number.</value>
        [JsonPropertyName("socialSecurityNumber")]
        public string SocialSecurityNumber { get { return this.SocialSecurityNumberOption; } set { this.SocialSecurityNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Splits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Split>> SplitsOption { get; private set; }

        /// <summary>
        /// An array of objects specifying how the payment should be split when using either Adyen for Platforms for [marketplaces](https://docs.adyen.com/marketplaces/split-payments) or [platforms](https://docs.adyen.com/platforms/split-payments), or standalone [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).
        /// </summary>
        /// <value>An array of objects specifying how the payment should be split when using either Adyen for Platforms for [marketplaces](https://docs.adyen.com/marketplaces/split-payments) or [platforms](https://docs.adyen.com/platforms/split-payments), or standalone [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).</value>
        [JsonPropertyName("splits")]
        public List<Split> Splits { get { return this.SplitsOption; } set { this.SplitsOption = new Option<List<Split>>(value); } }

        /// <summary>
        /// Used to track the state of Store
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StoreOption { get; private set; }

        /// <summary>
        /// Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.
        /// </summary>
        /// <value>Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.</value>
        [JsonPropertyName("store")]
        public string Store { get { return this.StoreOption; } set { this.StoreOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TelephoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TelephoneNumberOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s telephone number.
        /// </summary>
        /// <value>The shopper&#39;s telephone number.</value>
        [JsonPropertyName("telephoneNumber")]
        public string TelephoneNumber { get { return this.TelephoneNumberOption; } set { this.TelephoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDS2RequestData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDS2RequestData> ThreeDS2RequestDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreeDS2RequestData
        /// </summary>
        [JsonPropertyName("threeDS2RequestData")]
        public ThreeDS2RequestData ThreeDS2RequestData { get { return this.ThreeDS2RequestDataOption; } set { this.ThreeDS2RequestDataOption = new Option<ThreeDS2RequestData>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSAuthenticationOnly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ThreeDSAuthenticationOnlyOption { get; private set; }

        /// <summary>
        /// If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
        /// </summary>
        /// <value>If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.</value>
        [JsonPropertyName("threeDSAuthenticationOnly")]
        [Obsolete]
        public bool? ThreeDSAuthenticationOnly { get { return this.ThreeDSAuthenticationOnlyOption; } set { this.ThreeDSAuthenticationOnlyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TotalsGroup
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TotalsGroupOption { get; private set; }

        /// <summary>
        /// The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).
        /// </summary>
        /// <value>The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).</value>
        [JsonPropertyName("totalsGroup")]
        public string TotalsGroup { get { return this.TotalsGroupOption; } set { this.TotalsGroupOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TrustedShopper
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TrustedShopperOption { get; private set; }

        /// <summary>
        /// Set to true if the payment should be routed to a trusted MID.
        /// </summary>
        /// <value>Set to true if the payment should be routed to a trusted MID.</value>
        [JsonPropertyName("trustedShopper")]
        public bool? TrustedShopper { get { return this.TrustedShopperOption; } set { this.TrustedShopperOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BalanceCheckRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  AccountInfo: ").Append(AccountInfo).Append("\n");
            sb.Append("  AdditionalAmount: ").Append(AdditionalAmount).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  ApplicationInfo: ").Append(ApplicationInfo).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  BrowserInfo: ").Append(BrowserInfo).Append("\n");
            sb.Append("  CaptureDelayHours: ").Append(CaptureDelayHours).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DccQuote: ").Append(DccQuote).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  DeviceFingerprint: ").Append(DeviceFingerprint).Append("\n");
            sb.Append("  FraudOffset: ").Append(FraudOffset).Append("\n");
            sb.Append("  Installments: ").Append(Installments).Append("\n");
            sb.Append("  LocalizedShopperStatement: ").Append(LocalizedShopperStatement).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  MerchantOrderReference: ").Append(MerchantOrderReference).Append("\n");
            sb.Append("  MerchantRiskIndicator: ").Append(MerchantRiskIndicator).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  OrderReference: ").Append(OrderReference).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("  RecurringProcessingModel: ").Append(RecurringProcessingModel).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  SelectedBrand: ").Append(SelectedBrand).Append("\n");
            sb.Append("  SelectedRecurringDetailReference: ").Append(SelectedRecurringDetailReference).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("  ShopperIP: ").Append(ShopperIP).Append("\n");
            sb.Append("  ShopperInteraction: ").Append(ShopperInteraction).Append("\n");
            sb.Append("  ShopperLocale: ").Append(ShopperLocale).Append("\n");
            sb.Append("  ShopperName: ").Append(ShopperName).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("  ShopperStatement: ").Append(ShopperStatement).Append("\n");
            sb.Append("  SocialSecurityNumber: ").Append(SocialSecurityNumber).Append("\n");
            sb.Append("  Splits: ").Append(Splits).Append("\n");
            sb.Append("  Store: ").Append(Store).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  ThreeDS2RequestData: ").Append(ThreeDS2RequestData).Append("\n");
            sb.Append("  ThreeDSAuthenticationOnly: ").Append(ThreeDSAuthenticationOnly).Append("\n");
            sb.Append("  TotalsGroup: ").Append(TotalsGroup).Append("\n");
            sb.Append("  TrustedShopper: ").Append(TrustedShopper).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DeviceFingerprint (string) maxLength
            if (this.DeviceFingerprint != null && this.DeviceFingerprint.Length > 5000)
            {
                yield return new ValidationResult("Invalid value for DeviceFingerprint, length must be less than 5000.", new [] { "DeviceFingerprint" });
            }

            // Store (string) maxLength
            if (this.Store != null && this.Store.Length > 16)
            {
                yield return new ValidationResult("Invalid value for Store, length must be less than 16.", new [] { "Store" });
            }

            // Store (string) minLength
            if (this.Store != null && this.Store.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Store, length must be greater than 1.", new [] { "Store" });
            }

            // TotalsGroup (string) maxLength
            if (this.TotalsGroup != null && this.TotalsGroup.Length > 16)
            {
                yield return new ValidationResult("Invalid value for TotalsGroup, length must be less than 16.", new [] { "TotalsGroup" });
            }

            // TotalsGroup (string) minLength
            if (this.TotalsGroup != null && this.TotalsGroup.Length < 1)
            {
                yield return new ValidationResult("Invalid value for TotalsGroup, length must be greater than 1.", new [] { "TotalsGroup" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BalanceCheckRequest" />
    /// </summary>
    public class BalanceCheckRequestJsonConverter : JsonConverter<BalanceCheckRequest>
    {
        /// <summary>
        /// The format to use to serialize DateOfBirth
        /// </summary>
        public static string DateOfBirthFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize DeliveryDate
        /// </summary>
        public static string DeliveryDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BalanceCheckRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BalanceCheckRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Amount> amount = default;
            Option<string> merchantAccount = default;
            Option<Dictionary<string, string>> paymentMethod = default;
            Option<AccountInfo> accountInfo = default;
            Option<Amount> additionalAmount = default;
            Option<Dictionary<string, string>> additionalData = default;
            Option<ApplicationInfo> applicationInfo = default;
            Option<Address> billingAddress = default;
            Option<BrowserInfo> browserInfo = default;
            Option<int?> captureDelayHours = default;
            Option<DateTime?> dateOfBirth = default;
            Option<ForexQuote> dccQuote = default;
            Option<Address> deliveryAddress = default;
            Option<DateTime?> deliveryDate = default;
            Option<string> deviceFingerprint = default;
            Option<int?> fraudOffset = default;
            Option<Installments> installments = default;
            Option<Dictionary<string, string>> localizedShopperStatement = default;
            Option<string> mcc = default;
            Option<string> merchantOrderReference = default;
            Option<MerchantRiskIndicator> merchantRiskIndicator = default;
            Option<Dictionary<string, string>> metadata = default;
            Option<string> orderReference = default;
            Option<Recurring> recurring = default;
            Option<BalanceCheckRequest.RecurringProcessingModelEnum?> recurringProcessingModel = default;
            Option<string> reference = default;
            Option<string> selectedBrand = default;
            Option<string> selectedRecurringDetailReference = default;
            Option<string> sessionId = default;
            Option<string> shopperEmail = default;
            Option<string> shopperIP = default;
            Option<BalanceCheckRequest.ShopperInteractionEnum?> shopperInteraction = default;
            Option<string> shopperLocale = default;
            Option<Name> shopperName = default;
            Option<string> shopperReference = default;
            Option<string> shopperStatement = default;
            Option<string> socialSecurityNumber = default;
            Option<List<Split>> splits = default;
            Option<string> store = default;
            Option<string> telephoneNumber = default;
            Option<ThreeDS2RequestData> threeDS2RequestData = default;
            Option<bool?> threeDSAuthenticationOnly = default;
            Option<string> totalsGroup = default;
            Option<bool?> trustedShopper = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "merchantAccount":
                            merchantAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentMethod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentMethod = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "accountInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountInfo = new Option<AccountInfo>(JsonSerializer.Deserialize<AccountInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "additionalAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalAmount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "additionalData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalData = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "applicationInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                applicationInfo = new Option<ApplicationInfo>(JsonSerializer.Deserialize<ApplicationInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "billingAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                billingAddress = new Option<Address>(JsonSerializer.Deserialize<Address>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "browserInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                browserInfo = new Option<BrowserInfo>(JsonSerializer.Deserialize<BrowserInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "captureDelayHours":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                captureDelayHours = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "dateOfBirth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateOfBirth = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dccQuote":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dccQuote = new Option<ForexQuote>(JsonSerializer.Deserialize<ForexQuote>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryAddress = new Option<Address>(JsonSerializer.Deserialize<Address>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deviceFingerprint":
                            deviceFingerprint = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fraudOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fraudOffset = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "installments":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                installments = new Option<Installments>(JsonSerializer.Deserialize<Installments>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "localizedShopperStatement":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                localizedShopperStatement = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mcc":
                            mcc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantOrderReference":
                            merchantOrderReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantRiskIndicator":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                merchantRiskIndicator = new Option<MerchantRiskIndicator>(JsonSerializer.Deserialize<MerchantRiskIndicator>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metadata":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                metadata = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "orderReference":
                            orderReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurring":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                recurring = new Option<Recurring>(JsonSerializer.Deserialize<Recurring>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recurringProcessingModel":
                            string recurringProcessingModelRawValue = utf8JsonReader.GetString();
                            if (recurringProcessingModelRawValue != null)
                                recurringProcessingModel = new Option<BalanceCheckRequest.RecurringProcessingModelEnum?>(BalanceCheckRequest.RecurringProcessingModelEnumFromStringOrDefault(recurringProcessingModelRawValue));
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "selectedBrand":
                            selectedBrand = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "selectedRecurringDetailReference":
                            selectedRecurringDetailReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sessionId":
                            sessionId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperEmail":
                            shopperEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperIP":
                            shopperIP = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperInteraction":
                            string shopperInteractionRawValue = utf8JsonReader.GetString();
                            if (shopperInteractionRawValue != null)
                                shopperInteraction = new Option<BalanceCheckRequest.ShopperInteractionEnum?>(BalanceCheckRequest.ShopperInteractionEnumFromStringOrDefault(shopperInteractionRawValue));
                            break;
                        case "shopperLocale":
                            shopperLocale = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperName":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shopperName = new Option<Name>(JsonSerializer.Deserialize<Name>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shopperReference":
                            shopperReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperStatement":
                            shopperStatement = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "socialSecurityNumber":
                            socialSecurityNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "splits":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                splits = new Option<List<Split>>(JsonSerializer.Deserialize<List<Split>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "store":
                            store = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "telephoneNumber":
                            telephoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDS2RequestData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeDS2RequestData = new Option<ThreeDS2RequestData>(JsonSerializer.Deserialize<ThreeDS2RequestData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "threeDSAuthenticationOnly":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeDSAuthenticationOnly = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "totalsGroup":
                            totalsGroup = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "trustedShopper":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                trustedShopper = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class BalanceCheckRequest.", nameof(amount));

            if (!merchantAccount.IsSet)
                throw new ArgumentException("Property is required for class BalanceCheckRequest.", nameof(merchantAccount));

            if (!paymentMethod.IsSet)
                throw new ArgumentException("Property is required for class BalanceCheckRequest.", nameof(paymentMethod));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class BalanceCheckRequest.");

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount), "Property is not nullable for class BalanceCheckRequest.");

            if (paymentMethod.IsSet && paymentMethod.Value == null)
                throw new ArgumentNullException(nameof(paymentMethod), "Property is not nullable for class BalanceCheckRequest.");

            if (accountInfo.IsSet && accountInfo.Value == null)
                throw new ArgumentNullException(nameof(accountInfo), "Property is not nullable for class BalanceCheckRequest.");

            if (additionalAmount.IsSet && additionalAmount.Value == null)
                throw new ArgumentNullException(nameof(additionalAmount), "Property is not nullable for class BalanceCheckRequest.");

            if (additionalData.IsSet && additionalData.Value == null)
                throw new ArgumentNullException(nameof(additionalData), "Property is not nullable for class BalanceCheckRequest.");

            if (applicationInfo.IsSet && applicationInfo.Value == null)
                throw new ArgumentNullException(nameof(applicationInfo), "Property is not nullable for class BalanceCheckRequest.");

            if (billingAddress.IsSet && billingAddress.Value == null)
                throw new ArgumentNullException(nameof(billingAddress), "Property is not nullable for class BalanceCheckRequest.");

            if (browserInfo.IsSet && browserInfo.Value == null)
                throw new ArgumentNullException(nameof(browserInfo), "Property is not nullable for class BalanceCheckRequest.");

            if (captureDelayHours.IsSet && captureDelayHours.Value == null)
                throw new ArgumentNullException(nameof(captureDelayHours), "Property is not nullable for class BalanceCheckRequest.");

            if (dateOfBirth.IsSet && dateOfBirth.Value == null)
                throw new ArgumentNullException(nameof(dateOfBirth), "Property is not nullable for class BalanceCheckRequest.");

            if (dccQuote.IsSet && dccQuote.Value == null)
                throw new ArgumentNullException(nameof(dccQuote), "Property is not nullable for class BalanceCheckRequest.");

            if (deliveryAddress.IsSet && deliveryAddress.Value == null)
                throw new ArgumentNullException(nameof(deliveryAddress), "Property is not nullable for class BalanceCheckRequest.");

            if (deliveryDate.IsSet && deliveryDate.Value == null)
                throw new ArgumentNullException(nameof(deliveryDate), "Property is not nullable for class BalanceCheckRequest.");

            if (deviceFingerprint.IsSet && deviceFingerprint.Value == null)
                throw new ArgumentNullException(nameof(deviceFingerprint), "Property is not nullable for class BalanceCheckRequest.");

            if (fraudOffset.IsSet && fraudOffset.Value == null)
                throw new ArgumentNullException(nameof(fraudOffset), "Property is not nullable for class BalanceCheckRequest.");

            if (installments.IsSet && installments.Value == null)
                throw new ArgumentNullException(nameof(installments), "Property is not nullable for class BalanceCheckRequest.");

            if (localizedShopperStatement.IsSet && localizedShopperStatement.Value == null)
                throw new ArgumentNullException(nameof(localizedShopperStatement), "Property is not nullable for class BalanceCheckRequest.");

            if (mcc.IsSet && mcc.Value == null)
                throw new ArgumentNullException(nameof(mcc), "Property is not nullable for class BalanceCheckRequest.");

            if (merchantOrderReference.IsSet && merchantOrderReference.Value == null)
                throw new ArgumentNullException(nameof(merchantOrderReference), "Property is not nullable for class BalanceCheckRequest.");

            if (merchantRiskIndicator.IsSet && merchantRiskIndicator.Value == null)
                throw new ArgumentNullException(nameof(merchantRiskIndicator), "Property is not nullable for class BalanceCheckRequest.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class BalanceCheckRequest.");

            if (orderReference.IsSet && orderReference.Value == null)
                throw new ArgumentNullException(nameof(orderReference), "Property is not nullable for class BalanceCheckRequest.");

            if (recurring.IsSet && recurring.Value == null)
                throw new ArgumentNullException(nameof(recurring), "Property is not nullable for class BalanceCheckRequest.");

            if (recurringProcessingModel.IsSet && recurringProcessingModel.Value == null)
                throw new ArgumentNullException(nameof(recurringProcessingModel), "Property is not nullable for class BalanceCheckRequest.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class BalanceCheckRequest.");

            if (selectedBrand.IsSet && selectedBrand.Value == null)
                throw new ArgumentNullException(nameof(selectedBrand), "Property is not nullable for class BalanceCheckRequest.");

            if (selectedRecurringDetailReference.IsSet && selectedRecurringDetailReference.Value == null)
                throw new ArgumentNullException(nameof(selectedRecurringDetailReference), "Property is not nullable for class BalanceCheckRequest.");

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId), "Property is not nullable for class BalanceCheckRequest.");

            if (shopperEmail.IsSet && shopperEmail.Value == null)
                throw new ArgumentNullException(nameof(shopperEmail), "Property is not nullable for class BalanceCheckRequest.");

            if (shopperIP.IsSet && shopperIP.Value == null)
                throw new ArgumentNullException(nameof(shopperIP), "Property is not nullable for class BalanceCheckRequest.");

            if (shopperInteraction.IsSet && shopperInteraction.Value == null)
                throw new ArgumentNullException(nameof(shopperInteraction), "Property is not nullable for class BalanceCheckRequest.");

            if (shopperLocale.IsSet && shopperLocale.Value == null)
                throw new ArgumentNullException(nameof(shopperLocale), "Property is not nullable for class BalanceCheckRequest.");

            if (shopperName.IsSet && shopperName.Value == null)
                throw new ArgumentNullException(nameof(shopperName), "Property is not nullable for class BalanceCheckRequest.");

            if (shopperReference.IsSet && shopperReference.Value == null)
                throw new ArgumentNullException(nameof(shopperReference), "Property is not nullable for class BalanceCheckRequest.");

            if (shopperStatement.IsSet && shopperStatement.Value == null)
                throw new ArgumentNullException(nameof(shopperStatement), "Property is not nullable for class BalanceCheckRequest.");

            if (socialSecurityNumber.IsSet && socialSecurityNumber.Value == null)
                throw new ArgumentNullException(nameof(socialSecurityNumber), "Property is not nullable for class BalanceCheckRequest.");

            if (splits.IsSet && splits.Value == null)
                throw new ArgumentNullException(nameof(splits), "Property is not nullable for class BalanceCheckRequest.");

            if (store.IsSet && store.Value == null)
                throw new ArgumentNullException(nameof(store), "Property is not nullable for class BalanceCheckRequest.");

            if (telephoneNumber.IsSet && telephoneNumber.Value == null)
                throw new ArgumentNullException(nameof(telephoneNumber), "Property is not nullable for class BalanceCheckRequest.");

            if (threeDS2RequestData.IsSet && threeDS2RequestData.Value == null)
                throw new ArgumentNullException(nameof(threeDS2RequestData), "Property is not nullable for class BalanceCheckRequest.");

            if (threeDSAuthenticationOnly.IsSet && threeDSAuthenticationOnly.Value == null)
                throw new ArgumentNullException(nameof(threeDSAuthenticationOnly), "Property is not nullable for class BalanceCheckRequest.");

            if (totalsGroup.IsSet && totalsGroup.Value == null)
                throw new ArgumentNullException(nameof(totalsGroup), "Property is not nullable for class BalanceCheckRequest.");

            if (trustedShopper.IsSet && trustedShopper.Value == null)
                throw new ArgumentNullException(nameof(trustedShopper), "Property is not nullable for class BalanceCheckRequest.");

            return new BalanceCheckRequest(amount.Value, merchantAccount.Value, paymentMethod.Value, accountInfo, additionalAmount, additionalData, applicationInfo, billingAddress, browserInfo, captureDelayHours, dateOfBirth, dccQuote, deliveryAddress, deliveryDate, deviceFingerprint, fraudOffset, installments, localizedShopperStatement, mcc, merchantOrderReference, merchantRiskIndicator, metadata, orderReference, recurring, recurringProcessingModel, reference, selectedBrand, selectedRecurringDetailReference, sessionId, shopperEmail, shopperIP, shopperInteraction, shopperLocale, shopperName, shopperReference, shopperStatement, socialSecurityNumber, splits, store, telephoneNumber, threeDS2RequestData, threeDSAuthenticationOnly, totalsGroup, trustedShopper);
        }

        /// <summary>
        /// Serializes a <see cref="BalanceCheckRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="balanceCheckRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BalanceCheckRequest balanceCheckRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, balanceCheckRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BalanceCheckRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="balanceCheckRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BalanceCheckRequest balanceCheckRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (balanceCheckRequest.Amount == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.Amount), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.MerchantAccount == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.MerchantAccount), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.PaymentMethod == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.PaymentMethod), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.AccountInfoOption.IsSet && balanceCheckRequest.AccountInfo == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.AccountInfo), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.AdditionalAmountOption.IsSet && balanceCheckRequest.AdditionalAmount == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.AdditionalAmount), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.AdditionalDataOption.IsSet && balanceCheckRequest.AdditionalData == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.AdditionalData), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.ApplicationInfoOption.IsSet && balanceCheckRequest.ApplicationInfo == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.ApplicationInfo), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.BillingAddressOption.IsSet && balanceCheckRequest.BillingAddress == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.BillingAddress), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.BrowserInfoOption.IsSet && balanceCheckRequest.BrowserInfo == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.BrowserInfo), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.DccQuoteOption.IsSet && balanceCheckRequest.DccQuote == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.DccQuote), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.DeliveryAddressOption.IsSet && balanceCheckRequest.DeliveryAddress == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.DeliveryAddress), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.DeviceFingerprintOption.IsSet && balanceCheckRequest.DeviceFingerprint == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.DeviceFingerprint), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.InstallmentsOption.IsSet && balanceCheckRequest.Installments == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.Installments), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.LocalizedShopperStatementOption.IsSet && balanceCheckRequest.LocalizedShopperStatement == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.LocalizedShopperStatement), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.MccOption.IsSet && balanceCheckRequest.Mcc == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.Mcc), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.MerchantOrderReferenceOption.IsSet && balanceCheckRequest.MerchantOrderReference == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.MerchantOrderReference), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.MerchantRiskIndicatorOption.IsSet && balanceCheckRequest.MerchantRiskIndicator == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.MerchantRiskIndicator), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.MetadataOption.IsSet && balanceCheckRequest.Metadata == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.Metadata), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.OrderReferenceOption.IsSet && balanceCheckRequest.OrderReference == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.OrderReference), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.RecurringOption.IsSet && balanceCheckRequest.Recurring == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.Recurring), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.ReferenceOption.IsSet && balanceCheckRequest.Reference == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.Reference), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.SelectedBrandOption.IsSet && balanceCheckRequest.SelectedBrand == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.SelectedBrand), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.SelectedRecurringDetailReferenceOption.IsSet && balanceCheckRequest.SelectedRecurringDetailReference == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.SelectedRecurringDetailReference), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.SessionIdOption.IsSet && balanceCheckRequest.SessionId == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.SessionId), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.ShopperEmailOption.IsSet && balanceCheckRequest.ShopperEmail == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.ShopperEmail), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.ShopperIPOption.IsSet && balanceCheckRequest.ShopperIP == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.ShopperIP), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.ShopperLocaleOption.IsSet && balanceCheckRequest.ShopperLocale == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.ShopperLocale), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.ShopperNameOption.IsSet && balanceCheckRequest.ShopperName == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.ShopperName), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.ShopperReferenceOption.IsSet && balanceCheckRequest.ShopperReference == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.ShopperReference), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.ShopperStatementOption.IsSet && balanceCheckRequest.ShopperStatement == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.ShopperStatement), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.SocialSecurityNumberOption.IsSet && balanceCheckRequest.SocialSecurityNumber == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.SocialSecurityNumber), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.SplitsOption.IsSet && balanceCheckRequest.Splits == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.Splits), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.StoreOption.IsSet && balanceCheckRequest.Store == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.Store), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.TelephoneNumberOption.IsSet && balanceCheckRequest.TelephoneNumber == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.TelephoneNumber), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.ThreeDS2RequestDataOption.IsSet && balanceCheckRequest.ThreeDS2RequestData == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.ThreeDS2RequestData), "Property is required for class BalanceCheckRequest.");

            if (balanceCheckRequest.TotalsGroupOption.IsSet && balanceCheckRequest.TotalsGroup == null)
                throw new ArgumentNullException(nameof(balanceCheckRequest.TotalsGroup), "Property is required for class BalanceCheckRequest.");

            writer.WritePropertyName("amount");
            JsonSerializer.Serialize(writer, balanceCheckRequest.Amount, jsonSerializerOptions);
            writer.WriteString("merchantAccount", balanceCheckRequest.MerchantAccount);

            writer.WritePropertyName("paymentMethod");
            JsonSerializer.Serialize(writer, balanceCheckRequest.PaymentMethod, jsonSerializerOptions);
            if (balanceCheckRequest.AccountInfoOption.IsSet)
            {
                writer.WritePropertyName("accountInfo");
                JsonSerializer.Serialize(writer, balanceCheckRequest.AccountInfo, jsonSerializerOptions);
            }
            if (balanceCheckRequest.AdditionalAmountOption.IsSet)
            {
                writer.WritePropertyName("additionalAmount");
                JsonSerializer.Serialize(writer, balanceCheckRequest.AdditionalAmount, jsonSerializerOptions);
            }
            if (balanceCheckRequest.AdditionalDataOption.IsSet)
            {
                writer.WritePropertyName("additionalData");
                JsonSerializer.Serialize(writer, balanceCheckRequest.AdditionalData, jsonSerializerOptions);
            }
            if (balanceCheckRequest.ApplicationInfoOption.IsSet)
            {
                writer.WritePropertyName("applicationInfo");
                JsonSerializer.Serialize(writer, balanceCheckRequest.ApplicationInfo, jsonSerializerOptions);
            }
            if (balanceCheckRequest.BillingAddressOption.IsSet)
            {
                writer.WritePropertyName("billingAddress");
                JsonSerializer.Serialize(writer, balanceCheckRequest.BillingAddress, jsonSerializerOptions);
            }
            if (balanceCheckRequest.BrowserInfoOption.IsSet)
            {
                writer.WritePropertyName("browserInfo");
                JsonSerializer.Serialize(writer, balanceCheckRequest.BrowserInfo, jsonSerializerOptions);
            }
            if (balanceCheckRequest.CaptureDelayHoursOption.IsSet)
                writer.WriteNumber("captureDelayHours", balanceCheckRequest.CaptureDelayHoursOption.Value.Value);

            if (balanceCheckRequest.DateOfBirthOption.IsSet)
                writer.WriteString("dateOfBirth", balanceCheckRequest.DateOfBirthOption.Value.Value.ToString(DateOfBirthFormat));

            if (balanceCheckRequest.DccQuoteOption.IsSet)
            {
                writer.WritePropertyName("dccQuote");
                JsonSerializer.Serialize(writer, balanceCheckRequest.DccQuote, jsonSerializerOptions);
            }
            if (balanceCheckRequest.DeliveryAddressOption.IsSet)
            {
                writer.WritePropertyName("deliveryAddress");
                JsonSerializer.Serialize(writer, balanceCheckRequest.DeliveryAddress, jsonSerializerOptions);
            }
            if (balanceCheckRequest.DeliveryDateOption.IsSet)
                writer.WriteString("deliveryDate", balanceCheckRequest.DeliveryDateOption.Value.Value.ToString(DeliveryDateFormat));

            if (balanceCheckRequest.DeviceFingerprintOption.IsSet)
                writer.WriteString("deviceFingerprint", balanceCheckRequest.DeviceFingerprint);

            if (balanceCheckRequest.FraudOffsetOption.IsSet)
                writer.WriteNumber("fraudOffset", balanceCheckRequest.FraudOffsetOption.Value.Value);

            if (balanceCheckRequest.InstallmentsOption.IsSet)
            {
                writer.WritePropertyName("installments");
                JsonSerializer.Serialize(writer, balanceCheckRequest.Installments, jsonSerializerOptions);
            }
            if (balanceCheckRequest.LocalizedShopperStatementOption.IsSet)
            {
                writer.WritePropertyName("localizedShopperStatement");
                JsonSerializer.Serialize(writer, balanceCheckRequest.LocalizedShopperStatement, jsonSerializerOptions);
            }
            if (balanceCheckRequest.MccOption.IsSet)
                writer.WriteString("mcc", balanceCheckRequest.Mcc);

            if (balanceCheckRequest.MerchantOrderReferenceOption.IsSet)
                writer.WriteString("merchantOrderReference", balanceCheckRequest.MerchantOrderReference);

            if (balanceCheckRequest.MerchantRiskIndicatorOption.IsSet)
            {
                writer.WritePropertyName("merchantRiskIndicator");
                JsonSerializer.Serialize(writer, balanceCheckRequest.MerchantRiskIndicator, jsonSerializerOptions);
            }
            if (balanceCheckRequest.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, balanceCheckRequest.Metadata, jsonSerializerOptions);
            }
            if (balanceCheckRequest.OrderReferenceOption.IsSet)
                writer.WriteString("orderReference", balanceCheckRequest.OrderReference);

            if (balanceCheckRequest.RecurringOption.IsSet)
            {
                writer.WritePropertyName("recurring");
                JsonSerializer.Serialize(writer, balanceCheckRequest.Recurring, jsonSerializerOptions);
            }
            var recurringProcessingModelRawValue = BalanceCheckRequest.RecurringProcessingModelEnumToJsonValue(balanceCheckRequest.RecurringProcessingModelOption.Value.Value);
            writer.WriteString("recurringProcessingModel", recurringProcessingModelRawValue);
            if (balanceCheckRequest.ReferenceOption.IsSet)
                writer.WriteString("reference", balanceCheckRequest.Reference);

            if (balanceCheckRequest.SelectedBrandOption.IsSet)
                writer.WriteString("selectedBrand", balanceCheckRequest.SelectedBrand);

            if (balanceCheckRequest.SelectedRecurringDetailReferenceOption.IsSet)
                writer.WriteString("selectedRecurringDetailReference", balanceCheckRequest.SelectedRecurringDetailReference);

            if (balanceCheckRequest.SessionIdOption.IsSet)
                writer.WriteString("sessionId", balanceCheckRequest.SessionId);

            if (balanceCheckRequest.ShopperEmailOption.IsSet)
                writer.WriteString("shopperEmail", balanceCheckRequest.ShopperEmail);

            if (balanceCheckRequest.ShopperIPOption.IsSet)
                writer.WriteString("shopperIP", balanceCheckRequest.ShopperIP);

            var shopperInteractionRawValue = BalanceCheckRequest.ShopperInteractionEnumToJsonValue(balanceCheckRequest.ShopperInteractionOption.Value.Value);
            writer.WriteString("shopperInteraction", shopperInteractionRawValue);
            if (balanceCheckRequest.ShopperLocaleOption.IsSet)
                writer.WriteString("shopperLocale", balanceCheckRequest.ShopperLocale);

            if (balanceCheckRequest.ShopperNameOption.IsSet)
            {
                writer.WritePropertyName("shopperName");
                JsonSerializer.Serialize(writer, balanceCheckRequest.ShopperName, jsonSerializerOptions);
            }
            if (balanceCheckRequest.ShopperReferenceOption.IsSet)
                writer.WriteString("shopperReference", balanceCheckRequest.ShopperReference);

            if (balanceCheckRequest.ShopperStatementOption.IsSet)
                writer.WriteString("shopperStatement", balanceCheckRequest.ShopperStatement);

            if (balanceCheckRequest.SocialSecurityNumberOption.IsSet)
                writer.WriteString("socialSecurityNumber", balanceCheckRequest.SocialSecurityNumber);

            if (balanceCheckRequest.SplitsOption.IsSet)
            {
                writer.WritePropertyName("splits");
                JsonSerializer.Serialize(writer, balanceCheckRequest.Splits, jsonSerializerOptions);
            }
            if (balanceCheckRequest.StoreOption.IsSet)
                writer.WriteString("store", balanceCheckRequest.Store);

            if (balanceCheckRequest.TelephoneNumberOption.IsSet)
                writer.WriteString("telephoneNumber", balanceCheckRequest.TelephoneNumber);

            if (balanceCheckRequest.ThreeDS2RequestDataOption.IsSet)
            {
                writer.WritePropertyName("threeDS2RequestData");
                JsonSerializer.Serialize(writer, balanceCheckRequest.ThreeDS2RequestData, jsonSerializerOptions);
            }
            if (balanceCheckRequest.ThreeDSAuthenticationOnlyOption.IsSet)
                writer.WriteBoolean("threeDSAuthenticationOnly", balanceCheckRequest.ThreeDSAuthenticationOnlyOption.Value.Value);

            if (balanceCheckRequest.TotalsGroupOption.IsSet)
                writer.WriteString("totalsGroup", balanceCheckRequest.TotalsGroup);

            if (balanceCheckRequest.TrustedShopperOption.IsSet)
                writer.WriteBoolean("trustedShopper", balanceCheckRequest.TrustedShopperOption.Value.Value);
        }
    }
}
