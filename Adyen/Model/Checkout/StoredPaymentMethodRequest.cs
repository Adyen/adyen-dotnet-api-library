// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// StoredPaymentMethodRequest
    /// </summary>
    public partial class StoredPaymentMethodRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredPaymentMethodRequest" /> class.
        /// </summary>
        /// <param name="merchantAccount">The merchant account identifier, with which you want to process the transaction.</param>
        /// <param name="paymentMethod">paymentMethod</param>
        /// <param name="recurringProcessingModel">Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </param>
        /// <param name="shopperReference">A unique identifier for the shopper (for example, user ID or account ID).</param>
        /// <param name="shopperEmail">The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks.</param>
        /// <param name="shopperIP">The IP address of a shopper.</param>
        [JsonConstructor]
        public StoredPaymentMethodRequest(string merchantAccount, PaymentMethodToStore paymentMethod, RecurringProcessingModelEnum recurringProcessingModel, string shopperReference, Option<string> shopperEmail = default, Option<string> shopperIP = default)
        {
            MerchantAccount = merchantAccount;
            PaymentMethod = paymentMethod;
            RecurringProcessingModel = recurringProcessingModel;
            ShopperReference = shopperReference;
            ShopperEmailOption = shopperEmail;
            ShopperIPOption = shopperIP;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. 
        /// </summary>
        /// <value>Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </value>
        public enum RecurringProcessingModelEnum
        {
            /// <summary>
            /// Enum CardOnFile for value: CardOnFile
            /// </summary>
            CardOnFile = 1,

            /// <summary>
            /// Enum Subscription for value: Subscription
            /// </summary>
            Subscription = 2,

            /// <summary>
            /// Enum UnscheduledCardOnFile for value: UnscheduledCardOnFile
            /// </summary>
            UnscheduledCardOnFile = 3
        }

        /// <summary>
        /// Returns a <see cref="RecurringProcessingModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RecurringProcessingModelEnum RecurringProcessingModelEnumFromString(string value)
        {
            if (value.Equals("CardOnFile"))
                return RecurringProcessingModelEnum.CardOnFile;

            if (value.Equals("Subscription"))
                return RecurringProcessingModelEnum.Subscription;

            if (value.Equals("UnscheduledCardOnFile"))
                return RecurringProcessingModelEnum.UnscheduledCardOnFile;

            throw new NotImplementedException($"Could not convert value to type RecurringProcessingModelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RecurringProcessingModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RecurringProcessingModelEnum? RecurringProcessingModelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CardOnFile"))
                return RecurringProcessingModelEnum.CardOnFile;

            if (value.Equals("Subscription"))
                return RecurringProcessingModelEnum.Subscription;

            if (value.Equals("UnscheduledCardOnFile"))
                return RecurringProcessingModelEnum.UnscheduledCardOnFile;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RecurringProcessingModelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RecurringProcessingModelEnumToJsonValue(RecurringProcessingModelEnum value)
        {
            if (value == RecurringProcessingModelEnum.CardOnFile)
                return "CardOnFile";

            if (value == RecurringProcessingModelEnum.Subscription)
                return "Subscription";

            if (value == RecurringProcessingModelEnum.UnscheduledCardOnFile)
                return "UnscheduledCardOnFile";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. 
        /// </summary>
        /// <value>Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * &#x60;Subscription&#x60; – A transaction for a fixed or variable amount, which follows a fixed schedule. * &#x60;CardOnFile&#x60; – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * &#x60;UnscheduledCardOnFile&#x60; – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder&#39;s balance drops below a certain amount. </value>
        [JsonPropertyName("recurringProcessingModel")]
        public RecurringProcessingModelEnum RecurringProcessingModel { get; set; }

        /// <summary>
        /// The merchant account identifier, with which you want to process the transaction.
        /// </summary>
        /// <value>The merchant account identifier, with which you want to process the transaction.</value>
        [JsonPropertyName("merchantAccount")]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [JsonPropertyName("paymentMethod")]
        public PaymentMethodToStore PaymentMethod { get; set; }

        /// <summary>
        /// A unique identifier for the shopper (for example, user ID or account ID).
        /// </summary>
        /// <value>A unique identifier for the shopper (for example, user ID or account ID).</value>
        [JsonPropertyName("shopperReference")]
        public string ShopperReference { get; set; }

        /// <summary>
        /// Used to track the state of ShopperEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperEmailOption { get; private set; }

        /// <summary>
        /// The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks.
        /// </summary>
        /// <value>The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks.</value>
        [JsonPropertyName("shopperEmail")]
        public string ShopperEmail { get { return this.ShopperEmailOption; } set { this.ShopperEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperIP
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperIPOption { get; private set; }

        /// <summary>
        /// The IP address of a shopper.
        /// </summary>
        /// <value>The IP address of a shopper.</value>
        [JsonPropertyName("shopperIP")]
        public string ShopperIP { get { return this.ShopperIPOption; } set { this.ShopperIPOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StoredPaymentMethodRequest {\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  RecurringProcessingModel: ").Append(RecurringProcessingModel).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("  ShopperIP: ").Append(ShopperIP).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StoredPaymentMethodRequest" />
    /// </summary>
    public class StoredPaymentMethodRequestJsonConverter : JsonConverter<StoredPaymentMethodRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="StoredPaymentMethodRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override StoredPaymentMethodRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> merchantAccount = default;
            Option<PaymentMethodToStore> paymentMethod = default;
            Option<StoredPaymentMethodRequest.RecurringProcessingModelEnum?> recurringProcessingModel = default;
            Option<string> shopperReference = default;
            Option<string> shopperEmail = default;
            Option<string> shopperIP = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "merchantAccount":
                            merchantAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentMethod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentMethod = new Option<PaymentMethodToStore>(JsonSerializer.Deserialize<PaymentMethodToStore>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recurringProcessingModel":
                            string recurringProcessingModelRawValue = utf8JsonReader.GetString();
                            if (recurringProcessingModelRawValue != null)
                                recurringProcessingModel = new Option<StoredPaymentMethodRequest.RecurringProcessingModelEnum?>(StoredPaymentMethodRequest.RecurringProcessingModelEnumFromStringOrDefault(recurringProcessingModelRawValue));
                            break;
                        case "shopperReference":
                            shopperReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperEmail":
                            shopperEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperIP":
                            shopperIP = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!merchantAccount.IsSet)
                throw new ArgumentException("Property is required for class StoredPaymentMethodRequest.", nameof(merchantAccount));

            if (!paymentMethod.IsSet)
                throw new ArgumentException("Property is required for class StoredPaymentMethodRequest.", nameof(paymentMethod));

            if (!recurringProcessingModel.IsSet)
                throw new ArgumentException("Property is required for class StoredPaymentMethodRequest.", nameof(recurringProcessingModel));

            if (!shopperReference.IsSet)
                throw new ArgumentException("Property is required for class StoredPaymentMethodRequest.", nameof(shopperReference));

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount), "Property is not nullable for class StoredPaymentMethodRequest.");

            if (paymentMethod.IsSet && paymentMethod.Value == null)
                throw new ArgumentNullException(nameof(paymentMethod), "Property is not nullable for class StoredPaymentMethodRequest.");

            if (recurringProcessingModel.IsSet && recurringProcessingModel.Value == null)
                throw new ArgumentNullException(nameof(recurringProcessingModel), "Property is not nullable for class StoredPaymentMethodRequest.");

            if (shopperReference.IsSet && shopperReference.Value == null)
                throw new ArgumentNullException(nameof(shopperReference), "Property is not nullable for class StoredPaymentMethodRequest.");

            if (shopperEmail.IsSet && shopperEmail.Value == null)
                throw new ArgumentNullException(nameof(shopperEmail), "Property is not nullable for class StoredPaymentMethodRequest.");

            if (shopperIP.IsSet && shopperIP.Value == null)
                throw new ArgumentNullException(nameof(shopperIP), "Property is not nullable for class StoredPaymentMethodRequest.");

            return new StoredPaymentMethodRequest(merchantAccount.Value, paymentMethod.Value, recurringProcessingModel.Value.Value, shopperReference.Value, shopperEmail, shopperIP);
        }

        /// <summary>
        /// Serializes a <see cref="StoredPaymentMethodRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="storedPaymentMethodRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, StoredPaymentMethodRequest storedPaymentMethodRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, storedPaymentMethodRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="StoredPaymentMethodRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="storedPaymentMethodRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, StoredPaymentMethodRequest storedPaymentMethodRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (storedPaymentMethodRequest.MerchantAccount == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodRequest.MerchantAccount), "Property is required for class StoredPaymentMethodRequest.");

            if (storedPaymentMethodRequest.PaymentMethod == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodRequest.PaymentMethod), "Property is required for class StoredPaymentMethodRequest.");

            if (storedPaymentMethodRequest.ShopperReference == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodRequest.ShopperReference), "Property is required for class StoredPaymentMethodRequest.");

            if (storedPaymentMethodRequest.ShopperEmailOption.IsSet && storedPaymentMethodRequest.ShopperEmail == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodRequest.ShopperEmail), "Property is required for class StoredPaymentMethodRequest.");

            if (storedPaymentMethodRequest.ShopperIPOption.IsSet && storedPaymentMethodRequest.ShopperIP == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodRequest.ShopperIP), "Property is required for class StoredPaymentMethodRequest.");

            writer.WriteString("merchantAccount", storedPaymentMethodRequest.MerchantAccount);

            writer.WritePropertyName("paymentMethod");
            JsonSerializer.Serialize(writer, storedPaymentMethodRequest.PaymentMethod, jsonSerializerOptions);
            var recurringProcessingModelRawValue = StoredPaymentMethodRequest.RecurringProcessingModelEnumToJsonValue(storedPaymentMethodRequest.RecurringProcessingModel);
            writer.WriteString("recurringProcessingModel", recurringProcessingModelRawValue);
            writer.WriteString("shopperReference", storedPaymentMethodRequest.ShopperReference);

            if (storedPaymentMethodRequest.ShopperEmailOption.IsSet)
                writer.WriteString("shopperEmail", storedPaymentMethodRequest.ShopperEmail);

            if (storedPaymentMethodRequest.ShopperIPOption.IsSet)
                writer.WriteString("shopperIP", storedPaymentMethodRequest.ShopperIP);
        }
    }
}
