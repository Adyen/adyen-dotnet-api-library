/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PayPalDetails
    /// </summary>
    [DataContract(Name = "PayPalDetails")]
    public partial class PayPalDetails : IEquatable<PayPalDetails>, IValidatableObject
    {
        /// <summary>
        /// The type of flow to initiate.
        /// </summary>
        /// <value>The type of flow to initiate.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubtypeEnum
        {
            /// <summary>
            /// Enum Express for value: express
            /// </summary>
            [EnumMember(Value = "express")]
            Express = 1,

            /// <summary>
            /// Enum Redirect for value: redirect
            /// </summary>
            [EnumMember(Value = "redirect")]
            Redirect = 2,

            /// <summary>
            /// Enum Sdk for value: sdk
            /// </summary>
            [EnumMember(Value = "sdk")]
            Sdk = 3

        }


        /// <summary>
        /// The type of flow to initiate.
        /// </summary>
        /// <value>The type of flow to initiate.</value>
        [DataMember(Name = "subtype", EmitDefaultValue = false)]
        public SubtypeEnum? Subtype { get; set; }
        /// <summary>
        /// **paypal**
        /// </summary>
        /// <value>**paypal**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Paypal for value: paypal
            /// </summary>
            [EnumMember(Value = "paypal")]
            Paypal = 1

        }


        /// <summary>
        /// **paypal**
        /// </summary>
        /// <value>**paypal**</value>
        [DataMember(Name = "type", IsRequired = false, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayPalDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayPalDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayPalDetails" /> class.
        /// </summary>
        /// <param name="checkoutAttemptId">The checkout attempt identifier..</param>
        /// <param name="orderID">The unique ID associated with the order..</param>
        /// <param name="payeePreferred">IMMEDIATE_PAYMENT_REQUIRED or UNRESTRICTED.</param>
        /// <param name="payerID">The unique ID associated with the payer..</param>
        /// <param name="payerSelected">PAYPAL or PAYPAL_CREDIT.</param>
        /// <param name="recurringDetailReference">This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token..</param>
        /// <param name="storedPaymentMethodId">This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token..</param>
        /// <param name="subtype">The type of flow to initiate..</param>
        /// <param name="type">**paypal** (required) (default to TypeEnum.Paypal).</param>
        public PayPalDetails(string checkoutAttemptId = default(string), string orderID = default(string), string payeePreferred = default(string), string payerID = default(string), string payerSelected = default(string), string recurringDetailReference = default(string), string storedPaymentMethodId = default(string), SubtypeEnum? subtype = default(SubtypeEnum?), TypeEnum type = TypeEnum.Paypal)
        {
            this.Type = type;
            this.CheckoutAttemptId = checkoutAttemptId;
            this.OrderID = orderID;
            this.PayeePreferred = payeePreferred;
            this.PayerID = payerID;
            this.PayerSelected = payerSelected;
            this.RecurringDetailReference = recurringDetailReference;
            this.StoredPaymentMethodId = storedPaymentMethodId;
            this.Subtype = subtype;
        }

        /// <summary>
        /// The checkout attempt identifier.
        /// </summary>
        /// <value>The checkout attempt identifier.</value>
        [DataMember(Name = "checkoutAttemptId", EmitDefaultValue = false)]
        public string CheckoutAttemptId { get; set; }

        /// <summary>
        /// The unique ID associated with the order.
        /// </summary>
        /// <value>The unique ID associated with the order.</value>
        [DataMember(Name = "orderID", EmitDefaultValue = false)]
        public string OrderID { get; set; }

        /// <summary>
        /// IMMEDIATE_PAYMENT_REQUIRED or UNRESTRICTED
        /// </summary>
        /// <value>IMMEDIATE_PAYMENT_REQUIRED or UNRESTRICTED</value>
        [DataMember(Name = "payeePreferred", EmitDefaultValue = false)]
        public string PayeePreferred { get; set; }

        /// <summary>
        /// The unique ID associated with the payer.
        /// </summary>
        /// <value>The unique ID associated with the payer.</value>
        [DataMember(Name = "payerID", EmitDefaultValue = false)]
        public string PayerID { get; set; }

        /// <summary>
        /// PAYPAL or PAYPAL_CREDIT
        /// </summary>
        /// <value>PAYPAL or PAYPAL_CREDIT</value>
        [DataMember(Name = "payerSelected", EmitDefaultValue = false)]
        public string PayerSelected { get; set; }

        /// <summary>
        /// This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.
        /// </summary>
        /// <value>This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</value>
        [DataMember(Name = "recurringDetailReference", EmitDefaultValue = false)]
        [Obsolete]
        public string RecurringDetailReference { get; set; }

        /// <summary>
        /// This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.
        /// </summary>
        /// <value>This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</value>
        [DataMember(Name = "storedPaymentMethodId", EmitDefaultValue = false)]
        public string StoredPaymentMethodId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayPalDetails {\n");
            sb.Append("  CheckoutAttemptId: ").Append(CheckoutAttemptId).Append("\n");
            sb.Append("  OrderID: ").Append(OrderID).Append("\n");
            sb.Append("  PayeePreferred: ").Append(PayeePreferred).Append("\n");
            sb.Append("  PayerID: ").Append(PayerID).Append("\n");
            sb.Append("  PayerSelected: ").Append(PayerSelected).Append("\n");
            sb.Append("  RecurringDetailReference: ").Append(RecurringDetailReference).Append("\n");
            sb.Append("  StoredPaymentMethodId: ").Append(StoredPaymentMethodId).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayPalDetails);
        }

        /// <summary>
        /// Returns true if PayPalDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PayPalDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayPalDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CheckoutAttemptId == input.CheckoutAttemptId ||
                    (this.CheckoutAttemptId != null &&
                    this.CheckoutAttemptId.Equals(input.CheckoutAttemptId))
                ) && 
                (
                    this.OrderID == input.OrderID ||
                    (this.OrderID != null &&
                    this.OrderID.Equals(input.OrderID))
                ) && 
                (
                    this.PayeePreferred == input.PayeePreferred ||
                    (this.PayeePreferred != null &&
                    this.PayeePreferred.Equals(input.PayeePreferred))
                ) && 
                (
                    this.PayerID == input.PayerID ||
                    (this.PayerID != null &&
                    this.PayerID.Equals(input.PayerID))
                ) && 
                (
                    this.PayerSelected == input.PayerSelected ||
                    (this.PayerSelected != null &&
                    this.PayerSelected.Equals(input.PayerSelected))
                ) && 
                (
                    this.RecurringDetailReference == input.RecurringDetailReference ||
                    (this.RecurringDetailReference != null &&
                    this.RecurringDetailReference.Equals(input.RecurringDetailReference))
                ) && 
                (
                    this.StoredPaymentMethodId == input.StoredPaymentMethodId ||
                    (this.StoredPaymentMethodId != null &&
                    this.StoredPaymentMethodId.Equals(input.StoredPaymentMethodId))
                ) && 
                (
                    this.Subtype == input.Subtype ||
                    this.Subtype.Equals(input.Subtype)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CheckoutAttemptId != null)
                {
                    hashCode = (hashCode * 59) + this.CheckoutAttemptId.GetHashCode();
                }
                if (this.OrderID != null)
                {
                    hashCode = (hashCode * 59) + this.OrderID.GetHashCode();
                }
                if (this.PayeePreferred != null)
                {
                    hashCode = (hashCode * 59) + this.PayeePreferred.GetHashCode();
                }
                if (this.PayerID != null)
                {
                    hashCode = (hashCode * 59) + this.PayerID.GetHashCode();
                }
                if (this.PayerSelected != null)
                {
                    hashCode = (hashCode * 59) + this.PayerSelected.GetHashCode();
                }
                if (this.RecurringDetailReference != null)
                {
                    hashCode = (hashCode * 59) + this.RecurringDetailReference.GetHashCode();
                }
                if (this.StoredPaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.StoredPaymentMethodId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Subtype.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StoredPaymentMethodId (string) maxLength
            if (this.StoredPaymentMethodId != null && this.StoredPaymentMethodId.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StoredPaymentMethodId, length must be less than 64.", new [] { "StoredPaymentMethodId" });
            }

            yield break;
        }
    }

}
