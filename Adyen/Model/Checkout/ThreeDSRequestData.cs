// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ThreeDSRequestData
    /// </summary>
    public partial class ThreeDSRequestData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDSRequestData" /> class.
        /// </summary>
        /// <param name="challengeWindowSize">Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen</param>
        /// <param name="dataOnly">Flag for data only flow.</param>
        /// <param name="nativeThreeDS">Indicates if [native 3D Secure authentication](https://docs.adyen.com/online-payments/3d-secure/native-3ds2) should be used when available.  Possible values: * **preferred**: Use native 3D Secure authentication when available. * **disabled**: Only use the redirect 3D Secure authentication flow.</param>
        /// <param name="threeDSVersion">The version of 3D Secure to use.  Possible values:  * **2.1.0** * **2.2.0**</param>
        [JsonConstructor]
        public ThreeDSRequestData(Option<ChallengeWindowSizeEnum?> challengeWindowSize = default, Option<DataOnlyEnum?> dataOnly = default, Option<NativeThreeDSEnum?> nativeThreeDS = default, Option<ThreeDSVersionEnum?> threeDSVersion = default)
        {
            ChallengeWindowSizeOption = challengeWindowSize;
            DataOnlyOption = dataOnly;
            NativeThreeDSOption = nativeThreeDS;
            ThreeDSVersionOption = threeDSVersion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen
        /// </summary>
        /// <value>Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen</value>
        public enum ChallengeWindowSizeEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            _05 = 5
        }

        /// <summary>
        /// Returns a <see cref="ChallengeWindowSizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ChallengeWindowSizeEnum ChallengeWindowSizeEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ChallengeWindowSizeEnum._01;

            if (value.Equals("02"))
                return ChallengeWindowSizeEnum._02;

            if (value.Equals("03"))
                return ChallengeWindowSizeEnum._03;

            if (value.Equals("04"))
                return ChallengeWindowSizeEnum._04;

            if (value.Equals("05"))
                return ChallengeWindowSizeEnum._05;

            throw new NotImplementedException($"Could not convert value to type ChallengeWindowSizeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ChallengeWindowSizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChallengeWindowSizeEnum? ChallengeWindowSizeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ChallengeWindowSizeEnum._01;

            if (value.Equals("02"))
                return ChallengeWindowSizeEnum._02;

            if (value.Equals("03"))
                return ChallengeWindowSizeEnum._03;

            if (value.Equals("04"))
                return ChallengeWindowSizeEnum._04;

            if (value.Equals("05"))
                return ChallengeWindowSizeEnum._05;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChallengeWindowSizeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ChallengeWindowSizeEnumToJsonValue(ChallengeWindowSizeEnum? value)
        {
            if (value == ChallengeWindowSizeEnum._01)
                return "01";

            if (value == ChallengeWindowSizeEnum._02)
                return "02";

            if (value == ChallengeWindowSizeEnum._03)
                return "03";

            if (value == ChallengeWindowSizeEnum._04)
                return "04";

            if (value == ChallengeWindowSizeEnum._05)
                return "05";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ChallengeWindowSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChallengeWindowSizeEnum?> ChallengeWindowSizeOption { get; private set; }

        /// <summary>
        /// Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen
        /// </summary>
        /// <value>Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen</value>
        [JsonPropertyName("challengeWindowSize")]
        public ChallengeWindowSizeEnum? ChallengeWindowSize { get { return this.ChallengeWindowSizeOption; } set { this.ChallengeWindowSizeOption = new Option<ChallengeWindowSizeEnum?>(value); } }

        /// <summary>
        /// Flag for data only flow.
        /// </summary>
        /// <value>Flag for data only flow.</value>
        public enum DataOnlyEnum
        {
            /// <summary>
            /// Enum False for value: false
            /// </summary>
            False = 1,

            /// <summary>
            /// Enum True for value: true
            /// </summary>
            True = 2
        }

        /// <summary>
        /// Returns a <see cref="DataOnlyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DataOnlyEnum DataOnlyEnumFromString(string value)
        {
            if (value.Equals("false"))
                return DataOnlyEnum.False;

            if (value.Equals("true"))
                return DataOnlyEnum.True;

            throw new NotImplementedException($"Could not convert value to type DataOnlyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DataOnlyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DataOnlyEnum? DataOnlyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("false"))
                return DataOnlyEnum.False;

            if (value.Equals("true"))
                return DataOnlyEnum.True;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DataOnlyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DataOnlyEnumToJsonValue(DataOnlyEnum? value)
        {
            if (value == DataOnlyEnum.False)
                return "false";

            if (value == DataOnlyEnum.True)
                return "true";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of DataOnly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DataOnlyEnum?> DataOnlyOption { get; private set; }

        /// <summary>
        /// Flag for data only flow.
        /// </summary>
        /// <value>Flag for data only flow.</value>
        [JsonPropertyName("dataOnly")]
        public DataOnlyEnum? DataOnly { get { return this.DataOnlyOption; } set { this.DataOnlyOption = new Option<DataOnlyEnum?>(value); } }

        /// <summary>
        /// Indicates if [native 3D Secure authentication](https://docs.adyen.com/online-payments/3d-secure/native-3ds2) should be used when available.  Possible values: * **preferred**: Use native 3D Secure authentication when available. * **disabled**: Only use the redirect 3D Secure authentication flow.
        /// </summary>
        /// <value>Indicates if [native 3D Secure authentication](https://docs.adyen.com/online-payments/3d-secure/native-3ds2) should be used when available.  Possible values: * **preferred**: Use native 3D Secure authentication when available. * **disabled**: Only use the redirect 3D Secure authentication flow.</value>
        public enum NativeThreeDSEnum
        {
            /// <summary>
            /// Enum Preferred for value: preferred
            /// </summary>
            Preferred = 1,

            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            Disabled = 2
        }

        /// <summary>
        /// Returns a <see cref="NativeThreeDSEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static NativeThreeDSEnum NativeThreeDSEnumFromString(string value)
        {
            if (value.Equals("preferred"))
                return NativeThreeDSEnum.Preferred;

            if (value.Equals("disabled"))
                return NativeThreeDSEnum.Disabled;

            throw new NotImplementedException($"Could not convert value to type NativeThreeDSEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="NativeThreeDSEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NativeThreeDSEnum? NativeThreeDSEnumFromStringOrDefault(string value)
        {
            if (value.Equals("preferred"))
                return NativeThreeDSEnum.Preferred;

            if (value.Equals("disabled"))
                return NativeThreeDSEnum.Disabled;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="NativeThreeDSEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string NativeThreeDSEnumToJsonValue(NativeThreeDSEnum? value)
        {
            if (value == NativeThreeDSEnum.Preferred)
                return "preferred";

            if (value == NativeThreeDSEnum.Disabled)
                return "disabled";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of NativeThreeDS
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NativeThreeDSEnum?> NativeThreeDSOption { get; private set; }

        /// <summary>
        /// Indicates if [native 3D Secure authentication](https://docs.adyen.com/online-payments/3d-secure/native-3ds2) should be used when available.  Possible values: * **preferred**: Use native 3D Secure authentication when available. * **disabled**: Only use the redirect 3D Secure authentication flow.
        /// </summary>
        /// <value>Indicates if [native 3D Secure authentication](https://docs.adyen.com/online-payments/3d-secure/native-3ds2) should be used when available.  Possible values: * **preferred**: Use native 3D Secure authentication when available. * **disabled**: Only use the redirect 3D Secure authentication flow.</value>
        [JsonPropertyName("nativeThreeDS")]
        public NativeThreeDSEnum? NativeThreeDS { get { return this.NativeThreeDSOption; } set { this.NativeThreeDSOption = new Option<NativeThreeDSEnum?>(value); } }

        /// <summary>
        /// The version of 3D Secure to use.  Possible values:  * **2.1.0** * **2.2.0**
        /// </summary>
        /// <value>The version of 3D Secure to use.  Possible values:  * **2.1.0** * **2.2.0**</value>
        public enum ThreeDSVersionEnum
        {
            /// <summary>
            /// Enum _210 for value: 2.1.0
            /// </summary>
            _210 = 1,

            /// <summary>
            /// Enum _220 for value: 2.2.0
            /// </summary>
            _220 = 2
        }

        /// <summary>
        /// Returns a <see cref="ThreeDSVersionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ThreeDSVersionEnum ThreeDSVersionEnumFromString(string value)
        {
            if (value.Equals("2.1.0"))
                return ThreeDSVersionEnum._210;

            if (value.Equals("2.2.0"))
                return ThreeDSVersionEnum._220;

            throw new NotImplementedException($"Could not convert value to type ThreeDSVersionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ThreeDSVersionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThreeDSVersionEnum? ThreeDSVersionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("2.1.0"))
                return ThreeDSVersionEnum._210;

            if (value.Equals("2.2.0"))
                return ThreeDSVersionEnum._220;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ThreeDSVersionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ThreeDSVersionEnumToJsonValue(ThreeDSVersionEnum? value)
        {
            if (value == ThreeDSVersionEnum._210)
                return "2.1.0";

            if (value == ThreeDSVersionEnum._220)
                return "2.2.0";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ThreeDSVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDSVersionEnum?> ThreeDSVersionOption { get; private set; }

        /// <summary>
        /// The version of 3D Secure to use.  Possible values:  * **2.1.0** * **2.2.0**
        /// </summary>
        /// <value>The version of 3D Secure to use.  Possible values:  * **2.1.0** * **2.2.0**</value>
        [JsonPropertyName("threeDSVersion")]
        public ThreeDSVersionEnum? ThreeDSVersion { get { return this.ThreeDSVersionOption; } set { this.ThreeDSVersionOption = new Option<ThreeDSVersionEnum?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDSRequestData {\n");
            sb.Append("  ChallengeWindowSize: ").Append(ChallengeWindowSize).Append("\n");
            sb.Append("  DataOnly: ").Append(DataOnly).Append("\n");
            sb.Append("  NativeThreeDS: ").Append(NativeThreeDS).Append("\n");
            sb.Append("  ThreeDSVersion: ").Append(ThreeDSVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ThreeDSRequestData" />
    /// </summary>
    public class ThreeDSRequestDataJsonConverter : JsonConverter<ThreeDSRequestData>
    {
        /// <summary>
        /// Deserializes json to <see cref="ThreeDSRequestData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ThreeDSRequestData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ThreeDSRequestData.ChallengeWindowSizeEnum?> challengeWindowSize = default;
            Option<ThreeDSRequestData.DataOnlyEnum?> dataOnly = default;
            Option<ThreeDSRequestData.NativeThreeDSEnum?> nativeThreeDS = default;
            Option<ThreeDSRequestData.ThreeDSVersionEnum?> threeDSVersion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "challengeWindowSize":
                            string challengeWindowSizeRawValue = utf8JsonReader.GetString();
                            if (challengeWindowSizeRawValue != null)
                                challengeWindowSize = new Option<ThreeDSRequestData.ChallengeWindowSizeEnum?>(ThreeDSRequestData.ChallengeWindowSizeEnumFromStringOrDefault(challengeWindowSizeRawValue));
                            break;
                        case "dataOnly":
                            string dataOnlyRawValue = utf8JsonReader.GetString();
                            if (dataOnlyRawValue != null)
                                dataOnly = new Option<ThreeDSRequestData.DataOnlyEnum?>(ThreeDSRequestData.DataOnlyEnumFromStringOrDefault(dataOnlyRawValue));
                            break;
                        case "nativeThreeDS":
                            string nativeThreeDSRawValue = utf8JsonReader.GetString();
                            if (nativeThreeDSRawValue != null)
                                nativeThreeDS = new Option<ThreeDSRequestData.NativeThreeDSEnum?>(ThreeDSRequestData.NativeThreeDSEnumFromStringOrDefault(nativeThreeDSRawValue));
                            break;
                        case "threeDSVersion":
                            string threeDSVersionRawValue = utf8JsonReader.GetString();
                            if (threeDSVersionRawValue != null)
                                threeDSVersion = new Option<ThreeDSRequestData.ThreeDSVersionEnum?>(ThreeDSRequestData.ThreeDSVersionEnumFromStringOrDefault(threeDSVersionRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (challengeWindowSize.IsSet && challengeWindowSize.Value == null)
                throw new ArgumentNullException(nameof(challengeWindowSize), "Property is not nullable for class ThreeDSRequestData.");

            if (dataOnly.IsSet && dataOnly.Value == null)
                throw new ArgumentNullException(nameof(dataOnly), "Property is not nullable for class ThreeDSRequestData.");

            if (nativeThreeDS.IsSet && nativeThreeDS.Value == null)
                throw new ArgumentNullException(nameof(nativeThreeDS), "Property is not nullable for class ThreeDSRequestData.");

            if (threeDSVersion.IsSet && threeDSVersion.Value == null)
                throw new ArgumentNullException(nameof(threeDSVersion), "Property is not nullable for class ThreeDSRequestData.");

            return new ThreeDSRequestData(challengeWindowSize, dataOnly, nativeThreeDS, threeDSVersion);
        }

        /// <summary>
        /// Serializes a <see cref="ThreeDSRequestData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="threeDSRequestData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ThreeDSRequestData threeDSRequestData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, threeDSRequestData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ThreeDSRequestData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="threeDSRequestData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ThreeDSRequestData threeDSRequestData, JsonSerializerOptions jsonSerializerOptions)
        {
            var challengeWindowSizeRawValue = ThreeDSRequestData.ChallengeWindowSizeEnumToJsonValue(threeDSRequestData.ChallengeWindowSizeOption.Value.Value);
            writer.WriteString("challengeWindowSize", challengeWindowSizeRawValue);
            var dataOnlyRawValue = ThreeDSRequestData.DataOnlyEnumToJsonValue(threeDSRequestData.DataOnlyOption.Value.Value);
            writer.WriteString("dataOnly", dataOnlyRawValue);
            var nativeThreeDSRawValue = ThreeDSRequestData.NativeThreeDSEnumToJsonValue(threeDSRequestData.NativeThreeDSOption.Value.Value);
            writer.WriteString("nativeThreeDS", nativeThreeDSRawValue);
            var threeDSVersionRawValue = ThreeDSRequestData.ThreeDSVersionEnumToJsonValue(threeDSRequestData.ThreeDSVersionOption.Value.Value);
            writer.WriteString("threeDSVersion", threeDSVersionRawValue);
        }
    }
}
