// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataRatepay
    /// </summary>
    public partial class AdditionalDataRatepay : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataRatepay" /> class.
        /// </summary>
        /// <param name="ratepayInstallmentAmount">Amount the customer has to pay each month.</param>
        /// <param name="ratepayInterestRate">Interest rate of this installment.</param>
        /// <param name="ratepayLastInstallmentAmount">Amount of the last installment.</param>
        /// <param name="ratepayPaymentFirstday">Calendar day of the first payment.</param>
        /// <param name="ratepaydataDeliveryDate">Date the merchant delivered the goods to the customer.</param>
        /// <param name="ratepaydataDueDate">Date by which the customer must settle the payment.</param>
        /// <param name="ratepaydataInvoiceDate">Invoice date, defined by the merchant. If not included, the invoice date is set to the delivery date.</param>
        /// <param name="ratepaydataInvoiceId">Identification name or number for the invoice, defined by the merchant.</param>
        [JsonConstructor]
        public AdditionalDataRatepay(Option<string> ratepayInstallmentAmount = default, Option<string> ratepayInterestRate = default, Option<string> ratepayLastInstallmentAmount = default, Option<string> ratepayPaymentFirstday = default, Option<string> ratepaydataDeliveryDate = default, Option<string> ratepaydataDueDate = default, Option<string> ratepaydataInvoiceDate = default, Option<string> ratepaydataInvoiceId = default)
        {
            RatepayInstallmentAmountOption = ratepayInstallmentAmount;
            RatepayInterestRateOption = ratepayInterestRate;
            RatepayLastInstallmentAmountOption = ratepayLastInstallmentAmount;
            RatepayPaymentFirstdayOption = ratepayPaymentFirstday;
            RatepaydataDeliveryDateOption = ratepaydataDeliveryDate;
            RatepaydataDueDateOption = ratepaydataDueDate;
            RatepaydataInvoiceDateOption = ratepaydataInvoiceDate;
            RatepaydataInvoiceIdOption = ratepaydataInvoiceId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of RatepayInstallmentAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RatepayInstallmentAmountOption { get; private set; }

        /// <summary>
        /// Amount the customer has to pay each month.
        /// </summary>
        /// <value>Amount the customer has to pay each month.</value>
        [JsonPropertyName("ratepay.installmentAmount")]
        public string RatepayInstallmentAmount { get { return this.RatepayInstallmentAmountOption; } set { this.RatepayInstallmentAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RatepayInterestRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RatepayInterestRateOption { get; private set; }

        /// <summary>
        /// Interest rate of this installment.
        /// </summary>
        /// <value>Interest rate of this installment.</value>
        [JsonPropertyName("ratepay.interestRate")]
        public string RatepayInterestRate { get { return this.RatepayInterestRateOption; } set { this.RatepayInterestRateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RatepayLastInstallmentAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RatepayLastInstallmentAmountOption { get; private set; }

        /// <summary>
        /// Amount of the last installment.
        /// </summary>
        /// <value>Amount of the last installment.</value>
        [JsonPropertyName("ratepay.lastInstallmentAmount")]
        public string RatepayLastInstallmentAmount { get { return this.RatepayLastInstallmentAmountOption; } set { this.RatepayLastInstallmentAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RatepayPaymentFirstday
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RatepayPaymentFirstdayOption { get; private set; }

        /// <summary>
        /// Calendar day of the first payment.
        /// </summary>
        /// <value>Calendar day of the first payment.</value>
        [JsonPropertyName("ratepay.paymentFirstday")]
        public string RatepayPaymentFirstday { get { return this.RatepayPaymentFirstdayOption; } set { this.RatepayPaymentFirstdayOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RatepaydataDeliveryDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RatepaydataDeliveryDateOption { get; private set; }

        /// <summary>
        /// Date the merchant delivered the goods to the customer.
        /// </summary>
        /// <value>Date the merchant delivered the goods to the customer.</value>
        [JsonPropertyName("ratepaydata.deliveryDate")]
        public string RatepaydataDeliveryDate { get { return this.RatepaydataDeliveryDateOption; } set { this.RatepaydataDeliveryDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RatepaydataDueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RatepaydataDueDateOption { get; private set; }

        /// <summary>
        /// Date by which the customer must settle the payment.
        /// </summary>
        /// <value>Date by which the customer must settle the payment.</value>
        [JsonPropertyName("ratepaydata.dueDate")]
        public string RatepaydataDueDate { get { return this.RatepaydataDueDateOption; } set { this.RatepaydataDueDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RatepaydataInvoiceDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RatepaydataInvoiceDateOption { get; private set; }

        /// <summary>
        /// Invoice date, defined by the merchant. If not included, the invoice date is set to the delivery date.
        /// </summary>
        /// <value>Invoice date, defined by the merchant. If not included, the invoice date is set to the delivery date.</value>
        [JsonPropertyName("ratepaydata.invoiceDate")]
        public string RatepaydataInvoiceDate { get { return this.RatepaydataInvoiceDateOption; } set { this.RatepaydataInvoiceDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RatepaydataInvoiceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RatepaydataInvoiceIdOption { get; private set; }

        /// <summary>
        /// Identification name or number for the invoice, defined by the merchant.
        /// </summary>
        /// <value>Identification name or number for the invoice, defined by the merchant.</value>
        [JsonPropertyName("ratepaydata.invoiceId")]
        public string RatepaydataInvoiceId { get { return this.RatepaydataInvoiceIdOption; } set { this.RatepaydataInvoiceIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataRatepay {\n");
            sb.Append("  RatepayInstallmentAmount: ").Append(RatepayInstallmentAmount).Append("\n");
            sb.Append("  RatepayInterestRate: ").Append(RatepayInterestRate).Append("\n");
            sb.Append("  RatepayLastInstallmentAmount: ").Append(RatepayLastInstallmentAmount).Append("\n");
            sb.Append("  RatepayPaymentFirstday: ").Append(RatepayPaymentFirstday).Append("\n");
            sb.Append("  RatepaydataDeliveryDate: ").Append(RatepaydataDeliveryDate).Append("\n");
            sb.Append("  RatepaydataDueDate: ").Append(RatepaydataDueDate).Append("\n");
            sb.Append("  RatepaydataInvoiceDate: ").Append(RatepaydataInvoiceDate).Append("\n");
            sb.Append("  RatepaydataInvoiceId: ").Append(RatepaydataInvoiceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalDataRatepay" />
    /// </summary>
    public class AdditionalDataRatepayJsonConverter : JsonConverter<AdditionalDataRatepay>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalDataRatepay" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalDataRatepay Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> ratepayInstallmentAmount = default;
            Option<string> ratepayInterestRate = default;
            Option<string> ratepayLastInstallmentAmount = default;
            Option<string> ratepayPaymentFirstday = default;
            Option<string> ratepaydataDeliveryDate = default;
            Option<string> ratepaydataDueDate = default;
            Option<string> ratepaydataInvoiceDate = default;
            Option<string> ratepaydataInvoiceId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ratepay.installmentAmount":
                            ratepayInstallmentAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ratepay.interestRate":
                            ratepayInterestRate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ratepay.lastInstallmentAmount":
                            ratepayLastInstallmentAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ratepay.paymentFirstday":
                            ratepayPaymentFirstday = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ratepaydata.deliveryDate":
                            ratepaydataDeliveryDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ratepaydata.dueDate":
                            ratepaydataDueDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ratepaydata.invoiceDate":
                            ratepaydataInvoiceDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ratepaydata.invoiceId":
                            ratepaydataInvoiceId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (ratepayInstallmentAmount.IsSet && ratepayInstallmentAmount.Value == null)
                throw new ArgumentNullException(nameof(ratepayInstallmentAmount), "Property is not nullable for class AdditionalDataRatepay.");

            if (ratepayInterestRate.IsSet && ratepayInterestRate.Value == null)
                throw new ArgumentNullException(nameof(ratepayInterestRate), "Property is not nullable for class AdditionalDataRatepay.");

            if (ratepayLastInstallmentAmount.IsSet && ratepayLastInstallmentAmount.Value == null)
                throw new ArgumentNullException(nameof(ratepayLastInstallmentAmount), "Property is not nullable for class AdditionalDataRatepay.");

            if (ratepayPaymentFirstday.IsSet && ratepayPaymentFirstday.Value == null)
                throw new ArgumentNullException(nameof(ratepayPaymentFirstday), "Property is not nullable for class AdditionalDataRatepay.");

            if (ratepaydataDeliveryDate.IsSet && ratepaydataDeliveryDate.Value == null)
                throw new ArgumentNullException(nameof(ratepaydataDeliveryDate), "Property is not nullable for class AdditionalDataRatepay.");

            if (ratepaydataDueDate.IsSet && ratepaydataDueDate.Value == null)
                throw new ArgumentNullException(nameof(ratepaydataDueDate), "Property is not nullable for class AdditionalDataRatepay.");

            if (ratepaydataInvoiceDate.IsSet && ratepaydataInvoiceDate.Value == null)
                throw new ArgumentNullException(nameof(ratepaydataInvoiceDate), "Property is not nullable for class AdditionalDataRatepay.");

            if (ratepaydataInvoiceId.IsSet && ratepaydataInvoiceId.Value == null)
                throw new ArgumentNullException(nameof(ratepaydataInvoiceId), "Property is not nullable for class AdditionalDataRatepay.");

            return new AdditionalDataRatepay(ratepayInstallmentAmount, ratepayInterestRate, ratepayLastInstallmentAmount, ratepayPaymentFirstday, ratepaydataDeliveryDate, ratepaydataDueDate, ratepaydataInvoiceDate, ratepaydataInvoiceId);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalDataRatepay" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataRatepay"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalDataRatepay additionalDataRatepay, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalDataRatepay, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalDataRatepay" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataRatepay"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalDataRatepay additionalDataRatepay, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalDataRatepay.RatepayInstallmentAmountOption.IsSet && additionalDataRatepay.RatepayInstallmentAmount == null)
                throw new ArgumentNullException(nameof(additionalDataRatepay.RatepayInstallmentAmount), "Property is required for class AdditionalDataRatepay.");

            if (additionalDataRatepay.RatepayInterestRateOption.IsSet && additionalDataRatepay.RatepayInterestRate == null)
                throw new ArgumentNullException(nameof(additionalDataRatepay.RatepayInterestRate), "Property is required for class AdditionalDataRatepay.");

            if (additionalDataRatepay.RatepayLastInstallmentAmountOption.IsSet && additionalDataRatepay.RatepayLastInstallmentAmount == null)
                throw new ArgumentNullException(nameof(additionalDataRatepay.RatepayLastInstallmentAmount), "Property is required for class AdditionalDataRatepay.");

            if (additionalDataRatepay.RatepayPaymentFirstdayOption.IsSet && additionalDataRatepay.RatepayPaymentFirstday == null)
                throw new ArgumentNullException(nameof(additionalDataRatepay.RatepayPaymentFirstday), "Property is required for class AdditionalDataRatepay.");

            if (additionalDataRatepay.RatepaydataDeliveryDateOption.IsSet && additionalDataRatepay.RatepaydataDeliveryDate == null)
                throw new ArgumentNullException(nameof(additionalDataRatepay.RatepaydataDeliveryDate), "Property is required for class AdditionalDataRatepay.");

            if (additionalDataRatepay.RatepaydataDueDateOption.IsSet && additionalDataRatepay.RatepaydataDueDate == null)
                throw new ArgumentNullException(nameof(additionalDataRatepay.RatepaydataDueDate), "Property is required for class AdditionalDataRatepay.");

            if (additionalDataRatepay.RatepaydataInvoiceDateOption.IsSet && additionalDataRatepay.RatepaydataInvoiceDate == null)
                throw new ArgumentNullException(nameof(additionalDataRatepay.RatepaydataInvoiceDate), "Property is required for class AdditionalDataRatepay.");

            if (additionalDataRatepay.RatepaydataInvoiceIdOption.IsSet && additionalDataRatepay.RatepaydataInvoiceId == null)
                throw new ArgumentNullException(nameof(additionalDataRatepay.RatepaydataInvoiceId), "Property is required for class AdditionalDataRatepay.");

            if (additionalDataRatepay.RatepayInstallmentAmountOption.IsSet)
                writer.WriteString("ratepay.installmentAmount", additionalDataRatepay.RatepayInstallmentAmount);

            if (additionalDataRatepay.RatepayInterestRateOption.IsSet)
                writer.WriteString("ratepay.interestRate", additionalDataRatepay.RatepayInterestRate);

            if (additionalDataRatepay.RatepayLastInstallmentAmountOption.IsSet)
                writer.WriteString("ratepay.lastInstallmentAmount", additionalDataRatepay.RatepayLastInstallmentAmount);

            if (additionalDataRatepay.RatepayPaymentFirstdayOption.IsSet)
                writer.WriteString("ratepay.paymentFirstday", additionalDataRatepay.RatepayPaymentFirstday);

            if (additionalDataRatepay.RatepaydataDeliveryDateOption.IsSet)
                writer.WriteString("ratepaydata.deliveryDate", additionalDataRatepay.RatepaydataDeliveryDate);

            if (additionalDataRatepay.RatepaydataDueDateOption.IsSet)
                writer.WriteString("ratepaydata.dueDate", additionalDataRatepay.RatepaydataDueDate);

            if (additionalDataRatepay.RatepaydataInvoiceDateOption.IsSet)
                writer.WriteString("ratepaydata.invoiceDate", additionalDataRatepay.RatepaydataInvoiceDate);

            if (additionalDataRatepay.RatepaydataInvoiceIdOption.IsSet)
                writer.WriteString("ratepaydata.invoiceId", additionalDataRatepay.RatepaydataInvoiceId);
        }
    }
}
