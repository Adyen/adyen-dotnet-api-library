// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AdditionalDataRiskStandalone
    /// </summary>
    public partial class AdditionalDataRiskStandalone : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataRiskStandalone" /> class.
        /// </summary>
        /// <param name="payPalCountryCode">Shopper&#39;s country of residence in the form of ISO standard 3166 2-character country codes.</param>
        /// <param name="payPalEmailId">Shopper&#39;s email.</param>
        /// <param name="payPalFirstName">Shopper&#39;s first name.</param>
        /// <param name="payPalLastName">Shopper&#39;s last name.</param>
        /// <param name="payPalPayerId">Unique PayPal Customer Account identification number. Character length and limitations: 13 single-byte alphanumeric characters.</param>
        /// <param name="payPalPhone">Shopper&#39;s phone number.</param>
        /// <param name="payPalProtectionEligibility">Allowed values: * **Eligible** — Merchant is protected by PayPal&#39;s Seller Protection Policy for Unauthorized Payments and Item Not Received.  * **PartiallyEligible** — Merchant is protected by PayPal&#39;s Seller Protection Policy for Item Not Received.  * **Ineligible** — Merchant is not protected under the Seller Protection Policy.</param>
        /// <param name="payPalTransactionId">Unique transaction ID of the payment.</param>
        /// <param name="avsResultRaw">Raw AVS result received from the acquirer, where available. Example: D</param>
        /// <param name="bin">The Bank Identification Number of a credit card, which is the first six digits of a card number. Required for [tokenized card request](https://docs.adyen.com/online-payments/tokenization).</param>
        /// <param name="cvcResultRaw">Raw CVC result received from the acquirer, where available. Example: 1</param>
        /// <param name="riskToken">Unique identifier or token for the shopper&#39;s card details.</param>
        /// <param name="threeDAuthenticated">A Boolean value indicating whether 3DS authentication was completed on this payment. Example: true</param>
        /// <param name="threeDOffered">A Boolean value indicating whether 3DS was offered for this payment. Example: true</param>
        /// <param name="tokenDataType">Required for PayPal payments only. The only supported value is: **paypal**.</param>
        [JsonConstructor]
        public AdditionalDataRiskStandalone(Option<string> payPalCountryCode = default, Option<string> payPalEmailId = default, Option<string> payPalFirstName = default, Option<string> payPalLastName = default, Option<string> payPalPayerId = default, Option<string> payPalPhone = default, Option<string> payPalProtectionEligibility = default, Option<string> payPalTransactionId = default, Option<string> avsResultRaw = default, Option<string> bin = default, Option<string> cvcResultRaw = default, Option<string> riskToken = default, Option<string> threeDAuthenticated = default, Option<string> threeDOffered = default, Option<string> tokenDataType = default)
        {
            PayPalCountryCodeOption = payPalCountryCode;
            PayPalEmailIdOption = payPalEmailId;
            PayPalFirstNameOption = payPalFirstName;
            PayPalLastNameOption = payPalLastName;
            PayPalPayerIdOption = payPalPayerId;
            PayPalPhoneOption = payPalPhone;
            PayPalProtectionEligibilityOption = payPalProtectionEligibility;
            PayPalTransactionIdOption = payPalTransactionId;
            AvsResultRawOption = avsResultRaw;
            BinOption = bin;
            CvcResultRawOption = cvcResultRaw;
            RiskTokenOption = riskToken;
            ThreeDAuthenticatedOption = threeDAuthenticated;
            ThreeDOfferedOption = threeDOffered;
            TokenDataTypeOption = tokenDataType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PayPalCountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayPalCountryCodeOption { get; private set; }

        /// <summary>
        /// Shopper&#39;s country of residence in the form of ISO standard 3166 2-character country codes.
        /// </summary>
        /// <value>Shopper&#39;s country of residence in the form of ISO standard 3166 2-character country codes.</value>
        [JsonPropertyName("PayPal.CountryCode")]
        public string PayPalCountryCode { get { return this.PayPalCountryCodeOption; } set { this.PayPalCountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PayPalEmailId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayPalEmailIdOption { get; private set; }

        /// <summary>
        /// Shopper&#39;s email.
        /// </summary>
        /// <value>Shopper&#39;s email.</value>
        [JsonPropertyName("PayPal.EmailId")]
        public string PayPalEmailId { get { return this.PayPalEmailIdOption; } set { this.PayPalEmailIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PayPalFirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayPalFirstNameOption { get; private set; }

        /// <summary>
        /// Shopper&#39;s first name.
        /// </summary>
        /// <value>Shopper&#39;s first name.</value>
        [JsonPropertyName("PayPal.FirstName")]
        public string PayPalFirstName { get { return this.PayPalFirstNameOption; } set { this.PayPalFirstNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PayPalLastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayPalLastNameOption { get; private set; }

        /// <summary>
        /// Shopper&#39;s last name.
        /// </summary>
        /// <value>Shopper&#39;s last name.</value>
        [JsonPropertyName("PayPal.LastName")]
        public string PayPalLastName { get { return this.PayPalLastNameOption; } set { this.PayPalLastNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PayPalPayerId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayPalPayerIdOption { get; private set; }

        /// <summary>
        /// Unique PayPal Customer Account identification number. Character length and limitations: 13 single-byte alphanumeric characters.
        /// </summary>
        /// <value>Unique PayPal Customer Account identification number. Character length and limitations: 13 single-byte alphanumeric characters.</value>
        [JsonPropertyName("PayPal.PayerId")]
        public string PayPalPayerId { get { return this.PayPalPayerIdOption; } set { this.PayPalPayerIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PayPalPhone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayPalPhoneOption { get; private set; }

        /// <summary>
        /// Shopper&#39;s phone number.
        /// </summary>
        /// <value>Shopper&#39;s phone number.</value>
        [JsonPropertyName("PayPal.Phone")]
        public string PayPalPhone { get { return this.PayPalPhoneOption; } set { this.PayPalPhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PayPalProtectionEligibility
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayPalProtectionEligibilityOption { get; private set; }

        /// <summary>
        /// Allowed values: * **Eligible** — Merchant is protected by PayPal&#39;s Seller Protection Policy for Unauthorized Payments and Item Not Received.  * **PartiallyEligible** — Merchant is protected by PayPal&#39;s Seller Protection Policy for Item Not Received.  * **Ineligible** — Merchant is not protected under the Seller Protection Policy.
        /// </summary>
        /// <value>Allowed values: * **Eligible** — Merchant is protected by PayPal&#39;s Seller Protection Policy for Unauthorized Payments and Item Not Received.  * **PartiallyEligible** — Merchant is protected by PayPal&#39;s Seller Protection Policy for Item Not Received.  * **Ineligible** — Merchant is not protected under the Seller Protection Policy.</value>
        [JsonPropertyName("PayPal.ProtectionEligibility")]
        public string PayPalProtectionEligibility { get { return this.PayPalProtectionEligibilityOption; } set { this.PayPalProtectionEligibilityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PayPalTransactionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayPalTransactionIdOption { get; private set; }

        /// <summary>
        /// Unique transaction ID of the payment.
        /// </summary>
        /// <value>Unique transaction ID of the payment.</value>
        [JsonPropertyName("PayPal.TransactionId")]
        public string PayPalTransactionId { get { return this.PayPalTransactionIdOption; } set { this.PayPalTransactionIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AvsResultRaw
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AvsResultRawOption { get; private set; }

        /// <summary>
        /// Raw AVS result received from the acquirer, where available. Example: D
        /// </summary>
        /// <value>Raw AVS result received from the acquirer, where available. Example: D</value>
        [JsonPropertyName("avsResultRaw")]
        public string AvsResultRaw { get { return this.AvsResultRawOption; } set { this.AvsResultRawOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Bin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BinOption { get; private set; }

        /// <summary>
        /// The Bank Identification Number of a credit card, which is the first six digits of a card number. Required for [tokenized card request](https://docs.adyen.com/online-payments/tokenization).
        /// </summary>
        /// <value>The Bank Identification Number of a credit card, which is the first six digits of a card number. Required for [tokenized card request](https://docs.adyen.com/online-payments/tokenization).</value>
        [JsonPropertyName("bin")]
        public string Bin { get { return this.BinOption; } set { this.BinOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CvcResultRaw
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CvcResultRawOption { get; private set; }

        /// <summary>
        /// Raw CVC result received from the acquirer, where available. Example: 1
        /// </summary>
        /// <value>Raw CVC result received from the acquirer, where available. Example: 1</value>
        [JsonPropertyName("cvcResultRaw")]
        public string CvcResultRaw { get { return this.CvcResultRawOption; } set { this.CvcResultRawOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskTokenOption { get; private set; }

        /// <summary>
        /// Unique identifier or token for the shopper&#39;s card details.
        /// </summary>
        /// <value>Unique identifier or token for the shopper&#39;s card details.</value>
        [JsonPropertyName("riskToken")]
        public string RiskToken { get { return this.RiskTokenOption; } set { this.RiskTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDAuthenticated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDAuthenticatedOption { get; private set; }

        /// <summary>
        /// A Boolean value indicating whether 3DS authentication was completed on this payment. Example: true
        /// </summary>
        /// <value>A Boolean value indicating whether 3DS authentication was completed on this payment. Example: true</value>
        [JsonPropertyName("threeDAuthenticated")]
        public string ThreeDAuthenticated { get { return this.ThreeDAuthenticatedOption; } set { this.ThreeDAuthenticatedOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDOffered
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDOfferedOption { get; private set; }

        /// <summary>
        /// A Boolean value indicating whether 3DS was offered for this payment. Example: true
        /// </summary>
        /// <value>A Boolean value indicating whether 3DS was offered for this payment. Example: true</value>
        [JsonPropertyName("threeDOffered")]
        public string ThreeDOffered { get { return this.ThreeDOfferedOption; } set { this.ThreeDOfferedOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TokenDataType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TokenDataTypeOption { get; private set; }

        /// <summary>
        /// Required for PayPal payments only. The only supported value is: **paypal**.
        /// </summary>
        /// <value>Required for PayPal payments only. The only supported value is: **paypal**.</value>
        [JsonPropertyName("tokenDataType")]
        public string TokenDataType { get { return this.TokenDataTypeOption; } set { this.TokenDataTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataRiskStandalone {\n");
            sb.Append("  PayPalCountryCode: ").Append(PayPalCountryCode).Append("\n");
            sb.Append("  PayPalEmailId: ").Append(PayPalEmailId).Append("\n");
            sb.Append("  PayPalFirstName: ").Append(PayPalFirstName).Append("\n");
            sb.Append("  PayPalLastName: ").Append(PayPalLastName).Append("\n");
            sb.Append("  PayPalPayerId: ").Append(PayPalPayerId).Append("\n");
            sb.Append("  PayPalPhone: ").Append(PayPalPhone).Append("\n");
            sb.Append("  PayPalProtectionEligibility: ").Append(PayPalProtectionEligibility).Append("\n");
            sb.Append("  PayPalTransactionId: ").Append(PayPalTransactionId).Append("\n");
            sb.Append("  AvsResultRaw: ").Append(AvsResultRaw).Append("\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  CvcResultRaw: ").Append(CvcResultRaw).Append("\n");
            sb.Append("  RiskToken: ").Append(RiskToken).Append("\n");
            sb.Append("  ThreeDAuthenticated: ").Append(ThreeDAuthenticated).Append("\n");
            sb.Append("  ThreeDOffered: ").Append(ThreeDOffered).Append("\n");
            sb.Append("  TokenDataType: ").Append(TokenDataType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalDataRiskStandalone" />
    /// </summary>
    public class AdditionalDataRiskStandaloneJsonConverter : JsonConverter<AdditionalDataRiskStandalone>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalDataRiskStandalone" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalDataRiskStandalone Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> payPalCountryCode = default;
            Option<string> payPalEmailId = default;
            Option<string> payPalFirstName = default;
            Option<string> payPalLastName = default;
            Option<string> payPalPayerId = default;
            Option<string> payPalPhone = default;
            Option<string> payPalProtectionEligibility = default;
            Option<string> payPalTransactionId = default;
            Option<string> avsResultRaw = default;
            Option<string> bin = default;
            Option<string> cvcResultRaw = default;
            Option<string> riskToken = default;
            Option<string> threeDAuthenticated = default;
            Option<string> threeDOffered = default;
            Option<string> tokenDataType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "PayPal.CountryCode":
                            payPalCountryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "PayPal.EmailId":
                            payPalEmailId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "PayPal.FirstName":
                            payPalFirstName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "PayPal.LastName":
                            payPalLastName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "PayPal.PayerId":
                            payPalPayerId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "PayPal.Phone":
                            payPalPhone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "PayPal.ProtectionEligibility":
                            payPalProtectionEligibility = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "PayPal.TransactionId":
                            payPalTransactionId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "avsResultRaw":
                            avsResultRaw = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bin":
                            bin = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cvcResultRaw":
                            cvcResultRaw = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskToken":
                            riskToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDAuthenticated":
                            threeDAuthenticated = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDOffered":
                            threeDOffered = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tokenDataType":
                            tokenDataType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (payPalCountryCode.IsSet && payPalCountryCode.Value == null)
                throw new ArgumentNullException(nameof(payPalCountryCode), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (payPalEmailId.IsSet && payPalEmailId.Value == null)
                throw new ArgumentNullException(nameof(payPalEmailId), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (payPalFirstName.IsSet && payPalFirstName.Value == null)
                throw new ArgumentNullException(nameof(payPalFirstName), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (payPalLastName.IsSet && payPalLastName.Value == null)
                throw new ArgumentNullException(nameof(payPalLastName), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (payPalPayerId.IsSet && payPalPayerId.Value == null)
                throw new ArgumentNullException(nameof(payPalPayerId), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (payPalPhone.IsSet && payPalPhone.Value == null)
                throw new ArgumentNullException(nameof(payPalPhone), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (payPalProtectionEligibility.IsSet && payPalProtectionEligibility.Value == null)
                throw new ArgumentNullException(nameof(payPalProtectionEligibility), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (payPalTransactionId.IsSet && payPalTransactionId.Value == null)
                throw new ArgumentNullException(nameof(payPalTransactionId), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (avsResultRaw.IsSet && avsResultRaw.Value == null)
                throw new ArgumentNullException(nameof(avsResultRaw), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (bin.IsSet && bin.Value == null)
                throw new ArgumentNullException(nameof(bin), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (cvcResultRaw.IsSet && cvcResultRaw.Value == null)
                throw new ArgumentNullException(nameof(cvcResultRaw), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (riskToken.IsSet && riskToken.Value == null)
                throw new ArgumentNullException(nameof(riskToken), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (threeDAuthenticated.IsSet && threeDAuthenticated.Value == null)
                throw new ArgumentNullException(nameof(threeDAuthenticated), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (threeDOffered.IsSet && threeDOffered.Value == null)
                throw new ArgumentNullException(nameof(threeDOffered), "Property is not nullable for class AdditionalDataRiskStandalone.");

            if (tokenDataType.IsSet && tokenDataType.Value == null)
                throw new ArgumentNullException(nameof(tokenDataType), "Property is not nullable for class AdditionalDataRiskStandalone.");

            return new AdditionalDataRiskStandalone(payPalCountryCode, payPalEmailId, payPalFirstName, payPalLastName, payPalPayerId, payPalPhone, payPalProtectionEligibility, payPalTransactionId, avsResultRaw, bin, cvcResultRaw, riskToken, threeDAuthenticated, threeDOffered, tokenDataType);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalDataRiskStandalone" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataRiskStandalone"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalDataRiskStandalone additionalDataRiskStandalone, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalDataRiskStandalone, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalDataRiskStandalone" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalDataRiskStandalone"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalDataRiskStandalone additionalDataRiskStandalone, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalDataRiskStandalone.PayPalCountryCodeOption.IsSet && additionalDataRiskStandalone.PayPalCountryCode == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.PayPalCountryCode), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.PayPalEmailIdOption.IsSet && additionalDataRiskStandalone.PayPalEmailId == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.PayPalEmailId), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.PayPalFirstNameOption.IsSet && additionalDataRiskStandalone.PayPalFirstName == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.PayPalFirstName), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.PayPalLastNameOption.IsSet && additionalDataRiskStandalone.PayPalLastName == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.PayPalLastName), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.PayPalPayerIdOption.IsSet && additionalDataRiskStandalone.PayPalPayerId == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.PayPalPayerId), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.PayPalPhoneOption.IsSet && additionalDataRiskStandalone.PayPalPhone == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.PayPalPhone), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.PayPalProtectionEligibilityOption.IsSet && additionalDataRiskStandalone.PayPalProtectionEligibility == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.PayPalProtectionEligibility), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.PayPalTransactionIdOption.IsSet && additionalDataRiskStandalone.PayPalTransactionId == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.PayPalTransactionId), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.AvsResultRawOption.IsSet && additionalDataRiskStandalone.AvsResultRaw == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.AvsResultRaw), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.BinOption.IsSet && additionalDataRiskStandalone.Bin == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.Bin), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.CvcResultRawOption.IsSet && additionalDataRiskStandalone.CvcResultRaw == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.CvcResultRaw), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.RiskTokenOption.IsSet && additionalDataRiskStandalone.RiskToken == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.RiskToken), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.ThreeDAuthenticatedOption.IsSet && additionalDataRiskStandalone.ThreeDAuthenticated == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.ThreeDAuthenticated), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.ThreeDOfferedOption.IsSet && additionalDataRiskStandalone.ThreeDOffered == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.ThreeDOffered), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.TokenDataTypeOption.IsSet && additionalDataRiskStandalone.TokenDataType == null)
                throw new ArgumentNullException(nameof(additionalDataRiskStandalone.TokenDataType), "Property is required for class AdditionalDataRiskStandalone.");

            if (additionalDataRiskStandalone.PayPalCountryCodeOption.IsSet)
                writer.WriteString("PayPal.CountryCode", additionalDataRiskStandalone.PayPalCountryCode);

            if (additionalDataRiskStandalone.PayPalEmailIdOption.IsSet)
                writer.WriteString("PayPal.EmailId", additionalDataRiskStandalone.PayPalEmailId);

            if (additionalDataRiskStandalone.PayPalFirstNameOption.IsSet)
                writer.WriteString("PayPal.FirstName", additionalDataRiskStandalone.PayPalFirstName);

            if (additionalDataRiskStandalone.PayPalLastNameOption.IsSet)
                writer.WriteString("PayPal.LastName", additionalDataRiskStandalone.PayPalLastName);

            if (additionalDataRiskStandalone.PayPalPayerIdOption.IsSet)
                writer.WriteString("PayPal.PayerId", additionalDataRiskStandalone.PayPalPayerId);

            if (additionalDataRiskStandalone.PayPalPhoneOption.IsSet)
                writer.WriteString("PayPal.Phone", additionalDataRiskStandalone.PayPalPhone);

            if (additionalDataRiskStandalone.PayPalProtectionEligibilityOption.IsSet)
                writer.WriteString("PayPal.ProtectionEligibility", additionalDataRiskStandalone.PayPalProtectionEligibility);

            if (additionalDataRiskStandalone.PayPalTransactionIdOption.IsSet)
                writer.WriteString("PayPal.TransactionId", additionalDataRiskStandalone.PayPalTransactionId);

            if (additionalDataRiskStandalone.AvsResultRawOption.IsSet)
                writer.WriteString("avsResultRaw", additionalDataRiskStandalone.AvsResultRaw);

            if (additionalDataRiskStandalone.BinOption.IsSet)
                writer.WriteString("bin", additionalDataRiskStandalone.Bin);

            if (additionalDataRiskStandalone.CvcResultRawOption.IsSet)
                writer.WriteString("cvcResultRaw", additionalDataRiskStandalone.CvcResultRaw);

            if (additionalDataRiskStandalone.RiskTokenOption.IsSet)
                writer.WriteString("riskToken", additionalDataRiskStandalone.RiskToken);

            if (additionalDataRiskStandalone.ThreeDAuthenticatedOption.IsSet)
                writer.WriteString("threeDAuthenticated", additionalDataRiskStandalone.ThreeDAuthenticated);

            if (additionalDataRiskStandalone.ThreeDOfferedOption.IsSet)
                writer.WriteString("threeDOffered", additionalDataRiskStandalone.ThreeDOffered);

            if (additionalDataRiskStandalone.TokenDataTypeOption.IsSet)
                writer.WriteString("tokenDataType", additionalDataRiskStandalone.TokenDataType);
        }
    }
}
