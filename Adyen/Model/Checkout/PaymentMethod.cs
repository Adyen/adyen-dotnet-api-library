// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PaymentMethod
    /// </summary>
    public partial class PaymentMethod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethod" /> class.
        /// </summary>
        /// <param name="apps">A list of apps for this payment method.</param>
        /// <param name="brand">Brand for the selected gift card. For example: plastix, hmclub.</param>
        /// <param name="brands">List of possible brands. For example: visa, mc.</param>
        /// <param name="varConfiguration">The configuration of the payment method.</param>
        /// <param name="fundingSource">The funding source of the payment method.</param>
        /// <param name="group">group</param>
        /// <param name="inputDetails">All input details to be provided to complete the payment with this payment method.</param>
        /// <param name="issuers">A list of issuers for this payment method.</param>
        /// <param name="name">The displayable name of this payment method.</param>
        /// <param name="type">The unique payment method code.</param>
        [JsonConstructor]
        public PaymentMethod(Option<List<PaymentMethodUPIApps>> apps = default, Option<string> brand = default, Option<List<string>> brands = default, Option<Dictionary<string, string>> varConfiguration = default, Option<FundingSourceEnum?> fundingSource = default, Option<PaymentMethodGroup> group = default, Option<List<InputDetail>> inputDetails = default, Option<List<PaymentMethodIssuer>> issuers = default, Option<string> name = default, Option<string> type = default)
        {
            AppsOption = apps;
            BrandOption = brand;
            BrandsOption = brands;
            VarConfigurationOption = varConfiguration;
            FundingSourceOption = fundingSource;
            GroupOption = group;
            InputDetailsOption = inputDetails;
            IssuersOption = issuers;
            NameOption = name;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The funding source of the payment method.
        /// </summary>
        /// <value>The funding source of the payment method.</value>
        public enum FundingSourceEnum
        {
            /// <summary>
            /// Enum Credit for value: credit
            /// </summary>
            Credit = 1,

            /// <summary>
            /// Enum Debit for value: debit
            /// </summary>
            Debit = 2
        }

        /// <summary>
        /// Returns a <see cref="FundingSourceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FundingSourceEnum FundingSourceEnumFromString(string value)
        {
            if (value.Equals("credit"))
                return FundingSourceEnum.Credit;

            if (value.Equals("debit"))
                return FundingSourceEnum.Debit;

            throw new NotImplementedException($"Could not convert value to type FundingSourceEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FundingSourceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FundingSourceEnum? FundingSourceEnumFromStringOrDefault(string value)
        {
            if (value.Equals("credit"))
                return FundingSourceEnum.Credit;

            if (value.Equals("debit"))
                return FundingSourceEnum.Debit;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FundingSourceEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FundingSourceEnumToJsonValue(FundingSourceEnum? value)
        {
            if (value == FundingSourceEnum.Credit)
                return "credit";

            if (value == FundingSourceEnum.Debit)
                return "debit";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of FundingSource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FundingSourceEnum?> FundingSourceOption { get; private set; }

        /// <summary>
        /// The funding source of the payment method.
        /// </summary>
        /// <value>The funding source of the payment method.</value>
        [JsonPropertyName("fundingSource")]
        public FundingSourceEnum? FundingSource { get { return this.FundingSourceOption; } set { this.FundingSourceOption = new Option<FundingSourceEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Apps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PaymentMethodUPIApps>> AppsOption { get; private set; }

        /// <summary>
        /// A list of apps for this payment method.
        /// </summary>
        /// <value>A list of apps for this payment method.</value>
        [JsonPropertyName("apps")]
        public List<PaymentMethodUPIApps> Apps { get { return this.AppsOption; } set { this.AppsOption = new Option<List<PaymentMethodUPIApps>>(value); } }

        /// <summary>
        /// Used to track the state of Brand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BrandOption { get; private set; }

        /// <summary>
        /// Brand for the selected gift card. For example: plastix, hmclub.
        /// </summary>
        /// <value>Brand for the selected gift card. For example: plastix, hmclub.</value>
        [JsonPropertyName("brand")]
        public string Brand { get { return this.BrandOption; } set { this.BrandOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Brands
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BrandsOption { get; private set; }

        /// <summary>
        /// List of possible brands. For example: visa, mc.
        /// </summary>
        /// <value>List of possible brands. For example: visa, mc.</value>
        [JsonPropertyName("brands")]
        public List<string> Brands { get { return this.BrandsOption; } set { this.BrandsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of VarConfiguration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> VarConfigurationOption { get; private set; }

        /// <summary>
        /// The configuration of the payment method.
        /// </summary>
        /// <value>The configuration of the payment method.</value>
        [JsonPropertyName("configuration")]
        public Dictionary<string, string> VarConfiguration { get { return this.VarConfigurationOption; } set { this.VarConfigurationOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of Group
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentMethodGroup> GroupOption { get; private set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [JsonPropertyName("group")]
        public PaymentMethodGroup Group { get { return this.GroupOption; } set { this.GroupOption = new Option<PaymentMethodGroup>(value); } }

        /// <summary>
        /// Used to track the state of InputDetails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<InputDetail>> InputDetailsOption { get; private set; }

        /// <summary>
        /// All input details to be provided to complete the payment with this payment method.
        /// </summary>
        /// <value>All input details to be provided to complete the payment with this payment method.</value>
        [JsonPropertyName("inputDetails")]
        [Obsolete]
        public List<InputDetail> InputDetails { get { return this.InputDetailsOption; } set { this.InputDetailsOption = new Option<List<InputDetail>>(value); } }

        /// <summary>
        /// Used to track the state of Issuers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PaymentMethodIssuer>> IssuersOption { get; private set; }

        /// <summary>
        /// A list of issuers for this payment method.
        /// </summary>
        /// <value>A list of issuers for this payment method.</value>
        [JsonPropertyName("issuers")]
        public List<PaymentMethodIssuer> Issuers { get { return this.IssuersOption; } set { this.IssuersOption = new Option<List<PaymentMethodIssuer>>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// The displayable name of this payment method.
        /// </summary>
        /// <value>The displayable name of this payment method.</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// The unique payment method code.
        /// </summary>
        /// <value>The unique payment method code.</value>
        [JsonPropertyName("type")]
        public string Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethod {\n");
            sb.Append("  Apps: ").Append(Apps).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Brands: ").Append(Brands).Append("\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("  FundingSource: ").Append(FundingSource).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  InputDetails: ").Append(InputDetails).Append("\n");
            sb.Append("  Issuers: ").Append(Issuers).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentMethod" />
    /// </summary>
    public class PaymentMethodJsonConverter : JsonConverter<PaymentMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<PaymentMethodUPIApps>> apps = default;
            Option<string> brand = default;
            Option<List<string>> brands = default;
            Option<Dictionary<string, string>> varConfiguration = default;
            Option<PaymentMethod.FundingSourceEnum?> fundingSource = default;
            Option<PaymentMethodGroup> group = default;
            Option<List<InputDetail>> inputDetails = default;
            Option<List<PaymentMethodIssuer>> issuers = default;
            Option<string> name = default;
            Option<string> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "apps":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                apps = new Option<List<PaymentMethodUPIApps>>(JsonSerializer.Deserialize<List<PaymentMethodUPIApps>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "brand":
                            brand = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "brands":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                brands = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "configuration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varConfiguration = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fundingSource":
                            string fundingSourceRawValue = utf8JsonReader.GetString();
                            if (fundingSourceRawValue != null)
                                fundingSource = new Option<PaymentMethod.FundingSourceEnum?>(PaymentMethod.FundingSourceEnumFromStringOrDefault(fundingSourceRawValue));
                            break;
                        case "group":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                group = new Option<PaymentMethodGroup>(JsonSerializer.Deserialize<PaymentMethodGroup>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "inputDetails":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inputDetails = new Option<List<InputDetail>>(JsonSerializer.Deserialize<List<InputDetail>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "issuers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                issuers = new Option<List<PaymentMethodIssuer>>(JsonSerializer.Deserialize<List<PaymentMethodIssuer>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (apps.IsSet && apps.Value == null)
                throw new ArgumentNullException(nameof(apps), "Property is not nullable for class PaymentMethod.");

            if (brand.IsSet && brand.Value == null)
                throw new ArgumentNullException(nameof(brand), "Property is not nullable for class PaymentMethod.");

            if (brands.IsSet && brands.Value == null)
                throw new ArgumentNullException(nameof(brands), "Property is not nullable for class PaymentMethod.");

            if (varConfiguration.IsSet && varConfiguration.Value == null)
                throw new ArgumentNullException(nameof(varConfiguration), "Property is not nullable for class PaymentMethod.");

            if (fundingSource.IsSet && fundingSource.Value == null)
                throw new ArgumentNullException(nameof(fundingSource), "Property is not nullable for class PaymentMethod.");

            if (group.IsSet && group.Value == null)
                throw new ArgumentNullException(nameof(group), "Property is not nullable for class PaymentMethod.");

            if (inputDetails.IsSet && inputDetails.Value == null)
                throw new ArgumentNullException(nameof(inputDetails), "Property is not nullable for class PaymentMethod.");

            if (issuers.IsSet && issuers.Value == null)
                throw new ArgumentNullException(nameof(issuers), "Property is not nullable for class PaymentMethod.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PaymentMethod.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PaymentMethod.");

            return new PaymentMethod(apps, brand, brands, varConfiguration, fundingSource, group, inputDetails, issuers, name, type);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentMethod paymentMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentMethod paymentMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentMethod.AppsOption.IsSet && paymentMethod.Apps == null)
                throw new ArgumentNullException(nameof(paymentMethod.Apps), "Property is required for class PaymentMethod.");

            if (paymentMethod.BrandOption.IsSet && paymentMethod.Brand == null)
                throw new ArgumentNullException(nameof(paymentMethod.Brand), "Property is required for class PaymentMethod.");

            if (paymentMethod.BrandsOption.IsSet && paymentMethod.Brands == null)
                throw new ArgumentNullException(nameof(paymentMethod.Brands), "Property is required for class PaymentMethod.");

            if (paymentMethod.VarConfigurationOption.IsSet && paymentMethod.VarConfiguration == null)
                throw new ArgumentNullException(nameof(paymentMethod.VarConfiguration), "Property is required for class PaymentMethod.");

            if (paymentMethod.GroupOption.IsSet && paymentMethod.Group == null)
                throw new ArgumentNullException(nameof(paymentMethod.Group), "Property is required for class PaymentMethod.");

            if (paymentMethod.InputDetailsOption.IsSet && paymentMethod.InputDetails == null)
                throw new ArgumentNullException(nameof(paymentMethod.InputDetails), "Property is required for class PaymentMethod.");

            if (paymentMethod.IssuersOption.IsSet && paymentMethod.Issuers == null)
                throw new ArgumentNullException(nameof(paymentMethod.Issuers), "Property is required for class PaymentMethod.");

            if (paymentMethod.NameOption.IsSet && paymentMethod.Name == null)
                throw new ArgumentNullException(nameof(paymentMethod.Name), "Property is required for class PaymentMethod.");

            if (paymentMethod.TypeOption.IsSet && paymentMethod.Type == null)
                throw new ArgumentNullException(nameof(paymentMethod.Type), "Property is required for class PaymentMethod.");

            if (paymentMethod.AppsOption.IsSet)
            {
                writer.WritePropertyName("apps");
                JsonSerializer.Serialize(writer, paymentMethod.Apps, jsonSerializerOptions);
            }
            if (paymentMethod.BrandOption.IsSet)
                writer.WriteString("brand", paymentMethod.Brand);

            if (paymentMethod.BrandsOption.IsSet)
            {
                writer.WritePropertyName("brands");
                JsonSerializer.Serialize(writer, paymentMethod.Brands, jsonSerializerOptions);
            }
            if (paymentMethod.VarConfigurationOption.IsSet)
            {
                writer.WritePropertyName("configuration");
                JsonSerializer.Serialize(writer, paymentMethod.VarConfiguration, jsonSerializerOptions);
            }
            var fundingSourceRawValue = PaymentMethod.FundingSourceEnumToJsonValue(paymentMethod.FundingSourceOption.Value.Value);
            writer.WriteString("fundingSource", fundingSourceRawValue);
            if (paymentMethod.GroupOption.IsSet)
            {
                writer.WritePropertyName("group");
                JsonSerializer.Serialize(writer, paymentMethod.Group, jsonSerializerOptions);
            }
            if (paymentMethod.InputDetailsOption.IsSet)
            {
                writer.WritePropertyName("inputDetails");
                JsonSerializer.Serialize(writer, paymentMethod.InputDetails, jsonSerializerOptions);
            }
            if (paymentMethod.IssuersOption.IsSet)
            {
                writer.WritePropertyName("issuers");
                JsonSerializer.Serialize(writer, paymentMethod.Issuers, jsonSerializerOptions);
            }
            if (paymentMethod.NameOption.IsSet)
                writer.WriteString("name", paymentMethod.Name);

            if (paymentMethod.TypeOption.IsSet)
                writer.WriteString("type", paymentMethod.Type);
        }
    }
}
