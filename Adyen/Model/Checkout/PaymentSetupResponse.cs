/*
* Adyen Checkout API
*
*
* The version of the OpenAPI document: 71
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PaymentSetupResponse
    /// </summary>
    [DataContract(Name = "PaymentSetupResponse")]
    public partial class PaymentSetupResponse : IEquatable<PaymentSetupResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentSetupResponse" /> class.
        /// </summary>
        /// <param name="paymentSession">The encoded payment session that you need to pass to the SDK..</param>
        /// <param name="recurringDetails">The detailed list of stored payment details required to generate payment forms. Will be empty if oneClick is set to false in the request..</param>
        public PaymentSetupResponse(string paymentSession = default(string), List<RecurringDetail> recurringDetails = default(List<RecurringDetail>))
        {
            this.PaymentSession = paymentSession;
            this.RecurringDetails = recurringDetails;
        }

        /// <summary>
        /// The encoded payment session that you need to pass to the SDK.
        /// </summary>
        /// <value>The encoded payment session that you need to pass to the SDK.</value>
        [DataMember(Name = "paymentSession", EmitDefaultValue = false)]
        public string PaymentSession { get; set; }

        /// <summary>
        /// The detailed list of stored payment details required to generate payment forms. Will be empty if oneClick is set to false in the request.
        /// </summary>
        /// <value>The detailed list of stored payment details required to generate payment forms. Will be empty if oneClick is set to false in the request.</value>
        [DataMember(Name = "recurringDetails", EmitDefaultValue = false)]
        [Obsolete]
        public List<RecurringDetail> RecurringDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentSetupResponse {\n");
            sb.Append("  PaymentSession: ").Append(PaymentSession).Append("\n");
            sb.Append("  RecurringDetails: ").Append(RecurringDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentSetupResponse);
        }

        /// <summary>
        /// Returns true if PaymentSetupResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentSetupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentSetupResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentSession == input.PaymentSession ||
                    (this.PaymentSession != null &&
                    this.PaymentSession.Equals(input.PaymentSession))
                ) && 
                (
                    this.RecurringDetails == input.RecurringDetails ||
                    this.RecurringDetails != null &&
                    input.RecurringDetails != null &&
                    this.RecurringDetails.SequenceEqual(input.RecurringDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentSession != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentSession.GetHashCode();
                }
                if (this.RecurringDetails != null)
                {
                    hashCode = (hashCode * 59) + this.RecurringDetails.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
