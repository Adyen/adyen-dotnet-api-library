// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// CardDonations
    /// </summary>
    public partial class CardDonations : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardDonations" /> class.
        /// </summary>
        /// <param name="brand">Secondary brand of the card. For example: **plastix**, **hmclub**.</param>
        /// <param name="checkoutAttemptId">The checkout attempt identifier.</param>
        /// <param name="cupsecureplusSmscode">cupsecureplusSmscode</param>
        /// <param name="cvc">The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</param>
        /// <param name="encryptedCard">Only include this for JSON Web Encryption (JWE) implementations. The JWE-encrypted card details.</param>
        /// <param name="encryptedCardNumber">The encrypted card number.</param>
        /// <param name="encryptedExpiryMonth">The encrypted card expiry month.</param>
        /// <param name="encryptedExpiryYear">The encrypted card expiry year.</param>
        /// <param name="encryptedSecurityCode">The encrypted card verification code.</param>
        /// <param name="expiryMonth">The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</param>
        /// <param name="expiryYear">The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</param>
        /// <param name="fastlaneData">The encoded fastlane data blob</param>
        /// <param name="fundingSource">The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.</param>
        /// <param name="holderName">The name of the card holder.</param>
        /// <param name="networkPaymentReference">The transaction identifier from card schemes. This is the [&#x60;networkTxReference&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.</param>
        /// <param name="number">The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</param>
        /// <param name="recurringDetailReference">This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</param>
        /// <param name="shopperNotificationReference">The &#x60;shopperNotificationReference&#x60; returned in the response when you requested to notify the shopper. Used only for recurring payments in India.</param>
        /// <param name="srcCorrelationId">An identifier used for the Click to Pay transaction.</param>
        /// <param name="srcDigitalCardId">The SRC reference for the Click to Pay token.</param>
        /// <param name="srcScheme">The scheme that is being used for Click to Pay.</param>
        /// <param name="srcTokenReference">The reference for the Click to Pay token.</param>
        /// <param name="storedPaymentMethodId">This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</param>
        /// <param name="threeDS2SdkVersion">Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.</param>
        /// <param name="type">Default payment method details. Common for scheme payment methods, and for simple payment method details. (default to TypeEnum.Scheme)</param>
        [JsonConstructor]
        public CardDonations(Option<string> brand = default, Option<string> checkoutAttemptId = default, Option<string> cupsecureplusSmscode = default, Option<string> cvc = default, Option<string> encryptedCard = default, Option<string> encryptedCardNumber = default, Option<string> encryptedExpiryMonth = default, Option<string> encryptedExpiryYear = default, Option<string> encryptedSecurityCode = default, Option<string> expiryMonth = default, Option<string> expiryYear = default, Option<string> fastlaneData = default, Option<FundingSourceEnum?> fundingSource = default, Option<string> holderName = default, Option<string> networkPaymentReference = default, Option<string> number = default, Option<string> recurringDetailReference = default, Option<string> shopperNotificationReference = default, Option<string> srcCorrelationId = default, Option<string> srcDigitalCardId = default, Option<string> srcScheme = default, Option<string> srcTokenReference = default, Option<string> storedPaymentMethodId = default, Option<string> threeDS2SdkVersion = default, Option<TypeEnum?> type = default)
        {
            BrandOption = brand;
            CheckoutAttemptIdOption = checkoutAttemptId;
            CupsecureplusSmscodeOption = cupsecureplusSmscode;
            CvcOption = cvc;
            EncryptedCardOption = encryptedCard;
            EncryptedCardNumberOption = encryptedCardNumber;
            EncryptedExpiryMonthOption = encryptedExpiryMonth;
            EncryptedExpiryYearOption = encryptedExpiryYear;
            EncryptedSecurityCodeOption = encryptedSecurityCode;
            ExpiryMonthOption = expiryMonth;
            ExpiryYearOption = expiryYear;
            FastlaneDataOption = fastlaneData;
            FundingSourceOption = fundingSource;
            HolderNameOption = holderName;
            NetworkPaymentReferenceOption = networkPaymentReference;
            NumberOption = number;
            RecurringDetailReferenceOption = recurringDetailReference;
            ShopperNotificationReferenceOption = shopperNotificationReference;
            SrcCorrelationIdOption = srcCorrelationId;
            SrcDigitalCardIdOption = srcDigitalCardId;
            SrcSchemeOption = srcScheme;
            SrcTokenReferenceOption = srcTokenReference;
            StoredPaymentMethodIdOption = storedPaymentMethodId;
            ThreeDS2SdkVersionOption = threeDS2SdkVersion;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.
        /// </summary>
        /// <value>The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.</value>
        public enum FundingSourceEnum
        {
            /// <summary>
            /// Enum Credit for value: credit
            /// </summary>
            Credit = 1,

            /// <summary>
            /// Enum Debit for value: debit
            /// </summary>
            Debit = 2
        }

        /// <summary>
        /// Returns a <see cref="FundingSourceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FundingSourceEnum FundingSourceEnumFromString(string value)
        {
            if (value.Equals("credit"))
                return FundingSourceEnum.Credit;

            if (value.Equals("debit"))
                return FundingSourceEnum.Debit;

            throw new NotImplementedException($"Could not convert value to type FundingSourceEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FundingSourceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FundingSourceEnum? FundingSourceEnumFromStringOrDefault(string value)
        {
            if (value.Equals("credit"))
                return FundingSourceEnum.Credit;

            if (value.Equals("debit"))
                return FundingSourceEnum.Debit;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FundingSourceEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FundingSourceEnumToJsonValue(FundingSourceEnum? value)
        {
            if (value == FundingSourceEnum.Credit)
                return "credit";

            if (value == FundingSourceEnum.Debit)
                return "debit";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of FundingSource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FundingSourceEnum?> FundingSourceOption { get; private set; }

        /// <summary>
        /// The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.
        /// </summary>
        /// <value>The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.</value>
        [JsonPropertyName("fundingSource")]
        public FundingSourceEnum? FundingSource { get { return this.FundingSourceOption; } set { this.FundingSourceOption = new Option<FundingSourceEnum?>(value); } }

        /// <summary>
        /// Default payment method details. Common for scheme payment methods, and for simple payment method details.
        /// </summary>
        /// <value>Default payment method details. Common for scheme payment methods, and for simple payment method details.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Bcmc for value: bcmc
            /// </summary>
            Bcmc = 1,

            /// <summary>
            /// Enum Scheme for value: scheme
            /// </summary>
            Scheme = 2,

            /// <summary>
            /// Enum NetworkToken for value: networkToken
            /// </summary>
            NetworkToken = 3,

            /// <summary>
            /// Enum Giftcard for value: giftcard
            /// </summary>
            Giftcard = 4,

            /// <summary>
            /// Enum Card for value: card
            /// </summary>
            Card = 5,

            /// <summary>
            /// Enum Clicktopay for value: clicktopay
            /// </summary>
            Clicktopay = 6
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("bcmc"))
                return TypeEnum.Bcmc;

            if (value.Equals("scheme"))
                return TypeEnum.Scheme;

            if (value.Equals("networkToken"))
                return TypeEnum.NetworkToken;

            if (value.Equals("giftcard"))
                return TypeEnum.Giftcard;

            if (value.Equals("card"))
                return TypeEnum.Card;

            if (value.Equals("clicktopay"))
                return TypeEnum.Clicktopay;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("bcmc"))
                return TypeEnum.Bcmc;

            if (value.Equals("scheme"))
                return TypeEnum.Scheme;

            if (value.Equals("networkToken"))
                return TypeEnum.NetworkToken;

            if (value.Equals("giftcard"))
                return TypeEnum.Giftcard;

            if (value.Equals("card"))
                return TypeEnum.Card;

            if (value.Equals("clicktopay"))
                return TypeEnum.Clicktopay;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Bcmc)
                return "bcmc";

            if (value == TypeEnum.Scheme)
                return "scheme";

            if (value == TypeEnum.NetworkToken)
                return "networkToken";

            if (value == TypeEnum.Giftcard)
                return "giftcard";

            if (value == TypeEnum.Card)
                return "card";

            if (value == TypeEnum.Clicktopay)
                return "clicktopay";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Default payment method details. Common for scheme payment methods, and for simple payment method details.
        /// </summary>
        /// <value>Default payment method details. Common for scheme payment methods, and for simple payment method details.</value>
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Brand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BrandOption { get; private set; }

        /// <summary>
        /// Secondary brand of the card. For example: **plastix**, **hmclub**.
        /// </summary>
        /// <value>Secondary brand of the card. For example: **plastix**, **hmclub**.</value>
        [JsonPropertyName("brand")]
        public string Brand { get { return this.BrandOption; } set { this.BrandOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CheckoutAttemptId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CheckoutAttemptIdOption { get; private set; }

        /// <summary>
        /// The checkout attempt identifier.
        /// </summary>
        /// <value>The checkout attempt identifier.</value>
        [JsonPropertyName("checkoutAttemptId")]
        public string CheckoutAttemptId { get { return this.CheckoutAttemptIdOption; } set { this.CheckoutAttemptIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CupsecureplusSmscode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CupsecureplusSmscodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CupsecureplusSmscode
        /// </summary>
        [JsonPropertyName("cupsecureplus.smscode")]
        [Obsolete]
        public string CupsecureplusSmscode { get { return this.CupsecureplusSmscodeOption; } set { this.CupsecureplusSmscodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Cvc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CvcOption { get; private set; }

        /// <summary>
        /// The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
        /// </summary>
        /// <value>The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</value>
        [JsonPropertyName("cvc")]
        public string Cvc { get { return this.CvcOption; } set { this.CvcOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EncryptedCard
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EncryptedCardOption { get; private set; }

        /// <summary>
        /// Only include this for JSON Web Encryption (JWE) implementations. The JWE-encrypted card details.
        /// </summary>
        /// <value>Only include this for JSON Web Encryption (JWE) implementations. The JWE-encrypted card details.</value>
        [JsonPropertyName("encryptedCard")]
        public string EncryptedCard { get { return this.EncryptedCardOption; } set { this.EncryptedCardOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EncryptedCardNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EncryptedCardNumberOption { get; private set; }

        /// <summary>
        /// The encrypted card number.
        /// </summary>
        /// <value>The encrypted card number.</value>
        [JsonPropertyName("encryptedCardNumber")]
        public string EncryptedCardNumber { get { return this.EncryptedCardNumberOption; } set { this.EncryptedCardNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EncryptedExpiryMonth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EncryptedExpiryMonthOption { get; private set; }

        /// <summary>
        /// The encrypted card expiry month.
        /// </summary>
        /// <value>The encrypted card expiry month.</value>
        [JsonPropertyName("encryptedExpiryMonth")]
        public string EncryptedExpiryMonth { get { return this.EncryptedExpiryMonthOption; } set { this.EncryptedExpiryMonthOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EncryptedExpiryYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EncryptedExpiryYearOption { get; private set; }

        /// <summary>
        /// The encrypted card expiry year.
        /// </summary>
        /// <value>The encrypted card expiry year.</value>
        [JsonPropertyName("encryptedExpiryYear")]
        public string EncryptedExpiryYear { get { return this.EncryptedExpiryYearOption; } set { this.EncryptedExpiryYearOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EncryptedSecurityCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EncryptedSecurityCodeOption { get; private set; }

        /// <summary>
        /// The encrypted card verification code.
        /// </summary>
        /// <value>The encrypted card verification code.</value>
        [JsonPropertyName("encryptedSecurityCode")]
        public string EncryptedSecurityCode { get { return this.EncryptedSecurityCodeOption; } set { this.EncryptedSecurityCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpiryMonth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExpiryMonthOption { get; private set; }

        /// <summary>
        /// The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
        /// </summary>
        /// <value>The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</value>
        [JsonPropertyName("expiryMonth")]
        public string ExpiryMonth { get { return this.ExpiryMonthOption; } set { this.ExpiryMonthOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpiryYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExpiryYearOption { get; private set; }

        /// <summary>
        /// The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
        /// </summary>
        /// <value>The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</value>
        [JsonPropertyName("expiryYear")]
        public string ExpiryYear { get { return this.ExpiryYearOption; } set { this.ExpiryYearOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FastlaneData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FastlaneDataOption { get; private set; }

        /// <summary>
        /// The encoded fastlane data blob
        /// </summary>
        /// <value>The encoded fastlane data blob</value>
        [JsonPropertyName("fastlaneData")]
        public string FastlaneData { get { return this.FastlaneDataOption; } set { this.FastlaneDataOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of HolderName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> HolderNameOption { get; private set; }

        /// <summary>
        /// The name of the card holder.
        /// </summary>
        /// <value>The name of the card holder.</value>
        [JsonPropertyName("holderName")]
        public string HolderName { get { return this.HolderNameOption; } set { this.HolderNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NetworkPaymentReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NetworkPaymentReferenceOption { get; private set; }

        /// <summary>
        /// The transaction identifier from card schemes. This is the [&#x60;networkTxReference&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.
        /// </summary>
        /// <value>The transaction identifier from card schemes. This is the [&#x60;networkTxReference&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.</value>
        [JsonPropertyName("networkPaymentReference")]
        public string NetworkPaymentReference { get { return this.NetworkPaymentReferenceOption; } set { this.NetworkPaymentReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
        /// </summary>
        /// <value>The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).</value>
        [JsonPropertyName("number")]
        public string Number { get { return this.NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecurringDetailReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecurringDetailReferenceOption { get; private set; }

        /// <summary>
        /// This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.
        /// </summary>
        /// <value>This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</value>
        [JsonPropertyName("recurringDetailReference")]
        [Obsolete]
        public string RecurringDetailReference { get { return this.RecurringDetailReferenceOption; } set { this.RecurringDetailReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperNotificationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperNotificationReferenceOption { get; private set; }

        /// <summary>
        /// The &#x60;shopperNotificationReference&#x60; returned in the response when you requested to notify the shopper. Used only for recurring payments in India.
        /// </summary>
        /// <value>The &#x60;shopperNotificationReference&#x60; returned in the response when you requested to notify the shopper. Used only for recurring payments in India.</value>
        [JsonPropertyName("shopperNotificationReference")]
        public string ShopperNotificationReference { get { return this.ShopperNotificationReferenceOption; } set { this.ShopperNotificationReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SrcCorrelationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SrcCorrelationIdOption { get; private set; }

        /// <summary>
        /// An identifier used for the Click to Pay transaction.
        /// </summary>
        /// <value>An identifier used for the Click to Pay transaction.</value>
        [JsonPropertyName("srcCorrelationId")]
        public string SrcCorrelationId { get { return this.SrcCorrelationIdOption; } set { this.SrcCorrelationIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SrcDigitalCardId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SrcDigitalCardIdOption { get; private set; }

        /// <summary>
        /// The SRC reference for the Click to Pay token.
        /// </summary>
        /// <value>The SRC reference for the Click to Pay token.</value>
        [JsonPropertyName("srcDigitalCardId")]
        public string SrcDigitalCardId { get { return this.SrcDigitalCardIdOption; } set { this.SrcDigitalCardIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SrcScheme
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SrcSchemeOption { get; private set; }

        /// <summary>
        /// The scheme that is being used for Click to Pay.
        /// </summary>
        /// <value>The scheme that is being used for Click to Pay.</value>
        [JsonPropertyName("srcScheme")]
        public string SrcScheme { get { return this.SrcSchemeOption; } set { this.SrcSchemeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SrcTokenReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SrcTokenReferenceOption { get; private set; }

        /// <summary>
        /// The reference for the Click to Pay token.
        /// </summary>
        /// <value>The reference for the Click to Pay token.</value>
        [JsonPropertyName("srcTokenReference")]
        public string SrcTokenReference { get { return this.SrcTokenReferenceOption; } set { this.SrcTokenReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StoredPaymentMethodId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StoredPaymentMethodIdOption { get; private set; }

        /// <summary>
        /// This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.
        /// </summary>
        /// <value>This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</value>
        [JsonPropertyName("storedPaymentMethodId")]
        public string StoredPaymentMethodId { get { return this.StoredPaymentMethodIdOption; } set { this.StoredPaymentMethodIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDS2SdkVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDS2SdkVersionOption { get; private set; }

        /// <summary>
        /// Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.
        /// </summary>
        /// <value>Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.</value>
        [JsonPropertyName("threeDS2SdkVersion")]
        public string ThreeDS2SdkVersion { get { return this.ThreeDS2SdkVersionOption; } set { this.ThreeDS2SdkVersionOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardDonations {\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  CheckoutAttemptId: ").Append(CheckoutAttemptId).Append("\n");
            sb.Append("  CupsecureplusSmscode: ").Append(CupsecureplusSmscode).Append("\n");
            sb.Append("  Cvc: ").Append(Cvc).Append("\n");
            sb.Append("  EncryptedCard: ").Append(EncryptedCard).Append("\n");
            sb.Append("  EncryptedCardNumber: ").Append(EncryptedCardNumber).Append("\n");
            sb.Append("  EncryptedExpiryMonth: ").Append(EncryptedExpiryMonth).Append("\n");
            sb.Append("  EncryptedExpiryYear: ").Append(EncryptedExpiryYear).Append("\n");
            sb.Append("  EncryptedSecurityCode: ").Append(EncryptedSecurityCode).Append("\n");
            sb.Append("  ExpiryMonth: ").Append(ExpiryMonth).Append("\n");
            sb.Append("  ExpiryYear: ").Append(ExpiryYear).Append("\n");
            sb.Append("  FastlaneData: ").Append(FastlaneData).Append("\n");
            sb.Append("  FundingSource: ").Append(FundingSource).Append("\n");
            sb.Append("  HolderName: ").Append(HolderName).Append("\n");
            sb.Append("  NetworkPaymentReference: ").Append(NetworkPaymentReference).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  RecurringDetailReference: ").Append(RecurringDetailReference).Append("\n");
            sb.Append("  ShopperNotificationReference: ").Append(ShopperNotificationReference).Append("\n");
            sb.Append("  SrcCorrelationId: ").Append(SrcCorrelationId).Append("\n");
            sb.Append("  SrcDigitalCardId: ").Append(SrcDigitalCardId).Append("\n");
            sb.Append("  SrcScheme: ").Append(SrcScheme).Append("\n");
            sb.Append("  SrcTokenReference: ").Append(SrcTokenReference).Append("\n");
            sb.Append("  StoredPaymentMethodId: ").Append(StoredPaymentMethodId).Append("\n");
            sb.Append("  ThreeDS2SdkVersion: ").Append(ThreeDS2SdkVersion).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EncryptedCard (string) maxLength
            if (this.EncryptedCard != null && this.EncryptedCard.Length > 40000)
            {
                yield return new ValidationResult("Invalid value for EncryptedCard, length must be less than 40000.", new [] { "EncryptedCard" });
            }

            // EncryptedCardNumber (string) maxLength
            if (this.EncryptedCardNumber != null && this.EncryptedCardNumber.Length > 15000)
            {
                yield return new ValidationResult("Invalid value for EncryptedCardNumber, length must be less than 15000.", new [] { "EncryptedCardNumber" });
            }

            // EncryptedExpiryMonth (string) maxLength
            if (this.EncryptedExpiryMonth != null && this.EncryptedExpiryMonth.Length > 15000)
            {
                yield return new ValidationResult("Invalid value for EncryptedExpiryMonth, length must be less than 15000.", new [] { "EncryptedExpiryMonth" });
            }

            // EncryptedExpiryYear (string) maxLength
            if (this.EncryptedExpiryYear != null && this.EncryptedExpiryYear.Length > 15000)
            {
                yield return new ValidationResult("Invalid value for EncryptedExpiryYear, length must be less than 15000.", new [] { "EncryptedExpiryYear" });
            }

            // EncryptedSecurityCode (string) maxLength
            if (this.EncryptedSecurityCode != null && this.EncryptedSecurityCode.Length > 15000)
            {
                yield return new ValidationResult("Invalid value for EncryptedSecurityCode, length must be less than 15000.", new [] { "EncryptedSecurityCode" });
            }

            // HolderName (string) maxLength
            if (this.HolderName != null && this.HolderName.Length > 15000)
            {
                yield return new ValidationResult("Invalid value for HolderName, length must be less than 15000.", new [] { "HolderName" });
            }

            // StoredPaymentMethodId (string) maxLength
            if (this.StoredPaymentMethodId != null && this.StoredPaymentMethodId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for StoredPaymentMethodId, length must be less than 64.", new [] { "StoredPaymentMethodId" });
            }

            // ThreeDS2SdkVersion (string) maxLength
            if (this.ThreeDS2SdkVersion != null && this.ThreeDS2SdkVersion.Length > 12)
            {
                yield return new ValidationResult("Invalid value for ThreeDS2SdkVersion, length must be less than 12.", new [] { "ThreeDS2SdkVersion" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CardDonations" />
    /// </summary>
    public class CardDonationsJsonConverter : JsonConverter<CardDonations>
    {
        /// <summary>
        /// Deserializes json to <see cref="CardDonations" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CardDonations Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> brand = default;
            Option<string> checkoutAttemptId = default;
            Option<string> cupsecureplusSmscode = default;
            Option<string> cvc = default;
            Option<string> encryptedCard = default;
            Option<string> encryptedCardNumber = default;
            Option<string> encryptedExpiryMonth = default;
            Option<string> encryptedExpiryYear = default;
            Option<string> encryptedSecurityCode = default;
            Option<string> expiryMonth = default;
            Option<string> expiryYear = default;
            Option<string> fastlaneData = default;
            Option<CardDonations.FundingSourceEnum?> fundingSource = default;
            Option<string> holderName = default;
            Option<string> networkPaymentReference = default;
            Option<string> number = default;
            Option<string> recurringDetailReference = default;
            Option<string> shopperNotificationReference = default;
            Option<string> srcCorrelationId = default;
            Option<string> srcDigitalCardId = default;
            Option<string> srcScheme = default;
            Option<string> srcTokenReference = default;
            Option<string> storedPaymentMethodId = default;
            Option<string> threeDS2SdkVersion = default;
            Option<CardDonations.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "brand":
                            brand = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "checkoutAttemptId":
                            checkoutAttemptId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cupsecureplus.smscode":
                            cupsecureplusSmscode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cvc":
                            cvc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "encryptedCard":
                            encryptedCard = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "encryptedCardNumber":
                            encryptedCardNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "encryptedExpiryMonth":
                            encryptedExpiryMonth = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "encryptedExpiryYear":
                            encryptedExpiryYear = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "encryptedSecurityCode":
                            encryptedSecurityCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expiryMonth":
                            expiryMonth = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expiryYear":
                            expiryYear = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fastlaneData":
                            fastlaneData = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fundingSource":
                            string fundingSourceRawValue = utf8JsonReader.GetString();
                            if (fundingSourceRawValue != null)
                                fundingSource = new Option<CardDonations.FundingSourceEnum?>(CardDonations.FundingSourceEnumFromStringOrDefault(fundingSourceRawValue));
                            break;
                        case "holderName":
                            holderName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "networkPaymentReference":
                            networkPaymentReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recurringDetailReference":
                            recurringDetailReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperNotificationReference":
                            shopperNotificationReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "srcCorrelationId":
                            srcCorrelationId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "srcDigitalCardId":
                            srcDigitalCardId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "srcScheme":
                            srcScheme = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "srcTokenReference":
                            srcTokenReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "storedPaymentMethodId":
                            storedPaymentMethodId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDS2SdkVersion":
                            threeDS2SdkVersion = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CardDonations.TypeEnum?>(CardDonations.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (brand.IsSet && brand.Value == null)
                throw new ArgumentNullException(nameof(brand), "Property is not nullable for class CardDonations.");

            if (checkoutAttemptId.IsSet && checkoutAttemptId.Value == null)
                throw new ArgumentNullException(nameof(checkoutAttemptId), "Property is not nullable for class CardDonations.");

            if (cupsecureplusSmscode.IsSet && cupsecureplusSmscode.Value == null)
                throw new ArgumentNullException(nameof(cupsecureplusSmscode), "Property is not nullable for class CardDonations.");

            if (cvc.IsSet && cvc.Value == null)
                throw new ArgumentNullException(nameof(cvc), "Property is not nullable for class CardDonations.");

            if (encryptedCard.IsSet && encryptedCard.Value == null)
                throw new ArgumentNullException(nameof(encryptedCard), "Property is not nullable for class CardDonations.");

            if (encryptedCardNumber.IsSet && encryptedCardNumber.Value == null)
                throw new ArgumentNullException(nameof(encryptedCardNumber), "Property is not nullable for class CardDonations.");

            if (encryptedExpiryMonth.IsSet && encryptedExpiryMonth.Value == null)
                throw new ArgumentNullException(nameof(encryptedExpiryMonth), "Property is not nullable for class CardDonations.");

            if (encryptedExpiryYear.IsSet && encryptedExpiryYear.Value == null)
                throw new ArgumentNullException(nameof(encryptedExpiryYear), "Property is not nullable for class CardDonations.");

            if (encryptedSecurityCode.IsSet && encryptedSecurityCode.Value == null)
                throw new ArgumentNullException(nameof(encryptedSecurityCode), "Property is not nullable for class CardDonations.");

            if (expiryMonth.IsSet && expiryMonth.Value == null)
                throw new ArgumentNullException(nameof(expiryMonth), "Property is not nullable for class CardDonations.");

            if (expiryYear.IsSet && expiryYear.Value == null)
                throw new ArgumentNullException(nameof(expiryYear), "Property is not nullable for class CardDonations.");

            if (fastlaneData.IsSet && fastlaneData.Value == null)
                throw new ArgumentNullException(nameof(fastlaneData), "Property is not nullable for class CardDonations.");

            if (fundingSource.IsSet && fundingSource.Value == null)
                throw new ArgumentNullException(nameof(fundingSource), "Property is not nullable for class CardDonations.");

            if (holderName.IsSet && holderName.Value == null)
                throw new ArgumentNullException(nameof(holderName), "Property is not nullable for class CardDonations.");

            if (networkPaymentReference.IsSet && networkPaymentReference.Value == null)
                throw new ArgumentNullException(nameof(networkPaymentReference), "Property is not nullable for class CardDonations.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class CardDonations.");

            if (recurringDetailReference.IsSet && recurringDetailReference.Value == null)
                throw new ArgumentNullException(nameof(recurringDetailReference), "Property is not nullable for class CardDonations.");

            if (shopperNotificationReference.IsSet && shopperNotificationReference.Value == null)
                throw new ArgumentNullException(nameof(shopperNotificationReference), "Property is not nullable for class CardDonations.");

            if (srcCorrelationId.IsSet && srcCorrelationId.Value == null)
                throw new ArgumentNullException(nameof(srcCorrelationId), "Property is not nullable for class CardDonations.");

            if (srcDigitalCardId.IsSet && srcDigitalCardId.Value == null)
                throw new ArgumentNullException(nameof(srcDigitalCardId), "Property is not nullable for class CardDonations.");

            if (srcScheme.IsSet && srcScheme.Value == null)
                throw new ArgumentNullException(nameof(srcScheme), "Property is not nullable for class CardDonations.");

            if (srcTokenReference.IsSet && srcTokenReference.Value == null)
                throw new ArgumentNullException(nameof(srcTokenReference), "Property is not nullable for class CardDonations.");

            if (storedPaymentMethodId.IsSet && storedPaymentMethodId.Value == null)
                throw new ArgumentNullException(nameof(storedPaymentMethodId), "Property is not nullable for class CardDonations.");

            if (threeDS2SdkVersion.IsSet && threeDS2SdkVersion.Value == null)
                throw new ArgumentNullException(nameof(threeDS2SdkVersion), "Property is not nullable for class CardDonations.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CardDonations.");

            return new CardDonations(brand, checkoutAttemptId, cupsecureplusSmscode, cvc, encryptedCard, encryptedCardNumber, encryptedExpiryMonth, encryptedExpiryYear, encryptedSecurityCode, expiryMonth, expiryYear, fastlaneData, fundingSource, holderName, networkPaymentReference, number, recurringDetailReference, shopperNotificationReference, srcCorrelationId, srcDigitalCardId, srcScheme, srcTokenReference, storedPaymentMethodId, threeDS2SdkVersion, type);
        }

        /// <summary>
        /// Serializes a <see cref="CardDonations" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cardDonations"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CardDonations cardDonations, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cardDonations, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CardDonations" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cardDonations"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CardDonations cardDonations, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cardDonations.BrandOption.IsSet && cardDonations.Brand == null)
                throw new ArgumentNullException(nameof(cardDonations.Brand), "Property is required for class CardDonations.");

            if (cardDonations.CheckoutAttemptIdOption.IsSet && cardDonations.CheckoutAttemptId == null)
                throw new ArgumentNullException(nameof(cardDonations.CheckoutAttemptId), "Property is required for class CardDonations.");

            if (cardDonations.CupsecureplusSmscodeOption.IsSet && cardDonations.CupsecureplusSmscode == null)
                throw new ArgumentNullException(nameof(cardDonations.CupsecureplusSmscode), "Property is required for class CardDonations.");

            if (cardDonations.CvcOption.IsSet && cardDonations.Cvc == null)
                throw new ArgumentNullException(nameof(cardDonations.Cvc), "Property is required for class CardDonations.");

            if (cardDonations.EncryptedCardOption.IsSet && cardDonations.EncryptedCard == null)
                throw new ArgumentNullException(nameof(cardDonations.EncryptedCard), "Property is required for class CardDonations.");

            if (cardDonations.EncryptedCardNumberOption.IsSet && cardDonations.EncryptedCardNumber == null)
                throw new ArgumentNullException(nameof(cardDonations.EncryptedCardNumber), "Property is required for class CardDonations.");

            if (cardDonations.EncryptedExpiryMonthOption.IsSet && cardDonations.EncryptedExpiryMonth == null)
                throw new ArgumentNullException(nameof(cardDonations.EncryptedExpiryMonth), "Property is required for class CardDonations.");

            if (cardDonations.EncryptedExpiryYearOption.IsSet && cardDonations.EncryptedExpiryYear == null)
                throw new ArgumentNullException(nameof(cardDonations.EncryptedExpiryYear), "Property is required for class CardDonations.");

            if (cardDonations.EncryptedSecurityCodeOption.IsSet && cardDonations.EncryptedSecurityCode == null)
                throw new ArgumentNullException(nameof(cardDonations.EncryptedSecurityCode), "Property is required for class CardDonations.");

            if (cardDonations.ExpiryMonthOption.IsSet && cardDonations.ExpiryMonth == null)
                throw new ArgumentNullException(nameof(cardDonations.ExpiryMonth), "Property is required for class CardDonations.");

            if (cardDonations.ExpiryYearOption.IsSet && cardDonations.ExpiryYear == null)
                throw new ArgumentNullException(nameof(cardDonations.ExpiryYear), "Property is required for class CardDonations.");

            if (cardDonations.FastlaneDataOption.IsSet && cardDonations.FastlaneData == null)
                throw new ArgumentNullException(nameof(cardDonations.FastlaneData), "Property is required for class CardDonations.");

            if (cardDonations.HolderNameOption.IsSet && cardDonations.HolderName == null)
                throw new ArgumentNullException(nameof(cardDonations.HolderName), "Property is required for class CardDonations.");

            if (cardDonations.NetworkPaymentReferenceOption.IsSet && cardDonations.NetworkPaymentReference == null)
                throw new ArgumentNullException(nameof(cardDonations.NetworkPaymentReference), "Property is required for class CardDonations.");

            if (cardDonations.NumberOption.IsSet && cardDonations.Number == null)
                throw new ArgumentNullException(nameof(cardDonations.Number), "Property is required for class CardDonations.");

            if (cardDonations.RecurringDetailReferenceOption.IsSet && cardDonations.RecurringDetailReference == null)
                throw new ArgumentNullException(nameof(cardDonations.RecurringDetailReference), "Property is required for class CardDonations.");

            if (cardDonations.ShopperNotificationReferenceOption.IsSet && cardDonations.ShopperNotificationReference == null)
                throw new ArgumentNullException(nameof(cardDonations.ShopperNotificationReference), "Property is required for class CardDonations.");

            if (cardDonations.SrcCorrelationIdOption.IsSet && cardDonations.SrcCorrelationId == null)
                throw new ArgumentNullException(nameof(cardDonations.SrcCorrelationId), "Property is required for class CardDonations.");

            if (cardDonations.SrcDigitalCardIdOption.IsSet && cardDonations.SrcDigitalCardId == null)
                throw new ArgumentNullException(nameof(cardDonations.SrcDigitalCardId), "Property is required for class CardDonations.");

            if (cardDonations.SrcSchemeOption.IsSet && cardDonations.SrcScheme == null)
                throw new ArgumentNullException(nameof(cardDonations.SrcScheme), "Property is required for class CardDonations.");

            if (cardDonations.SrcTokenReferenceOption.IsSet && cardDonations.SrcTokenReference == null)
                throw new ArgumentNullException(nameof(cardDonations.SrcTokenReference), "Property is required for class CardDonations.");

            if (cardDonations.StoredPaymentMethodIdOption.IsSet && cardDonations.StoredPaymentMethodId == null)
                throw new ArgumentNullException(nameof(cardDonations.StoredPaymentMethodId), "Property is required for class CardDonations.");

            if (cardDonations.ThreeDS2SdkVersionOption.IsSet && cardDonations.ThreeDS2SdkVersion == null)
                throw new ArgumentNullException(nameof(cardDonations.ThreeDS2SdkVersion), "Property is required for class CardDonations.");

            if (cardDonations.BrandOption.IsSet)
                writer.WriteString("brand", cardDonations.Brand);

            if (cardDonations.CheckoutAttemptIdOption.IsSet)
                writer.WriteString("checkoutAttemptId", cardDonations.CheckoutAttemptId);

            if (cardDonations.CupsecureplusSmscodeOption.IsSet)
                writer.WriteString("cupsecureplus.smscode", cardDonations.CupsecureplusSmscode);

            if (cardDonations.CvcOption.IsSet)
                writer.WriteString("cvc", cardDonations.Cvc);

            if (cardDonations.EncryptedCardOption.IsSet)
                writer.WriteString("encryptedCard", cardDonations.EncryptedCard);

            if (cardDonations.EncryptedCardNumberOption.IsSet)
                writer.WriteString("encryptedCardNumber", cardDonations.EncryptedCardNumber);

            if (cardDonations.EncryptedExpiryMonthOption.IsSet)
                writer.WriteString("encryptedExpiryMonth", cardDonations.EncryptedExpiryMonth);

            if (cardDonations.EncryptedExpiryYearOption.IsSet)
                writer.WriteString("encryptedExpiryYear", cardDonations.EncryptedExpiryYear);

            if (cardDonations.EncryptedSecurityCodeOption.IsSet)
                writer.WriteString("encryptedSecurityCode", cardDonations.EncryptedSecurityCode);

            if (cardDonations.ExpiryMonthOption.IsSet)
                writer.WriteString("expiryMonth", cardDonations.ExpiryMonth);

            if (cardDonations.ExpiryYearOption.IsSet)
                writer.WriteString("expiryYear", cardDonations.ExpiryYear);

            if (cardDonations.FastlaneDataOption.IsSet)
                writer.WriteString("fastlaneData", cardDonations.FastlaneData);

            var fundingSourceRawValue = CardDonations.FundingSourceEnumToJsonValue(cardDonations.FundingSourceOption.Value.Value);
            writer.WriteString("fundingSource", fundingSourceRawValue);
            if (cardDonations.HolderNameOption.IsSet)
                writer.WriteString("holderName", cardDonations.HolderName);

            if (cardDonations.NetworkPaymentReferenceOption.IsSet)
                writer.WriteString("networkPaymentReference", cardDonations.NetworkPaymentReference);

            if (cardDonations.NumberOption.IsSet)
                writer.WriteString("number", cardDonations.Number);

            if (cardDonations.RecurringDetailReferenceOption.IsSet)
                writer.WriteString("recurringDetailReference", cardDonations.RecurringDetailReference);

            if (cardDonations.ShopperNotificationReferenceOption.IsSet)
                writer.WriteString("shopperNotificationReference", cardDonations.ShopperNotificationReference);

            if (cardDonations.SrcCorrelationIdOption.IsSet)
                writer.WriteString("srcCorrelationId", cardDonations.SrcCorrelationId);

            if (cardDonations.SrcDigitalCardIdOption.IsSet)
                writer.WriteString("srcDigitalCardId", cardDonations.SrcDigitalCardId);

            if (cardDonations.SrcSchemeOption.IsSet)
                writer.WriteString("srcScheme", cardDonations.SrcScheme);

            if (cardDonations.SrcTokenReferenceOption.IsSet)
                writer.WriteString("srcTokenReference", cardDonations.SrcTokenReference);

            if (cardDonations.StoredPaymentMethodIdOption.IsSet)
                writer.WriteString("storedPaymentMethodId", cardDonations.StoredPaymentMethodId);

            if (cardDonations.ThreeDS2SdkVersionOption.IsSet)
                writer.WriteString("threeDS2SdkVersion", cardDonations.ThreeDS2SdkVersion);

            var typeRawValue = CardDonations.TypeEnumToJsonValue(cardDonations.TypeOption.Value.Value);
            writer.WriteString("type", typeRawValue);
        }
    }
}
