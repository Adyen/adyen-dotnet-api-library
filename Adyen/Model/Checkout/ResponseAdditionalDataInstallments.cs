// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ResponseAdditionalDataInstallments
    /// </summary>
    public partial class ResponseAdditionalDataInstallments : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseAdditionalDataInstallments" /> class.
        /// </summary>
        /// <param name="installmentPaymentDataInstallmentType">Type of installment. The value of &#x60;installmentType&#x60; should be **IssuerFinanced**.</param>
        /// <param name="installmentPaymentDataOptionItemNrAnnualPercentageRate">Annual interest rate.</param>
        /// <param name="installmentPaymentDataOptionItemNrFirstInstallmentAmount">First Installment Amount in minor units.</param>
        /// <param name="installmentPaymentDataOptionItemNrInstallmentFee">Installment fee amount in minor units.</param>
        /// <param name="installmentPaymentDataOptionItemNrInterestRate">Interest rate for the installment period.</param>
        /// <param name="installmentPaymentDataOptionItemNrMaximumNumberOfInstallments">Maximum number of installments possible for this payment.</param>
        /// <param name="installmentPaymentDataOptionItemNrMinimumNumberOfInstallments">Minimum number of installments possible for this payment.</param>
        /// <param name="installmentPaymentDataOptionItemNrNumberOfInstallments">Total number of installments possible for this payment.</param>
        /// <param name="installmentPaymentDataOptionItemNrSubsequentInstallmentAmount">Subsequent Installment Amount in minor units.</param>
        /// <param name="installmentPaymentDataOptionItemNrTotalAmountDue">Total amount in minor units.</param>
        /// <param name="installmentPaymentDataPaymentOptions">Possible values: * PayInInstallmentsOnly * PayInFullOnly * PayInFullOrInstallments</param>
        /// <param name="installmentsValue">The number of installments that the payment amount should be charged with.  Example: 5 &gt; Only relevant for card payments in countries that support installments.</param>
        [JsonConstructor]
        public ResponseAdditionalDataInstallments(Option<string> installmentPaymentDataInstallmentType = default, Option<string> installmentPaymentDataOptionItemNrAnnualPercentageRate = default, Option<string> installmentPaymentDataOptionItemNrFirstInstallmentAmount = default, Option<string> installmentPaymentDataOptionItemNrInstallmentFee = default, Option<string> installmentPaymentDataOptionItemNrInterestRate = default, Option<string> installmentPaymentDataOptionItemNrMaximumNumberOfInstallments = default, Option<string> installmentPaymentDataOptionItemNrMinimumNumberOfInstallments = default, Option<string> installmentPaymentDataOptionItemNrNumberOfInstallments = default, Option<string> installmentPaymentDataOptionItemNrSubsequentInstallmentAmount = default, Option<string> installmentPaymentDataOptionItemNrTotalAmountDue = default, Option<string> installmentPaymentDataPaymentOptions = default, Option<string> installmentsValue = default)
        {
            InstallmentPaymentDataInstallmentTypeOption = installmentPaymentDataInstallmentType;
            InstallmentPaymentDataOptionItemNrAnnualPercentageRateOption = installmentPaymentDataOptionItemNrAnnualPercentageRate;
            InstallmentPaymentDataOptionItemNrFirstInstallmentAmountOption = installmentPaymentDataOptionItemNrFirstInstallmentAmount;
            InstallmentPaymentDataOptionItemNrInstallmentFeeOption = installmentPaymentDataOptionItemNrInstallmentFee;
            InstallmentPaymentDataOptionItemNrInterestRateOption = installmentPaymentDataOptionItemNrInterestRate;
            InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallmentsOption = installmentPaymentDataOptionItemNrMaximumNumberOfInstallments;
            InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallmentsOption = installmentPaymentDataOptionItemNrMinimumNumberOfInstallments;
            InstallmentPaymentDataOptionItemNrNumberOfInstallmentsOption = installmentPaymentDataOptionItemNrNumberOfInstallments;
            InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmountOption = installmentPaymentDataOptionItemNrSubsequentInstallmentAmount;
            InstallmentPaymentDataOptionItemNrTotalAmountDueOption = installmentPaymentDataOptionItemNrTotalAmountDue;
            InstallmentPaymentDataPaymentOptionsOption = installmentPaymentDataPaymentOptions;
            InstallmentsValueOption = installmentsValue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of InstallmentPaymentDataInstallmentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstallmentPaymentDataInstallmentTypeOption { get; private set; }

        /// <summary>
        /// Type of installment. The value of &#x60;installmentType&#x60; should be **IssuerFinanced**.
        /// </summary>
        /// <value>Type of installment. The value of &#x60;installmentType&#x60; should be **IssuerFinanced**.</value>
        [JsonPropertyName("installmentPaymentData.installmentType")]
        public string InstallmentPaymentDataInstallmentType { get { return this.InstallmentPaymentDataInstallmentTypeOption; } set { this.InstallmentPaymentDataInstallmentTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentPaymentDataOptionItemNrAnnualPercentageRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstallmentPaymentDataOptionItemNrAnnualPercentageRateOption { get; private set; }

        /// <summary>
        /// Annual interest rate.
        /// </summary>
        /// <value>Annual interest rate.</value>
        [JsonPropertyName("installmentPaymentData.option[itemNr].annualPercentageRate")]
        public string InstallmentPaymentDataOptionItemNrAnnualPercentageRate { get { return this.InstallmentPaymentDataOptionItemNrAnnualPercentageRateOption; } set { this.InstallmentPaymentDataOptionItemNrAnnualPercentageRateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentPaymentDataOptionItemNrFirstInstallmentAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstallmentPaymentDataOptionItemNrFirstInstallmentAmountOption { get; private set; }

        /// <summary>
        /// First Installment Amount in minor units.
        /// </summary>
        /// <value>First Installment Amount in minor units.</value>
        [JsonPropertyName("installmentPaymentData.option[itemNr].firstInstallmentAmount")]
        public string InstallmentPaymentDataOptionItemNrFirstInstallmentAmount { get { return this.InstallmentPaymentDataOptionItemNrFirstInstallmentAmountOption; } set { this.InstallmentPaymentDataOptionItemNrFirstInstallmentAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentPaymentDataOptionItemNrInstallmentFee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstallmentPaymentDataOptionItemNrInstallmentFeeOption { get; private set; }

        /// <summary>
        /// Installment fee amount in minor units.
        /// </summary>
        /// <value>Installment fee amount in minor units.</value>
        [JsonPropertyName("installmentPaymentData.option[itemNr].installmentFee")]
        public string InstallmentPaymentDataOptionItemNrInstallmentFee { get { return this.InstallmentPaymentDataOptionItemNrInstallmentFeeOption; } set { this.InstallmentPaymentDataOptionItemNrInstallmentFeeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentPaymentDataOptionItemNrInterestRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstallmentPaymentDataOptionItemNrInterestRateOption { get; private set; }

        /// <summary>
        /// Interest rate for the installment period.
        /// </summary>
        /// <value>Interest rate for the installment period.</value>
        [JsonPropertyName("installmentPaymentData.option[itemNr].interestRate")]
        public string InstallmentPaymentDataOptionItemNrInterestRate { get { return this.InstallmentPaymentDataOptionItemNrInterestRateOption; } set { this.InstallmentPaymentDataOptionItemNrInterestRateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallmentsOption { get; private set; }

        /// <summary>
        /// Maximum number of installments possible for this payment.
        /// </summary>
        /// <value>Maximum number of installments possible for this payment.</value>
        [JsonPropertyName("installmentPaymentData.option[itemNr].maximumNumberOfInstallments")]
        public string InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallments { get { return this.InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallmentsOption; } set { this.InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallmentsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallmentsOption { get; private set; }

        /// <summary>
        /// Minimum number of installments possible for this payment.
        /// </summary>
        /// <value>Minimum number of installments possible for this payment.</value>
        [JsonPropertyName("installmentPaymentData.option[itemNr].minimumNumberOfInstallments")]
        public string InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallments { get { return this.InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallmentsOption; } set { this.InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallmentsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentPaymentDataOptionItemNrNumberOfInstallments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstallmentPaymentDataOptionItemNrNumberOfInstallmentsOption { get; private set; }

        /// <summary>
        /// Total number of installments possible for this payment.
        /// </summary>
        /// <value>Total number of installments possible for this payment.</value>
        [JsonPropertyName("installmentPaymentData.option[itemNr].numberOfInstallments")]
        public string InstallmentPaymentDataOptionItemNrNumberOfInstallments { get { return this.InstallmentPaymentDataOptionItemNrNumberOfInstallmentsOption; } set { this.InstallmentPaymentDataOptionItemNrNumberOfInstallmentsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmountOption { get; private set; }

        /// <summary>
        /// Subsequent Installment Amount in minor units.
        /// </summary>
        /// <value>Subsequent Installment Amount in minor units.</value>
        [JsonPropertyName("installmentPaymentData.option[itemNr].subsequentInstallmentAmount")]
        public string InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmount { get { return this.InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmountOption; } set { this.InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentPaymentDataOptionItemNrTotalAmountDue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstallmentPaymentDataOptionItemNrTotalAmountDueOption { get; private set; }

        /// <summary>
        /// Total amount in minor units.
        /// </summary>
        /// <value>Total amount in minor units.</value>
        [JsonPropertyName("installmentPaymentData.option[itemNr].totalAmountDue")]
        public string InstallmentPaymentDataOptionItemNrTotalAmountDue { get { return this.InstallmentPaymentDataOptionItemNrTotalAmountDueOption; } set { this.InstallmentPaymentDataOptionItemNrTotalAmountDueOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentPaymentDataPaymentOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstallmentPaymentDataPaymentOptionsOption { get; private set; }

        /// <summary>
        /// Possible values: * PayInInstallmentsOnly * PayInFullOnly * PayInFullOrInstallments
        /// </summary>
        /// <value>Possible values: * PayInInstallmentsOnly * PayInFullOnly * PayInFullOrInstallments</value>
        [JsonPropertyName("installmentPaymentData.paymentOptions")]
        public string InstallmentPaymentDataPaymentOptions { get { return this.InstallmentPaymentDataPaymentOptionsOption; } set { this.InstallmentPaymentDataPaymentOptionsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InstallmentsValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstallmentsValueOption { get; private set; }

        /// <summary>
        /// The number of installments that the payment amount should be charged with.  Example: 5 &gt; Only relevant for card payments in countries that support installments.
        /// </summary>
        /// <value>The number of installments that the payment amount should be charged with.  Example: 5 &gt; Only relevant for card payments in countries that support installments.</value>
        [JsonPropertyName("installments.value")]
        public string InstallmentsValue { get { return this.InstallmentsValueOption; } set { this.InstallmentsValueOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseAdditionalDataInstallments {\n");
            sb.Append("  InstallmentPaymentDataInstallmentType: ").Append(InstallmentPaymentDataInstallmentType).Append("\n");
            sb.Append("  InstallmentPaymentDataOptionItemNrAnnualPercentageRate: ").Append(InstallmentPaymentDataOptionItemNrAnnualPercentageRate).Append("\n");
            sb.Append("  InstallmentPaymentDataOptionItemNrFirstInstallmentAmount: ").Append(InstallmentPaymentDataOptionItemNrFirstInstallmentAmount).Append("\n");
            sb.Append("  InstallmentPaymentDataOptionItemNrInstallmentFee: ").Append(InstallmentPaymentDataOptionItemNrInstallmentFee).Append("\n");
            sb.Append("  InstallmentPaymentDataOptionItemNrInterestRate: ").Append(InstallmentPaymentDataOptionItemNrInterestRate).Append("\n");
            sb.Append("  InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallments: ").Append(InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallments).Append("\n");
            sb.Append("  InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallments: ").Append(InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallments).Append("\n");
            sb.Append("  InstallmentPaymentDataOptionItemNrNumberOfInstallments: ").Append(InstallmentPaymentDataOptionItemNrNumberOfInstallments).Append("\n");
            sb.Append("  InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmount: ").Append(InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmount).Append("\n");
            sb.Append("  InstallmentPaymentDataOptionItemNrTotalAmountDue: ").Append(InstallmentPaymentDataOptionItemNrTotalAmountDue).Append("\n");
            sb.Append("  InstallmentPaymentDataPaymentOptions: ").Append(InstallmentPaymentDataPaymentOptions).Append("\n");
            sb.Append("  InstallmentsValue: ").Append(InstallmentsValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResponseAdditionalDataInstallments" />
    /// </summary>
    public class ResponseAdditionalDataInstallmentsJsonConverter : JsonConverter<ResponseAdditionalDataInstallments>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResponseAdditionalDataInstallments" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResponseAdditionalDataInstallments Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> installmentPaymentDataInstallmentType = default;
            Option<string> installmentPaymentDataOptionItemNrAnnualPercentageRate = default;
            Option<string> installmentPaymentDataOptionItemNrFirstInstallmentAmount = default;
            Option<string> installmentPaymentDataOptionItemNrInstallmentFee = default;
            Option<string> installmentPaymentDataOptionItemNrInterestRate = default;
            Option<string> installmentPaymentDataOptionItemNrMaximumNumberOfInstallments = default;
            Option<string> installmentPaymentDataOptionItemNrMinimumNumberOfInstallments = default;
            Option<string> installmentPaymentDataOptionItemNrNumberOfInstallments = default;
            Option<string> installmentPaymentDataOptionItemNrSubsequentInstallmentAmount = default;
            Option<string> installmentPaymentDataOptionItemNrTotalAmountDue = default;
            Option<string> installmentPaymentDataPaymentOptions = default;
            Option<string> installmentsValue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "installmentPaymentData.installmentType":
                            installmentPaymentDataInstallmentType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "installmentPaymentData.option[itemNr].annualPercentageRate":
                            installmentPaymentDataOptionItemNrAnnualPercentageRate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "installmentPaymentData.option[itemNr].firstInstallmentAmount":
                            installmentPaymentDataOptionItemNrFirstInstallmentAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "installmentPaymentData.option[itemNr].installmentFee":
                            installmentPaymentDataOptionItemNrInstallmentFee = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "installmentPaymentData.option[itemNr].interestRate":
                            installmentPaymentDataOptionItemNrInterestRate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "installmentPaymentData.option[itemNr].maximumNumberOfInstallments":
                            installmentPaymentDataOptionItemNrMaximumNumberOfInstallments = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "installmentPaymentData.option[itemNr].minimumNumberOfInstallments":
                            installmentPaymentDataOptionItemNrMinimumNumberOfInstallments = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "installmentPaymentData.option[itemNr].numberOfInstallments":
                            installmentPaymentDataOptionItemNrNumberOfInstallments = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "installmentPaymentData.option[itemNr].subsequentInstallmentAmount":
                            installmentPaymentDataOptionItemNrSubsequentInstallmentAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "installmentPaymentData.option[itemNr].totalAmountDue":
                            installmentPaymentDataOptionItemNrTotalAmountDue = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "installmentPaymentData.paymentOptions":
                            installmentPaymentDataPaymentOptions = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "installments.value":
                            installmentsValue = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (installmentPaymentDataInstallmentType.IsSet && installmentPaymentDataInstallmentType.Value == null)
                throw new ArgumentNullException(nameof(installmentPaymentDataInstallmentType), "Property is not nullable for class ResponseAdditionalDataInstallments.");

            if (installmentPaymentDataOptionItemNrAnnualPercentageRate.IsSet && installmentPaymentDataOptionItemNrAnnualPercentageRate.Value == null)
                throw new ArgumentNullException(nameof(installmentPaymentDataOptionItemNrAnnualPercentageRate), "Property is not nullable for class ResponseAdditionalDataInstallments.");

            if (installmentPaymentDataOptionItemNrFirstInstallmentAmount.IsSet && installmentPaymentDataOptionItemNrFirstInstallmentAmount.Value == null)
                throw new ArgumentNullException(nameof(installmentPaymentDataOptionItemNrFirstInstallmentAmount), "Property is not nullable for class ResponseAdditionalDataInstallments.");

            if (installmentPaymentDataOptionItemNrInstallmentFee.IsSet && installmentPaymentDataOptionItemNrInstallmentFee.Value == null)
                throw new ArgumentNullException(nameof(installmentPaymentDataOptionItemNrInstallmentFee), "Property is not nullable for class ResponseAdditionalDataInstallments.");

            if (installmentPaymentDataOptionItemNrInterestRate.IsSet && installmentPaymentDataOptionItemNrInterestRate.Value == null)
                throw new ArgumentNullException(nameof(installmentPaymentDataOptionItemNrInterestRate), "Property is not nullable for class ResponseAdditionalDataInstallments.");

            if (installmentPaymentDataOptionItemNrMaximumNumberOfInstallments.IsSet && installmentPaymentDataOptionItemNrMaximumNumberOfInstallments.Value == null)
                throw new ArgumentNullException(nameof(installmentPaymentDataOptionItemNrMaximumNumberOfInstallments), "Property is not nullable for class ResponseAdditionalDataInstallments.");

            if (installmentPaymentDataOptionItemNrMinimumNumberOfInstallments.IsSet && installmentPaymentDataOptionItemNrMinimumNumberOfInstallments.Value == null)
                throw new ArgumentNullException(nameof(installmentPaymentDataOptionItemNrMinimumNumberOfInstallments), "Property is not nullable for class ResponseAdditionalDataInstallments.");

            if (installmentPaymentDataOptionItemNrNumberOfInstallments.IsSet && installmentPaymentDataOptionItemNrNumberOfInstallments.Value == null)
                throw new ArgumentNullException(nameof(installmentPaymentDataOptionItemNrNumberOfInstallments), "Property is not nullable for class ResponseAdditionalDataInstallments.");

            if (installmentPaymentDataOptionItemNrSubsequentInstallmentAmount.IsSet && installmentPaymentDataOptionItemNrSubsequentInstallmentAmount.Value == null)
                throw new ArgumentNullException(nameof(installmentPaymentDataOptionItemNrSubsequentInstallmentAmount), "Property is not nullable for class ResponseAdditionalDataInstallments.");

            if (installmentPaymentDataOptionItemNrTotalAmountDue.IsSet && installmentPaymentDataOptionItemNrTotalAmountDue.Value == null)
                throw new ArgumentNullException(nameof(installmentPaymentDataOptionItemNrTotalAmountDue), "Property is not nullable for class ResponseAdditionalDataInstallments.");

            if (installmentPaymentDataPaymentOptions.IsSet && installmentPaymentDataPaymentOptions.Value == null)
                throw new ArgumentNullException(nameof(installmentPaymentDataPaymentOptions), "Property is not nullable for class ResponseAdditionalDataInstallments.");

            if (installmentsValue.IsSet && installmentsValue.Value == null)
                throw new ArgumentNullException(nameof(installmentsValue), "Property is not nullable for class ResponseAdditionalDataInstallments.");

            return new ResponseAdditionalDataInstallments(installmentPaymentDataInstallmentType, installmentPaymentDataOptionItemNrAnnualPercentageRate, installmentPaymentDataOptionItemNrFirstInstallmentAmount, installmentPaymentDataOptionItemNrInstallmentFee, installmentPaymentDataOptionItemNrInterestRate, installmentPaymentDataOptionItemNrMaximumNumberOfInstallments, installmentPaymentDataOptionItemNrMinimumNumberOfInstallments, installmentPaymentDataOptionItemNrNumberOfInstallments, installmentPaymentDataOptionItemNrSubsequentInstallmentAmount, installmentPaymentDataOptionItemNrTotalAmountDue, installmentPaymentDataPaymentOptions, installmentsValue);
        }

        /// <summary>
        /// Serializes a <see cref="ResponseAdditionalDataInstallments" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="responseAdditionalDataInstallments"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResponseAdditionalDataInstallments responseAdditionalDataInstallments, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, responseAdditionalDataInstallments, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResponseAdditionalDataInstallments" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="responseAdditionalDataInstallments"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResponseAdditionalDataInstallments responseAdditionalDataInstallments, JsonSerializerOptions jsonSerializerOptions)
        {
            if (responseAdditionalDataInstallments.InstallmentPaymentDataInstallmentTypeOption.IsSet && responseAdditionalDataInstallments.InstallmentPaymentDataInstallmentType == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataInstallments.InstallmentPaymentDataInstallmentType), "Property is required for class ResponseAdditionalDataInstallments.");

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrAnnualPercentageRateOption.IsSet && responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrAnnualPercentageRate == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrAnnualPercentageRate), "Property is required for class ResponseAdditionalDataInstallments.");

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrFirstInstallmentAmountOption.IsSet && responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrFirstInstallmentAmount == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrFirstInstallmentAmount), "Property is required for class ResponseAdditionalDataInstallments.");

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrInstallmentFeeOption.IsSet && responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrInstallmentFee == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrInstallmentFee), "Property is required for class ResponseAdditionalDataInstallments.");

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrInterestRateOption.IsSet && responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrInterestRate == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrInterestRate), "Property is required for class ResponseAdditionalDataInstallments.");

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallmentsOption.IsSet && responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallments == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallments), "Property is required for class ResponseAdditionalDataInstallments.");

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallmentsOption.IsSet && responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallments == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallments), "Property is required for class ResponseAdditionalDataInstallments.");

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrNumberOfInstallmentsOption.IsSet && responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrNumberOfInstallments == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrNumberOfInstallments), "Property is required for class ResponseAdditionalDataInstallments.");

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmountOption.IsSet && responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmount == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmount), "Property is required for class ResponseAdditionalDataInstallments.");

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrTotalAmountDueOption.IsSet && responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrTotalAmountDue == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrTotalAmountDue), "Property is required for class ResponseAdditionalDataInstallments.");

            if (responseAdditionalDataInstallments.InstallmentPaymentDataPaymentOptionsOption.IsSet && responseAdditionalDataInstallments.InstallmentPaymentDataPaymentOptions == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataInstallments.InstallmentPaymentDataPaymentOptions), "Property is required for class ResponseAdditionalDataInstallments.");

            if (responseAdditionalDataInstallments.InstallmentsValueOption.IsSet && responseAdditionalDataInstallments.InstallmentsValue == null)
                throw new ArgumentNullException(nameof(responseAdditionalDataInstallments.InstallmentsValue), "Property is required for class ResponseAdditionalDataInstallments.");

            if (responseAdditionalDataInstallments.InstallmentPaymentDataInstallmentTypeOption.IsSet)
                writer.WriteString("installmentPaymentData.installmentType", responseAdditionalDataInstallments.InstallmentPaymentDataInstallmentType);

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrAnnualPercentageRateOption.IsSet)
                writer.WriteString("installmentPaymentData.option[itemNr].annualPercentageRate", responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrAnnualPercentageRate);

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrFirstInstallmentAmountOption.IsSet)
                writer.WriteString("installmentPaymentData.option[itemNr].firstInstallmentAmount", responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrFirstInstallmentAmount);

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrInstallmentFeeOption.IsSet)
                writer.WriteString("installmentPaymentData.option[itemNr].installmentFee", responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrInstallmentFee);

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrInterestRateOption.IsSet)
                writer.WriteString("installmentPaymentData.option[itemNr].interestRate", responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrInterestRate);

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallmentsOption.IsSet)
                writer.WriteString("installmentPaymentData.option[itemNr].maximumNumberOfInstallments", responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrMaximumNumberOfInstallments);

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallmentsOption.IsSet)
                writer.WriteString("installmentPaymentData.option[itemNr].minimumNumberOfInstallments", responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrMinimumNumberOfInstallments);

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrNumberOfInstallmentsOption.IsSet)
                writer.WriteString("installmentPaymentData.option[itemNr].numberOfInstallments", responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrNumberOfInstallments);

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmountOption.IsSet)
                writer.WriteString("installmentPaymentData.option[itemNr].subsequentInstallmentAmount", responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrSubsequentInstallmentAmount);

            if (responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrTotalAmountDueOption.IsSet)
                writer.WriteString("installmentPaymentData.option[itemNr].totalAmountDue", responseAdditionalDataInstallments.InstallmentPaymentDataOptionItemNrTotalAmountDue);

            if (responseAdditionalDataInstallments.InstallmentPaymentDataPaymentOptionsOption.IsSet)
                writer.WriteString("installmentPaymentData.paymentOptions", responseAdditionalDataInstallments.InstallmentPaymentDataPaymentOptions);

            if (responseAdditionalDataInstallments.InstallmentsValueOption.IsSet)
                writer.WriteString("installments.value", responseAdditionalDataInstallments.InstallmentsValue);
        }
    }
}
