// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Amounts
    /// </summary>
    public partial class Amounts : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Amounts" /> class.
        /// </summary>
        /// <param name="currency">The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes/).</param>
        /// <param name="values">The amounts of the donation (in [minor units](https://docs.adyen.com/development-resources/currency-codes/)).</param>
        [JsonConstructor]
        public Amounts(string currency, List<long> values)
        {
            Currency = currency;
            Values = values;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes/).
        /// </summary>
        /// <value>The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes/).</value>
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// The amounts of the donation (in [minor units](https://docs.adyen.com/development-resources/currency-codes/)).
        /// </summary>
        /// <value>The amounts of the donation (in [minor units](https://docs.adyen.com/development-resources/currency-codes/)).</value>
        [JsonPropertyName("values")]
        public List<long> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Amounts {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Amounts" />
    /// </summary>
    public class AmountsJsonConverter : JsonConverter<Amounts>
    {
        /// <summary>
        /// Deserializes json to <see cref="Amounts" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Amounts Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> currency = default;
            Option<List<long>> values = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "currency":
                            currency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "values":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                values = new Option<List<long>>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!currency.IsSet)
                throw new ArgumentException("Property is required for class Amounts.", nameof(currency));

            if (!values.IsSet)
                throw new ArgumentException("Property is required for class Amounts.", nameof(values));

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class Amounts.");

            if (values.IsSet && values.Value == null)
                throw new ArgumentNullException(nameof(values), "Property is not nullable for class Amounts.");

            return new Amounts(currency.Value, values.Value);
        }

        /// <summary>
        /// Serializes a <see cref="Amounts" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="amounts"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Amounts amounts, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, amounts, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Amounts" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="amounts"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Amounts amounts, JsonSerializerOptions jsonSerializerOptions)
        {
            if (amounts.Currency == null)
                throw new ArgumentNullException(nameof(amounts.Currency), "Property is required for class Amounts.");

            if (amounts.Values == null)
                throw new ArgumentNullException(nameof(amounts.Values), "Property is required for class Amounts.");

            writer.WriteString("currency", amounts.Currency);

            writer.WritePropertyName("values");
            JsonSerializer.Serialize(writer, amounts.Values, jsonSerializerOptions);
        }
    }
}
