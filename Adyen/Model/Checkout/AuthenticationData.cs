// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// AuthenticationData
    /// </summary>
    public partial class AuthenticationData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationData" /> class.
        /// </summary>
        /// <param name="attemptAuthentication">Indicates when 3D Secure authentication should be attempted. This overrides all other rules, including [Dynamic 3D Secure settings](https://docs.adyen.com/risk-management/dynamic-3d-secure).  Possible values:  * **always**: Perform 3D Secure authentication. * **never**: Don&#39;t perform 3D Secure authentication. If PSD2 SCA or other national regulations require authentication, the transaction gets declined.</param>
        /// <param name="authenticationOnly">If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. Default: **false**. (default to false)</param>
        /// <param name="threeDSRequestData">threeDSRequestData</param>
        [JsonConstructor]
        public AuthenticationData(Option<AttemptAuthenticationEnum?> attemptAuthentication = default, Option<bool?> authenticationOnly = default, Option<ThreeDSRequestData> threeDSRequestData = default)
        {
            AttemptAuthenticationOption = attemptAuthentication;
            AuthenticationOnlyOption = authenticationOnly;
            ThreeDSRequestDataOption = threeDSRequestData;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Indicates when 3D Secure authentication should be attempted. This overrides all other rules, including [Dynamic 3D Secure settings](https://docs.adyen.com/risk-management/dynamic-3d-secure).  Possible values:  * **always**: Perform 3D Secure authentication. * **never**: Don&#39;t perform 3D Secure authentication. If PSD2 SCA or other national regulations require authentication, the transaction gets declined.
        /// </summary>
        /// <value>Indicates when 3D Secure authentication should be attempted. This overrides all other rules, including [Dynamic 3D Secure settings](https://docs.adyen.com/risk-management/dynamic-3d-secure).  Possible values:  * **always**: Perform 3D Secure authentication. * **never**: Don&#39;t perform 3D Secure authentication. If PSD2 SCA or other national regulations require authentication, the transaction gets declined.</value>
        public enum AttemptAuthenticationEnum
        {
            /// <summary>
            /// Enum Always for value: always
            /// </summary>
            Always = 1,

            /// <summary>
            /// Enum Never for value: never
            /// </summary>
            Never = 2
        }

        /// <summary>
        /// Returns a <see cref="AttemptAuthenticationEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AttemptAuthenticationEnum AttemptAuthenticationEnumFromString(string value)
        {
            if (value.Equals("always"))
                return AttemptAuthenticationEnum.Always;

            if (value.Equals("never"))
                return AttemptAuthenticationEnum.Never;

            throw new NotImplementedException($"Could not convert value to type AttemptAuthenticationEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AttemptAuthenticationEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AttemptAuthenticationEnum? AttemptAuthenticationEnumFromStringOrDefault(string value)
        {
            if (value.Equals("always"))
                return AttemptAuthenticationEnum.Always;

            if (value.Equals("never"))
                return AttemptAuthenticationEnum.Never;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AttemptAuthenticationEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AttemptAuthenticationEnumToJsonValue(AttemptAuthenticationEnum? value)
        {
            if (value == AttemptAuthenticationEnum.Always)
                return "always";

            if (value == AttemptAuthenticationEnum.Never)
                return "never";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AttemptAuthentication
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AttemptAuthenticationEnum?> AttemptAuthenticationOption { get; private set; }

        /// <summary>
        /// Indicates when 3D Secure authentication should be attempted. This overrides all other rules, including [Dynamic 3D Secure settings](https://docs.adyen.com/risk-management/dynamic-3d-secure).  Possible values:  * **always**: Perform 3D Secure authentication. * **never**: Don&#39;t perform 3D Secure authentication. If PSD2 SCA or other national regulations require authentication, the transaction gets declined.
        /// </summary>
        /// <value>Indicates when 3D Secure authentication should be attempted. This overrides all other rules, including [Dynamic 3D Secure settings](https://docs.adyen.com/risk-management/dynamic-3d-secure).  Possible values:  * **always**: Perform 3D Secure authentication. * **never**: Don&#39;t perform 3D Secure authentication. If PSD2 SCA or other national regulations require authentication, the transaction gets declined.</value>
        [JsonPropertyName("attemptAuthentication")]
        public AttemptAuthenticationEnum? AttemptAuthentication { get { return this.AttemptAuthenticationOption; } set { this.AttemptAuthenticationOption = new Option<AttemptAuthenticationEnum?>(value); } }

        /// <summary>
        /// Used to track the state of AuthenticationOnly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AuthenticationOnlyOption { get; private set; }

        /// <summary>
        /// If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. Default: **false**.
        /// </summary>
        /// <value>If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. Default: **false**.</value>
        [JsonPropertyName("authenticationOnly")]
        public bool? AuthenticationOnly { get { return this.AuthenticationOnlyOption; } set { this.AuthenticationOnlyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSRequestData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDSRequestData> ThreeDSRequestDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreeDSRequestData
        /// </summary>
        [JsonPropertyName("threeDSRequestData")]
        public ThreeDSRequestData ThreeDSRequestData { get { return this.ThreeDSRequestDataOption; } set { this.ThreeDSRequestDataOption = new Option<ThreeDSRequestData>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticationData {\n");
            sb.Append("  AttemptAuthentication: ").Append(AttemptAuthentication).Append("\n");
            sb.Append("  AuthenticationOnly: ").Append(AuthenticationOnly).Append("\n");
            sb.Append("  ThreeDSRequestData: ").Append(ThreeDSRequestData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthenticationData" />
    /// </summary>
    public class AuthenticationDataJsonConverter : JsonConverter<AuthenticationData>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthenticationData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthenticationData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AuthenticationData.AttemptAuthenticationEnum?> attemptAuthentication = default;
            Option<bool?> authenticationOnly = default;
            Option<ThreeDSRequestData> threeDSRequestData = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attemptAuthentication":
                            string attemptAuthenticationRawValue = utf8JsonReader.GetString();
                            if (attemptAuthenticationRawValue != null)
                                attemptAuthentication = new Option<AuthenticationData.AttemptAuthenticationEnum?>(AuthenticationData.AttemptAuthenticationEnumFromStringOrDefault(attemptAuthenticationRawValue));
                            break;
                        case "authenticationOnly":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                authenticationOnly = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "threeDSRequestData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threeDSRequestData = new Option<ThreeDSRequestData>(JsonSerializer.Deserialize<ThreeDSRequestData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (attemptAuthentication.IsSet && attemptAuthentication.Value == null)
                throw new ArgumentNullException(nameof(attemptAuthentication), "Property is not nullable for class AuthenticationData.");

            if (authenticationOnly.IsSet && authenticationOnly.Value == null)
                throw new ArgumentNullException(nameof(authenticationOnly), "Property is not nullable for class AuthenticationData.");

            if (threeDSRequestData.IsSet && threeDSRequestData.Value == null)
                throw new ArgumentNullException(nameof(threeDSRequestData), "Property is not nullable for class AuthenticationData.");

            return new AuthenticationData(attemptAuthentication, authenticationOnly, threeDSRequestData);
        }

        /// <summary>
        /// Serializes a <see cref="AuthenticationData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authenticationData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthenticationData authenticationData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, authenticationData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthenticationData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authenticationData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthenticationData authenticationData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authenticationData.ThreeDSRequestDataOption.IsSet && authenticationData.ThreeDSRequestData == null)
                throw new ArgumentNullException(nameof(authenticationData.ThreeDSRequestData), "Property is required for class AuthenticationData.");

            var attemptAuthenticationRawValue = AuthenticationData.AttemptAuthenticationEnumToJsonValue(authenticationData.AttemptAuthenticationOption.Value.Value);
            writer.WriteString("attemptAuthentication", attemptAuthenticationRawValue);
            if (authenticationData.AuthenticationOnlyOption.IsSet)
                writer.WriteBoolean("authenticationOnly", authenticationData.AuthenticationOnlyOption.Value.Value);

            if (authenticationData.ThreeDSRequestDataOption.IsSet)
            {
                writer.WritePropertyName("threeDSRequestData");
                JsonSerializer.Serialize(writer, authenticationData.ThreeDSRequestData, jsonSerializerOptions);
            }
        }
    }
}
