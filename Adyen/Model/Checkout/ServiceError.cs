// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ServiceError
    /// </summary>
    public partial class ServiceError : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceError" /> class.
        /// </summary>
        /// <param name="additionalData">Contains additional information about the payment. Some data fields are included only if you select them first. Go to **Customer Area** &gt; **Developers** &gt; **Additional data**.</param>
        /// <param name="errorCode">The error code mapped to the error message.</param>
        /// <param name="errorType">The category of the error.</param>
        /// <param name="message">A short explanation of the issue.</param>
        /// <param name="pspReference">The PSP reference of the payment.</param>
        /// <param name="status">The HTTP response status.</param>
        [JsonConstructor]
        public ServiceError(Option<Dictionary<string, string>> additionalData = default, Option<string> errorCode = default, Option<string> errorType = default, Option<string> message = default, Option<string> pspReference = default, Option<int?> status = default)
        {
            AdditionalDataOption = additionalData;
            ErrorCodeOption = errorCode;
            ErrorTypeOption = errorType;
            MessageOption = message;
            PspReferenceOption = pspReference;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AdditionalData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> AdditionalDataOption { get; private set; }

        /// <summary>
        /// Contains additional information about the payment. Some data fields are included only if you select them first. Go to **Customer Area** &gt; **Developers** &gt; **Additional data**.
        /// </summary>
        /// <value>Contains additional information about the payment. Some data fields are included only if you select them first. Go to **Customer Area** &gt; **Developers** &gt; **Additional data**.</value>
        [JsonPropertyName("additionalData")]
        public Dictionary<string, string> AdditionalData { get { return this.AdditionalDataOption; } set { this.AdditionalDataOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of ErrorCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorCodeOption { get; private set; }

        /// <summary>
        /// The error code mapped to the error message.
        /// </summary>
        /// <value>The error code mapped to the error message.</value>
        [JsonPropertyName("errorCode")]
        public string ErrorCode { get { return this.ErrorCodeOption; } set { this.ErrorCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ErrorType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorTypeOption { get; private set; }

        /// <summary>
        /// The category of the error.
        /// </summary>
        /// <value>The category of the error.</value>
        [JsonPropertyName("errorType")]
        public string ErrorType { get { return this.ErrorTypeOption; } set { this.ErrorTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageOption { get; private set; }

        /// <summary>
        /// A short explanation of the issue.
        /// </summary>
        /// <value>A short explanation of the issue.</value>
        [JsonPropertyName("message")]
        public string Message { get { return this.MessageOption; } set { this.MessageOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PspReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PspReferenceOption { get; private set; }

        /// <summary>
        /// The PSP reference of the payment.
        /// </summary>
        /// <value>The PSP reference of the payment.</value>
        [JsonPropertyName("pspReference")]
        public string PspReference { get { return this.PspReferenceOption; } set { this.PspReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StatusOption { get; private set; }

        /// <summary>
        /// The HTTP response status.
        /// </summary>
        /// <value>The HTTP response status.</value>
        [JsonPropertyName("status")]
        public int? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceError {\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorType: ").Append(ErrorType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ServiceError" />
    /// </summary>
    public class ServiceErrorJsonConverter : JsonConverter<ServiceError>
    {
        /// <summary>
        /// Deserializes json to <see cref="ServiceError" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ServiceError Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, string>> additionalData = default;
            Option<string> errorCode = default;
            Option<string> errorType = default;
            Option<string> message = default;
            Option<string> pspReference = default;
            Option<int?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "additionalData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalData = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "errorCode":
                            errorCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "errorType":
                            errorType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "message":
                            message = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "pspReference":
                            pspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (additionalData.IsSet && additionalData.Value == null)
                throw new ArgumentNullException(nameof(additionalData), "Property is not nullable for class ServiceError.");

            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class ServiceError.");

            if (errorType.IsSet && errorType.Value == null)
                throw new ArgumentNullException(nameof(errorType), "Property is not nullable for class ServiceError.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class ServiceError.");

            if (pspReference.IsSet && pspReference.Value == null)
                throw new ArgumentNullException(nameof(pspReference), "Property is not nullable for class ServiceError.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ServiceError.");

            return new ServiceError(additionalData, errorCode, errorType, message, pspReference, status);
        }

        /// <summary>
        /// Serializes a <see cref="ServiceError" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serviceError"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ServiceError serviceError, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, serviceError, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ServiceError" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serviceError"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ServiceError serviceError, JsonSerializerOptions jsonSerializerOptions)
        {
            if (serviceError.AdditionalDataOption.IsSet && serviceError.AdditionalData == null)
                throw new ArgumentNullException(nameof(serviceError.AdditionalData), "Property is required for class ServiceError.");

            if (serviceError.ErrorCodeOption.IsSet && serviceError.ErrorCode == null)
                throw new ArgumentNullException(nameof(serviceError.ErrorCode), "Property is required for class ServiceError.");

            if (serviceError.ErrorTypeOption.IsSet && serviceError.ErrorType == null)
                throw new ArgumentNullException(nameof(serviceError.ErrorType), "Property is required for class ServiceError.");

            if (serviceError.MessageOption.IsSet && serviceError.Message == null)
                throw new ArgumentNullException(nameof(serviceError.Message), "Property is required for class ServiceError.");

            if (serviceError.PspReferenceOption.IsSet && serviceError.PspReference == null)
                throw new ArgumentNullException(nameof(serviceError.PspReference), "Property is required for class ServiceError.");

            if (serviceError.AdditionalDataOption.IsSet)
            {
                writer.WritePropertyName("additionalData");
                JsonSerializer.Serialize(writer, serviceError.AdditionalData, jsonSerializerOptions);
            }
            if (serviceError.ErrorCodeOption.IsSet)
                writer.WriteString("errorCode", serviceError.ErrorCode);

            if (serviceError.ErrorTypeOption.IsSet)
                writer.WriteString("errorType", serviceError.ErrorType);

            if (serviceError.MessageOption.IsSet)
                writer.WriteString("message", serviceError.Message);

            if (serviceError.PspReferenceOption.IsSet)
                writer.WriteString("pspReference", serviceError.PspReference);

            if (serviceError.StatusOption.IsSet)
                writer.WriteNumber("status", serviceError.StatusOption.Value.Value);
        }
    }
}
