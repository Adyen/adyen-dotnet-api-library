// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// PaymentRefundResponse
    /// </summary>
    public partial class PaymentRefundResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRefundResponse" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="merchantAccount">The merchant account that is used to process the payment.</param>
        /// <param name="paymentPspReference">The [&#x60;pspReference&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to refund. </param>
        /// <param name="pspReference">Adyen&#39;s 16-character reference associated with the refund request.</param>
        /// <param name="status">The status of your request. This will always have the value **received**.</param>
        /// <param name="capturePspReference">This is only available for PayPal refunds. The [&#x60;pspReference&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the specific capture to refund.</param>
        /// <param name="lineItems">Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). &gt; This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.</param>
        /// <param name="merchantRefundReason">Your reason for the refund request.</param>
        /// <param name="reference">Your reference for the refund request.</param>
        /// <param name="splits">An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/split-payments) or [platforms](https://docs.adyen.com/platforms/online-payments/split-payments/).</param>
        /// <param name="store">The online store or [physical store](https://docs.adyen.com/point-of-sale/design-your-integration/determine-account-structure/#create-stores) that is processing the refund. This must be the same as the store name configured in your Customer Area.  Otherwise, you get an error and the refund fails.</param>
        [JsonConstructor]
        public PaymentRefundResponse(Amount amount, string merchantAccount, string paymentPspReference, string pspReference, StatusEnum status, Option<string> capturePspReference = default, Option<List<LineItem>> lineItems = default, Option<MerchantRefundReasonEnum?> merchantRefundReason = default, Option<string> reference = default, Option<List<Split>> splits = default, Option<string> store = default)
        {
            Amount = amount;
            MerchantAccount = merchantAccount;
            PaymentPspReference = paymentPspReference;
            PspReference = pspReference;
            Status = status;
            CapturePspReferenceOption = capturePspReference;
            LineItemsOption = lineItems;
            MerchantRefundReasonOption = merchantRefundReason;
            ReferenceOption = reference;
            SplitsOption = splits;
            StoreOption = store;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The status of your request. This will always have the value **received**.
        /// </summary>
        /// <value>The status of your request. This will always have the value **received**.</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Received for value: received
            /// </summary>
            Received = 1
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("received"))
                return StatusEnum.Received;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("received"))
                return StatusEnum.Received;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Received)
                return "received";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The status of your request. This will always have the value **received**.
        /// </summary>
        /// <value>The status of your request. This will always have the value **received**.</value>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Your reason for the refund request.
        /// </summary>
        /// <value>Your reason for the refund request.</value>
        public enum MerchantRefundReasonEnum
        {
            /// <summary>
            /// Enum FRAUD for value: FRAUD
            /// </summary>
            FRAUD = 1,

            /// <summary>
            /// Enum CUSTOMERREQUEST for value: CUSTOMER REQUEST
            /// </summary>
            CUSTOMERREQUEST = 2,

            /// <summary>
            /// Enum RETURN for value: RETURN
            /// </summary>
            RETURN = 3,

            /// <summary>
            /// Enum DUPLICATE for value: DUPLICATE
            /// </summary>
            DUPLICATE = 4,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            OTHER = 5
        }

        /// <summary>
        /// Returns a <see cref="MerchantRefundReasonEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MerchantRefundReasonEnum MerchantRefundReasonEnumFromString(string value)
        {
            if (value.Equals("FRAUD"))
                return MerchantRefundReasonEnum.FRAUD;

            if (value.Equals("CUSTOMER REQUEST"))
                return MerchantRefundReasonEnum.CUSTOMERREQUEST;

            if (value.Equals("RETURN"))
                return MerchantRefundReasonEnum.RETURN;

            if (value.Equals("DUPLICATE"))
                return MerchantRefundReasonEnum.DUPLICATE;

            if (value.Equals("OTHER"))
                return MerchantRefundReasonEnum.OTHER;

            throw new NotImplementedException($"Could not convert value to type MerchantRefundReasonEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MerchantRefundReasonEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MerchantRefundReasonEnum? MerchantRefundReasonEnumFromStringOrDefault(string value)
        {
            if (value.Equals("FRAUD"))
                return MerchantRefundReasonEnum.FRAUD;

            if (value.Equals("CUSTOMER REQUEST"))
                return MerchantRefundReasonEnum.CUSTOMERREQUEST;

            if (value.Equals("RETURN"))
                return MerchantRefundReasonEnum.RETURN;

            if (value.Equals("DUPLICATE"))
                return MerchantRefundReasonEnum.DUPLICATE;

            if (value.Equals("OTHER"))
                return MerchantRefundReasonEnum.OTHER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MerchantRefundReasonEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MerchantRefundReasonEnumToJsonValue(MerchantRefundReasonEnum? value)
        {
            if (value == null)
                return null;

            if (value == MerchantRefundReasonEnum.FRAUD)
                return "FRAUD";

            if (value == MerchantRefundReasonEnum.CUSTOMERREQUEST)
                return "CUSTOMER REQUEST";

            if (value == MerchantRefundReasonEnum.RETURN)
                return "RETURN";

            if (value == MerchantRefundReasonEnum.DUPLICATE)
                return "DUPLICATE";

            if (value == MerchantRefundReasonEnum.OTHER)
                return "OTHER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of MerchantRefundReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MerchantRefundReasonEnum?> MerchantRefundReasonOption { get; private set; }

        /// <summary>
        /// Your reason for the refund request.
        /// </summary>
        /// <value>Your reason for the refund request.</value>
        [JsonPropertyName("merchantRefundReason")]
        public MerchantRefundReasonEnum? MerchantRefundReason { get { return this.MerchantRefundReasonOption; } set { this.MerchantRefundReasonOption = new Option<MerchantRefundReasonEnum?>(value); } }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public Amount Amount { get; set; }

        /// <summary>
        /// The merchant account that is used to process the payment.
        /// </summary>
        /// <value>The merchant account that is used to process the payment.</value>
        [JsonPropertyName("merchantAccount")]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// The [&#x60;pspReference&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to refund. 
        /// </summary>
        /// <value>The [&#x60;pspReference&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to refund. </value>
        [JsonPropertyName("paymentPspReference")]
        public string PaymentPspReference { get; set; }

        /// <summary>
        /// Adyen&#39;s 16-character reference associated with the refund request.
        /// </summary>
        /// <value>Adyen&#39;s 16-character reference associated with the refund request.</value>
        [JsonPropertyName("pspReference")]
        public string PspReference { get; set; }

        /// <summary>
        /// Used to track the state of CapturePspReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CapturePspReferenceOption { get; private set; }

        /// <summary>
        /// This is only available for PayPal refunds. The [&#x60;pspReference&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the specific capture to refund.
        /// </summary>
        /// <value>This is only available for PayPal refunds. The [&#x60;pspReference&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the specific capture to refund.</value>
        [JsonPropertyName("capturePspReference")]
        public string CapturePspReference { get { return this.CapturePspReferenceOption; } set { this.CapturePspReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LineItems
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LineItem>> LineItemsOption { get; private set; }

        /// <summary>
        /// Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). &gt; This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.
        /// </summary>
        /// <value>Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). &gt; This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.</value>
        [JsonPropertyName("lineItems")]
        public List<LineItem> LineItems { get { return this.LineItemsOption; } set { this.LineItemsOption = new Option<List<LineItem>>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Your reference for the refund request.
        /// </summary>
        /// <value>Your reference for the refund request.</value>
        [JsonPropertyName("reference")]
        public string Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Splits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Split>> SplitsOption { get; private set; }

        /// <summary>
        /// An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/split-payments) or [platforms](https://docs.adyen.com/platforms/online-payments/split-payments/).
        /// </summary>
        /// <value>An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/split-payments) or [platforms](https://docs.adyen.com/platforms/online-payments/split-payments/).</value>
        [JsonPropertyName("splits")]
        public List<Split> Splits { get { return this.SplitsOption; } set { this.SplitsOption = new Option<List<Split>>(value); } }

        /// <summary>
        /// Used to track the state of Store
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StoreOption { get; private set; }

        /// <summary>
        /// The online store or [physical store](https://docs.adyen.com/point-of-sale/design-your-integration/determine-account-structure/#create-stores) that is processing the refund. This must be the same as the store name configured in your Customer Area.  Otherwise, you get an error and the refund fails.
        /// </summary>
        /// <value>The online store or [physical store](https://docs.adyen.com/point-of-sale/design-your-integration/determine-account-structure/#create-stores) that is processing the refund. This must be the same as the store name configured in your Customer Area.  Otherwise, you get an error and the refund fails.</value>
        [JsonPropertyName("store")]
        public string Store { get { return this.StoreOption; } set { this.StoreOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentRefundResponse {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  PaymentPspReference: ").Append(PaymentPspReference).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CapturePspReference: ").Append(CapturePspReference).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  MerchantRefundReason: ").Append(MerchantRefundReason).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Splits: ").Append(Splits).Append("\n");
            sb.Append("  Store: ").Append(Store).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentRefundResponse" />
    /// </summary>
    public class PaymentRefundResponseJsonConverter : JsonConverter<PaymentRefundResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentRefundResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentRefundResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Amount> amount = default;
            Option<string> merchantAccount = default;
            Option<string> paymentPspReference = default;
            Option<string> pspReference = default;
            Option<PaymentRefundResponse.StatusEnum?> status = default;
            Option<string> capturePspReference = default;
            Option<List<LineItem>> lineItems = default;
            Option<PaymentRefundResponse.MerchantRefundReasonEnum?> merchantRefundReason = default;
            Option<string> reference = default;
            Option<List<Split>> splits = default;
            Option<string> store = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<Amount>(JsonSerializer.Deserialize<Amount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "merchantAccount":
                            merchantAccount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentPspReference":
                            paymentPspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "pspReference":
                            pspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<PaymentRefundResponse.StatusEnum?>(PaymentRefundResponse.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "capturePspReference":
                            capturePspReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lineItems":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lineItems = new Option<List<LineItem>>(JsonSerializer.Deserialize<List<LineItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "merchantRefundReason":
                            string merchantRefundReasonRawValue = utf8JsonReader.GetString();
                            if (merchantRefundReasonRawValue != null)
                                merchantRefundReason = new Option<PaymentRefundResponse.MerchantRefundReasonEnum?>(PaymentRefundResponse.MerchantRefundReasonEnumFromStringOrDefault(merchantRefundReasonRawValue));
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "splits":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                splits = new Option<List<Split>>(JsonSerializer.Deserialize<List<Split>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "store":
                            store = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class PaymentRefundResponse.", nameof(amount));

            if (!merchantAccount.IsSet)
                throw new ArgumentException("Property is required for class PaymentRefundResponse.", nameof(merchantAccount));

            if (!paymentPspReference.IsSet)
                throw new ArgumentException("Property is required for class PaymentRefundResponse.", nameof(paymentPspReference));

            if (!pspReference.IsSet)
                throw new ArgumentException("Property is required for class PaymentRefundResponse.", nameof(pspReference));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class PaymentRefundResponse.", nameof(status));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class PaymentRefundResponse.");

            if (merchantAccount.IsSet && merchantAccount.Value == null)
                throw new ArgumentNullException(nameof(merchantAccount), "Property is not nullable for class PaymentRefundResponse.");

            if (paymentPspReference.IsSet && paymentPspReference.Value == null)
                throw new ArgumentNullException(nameof(paymentPspReference), "Property is not nullable for class PaymentRefundResponse.");

            if (pspReference.IsSet && pspReference.Value == null)
                throw new ArgumentNullException(nameof(pspReference), "Property is not nullable for class PaymentRefundResponse.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class PaymentRefundResponse.");

            if (capturePspReference.IsSet && capturePspReference.Value == null)
                throw new ArgumentNullException(nameof(capturePspReference), "Property is not nullable for class PaymentRefundResponse.");

            if (lineItems.IsSet && lineItems.Value == null)
                throw new ArgumentNullException(nameof(lineItems), "Property is not nullable for class PaymentRefundResponse.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class PaymentRefundResponse.");

            if (splits.IsSet && splits.Value == null)
                throw new ArgumentNullException(nameof(splits), "Property is not nullable for class PaymentRefundResponse.");

            if (store.IsSet && store.Value == null)
                throw new ArgumentNullException(nameof(store), "Property is not nullable for class PaymentRefundResponse.");

            return new PaymentRefundResponse(amount.Value, merchantAccount.Value, paymentPspReference.Value, pspReference.Value, status.Value.Value, capturePspReference, lineItems, merchantRefundReason, reference, splits, store);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentRefundResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentRefundResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentRefundResponse paymentRefundResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentRefundResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentRefundResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentRefundResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentRefundResponse paymentRefundResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentRefundResponse.Amount == null)
                throw new ArgumentNullException(nameof(paymentRefundResponse.Amount), "Property is required for class PaymentRefundResponse.");

            if (paymentRefundResponse.MerchantAccount == null)
                throw new ArgumentNullException(nameof(paymentRefundResponse.MerchantAccount), "Property is required for class PaymentRefundResponse.");

            if (paymentRefundResponse.PaymentPspReference == null)
                throw new ArgumentNullException(nameof(paymentRefundResponse.PaymentPspReference), "Property is required for class PaymentRefundResponse.");

            if (paymentRefundResponse.PspReference == null)
                throw new ArgumentNullException(nameof(paymentRefundResponse.PspReference), "Property is required for class PaymentRefundResponse.");

            if (paymentRefundResponse.CapturePspReferenceOption.IsSet && paymentRefundResponse.CapturePspReference == null)
                throw new ArgumentNullException(nameof(paymentRefundResponse.CapturePspReference), "Property is required for class PaymentRefundResponse.");

            if (paymentRefundResponse.LineItemsOption.IsSet && paymentRefundResponse.LineItems == null)
                throw new ArgumentNullException(nameof(paymentRefundResponse.LineItems), "Property is required for class PaymentRefundResponse.");

            if (paymentRefundResponse.ReferenceOption.IsSet && paymentRefundResponse.Reference == null)
                throw new ArgumentNullException(nameof(paymentRefundResponse.Reference), "Property is required for class PaymentRefundResponse.");

            if (paymentRefundResponse.SplitsOption.IsSet && paymentRefundResponse.Splits == null)
                throw new ArgumentNullException(nameof(paymentRefundResponse.Splits), "Property is required for class PaymentRefundResponse.");

            if (paymentRefundResponse.StoreOption.IsSet && paymentRefundResponse.Store == null)
                throw new ArgumentNullException(nameof(paymentRefundResponse.Store), "Property is required for class PaymentRefundResponse.");

            writer.WritePropertyName("amount");
            JsonSerializer.Serialize(writer, paymentRefundResponse.Amount, jsonSerializerOptions);
            writer.WriteString("merchantAccount", paymentRefundResponse.MerchantAccount);

            writer.WriteString("paymentPspReference", paymentRefundResponse.PaymentPspReference);

            writer.WriteString("pspReference", paymentRefundResponse.PspReference);

            var statusRawValue = PaymentRefundResponse.StatusEnumToJsonValue(paymentRefundResponse.Status);
            writer.WriteString("status", statusRawValue);
            if (paymentRefundResponse.CapturePspReferenceOption.IsSet)
                writer.WriteString("capturePspReference", paymentRefundResponse.CapturePspReference);

            if (paymentRefundResponse.LineItemsOption.IsSet)
            {
                writer.WritePropertyName("lineItems");
                JsonSerializer.Serialize(writer, paymentRefundResponse.LineItems, jsonSerializerOptions);
            }
            var merchantRefundReasonRawValue = PaymentRefundResponse.MerchantRefundReasonEnumToJsonValue(paymentRefundResponse.MerchantRefundReasonOption.Value.Value);
            if (merchantRefundReasonRawValue != null)
                writer.WriteString("merchantRefundReason", merchantRefundReasonRawValue);
            else
                writer.WriteNull("merchantRefundReason");

            if (paymentRefundResponse.ReferenceOption.IsSet)
                writer.WriteString("reference", paymentRefundResponse.Reference);

            if (paymentRefundResponse.SplitsOption.IsSet)
            {
                writer.WritePropertyName("splits");
                JsonSerializer.Serialize(writer, paymentRefundResponse.Splits, jsonSerializerOptions);
            }
            if (paymentRefundResponse.StoreOption.IsSet)
                writer.WriteString("store", paymentRefundResponse.Store);
        }
    }
}
