// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// StoredPaymentMethod
    /// </summary>
    public partial class StoredPaymentMethod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredPaymentMethod" /> class.
        /// </summary>
        /// <param name="bankAccountNumber">The bank account number (without separators).</param>
        /// <param name="bankLocationId">The location id of the bank. The field value is &#x60;nil&#x60; in most cases.</param>
        /// <param name="brand">The brand of the card.</param>
        /// <param name="expiryMonth">The two-digit month when the card expires</param>
        /// <param name="expiryYear">The last two digits of the year the card expires. For example, **22** for the year 2022.</param>
        /// <param name="holderName">The unique payment method code.</param>
        /// <param name="iban">The IBAN of the bank account.</param>
        /// <param name="id">A unique identifier of this stored payment method.</param>
        /// <param name="label">The shopper’s issuer account label</param>
        /// <param name="lastFour">The last four digits of the PAN.</param>
        /// <param name="name">The display name of the stored payment method.</param>
        /// <param name="networkTxReference">Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.</param>
        /// <param name="ownerName">The name of the bank account holder.</param>
        /// <param name="shopperEmail">The shopper’s email address.</param>
        /// <param name="supportedRecurringProcessingModels">The supported recurring processing models for this stored payment method.</param>
        /// <param name="supportedShopperInteractions">The supported shopper interactions for this stored payment method.</param>
        /// <param name="type">The type of payment method.</param>
        [JsonConstructor]
        public StoredPaymentMethod(Option<string> bankAccountNumber = default, Option<string> bankLocationId = default, Option<string> brand = default, Option<string> expiryMonth = default, Option<string> expiryYear = default, Option<string> holderName = default, Option<string> iban = default, Option<string> id = default, Option<string> label = default, Option<string> lastFour = default, Option<string> name = default, Option<string> networkTxReference = default, Option<string> ownerName = default, Option<string> shopperEmail = default, Option<List<string>> supportedRecurringProcessingModels = default, Option<List<string>> supportedShopperInteractions = default, Option<string> type = default)
        {
            BankAccountNumberOption = bankAccountNumber;
            BankLocationIdOption = bankLocationId;
            BrandOption = brand;
            ExpiryMonthOption = expiryMonth;
            ExpiryYearOption = expiryYear;
            HolderNameOption = holderName;
            IbanOption = iban;
            IdOption = id;
            LabelOption = label;
            LastFourOption = lastFour;
            NameOption = name;
            NetworkTxReferenceOption = networkTxReference;
            OwnerNameOption = ownerName;
            ShopperEmailOption = shopperEmail;
            SupportedRecurringProcessingModelsOption = supportedRecurringProcessingModels;
            SupportedShopperInteractionsOption = supportedShopperInteractions;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BankAccountNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankAccountNumberOption { get; private set; }

        /// <summary>
        /// The bank account number (without separators).
        /// </summary>
        /// <value>The bank account number (without separators).</value>
        [JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get { return this.BankAccountNumberOption; } set { this.BankAccountNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BankLocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankLocationIdOption { get; private set; }

        /// <summary>
        /// The location id of the bank. The field value is &#x60;nil&#x60; in most cases.
        /// </summary>
        /// <value>The location id of the bank. The field value is &#x60;nil&#x60; in most cases.</value>
        [JsonPropertyName("bankLocationId")]
        public string BankLocationId { get { return this.BankLocationIdOption; } set { this.BankLocationIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Brand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BrandOption { get; private set; }

        /// <summary>
        /// The brand of the card.
        /// </summary>
        /// <value>The brand of the card.</value>
        [JsonPropertyName("brand")]
        public string Brand { get { return this.BrandOption; } set { this.BrandOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpiryMonth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExpiryMonthOption { get; private set; }

        /// <summary>
        /// The two-digit month when the card expires
        /// </summary>
        /// <value>The two-digit month when the card expires</value>
        [JsonPropertyName("expiryMonth")]
        public string ExpiryMonth { get { return this.ExpiryMonthOption; } set { this.ExpiryMonthOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpiryYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExpiryYearOption { get; private set; }

        /// <summary>
        /// The last two digits of the year the card expires. For example, **22** for the year 2022.
        /// </summary>
        /// <value>The last two digits of the year the card expires. For example, **22** for the year 2022.</value>
        [JsonPropertyName("expiryYear")]
        public string ExpiryYear { get { return this.ExpiryYearOption; } set { this.ExpiryYearOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of HolderName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> HolderNameOption { get; private set; }

        /// <summary>
        /// The unique payment method code.
        /// </summary>
        /// <value>The unique payment method code.</value>
        [JsonPropertyName("holderName")]
        public string HolderName { get { return this.HolderNameOption; } set { this.HolderNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Iban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IbanOption { get; private set; }

        /// <summary>
        /// The IBAN of the bank account.
        /// </summary>
        /// <value>The IBAN of the bank account.</value>
        [JsonPropertyName("iban")]
        public string Iban { get { return this.IbanOption; } set { this.IbanOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// A unique identifier of this stored payment method.
        /// </summary>
        /// <value>A unique identifier of this stored payment method.</value>
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Label
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LabelOption { get; private set; }

        /// <summary>
        /// The shopper’s issuer account label
        /// </summary>
        /// <value>The shopper’s issuer account label</value>
        [JsonPropertyName("label")]
        public string Label { get { return this.LabelOption; } set { this.LabelOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastFour
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastFourOption { get; private set; }

        /// <summary>
        /// The last four digits of the PAN.
        /// </summary>
        /// <value>The last four digits of the PAN.</value>
        [JsonPropertyName("lastFour")]
        public string LastFour { get { return this.LastFourOption; } set { this.LastFourOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// The display name of the stored payment method.
        /// </summary>
        /// <value>The display name of the stored payment method.</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NetworkTxReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NetworkTxReferenceOption { get; private set; }

        /// <summary>
        /// Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.
        /// </summary>
        /// <value>Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.</value>
        [JsonPropertyName("networkTxReference")]
        public string NetworkTxReference { get { return this.NetworkTxReferenceOption; } set { this.NetworkTxReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OwnerName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OwnerNameOption { get; private set; }

        /// <summary>
        /// The name of the bank account holder.
        /// </summary>
        /// <value>The name of the bank account holder.</value>
        [JsonPropertyName("ownerName")]
        public string OwnerName { get { return this.OwnerNameOption; } set { this.OwnerNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShopperEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShopperEmailOption { get; private set; }

        /// <summary>
        /// The shopper’s email address.
        /// </summary>
        /// <value>The shopper’s email address.</value>
        [JsonPropertyName("shopperEmail")]
        public string ShopperEmail { get { return this.ShopperEmailOption; } set { this.ShopperEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SupportedRecurringProcessingModels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> SupportedRecurringProcessingModelsOption { get; private set; }

        /// <summary>
        /// The supported recurring processing models for this stored payment method.
        /// </summary>
        /// <value>The supported recurring processing models for this stored payment method.</value>
        [JsonPropertyName("supportedRecurringProcessingModels")]
        public List<string> SupportedRecurringProcessingModels { get { return this.SupportedRecurringProcessingModelsOption; } set { this.SupportedRecurringProcessingModelsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of SupportedShopperInteractions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> SupportedShopperInteractionsOption { get; private set; }

        /// <summary>
        /// The supported shopper interactions for this stored payment method.
        /// </summary>
        /// <value>The supported shopper interactions for this stored payment method.</value>
        [JsonPropertyName("supportedShopperInteractions")]
        public List<string> SupportedShopperInteractions { get { return this.SupportedShopperInteractionsOption; } set { this.SupportedShopperInteractionsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// The type of payment method.
        /// </summary>
        /// <value>The type of payment method.</value>
        [JsonPropertyName("type")]
        public string Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StoredPaymentMethod {\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  BankLocationId: ").Append(BankLocationId).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  ExpiryMonth: ").Append(ExpiryMonth).Append("\n");
            sb.Append("  ExpiryYear: ").Append(ExpiryYear).Append("\n");
            sb.Append("  HolderName: ").Append(HolderName).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  LastFour: ").Append(LastFour).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NetworkTxReference: ").Append(NetworkTxReference).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("  SupportedRecurringProcessingModels: ").Append(SupportedRecurringProcessingModels).Append("\n");
            sb.Append("  SupportedShopperInteractions: ").Append(SupportedShopperInteractions).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StoredPaymentMethod" />
    /// </summary>
    public class StoredPaymentMethodJsonConverter : JsonConverter<StoredPaymentMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="StoredPaymentMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override StoredPaymentMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> bankAccountNumber = default;
            Option<string> bankLocationId = default;
            Option<string> brand = default;
            Option<string> expiryMonth = default;
            Option<string> expiryYear = default;
            Option<string> holderName = default;
            Option<string> iban = default;
            Option<string> id = default;
            Option<string> label = default;
            Option<string> lastFour = default;
            Option<string> name = default;
            Option<string> networkTxReference = default;
            Option<string> ownerName = default;
            Option<string> shopperEmail = default;
            Option<List<string>> supportedRecurringProcessingModels = default;
            Option<List<string>> supportedShopperInteractions = default;
            Option<string> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bankAccountNumber":
                            bankAccountNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bankLocationId":
                            bankLocationId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "brand":
                            brand = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expiryMonth":
                            expiryMonth = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expiryYear":
                            expiryYear = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "holderName":
                            holderName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "iban":
                            iban = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "label":
                            label = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lastFour":
                            lastFour = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "networkTxReference":
                            networkTxReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ownerName":
                            ownerName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shopperEmail":
                            shopperEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "supportedRecurringProcessingModels":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supportedRecurringProcessingModels = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "supportedShopperInteractions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supportedShopperInteractions = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (bankAccountNumber.IsSet && bankAccountNumber.Value == null)
                throw new ArgumentNullException(nameof(bankAccountNumber), "Property is not nullable for class StoredPaymentMethod.");

            if (bankLocationId.IsSet && bankLocationId.Value == null)
                throw new ArgumentNullException(nameof(bankLocationId), "Property is not nullable for class StoredPaymentMethod.");

            if (brand.IsSet && brand.Value == null)
                throw new ArgumentNullException(nameof(brand), "Property is not nullable for class StoredPaymentMethod.");

            if (expiryMonth.IsSet && expiryMonth.Value == null)
                throw new ArgumentNullException(nameof(expiryMonth), "Property is not nullable for class StoredPaymentMethod.");

            if (expiryYear.IsSet && expiryYear.Value == null)
                throw new ArgumentNullException(nameof(expiryYear), "Property is not nullable for class StoredPaymentMethod.");

            if (holderName.IsSet && holderName.Value == null)
                throw new ArgumentNullException(nameof(holderName), "Property is not nullable for class StoredPaymentMethod.");

            if (iban.IsSet && iban.Value == null)
                throw new ArgumentNullException(nameof(iban), "Property is not nullable for class StoredPaymentMethod.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class StoredPaymentMethod.");

            if (label.IsSet && label.Value == null)
                throw new ArgumentNullException(nameof(label), "Property is not nullable for class StoredPaymentMethod.");

            if (lastFour.IsSet && lastFour.Value == null)
                throw new ArgumentNullException(nameof(lastFour), "Property is not nullable for class StoredPaymentMethod.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class StoredPaymentMethod.");

            if (networkTxReference.IsSet && networkTxReference.Value == null)
                throw new ArgumentNullException(nameof(networkTxReference), "Property is not nullable for class StoredPaymentMethod.");

            if (ownerName.IsSet && ownerName.Value == null)
                throw new ArgumentNullException(nameof(ownerName), "Property is not nullable for class StoredPaymentMethod.");

            if (shopperEmail.IsSet && shopperEmail.Value == null)
                throw new ArgumentNullException(nameof(shopperEmail), "Property is not nullable for class StoredPaymentMethod.");

            if (supportedRecurringProcessingModels.IsSet && supportedRecurringProcessingModels.Value == null)
                throw new ArgumentNullException(nameof(supportedRecurringProcessingModels), "Property is not nullable for class StoredPaymentMethod.");

            if (supportedShopperInteractions.IsSet && supportedShopperInteractions.Value == null)
                throw new ArgumentNullException(nameof(supportedShopperInteractions), "Property is not nullable for class StoredPaymentMethod.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class StoredPaymentMethod.");

            return new StoredPaymentMethod(bankAccountNumber, bankLocationId, brand, expiryMonth, expiryYear, holderName, iban, id, label, lastFour, name, networkTxReference, ownerName, shopperEmail, supportedRecurringProcessingModels, supportedShopperInteractions, type);
        }

        /// <summary>
        /// Serializes a <see cref="StoredPaymentMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="storedPaymentMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, StoredPaymentMethod storedPaymentMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, storedPaymentMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="StoredPaymentMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="storedPaymentMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, StoredPaymentMethod storedPaymentMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (storedPaymentMethod.BankAccountNumberOption.IsSet && storedPaymentMethod.BankAccountNumber == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.BankAccountNumber), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.BankLocationIdOption.IsSet && storedPaymentMethod.BankLocationId == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.BankLocationId), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.BrandOption.IsSet && storedPaymentMethod.Brand == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.Brand), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.ExpiryMonthOption.IsSet && storedPaymentMethod.ExpiryMonth == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.ExpiryMonth), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.ExpiryYearOption.IsSet && storedPaymentMethod.ExpiryYear == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.ExpiryYear), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.HolderNameOption.IsSet && storedPaymentMethod.HolderName == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.HolderName), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.IbanOption.IsSet && storedPaymentMethod.Iban == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.Iban), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.IdOption.IsSet && storedPaymentMethod.Id == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.Id), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.LabelOption.IsSet && storedPaymentMethod.Label == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.Label), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.LastFourOption.IsSet && storedPaymentMethod.LastFour == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.LastFour), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.NameOption.IsSet && storedPaymentMethod.Name == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.Name), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.NetworkTxReferenceOption.IsSet && storedPaymentMethod.NetworkTxReference == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.NetworkTxReference), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.OwnerNameOption.IsSet && storedPaymentMethod.OwnerName == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.OwnerName), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.ShopperEmailOption.IsSet && storedPaymentMethod.ShopperEmail == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.ShopperEmail), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.SupportedRecurringProcessingModelsOption.IsSet && storedPaymentMethod.SupportedRecurringProcessingModels == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.SupportedRecurringProcessingModels), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.SupportedShopperInteractionsOption.IsSet && storedPaymentMethod.SupportedShopperInteractions == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.SupportedShopperInteractions), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.TypeOption.IsSet && storedPaymentMethod.Type == null)
                throw new ArgumentNullException(nameof(storedPaymentMethod.Type), "Property is required for class StoredPaymentMethod.");

            if (storedPaymentMethod.BankAccountNumberOption.IsSet)
                writer.WriteString("bankAccountNumber", storedPaymentMethod.BankAccountNumber);

            if (storedPaymentMethod.BankLocationIdOption.IsSet)
                writer.WriteString("bankLocationId", storedPaymentMethod.BankLocationId);

            if (storedPaymentMethod.BrandOption.IsSet)
                writer.WriteString("brand", storedPaymentMethod.Brand);

            if (storedPaymentMethod.ExpiryMonthOption.IsSet)
                writer.WriteString("expiryMonth", storedPaymentMethod.ExpiryMonth);

            if (storedPaymentMethod.ExpiryYearOption.IsSet)
                writer.WriteString("expiryYear", storedPaymentMethod.ExpiryYear);

            if (storedPaymentMethod.HolderNameOption.IsSet)
                writer.WriteString("holderName", storedPaymentMethod.HolderName);

            if (storedPaymentMethod.IbanOption.IsSet)
                writer.WriteString("iban", storedPaymentMethod.Iban);

            if (storedPaymentMethod.IdOption.IsSet)
                writer.WriteString("id", storedPaymentMethod.Id);

            if (storedPaymentMethod.LabelOption.IsSet)
                writer.WriteString("label", storedPaymentMethod.Label);

            if (storedPaymentMethod.LastFourOption.IsSet)
                writer.WriteString("lastFour", storedPaymentMethod.LastFour);

            if (storedPaymentMethod.NameOption.IsSet)
                writer.WriteString("name", storedPaymentMethod.Name);

            if (storedPaymentMethod.NetworkTxReferenceOption.IsSet)
                writer.WriteString("networkTxReference", storedPaymentMethod.NetworkTxReference);

            if (storedPaymentMethod.OwnerNameOption.IsSet)
                writer.WriteString("ownerName", storedPaymentMethod.OwnerName);

            if (storedPaymentMethod.ShopperEmailOption.IsSet)
                writer.WriteString("shopperEmail", storedPaymentMethod.ShopperEmail);

            if (storedPaymentMethod.SupportedRecurringProcessingModelsOption.IsSet)
            {
                writer.WritePropertyName("supportedRecurringProcessingModels");
                JsonSerializer.Serialize(writer, storedPaymentMethod.SupportedRecurringProcessingModels, jsonSerializerOptions);
            }
            if (storedPaymentMethod.SupportedShopperInteractionsOption.IsSet)
            {
                writer.WritePropertyName("supportedShopperInteractions");
                JsonSerializer.Serialize(writer, storedPaymentMethod.SupportedShopperInteractions, jsonSerializerOptions);
            }
            if (storedPaymentMethod.TypeOption.IsSet)
                writer.WriteString("type", storedPaymentMethod.Type);
        }
    }
}
