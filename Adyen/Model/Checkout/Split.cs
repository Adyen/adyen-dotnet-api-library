// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// Split
    /// </summary>
    public partial class Split : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Split" /> class.
        /// </summary>
        /// <param name="type">The part of the payment you want to book to the specified &#x60;account&#x60;.  Possible values for the [Balance Platform](https://docs.adyen.com/adyen-for-platforms-model): * **BalanceAccount**: books part of the payment (specified in &#x60;amount&#x60;) to the specified &#x60;account&#x60;. * Transaction fees types that you can book to the specified &#x60;account&#x60;:    * **AcquiringFees**: the aggregated amount of the interchange and scheme fees.    * **PaymentFee**: the aggregated amount of all transaction fees.    * **AdyenFees**: the aggregated amount of Adyen&#39;s commission and markup fees.    * **AdyenCommission**: the transaction fees due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/interchange-fees-explained).    * **AdyenMarkup**: the transaction fees due to Adyen under [Interchange ++ pricing](https://www.adyen.com/knowledge-hub/interchange-fees-explained).    * **Interchange**: the fees paid to the issuer for each payment made with the card network.    * **SchemeFee**: the fees paid to the card scheme for using their network.  * **Commission**: your platform&#39;s commission on the payment (specified in &#x60;amount&#x60;), booked to your liable balance account. * **Remainder**: the amount left over after a currency conversion, booked to the specified &#x60;account&#x60;. * **TopUp**: allows you and your users to top up balance accounts using direct debit, card payments, or other payment methods. * **VAT**: the value-added tax charged on the payment, booked to your platforms liable balance account. * **Commission**: your platform&#39;s commission (specified in &#x60;amount&#x60;) on the payment, booked to your liable balance account. * **Default**: in very specific use cases, allows you to book the specified &#x60;amount&#x60; to the specified &#x60;account&#x60;. For more information, contact Adyen support.  Possible values for the [Classic Platforms integration](https://docs.adyen.com/classic-platforms): **Commission**, **Default**, **MarketPlace**, **PaymentFee**, **VAT**.</param>
        /// <param name="account">The unique identifier of the account to which the split amount is booked. Required if &#x60;type&#x60; is **MarketPlace** or **BalanceAccount**.  * [Classic Platforms integration](https://docs.adyen.com/classic-platforms): The [&#x60;accountCode&#x60;](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccount#request-accountCode) of the account to which the split amount is booked. * [Balance Platform](https://docs.adyen.com/adyen-for-platforms-model): The [&#x60;balanceAccountId&#x60;](https://docs.adyen.com/api-explorer/balanceplatform/latest/get/balanceAccounts/_id_#path-id) of the account to which the split amount is booked.</param>
        /// <param name="amount">amount</param>
        /// <param name="description">Your description for the split item.</param>
        /// <param name="reference">Your unique reference for the part of the payment booked to the specified &#x60;account&#x60;.  This is required if &#x60;type&#x60; is **MarketPlace** ([Classic Platforms integration](https://docs.adyen.com/classic-platforms)) or **BalanceAccount** ([Balance Platform](https://docs.adyen.com/adyen-for-platforms-model)).  For the other types, we also recommend providing a **unique** reference so you can reconcile the split and the associated payment in the transaction overview and in the reports.</param>
        [JsonConstructor]
        public Split(TypeEnum type, Option<string> account = default, Option<SplitAmount> amount = default, Option<string> description = default, Option<string> reference = default)
        {
            Type = type;
            AccountOption = account;
            AmountOption = amount;
            DescriptionOption = description;
            ReferenceOption = reference;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The part of the payment you want to book to the specified &#x60;account&#x60;.  Possible values for the [Balance Platform](https://docs.adyen.com/adyen-for-platforms-model): * **BalanceAccount**: books part of the payment (specified in &#x60;amount&#x60;) to the specified &#x60;account&#x60;. * Transaction fees types that you can book to the specified &#x60;account&#x60;:    * **AcquiringFees**: the aggregated amount of the interchange and scheme fees.    * **PaymentFee**: the aggregated amount of all transaction fees.    * **AdyenFees**: the aggregated amount of Adyen&#39;s commission and markup fees.    * **AdyenCommission**: the transaction fees due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/interchange-fees-explained).    * **AdyenMarkup**: the transaction fees due to Adyen under [Interchange ++ pricing](https://www.adyen.com/knowledge-hub/interchange-fees-explained).    * **Interchange**: the fees paid to the issuer for each payment made with the card network.    * **SchemeFee**: the fees paid to the card scheme for using their network.  * **Commission**: your platform&#39;s commission on the payment (specified in &#x60;amount&#x60;), booked to your liable balance account. * **Remainder**: the amount left over after a currency conversion, booked to the specified &#x60;account&#x60;. * **TopUp**: allows you and your users to top up balance accounts using direct debit, card payments, or other payment methods. * **VAT**: the value-added tax charged on the payment, booked to your platforms liable balance account. * **Commission**: your platform&#39;s commission (specified in &#x60;amount&#x60;) on the payment, booked to your liable balance account. * **Default**: in very specific use cases, allows you to book the specified &#x60;amount&#x60; to the specified &#x60;account&#x60;. For more information, contact Adyen support.  Possible values for the [Classic Platforms integration](https://docs.adyen.com/classic-platforms): **Commission**, **Default**, **MarketPlace**, **PaymentFee**, **VAT**.
        /// </summary>
        /// <value>The part of the payment you want to book to the specified &#x60;account&#x60;.  Possible values for the [Balance Platform](https://docs.adyen.com/adyen-for-platforms-model): * **BalanceAccount**: books part of the payment (specified in &#x60;amount&#x60;) to the specified &#x60;account&#x60;. * Transaction fees types that you can book to the specified &#x60;account&#x60;:    * **AcquiringFees**: the aggregated amount of the interchange and scheme fees.    * **PaymentFee**: the aggregated amount of all transaction fees.    * **AdyenFees**: the aggregated amount of Adyen&#39;s commission and markup fees.    * **AdyenCommission**: the transaction fees due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/interchange-fees-explained).    * **AdyenMarkup**: the transaction fees due to Adyen under [Interchange ++ pricing](https://www.adyen.com/knowledge-hub/interchange-fees-explained).    * **Interchange**: the fees paid to the issuer for each payment made with the card network.    * **SchemeFee**: the fees paid to the card scheme for using their network.  * **Commission**: your platform&#39;s commission on the payment (specified in &#x60;amount&#x60;), booked to your liable balance account. * **Remainder**: the amount left over after a currency conversion, booked to the specified &#x60;account&#x60;. * **TopUp**: allows you and your users to top up balance accounts using direct debit, card payments, or other payment methods. * **VAT**: the value-added tax charged on the payment, booked to your platforms liable balance account. * **Commission**: your platform&#39;s commission (specified in &#x60;amount&#x60;) on the payment, booked to your liable balance account. * **Default**: in very specific use cases, allows you to book the specified &#x60;amount&#x60; to the specified &#x60;account&#x60;. For more information, contact Adyen support.  Possible values for the [Classic Platforms integration](https://docs.adyen.com/classic-platforms): **Commission**, **Default**, **MarketPlace**, **PaymentFee**, **VAT**.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AcquiringFees for value: AcquiringFees
            /// </summary>
            AcquiringFees = 1,

            /// <summary>
            /// Enum AdyenCommission for value: AdyenCommission
            /// </summary>
            AdyenCommission = 2,

            /// <summary>
            /// Enum AdyenFees for value: AdyenFees
            /// </summary>
            AdyenFees = 3,

            /// <summary>
            /// Enum AdyenMarkup for value: AdyenMarkup
            /// </summary>
            AdyenMarkup = 4,

            /// <summary>
            /// Enum BalanceAccount for value: BalanceAccount
            /// </summary>
            BalanceAccount = 5,

            /// <summary>
            /// Enum Commission for value: Commission
            /// </summary>
            Commission = 6,

            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            Default = 7,

            /// <summary>
            /// Enum Interchange for value: Interchange
            /// </summary>
            Interchange = 8,

            /// <summary>
            /// Enum MarketPlace for value: MarketPlace
            /// </summary>
            MarketPlace = 9,

            /// <summary>
            /// Enum PaymentFee for value: PaymentFee
            /// </summary>
            PaymentFee = 10,

            /// <summary>
            /// Enum Remainder for value: Remainder
            /// </summary>
            Remainder = 11,

            /// <summary>
            /// Enum SchemeFee for value: SchemeFee
            /// </summary>
            SchemeFee = 12,

            /// <summary>
            /// Enum Surcharge for value: Surcharge
            /// </summary>
            Surcharge = 13,

            /// <summary>
            /// Enum Tip for value: Tip
            /// </summary>
            Tip = 14,

            /// <summary>
            /// Enum TopUp for value: TopUp
            /// </summary>
            TopUp = 15,

            /// <summary>
            /// Enum VAT for value: VAT
            /// </summary>
            VAT = 16
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("AcquiringFees"))
                return TypeEnum.AcquiringFees;

            if (value.Equals("AdyenCommission"))
                return TypeEnum.AdyenCommission;

            if (value.Equals("AdyenFees"))
                return TypeEnum.AdyenFees;

            if (value.Equals("AdyenMarkup"))
                return TypeEnum.AdyenMarkup;

            if (value.Equals("BalanceAccount"))
                return TypeEnum.BalanceAccount;

            if (value.Equals("Commission"))
                return TypeEnum.Commission;

            if (value.Equals("Default"))
                return TypeEnum.Default;

            if (value.Equals("Interchange"))
                return TypeEnum.Interchange;

            if (value.Equals("MarketPlace"))
                return TypeEnum.MarketPlace;

            if (value.Equals("PaymentFee"))
                return TypeEnum.PaymentFee;

            if (value.Equals("Remainder"))
                return TypeEnum.Remainder;

            if (value.Equals("SchemeFee"))
                return TypeEnum.SchemeFee;

            if (value.Equals("Surcharge"))
                return TypeEnum.Surcharge;

            if (value.Equals("Tip"))
                return TypeEnum.Tip;

            if (value.Equals("TopUp"))
                return TypeEnum.TopUp;

            if (value.Equals("VAT"))
                return TypeEnum.VAT;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("AcquiringFees"))
                return TypeEnum.AcquiringFees;

            if (value.Equals("AdyenCommission"))
                return TypeEnum.AdyenCommission;

            if (value.Equals("AdyenFees"))
                return TypeEnum.AdyenFees;

            if (value.Equals("AdyenMarkup"))
                return TypeEnum.AdyenMarkup;

            if (value.Equals("BalanceAccount"))
                return TypeEnum.BalanceAccount;

            if (value.Equals("Commission"))
                return TypeEnum.Commission;

            if (value.Equals("Default"))
                return TypeEnum.Default;

            if (value.Equals("Interchange"))
                return TypeEnum.Interchange;

            if (value.Equals("MarketPlace"))
                return TypeEnum.MarketPlace;

            if (value.Equals("PaymentFee"))
                return TypeEnum.PaymentFee;

            if (value.Equals("Remainder"))
                return TypeEnum.Remainder;

            if (value.Equals("SchemeFee"))
                return TypeEnum.SchemeFee;

            if (value.Equals("Surcharge"))
                return TypeEnum.Surcharge;

            if (value.Equals("Tip"))
                return TypeEnum.Tip;

            if (value.Equals("TopUp"))
                return TypeEnum.TopUp;

            if (value.Equals("VAT"))
                return TypeEnum.VAT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.AcquiringFees)
                return "AcquiringFees";

            if (value == TypeEnum.AdyenCommission)
                return "AdyenCommission";

            if (value == TypeEnum.AdyenFees)
                return "AdyenFees";

            if (value == TypeEnum.AdyenMarkup)
                return "AdyenMarkup";

            if (value == TypeEnum.BalanceAccount)
                return "BalanceAccount";

            if (value == TypeEnum.Commission)
                return "Commission";

            if (value == TypeEnum.Default)
                return "Default";

            if (value == TypeEnum.Interchange)
                return "Interchange";

            if (value == TypeEnum.MarketPlace)
                return "MarketPlace";

            if (value == TypeEnum.PaymentFee)
                return "PaymentFee";

            if (value == TypeEnum.Remainder)
                return "Remainder";

            if (value == TypeEnum.SchemeFee)
                return "SchemeFee";

            if (value == TypeEnum.Surcharge)
                return "Surcharge";

            if (value == TypeEnum.Tip)
                return "Tip";

            if (value == TypeEnum.TopUp)
                return "TopUp";

            if (value == TypeEnum.VAT)
                return "VAT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The part of the payment you want to book to the specified &#x60;account&#x60;.  Possible values for the [Balance Platform](https://docs.adyen.com/adyen-for-platforms-model): * **BalanceAccount**: books part of the payment (specified in &#x60;amount&#x60;) to the specified &#x60;account&#x60;. * Transaction fees types that you can book to the specified &#x60;account&#x60;:    * **AcquiringFees**: the aggregated amount of the interchange and scheme fees.    * **PaymentFee**: the aggregated amount of all transaction fees.    * **AdyenFees**: the aggregated amount of Adyen&#39;s commission and markup fees.    * **AdyenCommission**: the transaction fees due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/interchange-fees-explained).    * **AdyenMarkup**: the transaction fees due to Adyen under [Interchange ++ pricing](https://www.adyen.com/knowledge-hub/interchange-fees-explained).    * **Interchange**: the fees paid to the issuer for each payment made with the card network.    * **SchemeFee**: the fees paid to the card scheme for using their network.  * **Commission**: your platform&#39;s commission on the payment (specified in &#x60;amount&#x60;), booked to your liable balance account. * **Remainder**: the amount left over after a currency conversion, booked to the specified &#x60;account&#x60;. * **TopUp**: allows you and your users to top up balance accounts using direct debit, card payments, or other payment methods. * **VAT**: the value-added tax charged on the payment, booked to your platforms liable balance account. * **Commission**: your platform&#39;s commission (specified in &#x60;amount&#x60;) on the payment, booked to your liable balance account. * **Default**: in very specific use cases, allows you to book the specified &#x60;amount&#x60; to the specified &#x60;account&#x60;. For more information, contact Adyen support.  Possible values for the [Classic Platforms integration](https://docs.adyen.com/classic-platforms): **Commission**, **Default**, **MarketPlace**, **PaymentFee**, **VAT**.
        /// </summary>
        /// <value>The part of the payment you want to book to the specified &#x60;account&#x60;.  Possible values for the [Balance Platform](https://docs.adyen.com/adyen-for-platforms-model): * **BalanceAccount**: books part of the payment (specified in &#x60;amount&#x60;) to the specified &#x60;account&#x60;. * Transaction fees types that you can book to the specified &#x60;account&#x60;:    * **AcquiringFees**: the aggregated amount of the interchange and scheme fees.    * **PaymentFee**: the aggregated amount of all transaction fees.    * **AdyenFees**: the aggregated amount of Adyen&#39;s commission and markup fees.    * **AdyenCommission**: the transaction fees due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/interchange-fees-explained).    * **AdyenMarkup**: the transaction fees due to Adyen under [Interchange ++ pricing](https://www.adyen.com/knowledge-hub/interchange-fees-explained).    * **Interchange**: the fees paid to the issuer for each payment made with the card network.    * **SchemeFee**: the fees paid to the card scheme for using their network.  * **Commission**: your platform&#39;s commission on the payment (specified in &#x60;amount&#x60;), booked to your liable balance account. * **Remainder**: the amount left over after a currency conversion, booked to the specified &#x60;account&#x60;. * **TopUp**: allows you and your users to top up balance accounts using direct debit, card payments, or other payment methods. * **VAT**: the value-added tax charged on the payment, booked to your platforms liable balance account. * **Commission**: your platform&#39;s commission (specified in &#x60;amount&#x60;) on the payment, booked to your liable balance account. * **Default**: in very specific use cases, allows you to book the specified &#x60;amount&#x60; to the specified &#x60;account&#x60;. For more information, contact Adyen support.  Possible values for the [Classic Platforms integration](https://docs.adyen.com/classic-platforms): **Commission**, **Default**, **MarketPlace**, **PaymentFee**, **VAT**.</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Used to track the state of Account
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AccountOption { get; private set; }

        /// <summary>
        /// The unique identifier of the account to which the split amount is booked. Required if &#x60;type&#x60; is **MarketPlace** or **BalanceAccount**.  * [Classic Platforms integration](https://docs.adyen.com/classic-platforms): The [&#x60;accountCode&#x60;](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccount#request-accountCode) of the account to which the split amount is booked. * [Balance Platform](https://docs.adyen.com/adyen-for-platforms-model): The [&#x60;balanceAccountId&#x60;](https://docs.adyen.com/api-explorer/balanceplatform/latest/get/balanceAccounts/_id_#path-id) of the account to which the split amount is booked.
        /// </summary>
        /// <value>The unique identifier of the account to which the split amount is booked. Required if &#x60;type&#x60; is **MarketPlace** or **BalanceAccount**.  * [Classic Platforms integration](https://docs.adyen.com/classic-platforms): The [&#x60;accountCode&#x60;](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccount#request-accountCode) of the account to which the split amount is booked. * [Balance Platform](https://docs.adyen.com/adyen-for-platforms-model): The [&#x60;balanceAccountId&#x60;](https://docs.adyen.com/api-explorer/balanceplatform/latest/get/balanceAccounts/_id_#path-id) of the account to which the split amount is booked.</value>
        [JsonPropertyName("account")]
        public string Account { get { return this.AccountOption; } set { this.AccountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SplitAmount> AmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public SplitAmount Amount { get { return this.AmountOption; } set { this.AmountOption = new Option<SplitAmount>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Your description for the split item.
        /// </summary>
        /// <value>Your description for the split item.</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Your unique reference for the part of the payment booked to the specified &#x60;account&#x60;.  This is required if &#x60;type&#x60; is **MarketPlace** ([Classic Platforms integration](https://docs.adyen.com/classic-platforms)) or **BalanceAccount** ([Balance Platform](https://docs.adyen.com/adyen-for-platforms-model)).  For the other types, we also recommend providing a **unique** reference so you can reconcile the split and the associated payment in the transaction overview and in the reports.
        /// </summary>
        /// <value>Your unique reference for the part of the payment booked to the specified &#x60;account&#x60;.  This is required if &#x60;type&#x60; is **MarketPlace** ([Classic Platforms integration](https://docs.adyen.com/classic-platforms)) or **BalanceAccount** ([Balance Platform](https://docs.adyen.com/adyen-for-platforms-model)).  For the other types, we also recommend providing a **unique** reference so you can reconcile the split and the associated payment in the transaction overview and in the reports.</value>
        [JsonPropertyName("reference")]
        public string Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Split {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Split" />
    /// </summary>
    public class SplitJsonConverter : JsonConverter<Split>
    {
        /// <summary>
        /// Deserializes json to <see cref="Split" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Split Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Split.TypeEnum?> type = default;
            Option<string> account = default;
            Option<SplitAmount> amount = default;
            Option<string> description = default;
            Option<string> reference = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<Split.TypeEnum?>(Split.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "account":
                            account = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<SplitAmount>(JsonSerializer.Deserialize<SplitAmount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Split.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Split.");

            if (account.IsSet && account.Value == null)
                throw new ArgumentNullException(nameof(account), "Property is not nullable for class Split.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class Split.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Split.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class Split.");

            return new Split(type.Value.Value, account, amount, description, reference);
        }

        /// <summary>
        /// Serializes a <see cref="Split" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="split"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Split split, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, split, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Split" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="split"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Split split, JsonSerializerOptions jsonSerializerOptions)
        {
            if (split.AccountOption.IsSet && split.Account == null)
                throw new ArgumentNullException(nameof(split.Account), "Property is required for class Split.");

            if (split.AmountOption.IsSet && split.Amount == null)
                throw new ArgumentNullException(nameof(split.Amount), "Property is required for class Split.");

            if (split.DescriptionOption.IsSet && split.Description == null)
                throw new ArgumentNullException(nameof(split.Description), "Property is required for class Split.");

            if (split.ReferenceOption.IsSet && split.Reference == null)
                throw new ArgumentNullException(nameof(split.Reference), "Property is required for class Split.");

            var typeRawValue = Split.TypeEnumToJsonValue(split.Type);
            writer.WriteString("type", typeRawValue);
            if (split.AccountOption.IsSet)
                writer.WriteString("account", split.Account);

            if (split.AmountOption.IsSet)
            {
                writer.WritePropertyName("amount");
                JsonSerializer.Serialize(writer, split.Amount, jsonSerializerOptions);
            }
            if (split.DescriptionOption.IsSet)
                writer.WriteString("description", split.Description);

            if (split.ReferenceOption.IsSet)
                writer.WriteString("reference", split.Reference);
        }
    }
}
