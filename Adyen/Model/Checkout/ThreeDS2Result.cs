// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Adyen.Client;

namespace Adyen.Model.Checkout
{
    /// <summary>
    /// ThreeDS2Result
    /// </summary>
    public partial class ThreeDS2Result : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDS2Result" /> class.
        /// </summary>
        /// <param name="authenticationValue">The &#x60;authenticationValue&#x60; value as defined in the 3D Secure 2 specification.</param>
        /// <param name="cavvAlgorithm">The algorithm used by the ACS to calculate the authentication value, only for Cartes Bancaires integrations.</param>
        /// <param name="challengeCancel">Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).</param>
        /// <param name="dsTransID">The &#x60;dsTransID&#x60; value as defined in the 3D Secure 2 specification.</param>
        /// <param name="eci">The &#x60;eci&#x60; value as defined in the 3D Secure 2 specification.</param>
        /// <param name="exemptionIndicator">Indicates the exemption type that was applied by the issuer to the authentication, if exemption applied. Allowed values: * &#x60;lowValue&#x60; * &#x60;secureCorporate&#x60; * &#x60;trustedBeneficiary&#x60; * &#x60;transactionRiskAnalysis&#x60; </param>
        /// <param name="messageVersion">The &#x60;messageVersion&#x60; value as defined in the 3D Secure 2 specification.</param>
        /// <param name="riskScore">Risk score calculated by Cartes Bancaires Directory Server (DS).</param>
        /// <param name="threeDSRequestorChallengeInd">Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only</param>
        /// <param name="threeDSServerTransID">The &#x60;threeDSServerTransID&#x60; value as defined in the 3D Secure 2 specification.</param>
        /// <param name="timestamp">The &#x60;timestamp&#x60; value of the 3D Secure 2 authentication.</param>
        /// <param name="transStatus">The &#x60;transStatus&#x60; value as defined in the 3D Secure 2 specification.</param>
        /// <param name="transStatusReason">Provides information on why the &#x60;transStatus&#x60; field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).</param>
        /// <param name="whiteListStatus">The &#x60;whiteListStatus&#x60; value as defined in the 3D Secure 2 specification.</param>
        [JsonConstructor]
        public ThreeDS2Result(Option<string> authenticationValue = default, Option<string> cavvAlgorithm = default, Option<ChallengeCancelEnum?> challengeCancel = default, Option<string> dsTransID = default, Option<string> eci = default, Option<ExemptionIndicatorEnum?> exemptionIndicator = default, Option<string> messageVersion = default, Option<string> riskScore = default, Option<ThreeDSRequestorChallengeIndEnum?> threeDSRequestorChallengeInd = default, Option<string> threeDSServerTransID = default, Option<string> timestamp = default, Option<string> transStatus = default, Option<string> transStatusReason = default, Option<string> whiteListStatus = default)
        {
            AuthenticationValueOption = authenticationValue;
            CavvAlgorithmOption = cavvAlgorithm;
            ChallengeCancelOption = challengeCancel;
            DsTransIDOption = dsTransID;
            EciOption = eci;
            ExemptionIndicatorOption = exemptionIndicator;
            MessageVersionOption = messageVersion;
            RiskScoreOption = riskScore;
            ThreeDSRequestorChallengeIndOption = threeDSRequestorChallengeInd;
            ThreeDSServerTransIDOption = threeDSServerTransID;
            TimestampOption = timestamp;
            TransStatusOption = transStatus;
            TransStatusReasonOption = transStatusReason;
            WhiteListStatusOption = whiteListStatus;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).
        /// </summary>
        /// <value>Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).</value>
        public enum ChallengeCancelEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            _05 = 5,

            /// <summary>
            /// Enum _06 for value: 06
            /// </summary>
            _06 = 6,

            /// <summary>
            /// Enum _07 for value: 07
            /// </summary>
            _07 = 7
        }

        /// <summary>
        /// Returns a <see cref="ChallengeCancelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ChallengeCancelEnum ChallengeCancelEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ChallengeCancelEnum._01;

            if (value.Equals("02"))
                return ChallengeCancelEnum._02;

            if (value.Equals("03"))
                return ChallengeCancelEnum._03;

            if (value.Equals("04"))
                return ChallengeCancelEnum._04;

            if (value.Equals("05"))
                return ChallengeCancelEnum._05;

            if (value.Equals("06"))
                return ChallengeCancelEnum._06;

            if (value.Equals("07"))
                return ChallengeCancelEnum._07;

            throw new NotImplementedException($"Could not convert value to type ChallengeCancelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ChallengeCancelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChallengeCancelEnum? ChallengeCancelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ChallengeCancelEnum._01;

            if (value.Equals("02"))
                return ChallengeCancelEnum._02;

            if (value.Equals("03"))
                return ChallengeCancelEnum._03;

            if (value.Equals("04"))
                return ChallengeCancelEnum._04;

            if (value.Equals("05"))
                return ChallengeCancelEnum._05;

            if (value.Equals("06"))
                return ChallengeCancelEnum._06;

            if (value.Equals("07"))
                return ChallengeCancelEnum._07;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChallengeCancelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ChallengeCancelEnumToJsonValue(ChallengeCancelEnum? value)
        {
            if (value == ChallengeCancelEnum._01)
                return "01";

            if (value == ChallengeCancelEnum._02)
                return "02";

            if (value == ChallengeCancelEnum._03)
                return "03";

            if (value == ChallengeCancelEnum._04)
                return "04";

            if (value == ChallengeCancelEnum._05)
                return "05";

            if (value == ChallengeCancelEnum._06)
                return "06";

            if (value == ChallengeCancelEnum._07)
                return "07";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ChallengeCancel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChallengeCancelEnum?> ChallengeCancelOption { get; private set; }

        /// <summary>
        /// Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).
        /// </summary>
        /// <value>Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).</value>
        [JsonPropertyName("challengeCancel")]
        public ChallengeCancelEnum? ChallengeCancel { get { return this.ChallengeCancelOption; } set { this.ChallengeCancelOption = new Option<ChallengeCancelEnum?>(value); } }

        /// <summary>
        /// Indicates the exemption type that was applied by the issuer to the authentication, if exemption applied. Allowed values: * &#x60;lowValue&#x60; * &#x60;secureCorporate&#x60; * &#x60;trustedBeneficiary&#x60; * &#x60;transactionRiskAnalysis&#x60; 
        /// </summary>
        /// <value>Indicates the exemption type that was applied by the issuer to the authentication, if exemption applied. Allowed values: * &#x60;lowValue&#x60; * &#x60;secureCorporate&#x60; * &#x60;trustedBeneficiary&#x60; * &#x60;transactionRiskAnalysis&#x60; </value>
        public enum ExemptionIndicatorEnum
        {
            /// <summary>
            /// Enum LowValue for value: lowValue
            /// </summary>
            LowValue = 1,

            /// <summary>
            /// Enum SecureCorporate for value: secureCorporate
            /// </summary>
            SecureCorporate = 2,

            /// <summary>
            /// Enum TrustedBeneficiary for value: trustedBeneficiary
            /// </summary>
            TrustedBeneficiary = 3,

            /// <summary>
            /// Enum TransactionRiskAnalysis for value: transactionRiskAnalysis
            /// </summary>
            TransactionRiskAnalysis = 4
        }

        /// <summary>
        /// Returns a <see cref="ExemptionIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ExemptionIndicatorEnum ExemptionIndicatorEnumFromString(string value)
        {
            if (value.Equals("lowValue"))
                return ExemptionIndicatorEnum.LowValue;

            if (value.Equals("secureCorporate"))
                return ExemptionIndicatorEnum.SecureCorporate;

            if (value.Equals("trustedBeneficiary"))
                return ExemptionIndicatorEnum.TrustedBeneficiary;

            if (value.Equals("transactionRiskAnalysis"))
                return ExemptionIndicatorEnum.TransactionRiskAnalysis;

            throw new NotImplementedException($"Could not convert value to type ExemptionIndicatorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ExemptionIndicatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ExemptionIndicatorEnum? ExemptionIndicatorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("lowValue"))
                return ExemptionIndicatorEnum.LowValue;

            if (value.Equals("secureCorporate"))
                return ExemptionIndicatorEnum.SecureCorporate;

            if (value.Equals("trustedBeneficiary"))
                return ExemptionIndicatorEnum.TrustedBeneficiary;

            if (value.Equals("transactionRiskAnalysis"))
                return ExemptionIndicatorEnum.TransactionRiskAnalysis;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ExemptionIndicatorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ExemptionIndicatorEnumToJsonValue(ExemptionIndicatorEnum? value)
        {
            if (value == ExemptionIndicatorEnum.LowValue)
                return "lowValue";

            if (value == ExemptionIndicatorEnum.SecureCorporate)
                return "secureCorporate";

            if (value == ExemptionIndicatorEnum.TrustedBeneficiary)
                return "trustedBeneficiary";

            if (value == ExemptionIndicatorEnum.TransactionRiskAnalysis)
                return "transactionRiskAnalysis";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ExemptionIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ExemptionIndicatorEnum?> ExemptionIndicatorOption { get; private set; }

        /// <summary>
        /// Indicates the exemption type that was applied by the issuer to the authentication, if exemption applied. Allowed values: * &#x60;lowValue&#x60; * &#x60;secureCorporate&#x60; * &#x60;trustedBeneficiary&#x60; * &#x60;transactionRiskAnalysis&#x60; 
        /// </summary>
        /// <value>Indicates the exemption type that was applied by the issuer to the authentication, if exemption applied. Allowed values: * &#x60;lowValue&#x60; * &#x60;secureCorporate&#x60; * &#x60;trustedBeneficiary&#x60; * &#x60;transactionRiskAnalysis&#x60; </value>
        [JsonPropertyName("exemptionIndicator")]
        public ExemptionIndicatorEnum? ExemptionIndicator { get { return this.ExemptionIndicatorOption; } set { this.ExemptionIndicatorOption = new Option<ExemptionIndicatorEnum?>(value); } }

        /// <summary>
        /// Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only
        /// </summary>
        /// <value>Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only</value>
        public enum ThreeDSRequestorChallengeIndEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            _05 = 5,

            /// <summary>
            /// Enum _06 for value: 06
            /// </summary>
            _06 = 6
        }

        /// <summary>
        /// Returns a <see cref="ThreeDSRequestorChallengeIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ThreeDSRequestorChallengeIndEnum ThreeDSRequestorChallengeIndEnumFromString(string value)
        {
            if (value.Equals("01"))
                return ThreeDSRequestorChallengeIndEnum._01;

            if (value.Equals("02"))
                return ThreeDSRequestorChallengeIndEnum._02;

            if (value.Equals("03"))
                return ThreeDSRequestorChallengeIndEnum._03;

            if (value.Equals("04"))
                return ThreeDSRequestorChallengeIndEnum._04;

            if (value.Equals("05"))
                return ThreeDSRequestorChallengeIndEnum._05;

            if (value.Equals("06"))
                return ThreeDSRequestorChallengeIndEnum._06;

            throw new NotImplementedException($"Could not convert value to type ThreeDSRequestorChallengeIndEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ThreeDSRequestorChallengeIndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThreeDSRequestorChallengeIndEnum? ThreeDSRequestorChallengeIndEnumFromStringOrDefault(string value)
        {
            if (value.Equals("01"))
                return ThreeDSRequestorChallengeIndEnum._01;

            if (value.Equals("02"))
                return ThreeDSRequestorChallengeIndEnum._02;

            if (value.Equals("03"))
                return ThreeDSRequestorChallengeIndEnum._03;

            if (value.Equals("04"))
                return ThreeDSRequestorChallengeIndEnum._04;

            if (value.Equals("05"))
                return ThreeDSRequestorChallengeIndEnum._05;

            if (value.Equals("06"))
                return ThreeDSRequestorChallengeIndEnum._06;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ThreeDSRequestorChallengeIndEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ThreeDSRequestorChallengeIndEnumToJsonValue(ThreeDSRequestorChallengeIndEnum? value)
        {
            if (value == ThreeDSRequestorChallengeIndEnum._01)
                return "01";

            if (value == ThreeDSRequestorChallengeIndEnum._02)
                return "02";

            if (value == ThreeDSRequestorChallengeIndEnum._03)
                return "03";

            if (value == ThreeDSRequestorChallengeIndEnum._04)
                return "04";

            if (value == ThreeDSRequestorChallengeIndEnum._05)
                return "05";

            if (value == ThreeDSRequestorChallengeIndEnum._06)
                return "06";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ThreeDSRequestorChallengeInd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThreeDSRequestorChallengeIndEnum?> ThreeDSRequestorChallengeIndOption { get; private set; }

        /// <summary>
        /// Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only
        /// </summary>
        /// <value>Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only</value>
        [JsonPropertyName("threeDSRequestorChallengeInd")]
        public ThreeDSRequestorChallengeIndEnum? ThreeDSRequestorChallengeInd { get { return this.ThreeDSRequestorChallengeIndOption; } set { this.ThreeDSRequestorChallengeIndOption = new Option<ThreeDSRequestorChallengeIndEnum?>(value); } }

        /// <summary>
        /// Used to track the state of AuthenticationValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AuthenticationValueOption { get; private set; }

        /// <summary>
        /// The &#x60;authenticationValue&#x60; value as defined in the 3D Secure 2 specification.
        /// </summary>
        /// <value>The &#x60;authenticationValue&#x60; value as defined in the 3D Secure 2 specification.</value>
        [JsonPropertyName("authenticationValue")]
        public string AuthenticationValue { get { return this.AuthenticationValueOption; } set { this.AuthenticationValueOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CavvAlgorithm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CavvAlgorithmOption { get; private set; }

        /// <summary>
        /// The algorithm used by the ACS to calculate the authentication value, only for Cartes Bancaires integrations.
        /// </summary>
        /// <value>The algorithm used by the ACS to calculate the authentication value, only for Cartes Bancaires integrations.</value>
        [JsonPropertyName("cavvAlgorithm")]
        public string CavvAlgorithm { get { return this.CavvAlgorithmOption; } set { this.CavvAlgorithmOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DsTransID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DsTransIDOption { get; private set; }

        /// <summary>
        /// The &#x60;dsTransID&#x60; value as defined in the 3D Secure 2 specification.
        /// </summary>
        /// <value>The &#x60;dsTransID&#x60; value as defined in the 3D Secure 2 specification.</value>
        [JsonPropertyName("dsTransID")]
        public string DsTransID { get { return this.DsTransIDOption; } set { this.DsTransIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Eci
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EciOption { get; private set; }

        /// <summary>
        /// The &#x60;eci&#x60; value as defined in the 3D Secure 2 specification.
        /// </summary>
        /// <value>The &#x60;eci&#x60; value as defined in the 3D Secure 2 specification.</value>
        [JsonPropertyName("eci")]
        public string Eci { get { return this.EciOption; } set { this.EciOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MessageVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageVersionOption { get; private set; }

        /// <summary>
        /// The &#x60;messageVersion&#x60; value as defined in the 3D Secure 2 specification.
        /// </summary>
        /// <value>The &#x60;messageVersion&#x60; value as defined in the 3D Secure 2 specification.</value>
        [JsonPropertyName("messageVersion")]
        public string MessageVersion { get { return this.MessageVersionOption; } set { this.MessageVersionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiskScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiskScoreOption { get; private set; }

        /// <summary>
        /// Risk score calculated by Cartes Bancaires Directory Server (DS).
        /// </summary>
        /// <value>Risk score calculated by Cartes Bancaires Directory Server (DS).</value>
        [JsonPropertyName("riskScore")]
        public string RiskScore { get { return this.RiskScoreOption; } set { this.RiskScoreOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreeDSServerTransID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ThreeDSServerTransIDOption { get; private set; }

        /// <summary>
        /// The &#x60;threeDSServerTransID&#x60; value as defined in the 3D Secure 2 specification.
        /// </summary>
        /// <value>The &#x60;threeDSServerTransID&#x60; value as defined in the 3D Secure 2 specification.</value>
        [JsonPropertyName("threeDSServerTransID")]
        public string ThreeDSServerTransID { get { return this.ThreeDSServerTransIDOption; } set { this.ThreeDSServerTransIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TimestampOption { get; private set; }

        /// <summary>
        /// The &#x60;timestamp&#x60; value of the 3D Secure 2 authentication.
        /// </summary>
        /// <value>The &#x60;timestamp&#x60; value of the 3D Secure 2 authentication.</value>
        [JsonPropertyName("timestamp")]
        public string Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TransStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TransStatusOption { get; private set; }

        /// <summary>
        /// The &#x60;transStatus&#x60; value as defined in the 3D Secure 2 specification.
        /// </summary>
        /// <value>The &#x60;transStatus&#x60; value as defined in the 3D Secure 2 specification.</value>
        [JsonPropertyName("transStatus")]
        public string TransStatus { get { return this.TransStatusOption; } set { this.TransStatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TransStatusReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TransStatusReasonOption { get; private set; }

        /// <summary>
        /// Provides information on why the &#x60;transStatus&#x60; field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).
        /// </summary>
        /// <value>Provides information on why the &#x60;transStatus&#x60; field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).</value>
        [JsonPropertyName("transStatusReason")]
        public string TransStatusReason { get { return this.TransStatusReasonOption; } set { this.TransStatusReasonOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of WhiteListStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> WhiteListStatusOption { get; private set; }

        /// <summary>
        /// The &#x60;whiteListStatus&#x60; value as defined in the 3D Secure 2 specification.
        /// </summary>
        /// <value>The &#x60;whiteListStatus&#x60; value as defined in the 3D Secure 2 specification.</value>
        [JsonPropertyName("whiteListStatus")]
        public string WhiteListStatus { get { return this.WhiteListStatusOption; } set { this.WhiteListStatusOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDS2Result {\n");
            sb.Append("  AuthenticationValue: ").Append(AuthenticationValue).Append("\n");
            sb.Append("  CavvAlgorithm: ").Append(CavvAlgorithm).Append("\n");
            sb.Append("  ChallengeCancel: ").Append(ChallengeCancel).Append("\n");
            sb.Append("  DsTransID: ").Append(DsTransID).Append("\n");
            sb.Append("  Eci: ").Append(Eci).Append("\n");
            sb.Append("  ExemptionIndicator: ").Append(ExemptionIndicator).Append("\n");
            sb.Append("  MessageVersion: ").Append(MessageVersion).Append("\n");
            sb.Append("  RiskScore: ").Append(RiskScore).Append("\n");
            sb.Append("  ThreeDSRequestorChallengeInd: ").Append(ThreeDSRequestorChallengeInd).Append("\n");
            sb.Append("  ThreeDSServerTransID: ").Append(ThreeDSServerTransID).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TransStatus: ").Append(TransStatus).Append("\n");
            sb.Append("  TransStatusReason: ").Append(TransStatusReason).Append("\n");
            sb.Append("  WhiteListStatus: ").Append(WhiteListStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ThreeDS2Result" />
    /// </summary>
    public class ThreeDS2ResultJsonConverter : JsonConverter<ThreeDS2Result>
    {
        /// <summary>
        /// Deserializes json to <see cref="ThreeDS2Result" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ThreeDS2Result Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> authenticationValue = default;
            Option<string> cavvAlgorithm = default;
            Option<ThreeDS2Result.ChallengeCancelEnum?> challengeCancel = default;
            Option<string> dsTransID = default;
            Option<string> eci = default;
            Option<ThreeDS2Result.ExemptionIndicatorEnum?> exemptionIndicator = default;
            Option<string> messageVersion = default;
            Option<string> riskScore = default;
            Option<ThreeDS2Result.ThreeDSRequestorChallengeIndEnum?> threeDSRequestorChallengeInd = default;
            Option<string> threeDSServerTransID = default;
            Option<string> timestamp = default;
            Option<string> transStatus = default;
            Option<string> transStatusReason = default;
            Option<string> whiteListStatus = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "authenticationValue":
                            authenticationValue = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cavvAlgorithm":
                            cavvAlgorithm = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "challengeCancel":
                            string challengeCancelRawValue = utf8JsonReader.GetString();
                            if (challengeCancelRawValue != null)
                                challengeCancel = new Option<ThreeDS2Result.ChallengeCancelEnum?>(ThreeDS2Result.ChallengeCancelEnumFromStringOrDefault(challengeCancelRawValue));
                            break;
                        case "dsTransID":
                            dsTransID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "eci":
                            eci = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "exemptionIndicator":
                            string exemptionIndicatorRawValue = utf8JsonReader.GetString();
                            if (exemptionIndicatorRawValue != null)
                                exemptionIndicator = new Option<ThreeDS2Result.ExemptionIndicatorEnum?>(ThreeDS2Result.ExemptionIndicatorEnumFromStringOrDefault(exemptionIndicatorRawValue));
                            break;
                        case "messageVersion":
                            messageVersion = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riskScore":
                            riskScore = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threeDSRequestorChallengeInd":
                            string threeDSRequestorChallengeIndRawValue = utf8JsonReader.GetString();
                            if (threeDSRequestorChallengeIndRawValue != null)
                                threeDSRequestorChallengeInd = new Option<ThreeDS2Result.ThreeDSRequestorChallengeIndEnum?>(ThreeDS2Result.ThreeDSRequestorChallengeIndEnumFromStringOrDefault(threeDSRequestorChallengeIndRawValue));
                            break;
                        case "threeDSServerTransID":
                            threeDSServerTransID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "timestamp":
                            timestamp = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "transStatus":
                            transStatus = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "transStatusReason":
                            transStatusReason = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "whiteListStatus":
                            whiteListStatus = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (authenticationValue.IsSet && authenticationValue.Value == null)
                throw new ArgumentNullException(nameof(authenticationValue), "Property is not nullable for class ThreeDS2Result.");

            if (cavvAlgorithm.IsSet && cavvAlgorithm.Value == null)
                throw new ArgumentNullException(nameof(cavvAlgorithm), "Property is not nullable for class ThreeDS2Result.");

            if (challengeCancel.IsSet && challengeCancel.Value == null)
                throw new ArgumentNullException(nameof(challengeCancel), "Property is not nullable for class ThreeDS2Result.");

            if (dsTransID.IsSet && dsTransID.Value == null)
                throw new ArgumentNullException(nameof(dsTransID), "Property is not nullable for class ThreeDS2Result.");

            if (eci.IsSet && eci.Value == null)
                throw new ArgumentNullException(nameof(eci), "Property is not nullable for class ThreeDS2Result.");

            if (exemptionIndicator.IsSet && exemptionIndicator.Value == null)
                throw new ArgumentNullException(nameof(exemptionIndicator), "Property is not nullable for class ThreeDS2Result.");

            if (messageVersion.IsSet && messageVersion.Value == null)
                throw new ArgumentNullException(nameof(messageVersion), "Property is not nullable for class ThreeDS2Result.");

            if (riskScore.IsSet && riskScore.Value == null)
                throw new ArgumentNullException(nameof(riskScore), "Property is not nullable for class ThreeDS2Result.");

            if (threeDSRequestorChallengeInd.IsSet && threeDSRequestorChallengeInd.Value == null)
                throw new ArgumentNullException(nameof(threeDSRequestorChallengeInd), "Property is not nullable for class ThreeDS2Result.");

            if (threeDSServerTransID.IsSet && threeDSServerTransID.Value == null)
                throw new ArgumentNullException(nameof(threeDSServerTransID), "Property is not nullable for class ThreeDS2Result.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class ThreeDS2Result.");

            if (transStatus.IsSet && transStatus.Value == null)
                throw new ArgumentNullException(nameof(transStatus), "Property is not nullable for class ThreeDS2Result.");

            if (transStatusReason.IsSet && transStatusReason.Value == null)
                throw new ArgumentNullException(nameof(transStatusReason), "Property is not nullable for class ThreeDS2Result.");

            if (whiteListStatus.IsSet && whiteListStatus.Value == null)
                throw new ArgumentNullException(nameof(whiteListStatus), "Property is not nullable for class ThreeDS2Result.");

            return new ThreeDS2Result(authenticationValue, cavvAlgorithm, challengeCancel, dsTransID, eci, exemptionIndicator, messageVersion, riskScore, threeDSRequestorChallengeInd, threeDSServerTransID, timestamp, transStatus, transStatusReason, whiteListStatus);
        }

        /// <summary>
        /// Serializes a <see cref="ThreeDS2Result" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="threeDS2Result"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ThreeDS2Result threeDS2Result, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, threeDS2Result, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ThreeDS2Result" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="threeDS2Result"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ThreeDS2Result threeDS2Result, JsonSerializerOptions jsonSerializerOptions)
        {
            if (threeDS2Result.AuthenticationValueOption.IsSet && threeDS2Result.AuthenticationValue == null)
                throw new ArgumentNullException(nameof(threeDS2Result.AuthenticationValue), "Property is required for class ThreeDS2Result.");

            if (threeDS2Result.CavvAlgorithmOption.IsSet && threeDS2Result.CavvAlgorithm == null)
                throw new ArgumentNullException(nameof(threeDS2Result.CavvAlgorithm), "Property is required for class ThreeDS2Result.");

            if (threeDS2Result.DsTransIDOption.IsSet && threeDS2Result.DsTransID == null)
                throw new ArgumentNullException(nameof(threeDS2Result.DsTransID), "Property is required for class ThreeDS2Result.");

            if (threeDS2Result.EciOption.IsSet && threeDS2Result.Eci == null)
                throw new ArgumentNullException(nameof(threeDS2Result.Eci), "Property is required for class ThreeDS2Result.");

            if (threeDS2Result.MessageVersionOption.IsSet && threeDS2Result.MessageVersion == null)
                throw new ArgumentNullException(nameof(threeDS2Result.MessageVersion), "Property is required for class ThreeDS2Result.");

            if (threeDS2Result.RiskScoreOption.IsSet && threeDS2Result.RiskScore == null)
                throw new ArgumentNullException(nameof(threeDS2Result.RiskScore), "Property is required for class ThreeDS2Result.");

            if (threeDS2Result.ThreeDSServerTransIDOption.IsSet && threeDS2Result.ThreeDSServerTransID == null)
                throw new ArgumentNullException(nameof(threeDS2Result.ThreeDSServerTransID), "Property is required for class ThreeDS2Result.");

            if (threeDS2Result.TimestampOption.IsSet && threeDS2Result.Timestamp == null)
                throw new ArgumentNullException(nameof(threeDS2Result.Timestamp), "Property is required for class ThreeDS2Result.");

            if (threeDS2Result.TransStatusOption.IsSet && threeDS2Result.TransStatus == null)
                throw new ArgumentNullException(nameof(threeDS2Result.TransStatus), "Property is required for class ThreeDS2Result.");

            if (threeDS2Result.TransStatusReasonOption.IsSet && threeDS2Result.TransStatusReason == null)
                throw new ArgumentNullException(nameof(threeDS2Result.TransStatusReason), "Property is required for class ThreeDS2Result.");

            if (threeDS2Result.WhiteListStatusOption.IsSet && threeDS2Result.WhiteListStatus == null)
                throw new ArgumentNullException(nameof(threeDS2Result.WhiteListStatus), "Property is required for class ThreeDS2Result.");

            if (threeDS2Result.AuthenticationValueOption.IsSet)
                writer.WriteString("authenticationValue", threeDS2Result.AuthenticationValue);

            if (threeDS2Result.CavvAlgorithmOption.IsSet)
                writer.WriteString("cavvAlgorithm", threeDS2Result.CavvAlgorithm);

            var challengeCancelRawValue = ThreeDS2Result.ChallengeCancelEnumToJsonValue(threeDS2Result.ChallengeCancelOption.Value.Value);
            writer.WriteString("challengeCancel", challengeCancelRawValue);
            if (threeDS2Result.DsTransIDOption.IsSet)
                writer.WriteString("dsTransID", threeDS2Result.DsTransID);

            if (threeDS2Result.EciOption.IsSet)
                writer.WriteString("eci", threeDS2Result.Eci);

            var exemptionIndicatorRawValue = ThreeDS2Result.ExemptionIndicatorEnumToJsonValue(threeDS2Result.ExemptionIndicatorOption.Value.Value);
            writer.WriteString("exemptionIndicator", exemptionIndicatorRawValue);
            if (threeDS2Result.MessageVersionOption.IsSet)
                writer.WriteString("messageVersion", threeDS2Result.MessageVersion);

            if (threeDS2Result.RiskScoreOption.IsSet)
                writer.WriteString("riskScore", threeDS2Result.RiskScore);

            var threeDSRequestorChallengeIndRawValue = ThreeDS2Result.ThreeDSRequestorChallengeIndEnumToJsonValue(threeDS2Result.ThreeDSRequestorChallengeIndOption.Value.Value);
            writer.WriteString("threeDSRequestorChallengeInd", threeDSRequestorChallengeIndRawValue);
            if (threeDS2Result.ThreeDSServerTransIDOption.IsSet)
                writer.WriteString("threeDSServerTransID", threeDS2Result.ThreeDSServerTransID);

            if (threeDS2Result.TimestampOption.IsSet)
                writer.WriteString("timestamp", threeDS2Result.Timestamp);

            if (threeDS2Result.TransStatusOption.IsSet)
                writer.WriteString("transStatus", threeDS2Result.TransStatus);

            if (threeDS2Result.TransStatusReasonOption.IsSet)
                writer.WriteString("transStatusReason", threeDS2Result.TransStatusReason);

            if (threeDS2Result.WhiteListStatusOption.IsSet)
                writer.WriteString("whiteListStatus", threeDS2Result.WhiteListStatus);
        }
    }
}
