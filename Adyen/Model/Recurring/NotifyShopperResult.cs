/*
* Adyen Recurring API
*
*
* The version of the OpenAPI document: 68
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Recurring
{
    /// <summary>
    /// NotifyShopperResult
    /// </summary>
    [DataContract(Name = "NotifyShopperResult")]
    public partial class NotifyShopperResult : IEquatable<NotifyShopperResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotifyShopperResult" /> class.
        /// </summary>
        /// <param name="displayedReference">Reference of Pre-debit notification that is displayed to the shopper.</param>
        /// <param name="message">A simple description of the &#x60;resultCode&#x60;..</param>
        /// <param name="pspReference">The unique reference that is associated with the request..</param>
        /// <param name="reference">Reference of Pre-debit notification sent in my the merchant.</param>
        /// <param name="resultCode">The code indicating the status of notification..</param>
        /// <param name="shopperNotificationReference">The unique reference for the request sent downstream..</param>
        /// <param name="storedPaymentMethodId">This is the recurringDetailReference returned in the response when token was created.</param>
        public NotifyShopperResult(string displayedReference = default(string), string message = default(string), string pspReference = default(string), string reference = default(string), string resultCode = default(string), string shopperNotificationReference = default(string), string storedPaymentMethodId = default(string))
        {
            this.DisplayedReference = displayedReference;
            this.Message = message;
            this.PspReference = pspReference;
            this.Reference = reference;
            this.ResultCode = resultCode;
            this.ShopperNotificationReference = shopperNotificationReference;
            this.StoredPaymentMethodId = storedPaymentMethodId;
        }

        /// <summary>
        /// Reference of Pre-debit notification that is displayed to the shopper
        /// </summary>
        /// <value>Reference of Pre-debit notification that is displayed to the shopper</value>
        [DataMember(Name = "displayedReference", EmitDefaultValue = false)]
        public string DisplayedReference { get; set; }

        /// <summary>
        /// A simple description of the &#x60;resultCode&#x60;.
        /// </summary>
        /// <value>A simple description of the &#x60;resultCode&#x60;.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// The unique reference that is associated with the request.
        /// </summary>
        /// <value>The unique reference that is associated with the request.</value>
        [DataMember(Name = "pspReference", EmitDefaultValue = false)]
        public string PspReference { get; set; }

        /// <summary>
        /// Reference of Pre-debit notification sent in my the merchant
        /// </summary>
        /// <value>Reference of Pre-debit notification sent in my the merchant</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// The code indicating the status of notification.
        /// </summary>
        /// <value>The code indicating the status of notification.</value>
        [DataMember(Name = "resultCode", EmitDefaultValue = false)]
        public string ResultCode { get; set; }

        /// <summary>
        /// The unique reference for the request sent downstream.
        /// </summary>
        /// <value>The unique reference for the request sent downstream.</value>
        [DataMember(Name = "shopperNotificationReference", EmitDefaultValue = false)]
        public string ShopperNotificationReference { get; set; }

        /// <summary>
        /// This is the recurringDetailReference returned in the response when token was created
        /// </summary>
        /// <value>This is the recurringDetailReference returned in the response when token was created</value>
        [DataMember(Name = "storedPaymentMethodId", EmitDefaultValue = false)]
        public string StoredPaymentMethodId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotifyShopperResult {\n");
            sb.Append("  DisplayedReference: ").Append(DisplayedReference).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  ShopperNotificationReference: ").Append(ShopperNotificationReference).Append("\n");
            sb.Append("  StoredPaymentMethodId: ").Append(StoredPaymentMethodId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotifyShopperResult);
        }

        /// <summary>
        /// Returns true if NotifyShopperResult instances are equal
        /// </summary>
        /// <param name="input">Instance of NotifyShopperResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotifyShopperResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayedReference == input.DisplayedReference ||
                    (this.DisplayedReference != null &&
                    this.DisplayedReference.Equals(input.DisplayedReference))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.PspReference == input.PspReference ||
                    (this.PspReference != null &&
                    this.PspReference.Equals(input.PspReference))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.ResultCode == input.ResultCode ||
                    (this.ResultCode != null &&
                    this.ResultCode.Equals(input.ResultCode))
                ) && 
                (
                    this.ShopperNotificationReference == input.ShopperNotificationReference ||
                    (this.ShopperNotificationReference != null &&
                    this.ShopperNotificationReference.Equals(input.ShopperNotificationReference))
                ) && 
                (
                    this.StoredPaymentMethodId == input.StoredPaymentMethodId ||
                    (this.StoredPaymentMethodId != null &&
                    this.StoredPaymentMethodId.Equals(input.StoredPaymentMethodId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayedReference != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayedReference.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.PspReference != null)
                {
                    hashCode = (hashCode * 59) + this.PspReference.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.ResultCode != null)
                {
                    hashCode = (hashCode * 59) + this.ResultCode.GetHashCode();
                }
                if (this.ShopperNotificationReference != null)
                {
                    hashCode = (hashCode * 59) + this.ShopperNotificationReference.GetHashCode();
                }
                if (this.StoredPaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.StoredPaymentMethodId.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
