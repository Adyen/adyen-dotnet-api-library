/*
* Adyen Recurring API
*
*
* The version of the OpenAPI document: 68
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Recurring
{
    /// <summary>
    /// ScheduleAccountUpdaterRequest
    /// </summary>
    [DataContract(Name = "ScheduleAccountUpdaterRequest")]
    public partial class ScheduleAccountUpdaterRequest : IEquatable<ScheduleAccountUpdaterRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleAccountUpdaterRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScheduleAccountUpdaterRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleAccountUpdaterRequest" /> class.
        /// </summary>
        /// <param name="additionalData">This field contains additional data, which may be required for a particular request..</param>
        /// <param name="card">card.</param>
        /// <param name="merchantAccount">Account of the merchant. (required).</param>
        /// <param name="reference">A reference that merchants can apply for the call. (required).</param>
        /// <param name="selectedRecurringDetailReference">The selected detail recurring reference.  Optional if &#x60;card&#x60; is provided..</param>
        /// <param name="shopperReference">The reference of the shopper that owns the recurring contract.  Optional if &#x60;card&#x60; is provided..</param>
        public ScheduleAccountUpdaterRequest(Dictionary<string, string> additionalData = default(Dictionary<string, string>), Card card = default(Card), string merchantAccount = default(string), string reference = default(string), string selectedRecurringDetailReference = default(string), string shopperReference = default(string))
        {
            this.MerchantAccount = merchantAccount;
            this.Reference = reference;
            this.AdditionalData = additionalData;
            this.Card = card;
            this.SelectedRecurringDetailReference = selectedRecurringDetailReference;
            this.ShopperReference = shopperReference;
        }

        /// <summary>
        /// This field contains additional data, which may be required for a particular request.
        /// </summary>
        /// <value>This field contains additional data, which may be required for a particular request.</value>
        [DataMember(Name = "additionalData", EmitDefaultValue = false)]
        public Dictionary<string, string> AdditionalData { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name = "card", EmitDefaultValue = false)]
        public Card Card { get; set; }

        /// <summary>
        /// Account of the merchant.
        /// </summary>
        /// <value>Account of the merchant.</value>
        [DataMember(Name = "merchantAccount", IsRequired = false, EmitDefaultValue = false)]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// A reference that merchants can apply for the call.
        /// </summary>
        /// <value>A reference that merchants can apply for the call.</value>
        [DataMember(Name = "reference", IsRequired = false, EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// The selected detail recurring reference.  Optional if &#x60;card&#x60; is provided.
        /// </summary>
        /// <value>The selected detail recurring reference.  Optional if &#x60;card&#x60; is provided.</value>
        [DataMember(Name = "selectedRecurringDetailReference", EmitDefaultValue = false)]
        public string SelectedRecurringDetailReference { get; set; }

        /// <summary>
        /// The reference of the shopper that owns the recurring contract.  Optional if &#x60;card&#x60; is provided.
        /// </summary>
        /// <value>The reference of the shopper that owns the recurring contract.  Optional if &#x60;card&#x60; is provided.</value>
        [DataMember(Name = "shopperReference", EmitDefaultValue = false)]
        public string ShopperReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleAccountUpdaterRequest {\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  SelectedRecurringDetailReference: ").Append(SelectedRecurringDetailReference).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleAccountUpdaterRequest);
        }

        /// <summary>
        /// Returns true if ScheduleAccountUpdaterRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleAccountUpdaterRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleAccountUpdaterRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdditionalData == input.AdditionalData ||
                    this.AdditionalData != null &&
                    input.AdditionalData != null &&
                    this.AdditionalData.SequenceEqual(input.AdditionalData)
                ) && 
                (
                    this.Card == input.Card ||
                    (this.Card != null &&
                    this.Card.Equals(input.Card))
                ) && 
                (
                    this.MerchantAccount == input.MerchantAccount ||
                    (this.MerchantAccount != null &&
                    this.MerchantAccount.Equals(input.MerchantAccount))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.SelectedRecurringDetailReference == input.SelectedRecurringDetailReference ||
                    (this.SelectedRecurringDetailReference != null &&
                    this.SelectedRecurringDetailReference.Equals(input.SelectedRecurringDetailReference))
                ) && 
                (
                    this.ShopperReference == input.ShopperReference ||
                    (this.ShopperReference != null &&
                    this.ShopperReference.Equals(input.ShopperReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalData != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalData.GetHashCode();
                }
                if (this.Card != null)
                {
                    hashCode = (hashCode * 59) + this.Card.GetHashCode();
                }
                if (this.MerchantAccount != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantAccount.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.SelectedRecurringDetailReference != null)
                {
                    hashCode = (hashCode * 59) + this.SelectedRecurringDetailReference.GetHashCode();
                }
                if (this.ShopperReference != null)
                {
                    hashCode = (hashCode * 59) + this.ShopperReference.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
