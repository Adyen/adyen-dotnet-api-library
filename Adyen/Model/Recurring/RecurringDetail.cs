/*
* Adyen Recurring API
*
*
* The version of the OpenAPI document: 68
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Recurring
{
    /// <summary>
    /// RecurringDetail
    /// </summary>
    [DataContract(Name = "RecurringDetail")]
    public partial class RecurringDetail : IEquatable<RecurringDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecurringDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringDetail" /> class.
        /// </summary>
        /// <param name="additionalData">This field contains additional data, which may be returned in a particular response.  The additionalData object consists of entries, each of which includes the key and value..</param>
        /// <param name="alias">The alias of the credit card number.  Applies only to recurring contracts storing credit card details.</param>
        /// <param name="aliasType">The alias type of the credit card number.  Applies only to recurring contracts storing credit card details..</param>
        /// <param name="bank">bank.</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="card">card.</param>
        /// <param name="contractTypes">Types of recurring contracts..</param>
        /// <param name="creationDate">The date when the recurring details were created..</param>
        /// <param name="firstPspReference">The &#x60;pspReference&#x60; of the first recurring payment that created the recurring detail..</param>
        /// <param name="name">An optional descriptive name for this recurring detail..</param>
        /// <param name="networkTxReference">Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID..</param>
        /// <param name="paymentMethodVariant">The  type or sub-brand of a payment method used, e.g. Visa Debit, Visa Corporate, etc. For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant)..</param>
        /// <param name="recurringDetailReference">The reference that uniquely identifies the recurring detail. (required).</param>
        /// <param name="shopperName">shopperName.</param>
        /// <param name="socialSecurityNumber">A shopper&#39;s social security number (only in countries where it is legal to collect)..</param>
        /// <param name="tokenDetails">tokenDetails.</param>
        /// <param name="variant">The payment method, such as â€œmc\&quot;, \&quot;visa\&quot;, \&quot;ideal\&quot;, \&quot;paypal\&quot;. (required).</param>
        public RecurringDetail(Dictionary<string, string> additionalData = default(Dictionary<string, string>), string alias = default(string), string aliasType = default(string), BankAccount bank = default(BankAccount), Address billingAddress = default(Address), Card card = default(Card), List<string> contractTypes = default(List<string>), DateTime creationDate = default(DateTime), string firstPspReference = default(string), string name = default(string), string networkTxReference = default(string), string paymentMethodVariant = default(string), string recurringDetailReference = default(string), Name shopperName = default(Name), string socialSecurityNumber = default(string), TokenDetails tokenDetails = default(TokenDetails), string variant = default(string))
        {
            this.RecurringDetailReference = recurringDetailReference;
            this.Variant = variant;
            this.AdditionalData = additionalData;
            this.Alias = alias;
            this.AliasType = aliasType;
            this.Bank = bank;
            this.BillingAddress = billingAddress;
            this.Card = card;
            this.ContractTypes = contractTypes;
            this.CreationDate = creationDate;
            this.FirstPspReference = firstPspReference;
            this.Name = name;
            this.NetworkTxReference = networkTxReference;
            this.PaymentMethodVariant = paymentMethodVariant;
            this.ShopperName = shopperName;
            this.SocialSecurityNumber = socialSecurityNumber;
            this.TokenDetails = tokenDetails;
        }

        /// <summary>
        /// This field contains additional data, which may be returned in a particular response.  The additionalData object consists of entries, each of which includes the key and value.
        /// </summary>
        /// <value>This field contains additional data, which may be returned in a particular response.  The additionalData object consists of entries, each of which includes the key and value.</value>
        [DataMember(Name = "additionalData", EmitDefaultValue = false)]
        public Dictionary<string, string> AdditionalData { get; set; }

        /// <summary>
        /// The alias of the credit card number.  Applies only to recurring contracts storing credit card details
        /// </summary>
        /// <value>The alias of the credit card number.  Applies only to recurring contracts storing credit card details</value>
        [DataMember(Name = "alias", EmitDefaultValue = false)]
        public string Alias { get; set; }

        /// <summary>
        /// The alias type of the credit card number.  Applies only to recurring contracts storing credit card details.
        /// </summary>
        /// <value>The alias type of the credit card number.  Applies only to recurring contracts storing credit card details.</value>
        [DataMember(Name = "aliasType", EmitDefaultValue = false)]
        public string AliasType { get; set; }

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>
        [DataMember(Name = "bank", EmitDefaultValue = false)]
        public BankAccount Bank { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "billingAddress", EmitDefaultValue = false)]
        public Address BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name = "card", EmitDefaultValue = false)]
        public Card Card { get; set; }

        /// <summary>
        /// Types of recurring contracts.
        /// </summary>
        /// <value>Types of recurring contracts.</value>
        [DataMember(Name = "contractTypes", EmitDefaultValue = false)]
        public List<string> ContractTypes { get; set; }

        /// <summary>
        /// The date when the recurring details were created.
        /// </summary>
        /// <value>The date when the recurring details were created.</value>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// The &#x60;pspReference&#x60; of the first recurring payment that created the recurring detail.
        /// </summary>
        /// <value>The &#x60;pspReference&#x60; of the first recurring payment that created the recurring detail.</value>
        [DataMember(Name = "firstPspReference", EmitDefaultValue = false)]
        public string FirstPspReference { get; set; }

        /// <summary>
        /// An optional descriptive name for this recurring detail.
        /// </summary>
        /// <value>An optional descriptive name for this recurring detail.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.
        /// </summary>
        /// <value>Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.</value>
        [DataMember(Name = "networkTxReference", EmitDefaultValue = false)]
        public string NetworkTxReference { get; set; }

        /// <summary>
        /// The  type or sub-brand of a payment method used, e.g. Visa Debit, Visa Corporate, etc. For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).
        /// </summary>
        /// <value>The  type or sub-brand of a payment method used, e.g. Visa Debit, Visa Corporate, etc. For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).</value>
        [DataMember(Name = "paymentMethodVariant", EmitDefaultValue = false)]
        public string PaymentMethodVariant { get; set; }

        /// <summary>
        /// The reference that uniquely identifies the recurring detail.
        /// </summary>
        /// <value>The reference that uniquely identifies the recurring detail.</value>
        [DataMember(Name = "recurringDetailReference", IsRequired = false, EmitDefaultValue = false)]
        public string RecurringDetailReference { get; set; }

        /// <summary>
        /// Gets or Sets ShopperName
        /// </summary>
        [DataMember(Name = "shopperName", EmitDefaultValue = false)]
        public Name ShopperName { get; set; }

        /// <summary>
        /// A shopper&#39;s social security number (only in countries where it is legal to collect).
        /// </summary>
        /// <value>A shopper&#39;s social security number (only in countries where it is legal to collect).</value>
        [DataMember(Name = "socialSecurityNumber", EmitDefaultValue = false)]
        public string SocialSecurityNumber { get; set; }

        /// <summary>
        /// Gets or Sets TokenDetails
        /// </summary>
        [DataMember(Name = "tokenDetails", EmitDefaultValue = false)]
        public TokenDetails TokenDetails { get; set; }

        /// <summary>
        /// The payment method, such as â€œmc\&quot;, \&quot;visa\&quot;, \&quot;ideal\&quot;, \&quot;paypal\&quot;.
        /// </summary>
        /// <value>The payment method, such as â€œmc\&quot;, \&quot;visa\&quot;, \&quot;ideal\&quot;, \&quot;paypal\&quot;.</value>
        [DataMember(Name = "variant", IsRequired = false, EmitDefaultValue = false)]
        public string Variant { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecurringDetail {\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  AliasType: ").Append(AliasType).Append("\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  ContractTypes: ").Append(ContractTypes).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  FirstPspReference: ").Append(FirstPspReference).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NetworkTxReference: ").Append(NetworkTxReference).Append("\n");
            sb.Append("  PaymentMethodVariant: ").Append(PaymentMethodVariant).Append("\n");
            sb.Append("  RecurringDetailReference: ").Append(RecurringDetailReference).Append("\n");
            sb.Append("  ShopperName: ").Append(ShopperName).Append("\n");
            sb.Append("  SocialSecurityNumber: ").Append(SocialSecurityNumber).Append("\n");
            sb.Append("  TokenDetails: ").Append(TokenDetails).Append("\n");
            sb.Append("  Variant: ").Append(Variant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecurringDetail);
        }

        /// <summary>
        /// Returns true if RecurringDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of RecurringDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecurringDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdditionalData == input.AdditionalData ||
                    this.AdditionalData != null &&
                    input.AdditionalData != null &&
                    this.AdditionalData.SequenceEqual(input.AdditionalData)
                ) && 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.AliasType == input.AliasType ||
                    (this.AliasType != null &&
                    this.AliasType.Equals(input.AliasType))
                ) && 
                (
                    this.Bank == input.Bank ||
                    (this.Bank != null &&
                    this.Bank.Equals(input.Bank))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.Card == input.Card ||
                    (this.Card != null &&
                    this.Card.Equals(input.Card))
                ) && 
                (
                    this.ContractTypes == input.ContractTypes ||
                    this.ContractTypes != null &&
                    input.ContractTypes != null &&
                    this.ContractTypes.SequenceEqual(input.ContractTypes)
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.FirstPspReference == input.FirstPspReference ||
                    (this.FirstPspReference != null &&
                    this.FirstPspReference.Equals(input.FirstPspReference))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NetworkTxReference == input.NetworkTxReference ||
                    (this.NetworkTxReference != null &&
                    this.NetworkTxReference.Equals(input.NetworkTxReference))
                ) && 
                (
                    this.PaymentMethodVariant == input.PaymentMethodVariant ||
                    (this.PaymentMethodVariant != null &&
                    this.PaymentMethodVariant.Equals(input.PaymentMethodVariant))
                ) && 
                (
                    this.RecurringDetailReference == input.RecurringDetailReference ||
                    (this.RecurringDetailReference != null &&
                    this.RecurringDetailReference.Equals(input.RecurringDetailReference))
                ) && 
                (
                    this.ShopperName == input.ShopperName ||
                    (this.ShopperName != null &&
                    this.ShopperName.Equals(input.ShopperName))
                ) && 
                (
                    this.SocialSecurityNumber == input.SocialSecurityNumber ||
                    (this.SocialSecurityNumber != null &&
                    this.SocialSecurityNumber.Equals(input.SocialSecurityNumber))
                ) && 
                (
                    this.TokenDetails == input.TokenDetails ||
                    (this.TokenDetails != null &&
                    this.TokenDetails.Equals(input.TokenDetails))
                ) && 
                (
                    this.Variant == input.Variant ||
                    (this.Variant != null &&
                    this.Variant.Equals(input.Variant))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalData != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalData.GetHashCode();
                }
                if (this.Alias != null)
                {
                    hashCode = (hashCode * 59) + this.Alias.GetHashCode();
                }
                if (this.AliasType != null)
                {
                    hashCode = (hashCode * 59) + this.AliasType.GetHashCode();
                }
                if (this.Bank != null)
                {
                    hashCode = (hashCode * 59) + this.Bank.GetHashCode();
                }
                if (this.BillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddress.GetHashCode();
                }
                if (this.Card != null)
                {
                    hashCode = (hashCode * 59) + this.Card.GetHashCode();
                }
                if (this.ContractTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ContractTypes.GetHashCode();
                }
                if (this.CreationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreationDate.GetHashCode();
                }
                if (this.FirstPspReference != null)
                {
                    hashCode = (hashCode * 59) + this.FirstPspReference.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NetworkTxReference != null)
                {
                    hashCode = (hashCode * 59) + this.NetworkTxReference.GetHashCode();
                }
                if (this.PaymentMethodVariant != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethodVariant.GetHashCode();
                }
                if (this.RecurringDetailReference != null)
                {
                    hashCode = (hashCode * 59) + this.RecurringDetailReference.GetHashCode();
                }
                if (this.ShopperName != null)
                {
                    hashCode = (hashCode * 59) + this.ShopperName.GetHashCode();
                }
                if (this.SocialSecurityNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SocialSecurityNumber.GetHashCode();
                }
                if (this.TokenDetails != null)
                {
                    hashCode = (hashCode * 59) + this.TokenDetails.GetHashCode();
                }
                if (this.Variant != null)
                {
                    hashCode = (hashCode * 59) + this.Variant.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
