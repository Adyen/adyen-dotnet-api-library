/*
* Transfer webhooks
*
*
* The version of the OpenAPI document: 3
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.TransferNotification
{
    /// <summary>
    /// TransferNotificationData
    /// </summary>
    [DataContract(Name = "TransferNotificationData")]
    public partial class TransferNotificationData : IEquatable<TransferNotificationData>, IValidatableObject
    {
        /// <summary>
        /// The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.
        /// </summary>
        /// <value>The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum Bank for value: bank
            /// </summary>
            [EnumMember(Value = "bank")]
            Bank = 1,

            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 2,

            /// <summary>
            /// Enum IssuedCard for value: issuedCard
            /// </summary>
            [EnumMember(Value = "issuedCard")]
            IssuedCard = 3,

            /// <summary>
            /// Enum PlatformPayment for value: platformPayment
            /// </summary>
            [EnumMember(Value = "platformPayment")]
            PlatformPayment = 4

        }


        /// <summary>
        /// The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.
        /// </summary>
        /// <value>The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.</value>
        [DataMember(Name = "category", IsRequired = false, EmitDefaultValue = false)]
        public CategoryEnum Category { get; set; }
        /// <summary>
        /// The direction of the transfer.  Possible values: **incoming**, **outgoing**.
        /// </summary>
        /// <value>The direction of the transfer.  Possible values: **incoming**, **outgoing**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum Incoming for value: incoming
            /// </summary>
            [EnumMember(Value = "incoming")]
            Incoming = 1,

            /// <summary>
            /// Enum Outgoing for value: outgoing
            /// </summary>
            [EnumMember(Value = "outgoing")]
            Outgoing = 2

        }


        /// <summary>
        /// The direction of the transfer.  Possible values: **incoming**, **outgoing**.
        /// </summary>
        /// <value>The direction of the transfer.  Possible values: **incoming**, **outgoing**.</value>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.
        /// </summary>
        /// <value>Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PanEntryModeEnum
        {
            /// <summary>
            /// Enum Chip for value: chip
            /// </summary>
            [EnumMember(Value = "chip")]
            Chip = 1,

            /// <summary>
            /// Enum Cof for value: cof
            /// </summary>
            [EnumMember(Value = "cof")]
            Cof = 2,

            /// <summary>
            /// Enum Contactless for value: contactless
            /// </summary>
            [EnumMember(Value = "contactless")]
            Contactless = 3,

            /// <summary>
            /// Enum Ecommerce for value: ecommerce
            /// </summary>
            [EnumMember(Value = "ecommerce")]
            Ecommerce = 4,

            /// <summary>
            /// Enum Magstripe for value: magstripe
            /// </summary>
            [EnumMember(Value = "magstripe")]
            Magstripe = 5,

            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 6,

            /// <summary>
            /// Enum Token for value: token
            /// </summary>
            [EnumMember(Value = "token")]
            Token = 7

        }


        /// <summary>
        /// Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.
        /// </summary>
        /// <value>Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.</value>
        [DataMember(Name = "panEntryMode", EmitDefaultValue = false)]
        [Obsolete]
        public PanEntryModeEnum? PanEntryMode { get; set; }
        /// <summary>
        /// The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with &#x60;category&#x60; **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).
        /// </summary>
        /// <value>The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with &#x60;category&#x60; **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum CrossBorder for value: crossBorder
            /// </summary>
            [EnumMember(Value = "crossBorder")]
            CrossBorder = 1,

            /// <summary>
            /// Enum DirectDebit for value: directDebit
            /// </summary>
            [EnumMember(Value = "directDebit")]
            DirectDebit = 2,

            /// <summary>
            /// Enum Fast for value: fast
            /// </summary>
            [EnumMember(Value = "fast")]
            Fast = 3,

            /// <summary>
            /// Enum Instant for value: instant
            /// </summary>
            [EnumMember(Value = "instant")]
            Instant = 4,

            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 5,

            /// <summary>
            /// Enum Regular for value: regular
            /// </summary>
            [EnumMember(Value = "regular")]
            Regular = 6,

            /// <summary>
            /// Enum Wire for value: wire
            /// </summary>
            [EnumMember(Value = "wire")]
            Wire = 7

        }


        /// <summary>
        /// The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with &#x60;category&#x60; **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).
        /// </summary>
        /// <value>The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with &#x60;category&#x60; **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.
        /// </summary>
        /// <value>Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingTypeEnum
        {
            /// <summary>
            /// Enum AtmWithdraw for value: atmWithdraw
            /// </summary>
            [EnumMember(Value = "atmWithdraw")]
            AtmWithdraw = 1,

            /// <summary>
            /// Enum BalanceInquiry for value: balanceInquiry
            /// </summary>
            [EnumMember(Value = "balanceInquiry")]
            BalanceInquiry = 2,

            /// <summary>
            /// Enum Ecommerce for value: ecommerce
            /// </summary>
            [EnumMember(Value = "ecommerce")]
            Ecommerce = 3,

            /// <summary>
            /// Enum Moto for value: moto
            /// </summary>
            [EnumMember(Value = "moto")]
            Moto = 4,

            /// <summary>
            /// Enum Pos for value: pos
            /// </summary>
            [EnumMember(Value = "pos")]
            Pos = 5,

            /// <summary>
            /// Enum PurchaseWithCashback for value: purchaseWithCashback
            /// </summary>
            [EnumMember(Value = "purchaseWithCashback")]
            PurchaseWithCashback = 6,

            /// <summary>
            /// Enum Recurring for value: recurring
            /// </summary>
            [EnumMember(Value = "recurring")]
            Recurring = 7,

            /// <summary>
            /// Enum Token for value: token
            /// </summary>
            [EnumMember(Value = "token")]
            Token = 8

        }


        /// <summary>
        /// Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.
        /// </summary>
        /// <value>Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.</value>
        [DataMember(Name = "processingType", EmitDefaultValue = false)]
        [Obsolete]
        public ProcessingTypeEnum? ProcessingType { get; set; }
        /// <summary>
        /// Additional information about the status of the transfer.
        /// </summary>
        /// <value>Additional information about the status of the transfer.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum AmountLimitExceeded for value: amountLimitExceeded
            /// </summary>
            [EnumMember(Value = "amountLimitExceeded")]
            AmountLimitExceeded = 1,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved = 2,

            /// <summary>
            /// Enum CounterpartyAccountBlocked for value: counterpartyAccountBlocked
            /// </summary>
            [EnumMember(Value = "counterpartyAccountBlocked")]
            CounterpartyAccountBlocked = 3,

            /// <summary>
            /// Enum CounterpartyAccountClosed for value: counterpartyAccountClosed
            /// </summary>
            [EnumMember(Value = "counterpartyAccountClosed")]
            CounterpartyAccountClosed = 4,

            /// <summary>
            /// Enum CounterpartyAccountNotFound for value: counterpartyAccountNotFound
            /// </summary>
            [EnumMember(Value = "counterpartyAccountNotFound")]
            CounterpartyAccountNotFound = 5,

            /// <summary>
            /// Enum CounterpartyAddressRequired for value: counterpartyAddressRequired
            /// </summary>
            [EnumMember(Value = "counterpartyAddressRequired")]
            CounterpartyAddressRequired = 6,

            /// <summary>
            /// Enum CounterpartyBankTimedOut for value: counterpartyBankTimedOut
            /// </summary>
            [EnumMember(Value = "counterpartyBankTimedOut")]
            CounterpartyBankTimedOut = 7,

            /// <summary>
            /// Enum CounterpartyBankUnavailable for value: counterpartyBankUnavailable
            /// </summary>
            [EnumMember(Value = "counterpartyBankUnavailable")]
            CounterpartyBankUnavailable = 8,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 9,

            /// <summary>
            /// Enum NotEnoughBalance for value: notEnoughBalance
            /// </summary>
            [EnumMember(Value = "notEnoughBalance")]
            NotEnoughBalance = 10,

            /// <summary>
            /// Enum RefusedByCounterpartyBank for value: refusedByCounterpartyBank
            /// </summary>
            [EnumMember(Value = "refusedByCounterpartyBank")]
            RefusedByCounterpartyBank = 11,

            /// <summary>
            /// Enum RouteNotFound for value: routeNotFound
            /// </summary>
            [EnumMember(Value = "routeNotFound")]
            RouteNotFound = 12,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 13

        }


        /// <summary>
        /// Additional information about the status of the transfer.
        /// </summary>
        /// <value>Additional information about the status of the transfer.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// The result of the transfer.   For example, **authorised**, **refused**, or **error**.
        /// </summary>
        /// <value>The result of the transfer.   For example, **authorised**, **refused**, or **error**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ApprovalPending for value: approvalPending
            /// </summary>
            [EnumMember(Value = "approvalPending")]
            ApprovalPending = 1,

            /// <summary>
            /// Enum AtmWithdrawal for value: atmWithdrawal
            /// </summary>
            [EnumMember(Value = "atmWithdrawal")]
            AtmWithdrawal = 2,

            /// <summary>
            /// Enum AtmWithdrawalReversalPending for value: atmWithdrawalReversalPending
            /// </summary>
            [EnumMember(Value = "atmWithdrawalReversalPending")]
            AtmWithdrawalReversalPending = 3,

            /// <summary>
            /// Enum AtmWithdrawalReversed for value: atmWithdrawalReversed
            /// </summary>
            [EnumMember(Value = "atmWithdrawalReversed")]
            AtmWithdrawalReversed = 4,

            /// <summary>
            /// Enum AuthAdjustmentAuthorised for value: authAdjustmentAuthorised
            /// </summary>
            [EnumMember(Value = "authAdjustmentAuthorised")]
            AuthAdjustmentAuthorised = 5,

            /// <summary>
            /// Enum AuthAdjustmentError for value: authAdjustmentError
            /// </summary>
            [EnumMember(Value = "authAdjustmentError")]
            AuthAdjustmentError = 6,

            /// <summary>
            /// Enum AuthAdjustmentRefused for value: authAdjustmentRefused
            /// </summary>
            [EnumMember(Value = "authAdjustmentRefused")]
            AuthAdjustmentRefused = 7,

            /// <summary>
            /// Enum Authorised for value: authorised
            /// </summary>
            [EnumMember(Value = "authorised")]
            Authorised = 8,

            /// <summary>
            /// Enum BankTransfer for value: bankTransfer
            /// </summary>
            [EnumMember(Value = "bankTransfer")]
            BankTransfer = 9,

            /// <summary>
            /// Enum BankTransferPending for value: bankTransferPending
            /// </summary>
            [EnumMember(Value = "bankTransferPending")]
            BankTransferPending = 10,

            /// <summary>
            /// Enum Booked for value: booked
            /// </summary>
            [EnumMember(Value = "booked")]
            Booked = 11,

            /// <summary>
            /// Enum BookingPending for value: bookingPending
            /// </summary>
            [EnumMember(Value = "bookingPending")]
            BookingPending = 12,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 13,

            /// <summary>
            /// Enum CapturePending for value: capturePending
            /// </summary>
            [EnumMember(Value = "capturePending")]
            CapturePending = 14,

            /// <summary>
            /// Enum CaptureReversalPending for value: captureReversalPending
            /// </summary>
            [EnumMember(Value = "captureReversalPending")]
            CaptureReversalPending = 15,

            /// <summary>
            /// Enum CaptureReversed for value: captureReversed
            /// </summary>
            [EnumMember(Value = "captureReversed")]
            CaptureReversed = 16,

            /// <summary>
            /// Enum Captured for value: captured
            /// </summary>
            [EnumMember(Value = "captured")]
            Captured = 17,

            /// <summary>
            /// Enum Chargeback for value: chargeback
            /// </summary>
            [EnumMember(Value = "chargeback")]
            Chargeback = 18,

            /// <summary>
            /// Enum ChargebackPending for value: chargebackPending
            /// </summary>
            [EnumMember(Value = "chargebackPending")]
            ChargebackPending = 19,

            /// <summary>
            /// Enum ChargebackReversalPending for value: chargebackReversalPending
            /// </summary>
            [EnumMember(Value = "chargebackReversalPending")]
            ChargebackReversalPending = 20,

            /// <summary>
            /// Enum ChargebackReversed for value: chargebackReversed
            /// </summary>
            [EnumMember(Value = "chargebackReversed")]
            ChargebackReversed = 21,

            /// <summary>
            /// Enum Credited for value: credited
            /// </summary>
            [EnumMember(Value = "credited")]
            Credited = 22,

            /// <summary>
            /// Enum DepositCorrection for value: depositCorrection
            /// </summary>
            [EnumMember(Value = "depositCorrection")]
            DepositCorrection = 23,

            /// <summary>
            /// Enum DepositCorrectionPending for value: depositCorrectionPending
            /// </summary>
            [EnumMember(Value = "depositCorrectionPending")]
            DepositCorrectionPending = 24,

            /// <summary>
            /// Enum Dispute for value: dispute
            /// </summary>
            [EnumMember(Value = "dispute")]
            Dispute = 25,

            /// <summary>
            /// Enum DisputeClosed for value: disputeClosed
            /// </summary>
            [EnumMember(Value = "disputeClosed")]
            DisputeClosed = 26,

            /// <summary>
            /// Enum DisputeExpired for value: disputeExpired
            /// </summary>
            [EnumMember(Value = "disputeExpired")]
            DisputeExpired = 27,

            /// <summary>
            /// Enum DisputeNeedsReview for value: disputeNeedsReview
            /// </summary>
            [EnumMember(Value = "disputeNeedsReview")]
            DisputeNeedsReview = 28,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 29,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 30,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 31,

            /// <summary>
            /// Enum Fee for value: fee
            /// </summary>
            [EnumMember(Value = "fee")]
            Fee = 32,

            /// <summary>
            /// Enum FeePending for value: feePending
            /// </summary>
            [EnumMember(Value = "feePending")]
            FeePending = 33,

            /// <summary>
            /// Enum InternalTransfer for value: internalTransfer
            /// </summary>
            [EnumMember(Value = "internalTransfer")]
            InternalTransfer = 34,

            /// <summary>
            /// Enum InternalTransferPending for value: internalTransferPending
            /// </summary>
            [EnumMember(Value = "internalTransferPending")]
            InternalTransferPending = 35,

            /// <summary>
            /// Enum InvoiceDeduction for value: invoiceDeduction
            /// </summary>
            [EnumMember(Value = "invoiceDeduction")]
            InvoiceDeduction = 36,

            /// <summary>
            /// Enum InvoiceDeductionPending for value: invoiceDeductionPending
            /// </summary>
            [EnumMember(Value = "invoiceDeductionPending")]
            InvoiceDeductionPending = 37,

            /// <summary>
            /// Enum ManualCorrectionPending for value: manualCorrectionPending
            /// </summary>
            [EnumMember(Value = "manualCorrectionPending")]
            ManualCorrectionPending = 38,

            /// <summary>
            /// Enum ManuallyCorrected for value: manuallyCorrected
            /// </summary>
            [EnumMember(Value = "manuallyCorrected")]
            ManuallyCorrected = 39,

            /// <summary>
            /// Enum MatchedStatement for value: matchedStatement
            /// </summary>
            [EnumMember(Value = "matchedStatement")]
            MatchedStatement = 40,

            /// <summary>
            /// Enum MatchedStatementPending for value: matchedStatementPending
            /// </summary>
            [EnumMember(Value = "matchedStatementPending")]
            MatchedStatementPending = 41,

            /// <summary>
            /// Enum MerchantPayin for value: merchantPayin
            /// </summary>
            [EnumMember(Value = "merchantPayin")]
            MerchantPayin = 42,

            /// <summary>
            /// Enum MerchantPayinPending for value: merchantPayinPending
            /// </summary>
            [EnumMember(Value = "merchantPayinPending")]
            MerchantPayinPending = 43,

            /// <summary>
            /// Enum MerchantPayinReversed for value: merchantPayinReversed
            /// </summary>
            [EnumMember(Value = "merchantPayinReversed")]
            MerchantPayinReversed = 44,

            /// <summary>
            /// Enum MerchantPayinReversedPending for value: merchantPayinReversedPending
            /// </summary>
            [EnumMember(Value = "merchantPayinReversedPending")]
            MerchantPayinReversedPending = 45,

            /// <summary>
            /// Enum MiscCost for value: miscCost
            /// </summary>
            [EnumMember(Value = "miscCost")]
            MiscCost = 46,

            /// <summary>
            /// Enum MiscCostPending for value: miscCostPending
            /// </summary>
            [EnumMember(Value = "miscCostPending")]
            MiscCostPending = 47,

            /// <summary>
            /// Enum PaymentCost for value: paymentCost
            /// </summary>
            [EnumMember(Value = "paymentCost")]
            PaymentCost = 48,

            /// <summary>
            /// Enum PaymentCostPending for value: paymentCostPending
            /// </summary>
            [EnumMember(Value = "paymentCostPending")]
            PaymentCostPending = 49,

            /// <summary>
            /// Enum Received for value: received
            /// </summary>
            [EnumMember(Value = "received")]
            Received = 50,

            /// <summary>
            /// Enum RefundPending for value: refundPending
            /// </summary>
            [EnumMember(Value = "refundPending")]
            RefundPending = 51,

            /// <summary>
            /// Enum RefundReversalPending for value: refundReversalPending
            /// </summary>
            [EnumMember(Value = "refundReversalPending")]
            RefundReversalPending = 52,

            /// <summary>
            /// Enum RefundReversed for value: refundReversed
            /// </summary>
            [EnumMember(Value = "refundReversed")]
            RefundReversed = 53,

            /// <summary>
            /// Enum Refunded for value: refunded
            /// </summary>
            [EnumMember(Value = "refunded")]
            Refunded = 54,

            /// <summary>
            /// Enum Refused for value: refused
            /// </summary>
            [EnumMember(Value = "refused")]
            Refused = 55,

            /// <summary>
            /// Enum ReserveAdjustment for value: reserveAdjustment
            /// </summary>
            [EnumMember(Value = "reserveAdjustment")]
            ReserveAdjustment = 56,

            /// <summary>
            /// Enum ReserveAdjustmentPending for value: reserveAdjustmentPending
            /// </summary>
            [EnumMember(Value = "reserveAdjustmentPending")]
            ReserveAdjustmentPending = 57,

            /// <summary>
            /// Enum Returned for value: returned
            /// </summary>
            [EnumMember(Value = "returned")]
            Returned = 58,

            /// <summary>
            /// Enum SecondChargeback for value: secondChargeback
            /// </summary>
            [EnumMember(Value = "secondChargeback")]
            SecondChargeback = 59,

            /// <summary>
            /// Enum SecondChargebackPending for value: secondChargebackPending
            /// </summary>
            [EnumMember(Value = "secondChargebackPending")]
            SecondChargebackPending = 60,

            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 61

        }


        /// <summary>
        /// The result of the transfer.   For example, **authorised**, **refused**, or **error**.
        /// </summary>
        /// <value>The result of the transfer.   For example, **authorised**, **refused**, or **error**.</value>
        [DataMember(Name = "status", IsRequired = false, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// The type of transfer or transaction. For example, **refund**, **payment**, **internalTransfer**, **bankTransfer**.
        /// </summary>
        /// <value>The type of transfer or transaction. For example, **refund**, **payment**, **internalTransfer**, **bankTransfer**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AtmWithdrawal for value: atmWithdrawal
            /// </summary>
            [EnumMember(Value = "atmWithdrawal")]
            AtmWithdrawal = 1,

            /// <summary>
            /// Enum AtmWithdrawalReversal for value: atmWithdrawalReversal
            /// </summary>
            [EnumMember(Value = "atmWithdrawalReversal")]
            AtmWithdrawalReversal = 2,

            /// <summary>
            /// Enum BalanceAdjustment for value: balanceAdjustment
            /// </summary>
            [EnumMember(Value = "balanceAdjustment")]
            BalanceAdjustment = 3,

            /// <summary>
            /// Enum BalanceRollover for value: balanceRollover
            /// </summary>
            [EnumMember(Value = "balanceRollover")]
            BalanceRollover = 4,

            /// <summary>
            /// Enum BankTransfer for value: bankTransfer
            /// </summary>
            [EnumMember(Value = "bankTransfer")]
            BankTransfer = 5,

            /// <summary>
            /// Enum Capture for value: capture
            /// </summary>
            [EnumMember(Value = "capture")]
            Capture = 6,

            /// <summary>
            /// Enum CaptureReversal for value: captureReversal
            /// </summary>
            [EnumMember(Value = "captureReversal")]
            CaptureReversal = 7,

            /// <summary>
            /// Enum Chargeback for value: chargeback
            /// </summary>
            [EnumMember(Value = "chargeback")]
            Chargeback = 8,

            /// <summary>
            /// Enum ChargebackReversal for value: chargebackReversal
            /// </summary>
            [EnumMember(Value = "chargebackReversal")]
            ChargebackReversal = 9,

            /// <summary>
            /// Enum DepositCorrection for value: depositCorrection
            /// </summary>
            [EnumMember(Value = "depositCorrection")]
            DepositCorrection = 10,

            /// <summary>
            /// Enum Fee for value: fee
            /// </summary>
            [EnumMember(Value = "fee")]
            Fee = 11,

            /// <summary>
            /// Enum Grant for value: grant
            /// </summary>
            [EnumMember(Value = "grant")]
            Grant = 12,

            /// <summary>
            /// Enum Installment for value: installment
            /// </summary>
            [EnumMember(Value = "installment")]
            Installment = 13,

            /// <summary>
            /// Enum InstallmentReversal for value: installmentReversal
            /// </summary>
            [EnumMember(Value = "installmentReversal")]
            InstallmentReversal = 14,

            /// <summary>
            /// Enum InternalTransfer for value: internalTransfer
            /// </summary>
            [EnumMember(Value = "internalTransfer")]
            InternalTransfer = 15,

            /// <summary>
            /// Enum InvoiceDeduction for value: invoiceDeduction
            /// </summary>
            [EnumMember(Value = "invoiceDeduction")]
            InvoiceDeduction = 16,

            /// <summary>
            /// Enum Leftover for value: leftover
            /// </summary>
            [EnumMember(Value = "leftover")]
            Leftover = 17,

            /// <summary>
            /// Enum ManualCorrection for value: manualCorrection
            /// </summary>
            [EnumMember(Value = "manualCorrection")]
            ManualCorrection = 18,

            /// <summary>
            /// Enum MiscCost for value: miscCost
            /// </summary>
            [EnumMember(Value = "miscCost")]
            MiscCost = 19,

            /// <summary>
            /// Enum Payment for value: payment
            /// </summary>
            [EnumMember(Value = "payment")]
            Payment = 20,

            /// <summary>
            /// Enum PaymentCost for value: paymentCost
            /// </summary>
            [EnumMember(Value = "paymentCost")]
            PaymentCost = 21,

            /// <summary>
            /// Enum Refund for value: refund
            /// </summary>
            [EnumMember(Value = "refund")]
            Refund = 22,

            /// <summary>
            /// Enum RefundReversal for value: refundReversal
            /// </summary>
            [EnumMember(Value = "refundReversal")]
            RefundReversal = 23,

            /// <summary>
            /// Enum Repayment for value: repayment
            /// </summary>
            [EnumMember(Value = "repayment")]
            Repayment = 24,

            /// <summary>
            /// Enum ReserveAdjustment for value: reserveAdjustment
            /// </summary>
            [EnumMember(Value = "reserveAdjustment")]
            ReserveAdjustment = 25,

            /// <summary>
            /// Enum SecondChargeback for value: secondChargeback
            /// </summary>
            [EnumMember(Value = "secondChargeback")]
            SecondChargeback = 26

        }


        /// <summary>
        /// The type of transfer or transaction. For example, **refund**, **payment**, **internalTransfer**, **bankTransfer**.
        /// </summary>
        /// <value>The type of transfer or transaction. For example, **refund**, **payment**, **internalTransfer**, **bankTransfer**.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferNotificationData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransferNotificationData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferNotificationData" /> class.
        /// </summary>
        /// <param name="accountHolder">accountHolder.</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="balanceAccount">balanceAccount.</param>
        /// <param name="balanceAccountId">The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id)..</param>
        /// <param name="balancePlatform">The unique identifier of the balance platform..</param>
        /// <param name="balances">The list of the latest balance statuses in the transfer..</param>
        /// <param name="category">The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users. (required).</param>
        /// <param name="counterparty">counterparty.</param>
        /// <param name="creationDate">The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**..</param>
        /// <param name="description">Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , &#39; + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] &amp; $ % # @** **~ &#x3D; + - _ &#39; \&quot; ! ?**.</param>
        /// <param name="direction">The direction of the transfer.  Possible values: **incoming**, **outgoing**..</param>
        /// <param name="events">The list of events leading up to the current status of the transfer..</param>
        /// <param name="id">The ID of the resource..</param>
        /// <param name="modificationMerchantReference">The capture&#39;s merchant reference included in the transfer..</param>
        /// <param name="modificationPspReference">The capture reference included in the transfer..</param>
        /// <param name="panEntryMode">Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**..</param>
        /// <param name="paymentInstrument">paymentInstrument.</param>
        /// <param name="paymentInstrumentId">The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer..</param>
        /// <param name="paymentMerchantReference">The payment&#39;s merchant reference included in the transfer..</param>
        /// <param name="priority">The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with &#x60;category&#x60; **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN)..</param>
        /// <param name="processingType">Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments..</param>
        /// <param name="pspPaymentReference">The payment reference included in the transfer..</param>
        /// <param name="reason">Additional information about the status of the transfer..</param>
        /// <param name="reference">Your reference for the transfer, used internally within your platform. If you don&#39;t provide this in the request, Adyen generates a unique reference..</param>
        /// <param name="referenceForBeneficiary"> A reference that is sent to the recipient. This reference is also sent in all notification webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the &#x60;category&#x60;.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others..</param>
        /// <param name="relayedAuthorisationData">relayedAuthorisationData.</param>
        /// <param name="sequenceNumber">The sequence number of the transfer notification. The numbers start from 1 and increase with each new notification for a specific transfer.  It can help you restore the correct sequence of events even if they arrive out of order..</param>
        /// <param name="status">The result of the transfer.   For example, **authorised**, **refused**, or **error**. (required).</param>
        /// <param name="tracking">tracking.</param>
        /// <param name="transactionId">The ID of the transaction that is created based on the transfer..</param>
        /// <param name="transactionRulesResult">transactionRulesResult.</param>
        /// <param name="type">The type of transfer or transaction. For example, **refund**, **payment**, **internalTransfer**, **bankTransfer**..</param>
        /// <param name="validationFacts">The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information..</param>
        public TransferNotificationData(ResourceReference accountHolder = default(ResourceReference), Amount amount = default(Amount), ResourceReference balanceAccount = default(ResourceReference), string balanceAccountId = default(string), string balancePlatform = default(string), List<BalanceMutation> balances = default(List<BalanceMutation>), CategoryEnum category = default(CategoryEnum), CounterpartyV3 counterparty = default(CounterpartyV3), DateTime creationDate = default(DateTime), string description = default(string), DirectionEnum? direction = default(DirectionEnum?), List<TransferEvent> events = default(List<TransferEvent>), string id = default(string), string modificationMerchantReference = default(string), string modificationPspReference = default(string), PanEntryModeEnum? panEntryMode = default(PanEntryModeEnum?), PaymentInstrument paymentInstrument = default(PaymentInstrument), string paymentInstrumentId = default(string), string paymentMerchantReference = default(string), PriorityEnum? priority = default(PriorityEnum?), ProcessingTypeEnum? processingType = default(ProcessingTypeEnum?), string pspPaymentReference = default(string), ReasonEnum? reason = default(ReasonEnum?), string reference = default(string), string referenceForBeneficiary = default(string), RelayedAuthorisationData relayedAuthorisationData = default(RelayedAuthorisationData), int? sequenceNumber = default(int?), StatusEnum status = default(StatusEnum), TransferNotificationTransferTracking tracking = default(TransferNotificationTransferTracking), string transactionId = default(string), TransactionRulesResult transactionRulesResult = default(TransactionRulesResult), TypeEnum? type = default(TypeEnum?), List<TransferNotificationValidationFact> validationFacts = default(List<TransferNotificationValidationFact>))
        {
            this.Amount = amount;
            this.Category = category;
            this.Status = status;
            this.AccountHolder = accountHolder;
            this.BalanceAccount = balanceAccount;
            this.BalanceAccountId = balanceAccountId;
            this.BalancePlatform = balancePlatform;
            this.Balances = balances;
            this.Counterparty = counterparty;
            this.CreationDate = creationDate;
            this.Description = description;
            this.Direction = direction;
            this.Events = events;
            this.Id = id;
            this.ModificationMerchantReference = modificationMerchantReference;
            this.ModificationPspReference = modificationPspReference;
            this.PanEntryMode = panEntryMode;
            this.PaymentInstrument = paymentInstrument;
            this.PaymentInstrumentId = paymentInstrumentId;
            this.PaymentMerchantReference = paymentMerchantReference;
            this.Priority = priority;
            this.ProcessingType = processingType;
            this.PspPaymentReference = pspPaymentReference;
            this.Reason = reason;
            this.Reference = reference;
            this.ReferenceForBeneficiary = referenceForBeneficiary;
            this.RelayedAuthorisationData = relayedAuthorisationData;
            this.SequenceNumber = sequenceNumber;
            this.Tracking = tracking;
            this.TransactionId = transactionId;
            this.TransactionRulesResult = transactionRulesResult;
            this.Type = type;
            this.ValidationFacts = validationFacts;
        }

        /// <summary>
        /// Gets or Sets AccountHolder
        /// </summary>
        [DataMember(Name = "accountHolder", EmitDefaultValue = false)]
        public ResourceReference AccountHolder { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = false, EmitDefaultValue = false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets BalanceAccount
        /// </summary>
        [DataMember(Name = "balanceAccount", EmitDefaultValue = false)]
        public ResourceReference BalanceAccount { get; set; }

        /// <summary>
        /// The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
        /// </summary>
        /// <value>The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).</value>
        [DataMember(Name = "balanceAccountId", EmitDefaultValue = false)]
        [Obsolete]
        public string BalanceAccountId { get; set; }

        /// <summary>
        /// The unique identifier of the balance platform.
        /// </summary>
        /// <value>The unique identifier of the balance platform.</value>
        [DataMember(Name = "balancePlatform", EmitDefaultValue = false)]
        public string BalancePlatform { get; set; }

        /// <summary>
        /// The list of the latest balance statuses in the transfer.
        /// </summary>
        /// <value>The list of the latest balance statuses in the transfer.</value>
        [DataMember(Name = "balances", EmitDefaultValue = false)]
        public List<BalanceMutation> Balances { get; set; }

        /// <summary>
        /// Gets or Sets Counterparty
        /// </summary>
        [DataMember(Name = "counterparty", EmitDefaultValue = false)]
        public CounterpartyV3 Counterparty { get; set; }

        /// <summary>
        /// The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
        /// </summary>
        /// <value>The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.</value>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , &#39; + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] &amp; $ % # @** **~ &#x3D; + - _ &#39; \&quot; ! ?**
        /// </summary>
        /// <value>Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , &#39; + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] &amp; $ % # @** **~ &#x3D; + - _ &#39; \&quot; ! ?**</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The list of events leading up to the current status of the transfer.
        /// </summary>
        /// <value>The list of events leading up to the current status of the transfer.</value>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<TransferEvent> Events { get; set; }

        /// <summary>
        /// The ID of the resource.
        /// </summary>
        /// <value>The ID of the resource.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The capture&#39;s merchant reference included in the transfer.
        /// </summary>
        /// <value>The capture&#39;s merchant reference included in the transfer.</value>
        [DataMember(Name = "modificationMerchantReference", EmitDefaultValue = false)]
        [Obsolete]
        public string ModificationMerchantReference { get; set; }

        /// <summary>
        /// The capture reference included in the transfer.
        /// </summary>
        /// <value>The capture reference included in the transfer.</value>
        [DataMember(Name = "modificationPspReference", EmitDefaultValue = false)]
        [Obsolete]
        public string ModificationPspReference { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInstrument
        /// </summary>
        [DataMember(Name = "paymentInstrument", EmitDefaultValue = false)]
        public PaymentInstrument PaymentInstrument { get; set; }

        /// <summary>
        /// The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer.
        /// </summary>
        /// <value>The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer.</value>
        [DataMember(Name = "paymentInstrumentId", EmitDefaultValue = false)]
        [Obsolete]
        public string PaymentInstrumentId { get; set; }

        /// <summary>
        /// The payment&#39;s merchant reference included in the transfer.
        /// </summary>
        /// <value>The payment&#39;s merchant reference included in the transfer.</value>
        [DataMember(Name = "paymentMerchantReference", EmitDefaultValue = false)]
        [Obsolete]
        public string PaymentMerchantReference { get; set; }

        /// <summary>
        /// The payment reference included in the transfer.
        /// </summary>
        /// <value>The payment reference included in the transfer.</value>
        [DataMember(Name = "pspPaymentReference", EmitDefaultValue = false)]
        [Obsolete]
        public string PspPaymentReference { get; set; }

        /// <summary>
        /// Your reference for the transfer, used internally within your platform. If you don&#39;t provide this in the request, Adyen generates a unique reference.
        /// </summary>
        /// <value>Your reference for the transfer, used internally within your platform. If you don&#39;t provide this in the request, Adyen generates a unique reference.</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        ///  A reference that is sent to the recipient. This reference is also sent in all notification webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the &#x60;category&#x60;.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.
        /// </summary>
        /// <value> A reference that is sent to the recipient. This reference is also sent in all notification webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the &#x60;category&#x60;.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.</value>
        [DataMember(Name = "referenceForBeneficiary", EmitDefaultValue = false)]
        public string ReferenceForBeneficiary { get; set; }

        /// <summary>
        /// Gets or Sets RelayedAuthorisationData
        /// </summary>
        [DataMember(Name = "relayedAuthorisationData", EmitDefaultValue = false)]
        public RelayedAuthorisationData RelayedAuthorisationData { get; set; }

        /// <summary>
        /// The sequence number of the transfer notification. The numbers start from 1 and increase with each new notification for a specific transfer.  It can help you restore the correct sequence of events even if they arrive out of order.
        /// </summary>
        /// <value>The sequence number of the transfer notification. The numbers start from 1 and increase with each new notification for a specific transfer.  It can help you restore the correct sequence of events even if they arrive out of order.</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public int? SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets Tracking
        /// </summary>
        [DataMember(Name = "tracking", EmitDefaultValue = false)]
        public TransferNotificationTransferTracking Tracking { get; set; }

        /// <summary>
        /// The ID of the transaction that is created based on the transfer.
        /// </summary>
        /// <value>The ID of the transaction that is created based on the transfer.</value>
        [DataMember(Name = "transactionId", EmitDefaultValue = false)]
        [Obsolete]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionRulesResult
        /// </summary>
        [DataMember(Name = "transactionRulesResult", EmitDefaultValue = false)]
        public TransactionRulesResult TransactionRulesResult { get; set; }

        /// <summary>
        /// The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.
        /// </summary>
        /// <value>The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.</value>
        [DataMember(Name = "validationFacts", EmitDefaultValue = false)]
        [Obsolete]
        public List<TransferNotificationValidationFact> ValidationFacts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferNotificationData {\n");
            sb.Append("  AccountHolder: ").Append(AccountHolder).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BalanceAccount: ").Append(BalanceAccount).Append("\n");
            sb.Append("  BalanceAccountId: ").Append(BalanceAccountId).Append("\n");
            sb.Append("  BalancePlatform: ").Append(BalancePlatform).Append("\n");
            sb.Append("  Balances: ").Append(Balances).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Counterparty: ").Append(Counterparty).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ModificationMerchantReference: ").Append(ModificationMerchantReference).Append("\n");
            sb.Append("  ModificationPspReference: ").Append(ModificationPspReference).Append("\n");
            sb.Append("  PanEntryMode: ").Append(PanEntryMode).Append("\n");
            sb.Append("  PaymentInstrument: ").Append(PaymentInstrument).Append("\n");
            sb.Append("  PaymentInstrumentId: ").Append(PaymentInstrumentId).Append("\n");
            sb.Append("  PaymentMerchantReference: ").Append(PaymentMerchantReference).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ProcessingType: ").Append(ProcessingType).Append("\n");
            sb.Append("  PspPaymentReference: ").Append(PspPaymentReference).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReferenceForBeneficiary: ").Append(ReferenceForBeneficiary).Append("\n");
            sb.Append("  RelayedAuthorisationData: ").Append(RelayedAuthorisationData).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tracking: ").Append(Tracking).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  TransactionRulesResult: ").Append(TransactionRulesResult).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ValidationFacts: ").Append(ValidationFacts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferNotificationData);
        }

        /// <summary>
        /// Returns true if TransferNotificationData instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferNotificationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferNotificationData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountHolder == input.AccountHolder ||
                    (this.AccountHolder != null &&
                    this.AccountHolder.Equals(input.AccountHolder))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BalanceAccount == input.BalanceAccount ||
                    (this.BalanceAccount != null &&
                    this.BalanceAccount.Equals(input.BalanceAccount))
                ) && 
                (
                    this.BalanceAccountId == input.BalanceAccountId ||
                    (this.BalanceAccountId != null &&
                    this.BalanceAccountId.Equals(input.BalanceAccountId))
                ) && 
                (
                    this.BalancePlatform == input.BalancePlatform ||
                    (this.BalancePlatform != null &&
                    this.BalancePlatform.Equals(input.BalancePlatform))
                ) && 
                (
                    this.Balances == input.Balances ||
                    this.Balances != null &&
                    input.Balances != null &&
                    this.Balances.SequenceEqual(input.Balances)
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.Counterparty == input.Counterparty ||
                    (this.Counterparty != null &&
                    this.Counterparty.Equals(input.Counterparty))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Direction == input.Direction ||
                    this.Direction.Equals(input.Direction)
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ModificationMerchantReference == input.ModificationMerchantReference ||
                    (this.ModificationMerchantReference != null &&
                    this.ModificationMerchantReference.Equals(input.ModificationMerchantReference))
                ) && 
                (
                    this.ModificationPspReference == input.ModificationPspReference ||
                    (this.ModificationPspReference != null &&
                    this.ModificationPspReference.Equals(input.ModificationPspReference))
                ) && 
                (
                    this.PanEntryMode == input.PanEntryMode ||
                    this.PanEntryMode.Equals(input.PanEntryMode)
                ) && 
                (
                    this.PaymentInstrument == input.PaymentInstrument ||
                    (this.PaymentInstrument != null &&
                    this.PaymentInstrument.Equals(input.PaymentInstrument))
                ) && 
                (
                    this.PaymentInstrumentId == input.PaymentInstrumentId ||
                    (this.PaymentInstrumentId != null &&
                    this.PaymentInstrumentId.Equals(input.PaymentInstrumentId))
                ) && 
                (
                    this.PaymentMerchantReference == input.PaymentMerchantReference ||
                    (this.PaymentMerchantReference != null &&
                    this.PaymentMerchantReference.Equals(input.PaymentMerchantReference))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.ProcessingType == input.ProcessingType ||
                    this.ProcessingType.Equals(input.ProcessingType)
                ) && 
                (
                    this.PspPaymentReference == input.PspPaymentReference ||
                    (this.PspPaymentReference != null &&
                    this.PspPaymentReference.Equals(input.PspPaymentReference))
                ) && 
                (
                    this.Reason == input.Reason ||
                    this.Reason.Equals(input.Reason)
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.ReferenceForBeneficiary == input.ReferenceForBeneficiary ||
                    (this.ReferenceForBeneficiary != null &&
                    this.ReferenceForBeneficiary.Equals(input.ReferenceForBeneficiary))
                ) && 
                (
                    this.RelayedAuthorisationData == input.RelayedAuthorisationData ||
                    (this.RelayedAuthorisationData != null &&
                    this.RelayedAuthorisationData.Equals(input.RelayedAuthorisationData))
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Tracking == input.Tracking ||
                    (this.Tracking != null &&
                    this.Tracking.Equals(input.Tracking))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.TransactionRulesResult == input.TransactionRulesResult ||
                    (this.TransactionRulesResult != null &&
                    this.TransactionRulesResult.Equals(input.TransactionRulesResult))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.ValidationFacts == input.ValidationFacts ||
                    this.ValidationFacts != null &&
                    input.ValidationFacts != null &&
                    this.ValidationFacts.SequenceEqual(input.ValidationFacts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountHolder != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolder.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.BalanceAccount != null)
                {
                    hashCode = (hashCode * 59) + this.BalanceAccount.GetHashCode();
                }
                if (this.BalanceAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.BalanceAccountId.GetHashCode();
                }
                if (this.BalancePlatform != null)
                {
                    hashCode = (hashCode * 59) + this.BalancePlatform.GetHashCode();
                }
                if (this.Balances != null)
                {
                    hashCode = (hashCode * 59) + this.Balances.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                if (this.Counterparty != null)
                {
                    hashCode = (hashCode * 59) + this.Counterparty.GetHashCode();
                }
                if (this.CreationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreationDate.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Direction.GetHashCode();
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ModificationMerchantReference != null)
                {
                    hashCode = (hashCode * 59) + this.ModificationMerchantReference.GetHashCode();
                }
                if (this.ModificationPspReference != null)
                {
                    hashCode = (hashCode * 59) + this.ModificationPspReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PanEntryMode.GetHashCode();
                if (this.PaymentInstrument != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInstrument.GetHashCode();
                }
                if (this.PaymentInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInstrumentId.GetHashCode();
                }
                if (this.PaymentMerchantReference != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMerchantReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                hashCode = (hashCode * 59) + this.ProcessingType.GetHashCode();
                if (this.PspPaymentReference != null)
                {
                    hashCode = (hashCode * 59) + this.PspPaymentReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.ReferenceForBeneficiary != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceForBeneficiary.GetHashCode();
                }
                if (this.RelayedAuthorisationData != null)
                {
                    hashCode = (hashCode * 59) + this.RelayedAuthorisationData.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SequenceNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Tracking != null)
                {
                    hashCode = (hashCode * 59) + this.Tracking.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.TransactionRulesResult != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionRulesResult.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.ValidationFacts != null)
                {
                    hashCode = (hashCode * 59) + this.ValidationFacts.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Reference (string) maxLength
            if (this.Reference != null && this.Reference.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, length must be less than 80.", new [] { "Reference" });
            }

            // ReferenceForBeneficiary (string) maxLength
            if (this.ReferenceForBeneficiary != null && this.ReferenceForBeneficiary.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferenceForBeneficiary, length must be less than 80.", new [] { "ReferenceForBeneficiary" });
            }

            yield break;
        }
    }

}
