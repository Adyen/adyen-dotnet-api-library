/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BalancePlatform
{
    /// <summary>
    /// BankAccountDetails
    /// </summary>
    [DataContract(Name = "BankAccountDetails")]
    public partial class BankAccountDetails : IEquatable<BankAccountDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankAccountDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountDetails" /> class.
        /// </summary>
        /// <param name="accountNumber">The bank account number, without separators or whitespace..</param>
        /// <param name="accountType">The bank account type.  Possible values: **checking** or **savings**. Defaults to **checking**. (default to &quot;checking&quot;).</param>
        /// <param name="formFactor">Business accounts with a &#x60;formFactor&#x60; value of **physical** are business accounts issued under the central bank of that country. The default value is **physical** for NL, US, and UK business accounts.   Adyen creates a local IBAN for business accounts when the &#x60;formFactor&#x60; value is set to **virtual**. The local IBANs that are supported are for DE and FR, which reference a physical NL account, with funds being routed through the central bank of NL. (default to &quot;physical&quot;).</param>
        /// <param name="iban">The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard..</param>
        /// <param name="routingNumber">The [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace..</param>
        /// <param name="sortCode">The [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace..</param>
        /// <param name="type">**iban** or **usLocal** or **ukLocal** (required) (default to &quot;iban&quot;).</param>
        public BankAccountDetails(string accountNumber = default(string), string accountType = "checking", string formFactor = "physical", string iban = default(string), string routingNumber = default(string), string sortCode = default(string), string type = "iban")
        {
            this.Type = type;
            this.AccountNumber = accountNumber;
            // use default value if no "accountType" provided
            this.AccountType = accountType ?? "checking";
            // use default value if no "formFactor" provided
            this.FormFactor = formFactor ?? "physical";
            this.Iban = iban;
            this.RoutingNumber = routingNumber;
            this.SortCode = sortCode;
        }

        /// <summary>
        /// The bank account number, without separators or whitespace.
        /// </summary>
        /// <value>The bank account number, without separators or whitespace.</value>
        [DataMember(Name = "accountNumber", EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The bank account type.  Possible values: **checking** or **savings**. Defaults to **checking**.
        /// </summary>
        /// <value>The bank account type.  Possible values: **checking** or **savings**. Defaults to **checking**.</value>
        [DataMember(Name = "accountType", EmitDefaultValue = false)]
        public string AccountType { get; set; }

        /// <summary>
        /// Business accounts with a &#x60;formFactor&#x60; value of **physical** are business accounts issued under the central bank of that country. The default value is **physical** for NL, US, and UK business accounts.   Adyen creates a local IBAN for business accounts when the &#x60;formFactor&#x60; value is set to **virtual**. The local IBANs that are supported are for DE and FR, which reference a physical NL account, with funds being routed through the central bank of NL.
        /// </summary>
        /// <value>Business accounts with a &#x60;formFactor&#x60; value of **physical** are business accounts issued under the central bank of that country. The default value is **physical** for NL, US, and UK business accounts.   Adyen creates a local IBAN for business accounts when the &#x60;formFactor&#x60; value is set to **virtual**. The local IBANs that are supported are for DE and FR, which reference a physical NL account, with funds being routed through the central bank of NL.</value>
        [DataMember(Name = "formFactor", EmitDefaultValue = false)]
        public string FormFactor { get; set; }

        /// <summary>
        /// The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
        /// </summary>
        /// <value>The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.</value>
        [DataMember(Name = "iban", EmitDefaultValue = false)]
        public string Iban { get; set; }

        /// <summary>
        /// The [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.
        /// </summary>
        /// <value>The [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.</value>
        [DataMember(Name = "routingNumber", EmitDefaultValue = false)]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// The [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace.
        /// </summary>
        /// <value>The [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace.</value>
        [DataMember(Name = "sortCode", EmitDefaultValue = false)]
        public string SortCode { get; set; }

        /// <summary>
        /// **iban** or **usLocal** or **ukLocal**
        /// </summary>
        /// <value>**iban** or **usLocal** or **ukLocal**</value>
        [DataMember(Name = "type", IsRequired = false, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankAccountDetails {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  FormFactor: ").Append(FormFactor).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  SortCode: ").Append(SortCode).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankAccountDetails);
        }

        /// <summary>
        /// Returns true if BankAccountDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BankAccountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankAccountDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.FormFactor == input.FormFactor ||
                    (this.FormFactor != null &&
                    this.FormFactor.Equals(input.FormFactor))
                ) && 
                (
                    this.Iban == input.Iban ||
                    (this.Iban != null &&
                    this.Iban.Equals(input.Iban))
                ) && 
                (
                    this.RoutingNumber == input.RoutingNumber ||
                    (this.RoutingNumber != null &&
                    this.RoutingNumber.Equals(input.RoutingNumber))
                ) && 
                (
                    this.SortCode == input.SortCode ||
                    (this.SortCode != null &&
                    this.SortCode.Equals(input.SortCode))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                if (this.AccountType != null)
                {
                    hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                }
                if (this.FormFactor != null)
                {
                    hashCode = (hashCode * 59) + this.FormFactor.GetHashCode();
                }
                if (this.Iban != null)
                {
                    hashCode = (hashCode * 59) + this.Iban.GetHashCode();
                }
                if (this.RoutingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RoutingNumber.GetHashCode();
                }
                if (this.SortCode != null)
                {
                    hashCode = (hashCode * 59) + this.SortCode.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
