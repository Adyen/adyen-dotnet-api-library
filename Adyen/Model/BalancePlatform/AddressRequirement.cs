/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BalancePlatform
{
    /// <summary>
    /// AddressRequirement
    /// </summary>
    [DataContract(Name = "AddressRequirement")]
    public partial class AddressRequirement : IEquatable<AddressRequirement>, IValidatableObject
    {
        /// <summary>
        /// Defines RequiredAddressFields
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RequiredAddressFieldsEnum
        {
            /// <summary>
            /// Enum City for value: city
            /// </summary>
            [EnumMember(Value = "city")]
            City = 1,

            /// <summary>
            /// Enum Country for value: country
            /// </summary>
            [EnumMember(Value = "country")]
            Country = 2,

            /// <summary>
            /// Enum Line1 for value: line1
            /// </summary>
            [EnumMember(Value = "line1")]
            Line1 = 3,

            /// <summary>
            /// Enum PostalCode for value: postalCode
            /// </summary>
            [EnumMember(Value = "postalCode")]
            PostalCode = 4,

            /// <summary>
            /// Enum StateOrProvince for value: stateOrProvince
            /// </summary>
            [EnumMember(Value = "stateOrProvince")]
            StateOrProvince = 5

        }



        /// <summary>
        /// List of address fields.
        /// </summary>
        /// <value>List of address fields.</value>
        [DataMember(Name = "requiredAddressFields", EmitDefaultValue = false)]
        public List<RequiredAddressFieldsEnum> RequiredAddressFields { get; set; }
        /// <summary>
        /// **addressRequirement**
        /// </summary>
        /// <value>**addressRequirement**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AddressRequirement for value: addressRequirement
            /// </summary>
            [EnumMember(Value = "addressRequirement")]
            AddressRequirement = 1

        }


        /// <summary>
        /// **addressRequirement**
        /// </summary>
        /// <value>**addressRequirement**</value>
        [DataMember(Name = "type", IsRequired = false, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressRequirement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddressRequirement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressRequirement" /> class.
        /// </summary>
        /// <param name="description">Specifies the required address related fields for a particular route..</param>
        /// <param name="requiredAddressFields">List of address fields..</param>
        /// <param name="type">**addressRequirement** (required) (default to TypeEnum.AddressRequirement).</param>
        public AddressRequirement(string description = default(string), List<RequiredAddressFieldsEnum> requiredAddressFields = default(List<RequiredAddressFieldsEnum>), TypeEnum type = TypeEnum.AddressRequirement)
        {
            this.Type = type;
            this.Description = description;
            this.RequiredAddressFields = requiredAddressFields;
        }

        /// <summary>
        /// Specifies the required address related fields for a particular route.
        /// </summary>
        /// <value>Specifies the required address related fields for a particular route.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressRequirement {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RequiredAddressFields: ").Append(RequiredAddressFields).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressRequirement);
        }

        /// <summary>
        /// Returns true if AddressRequirement instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressRequirement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressRequirement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RequiredAddressFields == input.RequiredAddressFields ||
                    this.RequiredAddressFields.SequenceEqual(input.RequiredAddressFields)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequiredAddressFields.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
