/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BalancePlatform
{
    /// <summary>
    /// CreateTransferLimitRequest
    /// </summary>
    [DataContract(Name = "CreateTransferLimitRequest")]
    public partial class CreateTransferLimitRequest : IEquatable<CreateTransferLimitRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", IsRequired = false, EmitDefaultValue = false)]
        public Scope Scope { get; set; }

        /// <summary>
        /// Gets or Sets TransferType
        /// </summary>
        [DataMember(Name = "transferType", IsRequired = false, EmitDefaultValue = false)]
        public TransferType TransferType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransferLimitRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTransferLimitRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransferLimitRequest" /> class.
        /// </summary>
        /// <param name="amount">amount (required).</param>
        /// <param name="endsAt">The date and time when the transfer limit becomes inactive. If you do not specify an end date, the limit stays active until you override it with a new limit.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): **YYYY-MM-DDThh:mm:ss.sssTZD**.</param>
        /// <param name="reference">Your reference for the transfer limit..</param>
        /// <param name="scaInformation">scaInformation.</param>
        /// <param name="scope">scope (required).</param>
        /// <param name="startsAt">The date and time when the transfer limit becomes active. If you specify a date in the future, we will schedule a transfer limit.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): **YYYY-MM-DDThh:mm:ss.sssTZD**.</param>
        /// <param name="transferType">transferType (required).</param>
        public CreateTransferLimitRequest(Amount amount = default(Amount), DateTime endsAt = default(DateTime), string reference = default(string), CreateScaInformation scaInformation = default(CreateScaInformation), Scope scope = default(Scope), DateTime startsAt = default(DateTime), TransferType transferType = default(TransferType))
        {
            this.Amount = amount;
            this.Scope = scope;
            this.TransferType = transferType;
            this.EndsAt = endsAt;
            this.Reference = reference;
            this.ScaInformation = scaInformation;
            this.StartsAt = startsAt;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = false, EmitDefaultValue = false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// The date and time when the transfer limit becomes inactive. If you do not specify an end date, the limit stays active until you override it with a new limit.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): **YYYY-MM-DDThh:mm:ss.sssTZD**
        /// </summary>
        /// <value>The date and time when the transfer limit becomes inactive. If you do not specify an end date, the limit stays active until you override it with a new limit.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): **YYYY-MM-DDThh:mm:ss.sssTZD**</value>
        [DataMember(Name = "endsAt", EmitDefaultValue = false)]
        public DateTime EndsAt { get; set; }

        /// <summary>
        /// Your reference for the transfer limit.
        /// </summary>
        /// <value>Your reference for the transfer limit.</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets ScaInformation
        /// </summary>
        [DataMember(Name = "scaInformation", EmitDefaultValue = false)]
        public CreateScaInformation ScaInformation { get; set; }

        /// <summary>
        /// The date and time when the transfer limit becomes active. If you specify a date in the future, we will schedule a transfer limit.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): **YYYY-MM-DDThh:mm:ss.sssTZD**
        /// </summary>
        /// <value>The date and time when the transfer limit becomes active. If you specify a date in the future, we will schedule a transfer limit.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): **YYYY-MM-DDThh:mm:ss.sssTZD**</value>
        [DataMember(Name = "startsAt", EmitDefaultValue = false)]
        public DateTime StartsAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTransferLimitRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  EndsAt: ").Append(EndsAt).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ScaInformation: ").Append(ScaInformation).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  StartsAt: ").Append(StartsAt).Append("\n");
            sb.Append("  TransferType: ").Append(TransferType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTransferLimitRequest);
        }

        /// <summary>
        /// Returns true if CreateTransferLimitRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTransferLimitRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTransferLimitRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.EndsAt == input.EndsAt ||
                    (this.EndsAt != null &&
                    this.EndsAt.Equals(input.EndsAt))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.ScaInformation == input.ScaInformation ||
                    (this.ScaInformation != null &&
                    this.ScaInformation.Equals(input.ScaInformation))
                ) && 
                (
                    this.Scope == input.Scope ||
                    this.Scope.Equals(input.Scope)
                ) && 
                (
                    this.StartsAt == input.StartsAt ||
                    (this.StartsAt != null &&
                    this.StartsAt.Equals(input.StartsAt))
                ) && 
                (
                    this.TransferType == input.TransferType ||
                    this.TransferType.Equals(input.TransferType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.EndsAt != null)
                {
                    hashCode = (hashCode * 59) + this.EndsAt.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.ScaInformation != null)
                {
                    hashCode = (hashCode * 59) + this.ScaInformation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                if (this.StartsAt != null)
                {
                    hashCode = (hashCode * 59) + this.StartsAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransferType.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
