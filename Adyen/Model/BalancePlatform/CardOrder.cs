/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BalancePlatform
{
    /// <summary>
    /// CardOrder
    /// </summary>
    [DataContract(Name = "CardOrder")]
    public partial class CardOrder : IEquatable<CardOrder>, IValidatableObject
    {
        /// <summary>
        /// The status of the card order.  Possible values: **Open**, **Closed**.
        /// </summary>
        /// <value>The status of the card order.  Possible values: **Open**, **Closed**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Closed for value: closed
            /// </summary>
            [EnumMember(Value = "closed")]
            Closed = 1,

            /// <summary>
            /// Enum Open for value: open
            /// </summary>
            [EnumMember(Value = "open")]
            Open = 2

        }


        /// <summary>
        /// The status of the card order.  Possible values: **Open**, **Closed**.
        /// </summary>
        /// <value>The status of the card order.  Possible values: **Open**, **Closed**.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardOrder" /> class.
        /// </summary>
        /// <param name="beginDate">The date when the card order is created..</param>
        /// <param name="cardManufacturingProfileId">The unique identifier of the card manufacturer profile..</param>
        /// <param name="closedDate">The date when the card order processing ends..</param>
        /// <param name="endDate">The date when you manually closed the card order.  Card orders are automatically closed by the end of the day it was created. If you manually closed it beforehand, the closing date is shown as the &#x60;endDate&#x60;..</param>
        /// <param name="id">The unique identifier of the card order..</param>
        /// <param name="lockDate">The date when the card order processing begins..</param>
        /// <param name="serviceCenter">The service center..</param>
        /// <param name="status">The status of the card order.  Possible values: **Open**, **Closed**..</param>
        public CardOrder(DateTime beginDate = default(DateTime), string cardManufacturingProfileId = default(string), DateTime closedDate = default(DateTime), DateTime endDate = default(DateTime), string id = default(string), DateTime lockDate = default(DateTime), string serviceCenter = default(string), StatusEnum? status = default(StatusEnum?))
        {
            this.BeginDate = beginDate;
            this.CardManufacturingProfileId = cardManufacturingProfileId;
            this.ClosedDate = closedDate;
            this.EndDate = endDate;
            this.Id = id;
            this.LockDate = lockDate;
            this.ServiceCenter = serviceCenter;
            this.Status = status;
        }

        /// <summary>
        /// The date when the card order is created.
        /// </summary>
        /// <value>The date when the card order is created.</value>
        [DataMember(Name = "beginDate", EmitDefaultValue = false)]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The unique identifier of the card manufacturer profile.
        /// </summary>
        /// <value>The unique identifier of the card manufacturer profile.</value>
        [DataMember(Name = "cardManufacturingProfileId", EmitDefaultValue = false)]
        public string CardManufacturingProfileId { get; set; }

        /// <summary>
        /// The date when the card order processing ends.
        /// </summary>
        /// <value>The date when the card order processing ends.</value>
        [DataMember(Name = "closedDate", EmitDefaultValue = false)]
        public DateTime ClosedDate { get; set; }

        /// <summary>
        /// The date when you manually closed the card order.  Card orders are automatically closed by the end of the day it was created. If you manually closed it beforehand, the closing date is shown as the &#x60;endDate&#x60;.
        /// </summary>
        /// <value>The date when you manually closed the card order.  Card orders are automatically closed by the end of the day it was created. If you manually closed it beforehand, the closing date is shown as the &#x60;endDate&#x60;.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// The unique identifier of the card order.
        /// </summary>
        /// <value>The unique identifier of the card order.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the card order processing begins.
        /// </summary>
        /// <value>The date when the card order processing begins.</value>
        [DataMember(Name = "lockDate", EmitDefaultValue = false)]
        public DateTime LockDate { get; set; }

        /// <summary>
        /// The service center.
        /// </summary>
        /// <value>The service center.</value>
        [DataMember(Name = "serviceCenter", EmitDefaultValue = false)]
        public string ServiceCenter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardOrder {\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  CardManufacturingProfileId: ").Append(CardManufacturingProfileId).Append("\n");
            sb.Append("  ClosedDate: ").Append(ClosedDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LockDate: ").Append(LockDate).Append("\n");
            sb.Append("  ServiceCenter: ").Append(ServiceCenter).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardOrder);
        }

        /// <summary>
        /// Returns true if CardOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of CardOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardOrder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.CardManufacturingProfileId == input.CardManufacturingProfileId ||
                    (this.CardManufacturingProfileId != null &&
                    this.CardManufacturingProfileId.Equals(input.CardManufacturingProfileId))
                ) && 
                (
                    this.ClosedDate == input.ClosedDate ||
                    (this.ClosedDate != null &&
                    this.ClosedDate.Equals(input.ClosedDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LockDate == input.LockDate ||
                    (this.LockDate != null &&
                    this.LockDate.Equals(input.LockDate))
                ) && 
                (
                    this.ServiceCenter == input.ServiceCenter ||
                    (this.ServiceCenter != null &&
                    this.ServiceCenter.Equals(input.ServiceCenter))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BeginDate != null)
                {
                    hashCode = (hashCode * 59) + this.BeginDate.GetHashCode();
                }
                if (this.CardManufacturingProfileId != null)
                {
                    hashCode = (hashCode * 59) + this.CardManufacturingProfileId.GetHashCode();
                }
                if (this.ClosedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.LockDate != null)
                {
                    hashCode = (hashCode * 59) + this.LockDate.GetHashCode();
                }
                if (this.ServiceCenter != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceCenter.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
