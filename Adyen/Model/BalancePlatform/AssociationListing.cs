/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BalancePlatform
{
    /// <summary>
    /// AssociationListing
    /// </summary>
    [DataContract(Name = "AssociationListing")]
    public partial class AssociationListing : IEquatable<AssociationListing>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", IsRequired = false, EmitDefaultValue = false)]
        public ScaEntityType EntityType { get; set; }

        /// <summary>
        /// Gets or Sets ScaDeviceType
        /// </summary>
        [DataMember(Name = "scaDeviceType", IsRequired = false, EmitDefaultValue = false)]
        public ScaDeviceType ScaDeviceType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = false, EmitDefaultValue = false)]
        public AssociationStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationListing" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssociationListing() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationListing" /> class.
        /// </summary>
        /// <param name="createdAt">The date and time when the association was created. (required).</param>
        /// <param name="entityId">The unique identifier of the entity. (required).</param>
        /// <param name="entityType">entityType (required).</param>
        /// <param name="scaDeviceId">The unique identifier of the SCA device. (required).</param>
        /// <param name="scaDeviceName">The human-readable name for the SCA device that was registered..</param>
        /// <param name="scaDeviceType">scaDeviceType (required).</param>
        /// <param name="status">status (required).</param>
        public AssociationListing(DateTime createdAt = default(DateTime), string entityId = default(string), ScaEntityType entityType = default(ScaEntityType), string scaDeviceId = default(string), string scaDeviceName = default(string), ScaDeviceType scaDeviceType = default(ScaDeviceType), AssociationStatus status = default(AssociationStatus))
        {
            this.CreatedAt = createdAt;
            this.EntityId = entityId;
            this.EntityType = entityType;
            this.ScaDeviceId = scaDeviceId;
            this.ScaDeviceType = scaDeviceType;
            this.Status = status;
            this.ScaDeviceName = scaDeviceName;
        }

        /// <summary>
        /// The date and time when the association was created.
        /// </summary>
        /// <value>The date and time when the association was created.</value>
        [DataMember(Name = "createdAt", IsRequired = false, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "entityId", IsRequired = false, EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The unique identifier of the SCA device.
        /// </summary>
        /// <value>The unique identifier of the SCA device.</value>
        [DataMember(Name = "scaDeviceId", IsRequired = false, EmitDefaultValue = false)]
        public string ScaDeviceId { get; set; }

        /// <summary>
        /// The human-readable name for the SCA device that was registered.
        /// </summary>
        /// <value>The human-readable name for the SCA device that was registered.</value>
        [DataMember(Name = "scaDeviceName", EmitDefaultValue = false)]
        public string ScaDeviceName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssociationListing {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  ScaDeviceId: ").Append(ScaDeviceId).Append("\n");
            sb.Append("  ScaDeviceName: ").Append(ScaDeviceName).Append("\n");
            sb.Append("  ScaDeviceType: ").Append(ScaDeviceType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssociationListing);
        }

        /// <summary>
        /// Returns true if AssociationListing instances are equal
        /// </summary>
        /// <param name="input">Instance of AssociationListing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssociationListing input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    this.EntityType.Equals(input.EntityType)
                ) && 
                (
                    this.ScaDeviceId == input.ScaDeviceId ||
                    (this.ScaDeviceId != null &&
                    this.ScaDeviceId.Equals(input.ScaDeviceId))
                ) && 
                (
                    this.ScaDeviceName == input.ScaDeviceName ||
                    (this.ScaDeviceName != null &&
                    this.ScaDeviceName.Equals(input.ScaDeviceName))
                ) && 
                (
                    this.ScaDeviceType == input.ScaDeviceType ||
                    this.ScaDeviceType.Equals(input.ScaDeviceType)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.EntityId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                if (this.ScaDeviceId != null)
                {
                    hashCode = (hashCode * 59) + this.ScaDeviceId.GetHashCode();
                }
                if (this.ScaDeviceName != null)
                {
                    hashCode = (hashCode * 59) + this.ScaDeviceName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ScaDeviceType.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EntityId (string) maxLength
            if (this.EntityId != null && this.EntityId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityId, length must be less than 100.", new [] { "EntityId" });
            }

            // EntityId (string) minLength
            if (this.EntityId != null && this.EntityId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityId, length must be greater than 1.", new [] { "EntityId" });
            }

            // ScaDeviceId (string) maxLength
            if (this.ScaDeviceId != null && this.ScaDeviceId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScaDeviceId, length must be less than 30.", new [] { "ScaDeviceId" });
            }

            // ScaDeviceId (string) minLength
            if (this.ScaDeviceId != null && this.ScaDeviceId.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScaDeviceId, length must be greater than 30.", new [] { "ScaDeviceId" });
            }

            // ScaDeviceName (string) maxLength
            if (this.ScaDeviceName != null && this.ScaDeviceName.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScaDeviceName, length must be less than 64.", new [] { "ScaDeviceName" });
            }

            // ScaDeviceName (string) minLength
            if (this.ScaDeviceName != null && this.ScaDeviceName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScaDeviceName, length must be greater than 0.", new [] { "ScaDeviceName" });
            }

            yield break;
        }
    }

}
