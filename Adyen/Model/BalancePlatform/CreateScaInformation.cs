/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BalancePlatform
{
    /// <summary>
    /// CreateScaInformation
    /// </summary>
    [DataContract(Name = "CreateScaInformation")]
    public partial class CreateScaInformation : IEquatable<CreateScaInformation>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Exemption
        /// </summary>
        [DataMember(Name = "exemption", EmitDefaultValue = false)]
        public ScaExemption? Exemption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateScaInformation" /> class.
        /// </summary>
        /// <param name="exemption">exemption.</param>
        /// <param name="scaOnApproval">Indicates whether to initiate Strong Customer Authentication (SCA) later, during approval, or immediately after you submit this request. Possible values: * **true**: you can initiate SCA later, during approval, for all pending transfer limits. * **false** (default): you initiate SCA immediately after submitting the transfer limit request..</param>
        public CreateScaInformation(ScaExemption? exemption = default(ScaExemption?), bool? scaOnApproval = default(bool?))
        {
            this.Exemption = exemption;
            this.ScaOnApproval = scaOnApproval;
        }

        /// <summary>
        /// Indicates whether to initiate Strong Customer Authentication (SCA) later, during approval, or immediately after you submit this request. Possible values: * **true**: you can initiate SCA later, during approval, for all pending transfer limits. * **false** (default): you initiate SCA immediately after submitting the transfer limit request.
        /// </summary>
        /// <value>Indicates whether to initiate Strong Customer Authentication (SCA) later, during approval, or immediately after you submit this request. Possible values: * **true**: you can initiate SCA later, during approval, for all pending transfer limits. * **false** (default): you initiate SCA immediately after submitting the transfer limit request.</value>
        [DataMember(Name = "scaOnApproval", EmitDefaultValue = false)]
        public bool? ScaOnApproval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateScaInformation {\n");
            sb.Append("  Exemption: ").Append(Exemption).Append("\n");
            sb.Append("  ScaOnApproval: ").Append(ScaOnApproval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateScaInformation);
        }

        /// <summary>
        /// Returns true if CreateScaInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateScaInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateScaInformation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Exemption == input.Exemption ||
                    this.Exemption.Equals(input.Exemption)
                ) && 
                (
                    this.ScaOnApproval == input.ScaOnApproval ||
                    this.ScaOnApproval.Equals(input.ScaOnApproval)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Exemption.GetHashCode();
                hashCode = (hashCode * 59) + this.ScaOnApproval.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
