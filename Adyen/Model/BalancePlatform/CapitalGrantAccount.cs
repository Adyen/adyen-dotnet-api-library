/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BalancePlatform
{
    /// <summary>
    /// CapitalGrantAccount
    /// </summary>
    [DataContract(Name = "CapitalGrantAccount")]
    public partial class CapitalGrantAccount : IEquatable<CapitalGrantAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CapitalGrantAccount" /> class.
        /// </summary>
        /// <param name="balances">The balances of the grant account..</param>
        /// <param name="fundingBalanceAccountId">The unique identifier of the balance account used to fund the grant..</param>
        /// <param name="id">The identifier of the grant account..</param>
        /// <param name="limits">The limits of the grant account..</param>
        public CapitalGrantAccount(List<CapitalBalance> balances = default(List<CapitalBalance>), string fundingBalanceAccountId = default(string), string id = default(string), List<GrantLimit> limits = default(List<GrantLimit>))
        {
            this.Balances = balances;
            this.FundingBalanceAccountId = fundingBalanceAccountId;
            this.Id = id;
            this.Limits = limits;
        }

        /// <summary>
        /// The balances of the grant account.
        /// </summary>
        /// <value>The balances of the grant account.</value>
        [DataMember(Name = "balances", EmitDefaultValue = false)]
        public List<CapitalBalance> Balances { get; set; }

        /// <summary>
        /// The unique identifier of the balance account used to fund the grant.
        /// </summary>
        /// <value>The unique identifier of the balance account used to fund the grant.</value>
        [DataMember(Name = "fundingBalanceAccountId", EmitDefaultValue = false)]
        public string FundingBalanceAccountId { get; set; }

        /// <summary>
        /// The identifier of the grant account.
        /// </summary>
        /// <value>The identifier of the grant account.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The limits of the grant account.
        /// </summary>
        /// <value>The limits of the grant account.</value>
        [DataMember(Name = "limits", EmitDefaultValue = false)]
        public List<GrantLimit> Limits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CapitalGrantAccount {\n");
            sb.Append("  Balances: ").Append(Balances).Append("\n");
            sb.Append("  FundingBalanceAccountId: ").Append(FundingBalanceAccountId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CapitalGrantAccount);
        }

        /// <summary>
        /// Returns true if CapitalGrantAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of CapitalGrantAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CapitalGrantAccount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Balances == input.Balances ||
                    this.Balances != null &&
                    input.Balances != null &&
                    this.Balances.SequenceEqual(input.Balances)
                ) && 
                (
                    this.FundingBalanceAccountId == input.FundingBalanceAccountId ||
                    (this.FundingBalanceAccountId != null &&
                    this.FundingBalanceAccountId.Equals(input.FundingBalanceAccountId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Limits == input.Limits ||
                    this.Limits != null &&
                    input.Limits != null &&
                    this.Limits.SequenceEqual(input.Limits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Balances != null)
                {
                    hashCode = (hashCode * 59) + this.Balances.GetHashCode();
                }
                if (this.FundingBalanceAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.FundingBalanceAccountId.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Limits != null)
                {
                    hashCode = (hashCode * 59) + this.Limits.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
