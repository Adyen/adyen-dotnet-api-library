/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BalancePlatform
{
    /// <summary>
    /// Condition
    /// </summary>
    [DataContract(Name = "Condition")]
    public partial class Condition : IEquatable<Condition>, IValidatableObject
    {
        /// <summary>
        /// Define the type of balance about which you want to get notified. Possible values:  * **available**: the balance available for use.  * **balance**: the sum of transactions that have already been settled.  * **pending**: the sum of transactions that will be settled in the future.  * **reserved**: the balance currently held in reserve.
        /// </summary>
        /// <value>Define the type of balance about which you want to get notified. Possible values:  * **available**: the balance available for use.  * **balance**: the sum of transactions that have already been settled.  * **pending**: the sum of transactions that will be settled in the future.  * **reserved**: the balance currently held in reserve.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BalanceTypeEnum
        {
            /// <summary>
            /// Enum Balance for value: balance
            /// </summary>
            [EnumMember(Value = "balance")]
            Balance = 1,

            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            [EnumMember(Value = "available")]
            Available = 2,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 3,

            /// <summary>
            /// Enum Reserved for value: reserved
            /// </summary>
            [EnumMember(Value = "reserved")]
            Reserved = 4

        }


        /// <summary>
        /// Define the type of balance about which you want to get notified. Possible values:  * **available**: the balance available for use.  * **balance**: the sum of transactions that have already been settled.  * **pending**: the sum of transactions that will be settled in the future.  * **reserved**: the balance currently held in reserve.
        /// </summary>
        /// <value>Define the type of balance about which you want to get notified. Possible values:  * **available**: the balance available for use.  * **balance**: the sum of transactions that have already been settled.  * **pending**: the sum of transactions that will be settled in the future.  * **reserved**: the balance currently held in reserve.</value>
        [DataMember(Name = "balanceType", IsRequired = false, EmitDefaultValue = false)]
        public BalanceTypeEnum BalanceType { get; set; }
        /// <summary>
        /// Define when you want to get notified about a balance change. Possible values:  * **greaterThan**: the balance in the account(s) exceeds the specified &#x60;value&#x60;.  * **greaterThanOrEqual**: the balance in the account(s) reaches or exceeds the specified &#x60;value&#x60;.  * **lessThan**: the balance in the account(s) drops below the specified &#x60;value&#x60;.  * **lessThanOrEqual**: the balance in the account(s) reaches to drops below the specified &#x60;value&#x60;.
        /// </summary>
        /// <value>Define when you want to get notified about a balance change. Possible values:  * **greaterThan**: the balance in the account(s) exceeds the specified &#x60;value&#x60;.  * **greaterThanOrEqual**: the balance in the account(s) reaches or exceeds the specified &#x60;value&#x60;.  * **lessThan**: the balance in the account(s) drops below the specified &#x60;value&#x60;.  * **lessThanOrEqual**: the balance in the account(s) reaches to drops below the specified &#x60;value&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConditionTypeEnum
        {
            /// <summary>
            /// Enum GreaterThan for value: greaterThan
            /// </summary>
            [EnumMember(Value = "greaterThan")]
            GreaterThan = 1,

            /// <summary>
            /// Enum GreaterThanOrEqual for value: greaterThanOrEqual
            /// </summary>
            [EnumMember(Value = "greaterThanOrEqual")]
            GreaterThanOrEqual = 2,

            /// <summary>
            /// Enum LessThan for value: lessThan
            /// </summary>
            [EnumMember(Value = "lessThan")]
            LessThan = 3,

            /// <summary>
            /// Enum LessThanOrEqual for value: lessThanOrEqual
            /// </summary>
            [EnumMember(Value = "lessThanOrEqual")]
            LessThanOrEqual = 4

        }


        /// <summary>
        /// Define when you want to get notified about a balance change. Possible values:  * **greaterThan**: the balance in the account(s) exceeds the specified &#x60;value&#x60;.  * **greaterThanOrEqual**: the balance in the account(s) reaches or exceeds the specified &#x60;value&#x60;.  * **lessThan**: the balance in the account(s) drops below the specified &#x60;value&#x60;.  * **lessThanOrEqual**: the balance in the account(s) reaches to drops below the specified &#x60;value&#x60;.
        /// </summary>
        /// <value>Define when you want to get notified about a balance change. Possible values:  * **greaterThan**: the balance in the account(s) exceeds the specified &#x60;value&#x60;.  * **greaterThanOrEqual**: the balance in the account(s) reaches or exceeds the specified &#x60;value&#x60;.  * **lessThan**: the balance in the account(s) drops below the specified &#x60;value&#x60;.  * **lessThanOrEqual**: the balance in the account(s) reaches to drops below the specified &#x60;value&#x60;.</value>
        [DataMember(Name = "conditionType", IsRequired = false, EmitDefaultValue = false)]
        public ConditionTypeEnum ConditionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Condition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Condition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Condition" /> class.
        /// </summary>
        /// <param name="balanceType">Define the type of balance about which you want to get notified. Possible values:  * **available**: the balance available for use.  * **balance**: the sum of transactions that have already been settled.  * **pending**: the sum of transactions that will be settled in the future.  * **reserved**: the balance currently held in reserve. (required).</param>
        /// <param name="conditionType">Define when you want to get notified about a balance change. Possible values:  * **greaterThan**: the balance in the account(s) exceeds the specified &#x60;value&#x60;.  * **greaterThanOrEqual**: the balance in the account(s) reaches or exceeds the specified &#x60;value&#x60;.  * **lessThan**: the balance in the account(s) drops below the specified &#x60;value&#x60;.  * **lessThanOrEqual**: the balance in the account(s) reaches to drops below the specified &#x60;value&#x60;. (required).</param>
        /// <param name="value">The value limit in the specified balance type and currency, in minor units. (required).</param>
        public Condition(BalanceTypeEnum balanceType = default(BalanceTypeEnum), ConditionTypeEnum conditionType = default(ConditionTypeEnum), long? value = default(long?))
        {
            this.BalanceType = balanceType;
            this.ConditionType = conditionType;
            this.Value = value;
        }

        /// <summary>
        /// The value limit in the specified balance type and currency, in minor units.
        /// </summary>
        /// <value>The value limit in the specified balance type and currency, in minor units.</value>
        [DataMember(Name = "value", IsRequired = false, EmitDefaultValue = false)]
        public long? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Condition {\n");
            sb.Append("  BalanceType: ").Append(BalanceType).Append("\n");
            sb.Append("  ConditionType: ").Append(ConditionType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Condition);
        }

        /// <summary>
        /// Returns true if Condition instances are equal
        /// </summary>
        /// <param name="input">Instance of Condition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Condition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BalanceType == input.BalanceType ||
                    this.BalanceType.Equals(input.BalanceType)
                ) && 
                (
                    this.ConditionType == input.ConditionType ||
                    this.ConditionType.Equals(input.ConditionType)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BalanceType.GetHashCode();
                hashCode = (hashCode * 59) + this.ConditionType.GetHashCode();
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
