/*
* Configuration API
*
*
* The version of the OpenAPI document: 2
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.BalancePlatform
{
    /// <summary>
    /// StringMatch
    /// </summary>
    [DataContract(Name = "StringMatch")]
    public partial class StringMatch : IEquatable<StringMatch>, IValidatableObject
    {
        /// <summary>
        /// The type of string matching operation. Possible values:  **startsWith**, **endsWith**, **isEqualTo**, **contains**,
        /// </summary>
        /// <value>The type of string matching operation. Possible values:  **startsWith**, **endsWith**, **isEqualTo**, **contains**,</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperationEnum
        {
            /// <summary>
            /// Enum Contains for value: contains
            /// </summary>
            [EnumMember(Value = "contains")]
            Contains = 1,

            /// <summary>
            /// Enum EndsWith for value: endsWith
            /// </summary>
            [EnumMember(Value = "endsWith")]
            EndsWith = 2,

            /// <summary>
            /// Enum IsEqualTo for value: isEqualTo
            /// </summary>
            [EnumMember(Value = "isEqualTo")]
            IsEqualTo = 3,

            /// <summary>
            /// Enum StartsWith for value: startsWith
            /// </summary>
            [EnumMember(Value = "startsWith")]
            StartsWith = 4

        }


        /// <summary>
        /// The type of string matching operation. Possible values:  **startsWith**, **endsWith**, **isEqualTo**, **contains**,
        /// </summary>
        /// <value>The type of string matching operation. Possible values:  **startsWith**, **endsWith**, **isEqualTo**, **contains**,</value>
        [DataMember(Name = "operation", EmitDefaultValue = false)]
        public OperationEnum? Operation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StringMatch" /> class.
        /// </summary>
        /// <param name="operation">The type of string matching operation. Possible values:  **startsWith**, **endsWith**, **isEqualTo**, **contains**,.</param>
        /// <param name="value">The string to be matched..</param>
        public StringMatch(OperationEnum? operation = default(OperationEnum?), string value = default(string))
        {
            this.Operation = operation;
            this.Value = value;
        }

        /// <summary>
        /// The string to be matched.
        /// </summary>
        /// <value>The string to be matched.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StringMatch {\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StringMatch);
        }

        /// <summary>
        /// Returns true if StringMatch instances are equal
        /// </summary>
        /// <param name="input">Instance of StringMatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StringMatch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Operation == input.Operation ||
                    this.Operation.Equals(input.Operation)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Operation.GetHashCode();
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}