/*
* Classic Platforms - Notifications
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsWebhooks
{
    /// <summary>
    /// AccountHolderPayoutNotificationContent
    /// </summary>
    [DataContract(Name = "AccountHolderPayoutNotificationContent")]
    public partial class AccountHolderPayoutNotificationContent : IEquatable<AccountHolderPayoutNotificationContent>, IValidatableObject
    {
        /// <summary>
        /// Speed with which payouts for this account are processed. Permitted values: &#x60;STANDARD&#x60;, &#x60;SAME_DAY&#x60;.
        /// </summary>
        /// <value>Speed with which payouts for this account are processed. Permitted values: &#x60;STANDARD&#x60;, &#x60;SAME_DAY&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PayoutSpeedEnum
        {
            /// <summary>
            /// Enum INSTANT for value: INSTANT
            /// </summary>
            [EnumMember(Value = "INSTANT")]
            INSTANT = 1,

            /// <summary>
            /// Enum SAMEDAY for value: SAME_DAY
            /// </summary>
            [EnumMember(Value = "SAME_DAY")]
            SAMEDAY = 2,

            /// <summary>
            /// Enum STANDARD for value: STANDARD
            /// </summary>
            [EnumMember(Value = "STANDARD")]
            STANDARD = 3

        }


        /// <summary>
        /// Speed with which payouts for this account are processed. Permitted values: &#x60;STANDARD&#x60;, &#x60;SAME_DAY&#x60;.
        /// </summary>
        /// <value>Speed with which payouts for this account are processed. Permitted values: &#x60;STANDARD&#x60;, &#x60;SAME_DAY&#x60;.</value>
        [DataMember(Name = "payoutSpeed", EmitDefaultValue = false)]
        public PayoutSpeedEnum? PayoutSpeed { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountHolderPayoutNotificationContent" /> class.
        /// </summary>
        /// <param name="accountCode">The code of the account from which the payout was made..</param>
        /// <param name="accountHolderCode">The code of the Account Holder to which the payout was made..</param>
        /// <param name="amounts">The payout amounts (per currency)..</param>
        /// <param name="bankAccountDetail">bankAccountDetail.</param>
        /// <param name="description">A description of the payout..</param>
        /// <param name="estimatedArrivalDate">estimatedArrivalDate.</param>
        /// <param name="invalidFields">Invalid fields list..</param>
        /// <param name="merchantReference">The merchant reference..</param>
        /// <param name="originalPspReference">The PSP reference of the original payout..</param>
        /// <param name="payoutAccountCountry">The country code of the bank from which the payout was initiated..</param>
        /// <param name="payoutAccountNumber">The account number of the bank from which the payout was initiated..</param>
        /// <param name="payoutBalanceAccountId">The balance account id to which payment was made.</param>
        /// <param name="payoutBankName">The name of the bank the payout from which the payout was initiated..</param>
        /// <param name="payoutBranchCode">The branch code of the bank from which the payout was initiated..</param>
        /// <param name="payoutReference">The unique payout identifier..</param>
        /// <param name="payoutSpeed">Speed with which payouts for this account are processed. Permitted values: &#x60;STANDARD&#x60;, &#x60;SAME_DAY&#x60;..</param>
        /// <param name="status">status.</param>
        public AccountHolderPayoutNotificationContent(string accountCode = default(string), string accountHolderCode = default(string), List<Amount> amounts = default(List<Amount>), BankAccountDetail bankAccountDetail = default(BankAccountDetail), string description = default(string), LocalDate estimatedArrivalDate = default(LocalDate), List<ErrorFieldType> invalidFields = default(List<ErrorFieldType>), string merchantReference = default(string), string originalPspReference = default(string), string payoutAccountCountry = default(string), string payoutAccountNumber = default(string), string payoutBalanceAccountId = default(string), string payoutBankName = default(string), string payoutBranchCode = default(string), long? payoutReference = default(long?), PayoutSpeedEnum? payoutSpeed = default(PayoutSpeedEnum?), OperationStatus status = default(OperationStatus))
        {
            this.AccountCode = accountCode;
            this.AccountHolderCode = accountHolderCode;
            this.Amounts = amounts;
            this.BankAccountDetail = bankAccountDetail;
            this.Description = description;
            this.EstimatedArrivalDate = estimatedArrivalDate;
            this.InvalidFields = invalidFields;
            this.MerchantReference = merchantReference;
            this.OriginalPspReference = originalPspReference;
            this.PayoutAccountCountry = payoutAccountCountry;
            this.PayoutAccountNumber = payoutAccountNumber;
            this.PayoutBalanceAccountId = payoutBalanceAccountId;
            this.PayoutBankName = payoutBankName;
            this.PayoutBranchCode = payoutBranchCode;
            this.PayoutReference = payoutReference;
            this.PayoutSpeed = payoutSpeed;
            this.Status = status;
        }

        /// <summary>
        /// The code of the account from which the payout was made.
        /// </summary>
        /// <value>The code of the account from which the payout was made.</value>
        [DataMember(Name = "accountCode", EmitDefaultValue = false)]
        public string AccountCode { get; set; }

        /// <summary>
        /// The code of the Account Holder to which the payout was made.
        /// </summary>
        /// <value>The code of the Account Holder to which the payout was made.</value>
        [DataMember(Name = "accountHolderCode", EmitDefaultValue = false)]
        public string AccountHolderCode { get; set; }

        /// <summary>
        /// The payout amounts (per currency).
        /// </summary>
        /// <value>The payout amounts (per currency).</value>
        [DataMember(Name = "amounts", EmitDefaultValue = false)]
        public List<Amount> Amounts { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountDetail
        /// </summary>
        [DataMember(Name = "bankAccountDetail", EmitDefaultValue = false)]
        public BankAccountDetail BankAccountDetail { get; set; }

        /// <summary>
        /// A description of the payout.
        /// </summary>
        /// <value>A description of the payout.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedArrivalDate
        /// </summary>
        [DataMember(Name = "estimatedArrivalDate", EmitDefaultValue = false)]
        public LocalDate EstimatedArrivalDate { get; set; }

        /// <summary>
        /// Invalid fields list.
        /// </summary>
        /// <value>Invalid fields list.</value>
        [DataMember(Name = "invalidFields", EmitDefaultValue = false)]
        public List<ErrorFieldType> InvalidFields { get; set; }

        /// <summary>
        /// The merchant reference.
        /// </summary>
        /// <value>The merchant reference.</value>
        [DataMember(Name = "merchantReference", EmitDefaultValue = false)]
        public string MerchantReference { get; set; }

        /// <summary>
        /// The PSP reference of the original payout.
        /// </summary>
        /// <value>The PSP reference of the original payout.</value>
        [DataMember(Name = "originalPspReference", EmitDefaultValue = false)]
        public string OriginalPspReference { get; set; }

        /// <summary>
        /// The country code of the bank from which the payout was initiated.
        /// </summary>
        /// <value>The country code of the bank from which the payout was initiated.</value>
        [DataMember(Name = "payoutAccountCountry", EmitDefaultValue = false)]
        public string PayoutAccountCountry { get; set; }

        /// <summary>
        /// The account number of the bank from which the payout was initiated.
        /// </summary>
        /// <value>The account number of the bank from which the payout was initiated.</value>
        [DataMember(Name = "payoutAccountNumber", EmitDefaultValue = false)]
        public string PayoutAccountNumber { get; set; }

        /// <summary>
        /// The balance account id to which payment was made
        /// </summary>
        /// <value>The balance account id to which payment was made</value>
        [DataMember(Name = "payoutBalanceAccountId", EmitDefaultValue = false)]
        public string PayoutBalanceAccountId { get; set; }

        /// <summary>
        /// The name of the bank the payout from which the payout was initiated.
        /// </summary>
        /// <value>The name of the bank the payout from which the payout was initiated.</value>
        [DataMember(Name = "payoutBankName", EmitDefaultValue = false)]
        public string PayoutBankName { get; set; }

        /// <summary>
        /// The branch code of the bank from which the payout was initiated.
        /// </summary>
        /// <value>The branch code of the bank from which the payout was initiated.</value>
        [DataMember(Name = "payoutBranchCode", EmitDefaultValue = false)]
        public string PayoutBranchCode { get; set; }

        /// <summary>
        /// The unique payout identifier.
        /// </summary>
        /// <value>The unique payout identifier.</value>
        [DataMember(Name = "payoutReference", EmitDefaultValue = false)]
        public long? PayoutReference { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public OperationStatus Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountHolderPayoutNotificationContent {\n");
            sb.Append("  AccountCode: ").Append(AccountCode).Append("\n");
            sb.Append("  AccountHolderCode: ").Append(AccountHolderCode).Append("\n");
            sb.Append("  Amounts: ").Append(Amounts).Append("\n");
            sb.Append("  BankAccountDetail: ").Append(BankAccountDetail).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EstimatedArrivalDate: ").Append(EstimatedArrivalDate).Append("\n");
            sb.Append("  InvalidFields: ").Append(InvalidFields).Append("\n");
            sb.Append("  MerchantReference: ").Append(MerchantReference).Append("\n");
            sb.Append("  OriginalPspReference: ").Append(OriginalPspReference).Append("\n");
            sb.Append("  PayoutAccountCountry: ").Append(PayoutAccountCountry).Append("\n");
            sb.Append("  PayoutAccountNumber: ").Append(PayoutAccountNumber).Append("\n");
            sb.Append("  PayoutBalanceAccountId: ").Append(PayoutBalanceAccountId).Append("\n");
            sb.Append("  PayoutBankName: ").Append(PayoutBankName).Append("\n");
            sb.Append("  PayoutBranchCode: ").Append(PayoutBranchCode).Append("\n");
            sb.Append("  PayoutReference: ").Append(PayoutReference).Append("\n");
            sb.Append("  PayoutSpeed: ").Append(PayoutSpeed).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountHolderPayoutNotificationContent);
        }

        /// <summary>
        /// Returns true if AccountHolderPayoutNotificationContent instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountHolderPayoutNotificationContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountHolderPayoutNotificationContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountCode == input.AccountCode ||
                    (this.AccountCode != null &&
                    this.AccountCode.Equals(input.AccountCode))
                ) && 
                (
                    this.AccountHolderCode == input.AccountHolderCode ||
                    (this.AccountHolderCode != null &&
                    this.AccountHolderCode.Equals(input.AccountHolderCode))
                ) && 
                (
                    this.Amounts == input.Amounts ||
                    this.Amounts != null &&
                    input.Amounts != null &&
                    this.Amounts.SequenceEqual(input.Amounts)
                ) && 
                (
                    this.BankAccountDetail == input.BankAccountDetail ||
                    (this.BankAccountDetail != null &&
                    this.BankAccountDetail.Equals(input.BankAccountDetail))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EstimatedArrivalDate == input.EstimatedArrivalDate ||
                    (this.EstimatedArrivalDate != null &&
                    this.EstimatedArrivalDate.Equals(input.EstimatedArrivalDate))
                ) && 
                (
                    this.InvalidFields == input.InvalidFields ||
                    this.InvalidFields != null &&
                    input.InvalidFields != null &&
                    this.InvalidFields.SequenceEqual(input.InvalidFields)
                ) && 
                (
                    this.MerchantReference == input.MerchantReference ||
                    (this.MerchantReference != null &&
                    this.MerchantReference.Equals(input.MerchantReference))
                ) && 
                (
                    this.OriginalPspReference == input.OriginalPspReference ||
                    (this.OriginalPspReference != null &&
                    this.OriginalPspReference.Equals(input.OriginalPspReference))
                ) && 
                (
                    this.PayoutAccountCountry == input.PayoutAccountCountry ||
                    (this.PayoutAccountCountry != null &&
                    this.PayoutAccountCountry.Equals(input.PayoutAccountCountry))
                ) && 
                (
                    this.PayoutAccountNumber == input.PayoutAccountNumber ||
                    (this.PayoutAccountNumber != null &&
                    this.PayoutAccountNumber.Equals(input.PayoutAccountNumber))
                ) && 
                (
                    this.PayoutBalanceAccountId == input.PayoutBalanceAccountId ||
                    (this.PayoutBalanceAccountId != null &&
                    this.PayoutBalanceAccountId.Equals(input.PayoutBalanceAccountId))
                ) && 
                (
                    this.PayoutBankName == input.PayoutBankName ||
                    (this.PayoutBankName != null &&
                    this.PayoutBankName.Equals(input.PayoutBankName))
                ) && 
                (
                    this.PayoutBranchCode == input.PayoutBranchCode ||
                    (this.PayoutBranchCode != null &&
                    this.PayoutBranchCode.Equals(input.PayoutBranchCode))
                ) && 
                (
                    this.PayoutReference == input.PayoutReference ||
                    this.PayoutReference.Equals(input.PayoutReference)
                ) && 
                (
                    this.PayoutSpeed == input.PayoutSpeed ||
                    this.PayoutSpeed.Equals(input.PayoutSpeed)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountCode != null)
                {
                    hashCode = (hashCode * 59) + this.AccountCode.GetHashCode();
                }
                if (this.AccountHolderCode != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolderCode.GetHashCode();
                }
                if (this.Amounts != null)
                {
                    hashCode = (hashCode * 59) + this.Amounts.GetHashCode();
                }
                if (this.BankAccountDetail != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountDetail.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.EstimatedArrivalDate != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedArrivalDate.GetHashCode();
                }
                if (this.InvalidFields != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidFields.GetHashCode();
                }
                if (this.MerchantReference != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantReference.GetHashCode();
                }
                if (this.OriginalPspReference != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalPspReference.GetHashCode();
                }
                if (this.PayoutAccountCountry != null)
                {
                    hashCode = (hashCode * 59) + this.PayoutAccountCountry.GetHashCode();
                }
                if (this.PayoutAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PayoutAccountNumber.GetHashCode();
                }
                if (this.PayoutBalanceAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.PayoutBalanceAccountId.GetHashCode();
                }
                if (this.PayoutBankName != null)
                {
                    hashCode = (hashCode * 59) + this.PayoutBankName.GetHashCode();
                }
                if (this.PayoutBranchCode != null)
                {
                    hashCode = (hashCode * 59) + this.PayoutBranchCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PayoutReference.GetHashCode();
                hashCode = (hashCode * 59) + this.PayoutSpeed.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
