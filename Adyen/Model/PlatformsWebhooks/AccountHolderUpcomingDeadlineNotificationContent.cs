/*
* Classic Platforms - Notifications
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsWebhooks
{
    /// <summary>
    /// AccountHolderUpcomingDeadlineNotificationContent
    /// </summary>
    [DataContract(Name = "AccountHolderUpcomingDeadlineNotificationContent")]
    public partial class AccountHolderUpcomingDeadlineNotificationContent : IEquatable<AccountHolderUpcomingDeadlineNotificationContent>, IValidatableObject
    {
        /// <summary>
        /// The event name that will be trigger if no action is taken.
        /// </summary>
        /// <value>The event name that will be trigger if no action is taken.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventEnum
        {
            /// <summary>
            /// Enum AccessPii for value: AccessPii
            /// </summary>
            [EnumMember(Value = "AccessPii")]
            AccessPii = 1,

            /// <summary>
            /// Enum ApiTierUpdate for value: ApiTierUpdate
            /// </summary>
            [EnumMember(Value = "ApiTierUpdate")]
            ApiTierUpdate = 2,

            /// <summary>
            /// Enum CloseAccount for value: CloseAccount
            /// </summary>
            [EnumMember(Value = "CloseAccount")]
            CloseAccount = 3,

            /// <summary>
            /// Enum CloseStores for value: CloseStores
            /// </summary>
            [EnumMember(Value = "CloseStores")]
            CloseStores = 4,

            /// <summary>
            /// Enum DeleteBalanceAccounts for value: DeleteBalanceAccounts
            /// </summary>
            [EnumMember(Value = "DeleteBalanceAccounts")]
            DeleteBalanceAccounts = 5,

            /// <summary>
            /// Enum DeleteBankAccounts for value: DeleteBankAccounts
            /// </summary>
            [EnumMember(Value = "DeleteBankAccounts")]
            DeleteBankAccounts = 6,

            /// <summary>
            /// Enum DeleteLegalArrangements for value: DeleteLegalArrangements
            /// </summary>
            [EnumMember(Value = "DeleteLegalArrangements")]
            DeleteLegalArrangements = 7,

            /// <summary>
            /// Enum DeleteLiableBankAccount for value: DeleteLiableBankAccount
            /// </summary>
            [EnumMember(Value = "DeleteLiableBankAccount")]
            DeleteLiableBankAccount = 8,

            /// <summary>
            /// Enum DeletePayoutMethods for value: DeletePayoutMethods
            /// </summary>
            [EnumMember(Value = "DeletePayoutMethods")]
            DeletePayoutMethods = 9,

            /// <summary>
            /// Enum DeleteShareholders for value: DeleteShareholders
            /// </summary>
            [EnumMember(Value = "DeleteShareholders")]
            DeleteShareholders = 10,

            /// <summary>
            /// Enum DeleteSignatories for value: DeleteSignatories
            /// </summary>
            [EnumMember(Value = "DeleteSignatories")]
            DeleteSignatories = 11,

            /// <summary>
            /// Enum InactivateAccount for value: InactivateAccount
            /// </summary>
            [EnumMember(Value = "InactivateAccount")]
            InactivateAccount = 12,

            /// <summary>
            /// Enum KYCDeadlineExtension for value: KYCDeadlineExtension
            /// </summary>
            [EnumMember(Value = "KYCDeadlineExtension")]
            KYCDeadlineExtension = 13,

            /// <summary>
            /// Enum MigrateAccountToBP for value: MigrateAccountToBP
            /// </summary>
            [EnumMember(Value = "MigrateAccountToBP")]
            MigrateAccountToBP = 14,

            /// <summary>
            /// Enum RecalculateAccountStatusAndProcessingTier for value: RecalculateAccountStatusAndProcessingTier
            /// </summary>
            [EnumMember(Value = "RecalculateAccountStatusAndProcessingTier")]
            RecalculateAccountStatusAndProcessingTier = 15,

            /// <summary>
            /// Enum RefundNotPaidOutTransfers for value: RefundNotPaidOutTransfers
            /// </summary>
            [EnumMember(Value = "RefundNotPaidOutTransfers")]
            RefundNotPaidOutTransfers = 16,

            /// <summary>
            /// Enum ResolveEvents for value: ResolveEvents
            /// </summary>
            [EnumMember(Value = "ResolveEvents")]
            ResolveEvents = 17,

            /// <summary>
            /// Enum SaveAccountHolder for value: SaveAccountHolder
            /// </summary>
            [EnumMember(Value = "SaveAccountHolder")]
            SaveAccountHolder = 18,

            /// <summary>
            /// Enum SaveKYCCheckStatus for value: SaveKYCCheckStatus
            /// </summary>
            [EnumMember(Value = "SaveKYCCheckStatus")]
            SaveKYCCheckStatus = 19,

            /// <summary>
            /// Enum SavePEPChecks for value: SavePEPChecks
            /// </summary>
            [EnumMember(Value = "SavePEPChecks")]
            SavePEPChecks = 20,

            /// <summary>
            /// Enum SuspendAccount for value: SuspendAccount
            /// </summary>
            [EnumMember(Value = "SuspendAccount")]
            SuspendAccount = 21,

            /// <summary>
            /// Enum UnSuspendAccount for value: UnSuspendAccount
            /// </summary>
            [EnumMember(Value = "UnSuspendAccount")]
            UnSuspendAccount = 22,

            /// <summary>
            /// Enum UpdateAccountHolderState for value: UpdateAccountHolderState
            /// </summary>
            [EnumMember(Value = "UpdateAccountHolderState")]
            UpdateAccountHolderState = 23,

            /// <summary>
            /// Enum Verification for value: Verification
            /// </summary>
            [EnumMember(Value = "Verification")]
            Verification = 24

        }


        /// <summary>
        /// The event name that will be trigger if no action is taken.
        /// </summary>
        /// <value>The event name that will be trigger if no action is taken.</value>
        [DataMember(Name = "event", EmitDefaultValue = false)]
        public EventEnum? Event { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountHolderUpcomingDeadlineNotificationContent" /> class.
        /// </summary>
        /// <param name="accountHolderCode">The code of the account holder whom the event refers to..</param>
        /// <param name="_event">The event name that will be trigger if no action is taken..</param>
        /// <param name="executionDate">The execution date scheduled for the event..</param>
        /// <param name="reason">The reason that leads to scheduling of the event..</param>
        public AccountHolderUpcomingDeadlineNotificationContent(string accountHolderCode = default(string), EventEnum? _event = default(EventEnum?), DateTime executionDate = default(DateTime), string reason = default(string))
        {
            this.AccountHolderCode = accountHolderCode;
            this.Event = _event;
            this.ExecutionDate = executionDate;
            this.Reason = reason;
        }

        /// <summary>
        /// The code of the account holder whom the event refers to.
        /// </summary>
        /// <value>The code of the account holder whom the event refers to.</value>
        [DataMember(Name = "accountHolderCode", EmitDefaultValue = false)]
        public string AccountHolderCode { get; set; }

        /// <summary>
        /// The execution date scheduled for the event.
        /// </summary>
        /// <value>The execution date scheduled for the event.</value>
        [DataMember(Name = "executionDate", EmitDefaultValue = false)]
        public DateTime ExecutionDate { get; set; }

        /// <summary>
        /// The reason that leads to scheduling of the event.
        /// </summary>
        /// <value>The reason that leads to scheduling of the event.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountHolderUpcomingDeadlineNotificationContent {\n");
            sb.Append("  AccountHolderCode: ").Append(AccountHolderCode).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  ExecutionDate: ").Append(ExecutionDate).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountHolderUpcomingDeadlineNotificationContent);
        }

        /// <summary>
        /// Returns true if AccountHolderUpcomingDeadlineNotificationContent instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountHolderUpcomingDeadlineNotificationContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountHolderUpcomingDeadlineNotificationContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountHolderCode == input.AccountHolderCode ||
                    (this.AccountHolderCode != null &&
                    this.AccountHolderCode.Equals(input.AccountHolderCode))
                ) && 
                (
                    this.Event == input.Event ||
                    this.Event.Equals(input.Event)
                ) && 
                (
                    this.ExecutionDate == input.ExecutionDate ||
                    (this.ExecutionDate != null &&
                    this.ExecutionDate.Equals(input.ExecutionDate))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountHolderCode != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolderCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Event.GetHashCode();
                if (this.ExecutionDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExecutionDate.GetHashCode();
                }
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
