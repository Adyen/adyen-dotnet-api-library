/*
* Classic Platforms - Notifications
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsWebhooks
{
    /// <summary>
    /// KYCCheckStatusData
    /// </summary>
    [DataContract(Name = "KYCCheckStatusData")]
    public partial class KYCCheckStatusData : IEquatable<KYCCheckStatusData>, IValidatableObject
    {
        /// <summary>
        /// The status of the check.  Possible values: **AWAITING_DATA** , **DATA_PROVIDED**, **FAILED**, **INVALID_DATA**, **PASSED**, **PENDING**, **RETRY_LIMIT_REACHED**.
        /// </summary>
        /// <value>The status of the check.  Possible values: **AWAITING_DATA** , **DATA_PROVIDED**, **FAILED**, **INVALID_DATA**, **PASSED**, **PENDING**, **RETRY_LIMIT_REACHED**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum AWAITINGDATA for value: AWAITING_DATA
            /// </summary>
            [EnumMember(Value = "AWAITING_DATA")]
            AWAITINGDATA = 1,

            /// <summary>
            /// Enum DATAPROVIDED for value: DATA_PROVIDED
            /// </summary>
            [EnumMember(Value = "DATA_PROVIDED")]
            DATAPROVIDED = 2,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3,

            /// <summary>
            /// Enum INVALIDDATA for value: INVALID_DATA
            /// </summary>
            [EnumMember(Value = "INVALID_DATA")]
            INVALIDDATA = 4,

            /// <summary>
            /// Enum PASSED for value: PASSED
            /// </summary>
            [EnumMember(Value = "PASSED")]
            PASSED = 5,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 6,

            /// <summary>
            /// Enum PENDINGREVIEW for value: PENDING_REVIEW
            /// </summary>
            [EnumMember(Value = "PENDING_REVIEW")]
            PENDINGREVIEW = 7,

            /// <summary>
            /// Enum RETRYLIMITREACHED for value: RETRY_LIMIT_REACHED
            /// </summary>
            [EnumMember(Value = "RETRY_LIMIT_REACHED")]
            RETRYLIMITREACHED = 8,

            /// <summary>
            /// Enum UNCHECKED for value: UNCHECKED
            /// </summary>
            [EnumMember(Value = "UNCHECKED")]
            UNCHECKED = 9

        }


        /// <summary>
        /// The status of the check.  Possible values: **AWAITING_DATA** , **DATA_PROVIDED**, **FAILED**, **INVALID_DATA**, **PASSED**, **PENDING**, **RETRY_LIMIT_REACHED**.
        /// </summary>
        /// <value>The status of the check.  Possible values: **AWAITING_DATA** , **DATA_PROVIDED**, **FAILED**, **INVALID_DATA**, **PASSED**, **PENDING**, **RETRY_LIMIT_REACHED**.</value>
        [DataMember(Name = "status", IsRequired = false, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// The type of check.  Possible values:   * **BANK_ACCOUNT_VERIFICATION**: Used in v5 and earlier. Replaced by **PAYOUT_METHOD_VERIFICATION** in v6 and later.   * **COMPANY_VERIFICATION**    * **CARD_VERIFICATION**  * **IDENTITY_VERIFICATION**  * **LEGAL_ARRANGEMENT_VERIFICATION**  * **NONPROFIT_VERIFICATION**   * **PASSPORT_VERIFICATION**  * **PAYOUT_METHOD_VERIFICATION**: Used in v6 and later.  * **PCI_VERIFICATION**
        /// </summary>
        /// <value>The type of check.  Possible values:   * **BANK_ACCOUNT_VERIFICATION**: Used in v5 and earlier. Replaced by **PAYOUT_METHOD_VERIFICATION** in v6 and later.   * **COMPANY_VERIFICATION**    * **CARD_VERIFICATION**  * **IDENTITY_VERIFICATION**  * **LEGAL_ARRANGEMENT_VERIFICATION**  * **NONPROFIT_VERIFICATION**   * **PASSPORT_VERIFICATION**  * **PAYOUT_METHOD_VERIFICATION**: Used in v6 and later.  * **PCI_VERIFICATION**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum BANKACCOUNTVERIFICATION for value: BANK_ACCOUNT_VERIFICATION
            /// </summary>
            [EnumMember(Value = "BANK_ACCOUNT_VERIFICATION")]
            BANKACCOUNTVERIFICATION = 1,

            /// <summary>
            /// Enum CARDVERIFICATION for value: CARD_VERIFICATION
            /// </summary>
            [EnumMember(Value = "CARD_VERIFICATION")]
            CARDVERIFICATION = 2,

            /// <summary>
            /// Enum COMPANYVERIFICATION for value: COMPANY_VERIFICATION
            /// </summary>
            [EnumMember(Value = "COMPANY_VERIFICATION")]
            COMPANYVERIFICATION = 3,

            /// <summary>
            /// Enum IDENTITYVERIFICATION for value: IDENTITY_VERIFICATION
            /// </summary>
            [EnumMember(Value = "IDENTITY_VERIFICATION")]
            IDENTITYVERIFICATION = 4,

            /// <summary>
            /// Enum LEGALARRANGEMENTVERIFICATION for value: LEGAL_ARRANGEMENT_VERIFICATION
            /// </summary>
            [EnumMember(Value = "LEGAL_ARRANGEMENT_VERIFICATION")]
            LEGALARRANGEMENTVERIFICATION = 5,

            /// <summary>
            /// Enum NONPROFITVERIFICATION for value: NONPROFIT_VERIFICATION
            /// </summary>
            [EnumMember(Value = "NONPROFIT_VERIFICATION")]
            NONPROFITVERIFICATION = 6,

            /// <summary>
            /// Enum PASSPORTVERIFICATION for value: PASSPORT_VERIFICATION
            /// </summary>
            [EnumMember(Value = "PASSPORT_VERIFICATION")]
            PASSPORTVERIFICATION = 7,

            /// <summary>
            /// Enum PAYOUTMETHODVERIFICATION for value: PAYOUT_METHOD_VERIFICATION
            /// </summary>
            [EnumMember(Value = "PAYOUT_METHOD_VERIFICATION")]
            PAYOUTMETHODVERIFICATION = 8,

            /// <summary>
            /// Enum PCIVERIFICATION for value: PCI_VERIFICATION
            /// </summary>
            [EnumMember(Value = "PCI_VERIFICATION")]
            PCIVERIFICATION = 9

        }


        /// <summary>
        /// The type of check.  Possible values:   * **BANK_ACCOUNT_VERIFICATION**: Used in v5 and earlier. Replaced by **PAYOUT_METHOD_VERIFICATION** in v6 and later.   * **COMPANY_VERIFICATION**    * **CARD_VERIFICATION**  * **IDENTITY_VERIFICATION**  * **LEGAL_ARRANGEMENT_VERIFICATION**  * **NONPROFIT_VERIFICATION**   * **PASSPORT_VERIFICATION**  * **PAYOUT_METHOD_VERIFICATION**: Used in v6 and later.  * **PCI_VERIFICATION**
        /// </summary>
        /// <value>The type of check.  Possible values:   * **BANK_ACCOUNT_VERIFICATION**: Used in v5 and earlier. Replaced by **PAYOUT_METHOD_VERIFICATION** in v6 and later.   * **COMPANY_VERIFICATION**    * **CARD_VERIFICATION**  * **IDENTITY_VERIFICATION**  * **LEGAL_ARRANGEMENT_VERIFICATION**  * **NONPROFIT_VERIFICATION**   * **PASSPORT_VERIFICATION**  * **PAYOUT_METHOD_VERIFICATION**: Used in v6 and later.  * **PCI_VERIFICATION**</value>
        [DataMember(Name = "type", IsRequired = false, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KYCCheckStatusData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KYCCheckStatusData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KYCCheckStatusData" /> class.
        /// </summary>
        /// <param name="requiredFields">A list of the fields required for execution of the check..</param>
        /// <param name="status">The status of the check.  Possible values: **AWAITING_DATA** , **DATA_PROVIDED**, **FAILED**, **INVALID_DATA**, **PASSED**, **PENDING**, **RETRY_LIMIT_REACHED**. (required).</param>
        /// <param name="summary">summary.</param>
        /// <param name="type">The type of check.  Possible values:   * **BANK_ACCOUNT_VERIFICATION**: Used in v5 and earlier. Replaced by **PAYOUT_METHOD_VERIFICATION** in v6 and later.   * **COMPANY_VERIFICATION**    * **CARD_VERIFICATION**  * **IDENTITY_VERIFICATION**  * **LEGAL_ARRANGEMENT_VERIFICATION**  * **NONPROFIT_VERIFICATION**   * **PASSPORT_VERIFICATION**  * **PAYOUT_METHOD_VERIFICATION**: Used in v6 and later.  * **PCI_VERIFICATION** (required).</param>
        public KYCCheckStatusData(List<string> requiredFields = default(List<string>), StatusEnum status = default(StatusEnum), KYCCheckSummary summary = default(KYCCheckSummary), TypeEnum type = default(TypeEnum))
        {
            this.Status = status;
            this.Type = type;
            this.RequiredFields = requiredFields;
            this.Summary = summary;
        }

        /// <summary>
        /// A list of the fields required for execution of the check.
        /// </summary>
        /// <value>A list of the fields required for execution of the check.</value>
        [DataMember(Name = "requiredFields", EmitDefaultValue = false)]
        public List<string> RequiredFields { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public KYCCheckSummary Summary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KYCCheckStatusData {\n");
            sb.Append("  RequiredFields: ").Append(RequiredFields).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KYCCheckStatusData);
        }

        /// <summary>
        /// Returns true if KYCCheckStatusData instances are equal
        /// </summary>
        /// <param name="input">Instance of KYCCheckStatusData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KYCCheckStatusData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequiredFields == input.RequiredFields ||
                    this.RequiredFields != null &&
                    input.RequiredFields != null &&
                    this.RequiredFields.SequenceEqual(input.RequiredFields)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequiredFields != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredFields.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Summary != null)
                {
                    hashCode = (hashCode * 59) + this.Summary.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
