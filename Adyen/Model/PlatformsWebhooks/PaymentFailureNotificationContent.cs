/*
* Classic Platforms - Notifications
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsWebhooks
{
    /// <summary>
    /// PaymentFailureNotificationContent
    /// </summary>
    [DataContract(Name = "PaymentFailureNotificationContent")]
    public partial class PaymentFailureNotificationContent : IEquatable<PaymentFailureNotificationContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentFailureNotificationContent" /> class.
        /// </summary>
        /// <param name="errorFields">Missing or invalid fields that caused the payment error..</param>
        /// <param name="errorMessage">errorMessage.</param>
        /// <param name="modificationMerchantReference">The &#x60;reference&#x60; of the capture or refund..</param>
        /// <param name="modificationPspReference">The &#x60;pspReference&#x60; of the capture or refund..</param>
        /// <param name="paymentMerchantReference">The &#x60;reference&#x60; of the payment..</param>
        /// <param name="paymentPspReference">The &#x60;pspReference&#x60; of the payment..</param>
        public PaymentFailureNotificationContent(List<ErrorFieldType> errorFields = default(List<ErrorFieldType>), Message errorMessage = default(Message), string modificationMerchantReference = default(string), string modificationPspReference = default(string), string paymentMerchantReference = default(string), string paymentPspReference = default(string))
        {
            this.ErrorFields = errorFields;
            this.ErrorMessage = errorMessage;
            this.ModificationMerchantReference = modificationMerchantReference;
            this.ModificationPspReference = modificationPspReference;
            this.PaymentMerchantReference = paymentMerchantReference;
            this.PaymentPspReference = paymentPspReference;
        }

        /// <summary>
        /// Missing or invalid fields that caused the payment error.
        /// </summary>
        /// <value>Missing or invalid fields that caused the payment error.</value>
        [DataMember(Name = "errorFields", EmitDefaultValue = false)]
        public List<ErrorFieldType> ErrorFields { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name = "errorMessage", EmitDefaultValue = false)]
        public Message ErrorMessage { get; set; }

        /// <summary>
        /// The &#x60;reference&#x60; of the capture or refund.
        /// </summary>
        /// <value>The &#x60;reference&#x60; of the capture or refund.</value>
        [DataMember(Name = "modificationMerchantReference", EmitDefaultValue = false)]
        public string ModificationMerchantReference { get; set; }

        /// <summary>
        /// The &#x60;pspReference&#x60; of the capture or refund.
        /// </summary>
        /// <value>The &#x60;pspReference&#x60; of the capture or refund.</value>
        [DataMember(Name = "modificationPspReference", EmitDefaultValue = false)]
        public string ModificationPspReference { get; set; }

        /// <summary>
        /// The &#x60;reference&#x60; of the payment.
        /// </summary>
        /// <value>The &#x60;reference&#x60; of the payment.</value>
        [DataMember(Name = "paymentMerchantReference", EmitDefaultValue = false)]
        public string PaymentMerchantReference { get; set; }

        /// <summary>
        /// The &#x60;pspReference&#x60; of the payment.
        /// </summary>
        /// <value>The &#x60;pspReference&#x60; of the payment.</value>
        [DataMember(Name = "paymentPspReference", EmitDefaultValue = false)]
        public string PaymentPspReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentFailureNotificationContent {\n");
            sb.Append("  ErrorFields: ").Append(ErrorFields).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ModificationMerchantReference: ").Append(ModificationMerchantReference).Append("\n");
            sb.Append("  ModificationPspReference: ").Append(ModificationPspReference).Append("\n");
            sb.Append("  PaymentMerchantReference: ").Append(PaymentMerchantReference).Append("\n");
            sb.Append("  PaymentPspReference: ").Append(PaymentPspReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentFailureNotificationContent);
        }

        /// <summary>
        /// Returns true if PaymentFailureNotificationContent instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentFailureNotificationContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentFailureNotificationContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ErrorFields == input.ErrorFields ||
                    this.ErrorFields != null &&
                    input.ErrorFields != null &&
                    this.ErrorFields.SequenceEqual(input.ErrorFields)
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.ModificationMerchantReference == input.ModificationMerchantReference ||
                    (this.ModificationMerchantReference != null &&
                    this.ModificationMerchantReference.Equals(input.ModificationMerchantReference))
                ) && 
                (
                    this.ModificationPspReference == input.ModificationPspReference ||
                    (this.ModificationPspReference != null &&
                    this.ModificationPspReference.Equals(input.ModificationPspReference))
                ) && 
                (
                    this.PaymentMerchantReference == input.PaymentMerchantReference ||
                    (this.PaymentMerchantReference != null &&
                    this.PaymentMerchantReference.Equals(input.PaymentMerchantReference))
                ) && 
                (
                    this.PaymentPspReference == input.PaymentPspReference ||
                    (this.PaymentPspReference != null &&
                    this.PaymentPspReference.Equals(input.PaymentPspReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorFields != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorFields.GetHashCode();
                }
                if (this.ErrorMessage != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMessage.GetHashCode();
                }
                if (this.ModificationMerchantReference != null)
                {
                    hashCode = (hashCode * 59) + this.ModificationMerchantReference.GetHashCode();
                }
                if (this.ModificationPspReference != null)
                {
                    hashCode = (hashCode * 59) + this.ModificationPspReference.GetHashCode();
                }
                if (this.PaymentMerchantReference != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMerchantReference.GetHashCode();
                }
                if (this.PaymentPspReference != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentPspReference.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
