/*
* Transfer webhooks
*
*
* The version of the OpenAPI document: 4
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.TransferWebhooks
{
    /// <summary>
    /// CardIdentification
    /// </summary>
    [DataContract(Name = "CardIdentification")]
    public partial class CardIdentification : IEquatable<CardIdentification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardIdentification" /> class.
        /// </summary>
        /// <param name="expiryMonth">The expiry month of the card.  Format: two digits. Add a leading zero for single-digit months. For example: * 03 &#x3D; March * 11 &#x3D; November.</param>
        /// <param name="expiryYear">The expiry year of the card.  Format: four digits. For example: 2020.</param>
        /// <param name="issueNumber">The issue number of the card. Applies only to some UK debit cards..</param>
        /// <param name="number">The card number without any separators.  For security, the response only includes the last four digits of the card number..</param>
        /// <param name="startMonth">The month when the card was issued. Applies only to some UK debit cards.  Format: two digits. Add a leading zero for single-digit months. For example: * 03 &#x3D; March * 11 &#x3D; November.</param>
        /// <param name="startYear">The year when the card was issued. Applies only to some UK debit cards.  Format: four digits. For example: 2020.</param>
        /// <param name="storedPaymentMethodId">The unique [token](/payouts/payout-service/pay-out-to-cards/manage-card-information#save-card-details) created to identify the counterparty.  .</param>
        public CardIdentification(string expiryMonth = default(string), string expiryYear = default(string), string issueNumber = default(string), string number = default(string), string startMonth = default(string), string startYear = default(string), string storedPaymentMethodId = default(string))
        {
            this.ExpiryMonth = expiryMonth;
            this.ExpiryYear = expiryYear;
            this.IssueNumber = issueNumber;
            this.Number = number;
            this.StartMonth = startMonth;
            this.StartYear = startYear;
            this.StoredPaymentMethodId = storedPaymentMethodId;
        }

        /// <summary>
        /// The expiry month of the card.  Format: two digits. Add a leading zero for single-digit months. For example: * 03 &#x3D; March * 11 &#x3D; November
        /// </summary>
        /// <value>The expiry month of the card.  Format: two digits. Add a leading zero for single-digit months. For example: * 03 &#x3D; March * 11 &#x3D; November</value>
        [DataMember(Name = "expiryMonth", EmitDefaultValue = false)]
        public string ExpiryMonth { get; set; }

        /// <summary>
        /// The expiry year of the card.  Format: four digits. For example: 2020
        /// </summary>
        /// <value>The expiry year of the card.  Format: four digits. For example: 2020</value>
        [DataMember(Name = "expiryYear", EmitDefaultValue = false)]
        public string ExpiryYear { get; set; }

        /// <summary>
        /// The issue number of the card. Applies only to some UK debit cards.
        /// </summary>
        /// <value>The issue number of the card. Applies only to some UK debit cards.</value>
        [DataMember(Name = "issueNumber", EmitDefaultValue = false)]
        public string IssueNumber { get; set; }

        /// <summary>
        /// The card number without any separators.  For security, the response only includes the last four digits of the card number.
        /// </summary>
        /// <value>The card number without any separators.  For security, the response only includes the last four digits of the card number.</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// The month when the card was issued. Applies only to some UK debit cards.  Format: two digits. Add a leading zero for single-digit months. For example: * 03 &#x3D; March * 11 &#x3D; November
        /// </summary>
        /// <value>The month when the card was issued. Applies only to some UK debit cards.  Format: two digits. Add a leading zero for single-digit months. For example: * 03 &#x3D; March * 11 &#x3D; November</value>
        [DataMember(Name = "startMonth", EmitDefaultValue = false)]
        public string StartMonth { get; set; }

        /// <summary>
        /// The year when the card was issued. Applies only to some UK debit cards.  Format: four digits. For example: 2020
        /// </summary>
        /// <value>The year when the card was issued. Applies only to some UK debit cards.  Format: four digits. For example: 2020</value>
        [DataMember(Name = "startYear", EmitDefaultValue = false)]
        public string StartYear { get; set; }

        /// <summary>
        /// The unique [token](/payouts/payout-service/pay-out-to-cards/manage-card-information#save-card-details) created to identify the counterparty.  
        /// </summary>
        /// <value>The unique [token](/payouts/payout-service/pay-out-to-cards/manage-card-information#save-card-details) created to identify the counterparty.  </value>
        [DataMember(Name = "storedPaymentMethodId", EmitDefaultValue = false)]
        public string StoredPaymentMethodId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardIdentification {\n");
            sb.Append("  ExpiryMonth: ").Append(ExpiryMonth).Append("\n");
            sb.Append("  ExpiryYear: ").Append(ExpiryYear).Append("\n");
            sb.Append("  IssueNumber: ").Append(IssueNumber).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  StartMonth: ").Append(StartMonth).Append("\n");
            sb.Append("  StartYear: ").Append(StartYear).Append("\n");
            sb.Append("  StoredPaymentMethodId: ").Append(StoredPaymentMethodId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardIdentification);
        }

        /// <summary>
        /// Returns true if CardIdentification instances are equal
        /// </summary>
        /// <param name="input">Instance of CardIdentification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardIdentification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExpiryMonth == input.ExpiryMonth ||
                    (this.ExpiryMonth != null &&
                    this.ExpiryMonth.Equals(input.ExpiryMonth))
                ) && 
                (
                    this.ExpiryYear == input.ExpiryYear ||
                    (this.ExpiryYear != null &&
                    this.ExpiryYear.Equals(input.ExpiryYear))
                ) && 
                (
                    this.IssueNumber == input.IssueNumber ||
                    (this.IssueNumber != null &&
                    this.IssueNumber.Equals(input.IssueNumber))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.StartMonth == input.StartMonth ||
                    (this.StartMonth != null &&
                    this.StartMonth.Equals(input.StartMonth))
                ) && 
                (
                    this.StartYear == input.StartYear ||
                    (this.StartYear != null &&
                    this.StartYear.Equals(input.StartYear))
                ) && 
                (
                    this.StoredPaymentMethodId == input.StoredPaymentMethodId ||
                    (this.StoredPaymentMethodId != null &&
                    this.StoredPaymentMethodId.Equals(input.StoredPaymentMethodId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpiryMonth != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiryMonth.GetHashCode();
                }
                if (this.ExpiryYear != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiryYear.GetHashCode();
                }
                if (this.IssueNumber != null)
                {
                    hashCode = (hashCode * 59) + this.IssueNumber.GetHashCode();
                }
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.StartMonth != null)
                {
                    hashCode = (hashCode * 59) + this.StartMonth.GetHashCode();
                }
                if (this.StartYear != null)
                {
                    hashCode = (hashCode * 59) + this.StartYear.GetHashCode();
                }
                if (this.StoredPaymentMethodId != null)
                {
                    hashCode = (hashCode * 59) + this.StoredPaymentMethodId.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ExpiryMonth (string) maxLength
            if (this.ExpiryMonth != null && this.ExpiryMonth.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryMonth, length must be less than 2.", new [] { "ExpiryMonth" });
            }

            // ExpiryMonth (string) minLength
            if (this.ExpiryMonth != null && this.ExpiryMonth.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryMonth, length must be greater than 2.", new [] { "ExpiryMonth" });
            }

            // ExpiryYear (string) maxLength
            if (this.ExpiryYear != null && this.ExpiryYear.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryYear, length must be less than 4.", new [] { "ExpiryYear" });
            }

            // ExpiryYear (string) minLength
            if (this.ExpiryYear != null && this.ExpiryYear.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryYear, length must be greater than 4.", new [] { "ExpiryYear" });
            }

            // IssueNumber (string) maxLength
            if (this.IssueNumber != null && this.IssueNumber.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssueNumber, length must be less than 2.", new [] { "IssueNumber" });
            }

            // IssueNumber (string) minLength
            if (this.IssueNumber != null && this.IssueNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssueNumber, length must be greater than 1.", new [] { "IssueNumber" });
            }

            // Number (string) maxLength
            if (this.Number != null && this.Number.Length > 19)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Number, length must be less than 19.", new [] { "Number" });
            }

            // Number (string) minLength
            if (this.Number != null && this.Number.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Number, length must be greater than 4.", new [] { "Number" });
            }

            // StartMonth (string) maxLength
            if (this.StartMonth != null && this.StartMonth.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartMonth, length must be less than 2.", new [] { "StartMonth" });
            }

            // StartMonth (string) minLength
            if (this.StartMonth != null && this.StartMonth.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartMonth, length must be greater than 2.", new [] { "StartMonth" });
            }

            // StartYear (string) maxLength
            if (this.StartYear != null && this.StartYear.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartYear, length must be less than 4.", new [] { "StartYear" });
            }

            // StartYear (string) minLength
            if (this.StartYear != null && this.StartYear.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartYear, length must be greater than 4.", new [] { "StartYear" });
            }

            yield break;
        }
    }

}
