/*
* Transfer webhooks
*
*
* The version of the OpenAPI document: 4
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.TransferWebhooks
{
    /// <summary>
    /// BankAccountV3
    /// </summary>
    [DataContract(Name = "BankAccountV3")]
    public partial class BankAccountV3 : IEquatable<BankAccountV3>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountV3" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankAccountV3() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountV3" /> class.
        /// </summary>
        /// <param name="accountHolder">accountHolder (required).</param>
        /// <param name="accountIdentification">accountIdentification (required).</param>
        public BankAccountV3(PartyIdentification accountHolder = default(PartyIdentification), BankAccountV3AccountIdentification accountIdentification = default(BankAccountV3AccountIdentification))
        {
            this.AccountHolder = accountHolder;
            this.AccountIdentification = accountIdentification;
        }

        /// <summary>
        /// Gets or Sets AccountHolder
        /// </summary>
        [DataMember(Name = "accountHolder", IsRequired = false, EmitDefaultValue = false)]
        public PartyIdentification AccountHolder { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdentification
        /// </summary>
        [DataMember(Name = "accountIdentification", IsRequired = false, EmitDefaultValue = false)]
        public BankAccountV3AccountIdentification AccountIdentification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankAccountV3 {\n");
            sb.Append("  AccountHolder: ").Append(AccountHolder).Append("\n");
            sb.Append("  AccountIdentification: ").Append(AccountIdentification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankAccountV3);
        }

        /// <summary>
        /// Returns true if BankAccountV3 instances are equal
        /// </summary>
        /// <param name="input">Instance of BankAccountV3 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankAccountV3 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountHolder == input.AccountHolder ||
                    (this.AccountHolder != null &&
                    this.AccountHolder.Equals(input.AccountHolder))
                ) && 
                (
                    this.AccountIdentification == input.AccountIdentification ||
                    (this.AccountIdentification != null &&
                    this.AccountIdentification.Equals(input.AccountIdentification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountHolder != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolder.GetHashCode();
                }
                if (this.AccountIdentification != null)
                {
                    hashCode = (hashCode * 59) + this.AccountIdentification.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
