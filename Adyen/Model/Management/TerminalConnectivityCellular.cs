/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// TerminalConnectivityCellular
    /// </summary>
    [DataContract(Name = "TerminalConnectivityCellular")]
    public partial class TerminalConnectivityCellular : IEquatable<TerminalConnectivityCellular>, IValidatableObject
    {
        /// <summary>
        /// On a terminal that supports 3G or 4G connectivity, indicates the status of the SIM card in the terminal.
        /// </summary>
        /// <value>On a terminal that supports 3G or 4G connectivity, indicates the status of the SIM card in the terminal.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Activated for value: activated
            /// </summary>
            [EnumMember(Value = "activated")]
            Activated = 1,

            /// <summary>
            /// Enum Deactivated for value: deactivated
            /// </summary>
            [EnumMember(Value = "deactivated")]
            Deactivated = 2,

            /// <summary>
            /// Enum Deprecated for value: deprecated
            /// </summary>
            [EnumMember(Value = "deprecated")]
            Deprecated = 3,

            /// <summary>
            /// Enum Inventory for value: inventory
            /// </summary>
            [EnumMember(Value = "inventory")]
            Inventory = 4,

            /// <summary>
            /// Enum ReadyForActivation for value: readyForActivation
            /// </summary>
            [EnumMember(Value = "readyForActivation")]
            ReadyForActivation = 5

        }


        /// <summary>
        /// On a terminal that supports 3G or 4G connectivity, indicates the status of the SIM card in the terminal.
        /// </summary>
        /// <value>On a terminal that supports 3G or 4G connectivity, indicates the status of the SIM card in the terminal.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalConnectivityCellular" /> class.
        /// </summary>
        /// <param name="iccid">The integrated circuit card identifier (ICCID) of the SIM card in the terminal..</param>
        /// <param name="status">On a terminal that supports 3G or 4G connectivity, indicates the status of the SIM card in the terminal..</param>
        public TerminalConnectivityCellular(string iccid = default(string), StatusEnum? status = default(StatusEnum?))
        {
            this.Iccid = iccid;
            this.Status = status;
        }

        /// <summary>
        /// The integrated circuit card identifier (ICCID) of the SIM card in the terminal.
        /// </summary>
        /// <value>The integrated circuit card identifier (ICCID) of the SIM card in the terminal.</value>
        [DataMember(Name = "iccid", EmitDefaultValue = false)]
        public string Iccid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TerminalConnectivityCellular {\n");
            sb.Append("  Iccid: ").Append(Iccid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TerminalConnectivityCellular);
        }

        /// <summary>
        /// Returns true if TerminalConnectivityCellular instances are equal
        /// </summary>
        /// <param name="input">Instance of TerminalConnectivityCellular to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TerminalConnectivityCellular input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Iccid == input.Iccid ||
                    (this.Iccid != null &&
                    this.Iccid.Equals(input.Iccid))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Iccid != null)
                {
                    hashCode = (hashCode * 59) + this.Iccid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
