/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// NyceInfo
    /// </summary>
    [DataContract(Name = "NyceInfo")]
    public partial class NyceInfo : IEquatable<NyceInfo>, IValidatableObject
    {
        /// <summary>
        /// The type of transactions processed over this payment method.  Allowed values: - **pos** for in-person payments.  - **billpay** for subscription payments, both the initial payment and the later recurring payments. These transactions have &#x60;recurringProcessingModel&#x60; **Subscription**.  - **ecom** for all other card not present transactions. This includes non-recurring transactions and transactions with &#x60;recurringProcessingModel&#x60; **CardOnFile** or **UnscheduledCardOnFile**. 
        /// </summary>
        /// <value>The type of transactions processed over this payment method.  Allowed values: - **pos** for in-person payments.  - **billpay** for subscription payments, both the initial payment and the later recurring payments. These transactions have &#x60;recurringProcessingModel&#x60; **Subscription**.  - **ecom** for all other card not present transactions. This includes non-recurring transactions and transactions with &#x60;recurringProcessingModel&#x60; **CardOnFile** or **UnscheduledCardOnFile**. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingTypeEnum
        {
            /// <summary>
            /// Enum Billpay for value: billpay
            /// </summary>
            [EnumMember(Value = "billpay")]
            Billpay = 1,

            /// <summary>
            /// Enum Ecom for value: ecom
            /// </summary>
            [EnumMember(Value = "ecom")]
            Ecom = 2,

            /// <summary>
            /// Enum Pos for value: pos
            /// </summary>
            [EnumMember(Value = "pos")]
            Pos = 3

        }


        /// <summary>
        /// The type of transactions processed over this payment method.  Allowed values: - **pos** for in-person payments.  - **billpay** for subscription payments, both the initial payment and the later recurring payments. These transactions have &#x60;recurringProcessingModel&#x60; **Subscription**.  - **ecom** for all other card not present transactions. This includes non-recurring transactions and transactions with &#x60;recurringProcessingModel&#x60; **CardOnFile** or **UnscheduledCardOnFile**. 
        /// </summary>
        /// <value>The type of transactions processed over this payment method.  Allowed values: - **pos** for in-person payments.  - **billpay** for subscription payments, both the initial payment and the later recurring payments. These transactions have &#x60;recurringProcessingModel&#x60; **Subscription**.  - **ecom** for all other card not present transactions. This includes non-recurring transactions and transactions with &#x60;recurringProcessingModel&#x60; **CardOnFile** or **UnscheduledCardOnFile**. </value>
        [DataMember(Name = "processingType", IsRequired = false, EmitDefaultValue = false)]
        public ProcessingTypeEnum ProcessingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NyceInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NyceInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NyceInfo" /> class.
        /// </summary>
        /// <param name="processingType">The type of transactions processed over this payment method.  Allowed values: - **pos** for in-person payments.  - **billpay** for subscription payments, both the initial payment and the later recurring payments. These transactions have &#x60;recurringProcessingModel&#x60; **Subscription**.  - **ecom** for all other card not present transactions. This includes non-recurring transactions and transactions with &#x60;recurringProcessingModel&#x60; **CardOnFile** or **UnscheduledCardOnFile**.  (required).</param>
        /// <param name="transactionDescription">transactionDescription.</param>
        public NyceInfo(ProcessingTypeEnum processingType = default(ProcessingTypeEnum), TransactionDescriptionInfo transactionDescription = default(TransactionDescriptionInfo))
        {
            this.ProcessingType = processingType;
            this.TransactionDescription = transactionDescription;
        }

        /// <summary>
        /// Gets or Sets TransactionDescription
        /// </summary>
        [DataMember(Name = "transactionDescription", EmitDefaultValue = false)]
        public TransactionDescriptionInfo TransactionDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NyceInfo {\n");
            sb.Append("  ProcessingType: ").Append(ProcessingType).Append("\n");
            sb.Append("  TransactionDescription: ").Append(TransactionDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NyceInfo);
        }

        /// <summary>
        /// Returns true if NyceInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of NyceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NyceInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProcessingType == input.ProcessingType ||
                    this.ProcessingType.Equals(input.ProcessingType)
                ) && 
                (
                    this.TransactionDescription == input.TransactionDescription ||
                    (this.TransactionDescription != null &&
                    this.TransactionDescription.Equals(input.TransactionDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ProcessingType.GetHashCode();
                if (this.TransactionDescription != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionDescription.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
