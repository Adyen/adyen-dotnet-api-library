/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// AdditionalCommission
    /// </summary>
    [DataContract(Name = "AdditionalCommission")]
    public partial class AdditionalCommission : IEquatable<AdditionalCommission>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalCommission" /> class.
        /// </summary>
        /// <param name="balanceAccountId">Unique identifier of the balance account to which the additional commission is booked..</param>
        /// <param name="fixedAmount">A fixed commission fee, in minor units..</param>
        /// <param name="variablePercentage">A variable commission fee, in basis points..</param>
        public AdditionalCommission(string balanceAccountId = default(string), long? fixedAmount = default(long?), long? variablePercentage = default(long?))
        {
            this.BalanceAccountId = balanceAccountId;
            this.FixedAmount = fixedAmount;
            this.VariablePercentage = variablePercentage;
        }

        /// <summary>
        /// Unique identifier of the balance account to which the additional commission is booked.
        /// </summary>
        /// <value>Unique identifier of the balance account to which the additional commission is booked.</value>
        [DataMember(Name = "balanceAccountId", EmitDefaultValue = false)]
        public string BalanceAccountId { get; set; }

        /// <summary>
        /// A fixed commission fee, in minor units.
        /// </summary>
        /// <value>A fixed commission fee, in minor units.</value>
        [DataMember(Name = "fixedAmount", EmitDefaultValue = false)]
        public long? FixedAmount { get; set; }

        /// <summary>
        /// A variable commission fee, in basis points.
        /// </summary>
        /// <value>A variable commission fee, in basis points.</value>
        [DataMember(Name = "variablePercentage", EmitDefaultValue = false)]
        public long? VariablePercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalCommission {\n");
            sb.Append("  BalanceAccountId: ").Append(BalanceAccountId).Append("\n");
            sb.Append("  FixedAmount: ").Append(FixedAmount).Append("\n");
            sb.Append("  VariablePercentage: ").Append(VariablePercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalCommission);
        }

        /// <summary>
        /// Returns true if AdditionalCommission instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalCommission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalCommission input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BalanceAccountId == input.BalanceAccountId ||
                    (this.BalanceAccountId != null &&
                    this.BalanceAccountId.Equals(input.BalanceAccountId))
                ) && 
                (
                    this.FixedAmount == input.FixedAmount ||
                    this.FixedAmount.Equals(input.FixedAmount)
                ) && 
                (
                    this.VariablePercentage == input.VariablePercentage ||
                    this.VariablePercentage.Equals(input.VariablePercentage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BalanceAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.BalanceAccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FixedAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.VariablePercentage.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
