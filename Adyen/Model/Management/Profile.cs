/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// Profile
    /// </summary>
    [DataContract(Name = "Profile")]
    public partial class Profile : IEquatable<Profile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Profile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile" /> class.
        /// </summary>
        /// <param name="authType">The type of Wi-Fi network. Possible values: **wpa-psk**, **wpa2-psk**, **wpa-eap**, **wpa2-eap**. (required).</param>
        /// <param name="autoWifi">Indicates whether to automatically select the best authentication method available. Does not work on older terminal models..</param>
        /// <param name="bssType">Use **infra** for infrastructure-based networks. This applies to most networks. Use **adhoc** only if the communication is p2p-based between base stations. (required).</param>
        /// <param name="channel">The channel number of the Wi-Fi network. The recommended setting is **0** for automatic channel selection..</param>
        /// <param name="defaultProfile">Indicates whether this is your preferred wireless network. If **true**, the terminal will try connecting to this network first..</param>
        /// <param name="eap">For &#x60;authType&#x60; **wpa-eap** or **wpa2-eap**. Possible values: **tls**, **peap**, **leap**, **fast**.</param>
        /// <param name="eapCaCert">eapCaCert.</param>
        /// <param name="eapClientCert">eapClientCert.</param>
        /// <param name="eapClientKey">eapClientKey.</param>
        /// <param name="eapClientPwd">For &#x60;eap&#x60; **tls**. The password of the RSA key file, if that file is password-protected..</param>
        /// <param name="eapIdentity">For &#x60;authType&#x60; **wpa-eap** or **wpa2-eap**. The EAP-PEAP username from your MS-CHAP account. Must match the configuration of your RADIUS server..</param>
        /// <param name="eapIntermediateCert">eapIntermediateCert.</param>
        /// <param name="eapPwd">For &#x60;eap&#x60; **peap**. The EAP-PEAP password from your MS-CHAP account. Must match the configuration of your RADIUS server..</param>
        /// <param name="hiddenSsid">Indicates if the network doesn&#39;t broadcast its SSID. Mandatory for Android terminals, because these terminals rely on this setting to be able to connect to any network..</param>
        /// <param name="name">Your name for the Wi-Fi profile..</param>
        /// <param name="psk">For &#x60;authType&#x60; **wpa-psk or **wpa2-psk**. The password to the wireless network..</param>
        /// <param name="ssid">The name of the wireless network. (required).</param>
        /// <param name="wsec">The type of encryption. Possible values: **auto**, **ccmp** (recommended), **tkip** (required).</param>
        public Profile(string authType = default(string), bool? autoWifi = default(bool?), string bssType = default(string), int? channel = default(int?), bool? defaultProfile = default(bool?), string eap = default(string), File eapCaCert = default(File), File eapClientCert = default(File), File eapClientKey = default(File), string eapClientPwd = default(string), string eapIdentity = default(string), File eapIntermediateCert = default(File), string eapPwd = default(string), bool? hiddenSsid = default(bool?), string name = default(string), string psk = default(string), string ssid = default(string), string wsec = default(string))
        {
            this.AuthType = authType;
            this.BssType = bssType;
            this.Ssid = ssid;
            this.Wsec = wsec;
            this.AutoWifi = autoWifi;
            this.Channel = channel;
            this.DefaultProfile = defaultProfile;
            this.Eap = eap;
            this.EapCaCert = eapCaCert;
            this.EapClientCert = eapClientCert;
            this.EapClientKey = eapClientKey;
            this.EapClientPwd = eapClientPwd;
            this.EapIdentity = eapIdentity;
            this.EapIntermediateCert = eapIntermediateCert;
            this.EapPwd = eapPwd;
            this.HiddenSsid = hiddenSsid;
            this.Name = name;
            this.Psk = psk;
        }

        /// <summary>
        /// The type of Wi-Fi network. Possible values: **wpa-psk**, **wpa2-psk**, **wpa-eap**, **wpa2-eap**.
        /// </summary>
        /// <value>The type of Wi-Fi network. Possible values: **wpa-psk**, **wpa2-psk**, **wpa-eap**, **wpa2-eap**.</value>
        [DataMember(Name = "authType", IsRequired = false, EmitDefaultValue = false)]
        public string AuthType { get; set; }

        /// <summary>
        /// Indicates whether to automatically select the best authentication method available. Does not work on older terminal models.
        /// </summary>
        /// <value>Indicates whether to automatically select the best authentication method available. Does not work on older terminal models.</value>
        [DataMember(Name = "autoWifi", EmitDefaultValue = false)]
        public bool? AutoWifi { get; set; }

        /// <summary>
        /// Use **infra** for infrastructure-based networks. This applies to most networks. Use **adhoc** only if the communication is p2p-based between base stations.
        /// </summary>
        /// <value>Use **infra** for infrastructure-based networks. This applies to most networks. Use **adhoc** only if the communication is p2p-based between base stations.</value>
        [DataMember(Name = "bssType", IsRequired = false, EmitDefaultValue = false)]
        public string BssType { get; set; }

        /// <summary>
        /// The channel number of the Wi-Fi network. The recommended setting is **0** for automatic channel selection.
        /// </summary>
        /// <value>The channel number of the Wi-Fi network. The recommended setting is **0** for automatic channel selection.</value>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public int? Channel { get; set; }

        /// <summary>
        /// Indicates whether this is your preferred wireless network. If **true**, the terminal will try connecting to this network first.
        /// </summary>
        /// <value>Indicates whether this is your preferred wireless network. If **true**, the terminal will try connecting to this network first.</value>
        [DataMember(Name = "defaultProfile", EmitDefaultValue = false)]
        public bool? DefaultProfile { get; set; }

        /// <summary>
        /// For &#x60;authType&#x60; **wpa-eap** or **wpa2-eap**. Possible values: **tls**, **peap**, **leap**, **fast**
        /// </summary>
        /// <value>For &#x60;authType&#x60; **wpa-eap** or **wpa2-eap**. Possible values: **tls**, **peap**, **leap**, **fast**</value>
        [DataMember(Name = "eap", EmitDefaultValue = false)]
        public string Eap { get; set; }

        /// <summary>
        /// Gets or Sets EapCaCert
        /// </summary>
        [DataMember(Name = "eapCaCert", EmitDefaultValue = false)]
        public File EapCaCert { get; set; }

        /// <summary>
        /// Gets or Sets EapClientCert
        /// </summary>
        [DataMember(Name = "eapClientCert", EmitDefaultValue = false)]
        public File EapClientCert { get; set; }

        /// <summary>
        /// Gets or Sets EapClientKey
        /// </summary>
        [DataMember(Name = "eapClientKey", EmitDefaultValue = false)]
        public File EapClientKey { get; set; }

        /// <summary>
        /// For &#x60;eap&#x60; **tls**. The password of the RSA key file, if that file is password-protected.
        /// </summary>
        /// <value>For &#x60;eap&#x60; **tls**. The password of the RSA key file, if that file is password-protected.</value>
        [DataMember(Name = "eapClientPwd", EmitDefaultValue = false)]
        public string EapClientPwd { get; set; }

        /// <summary>
        /// For &#x60;authType&#x60; **wpa-eap** or **wpa2-eap**. The EAP-PEAP username from your MS-CHAP account. Must match the configuration of your RADIUS server.
        /// </summary>
        /// <value>For &#x60;authType&#x60; **wpa-eap** or **wpa2-eap**. The EAP-PEAP username from your MS-CHAP account. Must match the configuration of your RADIUS server.</value>
        [DataMember(Name = "eapIdentity", EmitDefaultValue = false)]
        public string EapIdentity { get; set; }

        /// <summary>
        /// Gets or Sets EapIntermediateCert
        /// </summary>
        [DataMember(Name = "eapIntermediateCert", EmitDefaultValue = false)]
        public File EapIntermediateCert { get; set; }

        /// <summary>
        /// For &#x60;eap&#x60; **peap**. The EAP-PEAP password from your MS-CHAP account. Must match the configuration of your RADIUS server.
        /// </summary>
        /// <value>For &#x60;eap&#x60; **peap**. The EAP-PEAP password from your MS-CHAP account. Must match the configuration of your RADIUS server.</value>
        [DataMember(Name = "eapPwd", EmitDefaultValue = false)]
        public string EapPwd { get; set; }

        /// <summary>
        /// Indicates if the network doesn&#39;t broadcast its SSID. Mandatory for Android terminals, because these terminals rely on this setting to be able to connect to any network.
        /// </summary>
        /// <value>Indicates if the network doesn&#39;t broadcast its SSID. Mandatory for Android terminals, because these terminals rely on this setting to be able to connect to any network.</value>
        [DataMember(Name = "hiddenSsid", EmitDefaultValue = false)]
        public bool? HiddenSsid { get; set; }

        /// <summary>
        /// Your name for the Wi-Fi profile.
        /// </summary>
        /// <value>Your name for the Wi-Fi profile.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// For &#x60;authType&#x60; **wpa-psk or **wpa2-psk**. The password to the wireless network.
        /// </summary>
        /// <value>For &#x60;authType&#x60; **wpa-psk or **wpa2-psk**. The password to the wireless network.</value>
        [DataMember(Name = "psk", EmitDefaultValue = false)]
        public string Psk { get; set; }

        /// <summary>
        /// The name of the wireless network.
        /// </summary>
        /// <value>The name of the wireless network.</value>
        [DataMember(Name = "ssid", IsRequired = false, EmitDefaultValue = false)]
        public string Ssid { get; set; }

        /// <summary>
        /// The type of encryption. Possible values: **auto**, **ccmp** (recommended), **tkip**
        /// </summary>
        /// <value>The type of encryption. Possible values: **auto**, **ccmp** (recommended), **tkip**</value>
        [DataMember(Name = "wsec", IsRequired = false, EmitDefaultValue = false)]
        public string Wsec { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Profile {\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  AutoWifi: ").Append(AutoWifi).Append("\n");
            sb.Append("  BssType: ").Append(BssType).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  DefaultProfile: ").Append(DefaultProfile).Append("\n");
            sb.Append("  Eap: ").Append(Eap).Append("\n");
            sb.Append("  EapCaCert: ").Append(EapCaCert).Append("\n");
            sb.Append("  EapClientCert: ").Append(EapClientCert).Append("\n");
            sb.Append("  EapClientKey: ").Append(EapClientKey).Append("\n");
            sb.Append("  EapClientPwd: ").Append(EapClientPwd).Append("\n");
            sb.Append("  EapIdentity: ").Append(EapIdentity).Append("\n");
            sb.Append("  EapIntermediateCert: ").Append(EapIntermediateCert).Append("\n");
            sb.Append("  EapPwd: ").Append(EapPwd).Append("\n");
            sb.Append("  HiddenSsid: ").Append(HiddenSsid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Psk: ").Append(Psk).Append("\n");
            sb.Append("  Ssid: ").Append(Ssid).Append("\n");
            sb.Append("  Wsec: ").Append(Wsec).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Profile);
        }

        /// <summary>
        /// Returns true if Profile instances are equal
        /// </summary>
        /// <param name="input">Instance of Profile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Profile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthType == input.AuthType ||
                    (this.AuthType != null &&
                    this.AuthType.Equals(input.AuthType))
                ) && 
                (
                    this.AutoWifi == input.AutoWifi ||
                    this.AutoWifi.Equals(input.AutoWifi)
                ) && 
                (
                    this.BssType == input.BssType ||
                    (this.BssType != null &&
                    this.BssType.Equals(input.BssType))
                ) && 
                (
                    this.Channel == input.Channel ||
                    this.Channel.Equals(input.Channel)
                ) && 
                (
                    this.DefaultProfile == input.DefaultProfile ||
                    this.DefaultProfile.Equals(input.DefaultProfile)
                ) && 
                (
                    this.Eap == input.Eap ||
                    (this.Eap != null &&
                    this.Eap.Equals(input.Eap))
                ) && 
                (
                    this.EapCaCert == input.EapCaCert ||
                    (this.EapCaCert != null &&
                    this.EapCaCert.Equals(input.EapCaCert))
                ) && 
                (
                    this.EapClientCert == input.EapClientCert ||
                    (this.EapClientCert != null &&
                    this.EapClientCert.Equals(input.EapClientCert))
                ) && 
                (
                    this.EapClientKey == input.EapClientKey ||
                    (this.EapClientKey != null &&
                    this.EapClientKey.Equals(input.EapClientKey))
                ) && 
                (
                    this.EapClientPwd == input.EapClientPwd ||
                    (this.EapClientPwd != null &&
                    this.EapClientPwd.Equals(input.EapClientPwd))
                ) && 
                (
                    this.EapIdentity == input.EapIdentity ||
                    (this.EapIdentity != null &&
                    this.EapIdentity.Equals(input.EapIdentity))
                ) && 
                (
                    this.EapIntermediateCert == input.EapIntermediateCert ||
                    (this.EapIntermediateCert != null &&
                    this.EapIntermediateCert.Equals(input.EapIntermediateCert))
                ) && 
                (
                    this.EapPwd == input.EapPwd ||
                    (this.EapPwd != null &&
                    this.EapPwd.Equals(input.EapPwd))
                ) && 
                (
                    this.HiddenSsid == input.HiddenSsid ||
                    this.HiddenSsid.Equals(input.HiddenSsid)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Psk == input.Psk ||
                    (this.Psk != null &&
                    this.Psk.Equals(input.Psk))
                ) && 
                (
                    this.Ssid == input.Ssid ||
                    (this.Ssid != null &&
                    this.Ssid.Equals(input.Ssid))
                ) && 
                (
                    this.Wsec == input.Wsec ||
                    (this.Wsec != null &&
                    this.Wsec.Equals(input.Wsec))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthType != null)
                {
                    hashCode = (hashCode * 59) + this.AuthType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoWifi.GetHashCode();
                if (this.BssType != null)
                {
                    hashCode = (hashCode * 59) + this.BssType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Channel.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultProfile.GetHashCode();
                if (this.Eap != null)
                {
                    hashCode = (hashCode * 59) + this.Eap.GetHashCode();
                }
                if (this.EapCaCert != null)
                {
                    hashCode = (hashCode * 59) + this.EapCaCert.GetHashCode();
                }
                if (this.EapClientCert != null)
                {
                    hashCode = (hashCode * 59) + this.EapClientCert.GetHashCode();
                }
                if (this.EapClientKey != null)
                {
                    hashCode = (hashCode * 59) + this.EapClientKey.GetHashCode();
                }
                if (this.EapClientPwd != null)
                {
                    hashCode = (hashCode * 59) + this.EapClientPwd.GetHashCode();
                }
                if (this.EapIdentity != null)
                {
                    hashCode = (hashCode * 59) + this.EapIdentity.GetHashCode();
                }
                if (this.EapIntermediateCert != null)
                {
                    hashCode = (hashCode * 59) + this.EapIntermediateCert.GetHashCode();
                }
                if (this.EapPwd != null)
                {
                    hashCode = (hashCode * 59) + this.EapPwd.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HiddenSsid.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Psk != null)
                {
                    hashCode = (hashCode * 59) + this.Psk.GetHashCode();
                }
                if (this.Ssid != null)
                {
                    hashCode = (hashCode * 59) + this.Ssid.GetHashCode();
                }
                if (this.Wsec != null)
                {
                    hashCode = (hashCode * 59) + this.Wsec.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
