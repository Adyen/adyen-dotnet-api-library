/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// DinersInfo
    /// </summary>
    [DataContract(Name = "DinersInfo")]
    public partial class DinersInfo : IEquatable<DinersInfo>, IValidatableObject
    {
        /// <summary>
        /// Specifies the service level (settlement type) of this payment method. Required for merchants operating in Japan. Possible values:  * **noContract**: Adyen holds the contract with JCB.  * **gatewayContract**: JCB receives the settlement and handles disputes, then pays out to you or your sub-merchant directly.
        /// </summary>
        /// <value>Specifies the service level (settlement type) of this payment method. Required for merchants operating in Japan. Possible values:  * **noContract**: Adyen holds the contract with JCB.  * **gatewayContract**: JCB receives the settlement and handles disputes, then pays out to you or your sub-merchant directly.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceLevelEnum
        {
            /// <summary>
            /// Enum NoContract for value: noContract
            /// </summary>
            [EnumMember(Value = "noContract")]
            NoContract = 1,

            /// <summary>
            /// Enum GatewayContract for value: gatewayContract
            /// </summary>
            [EnumMember(Value = "gatewayContract")]
            GatewayContract = 2

        }


        /// <summary>
        /// Specifies the service level (settlement type) of this payment method. Required for merchants operating in Japan. Possible values:  * **noContract**: Adyen holds the contract with JCB.  * **gatewayContract**: JCB receives the settlement and handles disputes, then pays out to you or your sub-merchant directly.
        /// </summary>
        /// <value>Specifies the service level (settlement type) of this payment method. Required for merchants operating in Japan. Possible values:  * **noContract**: Adyen holds the contract with JCB.  * **gatewayContract**: JCB receives the settlement and handles disputes, then pays out to you or your sub-merchant directly.</value>
        [DataMember(Name = "serviceLevel", EmitDefaultValue = false)]
        public ServiceLevelEnum? ServiceLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DinersInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DinersInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DinersInfo" /> class.
        /// </summary>
        /// <param name="midNumber">MID (Merchant ID) number. Required for merchants operating in Japan. Format: 14 numeric characters..</param>
        /// <param name="reuseMidNumber">Indicates whether the JCB Merchant ID is reused from a previously configured JCB payment method. The default value is **false**. For merchants operating in Japan, this field is required and must be set to **true**. (required) (default to false).</param>
        /// <param name="serviceLevel">Specifies the service level (settlement type) of this payment method. Required for merchants operating in Japan. Possible values:  * **noContract**: Adyen holds the contract with JCB.  * **gatewayContract**: JCB receives the settlement and handles disputes, then pays out to you or your sub-merchant directly..</param>
        /// <param name="transactionDescription">transactionDescription.</param>
        public DinersInfo(string midNumber = default(string), bool? reuseMidNumber = false, ServiceLevelEnum? serviceLevel = default(ServiceLevelEnum?), TransactionDescriptionInfo transactionDescription = default(TransactionDescriptionInfo))
        {
            this.ReuseMidNumber = reuseMidNumber;
            this.MidNumber = midNumber;
            this.ServiceLevel = serviceLevel;
            this.TransactionDescription = transactionDescription;
        }

        /// <summary>
        /// MID (Merchant ID) number. Required for merchants operating in Japan. Format: 14 numeric characters.
        /// </summary>
        /// <value>MID (Merchant ID) number. Required for merchants operating in Japan. Format: 14 numeric characters.</value>
        [DataMember(Name = "midNumber", EmitDefaultValue = false)]
        public string MidNumber { get; set; }

        /// <summary>
        /// Indicates whether the JCB Merchant ID is reused from a previously configured JCB payment method. The default value is **false**. For merchants operating in Japan, this field is required and must be set to **true**.
        /// </summary>
        /// <value>Indicates whether the JCB Merchant ID is reused from a previously configured JCB payment method. The default value is **false**. For merchants operating in Japan, this field is required and must be set to **true**.</value>
        [DataMember(Name = "reuseMidNumber", IsRequired = false, EmitDefaultValue = false)]
        public bool? ReuseMidNumber { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDescription
        /// </summary>
        [DataMember(Name = "transactionDescription", EmitDefaultValue = false)]
        public TransactionDescriptionInfo TransactionDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DinersInfo {\n");
            sb.Append("  MidNumber: ").Append(MidNumber).Append("\n");
            sb.Append("  ReuseMidNumber: ").Append(ReuseMidNumber).Append("\n");
            sb.Append("  ServiceLevel: ").Append(ServiceLevel).Append("\n");
            sb.Append("  TransactionDescription: ").Append(TransactionDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DinersInfo);
        }

        /// <summary>
        /// Returns true if DinersInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DinersInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DinersInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MidNumber == input.MidNumber ||
                    (this.MidNumber != null &&
                    this.MidNumber.Equals(input.MidNumber))
                ) && 
                (
                    this.ReuseMidNumber == input.ReuseMidNumber ||
                    this.ReuseMidNumber.Equals(input.ReuseMidNumber)
                ) && 
                (
                    this.ServiceLevel == input.ServiceLevel ||
                    this.ServiceLevel.Equals(input.ServiceLevel)
                ) && 
                (
                    this.TransactionDescription == input.TransactionDescription ||
                    (this.TransactionDescription != null &&
                    this.TransactionDescription.Equals(input.TransactionDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MidNumber != null)
                {
                    hashCode = (hashCode * 59) + this.MidNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReuseMidNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ServiceLevel.GetHashCode();
                if (this.TransactionDescription != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionDescription.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // MidNumber (string) maxLength
            if (this.MidNumber != null && this.MidNumber.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MidNumber, length must be less than 14.", new [] { "MidNumber" });
            }

            yield break;
        }
    }

}
