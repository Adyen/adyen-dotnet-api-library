/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// Terminal
    /// </summary>
    [DataContract(Name = "Terminal")]
    public partial class Terminal : IEquatable<Terminal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Terminal" /> class.
        /// </summary>
        /// <param name="assignment">assignment.</param>
        /// <param name="connectivity">connectivity.</param>
        /// <param name="firmwareVersion">The software release currently in use on the terminal..</param>
        /// <param name="id">The unique identifier of the terminal..</param>
        /// <param name="lastActivityAt">Date and time of the last activity on the terminal. Not included when the last activity was more than 14 days ago..</param>
        /// <param name="lastTransactionAt">Date and time of the last transaction on the terminal. Not included when the last transaction was more than 14 days ago..</param>
        /// <param name="model">The model name of the terminal..</param>
        /// <param name="restartLocalTime">The exact time of the terminal reboot, in the timezone of the terminal in **HH:mm** format..</param>
        /// <param name="serialNumber">The serial number of the terminal..</param>
        public Terminal(TerminalAssignment assignment = default(TerminalAssignment), TerminalConnectivity connectivity = default(TerminalConnectivity), string firmwareVersion = default(string), string id = default(string), DateTime lastActivityAt = default(DateTime), DateTime lastTransactionAt = default(DateTime), string model = default(string), string restartLocalTime = default(string), string serialNumber = default(string))
        {
            this.Assignment = assignment;
            this.Connectivity = connectivity;
            this.FirmwareVersion = firmwareVersion;
            this.Id = id;
            this.LastActivityAt = lastActivityAt;
            this.LastTransactionAt = lastTransactionAt;
            this.Model = model;
            this.RestartLocalTime = restartLocalTime;
            this.SerialNumber = serialNumber;
        }

        /// <summary>
        /// Gets or Sets Assignment
        /// </summary>
        [DataMember(Name = "assignment", EmitDefaultValue = false)]
        public TerminalAssignment Assignment { get; set; }

        /// <summary>
        /// Gets or Sets Connectivity
        /// </summary>
        [DataMember(Name = "connectivity", EmitDefaultValue = false)]
        public TerminalConnectivity Connectivity { get; set; }

        /// <summary>
        /// The software release currently in use on the terminal.
        /// </summary>
        /// <value>The software release currently in use on the terminal.</value>
        [DataMember(Name = "firmwareVersion", EmitDefaultValue = false)]
        public string FirmwareVersion { get; set; }

        /// <summary>
        /// The unique identifier of the terminal.
        /// </summary>
        /// <value>The unique identifier of the terminal.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Date and time of the last activity on the terminal. Not included when the last activity was more than 14 days ago.
        /// </summary>
        /// <value>Date and time of the last activity on the terminal. Not included when the last activity was more than 14 days ago.</value>
        [DataMember(Name = "lastActivityAt", EmitDefaultValue = false)]
        public DateTime LastActivityAt { get; set; }

        /// <summary>
        /// Date and time of the last transaction on the terminal. Not included when the last transaction was more than 14 days ago.
        /// </summary>
        /// <value>Date and time of the last transaction on the terminal. Not included when the last transaction was more than 14 days ago.</value>
        [DataMember(Name = "lastTransactionAt", EmitDefaultValue = false)]
        public DateTime LastTransactionAt { get; set; }

        /// <summary>
        /// The model name of the terminal.
        /// </summary>
        /// <value>The model name of the terminal.</value>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// The exact time of the terminal reboot, in the timezone of the terminal in **HH:mm** format.
        /// </summary>
        /// <value>The exact time of the terminal reboot, in the timezone of the terminal in **HH:mm** format.</value>
        [DataMember(Name = "restartLocalTime", EmitDefaultValue = false)]
        public string RestartLocalTime { get; set; }

        /// <summary>
        /// The serial number of the terminal.
        /// </summary>
        /// <value>The serial number of the terminal.</value>
        [DataMember(Name = "serialNumber", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Terminal {\n");
            sb.Append("  Assignment: ").Append(Assignment).Append("\n");
            sb.Append("  Connectivity: ").Append(Connectivity).Append("\n");
            sb.Append("  FirmwareVersion: ").Append(FirmwareVersion).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastActivityAt: ").Append(LastActivityAt).Append("\n");
            sb.Append("  LastTransactionAt: ").Append(LastTransactionAt).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  RestartLocalTime: ").Append(RestartLocalTime).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Terminal);
        }

        /// <summary>
        /// Returns true if Terminal instances are equal
        /// </summary>
        /// <param name="input">Instance of Terminal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Terminal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Assignment == input.Assignment ||
                    (this.Assignment != null &&
                    this.Assignment.Equals(input.Assignment))
                ) && 
                (
                    this.Connectivity == input.Connectivity ||
                    (this.Connectivity != null &&
                    this.Connectivity.Equals(input.Connectivity))
                ) && 
                (
                    this.FirmwareVersion == input.FirmwareVersion ||
                    (this.FirmwareVersion != null &&
                    this.FirmwareVersion.Equals(input.FirmwareVersion))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastActivityAt == input.LastActivityAt ||
                    (this.LastActivityAt != null &&
                    this.LastActivityAt.Equals(input.LastActivityAt))
                ) && 
                (
                    this.LastTransactionAt == input.LastTransactionAt ||
                    (this.LastTransactionAt != null &&
                    this.LastTransactionAt.Equals(input.LastTransactionAt))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.RestartLocalTime == input.RestartLocalTime ||
                    (this.RestartLocalTime != null &&
                    this.RestartLocalTime.Equals(input.RestartLocalTime))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Assignment != null)
                {
                    hashCode = (hashCode * 59) + this.Assignment.GetHashCode();
                }
                if (this.Connectivity != null)
                {
                    hashCode = (hashCode * 59) + this.Connectivity.GetHashCode();
                }
                if (this.FirmwareVersion != null)
                {
                    hashCode = (hashCode * 59) + this.FirmwareVersion.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.LastActivityAt != null)
                {
                    hashCode = (hashCode * 59) + this.LastActivityAt.GetHashCode();
                }
                if (this.LastTransactionAt != null)
                {
                    hashCode = (hashCode * 59) + this.LastTransactionAt.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                if (this.RestartLocalTime != null)
                {
                    hashCode = (hashCode * 59) + this.RestartLocalTime.GetHashCode();
                }
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
