/*
* Management API
*
*
* The version of the OpenAPI document: 1
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// Terminal
    /// </summary>
    [DataContract(Name = "Terminal")]
    public partial class Terminal : IEquatable<Terminal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Terminal" /> class.
        /// </summary>
        /// <param name="assigned">The [assignment status](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api) of the terminal. If true, the terminal is assigned. If false, the terminal is in inventory and can&#39;t be boarded..</param>
        /// <param name="bluetoothIp">The Bluetooth IP address of the terminal..</param>
        /// <param name="bluetoothMac">The Bluetooth MAC address of the terminal..</param>
        /// <param name="city">The city where the terminal is located..</param>
        /// <param name="companyAccount">The company account that the terminal is associated with. If this is the only account level shown in the response, the terminal is assigned to the inventory of the company account..</param>
        /// <param name="countryCode">The country code of the country where the terminal is located..</param>
        /// <param name="deviceModel">The model name of the terminal..</param>
        /// <param name="ethernetIp">The ethernet IP address of the terminal..</param>
        /// <param name="ethernetMac">The ethernet MAC address of the terminal..</param>
        /// <param name="firmwareVersion">The software release currently in use on the terminal..</param>
        /// <param name="iccid">The integrated circuit card identifier (ICCID) of the SIM card in the terminal..</param>
        /// <param name="id">The unique identifier of the terminal..</param>
        /// <param name="lastActivityDateTime">Date and time of the last activity on the terminal. Not included when the last activity was more than 14 days ago..</param>
        /// <param name="lastTransactionDateTime">Date and time of the last transaction on the terminal. Not included when the last transaction was more than 14 days ago..</param>
        /// <param name="linkNegotiation">The Ethernet link negotiation that the terminal uses:  - &#x60;auto&#x60;: Auto-negotiation  - &#x60;100full&#x60;: 100 Mbps full duplex.</param>
        /// <param name="serialNumber">The serial number of the terminal..</param>
        /// <param name="simStatus">On a terminal that supports 3G or 4G connectivity, indicates the status of the SIM card in the terminal: ACTIVE or INVENTORY..</param>
        /// <param name="status">Indicates when the terminal was last online, whether the terminal is being reassigned, or whether the terminal is turned off. If the terminal was last online more that a week ago, it is also shown as turned off..</param>
        /// <param name="storeStatus">The status of the store that the terminal is assigned to..</param>
        /// <param name="wifiIp">The terminal&#39;s IP address in your Wi-Fi network..</param>
        /// <param name="wifiMac">The terminal&#39;s MAC address in your Wi-Fi network..</param>
        /// <param name="wifiSsid">The SSID of the Wi-Fi network that your terminal is connected to..</param>
        public Terminal(bool assigned = default(bool), string bluetoothIp = default(string), string bluetoothMac = default(string), string city = default(string), string companyAccount = default(string), string countryCode = default(string), string deviceModel = default(string), string ethernetIp = default(string), string ethernetMac = default(string), string firmwareVersion = default(string), string iccid = default(string), string id = default(string), DateTime lastActivityDateTime = default(DateTime), DateTime lastTransactionDateTime = default(DateTime), string linkNegotiation = default(string), string serialNumber = default(string), string simStatus = default(string), string status = default(string), string storeStatus = default(string), string wifiIp = default(string), string wifiMac = default(string), string wifiSsid = default(string))
        {
            this.Assigned = assigned;
            this.BluetoothIp = bluetoothIp;
            this.BluetoothMac = bluetoothMac;
            this.City = city;
            this.CompanyAccount = companyAccount;
            this.CountryCode = countryCode;
            this.DeviceModel = deviceModel;
            this.EthernetIp = ethernetIp;
            this.EthernetMac = ethernetMac;
            this.FirmwareVersion = firmwareVersion;
            this.Iccid = iccid;
            this.Id = id;
            this.LastActivityDateTime = lastActivityDateTime;
            this.LastTransactionDateTime = lastTransactionDateTime;
            this.LinkNegotiation = linkNegotiation;
            this.SerialNumber = serialNumber;
            this.SimStatus = simStatus;
            this.Status = status;
            this.StoreStatus = storeStatus;
            this.WifiIp = wifiIp;
            this.WifiMac = wifiMac;
            this.WifiSsid = wifiSsid;
        }

        /// <summary>
        /// The [assignment status](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api) of the terminal. If true, the terminal is assigned. If false, the terminal is in inventory and can&#39;t be boarded.
        /// </summary>
        /// <value>The [assignment status](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api) of the terminal. If true, the terminal is assigned. If false, the terminal is in inventory and can&#39;t be boarded.</value>
        [DataMember(Name = "assigned", EmitDefaultValue = false)]
        [Obsolete]
        public bool Assigned { get; set; }

        /// <summary>
        /// The Bluetooth IP address of the terminal.
        /// </summary>
        /// <value>The Bluetooth IP address of the terminal.</value>
        [DataMember(Name = "bluetoothIp", EmitDefaultValue = false)]
        [Obsolete]
        public string BluetoothIp { get; set; }

        /// <summary>
        /// The Bluetooth MAC address of the terminal.
        /// </summary>
        /// <value>The Bluetooth MAC address of the terminal.</value>
        [DataMember(Name = "bluetoothMac", EmitDefaultValue = false)]
        public string BluetoothMac { get; set; }

        /// <summary>
        /// The city where the terminal is located.
        /// </summary>
        /// <value>The city where the terminal is located.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        [Obsolete]
        public string City { get; set; }

        /// <summary>
        /// The company account that the terminal is associated with. If this is the only account level shown in the response, the terminal is assigned to the inventory of the company account.
        /// </summary>
        /// <value>The company account that the terminal is associated with. If this is the only account level shown in the response, the terminal is assigned to the inventory of the company account.</value>
        [DataMember(Name = "companyAccount", EmitDefaultValue = false)]
        [Obsolete]
        public string CompanyAccount { get; set; }

        /// <summary>
        /// The country code of the country where the terminal is located.
        /// </summary>
        /// <value>The country code of the country where the terminal is located.</value>
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        [Obsolete]
        public string CountryCode { get; set; }

        /// <summary>
        /// The model name of the terminal.
        /// </summary>
        /// <value>The model name of the terminal.</value>
        [DataMember(Name = "deviceModel", EmitDefaultValue = false)]
        [Obsolete]
        public string DeviceModel { get; set; }

        /// <summary>
        /// The ethernet IP address of the terminal.
        /// </summary>
        /// <value>The ethernet IP address of the terminal.</value>
        [DataMember(Name = "ethernetIp", EmitDefaultValue = false)]
        [Obsolete]
        public string EthernetIp { get; set; }

        /// <summary>
        /// The ethernet MAC address of the terminal.
        /// </summary>
        /// <value>The ethernet MAC address of the terminal.</value>
        [DataMember(Name = "ethernetMac", EmitDefaultValue = false)]
        [Obsolete]
        public string EthernetMac { get; set; }

        /// <summary>
        /// The software release currently in use on the terminal.
        /// </summary>
        /// <value>The software release currently in use on the terminal.</value>
        [DataMember(Name = "firmwareVersion", EmitDefaultValue = false)]
        public string FirmwareVersion { get; set; }

        /// <summary>
        /// The integrated circuit card identifier (ICCID) of the SIM card in the terminal.
        /// </summary>
        /// <value>The integrated circuit card identifier (ICCID) of the SIM card in the terminal.</value>
        [DataMember(Name = "iccid", EmitDefaultValue = false)]
        [Obsolete]
        public string Iccid { get; set; }

        /// <summary>
        /// The unique identifier of the terminal.
        /// </summary>
        /// <value>The unique identifier of the terminal.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Date and time of the last activity on the terminal. Not included when the last activity was more than 14 days ago.
        /// </summary>
        /// <value>Date and time of the last activity on the terminal. Not included when the last activity was more than 14 days ago.</value>
        [DataMember(Name = "lastActivityDateTime", EmitDefaultValue = false)]
        [Obsolete]
        public DateTime LastActivityDateTime { get; set; }

        /// <summary>
        /// Date and time of the last transaction on the terminal. Not included when the last transaction was more than 14 days ago.
        /// </summary>
        /// <value>Date and time of the last transaction on the terminal. Not included when the last transaction was more than 14 days ago.</value>
        [DataMember(Name = "lastTransactionDateTime", EmitDefaultValue = false)]
        [Obsolete]
        public DateTime LastTransactionDateTime { get; set; }

        /// <summary>
        /// The Ethernet link negotiation that the terminal uses:  - &#x60;auto&#x60;: Auto-negotiation  - &#x60;100full&#x60;: 100 Mbps full duplex
        /// </summary>
        /// <value>The Ethernet link negotiation that the terminal uses:  - &#x60;auto&#x60;: Auto-negotiation  - &#x60;100full&#x60;: 100 Mbps full duplex</value>
        [DataMember(Name = "linkNegotiation", EmitDefaultValue = false)]
        [Obsolete]
        public string LinkNegotiation { get; set; }

        /// <summary>
        /// The serial number of the terminal.
        /// </summary>
        /// <value>The serial number of the terminal.</value>
        [DataMember(Name = "serialNumber", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// On a terminal that supports 3G or 4G connectivity, indicates the status of the SIM card in the terminal: ACTIVE or INVENTORY.
        /// </summary>
        /// <value>On a terminal that supports 3G or 4G connectivity, indicates the status of the SIM card in the terminal: ACTIVE or INVENTORY.</value>
        [DataMember(Name = "simStatus", EmitDefaultValue = false)]
        [Obsolete]
        public string SimStatus { get; set; }

        /// <summary>
        /// Indicates when the terminal was last online, whether the terminal is being reassigned, or whether the terminal is turned off. If the terminal was last online more that a week ago, it is also shown as turned off.
        /// </summary>
        /// <value>Indicates when the terminal was last online, whether the terminal is being reassigned, or whether the terminal is turned off. If the terminal was last online more that a week ago, it is also shown as turned off.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        [Obsolete]
        public string Status { get; set; }

        /// <summary>
        /// The status of the store that the terminal is assigned to.
        /// </summary>
        /// <value>The status of the store that the terminal is assigned to.</value>
        [DataMember(Name = "storeStatus", EmitDefaultValue = false)]
        [Obsolete]
        public string StoreStatus { get; set; }

        /// <summary>
        /// The terminal&#39;s IP address in your Wi-Fi network.
        /// </summary>
        /// <value>The terminal&#39;s IP address in your Wi-Fi network.</value>
        [DataMember(Name = "wifiIp", EmitDefaultValue = false)]
        [Obsolete]
        public string WifiIp { get; set; }

        /// <summary>
        /// The terminal&#39;s MAC address in your Wi-Fi network.
        /// </summary>
        /// <value>The terminal&#39;s MAC address in your Wi-Fi network.</value>
        [DataMember(Name = "wifiMac", EmitDefaultValue = false)]
        [Obsolete]
        public string WifiMac { get; set; }

        /// <summary>
        /// The SSID of the Wi-Fi network that your terminal is connected to.
        /// </summary>
        /// <value>The SSID of the Wi-Fi network that your terminal is connected to.</value>
        [DataMember(Name = "wifiSsid", EmitDefaultValue = false)]
        [Obsolete]
        public string WifiSsid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Terminal {\n");
            sb.Append("  Assigned: ").Append(Assigned).Append("\n");
            sb.Append("  BluetoothIp: ").Append(BluetoothIp).Append("\n");
            sb.Append("  BluetoothMac: ").Append(BluetoothMac).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CompanyAccount: ").Append(CompanyAccount).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DeviceModel: ").Append(DeviceModel).Append("\n");
            sb.Append("  EthernetIp: ").Append(EthernetIp).Append("\n");
            sb.Append("  EthernetMac: ").Append(EthernetMac).Append("\n");
            sb.Append("  FirmwareVersion: ").Append(FirmwareVersion).Append("\n");
            sb.Append("  Iccid: ").Append(Iccid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastActivityDateTime: ").Append(LastActivityDateTime).Append("\n");
            sb.Append("  LastTransactionDateTime: ").Append(LastTransactionDateTime).Append("\n");
            sb.Append("  LinkNegotiation: ").Append(LinkNegotiation).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  SimStatus: ").Append(SimStatus).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StoreStatus: ").Append(StoreStatus).Append("\n");
            sb.Append("  WifiIp: ").Append(WifiIp).Append("\n");
            sb.Append("  WifiMac: ").Append(WifiMac).Append("\n");
            sb.Append("  WifiSsid: ").Append(WifiSsid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Terminal);
        }

        /// <summary>
        /// Returns true if Terminal instances are equal
        /// </summary>
        /// <param name="input">Instance of Terminal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Terminal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Assigned == input.Assigned ||
                    this.Assigned.Equals(input.Assigned)
                ) && 
                (
                    this.BluetoothIp == input.BluetoothIp ||
                    (this.BluetoothIp != null &&
                    this.BluetoothIp.Equals(input.BluetoothIp))
                ) && 
                (
                    this.BluetoothMac == input.BluetoothMac ||
                    (this.BluetoothMac != null &&
                    this.BluetoothMac.Equals(input.BluetoothMac))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.CompanyAccount == input.CompanyAccount ||
                    (this.CompanyAccount != null &&
                    this.CompanyAccount.Equals(input.CompanyAccount))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.DeviceModel == input.DeviceModel ||
                    (this.DeviceModel != null &&
                    this.DeviceModel.Equals(input.DeviceModel))
                ) && 
                (
                    this.EthernetIp == input.EthernetIp ||
                    (this.EthernetIp != null &&
                    this.EthernetIp.Equals(input.EthernetIp))
                ) && 
                (
                    this.EthernetMac == input.EthernetMac ||
                    (this.EthernetMac != null &&
                    this.EthernetMac.Equals(input.EthernetMac))
                ) && 
                (
                    this.FirmwareVersion == input.FirmwareVersion ||
                    (this.FirmwareVersion != null &&
                    this.FirmwareVersion.Equals(input.FirmwareVersion))
                ) && 
                (
                    this.Iccid == input.Iccid ||
                    (this.Iccid != null &&
                    this.Iccid.Equals(input.Iccid))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastActivityDateTime == input.LastActivityDateTime ||
                    (this.LastActivityDateTime != null &&
                    this.LastActivityDateTime.Equals(input.LastActivityDateTime))
                ) && 
                (
                    this.LastTransactionDateTime == input.LastTransactionDateTime ||
                    (this.LastTransactionDateTime != null &&
                    this.LastTransactionDateTime.Equals(input.LastTransactionDateTime))
                ) && 
                (
                    this.LinkNegotiation == input.LinkNegotiation ||
                    (this.LinkNegotiation != null &&
                    this.LinkNegotiation.Equals(input.LinkNegotiation))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.SimStatus == input.SimStatus ||
                    (this.SimStatus != null &&
                    this.SimStatus.Equals(input.SimStatus))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StoreStatus == input.StoreStatus ||
                    (this.StoreStatus != null &&
                    this.StoreStatus.Equals(input.StoreStatus))
                ) && 
                (
                    this.WifiIp == input.WifiIp ||
                    (this.WifiIp != null &&
                    this.WifiIp.Equals(input.WifiIp))
                ) && 
                (
                    this.WifiMac == input.WifiMac ||
                    (this.WifiMac != null &&
                    this.WifiMac.Equals(input.WifiMac))
                ) && 
                (
                    this.WifiSsid == input.WifiSsid ||
                    (this.WifiSsid != null &&
                    this.WifiSsid.Equals(input.WifiSsid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Assigned.GetHashCode();
                if (this.BluetoothIp != null)
                {
                    hashCode = (hashCode * 59) + this.BluetoothIp.GetHashCode();
                }
                if (this.BluetoothMac != null)
                {
                    hashCode = (hashCode * 59) + this.BluetoothMac.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.CompanyAccount != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyAccount.GetHashCode();
                }
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                if (this.DeviceModel != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceModel.GetHashCode();
                }
                if (this.EthernetIp != null)
                {
                    hashCode = (hashCode * 59) + this.EthernetIp.GetHashCode();
                }
                if (this.EthernetMac != null)
                {
                    hashCode = (hashCode * 59) + this.EthernetMac.GetHashCode();
                }
                if (this.FirmwareVersion != null)
                {
                    hashCode = (hashCode * 59) + this.FirmwareVersion.GetHashCode();
                }
                if (this.Iccid != null)
                {
                    hashCode = (hashCode * 59) + this.Iccid.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.LastActivityDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.LastActivityDateTime.GetHashCode();
                }
                if (this.LastTransactionDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.LastTransactionDateTime.GetHashCode();
                }
                if (this.LinkNegotiation != null)
                {
                    hashCode = (hashCode * 59) + this.LinkNegotiation.GetHashCode();
                }
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                if (this.SimStatus != null)
                {
                    hashCode = (hashCode * 59) + this.SimStatus.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.StoreStatus != null)
                {
                    hashCode = (hashCode * 59) + this.StoreStatus.GetHashCode();
                }
                if (this.WifiIp != null)
                {
                    hashCode = (hashCode * 59) + this.WifiIp.GetHashCode();
                }
                if (this.WifiMac != null)
                {
                    hashCode = (hashCode * 59) + this.WifiMac.GetHashCode();
                }
                if (this.WifiSsid != null)
                {
                    hashCode = (hashCode * 59) + this.WifiSsid.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
