/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// PayMeInfo
    /// </summary>
    [DataContract(Name = "PayMeInfo")]
    public partial class PayMeInfo : IEquatable<PayMeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayMeInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayMeInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayMeInfo" /> class.
        /// </summary>
        /// <param name="displayName">Merchant display name (required).</param>
        /// <param name="logo">Merchant logo. Format: Base64-encoded string. (required).</param>
        /// <param name="supportEmail">The email address of merchant support. (required).</param>
        public PayMeInfo(string displayName = default(string), string logo = default(string), string supportEmail = default(string))
        {
            this.DisplayName = displayName;
            this.Logo = logo;
            this.SupportEmail = supportEmail;
        }

        /// <summary>
        /// Merchant display name
        /// </summary>
        /// <value>Merchant display name</value>
        [DataMember(Name = "displayName", IsRequired = false, EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Merchant logo. Format: Base64-encoded string.
        /// </summary>
        /// <value>Merchant logo. Format: Base64-encoded string.</value>
        [DataMember(Name = "logo", IsRequired = false, EmitDefaultValue = false)]
        public string Logo { get; set; }

        /// <summary>
        /// The email address of merchant support.
        /// </summary>
        /// <value>The email address of merchant support.</value>
        [DataMember(Name = "supportEmail", IsRequired = false, EmitDefaultValue = false)]
        public string SupportEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayMeInfo {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  SupportEmail: ").Append(SupportEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayMeInfo);
        }

        /// <summary>
        /// Returns true if PayMeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PayMeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayMeInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.SupportEmail == input.SupportEmail ||
                    (this.SupportEmail != null &&
                    this.SupportEmail.Equals(input.SupportEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Logo != null)
                {
                    hashCode = (hashCode * 59) + this.Logo.GetHashCode();
                }
                if (this.SupportEmail != null)
                {
                    hashCode = (hashCode * 59) + this.SupportEmail.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
