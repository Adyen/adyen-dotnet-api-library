/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// TerminalConnectivityBluetooth
    /// </summary>
    [DataContract(Name = "TerminalConnectivityBluetooth")]
    public partial class TerminalConnectivityBluetooth : IEquatable<TerminalConnectivityBluetooth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalConnectivityBluetooth" /> class.
        /// </summary>
        /// <param name="ipAddress">The terminal&#39;s Bluetooth IP address..</param>
        /// <param name="macAddress">The terminal&#39;s Bluetooth MAC address..</param>
        public TerminalConnectivityBluetooth(string ipAddress = default(string), string macAddress = default(string))
        {
            this.IpAddress = ipAddress;
            this.MacAddress = macAddress;
        }

        /// <summary>
        /// The terminal&#39;s Bluetooth IP address.
        /// </summary>
        /// <value>The terminal&#39;s Bluetooth IP address.</value>
        [DataMember(Name = "ipAddress", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// The terminal&#39;s Bluetooth MAC address.
        /// </summary>
        /// <value>The terminal&#39;s Bluetooth MAC address.</value>
        [DataMember(Name = "macAddress", EmitDefaultValue = false)]
        public string MacAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TerminalConnectivityBluetooth {\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TerminalConnectivityBluetooth);
        }

        /// <summary>
        /// Returns true if TerminalConnectivityBluetooth instances are equal
        /// </summary>
        /// <param name="input">Instance of TerminalConnectivityBluetooth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TerminalConnectivityBluetooth input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.MacAddress == input.MacAddress ||
                    (this.MacAddress != null &&
                    this.MacAddress.Equals(input.MacAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                if (this.MacAddress != null)
                {
                    hashCode = (hashCode * 59) + this.MacAddress.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
