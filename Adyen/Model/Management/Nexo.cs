/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// Nexo
    /// </summary>
    [DataContract(Name = "Nexo")]
    public partial class Nexo : IEquatable<Nexo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Nexo" /> class.
        /// </summary>
        /// <param name="displayUrls">displayUrls.</param>
        /// <param name="encryptionKey">encryptionKey.</param>
        /// <param name="eventUrls">eventUrls.</param>
        /// <param name="nexoEventUrls">One or more URLs to send event messages to when using Terminal API..</param>
        /// <param name="notification">notification.</param>
        public Nexo(NotificationUrl displayUrls = default(NotificationUrl), Key encryptionKey = default(Key), EventUrl eventUrls = default(EventUrl), List<string> nexoEventUrls = default(List<string>), Notification notification = default(Notification))
        {
            this.DisplayUrls = displayUrls;
            this.EncryptionKey = encryptionKey;
            this.EventUrls = eventUrls;
            this.NexoEventUrls = nexoEventUrls;
            this.Notification = notification;
        }

        /// <summary>
        /// Gets or Sets DisplayUrls
        /// </summary>
        [DataMember(Name = "displayUrls", EmitDefaultValue = false)]
        public NotificationUrl DisplayUrls { get; set; }

        /// <summary>
        /// Gets or Sets EncryptionKey
        /// </summary>
        [DataMember(Name = "encryptionKey", EmitDefaultValue = false)]
        public Key EncryptionKey { get; set; }

        /// <summary>
        /// Gets or Sets EventUrls
        /// </summary>
        [DataMember(Name = "eventUrls", EmitDefaultValue = false)]
        public EventUrl EventUrls { get; set; }

        /// <summary>
        /// One or more URLs to send event messages to when using Terminal API.
        /// </summary>
        /// <value>One or more URLs to send event messages to when using Terminal API.</value>
        [DataMember(Name = "nexoEventUrls", EmitDefaultValue = false)]
        [Obsolete]
        public List<string> NexoEventUrls { get; set; }

        /// <summary>
        /// Gets or Sets Notification
        /// </summary>
        [DataMember(Name = "notification", EmitDefaultValue = false)]
        public Notification Notification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Nexo {\n");
            sb.Append("  DisplayUrls: ").Append(DisplayUrls).Append("\n");
            sb.Append("  EncryptionKey: ").Append(EncryptionKey).Append("\n");
            sb.Append("  EventUrls: ").Append(EventUrls).Append("\n");
            sb.Append("  NexoEventUrls: ").Append(NexoEventUrls).Append("\n");
            sb.Append("  Notification: ").Append(Notification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Nexo);
        }

        /// <summary>
        /// Returns true if Nexo instances are equal
        /// </summary>
        /// <param name="input">Instance of Nexo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Nexo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayUrls == input.DisplayUrls ||
                    (this.DisplayUrls != null &&
                    this.DisplayUrls.Equals(input.DisplayUrls))
                ) && 
                (
                    this.EncryptionKey == input.EncryptionKey ||
                    (this.EncryptionKey != null &&
                    this.EncryptionKey.Equals(input.EncryptionKey))
                ) && 
                (
                    this.EventUrls == input.EventUrls ||
                    (this.EventUrls != null &&
                    this.EventUrls.Equals(input.EventUrls))
                ) && 
                (
                    this.NexoEventUrls == input.NexoEventUrls ||
                    this.NexoEventUrls != null &&
                    input.NexoEventUrls != null &&
                    this.NexoEventUrls.SequenceEqual(input.NexoEventUrls)
                ) && 
                (
                    this.Notification == input.Notification ||
                    (this.Notification != null &&
                    this.Notification.Equals(input.Notification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayUrls != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayUrls.GetHashCode();
                }
                if (this.EncryptionKey != null)
                {
                    hashCode = (hashCode * 59) + this.EncryptionKey.GetHashCode();
                }
                if (this.EventUrls != null)
                {
                    hashCode = (hashCode * 59) + this.EventUrls.GetHashCode();
                }
                if (this.NexoEventUrls != null)
                {
                    hashCode = (hashCode * 59) + this.NexoEventUrls.GetHashCode();
                }
                if (this.Notification != null)
                {
                    hashCode = (hashCode * 59) + this.Notification.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
