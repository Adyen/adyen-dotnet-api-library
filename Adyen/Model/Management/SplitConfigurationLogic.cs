/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// SplitConfigurationLogic
    /// </summary>
    [DataContract(Name = "SplitConfigurationLogic")]
    public partial class SplitConfigurationLogic : IEquatable<SplitConfigurationLogic>, IValidatableObject
    {
        /// <summary>
        /// Deducts the acquiring fees (the aggregated amount of interchange and scheme fee) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts the acquiring fees (the aggregated amount of interchange and scheme fee) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AcquiringFeesEnum
        {
            /// <summary>
            /// Enum DeductFromLiableAccount for value: deductFromLiableAccount
            /// </summary>
            [EnumMember(Value = "deductFromLiableAccount")]
            DeductFromLiableAccount = 1,

            /// <summary>
            /// Enum DeductFromOneBalanceAccount for value: deductFromOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "deductFromOneBalanceAccount")]
            DeductFromOneBalanceAccount = 2

        }


        /// <summary>
        /// Deducts the acquiring fees (the aggregated amount of interchange and scheme fee) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts the acquiring fees (the aggregated amount of interchange and scheme fee) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [DataMember(Name = "acquiringFees", EmitDefaultValue = false)]
        public AcquiringFeesEnum? AcquiringFees { get; set; }
        /// <summary>
        /// Deducts the transaction fee due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/guides/payments-training-guide/get-the-best-from-your-card-processing) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts the transaction fee due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/guides/payments-training-guide/get-the-best-from-your-card-processing) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdyenCommissionEnum
        {
            /// <summary>
            /// Enum DeductFromLiableAccount for value: deductFromLiableAccount
            /// </summary>
            [EnumMember(Value = "deductFromLiableAccount")]
            DeductFromLiableAccount = 1,

            /// <summary>
            /// Enum DeductFromOneBalanceAccount for value: deductFromOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "deductFromOneBalanceAccount")]
            DeductFromOneBalanceAccount = 2

        }


        /// <summary>
        /// Deducts the transaction fee due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/guides/payments-training-guide/get-the-best-from-your-card-processing) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts the transaction fee due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/guides/payments-training-guide/get-the-best-from-your-card-processing) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [DataMember(Name = "adyenCommission", EmitDefaultValue = false)]
        public AdyenCommissionEnum? AdyenCommission { get; set; }
        /// <summary>
        /// Deducts the fees due to Adyen (markup or commission) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts the fees due to Adyen (markup or commission) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdyenFeesEnum
        {
            /// <summary>
            /// Enum DeductFromLiableAccount for value: deductFromLiableAccount
            /// </summary>
            [EnumMember(Value = "deductFromLiableAccount")]
            DeductFromLiableAccount = 1,

            /// <summary>
            /// Enum DeductFromOneBalanceAccount for value: deductFromOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "deductFromOneBalanceAccount")]
            DeductFromOneBalanceAccount = 2

        }


        /// <summary>
        /// Deducts the fees due to Adyen (markup or commission) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts the fees due to Adyen (markup or commission) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [DataMember(Name = "adyenFees", EmitDefaultValue = false)]
        public AdyenFeesEnum? AdyenFees { get; set; }
        /// <summary>
        /// Deducts the transaction fee due to Adyen under [Interchange ++ pricing](https://www.adyen.com/what-is-interchange) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts the transaction fee due to Adyen under [Interchange ++ pricing](https://www.adyen.com/what-is-interchange) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdyenMarkupEnum
        {
            /// <summary>
            /// Enum DeductFromLiableAccount for value: deductFromLiableAccount
            /// </summary>
            [EnumMember(Value = "deductFromLiableAccount")]
            DeductFromLiableAccount = 1,

            /// <summary>
            /// Enum DeductFromOneBalanceAccount for value: deductFromOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "deductFromOneBalanceAccount")]
            DeductFromOneBalanceAccount = 2

        }


        /// <summary>
        /// Deducts the transaction fee due to Adyen under [Interchange ++ pricing](https://www.adyen.com/what-is-interchange) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts the transaction fee due to Adyen under [Interchange ++ pricing](https://www.adyen.com/what-is-interchange) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [DataMember(Name = "adyenMarkup", EmitDefaultValue = false)]
        public AdyenMarkupEnum? AdyenMarkup { get; set; }
        /// <summary>
        /// Specifies how and from which balance account(s) to deduct the chargeback amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.
        /// </summary>
        /// <value>Specifies how and from which balance account(s) to deduct the chargeback amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChargebackEnum
        {
            /// <summary>
            /// Enum DeductFromLiableAccount for value: deductFromLiableAccount
            /// </summary>
            [EnumMember(Value = "deductFromLiableAccount")]
            DeductFromLiableAccount = 1,

            /// <summary>
            /// Enum DeductFromOneBalanceAccount for value: deductFromOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "deductFromOneBalanceAccount")]
            DeductFromOneBalanceAccount = 2,

            /// <summary>
            /// Enum DeductAccordingToSplitRatio for value: deductAccordingToSplitRatio
            /// </summary>
            [EnumMember(Value = "deductAccordingToSplitRatio")]
            DeductAccordingToSplitRatio = 3

        }


        /// <summary>
        /// Specifies how and from which balance account(s) to deduct the chargeback amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.
        /// </summary>
        /// <value>Specifies how and from which balance account(s) to deduct the chargeback amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.</value>
        [DataMember(Name = "chargeback", EmitDefaultValue = false)]
        public ChargebackEnum? Chargeback { get; set; }
        /// <summary>
        /// Deducts the chargeback costs from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**
        /// </summary>
        /// <value>Deducts the chargeback costs from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChargebackCostAllocationEnum
        {
            /// <summary>
            /// Enum DeductFromLiableAccount for value: deductFromLiableAccount
            /// </summary>
            [EnumMember(Value = "deductFromLiableAccount")]
            DeductFromLiableAccount = 1,

            /// <summary>
            /// Enum DeductFromOneBalanceAccount for value: deductFromOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "deductFromOneBalanceAccount")]
            DeductFromOneBalanceAccount = 2

        }


        /// <summary>
        /// Deducts the chargeback costs from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**
        /// </summary>
        /// <value>Deducts the chargeback costs from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**</value>
        [DataMember(Name = "chargebackCostAllocation", EmitDefaultValue = false)]
        public ChargebackCostAllocationEnum? ChargebackCostAllocation { get; set; }
        /// <summary>
        /// Deducts the interchange fee from specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts the interchange fee from specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InterchangeEnum
        {
            /// <summary>
            /// Enum DeductFromLiableAccount for value: deductFromLiableAccount
            /// </summary>
            [EnumMember(Value = "deductFromLiableAccount")]
            DeductFromLiableAccount = 1,

            /// <summary>
            /// Enum DeductFromOneBalanceAccount for value: deductFromOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "deductFromOneBalanceAccount")]
            DeductFromOneBalanceAccount = 2

        }


        /// <summary>
        /// Deducts the interchange fee from specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts the interchange fee from specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [DataMember(Name = "interchange", EmitDefaultValue = false)]
        public InterchangeEnum? Interchange { get; set; }
        /// <summary>
        /// Deducts all transaction fees incurred by the payment from the specified balance account. The transaction fees include the acquiring fees (interchange and scheme fee), and the fees due to Adyen (markup or commission). You can book any and all these fees to different balance account by specifying other transaction fee parameters in your split configuration profile:  - [&#x60;adyenCommission&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenCommission): The transaction fee due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/interchange-fees-explained#interchange-vs-blended). - [&#x60;adyenMarkup&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenMarkup): The transaction fee due to Adyen under [Interchange ++ pricing](https://www.adyen.com/knowledge-hub/interchange-fees-explained#interchange-vs-blended). - [&#x60;schemeFee&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-schemeFee): The fee paid to the card scheme for using their network. - [&#x60;interchange&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-interchange): The fee paid to the issuer for each payment transaction made with the card network. - [&#x60;adyenFees&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenFees): The aggregated amount of Adyen&#39;s commission and markup. - [&#x60;acquiringFees&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-acquiringFees): The aggregated amount of the interchange and scheme fees.  If you don&#39;t include at least one transaction fee type in the &#x60;splitLogic&#x60; object, Adyen updates the payment request with the &#x60;paymentFee&#x60; parameter, booking all transaction fees to your platform&#39;s liable balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts all transaction fees incurred by the payment from the specified balance account. The transaction fees include the acquiring fees (interchange and scheme fee), and the fees due to Adyen (markup or commission). You can book any and all these fees to different balance account by specifying other transaction fee parameters in your split configuration profile:  - [&#x60;adyenCommission&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenCommission): The transaction fee due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/interchange-fees-explained#interchange-vs-blended). - [&#x60;adyenMarkup&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenMarkup): The transaction fee due to Adyen under [Interchange ++ pricing](https://www.adyen.com/knowledge-hub/interchange-fees-explained#interchange-vs-blended). - [&#x60;schemeFee&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-schemeFee): The fee paid to the card scheme for using their network. - [&#x60;interchange&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-interchange): The fee paid to the issuer for each payment transaction made with the card network. - [&#x60;adyenFees&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenFees): The aggregated amount of Adyen&#39;s commission and markup. - [&#x60;acquiringFees&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-acquiringFees): The aggregated amount of the interchange and scheme fees.  If you don&#39;t include at least one transaction fee type in the &#x60;splitLogic&#x60; object, Adyen updates the payment request with the &#x60;paymentFee&#x60; parameter, booking all transaction fees to your platform&#39;s liable balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentFeeEnum
        {
            /// <summary>
            /// Enum DeductFromLiableAccount for value: deductFromLiableAccount
            /// </summary>
            [EnumMember(Value = "deductFromLiableAccount")]
            DeductFromLiableAccount = 1,

            /// <summary>
            /// Enum DeductFromOneBalanceAccount for value: deductFromOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "deductFromOneBalanceAccount")]
            DeductFromOneBalanceAccount = 2

        }


        /// <summary>
        /// Deducts all transaction fees incurred by the payment from the specified balance account. The transaction fees include the acquiring fees (interchange and scheme fee), and the fees due to Adyen (markup or commission). You can book any and all these fees to different balance account by specifying other transaction fee parameters in your split configuration profile:  - [&#x60;adyenCommission&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenCommission): The transaction fee due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/interchange-fees-explained#interchange-vs-blended). - [&#x60;adyenMarkup&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenMarkup): The transaction fee due to Adyen under [Interchange ++ pricing](https://www.adyen.com/knowledge-hub/interchange-fees-explained#interchange-vs-blended). - [&#x60;schemeFee&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-schemeFee): The fee paid to the card scheme for using their network. - [&#x60;interchange&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-interchange): The fee paid to the issuer for each payment transaction made with the card network. - [&#x60;adyenFees&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenFees): The aggregated amount of Adyen&#39;s commission and markup. - [&#x60;acquiringFees&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-acquiringFees): The aggregated amount of the interchange and scheme fees.  If you don&#39;t include at least one transaction fee type in the &#x60;splitLogic&#x60; object, Adyen updates the payment request with the &#x60;paymentFee&#x60; parameter, booking all transaction fees to your platform&#39;s liable balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts all transaction fees incurred by the payment from the specified balance account. The transaction fees include the acquiring fees (interchange and scheme fee), and the fees due to Adyen (markup or commission). You can book any and all these fees to different balance account by specifying other transaction fee parameters in your split configuration profile:  - [&#x60;adyenCommission&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenCommission): The transaction fee due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/interchange-fees-explained#interchange-vs-blended). - [&#x60;adyenMarkup&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenMarkup): The transaction fee due to Adyen under [Interchange ++ pricing](https://www.adyen.com/knowledge-hub/interchange-fees-explained#interchange-vs-blended). - [&#x60;schemeFee&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-schemeFee): The fee paid to the card scheme for using their network. - [&#x60;interchange&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-interchange): The fee paid to the issuer for each payment transaction made with the card network. - [&#x60;adyenFees&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenFees): The aggregated amount of Adyen&#39;s commission and markup. - [&#x60;acquiringFees&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-acquiringFees): The aggregated amount of the interchange and scheme fees.  If you don&#39;t include at least one transaction fee type in the &#x60;splitLogic&#x60; object, Adyen updates the payment request with the &#x60;paymentFee&#x60; parameter, booking all transaction fees to your platform&#39;s liable balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [DataMember(Name = "paymentFee", EmitDefaultValue = false)]
        public PaymentFeeEnum? PaymentFee { get; set; }
        /// <summary>
        /// Specifies how and from which balance account(s) to deduct the refund amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**
        /// </summary>
        /// <value>Specifies how and from which balance account(s) to deduct the refund amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RefundEnum
        {
            /// <summary>
            /// Enum DeductFromLiableAccount for value: deductFromLiableAccount
            /// </summary>
            [EnumMember(Value = "deductFromLiableAccount")]
            DeductFromLiableAccount = 1,

            /// <summary>
            /// Enum DeductFromOneBalanceAccount for value: deductFromOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "deductFromOneBalanceAccount")]
            DeductFromOneBalanceAccount = 2,

            /// <summary>
            /// Enum DeductAccordingToSplitRatio for value: deductAccordingToSplitRatio
            /// </summary>
            [EnumMember(Value = "deductAccordingToSplitRatio")]
            DeductAccordingToSplitRatio = 3

        }


        /// <summary>
        /// Specifies how and from which balance account(s) to deduct the refund amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**
        /// </summary>
        /// <value>Specifies how and from which balance account(s) to deduct the refund amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**</value>
        [DataMember(Name = "refund", EmitDefaultValue = false)]
        public RefundEnum? Refund { get; set; }
        /// <summary>
        /// Deducts the refund costs from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**
        /// </summary>
        /// <value>Deducts the refund costs from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RefundCostAllocationEnum
        {
            /// <summary>
            /// Enum DeductFromLiableAccount for value: deductFromLiableAccount
            /// </summary>
            [EnumMember(Value = "deductFromLiableAccount")]
            DeductFromLiableAccount = 1,

            /// <summary>
            /// Enum DeductFromOneBalanceAccount for value: deductFromOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "deductFromOneBalanceAccount")]
            DeductFromOneBalanceAccount = 2

        }


        /// <summary>
        /// Deducts the refund costs from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**
        /// </summary>
        /// <value>Deducts the refund costs from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**</value>
        [DataMember(Name = "refundCostAllocation", EmitDefaultValue = false)]
        public RefundCostAllocationEnum? RefundCostAllocation { get; set; }
        /// <summary>
        /// Books the amount left over after currency conversion to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.
        /// </summary>
        /// <value>Books the amount left over after currency conversion to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RemainderEnum
        {
            /// <summary>
            /// Enum AddToLiableAccount for value: addToLiableAccount
            /// </summary>
            [EnumMember(Value = "addToLiableAccount")]
            AddToLiableAccount = 1,

            /// <summary>
            /// Enum AddToOneBalanceAccount for value: addToOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "addToOneBalanceAccount")]
            AddToOneBalanceAccount = 2

        }


        /// <summary>
        /// Books the amount left over after currency conversion to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.
        /// </summary>
        /// <value>Books the amount left over after currency conversion to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.</value>
        [DataMember(Name = "remainder", EmitDefaultValue = false)]
        public RemainderEnum? Remainder { get; set; }
        /// <summary>
        /// Deducts the scheme fee from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts the scheme fee from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SchemeFeeEnum
        {
            /// <summary>
            /// Enum DeductFromLiableAccount for value: deductFromLiableAccount
            /// </summary>
            [EnumMember(Value = "deductFromLiableAccount")]
            DeductFromLiableAccount = 1,

            /// <summary>
            /// Enum DeductFromOneBalanceAccount for value: deductFromOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "deductFromOneBalanceAccount")]
            DeductFromOneBalanceAccount = 2

        }


        /// <summary>
        /// Deducts the scheme fee from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
        /// </summary>
        /// <value>Deducts the scheme fee from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</value>
        [DataMember(Name = "schemeFee", EmitDefaultValue = false)]
        public SchemeFeeEnum? SchemeFee { get; set; }
        /// <summary>
        /// Books the surcharge amount to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**
        /// </summary>
        /// <value>Books the surcharge amount to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SurchargeEnum
        {
            /// <summary>
            /// Enum AddToLiableAccount for value: addToLiableAccount
            /// </summary>
            [EnumMember(Value = "addToLiableAccount")]
            AddToLiableAccount = 1,

            /// <summary>
            /// Enum AddToOneBalanceAccount for value: addToOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "addToOneBalanceAccount")]
            AddToOneBalanceAccount = 2

        }


        /// <summary>
        /// Books the surcharge amount to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**
        /// </summary>
        /// <value>Books the surcharge amount to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**</value>
        [DataMember(Name = "surcharge", EmitDefaultValue = false)]
        public SurchargeEnum? Surcharge { get; set; }
        /// <summary>
        /// Books the tips (gratuity) to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.
        /// </summary>
        /// <value>Books the tips (gratuity) to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TipEnum
        {
            /// <summary>
            /// Enum AddToLiableAccount for value: addToLiableAccount
            /// </summary>
            [EnumMember(Value = "addToLiableAccount")]
            AddToLiableAccount = 1,

            /// <summary>
            /// Enum AddToOneBalanceAccount for value: addToOneBalanceAccount
            /// </summary>
            [EnumMember(Value = "addToOneBalanceAccount")]
            AddToOneBalanceAccount = 2

        }


        /// <summary>
        /// Books the tips (gratuity) to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.
        /// </summary>
        /// <value>Books the tips (gratuity) to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.</value>
        [DataMember(Name = "tip", EmitDefaultValue = false)]
        public TipEnum? Tip { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitConfigurationLogic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SplitConfigurationLogic() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitConfigurationLogic" /> class.
        /// </summary>
        /// <param name="acquiringFees">Deducts the acquiring fees (the aggregated amount of interchange and scheme fee) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**..</param>
        /// <param name="additionalCommission">additionalCommission.</param>
        /// <param name="adyenCommission">Deducts the transaction fee due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/guides/payments-training-guide/get-the-best-from-your-card-processing) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**..</param>
        /// <param name="adyenFees">Deducts the fees due to Adyen (markup or commission) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**..</param>
        /// <param name="adyenMarkup">Deducts the transaction fee due to Adyen under [Interchange ++ pricing](https://www.adyen.com/what-is-interchange) from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**..</param>
        /// <param name="chargeback">Specifies how and from which balance account(s) to deduct the chargeback amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**..</param>
        /// <param name="chargebackCostAllocation">Deducts the chargeback costs from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</param>
        /// <param name="commission">commission (required).</param>
        /// <param name="interchange">Deducts the interchange fee from specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**..</param>
        /// <param name="paymentFee">Deducts all transaction fees incurred by the payment from the specified balance account. The transaction fees include the acquiring fees (interchange and scheme fee), and the fees due to Adyen (markup or commission). You can book any and all these fees to different balance account by specifying other transaction fee parameters in your split configuration profile:  - [&#x60;adyenCommission&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenCommission): The transaction fee due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/interchange-fees-explained#interchange-vs-blended). - [&#x60;adyenMarkup&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenMarkup): The transaction fee due to Adyen under [Interchange ++ pricing](https://www.adyen.com/knowledge-hub/interchange-fees-explained#interchange-vs-blended). - [&#x60;schemeFee&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-schemeFee): The fee paid to the card scheme for using their network. - [&#x60;interchange&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-interchange): The fee paid to the issuer for each payment transaction made with the card network. - [&#x60;adyenFees&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-adyenFees): The aggregated amount of Adyen&#39;s commission and markup. - [&#x60;acquiringFees&#x60;](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic-acquiringFees): The aggregated amount of the interchange and scheme fees.  If you don&#39;t include at least one transaction fee type in the &#x60;splitLogic&#x60; object, Adyen updates the payment request with the &#x60;paymentFee&#x60; parameter, booking all transaction fees to your platform&#39;s liable balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**..</param>
        /// <param name="refund">Specifies how and from which balance account(s) to deduct the refund amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.</param>
        /// <param name="refundCostAllocation">Deducts the refund costs from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.</param>
        /// <param name="remainder">Books the amount left over after currency conversion to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**..</param>
        /// <param name="schemeFee">Deducts the scheme fee from the specified balance account.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**..</param>
        /// <param name="surcharge">Books the surcharge amount to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.</param>
        /// <param name="tip">Books the tips (gratuity) to the specified balance account.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**..</param>
        public SplitConfigurationLogic(AcquiringFeesEnum? acquiringFees = default(AcquiringFeesEnum?), AdditionalCommission additionalCommission = default(AdditionalCommission), AdyenCommissionEnum? adyenCommission = default(AdyenCommissionEnum?), AdyenFeesEnum? adyenFees = default(AdyenFeesEnum?), AdyenMarkupEnum? adyenMarkup = default(AdyenMarkupEnum?), ChargebackEnum? chargeback = default(ChargebackEnum?), ChargebackCostAllocationEnum? chargebackCostAllocation = default(ChargebackCostAllocationEnum?), Commission commission = default(Commission), InterchangeEnum? interchange = default(InterchangeEnum?), PaymentFeeEnum? paymentFee = default(PaymentFeeEnum?), RefundEnum? refund = default(RefundEnum?), RefundCostAllocationEnum? refundCostAllocation = default(RefundCostAllocationEnum?), RemainderEnum? remainder = default(RemainderEnum?), SchemeFeeEnum? schemeFee = default(SchemeFeeEnum?), SurchargeEnum? surcharge = default(SurchargeEnum?), TipEnum? tip = default(TipEnum?))
        {
            this.Commission = commission;
            this.AcquiringFees = acquiringFees;
            this.AdditionalCommission = additionalCommission;
            this.AdyenCommission = adyenCommission;
            this.AdyenFees = adyenFees;
            this.AdyenMarkup = adyenMarkup;
            this.Chargeback = chargeback;
            this.ChargebackCostAllocation = chargebackCostAllocation;
            this.Interchange = interchange;
            this.PaymentFee = paymentFee;
            this.Refund = refund;
            this.RefundCostAllocation = refundCostAllocation;
            this.Remainder = remainder;
            this.SchemeFee = schemeFee;
            this.Surcharge = surcharge;
            this.Tip = tip;
        }

        /// <summary>
        /// Gets or Sets AdditionalCommission
        /// </summary>
        [DataMember(Name = "additionalCommission", EmitDefaultValue = false)]
        public AdditionalCommission AdditionalCommission { get; set; }

        /// <summary>
        /// Gets or Sets Commission
        /// </summary>
        [DataMember(Name = "commission", IsRequired = false, EmitDefaultValue = false)]
        public Commission Commission { get; set; }

        /// <summary>
        /// Unique identifier of the collection of split instructions that are applied when the rule conditions are met.
        /// </summary>
        /// <value>Unique identifier of the collection of split instructions that are applied when the rule conditions are met.</value>
        [DataMember(Name = "splitLogicId", EmitDefaultValue = false)]
        public string SplitLogicId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SplitConfigurationLogic {\n");
            sb.Append("  AcquiringFees: ").Append(AcquiringFees).Append("\n");
            sb.Append("  AdditionalCommission: ").Append(AdditionalCommission).Append("\n");
            sb.Append("  AdyenCommission: ").Append(AdyenCommission).Append("\n");
            sb.Append("  AdyenFees: ").Append(AdyenFees).Append("\n");
            sb.Append("  AdyenMarkup: ").Append(AdyenMarkup).Append("\n");
            sb.Append("  Chargeback: ").Append(Chargeback).Append("\n");
            sb.Append("  ChargebackCostAllocation: ").Append(ChargebackCostAllocation).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  Interchange: ").Append(Interchange).Append("\n");
            sb.Append("  PaymentFee: ").Append(PaymentFee).Append("\n");
            sb.Append("  Refund: ").Append(Refund).Append("\n");
            sb.Append("  RefundCostAllocation: ").Append(RefundCostAllocation).Append("\n");
            sb.Append("  Remainder: ").Append(Remainder).Append("\n");
            sb.Append("  SchemeFee: ").Append(SchemeFee).Append("\n");
            sb.Append("  SplitLogicId: ").Append(SplitLogicId).Append("\n");
            sb.Append("  Surcharge: ").Append(Surcharge).Append("\n");
            sb.Append("  Tip: ").Append(Tip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SplitConfigurationLogic);
        }

        /// <summary>
        /// Returns true if SplitConfigurationLogic instances are equal
        /// </summary>
        /// <param name="input">Instance of SplitConfigurationLogic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SplitConfigurationLogic input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AcquiringFees == input.AcquiringFees ||
                    this.AcquiringFees.Equals(input.AcquiringFees)
                ) && 
                (
                    this.AdditionalCommission == input.AdditionalCommission ||
                    (this.AdditionalCommission != null &&
                    this.AdditionalCommission.Equals(input.AdditionalCommission))
                ) && 
                (
                    this.AdyenCommission == input.AdyenCommission ||
                    this.AdyenCommission.Equals(input.AdyenCommission)
                ) && 
                (
                    this.AdyenFees == input.AdyenFees ||
                    this.AdyenFees.Equals(input.AdyenFees)
                ) && 
                (
                    this.AdyenMarkup == input.AdyenMarkup ||
                    this.AdyenMarkup.Equals(input.AdyenMarkup)
                ) && 
                (
                    this.Chargeback == input.Chargeback ||
                    this.Chargeback.Equals(input.Chargeback)
                ) && 
                (
                    this.ChargebackCostAllocation == input.ChargebackCostAllocation ||
                    this.ChargebackCostAllocation.Equals(input.ChargebackCostAllocation)
                ) && 
                (
                    this.Commission == input.Commission ||
                    (this.Commission != null &&
                    this.Commission.Equals(input.Commission))
                ) && 
                (
                    this.Interchange == input.Interchange ||
                    this.Interchange.Equals(input.Interchange)
                ) && 
                (
                    this.PaymentFee == input.PaymentFee ||
                    this.PaymentFee.Equals(input.PaymentFee)
                ) && 
                (
                    this.Refund == input.Refund ||
                    this.Refund.Equals(input.Refund)
                ) && 
                (
                    this.RefundCostAllocation == input.RefundCostAllocation ||
                    this.RefundCostAllocation.Equals(input.RefundCostAllocation)
                ) && 
                (
                    this.Remainder == input.Remainder ||
                    this.Remainder.Equals(input.Remainder)
                ) && 
                (
                    this.SchemeFee == input.SchemeFee ||
                    this.SchemeFee.Equals(input.SchemeFee)
                ) && 
                (
                    this.SplitLogicId == input.SplitLogicId ||
                    (this.SplitLogicId != null &&
                    this.SplitLogicId.Equals(input.SplitLogicId))
                ) && 
                (
                    this.Surcharge == input.Surcharge ||
                    this.Surcharge.Equals(input.Surcharge)
                ) && 
                (
                    this.Tip == input.Tip ||
                    this.Tip.Equals(input.Tip)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AcquiringFees.GetHashCode();
                if (this.AdditionalCommission != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalCommission.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AdyenCommission.GetHashCode();
                hashCode = (hashCode * 59) + this.AdyenFees.GetHashCode();
                hashCode = (hashCode * 59) + this.AdyenMarkup.GetHashCode();
                hashCode = (hashCode * 59) + this.Chargeback.GetHashCode();
                hashCode = (hashCode * 59) + this.ChargebackCostAllocation.GetHashCode();
                if (this.Commission != null)
                {
                    hashCode = (hashCode * 59) + this.Commission.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Interchange.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentFee.GetHashCode();
                hashCode = (hashCode * 59) + this.Refund.GetHashCode();
                hashCode = (hashCode * 59) + this.RefundCostAllocation.GetHashCode();
                hashCode = (hashCode * 59) + this.Remainder.GetHashCode();
                hashCode = (hashCode * 59) + this.SchemeFee.GetHashCode();
                if (this.SplitLogicId != null)
                {
                    hashCode = (hashCode * 59) + this.SplitLogicId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Surcharge.GetHashCode();
                hashCode = (hashCode * 59) + this.Tip.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
