/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// MealVoucherFRInfo
    /// </summary>
    [DataContract(Name = "MealVoucherFRInfo")]
    public partial class MealVoucherFRInfo : IEquatable<MealVoucherFRInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MealVoucherFRInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MealVoucherFRInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MealVoucherFRInfo" /> class.
        /// </summary>
        /// <param name="conecsId">Meal Voucher conecsId. Format: digits only (required).</param>
        /// <param name="siret">Meal Voucher siret. Format: 14 digits. (required).</param>
        /// <param name="subTypes">The list of additional payment methods. Allowed values: **mealVoucher_FR_edenred**, **mealVoucher_FR_groupeup**, **mealVoucher_FR_natixis**, **mealVoucher_FR_sodexo**. (required).</param>
        public MealVoucherFRInfo(string conecsId = default(string), string siret = default(string), List<string> subTypes = default(List<string>))
        {
            this.ConecsId = conecsId;
            this.Siret = siret;
            this.SubTypes = subTypes;
        }

        /// <summary>
        /// Meal Voucher conecsId. Format: digits only
        /// </summary>
        /// <value>Meal Voucher conecsId. Format: digits only</value>
        [DataMember(Name = "conecsId", IsRequired = false, EmitDefaultValue = false)]
        public string ConecsId { get; set; }

        /// <summary>
        /// Meal Voucher siret. Format: 14 digits.
        /// </summary>
        /// <value>Meal Voucher siret. Format: 14 digits.</value>
        [DataMember(Name = "siret", IsRequired = false, EmitDefaultValue = false)]
        public string Siret { get; set; }

        /// <summary>
        /// The list of additional payment methods. Allowed values: **mealVoucher_FR_edenred**, **mealVoucher_FR_groupeup**, **mealVoucher_FR_natixis**, **mealVoucher_FR_sodexo**.
        /// </summary>
        /// <value>The list of additional payment methods. Allowed values: **mealVoucher_FR_edenred**, **mealVoucher_FR_groupeup**, **mealVoucher_FR_natixis**, **mealVoucher_FR_sodexo**.</value>
        [DataMember(Name = "subTypes", IsRequired = false, EmitDefaultValue = false)]
        public List<string> SubTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MealVoucherFRInfo {\n");
            sb.Append("  ConecsId: ").Append(ConecsId).Append("\n");
            sb.Append("  Siret: ").Append(Siret).Append("\n");
            sb.Append("  SubTypes: ").Append(SubTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MealVoucherFRInfo);
        }

        /// <summary>
        /// Returns true if MealVoucherFRInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MealVoucherFRInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MealVoucherFRInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConecsId == input.ConecsId ||
                    (this.ConecsId != null &&
                    this.ConecsId.Equals(input.ConecsId))
                ) && 
                (
                    this.Siret == input.Siret ||
                    (this.Siret != null &&
                    this.Siret.Equals(input.Siret))
                ) && 
                (
                    this.SubTypes == input.SubTypes ||
                    this.SubTypes != null &&
                    input.SubTypes != null &&
                    this.SubTypes.SequenceEqual(input.SubTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConecsId != null)
                {
                    hashCode = (hashCode * 59) + this.ConecsId.GetHashCode();
                }
                if (this.Siret != null)
                {
                    hashCode = (hashCode * 59) + this.Siret.GetHashCode();
                }
                if (this.SubTypes != null)
                {
                    hashCode = (hashCode * 59) + this.SubTypes.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Siret (string) maxLength
            if (this.Siret != null && this.Siret.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Siret, length must be less than 14.", new [] { "Siret" });
            }

            // Siret (string) minLength
            if (this.Siret != null && this.Siret.Length < 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Siret, length must be greater than 14.", new [] { "Siret" });
            }

            yield break;
        }
    }

}
