/*
* Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Management
{
    /// <summary>
    /// TerminalAssignment
    /// </summary>
    [DataContract(Name = "TerminalAssignment")]
    public partial class TerminalAssignment : IEquatable<TerminalAssignment>, IValidatableObject
    {
        /// <summary>
        /// The status of the reassignment. Possible values:   * &#x60;reassignmentInProgress&#x60;: the terminal was boarded and is now scheduled to remove the configuration. Wait for the terminal to synchronize with the Adyen platform.  * &#x60;deployed&#x60;: the terminal is deployed and reassigned.   * &#x60;inventory&#x60;: the terminal is in inventory and cannot process transactions.   * &#x60;boarded&#x60;: the terminal is boarded to a store, or a merchant account representing a store, and can process transactions.  
        /// </summary>
        /// <value>The status of the reassignment. Possible values:   * &#x60;reassignmentInProgress&#x60;: the terminal was boarded and is now scheduled to remove the configuration. Wait for the terminal to synchronize with the Adyen platform.  * &#x60;deployed&#x60;: the terminal is deployed and reassigned.   * &#x60;inventory&#x60;: the terminal is in inventory and cannot process transactions.   * &#x60;boarded&#x60;: the terminal is boarded to a store, or a merchant account representing a store, and can process transactions.  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Boarded for value: boarded
            /// </summary>
            [EnumMember(Value = "boarded")]
            Boarded = 1,

            /// <summary>
            /// Enum Deployed for value: deployed
            /// </summary>
            [EnumMember(Value = "deployed")]
            Deployed = 2,

            /// <summary>
            /// Enum Inventory for value: inventory
            /// </summary>
            [EnumMember(Value = "inventory")]
            Inventory = 3,

            /// <summary>
            /// Enum ReassignmentInProgress for value: reassignmentInProgress
            /// </summary>
            [EnumMember(Value = "reassignmentInProgress")]
            ReassignmentInProgress = 4

        }


        /// <summary>
        /// The status of the reassignment. Possible values:   * &#x60;reassignmentInProgress&#x60;: the terminal was boarded and is now scheduled to remove the configuration. Wait for the terminal to synchronize with the Adyen platform.  * &#x60;deployed&#x60;: the terminal is deployed and reassigned.   * &#x60;inventory&#x60;: the terminal is in inventory and cannot process transactions.   * &#x60;boarded&#x60;: the terminal is boarded to a store, or a merchant account representing a store, and can process transactions.  
        /// </summary>
        /// <value>The status of the reassignment. Possible values:   * &#x60;reassignmentInProgress&#x60;: the terminal was boarded and is now scheduled to remove the configuration. Wait for the terminal to synchronize with the Adyen platform.  * &#x60;deployed&#x60;: the terminal is deployed and reassigned.   * &#x60;inventory&#x60;: the terminal is in inventory and cannot process transactions.   * &#x60;boarded&#x60;: the terminal is boarded to a store, or a merchant account representing a store, and can process transactions.  </value>
        [DataMember(Name = "status", IsRequired = false, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalAssignment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TerminalAssignment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalAssignment" /> class.
        /// </summary>
        /// <param name="companyId">The unique identifier of the company account to which terminal is assigned. (required).</param>
        /// <param name="merchantId">The unique identifier of the merchant account to which terminal is assigned..</param>
        /// <param name="reassignmentTarget">reassignmentTarget.</param>
        /// <param name="status">The status of the reassignment. Possible values:   * &#x60;reassignmentInProgress&#x60;: the terminal was boarded and is now scheduled to remove the configuration. Wait for the terminal to synchronize with the Adyen platform.  * &#x60;deployed&#x60;: the terminal is deployed and reassigned.   * &#x60;inventory&#x60;: the terminal is in inventory and cannot process transactions.   * &#x60;boarded&#x60;: the terminal is boarded to a store, or a merchant account representing a store, and can process transactions.   (required).</param>
        /// <param name="storeId">The unique identifier of the store to which terminal is assigned..</param>
        public TerminalAssignment(string companyId = default(string), string merchantId = default(string), TerminalReassignmentTarget reassignmentTarget = default(TerminalReassignmentTarget), StatusEnum status = default(StatusEnum), string storeId = default(string))
        {
            this.CompanyId = companyId;
            this.Status = status;
            this.MerchantId = merchantId;
            this.ReassignmentTarget = reassignmentTarget;
            this.StoreId = storeId;
        }

        /// <summary>
        /// The unique identifier of the company account to which terminal is assigned.
        /// </summary>
        /// <value>The unique identifier of the company account to which terminal is assigned.</value>
        [DataMember(Name = "companyId", IsRequired = false, EmitDefaultValue = false)]
        public string CompanyId { get; set; }

        /// <summary>
        /// The unique identifier of the merchant account to which terminal is assigned.
        /// </summary>
        /// <value>The unique identifier of the merchant account to which terminal is assigned.</value>
        [DataMember(Name = "merchantId", EmitDefaultValue = false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets ReassignmentTarget
        /// </summary>
        [DataMember(Name = "reassignmentTarget", EmitDefaultValue = false)]
        public TerminalReassignmentTarget ReassignmentTarget { get; set; }

        /// <summary>
        /// The unique identifier of the store to which terminal is assigned.
        /// </summary>
        /// <value>The unique identifier of the store to which terminal is assigned.</value>
        [DataMember(Name = "storeId", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TerminalAssignment {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  ReassignmentTarget: ").Append(ReassignmentTarget).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TerminalAssignment);
        }

        /// <summary>
        /// Returns true if TerminalAssignment instances are equal
        /// </summary>
        /// <param name="input">Instance of TerminalAssignment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TerminalAssignment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.ReassignmentTarget == input.ReassignmentTarget ||
                    (this.ReassignmentTarget != null &&
                    this.ReassignmentTarget.Equals(input.ReassignmentTarget))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyId != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                }
                if (this.MerchantId != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantId.GetHashCode();
                }
                if (this.ReassignmentTarget != null)
                {
                    hashCode = (hashCode * 59) + this.ReassignmentTarget.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.StoreId != null)
                {
                    hashCode = (hashCode * 59) + this.StoreId.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
