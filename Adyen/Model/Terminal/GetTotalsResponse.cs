/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys Information related to the Reconciliation transaction processed by the POI System. Content of the Reconciliation Response message.
    /// </summary>
    [DataContract(Name = "GetTotalsResponse")]
    public partial class GetTotalsResponse : IEquatable<GetTotalsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTotalsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetTotalsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTotalsResponse" /> class.
        /// </summary>
        /// <param name="response">response (required).</param>
        /// <param name="pOIReconciliationID">Identification of the reconciliation period between Sale and POI. (required).</param>
        /// <param name="transactionTotals">transactionTotals.</param>
        public GetTotalsResponse(Response response = default(Response), int? pOIReconciliationID = default(int?), List<TransactionTotals> transactionTotals = default(List<TransactionTotals>))
        {
            this.Response = response;
            this.POIReconciliationID = pOIReconciliationID;
            this.TransactionTotals = transactionTotals;
        }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name = "Response", IsRequired = false, EmitDefaultValue = false)]
        public Response Response { get; set; }

        /// <summary>
        /// Identification of the reconciliation period between Sale and POI.
        /// </summary>
        /// <value>Identification of the reconciliation period between Sale and POI.</value>
        [DataMember(Name = "POIReconciliationID", IsRequired = false, EmitDefaultValue = false)]
        public int? POIReconciliationID { get; set; }

        /// <summary>
        /// Gets or Sets TransactionTotals
        /// </summary>
        [DataMember(Name = "TransactionTotals", EmitDefaultValue = false)]
        public List<TransactionTotals> TransactionTotals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetTotalsResponse {\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  POIReconciliationID: ").Append(POIReconciliationID).Append("\n");
            sb.Append("  TransactionTotals: ").Append(TransactionTotals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTotalsResponse);
        }

        /// <summary>
        /// Returns true if GetTotalsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTotalsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTotalsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                ) && 
                (
                    this.POIReconciliationID == input.POIReconciliationID ||
                    this.POIReconciliationID.Equals(input.POIReconciliationID)
                ) && 
                (
                    this.TransactionTotals == input.TransactionTotals ||
                    this.TransactionTotals != null &&
                    input.TransactionTotals != null &&
                    this.TransactionTotals.SequenceEqual(input.TransactionTotals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Response != null)
                {
                    hashCode = (hashCode * 59) + this.Response.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.POIReconciliationID.GetHashCode();
                if (this.TransactionTotals != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionTotals.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
