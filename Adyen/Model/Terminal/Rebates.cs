/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Rebates
    /// </summary>
    [DataContract(Name = "Rebates")]
    public partial class Rebates : IEquatable<Rebates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rebates" /> class.
        /// </summary>
        /// <param name="totalRebate">totalRebate.</param>
        /// <param name="rebateLabel">rebateLabel.</param>
        /// <param name="saleItemRebate">saleItemRebate.</param>
        public Rebates(decimal? totalRebate = default(decimal?), string rebateLabel = default(string), List<SaleItemRebate> saleItemRebate = default(List<SaleItemRebate>))
        {
            this.TotalRebate = totalRebate;
            this.RebateLabel = rebateLabel;
            this.SaleItemRebate = saleItemRebate;
        }

        /// <summary>
        /// Gets or Sets TotalRebate
        /// </summary>
        [DataMember(Name = "TotalRebate", EmitDefaultValue = false)]
        public decimal? TotalRebate { get; set; }

        /// <summary>
        /// Gets or Sets RebateLabel
        /// </summary>
        [DataMember(Name = "RebateLabel", EmitDefaultValue = false)]
        public string RebateLabel { get; set; }

        /// <summary>
        /// Gets or Sets SaleItemRebate
        /// </summary>
        [DataMember(Name = "SaleItemRebate", EmitDefaultValue = false)]
        public List<SaleItemRebate> SaleItemRebate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Rebates {\n");
            sb.Append("  TotalRebate: ").Append(TotalRebate).Append("\n");
            sb.Append("  RebateLabel: ").Append(RebateLabel).Append("\n");
            sb.Append("  SaleItemRebate: ").Append(SaleItemRebate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Rebates);
        }

        /// <summary>
        /// Returns true if Rebates instances are equal
        /// </summary>
        /// <param name="input">Instance of Rebates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rebates input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalRebate == input.TotalRebate ||
                    this.TotalRebate.Equals(input.TotalRebate)
                ) && 
                (
                    this.RebateLabel == input.RebateLabel ||
                    (this.RebateLabel != null &&
                    this.RebateLabel.Equals(input.RebateLabel))
                ) && 
                (
                    this.SaleItemRebate == input.SaleItemRebate ||
                    this.SaleItemRebate != null &&
                    input.SaleItemRebate != null &&
                    this.SaleItemRebate.SequenceEqual(input.SaleItemRebate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TotalRebate.GetHashCode();
                if (this.RebateLabel != null)
                {
                    hashCode = (hashCode * 59) + this.RebateLabel.GetHashCode();
                }
                if (this.SaleItemRebate != null)
                {
                    hashCode = (hashCode * 59) + this.SaleItemRebate.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // TotalRebate (decimal) maximum
            if (this.TotalRebate > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalRebate, must be a value less than or equal to 99999999.999999.", new [] { "TotalRebate" });
            }

            // TotalRebate (decimal) minimum
            if (this.TotalRebate < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalRebate, must be a value greater than or equal to 0.0.", new [] { "TotalRebate" });
            }

            // RebateLabel (string) pattern
            Regex regexRebateLabel = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexRebateLabel.Match(this.RebateLabel).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RebateLabel, must match a pattern of " + regexRebateLabel, new [] { "RebateLabel" });
            }

            yield break;
        }
    }

}
