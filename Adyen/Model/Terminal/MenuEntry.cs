/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys message text and parameters of the menu entry. This output data could be only provided for an input command, in order to choose an entryof the menu. An entryof the menu to present to the Cashier.
    /// </summary>
    [DataContract(Name = "MenuEntry")]
    public partial class MenuEntry : IEquatable<MenuEntry>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MenuEntryTag
        /// </summary>
        [DataMember(Name = "MenuEntryTag", EmitDefaultValue = false)]
        public MenuEntryTag? MenuEntryTag { get; set; }

        /// <summary>
        /// Gets or Sets OutputFormat
        /// </summary>
        [DataMember(Name = "OutputFormat", IsRequired = false, EmitDefaultValue = false)]
        public OutputFormat OutputFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MenuEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuEntry" /> class.
        /// </summary>
        /// <param name="menuEntryTag">menuEntryTag.</param>
        /// <param name="defaultSelectedFlag">defaultSelectedFlag (default to false).</param>
        /// <param name="outputFormat">outputFormat (required).</param>
        /// <param name="predefinedContent">predefinedContent.</param>
        /// <param name="outputText">outputText.</param>
        /// <param name="outputXHTML">outputXHTML.</param>
        public MenuEntry(MenuEntryTag? menuEntryTag = default(MenuEntryTag?), bool? defaultSelectedFlag = false, OutputFormat outputFormat = default(OutputFormat), PredefinedContent predefinedContent = default(PredefinedContent), List<OutputText> outputText = default(List<OutputText>), byte[] outputXHTML = default(byte[]))
        {
            this.OutputFormat = outputFormat;
            this.MenuEntryTag = menuEntryTag;
            this.DefaultSelectedFlag = defaultSelectedFlag;
            this.PredefinedContent = predefinedContent;
            this.OutputText = outputText;
            this.OutputXHTML = outputXHTML;
        }

        /// <summary>
        /// Gets or Sets DefaultSelectedFlag
        /// </summary>
        [DataMember(Name = "DefaultSelectedFlag", EmitDefaultValue = false)]
        public bool? DefaultSelectedFlag { get; set; }

        /// <summary>
        /// Gets or Sets PredefinedContent
        /// </summary>
        [DataMember(Name = "PredefinedContent", EmitDefaultValue = false)]
        public PredefinedContent PredefinedContent { get; set; }

        /// <summary>
        /// Gets or Sets OutputText
        /// </summary>
        [DataMember(Name = "OutputText", EmitDefaultValue = false)]
        public List<OutputText> OutputText { get; set; }

        /// <summary>
        /// Gets or Sets OutputXHTML
        /// </summary>
        [DataMember(Name = "OutputXHTML", EmitDefaultValue = false)]
        public byte[] OutputXHTML { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MenuEntry {\n");
            sb.Append("  MenuEntryTag: ").Append(MenuEntryTag).Append("\n");
            sb.Append("  DefaultSelectedFlag: ").Append(DefaultSelectedFlag).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  PredefinedContent: ").Append(PredefinedContent).Append("\n");
            sb.Append("  OutputText: ").Append(OutputText).Append("\n");
            sb.Append("  OutputXHTML: ").Append(OutputXHTML).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MenuEntry);
        }

        /// <summary>
        /// Returns true if MenuEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of MenuEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MenuEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MenuEntryTag == input.MenuEntryTag ||
                    this.MenuEntryTag.Equals(input.MenuEntryTag)
                ) && 
                (
                    this.DefaultSelectedFlag == input.DefaultSelectedFlag ||
                    this.DefaultSelectedFlag.Equals(input.DefaultSelectedFlag)
                ) && 
                (
                    this.OutputFormat == input.OutputFormat ||
                    this.OutputFormat.Equals(input.OutputFormat)
                ) && 
                (
                    this.PredefinedContent == input.PredefinedContent ||
                    (this.PredefinedContent != null &&
                    this.PredefinedContent.Equals(input.PredefinedContent))
                ) && 
                (
                    this.OutputText == input.OutputText ||
                    this.OutputText != null &&
                    input.OutputText != null &&
                    this.OutputText.SequenceEqual(input.OutputText)
                ) && 
                (
                    this.OutputXHTML == input.OutputXHTML ||
                    (this.OutputXHTML != null &&
                    this.OutputXHTML.Equals(input.OutputXHTML))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MenuEntryTag.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultSelectedFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.OutputFormat.GetHashCode();
                if (this.PredefinedContent != null)
                {
                    hashCode = (hashCode * 59) + this.PredefinedContent.GetHashCode();
                }
                if (this.OutputText != null)
                {
                    hashCode = (hashCode * 59) + this.OutputText.GetHashCode();
                }
                if (this.OutputXHTML != null)
                {
                    hashCode = (hashCode * 59) + this.OutputXHTML.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
