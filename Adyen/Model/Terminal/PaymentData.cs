/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// PaymentData
    /// </summary>
    [DataContract(Name = "PaymentData")]
    public partial class PaymentData : IEquatable<PaymentData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name = "PaymentType", EmitDefaultValue = false)]
        public PaymentType? PaymentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentData" /> class.
        /// </summary>
        /// <param name="paymentType">paymentType.</param>
        /// <param name="splitPaymentFlag">splitPaymentFlag (default to false).</param>
        /// <param name="requestedValidityDate">requestedValidityDate.</param>
        /// <param name="cardAcquisitionReference">cardAcquisitionReference.</param>
        /// <param name="instalment">instalment.</param>
        /// <param name="customerOrder">customerOrder.</param>
        /// <param name="paymentInstrumentData">paymentInstrumentData.</param>
        public PaymentData(PaymentType? paymentType = default(PaymentType?), bool? splitPaymentFlag = false, DateTime requestedValidityDate = default(DateTime), TransactionIDType cardAcquisitionReference = default(TransactionIDType), Instalment instalment = default(Instalment), CustomerOrder customerOrder = default(CustomerOrder), PaymentInstrumentData paymentInstrumentData = default(PaymentInstrumentData))
        {
            this.PaymentType = paymentType;
            this.SplitPaymentFlag = splitPaymentFlag;
            this.RequestedValidityDate = requestedValidityDate;
            this.CardAcquisitionReference = cardAcquisitionReference;
            this.Instalment = instalment;
            this.CustomerOrder = customerOrder;
            this.PaymentInstrumentData = paymentInstrumentData;
        }

        /// <summary>
        /// Gets or Sets SplitPaymentFlag
        /// </summary>
        [DataMember(Name = "SplitPaymentFlag", EmitDefaultValue = false)]
        public bool? SplitPaymentFlag { get; set; }

        /// <summary>
        /// Gets or Sets RequestedValidityDate
        /// </summary>
        [DataMember(Name = "RequestedValidityDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime RequestedValidityDate { get; set; }

        /// <summary>
        /// Gets or Sets CardAcquisitionReference
        /// </summary>
        [DataMember(Name = "CardAcquisitionReference", EmitDefaultValue = false)]
        public TransactionIDType CardAcquisitionReference { get; set; }

        /// <summary>
        /// Gets or Sets Instalment
        /// </summary>
        [DataMember(Name = "Instalment", EmitDefaultValue = false)]
        public Instalment Instalment { get; set; }

        /// <summary>
        /// Gets or Sets CustomerOrder
        /// </summary>
        [DataMember(Name = "CustomerOrder", EmitDefaultValue = false)]
        public CustomerOrder CustomerOrder { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInstrumentData
        /// </summary>
        [DataMember(Name = "PaymentInstrumentData", EmitDefaultValue = false)]
        public PaymentInstrumentData PaymentInstrumentData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentData {\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  SplitPaymentFlag: ").Append(SplitPaymentFlag).Append("\n");
            sb.Append("  RequestedValidityDate: ").Append(RequestedValidityDate).Append("\n");
            sb.Append("  CardAcquisitionReference: ").Append(CardAcquisitionReference).Append("\n");
            sb.Append("  Instalment: ").Append(Instalment).Append("\n");
            sb.Append("  CustomerOrder: ").Append(CustomerOrder).Append("\n");
            sb.Append("  PaymentInstrumentData: ").Append(PaymentInstrumentData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentData);
        }

        /// <summary>
        /// Returns true if PaymentData instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentType == input.PaymentType ||
                    this.PaymentType.Equals(input.PaymentType)
                ) && 
                (
                    this.SplitPaymentFlag == input.SplitPaymentFlag ||
                    this.SplitPaymentFlag.Equals(input.SplitPaymentFlag)
                ) && 
                (
                    this.RequestedValidityDate == input.RequestedValidityDate ||
                    (this.RequestedValidityDate != null &&
                    this.RequestedValidityDate.Equals(input.RequestedValidityDate))
                ) && 
                (
                    this.CardAcquisitionReference == input.CardAcquisitionReference ||
                    (this.CardAcquisitionReference != null &&
                    this.CardAcquisitionReference.Equals(input.CardAcquisitionReference))
                ) && 
                (
                    this.Instalment == input.Instalment ||
                    (this.Instalment != null &&
                    this.Instalment.Equals(input.Instalment))
                ) && 
                (
                    this.CustomerOrder == input.CustomerOrder ||
                    (this.CustomerOrder != null &&
                    this.CustomerOrder.Equals(input.CustomerOrder))
                ) && 
                (
                    this.PaymentInstrumentData == input.PaymentInstrumentData ||
                    (this.PaymentInstrumentData != null &&
                    this.PaymentInstrumentData.Equals(input.PaymentInstrumentData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PaymentType.GetHashCode();
                hashCode = (hashCode * 59) + this.SplitPaymentFlag.GetHashCode();
                if (this.RequestedValidityDate != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedValidityDate.GetHashCode();
                }
                if (this.CardAcquisitionReference != null)
                {
                    hashCode = (hashCode * 59) + this.CardAcquisitionReference.GetHashCode();
                }
                if (this.Instalment != null)
                {
                    hashCode = (hashCode * 59) + this.Instalment.GetHashCode();
                }
                if (this.CustomerOrder != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerOrder.GetHashCode();
                }
                if (this.PaymentInstrumentData != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInstrumentData.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
