/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys information from the Sale System related to the scope and the format of the totals to be computed by the POI System. Content of the Get Totals Request message.
    /// </summary>
    [DataContract(Name = "GetTotalsRequest")]
    public partial class GetTotalsRequest : IEquatable<GetTotalsRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines TotalDetails
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TotalDetailsEnum
        {
            /// <summary>
            /// Enum OperatorID for value: OperatorID
            /// </summary>
            [EnumMember(Value = "OperatorID")]
            OperatorID = 1,

            /// <summary>
            /// Enum POIID for value: POIID
            /// </summary>
            [EnumMember(Value = "POIID")]
            POIID = 2,

            /// <summary>
            /// Enum SaleID for value: SaleID
            /// </summary>
            [EnumMember(Value = "SaleID")]
            SaleID = 3,

            /// <summary>
            /// Enum ShiftNumber for value: ShiftNumber
            /// </summary>
            [EnumMember(Value = "ShiftNumber")]
            ShiftNumber = 4,

            /// <summary>
            /// Enum TotalsGroupID for value: TotalsGroupID
            /// </summary>
            [EnumMember(Value = "TotalsGroupID")]
            TotalsGroupID = 5

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTotalsRequest" /> class.
        /// </summary>
        /// <param name="totalDetails">totalDetails.</param>
        /// <param name="totalFilter">totalFilter.</param>
        public GetTotalsRequest(List<TotalDetailsEnum> totalDetails = default(List<TotalDetailsEnum>), TotalFilter totalFilter = default(TotalFilter))
        {
            this.TotalDetails = totalDetails;
            this.TotalFilter = totalFilter;
        }

        /// <summary>
        /// Gets or Sets TotalDetails
        /// </summary>
        [DataMember(Name = "TotalDetails", EmitDefaultValue = false)]
        public List<GetTotalsRequest.TotalDetailsEnum> TotalDetails { get; set; }

        /// <summary>
        /// Gets or Sets TotalFilter
        /// </summary>
        [DataMember(Name = "TotalFilter", EmitDefaultValue = false)]
        public TotalFilter TotalFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetTotalsRequest {\n");
            sb.Append("  TotalDetails: ").Append(TotalDetails).Append("\n");
            sb.Append("  TotalFilter: ").Append(TotalFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTotalsRequest);
        }

        /// <summary>
        /// Returns true if GetTotalsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTotalsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTotalsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalDetails == input.TotalDetails ||
                    this.TotalDetails != null &&
                    input.TotalDetails != null &&
                    this.TotalDetails.SequenceEqual(input.TotalDetails)
                ) && 
                (
                    this.TotalFilter == input.TotalFilter ||
                    (this.TotalFilter != null &&
                    this.TotalFilter.Equals(input.TotalFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalDetails != null)
                {
                    hashCode = (hashCode * 59) + this.TotalDetails.GetHashCode();
                }
                if (this.TotalFilter != null)
                {
                    hashCode = (hashCode * 59) + this.TotalFilter.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
