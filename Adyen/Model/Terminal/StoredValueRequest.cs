/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys Information related to the Stored Value transaction to process. Content of the Stored Value Request message.
    /// </summary>
    [DataContract(Name = "StoredValueRequest")]
    public partial class StoredValueRequest : IEquatable<StoredValueRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredValueRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoredValueRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredValueRequest" /> class.
        /// </summary>
        /// <param name="saleData">saleData (required).</param>
        /// <param name="customerLanguage">If the language is selected by the Sale System before the request to the POI..</param>
        /// <param name="storedValueData">storedValueData (required).</param>
        public StoredValueRequest(SaleData saleData = default(SaleData), string customerLanguage = default(string), List<StoredValueData> storedValueData = default(List<StoredValueData>))
        {
            this.SaleData = saleData;
            this.StoredValueData = storedValueData;
            this.CustomerLanguage = customerLanguage;
        }

        /// <summary>
        /// Gets or Sets SaleData
        /// </summary>
        [DataMember(Name = "SaleData", IsRequired = false, EmitDefaultValue = false)]
        public SaleData SaleData { get; set; }

        /// <summary>
        /// If the language is selected by the Sale System before the request to the POI.
        /// </summary>
        /// <value>If the language is selected by the Sale System before the request to the POI.</value>
        [DataMember(Name = "CustomerLanguage", EmitDefaultValue = false)]
        public string CustomerLanguage { get; set; }

        /// <summary>
        /// Gets or Sets StoredValueData
        /// </summary>
        [DataMember(Name = "StoredValueData", IsRequired = false, EmitDefaultValue = false)]
        public List<StoredValueData> StoredValueData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StoredValueRequest {\n");
            sb.Append("  SaleData: ").Append(SaleData).Append("\n");
            sb.Append("  CustomerLanguage: ").Append(CustomerLanguage).Append("\n");
            sb.Append("  StoredValueData: ").Append(StoredValueData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoredValueRequest);
        }

        /// <summary>
        /// Returns true if StoredValueRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of StoredValueRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoredValueRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SaleData == input.SaleData ||
                    (this.SaleData != null &&
                    this.SaleData.Equals(input.SaleData))
                ) && 
                (
                    this.CustomerLanguage == input.CustomerLanguage ||
                    (this.CustomerLanguage != null &&
                    this.CustomerLanguage.Equals(input.CustomerLanguage))
                ) && 
                (
                    this.StoredValueData == input.StoredValueData ||
                    this.StoredValueData != null &&
                    input.StoredValueData != null &&
                    this.StoredValueData.SequenceEqual(input.StoredValueData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SaleData != null)
                {
                    hashCode = (hashCode * 59) + this.SaleData.GetHashCode();
                }
                if (this.CustomerLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerLanguage.GetHashCode();
                }
                if (this.StoredValueData != null)
                {
                    hashCode = (hashCode * 59) + this.StoredValueData.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CustomerLanguage (string) pattern
            Regex regexCustomerLanguage = new Regex(@"^[a-z]{2,2}$", RegexOptions.CultureInvariant);
            if (false == regexCustomerLanguage.Match(this.CustomerLanguage).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerLanguage, must match a pattern of " + regexCustomerLanguage, new [] { "CustomerLanguage" });
            }

            yield break;
        }
    }

}
