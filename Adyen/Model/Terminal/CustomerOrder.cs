/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Customer order attached to a customer, recorded in the POI system.  Allows the management of customer orders by the POI, for instance in a multi-channel or a click and collect sale transaction.
    /// </summary>
    [DataContract(Name = "CustomerOrder")]
    public partial class CustomerOrder : IEquatable<CustomerOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerOrder" /> class.
        /// </summary>
        /// <param name="customerOrderID">Additional and optional identification of a customer order..</param>
        /// <param name="saleReferenceID">saleReferenceID (required).</param>
        /// <param name="openOrderState">openOrderState (default to true).</param>
        /// <param name="startDate">Date time of the beginning of an operation. (required).</param>
        /// <param name="endDate">Date time of the end of an operation..</param>
        /// <param name="forecastedAmount">forecastedAmount (required).</param>
        /// <param name="currentAmount">Total amount of all completed transactions of a customer order. (required).</param>
        /// <param name="currency">Currency of a monetary amount..</param>
        /// <param name="accessedBy">accessedBy.</param>
        /// <param name="additionalInformation">Unqualified information..</param>
        public CustomerOrder(string customerOrderID = default(string), string saleReferenceID = default(string), bool? openOrderState = true, DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), decimal? forecastedAmount = default(decimal?), decimal? currentAmount = default(decimal?), string currency = default(string), string accessedBy = default(string), string additionalInformation = default(string))
        {
            this.SaleReferenceID = saleReferenceID;
            this.StartDate = startDate;
            this.ForecastedAmount = forecastedAmount;
            this.CurrentAmount = currentAmount;
            this.CustomerOrderID = customerOrderID;
            this.OpenOrderState = openOrderState;
            this.EndDate = endDate;
            this.Currency = currency;
            this.AccessedBy = accessedBy;
            this.AdditionalInformation = additionalInformation;
        }

        /// <summary>
        /// Additional and optional identification of a customer order.
        /// </summary>
        /// <value>Additional and optional identification of a customer order.</value>
        [DataMember(Name = "CustomerOrderID", EmitDefaultValue = false)]
        public string CustomerOrderID { get; set; }

        /// <summary>
        /// Gets or Sets SaleReferenceID
        /// </summary>
        [DataMember(Name = "SaleReferenceID", IsRequired = false, EmitDefaultValue = false)]
        public string SaleReferenceID { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderState
        /// </summary>
        [DataMember(Name = "OpenOrderState", EmitDefaultValue = false)]
        public bool? OpenOrderState { get; set; }

        /// <summary>
        /// Date time of the beginning of an operation.
        /// </summary>
        /// <value>Date time of the beginning of an operation.</value>
        [DataMember(Name = "StartDate", IsRequired = false, EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Date time of the end of an operation.
        /// </summary>
        /// <value>Date time of the end of an operation.</value>
        [DataMember(Name = "EndDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets ForecastedAmount
        /// </summary>
        [DataMember(Name = "ForecastedAmount", IsRequired = false, EmitDefaultValue = false)]
        public decimal? ForecastedAmount { get; set; }

        /// <summary>
        /// Total amount of all completed transactions of a customer order.
        /// </summary>
        /// <value>Total amount of all completed transactions of a customer order.</value>
        [DataMember(Name = "CurrentAmount", IsRequired = false, EmitDefaultValue = false)]
        public decimal? CurrentAmount { get; set; }

        /// <summary>
        /// Currency of a monetary amount.
        /// </summary>
        /// <value>Currency of a monetary amount.</value>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets AccessedBy
        /// </summary>
        [DataMember(Name = "AccessedBy", EmitDefaultValue = false)]
        public string AccessedBy { get; set; }

        /// <summary>
        /// Unqualified information.
        /// </summary>
        /// <value>Unqualified information.</value>
        [DataMember(Name = "AdditionalInformation", EmitDefaultValue = false)]
        public string AdditionalInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerOrder {\n");
            sb.Append("  CustomerOrderID: ").Append(CustomerOrderID).Append("\n");
            sb.Append("  SaleReferenceID: ").Append(SaleReferenceID).Append("\n");
            sb.Append("  OpenOrderState: ").Append(OpenOrderState).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ForecastedAmount: ").Append(ForecastedAmount).Append("\n");
            sb.Append("  CurrentAmount: ").Append(CurrentAmount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  AccessedBy: ").Append(AccessedBy).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerOrder);
        }

        /// <summary>
        /// Returns true if CustomerOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerOrder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerOrderID == input.CustomerOrderID ||
                    (this.CustomerOrderID != null &&
                    this.CustomerOrderID.Equals(input.CustomerOrderID))
                ) && 
                (
                    this.SaleReferenceID == input.SaleReferenceID ||
                    (this.SaleReferenceID != null &&
                    this.SaleReferenceID.Equals(input.SaleReferenceID))
                ) && 
                (
                    this.OpenOrderState == input.OpenOrderState ||
                    this.OpenOrderState.Equals(input.OpenOrderState)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ForecastedAmount == input.ForecastedAmount ||
                    this.ForecastedAmount.Equals(input.ForecastedAmount)
                ) && 
                (
                    this.CurrentAmount == input.CurrentAmount ||
                    this.CurrentAmount.Equals(input.CurrentAmount)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.AccessedBy == input.AccessedBy ||
                    (this.AccessedBy != null &&
                    this.AccessedBy.Equals(input.AccessedBy))
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    (this.AdditionalInformation != null &&
                    this.AdditionalInformation.Equals(input.AdditionalInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerOrderID != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerOrderID.GetHashCode();
                }
                if (this.SaleReferenceID != null)
                {
                    hashCode = (hashCode * 59) + this.SaleReferenceID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OpenOrderState.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ForecastedAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentAmount.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.AccessedBy != null)
                {
                    hashCode = (hashCode * 59) + this.AccessedBy.GetHashCode();
                }
                if (this.AdditionalInformation != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalInformation.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CustomerOrderID (string) pattern
            Regex regexCustomerOrderID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexCustomerOrderID.Match(this.CustomerOrderID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerOrderID, must match a pattern of " + regexCustomerOrderID, new [] { "CustomerOrderID" });
            }

            // SaleReferenceID (string) pattern
            Regex regexSaleReferenceID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexSaleReferenceID.Match(this.SaleReferenceID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaleReferenceID, must match a pattern of " + regexSaleReferenceID, new [] { "SaleReferenceID" });
            }

            // ForecastedAmount (decimal) maximum
            if (this.ForecastedAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ForecastedAmount, must be a value less than or equal to 99999999.999999.", new [] { "ForecastedAmount" });
            }

            // ForecastedAmount (decimal) minimum
            if (this.ForecastedAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ForecastedAmount, must be a value greater than or equal to 0.0.", new [] { "ForecastedAmount" });
            }

            // CurrentAmount (decimal) maximum
            if (this.CurrentAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentAmount, must be a value less than or equal to 99999999.999999.", new [] { "CurrentAmount" });
            }

            // CurrentAmount (decimal) minimum
            if (this.CurrentAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentAmount, must be a value greater than or equal to 0.0.", new [] { "CurrentAmount" });
            }

            // Currency (string) pattern
            Regex regexCurrency = new Regex(@"^[A-Z]{3,3}$", RegexOptions.CultureInvariant);
            if (false == regexCurrency.Match(this.Currency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, must match a pattern of " + regexCurrency, new [] { "Currency" });
            }

            // AccessedBy (string) pattern
            Regex regexAccessedBy = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexAccessedBy.Match(this.AccessedBy).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccessedBy, must match a pattern of " + regexAccessedBy, new [] { "AccessedBy" });
            }

            // AdditionalInformation (string) pattern
            Regex regexAdditionalInformation = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexAdditionalInformation.Match(this.AdditionalInformation).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdditionalInformation, must match a pattern of " + regexAdditionalInformation, new [] { "AdditionalInformation" });
            }

            yield break;
        }
    }

}
