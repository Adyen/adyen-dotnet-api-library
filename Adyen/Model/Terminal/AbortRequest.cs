/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys Information requested for identification of the message request carrying the transaction to abort. A message to display on the CustomerError Device could be sent by the Sale System (DisplayOutput). Body of the Abort Request message.
    /// </summary>
    [DataContract(Name = "AbortRequest")]
    public partial class AbortRequest : IEquatable<AbortRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AbortRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AbortRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AbortRequest" /> class.
        /// </summary>
        /// <param name="messageReference">messageReference (required).</param>
        /// <param name="abortReason">Reason of aborting a transaction. (required).</param>
        /// <param name="displayOutput">displayOutput.</param>
        public AbortRequest(MessageReference messageReference = default(MessageReference), string abortReason = default(string), DisplayOutput displayOutput = default(DisplayOutput))
        {
            this.MessageReference = messageReference;
            this.AbortReason = abortReason;
            this.DisplayOutput = displayOutput;
        }

        /// <summary>
        /// Gets or Sets MessageReference
        /// </summary>
        [DataMember(Name = "MessageReference", IsRequired = false, EmitDefaultValue = false)]
        public MessageReference MessageReference { get; set; }

        /// <summary>
        /// Reason of aborting a transaction.
        /// </summary>
        /// <value>Reason of aborting a transaction.</value>
        [DataMember(Name = "AbortReason", IsRequired = false, EmitDefaultValue = false)]
        public string AbortReason { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOutput
        /// </summary>
        [DataMember(Name = "DisplayOutput", EmitDefaultValue = false)]
        public DisplayOutput DisplayOutput { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AbortRequest {\n");
            sb.Append("  MessageReference: ").Append(MessageReference).Append("\n");
            sb.Append("  AbortReason: ").Append(AbortReason).Append("\n");
            sb.Append("  DisplayOutput: ").Append(DisplayOutput).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AbortRequest);
        }

        /// <summary>
        /// Returns true if AbortRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AbortRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AbortRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MessageReference == input.MessageReference ||
                    (this.MessageReference != null &&
                    this.MessageReference.Equals(input.MessageReference))
                ) && 
                (
                    this.AbortReason == input.AbortReason ||
                    (this.AbortReason != null &&
                    this.AbortReason.Equals(input.AbortReason))
                ) && 
                (
                    this.DisplayOutput == input.DisplayOutput ||
                    (this.DisplayOutput != null &&
                    this.DisplayOutput.Equals(input.DisplayOutput))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MessageReference != null)
                {
                    hashCode = (hashCode * 59) + this.MessageReference.GetHashCode();
                }
                if (this.AbortReason != null)
                {
                    hashCode = (hashCode * 59) + this.AbortReason.GetHashCode();
                }
                if (this.DisplayOutput != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayOutput.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // AbortReason (string) pattern
            Regex regexAbortReason = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexAbortReason.Match(this.AbortReason).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AbortReason, must match a pattern of " + regexAbortReason, new [] { "AbortReason" });
            }

            yield break;
        }
    }

}
