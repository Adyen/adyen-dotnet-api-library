/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys Information related to the payment and loyalty cards read and processed by the POI System and entered by the Customer. Content of the Card Acquisition Response message.
    /// </summary>
    [DataContract(Name = "CardAcquisitionResponse")]
    public partial class CardAcquisitionResponse : IEquatable<CardAcquisitionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardAcquisitionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardAcquisitionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardAcquisitionResponse" /> class.
        /// </summary>
        /// <param name="response">response (required).</param>
        /// <param name="saleData">saleData (required).</param>
        /// <param name="pOIData">pOIData (required).</param>
        /// <param name="customerLanguage">Data related to the POI System..</param>
        /// <param name="paymentBrand">paymentBrand.</param>
        /// <param name="paymentInstrumentData">paymentInstrumentData.</param>
        /// <param name="loyaltyAccount">loyaltyAccount.</param>
        public CardAcquisitionResponse(Response response = default(Response), SaleData saleData = default(SaleData), POIData pOIData = default(POIData), string customerLanguage = default(string), List<string> paymentBrand = default(List<string>), PaymentInstrumentData paymentInstrumentData = default(PaymentInstrumentData), List<LoyaltyAccount> loyaltyAccount = default(List<LoyaltyAccount>))
        {
            this.Response = response;
            this.SaleData = saleData;
            this.POIData = pOIData;
            this.CustomerLanguage = customerLanguage;
            this.PaymentBrand = paymentBrand;
            this.PaymentInstrumentData = paymentInstrumentData;
            this.LoyaltyAccount = loyaltyAccount;
        }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name = "Response", IsRequired = false, EmitDefaultValue = false)]
        public Response Response { get; set; }

        /// <summary>
        /// Gets or Sets SaleData
        /// </summary>
        [DataMember(Name = "SaleData", IsRequired = false, EmitDefaultValue = false)]
        public SaleData SaleData { get; set; }

        /// <summary>
        /// Gets or Sets POIData
        /// </summary>
        [DataMember(Name = "POIData", IsRequired = false, EmitDefaultValue = false)]
        public POIData POIData { get; set; }

        /// <summary>
        /// Data related to the POI System.
        /// </summary>
        /// <value>Data related to the POI System.</value>
        [DataMember(Name = "CustomerLanguage", EmitDefaultValue = false)]
        public string CustomerLanguage { get; set; }

        /// <summary>
        /// Gets or Sets PaymentBrand
        /// </summary>
        [DataMember(Name = "PaymentBrand", EmitDefaultValue = false)]
        public List<string> PaymentBrand { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInstrumentData
        /// </summary>
        [DataMember(Name = "PaymentInstrumentData", EmitDefaultValue = false)]
        public PaymentInstrumentData PaymentInstrumentData { get; set; }

        /// <summary>
        /// Gets or Sets LoyaltyAccount
        /// </summary>
        [DataMember(Name = "LoyaltyAccount", EmitDefaultValue = false)]
        public List<LoyaltyAccount> LoyaltyAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardAcquisitionResponse {\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  SaleData: ").Append(SaleData).Append("\n");
            sb.Append("  POIData: ").Append(POIData).Append("\n");
            sb.Append("  CustomerLanguage: ").Append(CustomerLanguage).Append("\n");
            sb.Append("  PaymentBrand: ").Append(PaymentBrand).Append("\n");
            sb.Append("  PaymentInstrumentData: ").Append(PaymentInstrumentData).Append("\n");
            sb.Append("  LoyaltyAccount: ").Append(LoyaltyAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardAcquisitionResponse);
        }

        /// <summary>
        /// Returns true if CardAcquisitionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CardAcquisitionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardAcquisitionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                ) && 
                (
                    this.SaleData == input.SaleData ||
                    (this.SaleData != null &&
                    this.SaleData.Equals(input.SaleData))
                ) && 
                (
                    this.POIData == input.POIData ||
                    (this.POIData != null &&
                    this.POIData.Equals(input.POIData))
                ) && 
                (
                    this.CustomerLanguage == input.CustomerLanguage ||
                    (this.CustomerLanguage != null &&
                    this.CustomerLanguage.Equals(input.CustomerLanguage))
                ) && 
                (
                    this.PaymentBrand == input.PaymentBrand ||
                    this.PaymentBrand != null &&
                    input.PaymentBrand != null &&
                    this.PaymentBrand.SequenceEqual(input.PaymentBrand)
                ) && 
                (
                    this.PaymentInstrumentData == input.PaymentInstrumentData ||
                    (this.PaymentInstrumentData != null &&
                    this.PaymentInstrumentData.Equals(input.PaymentInstrumentData))
                ) && 
                (
                    this.LoyaltyAccount == input.LoyaltyAccount ||
                    this.LoyaltyAccount != null &&
                    input.LoyaltyAccount != null &&
                    this.LoyaltyAccount.SequenceEqual(input.LoyaltyAccount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Response != null)
                {
                    hashCode = (hashCode * 59) + this.Response.GetHashCode();
                }
                if (this.SaleData != null)
                {
                    hashCode = (hashCode * 59) + this.SaleData.GetHashCode();
                }
                if (this.POIData != null)
                {
                    hashCode = (hashCode * 59) + this.POIData.GetHashCode();
                }
                if (this.CustomerLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerLanguage.GetHashCode();
                }
                if (this.PaymentBrand != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentBrand.GetHashCode();
                }
                if (this.PaymentInstrumentData != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInstrumentData.GetHashCode();
                }
                if (this.LoyaltyAccount != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyAccount.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CustomerLanguage (string) pattern
            Regex regexCustomerLanguage = new Regex(@"^[a-z]{2,2}$", RegexOptions.CultureInvariant);
            if (false == regexCustomerLanguage.Match(this.CustomerLanguage).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerLanguage, must match a pattern of " + regexCustomerLanguage, new [] { "CustomerLanguage" });
            }

            yield break;
        }
    }

}
