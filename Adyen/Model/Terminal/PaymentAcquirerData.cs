/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Data related to the response from the payment Acquirer.
    /// </summary>
    [DataContract(Name = "PaymentAcquirerData")]
    public partial class PaymentAcquirerData : IEquatable<PaymentAcquirerData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentAcquirerData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentAcquirerData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentAcquirerData" /> class.
        /// </summary>
        /// <param name="acquirerID">If several Acquirers..</param>
        /// <param name="merchantID">Identification of the Merchant for the Acquirer. (required).</param>
        /// <param name="acquirerPOIID">Identification of the POI for the payment Acquirer. (required).</param>
        /// <param name="acquirerTransactionID">acquirerTransactionID.</param>
        /// <param name="approvalCode">If available..</param>
        /// <param name="hostReconciliationID">hostReconciliationID.</param>
        public PaymentAcquirerData(int? acquirerID = default(int?), string merchantID = default(string), string acquirerPOIID = default(string), TransactionIDType acquirerTransactionID = default(TransactionIDType), string approvalCode = default(string), string hostReconciliationID = default(string))
        {
            this.MerchantID = merchantID;
            this.AcquirerPOIID = acquirerPOIID;
            this.AcquirerID = acquirerID;
            this.AcquirerTransactionID = acquirerTransactionID;
            this.ApprovalCode = approvalCode;
            this.HostReconciliationID = hostReconciliationID;
        }

        /// <summary>
        /// If several Acquirers.
        /// </summary>
        /// <value>If several Acquirers.</value>
        [DataMember(Name = "AcquirerID", EmitDefaultValue = false)]
        public int? AcquirerID { get; set; }

        /// <summary>
        /// Identification of the Merchant for the Acquirer.
        /// </summary>
        /// <value>Identification of the Merchant for the Acquirer.</value>
        [DataMember(Name = "MerchantID", IsRequired = false, EmitDefaultValue = false)]
        public string MerchantID { get; set; }

        /// <summary>
        /// Identification of the POI for the payment Acquirer.
        /// </summary>
        /// <value>Identification of the POI for the payment Acquirer.</value>
        [DataMember(Name = "AcquirerPOIID", IsRequired = false, EmitDefaultValue = false)]
        public string AcquirerPOIID { get; set; }

        /// <summary>
        /// Gets or Sets AcquirerTransactionID
        /// </summary>
        [DataMember(Name = "AcquirerTransactionID", EmitDefaultValue = false)]
        public TransactionIDType AcquirerTransactionID { get; set; }

        /// <summary>
        /// If available.
        /// </summary>
        /// <value>If available.</value>
        [DataMember(Name = "ApprovalCode", EmitDefaultValue = false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets HostReconciliationID
        /// </summary>
        [DataMember(Name = "HostReconciliationID", EmitDefaultValue = false)]
        public string HostReconciliationID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentAcquirerData {\n");
            sb.Append("  AcquirerID: ").Append(AcquirerID).Append("\n");
            sb.Append("  MerchantID: ").Append(MerchantID).Append("\n");
            sb.Append("  AcquirerPOIID: ").Append(AcquirerPOIID).Append("\n");
            sb.Append("  AcquirerTransactionID: ").Append(AcquirerTransactionID).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  HostReconciliationID: ").Append(HostReconciliationID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentAcquirerData);
        }

        /// <summary>
        /// Returns true if PaymentAcquirerData instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentAcquirerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentAcquirerData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AcquirerID == input.AcquirerID ||
                    this.AcquirerID.Equals(input.AcquirerID)
                ) && 
                (
                    this.MerchantID == input.MerchantID ||
                    (this.MerchantID != null &&
                    this.MerchantID.Equals(input.MerchantID))
                ) && 
                (
                    this.AcquirerPOIID == input.AcquirerPOIID ||
                    (this.AcquirerPOIID != null &&
                    this.AcquirerPOIID.Equals(input.AcquirerPOIID))
                ) && 
                (
                    this.AcquirerTransactionID == input.AcquirerTransactionID ||
                    (this.AcquirerTransactionID != null &&
                    this.AcquirerTransactionID.Equals(input.AcquirerTransactionID))
                ) && 
                (
                    this.ApprovalCode == input.ApprovalCode ||
                    (this.ApprovalCode != null &&
                    this.ApprovalCode.Equals(input.ApprovalCode))
                ) && 
                (
                    this.HostReconciliationID == input.HostReconciliationID ||
                    (this.HostReconciliationID != null &&
                    this.HostReconciliationID.Equals(input.HostReconciliationID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AcquirerID.GetHashCode();
                if (this.MerchantID != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantID.GetHashCode();
                }
                if (this.AcquirerPOIID != null)
                {
                    hashCode = (hashCode * 59) + this.AcquirerPOIID.GetHashCode();
                }
                if (this.AcquirerTransactionID != null)
                {
                    hashCode = (hashCode * 59) + this.AcquirerTransactionID.GetHashCode();
                }
                if (this.ApprovalCode != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalCode.GetHashCode();
                }
                if (this.HostReconciliationID != null)
                {
                    hashCode = (hashCode * 59) + this.HostReconciliationID.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // MerchantID (string) pattern
            Regex regexMerchantID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexMerchantID.Match(this.MerchantID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantID, must match a pattern of " + regexMerchantID, new [] { "MerchantID" });
            }

            // AcquirerPOIID (string) pattern
            Regex regexAcquirerPOIID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexAcquirerPOIID.Match(this.AcquirerPOIID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcquirerPOIID, must match a pattern of " + regexAcquirerPOIID, new [] { "AcquirerPOIID" });
            }

            // ApprovalCode (string) pattern
            Regex regexApprovalCode = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexApprovalCode.Match(this.ApprovalCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApprovalCode, must match a pattern of " + regexApprovalCode, new [] { "ApprovalCode" });
            }

            // HostReconciliationID (string) pattern
            Regex regexHostReconciliationID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexHostReconciliationID.Match(this.HostReconciliationID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HostReconciliationID, must match a pattern of " + regexHostReconciliationID, new [] { "HostReconciliationID" });
            }

            yield break;
        }
    }

}
