/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Input
    /// </summary>
    [DataContract(Name = "Input")]
    public partial class Input : IEquatable<Input>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets InputCommand
        /// </summary>
        [DataMember(Name = "InputCommand", IsRequired = false, EmitDefaultValue = false)]
        public InputCommand InputCommand { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Input" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Input() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Input" /> class.
        /// </summary>
        /// <param name="inputCommand">inputCommand (required).</param>
        /// <param name="confirmedFlag">confirmedFlag.</param>
        /// <param name="functionKey">functionKey.</param>
        /// <param name="textInput">textInput.</param>
        /// <param name="digitInput">digitInput.</param>
        /// <param name="password">password.</param>
        /// <param name="menuEntryNumber">menuEntryNumber.</param>
        public Input(InputCommand inputCommand = default(InputCommand), bool? confirmedFlag = default(bool?), int? functionKey = default(int?), string textInput = default(string), int? digitInput = default(int?), string password = default(string), List<int> menuEntryNumber = default(List<int>))
        {
            this.InputCommand = inputCommand;
            this.ConfirmedFlag = confirmedFlag;
            this.FunctionKey = functionKey;
            this.TextInput = textInput;
            this.DigitInput = digitInput;
            this.Password = password;
            this.MenuEntryNumber = menuEntryNumber;
        }

        /// <summary>
        /// Gets or Sets ConfirmedFlag
        /// </summary>
        [DataMember(Name = "ConfirmedFlag", EmitDefaultValue = false)]
        public bool? ConfirmedFlag { get; set; }

        /// <summary>
        /// Gets or Sets FunctionKey
        /// </summary>
        [DataMember(Name = "FunctionKey", EmitDefaultValue = false)]
        public int? FunctionKey { get; set; }

        /// <summary>
        /// Gets or Sets TextInput
        /// </summary>
        [DataMember(Name = "TextInput", EmitDefaultValue = false)]
        public string TextInput { get; set; }

        /// <summary>
        /// Gets or Sets DigitInput
        /// </summary>
        [DataMember(Name = "DigitInput", EmitDefaultValue = false)]
        public int? DigitInput { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "Password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets MenuEntryNumber
        /// </summary>
        [DataMember(Name = "MenuEntryNumber", EmitDefaultValue = false)]
        public List<int> MenuEntryNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Input {\n");
            sb.Append("  InputCommand: ").Append(InputCommand).Append("\n");
            sb.Append("  ConfirmedFlag: ").Append(ConfirmedFlag).Append("\n");
            sb.Append("  FunctionKey: ").Append(FunctionKey).Append("\n");
            sb.Append("  TextInput: ").Append(TextInput).Append("\n");
            sb.Append("  DigitInput: ").Append(DigitInput).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  MenuEntryNumber: ").Append(MenuEntryNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Input);
        }

        /// <summary>
        /// Returns true if Input instances are equal
        /// </summary>
        /// <param name="input">Instance of Input to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Input input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InputCommand == input.InputCommand ||
                    this.InputCommand.Equals(input.InputCommand)
                ) && 
                (
                    this.ConfirmedFlag == input.ConfirmedFlag ||
                    this.ConfirmedFlag.Equals(input.ConfirmedFlag)
                ) && 
                (
                    this.FunctionKey == input.FunctionKey ||
                    this.FunctionKey.Equals(input.FunctionKey)
                ) && 
                (
                    this.TextInput == input.TextInput ||
                    (this.TextInput != null &&
                    this.TextInput.Equals(input.TextInput))
                ) && 
                (
                    this.DigitInput == input.DigitInput ||
                    this.DigitInput.Equals(input.DigitInput)
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.MenuEntryNumber == input.MenuEntryNumber ||
                    this.MenuEntryNumber != null &&
                    input.MenuEntryNumber != null &&
                    this.MenuEntryNumber.SequenceEqual(input.MenuEntryNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.InputCommand.GetHashCode();
                hashCode = (hashCode * 59) + this.ConfirmedFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.FunctionKey.GetHashCode();
                if (this.TextInput != null)
                {
                    hashCode = (hashCode * 59) + this.TextInput.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DigitInput.GetHashCode();
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.MenuEntryNumber != null)
                {
                    hashCode = (hashCode * 59) + this.MenuEntryNumber.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
