/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Amounts of a payment
    /// </summary>
    [DataContract(Name = "AmountsReq")]
    public partial class AmountsReq : IEquatable<AmountsReq>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AmountsReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AmountsReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AmountsReq" /> class.
        /// </summary>
        /// <param name="currency">currency (required).</param>
        /// <param name="requestedAmount">requestedAmount (required).</param>
        /// <param name="cashBackAmount">cashBackAmount.</param>
        /// <param name="tipAmount">tipAmount.</param>
        /// <param name="paidAmount">paidAmount.</param>
        /// <param name="minimumAmountToDeliver">minimumAmountToDeliver.</param>
        /// <param name="maximumCashBackAmount">maximumCashBackAmount.</param>
        /// <param name="minimumSplitAmount">minimumSplitAmount.</param>
        public AmountsReq(string currency = default(string), decimal? requestedAmount = default(decimal?), decimal? cashBackAmount = default(decimal?), decimal? tipAmount = default(decimal?), decimal? paidAmount = default(decimal?), decimal? minimumAmountToDeliver = default(decimal?), decimal? maximumCashBackAmount = default(decimal?), decimal? minimumSplitAmount = default(decimal?))
        {
            this.Currency = currency;
            this.RequestedAmount = requestedAmount;
            this.CashBackAmount = cashBackAmount;
            this.TipAmount = tipAmount;
            this.PaidAmount = paidAmount;
            this.MinimumAmountToDeliver = minimumAmountToDeliver;
            this.MaximumCashBackAmount = maximumCashBackAmount;
            this.MinimumSplitAmount = minimumSplitAmount;
        }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "Currency", IsRequired = false, EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAmount
        /// </summary>
        [DataMember(Name = "RequestedAmount", IsRequired = false, EmitDefaultValue = false)]
        public decimal? RequestedAmount { get; set; }

        /// <summary>
        /// Gets or Sets CashBackAmount
        /// </summary>
        [DataMember(Name = "CashBackAmount", EmitDefaultValue = false)]
        public decimal? CashBackAmount { get; set; }

        /// <summary>
        /// Gets or Sets TipAmount
        /// </summary>
        [DataMember(Name = "TipAmount", EmitDefaultValue = false)]
        public decimal? TipAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaidAmount
        /// </summary>
        [DataMember(Name = "PaidAmount", EmitDefaultValue = false)]
        public decimal? PaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets MinimumAmountToDeliver
        /// </summary>
        [DataMember(Name = "MinimumAmountToDeliver", EmitDefaultValue = false)]
        public decimal? MinimumAmountToDeliver { get; set; }

        /// <summary>
        /// Gets or Sets MaximumCashBackAmount
        /// </summary>
        [DataMember(Name = "MaximumCashBackAmount", EmitDefaultValue = false)]
        public decimal? MaximumCashBackAmount { get; set; }

        /// <summary>
        /// Gets or Sets MinimumSplitAmount
        /// </summary>
        [DataMember(Name = "MinimumSplitAmount", EmitDefaultValue = false)]
        public decimal? MinimumSplitAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AmountsReq {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RequestedAmount: ").Append(RequestedAmount).Append("\n");
            sb.Append("  CashBackAmount: ").Append(CashBackAmount).Append("\n");
            sb.Append("  TipAmount: ").Append(TipAmount).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("  MinimumAmountToDeliver: ").Append(MinimumAmountToDeliver).Append("\n");
            sb.Append("  MaximumCashBackAmount: ").Append(MaximumCashBackAmount).Append("\n");
            sb.Append("  MinimumSplitAmount: ").Append(MinimumSplitAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AmountsReq);
        }

        /// <summary>
        /// Returns true if AmountsReq instances are equal
        /// </summary>
        /// <param name="input">Instance of AmountsReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AmountsReq input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.RequestedAmount == input.RequestedAmount ||
                    this.RequestedAmount.Equals(input.RequestedAmount)
                ) && 
                (
                    this.CashBackAmount == input.CashBackAmount ||
                    this.CashBackAmount.Equals(input.CashBackAmount)
                ) && 
                (
                    this.TipAmount == input.TipAmount ||
                    this.TipAmount.Equals(input.TipAmount)
                ) && 
                (
                    this.PaidAmount == input.PaidAmount ||
                    this.PaidAmount.Equals(input.PaidAmount)
                ) && 
                (
                    this.MinimumAmountToDeliver == input.MinimumAmountToDeliver ||
                    this.MinimumAmountToDeliver.Equals(input.MinimumAmountToDeliver)
                ) && 
                (
                    this.MaximumCashBackAmount == input.MaximumCashBackAmount ||
                    this.MaximumCashBackAmount.Equals(input.MaximumCashBackAmount)
                ) && 
                (
                    this.MinimumSplitAmount == input.MinimumSplitAmount ||
                    this.MinimumSplitAmount.Equals(input.MinimumSplitAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequestedAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.CashBackAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.TipAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.PaidAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumAmountToDeliver.GetHashCode();
                hashCode = (hashCode * 59) + this.MaximumCashBackAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumSplitAmount.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Currency (string) pattern
            Regex regexCurrency = new Regex(@"^[A-Z]{3,3}$", RegexOptions.CultureInvariant);
            if (false == regexCurrency.Match(this.Currency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, must match a pattern of " + regexCurrency, new [] { "Currency" });
            }

            // RequestedAmount (decimal) maximum
            if (this.RequestedAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestedAmount, must be a value less than or equal to 99999999.999999.", new [] { "RequestedAmount" });
            }

            // RequestedAmount (decimal) minimum
            if (this.RequestedAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestedAmount, must be a value greater than or equal to 0.0.", new [] { "RequestedAmount" });
            }

            // CashBackAmount (decimal) maximum
            if (this.CashBackAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CashBackAmount, must be a value less than or equal to 99999999.999999.", new [] { "CashBackAmount" });
            }

            // CashBackAmount (decimal) minimum
            if (this.CashBackAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CashBackAmount, must be a value greater than or equal to 0.0.", new [] { "CashBackAmount" });
            }

            // TipAmount (decimal) maximum
            if (this.TipAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TipAmount, must be a value less than or equal to 99999999.999999.", new [] { "TipAmount" });
            }

            // TipAmount (decimal) minimum
            if (this.TipAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TipAmount, must be a value greater than or equal to 0.0.", new [] { "TipAmount" });
            }

            // PaidAmount (decimal) maximum
            if (this.PaidAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaidAmount, must be a value less than or equal to 99999999.999999.", new [] { "PaidAmount" });
            }

            // PaidAmount (decimal) minimum
            if (this.PaidAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaidAmount, must be a value greater than or equal to 0.0.", new [] { "PaidAmount" });
            }

            // MinimumAmountToDeliver (decimal) maximum
            if (this.MinimumAmountToDeliver > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinimumAmountToDeliver, must be a value less than or equal to 99999999.999999.", new [] { "MinimumAmountToDeliver" });
            }

            // MinimumAmountToDeliver (decimal) minimum
            if (this.MinimumAmountToDeliver < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinimumAmountToDeliver, must be a value greater than or equal to 0.0.", new [] { "MinimumAmountToDeliver" });
            }

            // MaximumCashBackAmount (decimal) maximum
            if (this.MaximumCashBackAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaximumCashBackAmount, must be a value less than or equal to 99999999.999999.", new [] { "MaximumCashBackAmount" });
            }

            // MaximumCashBackAmount (decimal) minimum
            if (this.MaximumCashBackAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaximumCashBackAmount, must be a value greater than or equal to 0.0.", new [] { "MaximumCashBackAmount" });
            }

            // MinimumSplitAmount (decimal) maximum
            if (this.MinimumSplitAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinimumSplitAmount, must be a value less than or equal to 99999999.999999.", new [] { "MinimumSplitAmount" });
            }

            // MinimumSplitAmount (decimal) minimum
            if (this.MinimumSplitAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinimumSplitAmount, must be a value greater than or equal to 0.0.", new [] { "MinimumSplitAmount" });
            }

            yield break;
        }
    }

}
