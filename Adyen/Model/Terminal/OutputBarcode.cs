/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// OutputBarcode
    /// </summary>
    [DataContract(Name = "OutputBarcode")]
    public partial class OutputBarcode : IEquatable<OutputBarcode>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BarcodeType
        /// </summary>
        [DataMember(Name = "BarcodeType", EmitDefaultValue = false)]
        public BarcodeType? BarcodeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputBarcode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutputBarcode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputBarcode" /> class.
        /// </summary>
        /// <param name="barcodeType">barcodeType.</param>
        /// <param name="barcodeValue">barcodeValue (required).</param>
        public OutputBarcode(BarcodeType? barcodeType = default(BarcodeType?), string barcodeValue = default(string))
        {
            this.BarcodeValue = barcodeValue;
            this.BarcodeType = barcodeType;
        }

        /// <summary>
        /// Gets or Sets BarcodeValue
        /// </summary>
        [DataMember(Name = "BarcodeValue", IsRequired = false, EmitDefaultValue = false)]
        public string BarcodeValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutputBarcode {\n");
            sb.Append("  BarcodeType: ").Append(BarcodeType).Append("\n");
            sb.Append("  BarcodeValue: ").Append(BarcodeValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutputBarcode);
        }

        /// <summary>
        /// Returns true if OutputBarcode instances are equal
        /// </summary>
        /// <param name="input">Instance of OutputBarcode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutputBarcode input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BarcodeType == input.BarcodeType ||
                    this.BarcodeType.Equals(input.BarcodeType)
                ) && 
                (
                    this.BarcodeValue == input.BarcodeValue ||
                    (this.BarcodeValue != null &&
                    this.BarcodeValue.Equals(input.BarcodeValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BarcodeType.GetHashCode();
                if (this.BarcodeValue != null)
                {
                    hashCode = (hashCode * 59) + this.BarcodeValue.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // BarcodeValue (string) pattern
            Regex regexBarcodeValue = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexBarcodeValue.Match(this.BarcodeValue).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BarcodeValue, must match a pattern of " + regexBarcodeValue, new [] { "BarcodeValue" });
            }

            yield break;
        }
    }

}
