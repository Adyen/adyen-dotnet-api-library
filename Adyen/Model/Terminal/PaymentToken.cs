/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Surrogate of the PAN (Primary Account Number) of the payment card to  identify the payment mean of the customer. It allows, for a merchant, to identify   the customer.
    /// </summary>
    [DataContract(Name = "PaymentToken")]
    public partial class PaymentToken : IEquatable<PaymentToken>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TokenRequestedType
        /// </summary>
        [DataMember(Name = "TokenRequestedType", IsRequired = false, EmitDefaultValue = false)]
        public TokenRequestedType TokenRequestedType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentToken" /> class.
        /// </summary>
        /// <param name="tokenRequestedType">tokenRequestedType (required).</param>
        /// <param name="tokenValue">tokenValue (required).</param>
        /// <param name="expiryDateTime">Expiry date and time. Limits the validity of a payment token..</param>
        public PaymentToken(TokenRequestedType tokenRequestedType = default(TokenRequestedType), string tokenValue = default(string), DateTime expiryDateTime = default(DateTime))
        {
            this.TokenRequestedType = tokenRequestedType;
            this.TokenValue = tokenValue;
            this.ExpiryDateTime = expiryDateTime;
        }

        /// <summary>
        /// Gets or Sets TokenValue
        /// </summary>
        [DataMember(Name = "TokenValue", IsRequired = false, EmitDefaultValue = false)]
        public string TokenValue { get; set; }

        /// <summary>
        /// Expiry date and time. Limits the validity of a payment token.
        /// </summary>
        /// <value>Expiry date and time. Limits the validity of a payment token.</value>
        [DataMember(Name = "ExpiryDateTime", EmitDefaultValue = false)]
        public DateTime ExpiryDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentToken {\n");
            sb.Append("  TokenRequestedType: ").Append(TokenRequestedType).Append("\n");
            sb.Append("  TokenValue: ").Append(TokenValue).Append("\n");
            sb.Append("  ExpiryDateTime: ").Append(ExpiryDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentToken);
        }

        /// <summary>
        /// Returns true if PaymentToken instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentToken input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TokenRequestedType == input.TokenRequestedType ||
                    this.TokenRequestedType.Equals(input.TokenRequestedType)
                ) && 
                (
                    this.TokenValue == input.TokenValue ||
                    (this.TokenValue != null &&
                    this.TokenValue.Equals(input.TokenValue))
                ) && 
                (
                    this.ExpiryDateTime == input.ExpiryDateTime ||
                    (this.ExpiryDateTime != null &&
                    this.ExpiryDateTime.Equals(input.ExpiryDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TokenRequestedType.GetHashCode();
                if (this.TokenValue != null)
                {
                    hashCode = (hashCode * 59) + this.TokenValue.GetHashCode();
                }
                if (this.ExpiryDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiryDateTime.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // TokenValue (string) pattern
            Regex regexTokenValue = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexTokenValue.Match(this.TokenValue).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenValue, must match a pattern of " + regexTokenValue, new [] { "TokenValue" });
            }

            yield break;
        }
    }

}
