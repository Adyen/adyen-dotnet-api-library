/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// To abort a transaction in progress or to request the status of a transaction from which no response has been received.  It identifies the message header of the message request to abort or request the status. Identification of a previous POI transaction.
    /// </summary>
    [DataContract(Name = "MessageReference")]
    public partial class MessageReference : IEquatable<MessageReference>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MessageCategory
        /// </summary>
        [DataMember(Name = "MessageCategory", EmitDefaultValue = false)]
        public MessageCategory? MessageCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageReference" /> class.
        /// </summary>
        /// <param name="messageCategory">messageCategory.</param>
        /// <param name="serviceID">Identification of a message pair, which processes a transaction..</param>
        /// <param name="deviceID">Identification of a device message pair..</param>
        /// <param name="saleID">default MessageHeader.SaleID..</param>
        /// <param name="pOIID">default MessageHeader.POIID..</param>
        public MessageReference(MessageCategory? messageCategory = default(MessageCategory?), string serviceID = default(string), string deviceID = default(string), string saleID = default(string), string pOIID = default(string))
        {
            this.MessageCategory = messageCategory;
            this.ServiceID = serviceID;
            this.DeviceID = deviceID;
            this.SaleID = saleID;
            this.POIID = pOIID;
        }

        /// <summary>
        /// Identification of a message pair, which processes a transaction.
        /// </summary>
        /// <value>Identification of a message pair, which processes a transaction.</value>
        [DataMember(Name = "ServiceID", EmitDefaultValue = false)]
        public string ServiceID { get; set; }

        /// <summary>
        /// Identification of a device message pair.
        /// </summary>
        /// <value>Identification of a device message pair.</value>
        [DataMember(Name = "DeviceID", EmitDefaultValue = false)]
        public string DeviceID { get; set; }

        /// <summary>
        /// default MessageHeader.SaleID.
        /// </summary>
        /// <value>default MessageHeader.SaleID.</value>
        [DataMember(Name = "SaleID", EmitDefaultValue = false)]
        public string SaleID { get; set; }

        /// <summary>
        /// default MessageHeader.POIID.
        /// </summary>
        /// <value>default MessageHeader.POIID.</value>
        [DataMember(Name = "POIID", EmitDefaultValue = false)]
        public string POIID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageReference {\n");
            sb.Append("  MessageCategory: ").Append(MessageCategory).Append("\n");
            sb.Append("  ServiceID: ").Append(ServiceID).Append("\n");
            sb.Append("  DeviceID: ").Append(DeviceID).Append("\n");
            sb.Append("  SaleID: ").Append(SaleID).Append("\n");
            sb.Append("  POIID: ").Append(POIID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageReference);
        }

        /// <summary>
        /// Returns true if MessageReference instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MessageCategory == input.MessageCategory ||
                    this.MessageCategory.Equals(input.MessageCategory)
                ) && 
                (
                    this.ServiceID == input.ServiceID ||
                    (this.ServiceID != null &&
                    this.ServiceID.Equals(input.ServiceID))
                ) && 
                (
                    this.DeviceID == input.DeviceID ||
                    (this.DeviceID != null &&
                    this.DeviceID.Equals(input.DeviceID))
                ) && 
                (
                    this.SaleID == input.SaleID ||
                    (this.SaleID != null &&
                    this.SaleID.Equals(input.SaleID))
                ) && 
                (
                    this.POIID == input.POIID ||
                    (this.POIID != null &&
                    this.POIID.Equals(input.POIID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MessageCategory.GetHashCode();
                if (this.ServiceID != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceID.GetHashCode();
                }
                if (this.DeviceID != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceID.GetHashCode();
                }
                if (this.SaleID != null)
                {
                    hashCode = (hashCode * 59) + this.SaleID.GetHashCode();
                }
                if (this.POIID != null)
                {
                    hashCode = (hashCode * 59) + this.POIID.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ServiceID (string) pattern
            Regex regexServiceID = new Regex(@"^.{1,10}$", RegexOptions.CultureInvariant);
            if (false == regexServiceID.Match(this.ServiceID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceID, must match a pattern of " + regexServiceID, new [] { "ServiceID" });
            }

            // DeviceID (string) pattern
            Regex regexDeviceID = new Regex(@"^.{1,10}$", RegexOptions.CultureInvariant);
            if (false == regexDeviceID.Match(this.DeviceID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeviceID, must match a pattern of " + regexDeviceID, new [] { "DeviceID" });
            }

            // SaleID (string) pattern
            Regex regexSaleID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexSaleID.Match(this.SaleID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaleID, must match a pattern of " + regexSaleID, new [] { "SaleID" });
            }

            // POIID (string) pattern
            Regex regexPOIID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexPOIID.Match(this.POIID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for POIID, must match a pattern of " + regexPOIID, new [] { "POIID" });
            }

            yield break;
        }
    }

}
