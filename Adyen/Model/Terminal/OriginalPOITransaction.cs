/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// In the Payment or the Loyalty Request message, it allows using the card of a previous CardAcquisition or Payment/Loyalty request. Identification of a previous POI transaction.
    /// </summary>
    [DataContract(Name = "OriginalPOITransaction")]
    public partial class OriginalPOITransaction : IEquatable<OriginalPOITransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OriginalPOITransaction" /> class.
        /// </summary>
        /// <param name="saleID">Identification of a Sale System or a Sale Terminal for the Sale to POI protocol..</param>
        /// <param name="pOIID">If original transaction is coming from another POI..</param>
        /// <param name="pOITransactionID">pOITransactionID.</param>
        /// <param name="reuseCardDataFlag">Indicate if the card data has to be got from a previous transaction. (default to true).</param>
        /// <param name="approvalCode">If referral..</param>
        /// <param name="customerLanguage">If the language is selected by the Sale System before the request to the POI..</param>
        /// <param name="acquirerID">Restrict to these Acquirer if present..</param>
        /// <param name="amountValue">amountValue.</param>
        /// <param name="hostTransactionID">hostTransactionID.</param>
        public OriginalPOITransaction(string saleID = default(string), string pOIID = default(string), TransactionIDType pOITransactionID = default(TransactionIDType), bool? reuseCardDataFlag = true, string approvalCode = default(string), string customerLanguage = default(string), int? acquirerID = default(int?), decimal? amountValue = default(decimal?), TransactionIDType hostTransactionID = default(TransactionIDType))
        {
            this.SaleID = saleID;
            this.POIID = pOIID;
            this.POITransactionID = pOITransactionID;
            this.ReuseCardDataFlag = reuseCardDataFlag;
            this.ApprovalCode = approvalCode;
            this.CustomerLanguage = customerLanguage;
            this.AcquirerID = acquirerID;
            this.AmountValue = amountValue;
            this.HostTransactionID = hostTransactionID;
        }

        /// <summary>
        /// Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.
        /// </summary>
        /// <value>Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.</value>
        [DataMember(Name = "SaleID", EmitDefaultValue = false)]
        public string SaleID { get; set; }

        /// <summary>
        /// If original transaction is coming from another POI.
        /// </summary>
        /// <value>If original transaction is coming from another POI.</value>
        [DataMember(Name = "POIID", EmitDefaultValue = false)]
        public string POIID { get; set; }

        /// <summary>
        /// Gets or Sets POITransactionID
        /// </summary>
        [DataMember(Name = "POITransactionID", EmitDefaultValue = false)]
        public TransactionIDType POITransactionID { get; set; }

        /// <summary>
        /// Indicate if the card data has to be got from a previous transaction.
        /// </summary>
        /// <value>Indicate if the card data has to be got from a previous transaction.</value>
        [DataMember(Name = "ReuseCardDataFlag", EmitDefaultValue = false)]
        public bool? ReuseCardDataFlag { get; set; }

        /// <summary>
        /// If referral.
        /// </summary>
        /// <value>If referral.</value>
        [DataMember(Name = "ApprovalCode", EmitDefaultValue = false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// If the language is selected by the Sale System before the request to the POI.
        /// </summary>
        /// <value>If the language is selected by the Sale System before the request to the POI.</value>
        [DataMember(Name = "CustomerLanguage", EmitDefaultValue = false)]
        public string CustomerLanguage { get; set; }

        /// <summary>
        /// Restrict to these Acquirer if present.
        /// </summary>
        /// <value>Restrict to these Acquirer if present.</value>
        [DataMember(Name = "AcquirerID", EmitDefaultValue = false)]
        public int? AcquirerID { get; set; }

        /// <summary>
        /// Gets or Sets AmountValue
        /// </summary>
        [DataMember(Name = "AmountValue", EmitDefaultValue = false)]
        public decimal? AmountValue { get; set; }

        /// <summary>
        /// Gets or Sets HostTransactionID
        /// </summary>
        [DataMember(Name = "HostTransactionID", EmitDefaultValue = false)]
        public TransactionIDType HostTransactionID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OriginalPOITransaction {\n");
            sb.Append("  SaleID: ").Append(SaleID).Append("\n");
            sb.Append("  POIID: ").Append(POIID).Append("\n");
            sb.Append("  POITransactionID: ").Append(POITransactionID).Append("\n");
            sb.Append("  ReuseCardDataFlag: ").Append(ReuseCardDataFlag).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  CustomerLanguage: ").Append(CustomerLanguage).Append("\n");
            sb.Append("  AcquirerID: ").Append(AcquirerID).Append("\n");
            sb.Append("  AmountValue: ").Append(AmountValue).Append("\n");
            sb.Append("  HostTransactionID: ").Append(HostTransactionID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OriginalPOITransaction);
        }

        /// <summary>
        /// Returns true if OriginalPOITransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of OriginalPOITransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OriginalPOITransaction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SaleID == input.SaleID ||
                    (this.SaleID != null &&
                    this.SaleID.Equals(input.SaleID))
                ) && 
                (
                    this.POIID == input.POIID ||
                    (this.POIID != null &&
                    this.POIID.Equals(input.POIID))
                ) && 
                (
                    this.POITransactionID == input.POITransactionID ||
                    (this.POITransactionID != null &&
                    this.POITransactionID.Equals(input.POITransactionID))
                ) && 
                (
                    this.ReuseCardDataFlag == input.ReuseCardDataFlag ||
                    this.ReuseCardDataFlag.Equals(input.ReuseCardDataFlag)
                ) && 
                (
                    this.ApprovalCode == input.ApprovalCode ||
                    (this.ApprovalCode != null &&
                    this.ApprovalCode.Equals(input.ApprovalCode))
                ) && 
                (
                    this.CustomerLanguage == input.CustomerLanguage ||
                    (this.CustomerLanguage != null &&
                    this.CustomerLanguage.Equals(input.CustomerLanguage))
                ) && 
                (
                    this.AcquirerID == input.AcquirerID ||
                    this.AcquirerID.Equals(input.AcquirerID)
                ) && 
                (
                    this.AmountValue == input.AmountValue ||
                    this.AmountValue.Equals(input.AmountValue)
                ) && 
                (
                    this.HostTransactionID == input.HostTransactionID ||
                    (this.HostTransactionID != null &&
                    this.HostTransactionID.Equals(input.HostTransactionID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SaleID != null)
                {
                    hashCode = (hashCode * 59) + this.SaleID.GetHashCode();
                }
                if (this.POIID != null)
                {
                    hashCode = (hashCode * 59) + this.POIID.GetHashCode();
                }
                if (this.POITransactionID != null)
                {
                    hashCode = (hashCode * 59) + this.POITransactionID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReuseCardDataFlag.GetHashCode();
                if (this.ApprovalCode != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalCode.GetHashCode();
                }
                if (this.CustomerLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerLanguage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AcquirerID.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountValue.GetHashCode();
                if (this.HostTransactionID != null)
                {
                    hashCode = (hashCode * 59) + this.HostTransactionID.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SaleID (string) pattern
            Regex regexSaleID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexSaleID.Match(this.SaleID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaleID, must match a pattern of " + regexSaleID, new [] { "SaleID" });
            }

            // POIID (string) pattern
            Regex regexPOIID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexPOIID.Match(this.POIID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for POIID, must match a pattern of " + regexPOIID, new [] { "POIID" });
            }

            // ApprovalCode (string) pattern
            Regex regexApprovalCode = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexApprovalCode.Match(this.ApprovalCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApprovalCode, must match a pattern of " + regexApprovalCode, new [] { "ApprovalCode" });
            }

            // CustomerLanguage (string) pattern
            Regex regexCustomerLanguage = new Regex(@"^[a-z]{2,2}$", RegexOptions.CultureInvariant);
            if (false == regexCustomerLanguage.Match(this.CustomerLanguage).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerLanguage, must match a pattern of " + regexCustomerLanguage, new [] { "CustomerLanguage" });
            }

            // AmountValue (decimal) maximum
            if (this.AmountValue > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmountValue, must be a value less than or equal to 99999999.999999.", new [] { "AmountValue" });
            }

            // AmountValue (decimal) minimum
            if (this.AmountValue < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmountValue, must be a value greater than or equal to 0.0.", new [] { "AmountValue" });
            }

            yield break;
        }
    }

}
