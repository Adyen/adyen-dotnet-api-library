/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys Information related to the Reconciliation requested by the Sale System. Content of the Reconciliation Request message.
    /// </summary>
    [DataContract(Name = "ReconciliationRequest")]
    public partial class ReconciliationRequest : IEquatable<ReconciliationRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ReconciliationType
        /// </summary>
        [DataMember(Name = "ReconciliationType", IsRequired = false, EmitDefaultValue = false)]
        public ReconciliationType ReconciliationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReconciliationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationRequest" /> class.
        /// </summary>
        /// <param name="reconciliationType">reconciliationType (required).</param>
        /// <param name="acquirerID">acquirerID.</param>
        /// <param name="pOIReconciliationID">Absent if ReconciliationType is not PreviousReconciliation..</param>
        public ReconciliationRequest(ReconciliationType reconciliationType = default(ReconciliationType), List<int> acquirerID = default(List<int>), int? pOIReconciliationID = default(int?))
        {
            this.ReconciliationType = reconciliationType;
            this.AcquirerID = acquirerID;
            this.POIReconciliationID = pOIReconciliationID;
        }

        /// <summary>
        /// Gets or Sets AcquirerID
        /// </summary>
        [DataMember(Name = "AcquirerID", EmitDefaultValue = false)]
        public List<int> AcquirerID { get; set; }

        /// <summary>
        /// Absent if ReconciliationType is not PreviousReconciliation.
        /// </summary>
        /// <value>Absent if ReconciliationType is not PreviousReconciliation.</value>
        [DataMember(Name = "POIReconciliationID", EmitDefaultValue = false)]
        public int? POIReconciliationID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReconciliationRequest {\n");
            sb.Append("  ReconciliationType: ").Append(ReconciliationType).Append("\n");
            sb.Append("  AcquirerID: ").Append(AcquirerID).Append("\n");
            sb.Append("  POIReconciliationID: ").Append(POIReconciliationID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReconciliationRequest);
        }

        /// <summary>
        /// Returns true if ReconciliationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReconciliationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReconciliationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReconciliationType == input.ReconciliationType ||
                    this.ReconciliationType.Equals(input.ReconciliationType)
                ) && 
                (
                    this.AcquirerID == input.AcquirerID ||
                    this.AcquirerID != null &&
                    input.AcquirerID != null &&
                    this.AcquirerID.SequenceEqual(input.AcquirerID)
                ) && 
                (
                    this.POIReconciliationID == input.POIReconciliationID ||
                    this.POIReconciliationID.Equals(input.POIReconciliationID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ReconciliationType.GetHashCode();
                if (this.AcquirerID != null)
                {
                    hashCode = (hashCode * 59) + this.AcquirerID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.POIReconciliationID.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
