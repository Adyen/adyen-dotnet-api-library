/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// In the Payment, Loyalty or Balance Inquiry Request message, it allows the Sale Terminal to send the identification of the loyalty account or an awarded amount or an amount to redeem to the loyalty account. Data related to a Loyalty program or account.
    /// </summary>
    [DataContract(Name = "LoyaltyData")]
    public partial class LoyaltyData : IEquatable<LoyaltyData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyData" /> class.
        /// </summary>
        /// <param name="cardAcquisitionReference">cardAcquisitionReference.</param>
        /// <param name="loyaltyAccountID">loyaltyAccountID.</param>
        /// <param name="loyaltyAmount">loyaltyAmount.</param>
        public LoyaltyData(TransactionIDType cardAcquisitionReference = default(TransactionIDType), LoyaltyAccountID loyaltyAccountID = default(LoyaltyAccountID), LoyaltyAmount loyaltyAmount = default(LoyaltyAmount))
        {
            this.CardAcquisitionReference = cardAcquisitionReference;
            this.LoyaltyAccountID = loyaltyAccountID;
            this.LoyaltyAmount = loyaltyAmount;
        }

        /// <summary>
        /// Gets or Sets CardAcquisitionReference
        /// </summary>
        [DataMember(Name = "CardAcquisitionReference", EmitDefaultValue = false)]
        public TransactionIDType CardAcquisitionReference { get; set; }

        /// <summary>
        /// Gets or Sets LoyaltyAccountID
        /// </summary>
        [DataMember(Name = "LoyaltyAccountID", EmitDefaultValue = false)]
        public LoyaltyAccountID LoyaltyAccountID { get; set; }

        /// <summary>
        /// Gets or Sets LoyaltyAmount
        /// </summary>
        [DataMember(Name = "LoyaltyAmount", EmitDefaultValue = false)]
        public LoyaltyAmount LoyaltyAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyData {\n");
            sb.Append("  CardAcquisitionReference: ").Append(CardAcquisitionReference).Append("\n");
            sb.Append("  LoyaltyAccountID: ").Append(LoyaltyAccountID).Append("\n");
            sb.Append("  LoyaltyAmount: ").Append(LoyaltyAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoyaltyData);
        }

        /// <summary>
        /// Returns true if LoyaltyData instances are equal
        /// </summary>
        /// <param name="input">Instance of LoyaltyData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CardAcquisitionReference == input.CardAcquisitionReference ||
                    (this.CardAcquisitionReference != null &&
                    this.CardAcquisitionReference.Equals(input.CardAcquisitionReference))
                ) && 
                (
                    this.LoyaltyAccountID == input.LoyaltyAccountID ||
                    (this.LoyaltyAccountID != null &&
                    this.LoyaltyAccountID.Equals(input.LoyaltyAccountID))
                ) && 
                (
                    this.LoyaltyAmount == input.LoyaltyAmount ||
                    (this.LoyaltyAmount != null &&
                    this.LoyaltyAmount.Equals(input.LoyaltyAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardAcquisitionReference != null)
                {
                    hashCode = (hashCode * 59) + this.CardAcquisitionReference.GetHashCode();
                }
                if (this.LoyaltyAccountID != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyAccountID.GetHashCode();
                }
                if (this.LoyaltyAmount != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyAmount.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
