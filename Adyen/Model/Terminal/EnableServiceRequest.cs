/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys the services that will be enabled for the  POI Terminal without the request of the Sale System, and a possible invitation for the Customer to start the services. Content of the Enable Service Request message.
    /// </summary>
    [DataContract(Name = "EnableServiceRequest")]
    public partial class EnableServiceRequest : IEquatable<EnableServiceRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TransactionAction
        /// </summary>
        [DataMember(Name = "TransactionAction", IsRequired = false, EmitDefaultValue = false)]
        public TransactionAction TransactionAction { get; set; }
        /// <summary>
        /// Defines ServicesEnabled
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServicesEnabledEnum
        {
            /// <summary>
            /// Enum CardAcquisition for value: CardAcquisition
            /// </summary>
            [EnumMember(Value = "CardAcquisition")]
            CardAcquisition = 1,

            /// <summary>
            /// Enum Loyalty for value: Loyalty
            /// </summary>
            [EnumMember(Value = "Loyalty")]
            Loyalty = 2,

            /// <summary>
            /// Enum Payment for value: Payment
            /// </summary>
            [EnumMember(Value = "Payment")]
            Payment = 3

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnableServiceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnableServiceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnableServiceRequest" /> class.
        /// </summary>
        /// <param name="transactionAction">transactionAction (required).</param>
        /// <param name="servicesEnabled">servicesEnabled.</param>
        /// <param name="displayOutput">displayOutput.</param>
        public EnableServiceRequest(TransactionAction transactionAction = default(TransactionAction), List<ServicesEnabledEnum> servicesEnabled = default(List<ServicesEnabledEnum>), DisplayOutput displayOutput = default(DisplayOutput))
        {
            this.TransactionAction = transactionAction;
            this.ServicesEnabled = servicesEnabled;
            this.DisplayOutput = displayOutput;
        }

        /// <summary>
        /// Gets or Sets ServicesEnabled
        /// </summary>
        [DataMember(Name = "ServicesEnabled", EmitDefaultValue = false)]
        public List<EnableServiceRequest.ServicesEnabledEnum> ServicesEnabled { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOutput
        /// </summary>
        [DataMember(Name = "DisplayOutput", EmitDefaultValue = false)]
        public DisplayOutput DisplayOutput { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnableServiceRequest {\n");
            sb.Append("  TransactionAction: ").Append(TransactionAction).Append("\n");
            sb.Append("  ServicesEnabled: ").Append(ServicesEnabled).Append("\n");
            sb.Append("  DisplayOutput: ").Append(DisplayOutput).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnableServiceRequest);
        }

        /// <summary>
        /// Returns true if EnableServiceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EnableServiceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnableServiceRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionAction == input.TransactionAction ||
                    this.TransactionAction.Equals(input.TransactionAction)
                ) && 
                (
                    this.ServicesEnabled == input.ServicesEnabled ||
                    this.ServicesEnabled != null &&
                    input.ServicesEnabled != null &&
                    this.ServicesEnabled.SequenceEqual(input.ServicesEnabled)
                ) && 
                (
                    this.DisplayOutput == input.DisplayOutput ||
                    (this.DisplayOutput != null &&
                    this.DisplayOutput.Equals(input.DisplayOutput))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TransactionAction.GetHashCode();
                if (this.ServicesEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.ServicesEnabled.GetHashCode();
                }
                if (this.DisplayOutput != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayOutput.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
