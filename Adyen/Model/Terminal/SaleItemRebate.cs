/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// To be differentiated from the award which is the amount or quantity earned on the loyalty account. The awarded amount that is attached to an item as a rebate.
    /// </summary>
    [DataContract(Name = "SaleItemRebate")]
    public partial class SaleItemRebate : IEquatable<SaleItemRebate>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets UnitOfMeasure
        /// </summary>
        [DataMember(Name = "UnitOfMeasure", EmitDefaultValue = false)]
        public UnitOfMeasure? UnitOfMeasure { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SaleItemRebate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SaleItemRebate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SaleItemRebate" /> class.
        /// </summary>
        /// <param name="itemID">Item identification inside a transaction (0 to n). (required).</param>
        /// <param name="productCode">Product code of item purchased with the transaction. (required).</param>
        /// <param name="eanUpc">eanUpc.</param>
        /// <param name="unitOfMeasure">unitOfMeasure.</param>
        /// <param name="quantity">if rebate is additional units..</param>
        /// <param name="itemAmount">if rebate on the line item amount..</param>
        /// <param name="rebateLabel">If provided by the Acquirer..</param>
        public SaleItemRebate(int? itemID = default(int?), int? productCode = default(int?), int? eanUpc = default(int?), UnitOfMeasure? unitOfMeasure = default(UnitOfMeasure?), string quantity = default(string), decimal? itemAmount = default(decimal?), string rebateLabel = default(string))
        {
            this.ItemID = itemID;
            this.ProductCode = productCode;
            this.EanUpc = eanUpc;
            this.UnitOfMeasure = unitOfMeasure;
            this.Quantity = quantity;
            this.ItemAmount = itemAmount;
            this.RebateLabel = rebateLabel;
        }

        /// <summary>
        /// Item identification inside a transaction (0 to n).
        /// </summary>
        /// <value>Item identification inside a transaction (0 to n).</value>
        [DataMember(Name = "ItemID", IsRequired = false, EmitDefaultValue = false)]
        public int? ItemID { get; set; }

        /// <summary>
        /// Product code of item purchased with the transaction.
        /// </summary>
        /// <value>Product code of item purchased with the transaction.</value>
        [DataMember(Name = "ProductCode", IsRequired = false, EmitDefaultValue = false)]
        public int? ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets EanUpc
        /// </summary>
        [DataMember(Name = "EanUpc", EmitDefaultValue = false)]
        public int? EanUpc { get; set; }

        /// <summary>
        /// if rebate is additional units.
        /// </summary>
        /// <value>if rebate is additional units.</value>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public string Quantity { get; set; }

        /// <summary>
        /// if rebate on the line item amount.
        /// </summary>
        /// <value>if rebate on the line item amount.</value>
        [DataMember(Name = "ItemAmount", EmitDefaultValue = false)]
        public decimal? ItemAmount { get; set; }

        /// <summary>
        /// If provided by the Acquirer.
        /// </summary>
        /// <value>If provided by the Acquirer.</value>
        [DataMember(Name = "RebateLabel", EmitDefaultValue = false)]
        public string RebateLabel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SaleItemRebate {\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  EanUpc: ").Append(EanUpc).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ItemAmount: ").Append(ItemAmount).Append("\n");
            sb.Append("  RebateLabel: ").Append(RebateLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SaleItemRebate);
        }

        /// <summary>
        /// Returns true if SaleItemRebate instances are equal
        /// </summary>
        /// <param name="input">Instance of SaleItemRebate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SaleItemRebate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ItemID == input.ItemID ||
                    this.ItemID.Equals(input.ItemID)
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    this.ProductCode.Equals(input.ProductCode)
                ) && 
                (
                    this.EanUpc == input.EanUpc ||
                    this.EanUpc.Equals(input.EanUpc)
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.ItemAmount == input.ItemAmount ||
                    this.ItemAmount.Equals(input.ItemAmount)
                ) && 
                (
                    this.RebateLabel == input.RebateLabel ||
                    (this.RebateLabel != null &&
                    this.RebateLabel.Equals(input.RebateLabel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ItemID.GetHashCode();
                hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                hashCode = (hashCode * 59) + this.EanUpc.GetHashCode();
                hashCode = (hashCode * 59) + this.UnitOfMeasure.GetHashCode();
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ItemAmount.GetHashCode();
                if (this.RebateLabel != null)
                {
                    hashCode = (hashCode * 59) + this.RebateLabel.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ProductCode (int) maximum
            if (this.ProductCode > (int)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, must be a value less than or equal to 20.", new [] { "ProductCode" });
            }

            // ProductCode (int) minimum
            if (this.ProductCode < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, must be a value greater than or equal to 1.", new [] { "ProductCode" });
            }

            // ItemAmount (decimal) maximum
            if (this.ItemAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ItemAmount, must be a value less than or equal to 99999999.999999.", new [] { "ItemAmount" });
            }

            // ItemAmount (decimal) minimum
            if (this.ItemAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ItemAmount, must be a value greater than or equal to 0.0.", new [] { "ItemAmount" });
            }

            // RebateLabel (string) pattern
            Regex regexRebateLabel = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexRebateLabel.Match(this.RebateLabel).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RebateLabel, must match a pattern of " + regexRebateLabel, new [] { "RebateLabel" });
            }

            yield break;
        }
    }

}
