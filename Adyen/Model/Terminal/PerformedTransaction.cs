/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// PerformedTransaction
    /// </summary>
    [DataContract(Name = "PerformedTransaction")]
    public partial class PerformedTransaction : IEquatable<PerformedTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformedTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PerformedTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformedTransaction" /> class.
        /// </summary>
        /// <param name="response">response (required).</param>
        /// <param name="saleData">saleData.</param>
        /// <param name="pOIData">pOIData.</param>
        /// <param name="paymentResult">paymentResult.</param>
        /// <param name="loyaltyResult">loyaltyResult.</param>
        /// <param name="reversedAmount">reversedAmount.</param>
        public PerformedTransaction(Response response = default(Response), SaleData saleData = default(SaleData), POIData pOIData = default(POIData), PaymentResult paymentResult = default(PaymentResult), List<LoyaltyResult> loyaltyResult = default(List<LoyaltyResult>), decimal? reversedAmount = default(decimal?))
        {
            this.Response = response;
            this.SaleData = saleData;
            this.POIData = pOIData;
            this.PaymentResult = paymentResult;
            this.LoyaltyResult = loyaltyResult;
            this.ReversedAmount = reversedAmount;
        }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name = "Response", IsRequired = false, EmitDefaultValue = false)]
        public Response Response { get; set; }

        /// <summary>
        /// Gets or Sets SaleData
        /// </summary>
        [DataMember(Name = "SaleData", EmitDefaultValue = false)]
        public SaleData SaleData { get; set; }

        /// <summary>
        /// Gets or Sets POIData
        /// </summary>
        [DataMember(Name = "POIData", EmitDefaultValue = false)]
        public POIData POIData { get; set; }

        /// <summary>
        /// Gets or Sets PaymentResult
        /// </summary>
        [DataMember(Name = "PaymentResult", EmitDefaultValue = false)]
        public PaymentResult PaymentResult { get; set; }

        /// <summary>
        /// Gets or Sets LoyaltyResult
        /// </summary>
        [DataMember(Name = "LoyaltyResult", EmitDefaultValue = false)]
        public List<LoyaltyResult> LoyaltyResult { get; set; }

        /// <summary>
        /// Gets or Sets ReversedAmount
        /// </summary>
        [DataMember(Name = "ReversedAmount", EmitDefaultValue = false)]
        public decimal? ReversedAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PerformedTransaction {\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  SaleData: ").Append(SaleData).Append("\n");
            sb.Append("  POIData: ").Append(POIData).Append("\n");
            sb.Append("  PaymentResult: ").Append(PaymentResult).Append("\n");
            sb.Append("  LoyaltyResult: ").Append(LoyaltyResult).Append("\n");
            sb.Append("  ReversedAmount: ").Append(ReversedAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerformedTransaction);
        }

        /// <summary>
        /// Returns true if PerformedTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of PerformedTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformedTransaction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                ) && 
                (
                    this.SaleData == input.SaleData ||
                    (this.SaleData != null &&
                    this.SaleData.Equals(input.SaleData))
                ) && 
                (
                    this.POIData == input.POIData ||
                    (this.POIData != null &&
                    this.POIData.Equals(input.POIData))
                ) && 
                (
                    this.PaymentResult == input.PaymentResult ||
                    (this.PaymentResult != null &&
                    this.PaymentResult.Equals(input.PaymentResult))
                ) && 
                (
                    this.LoyaltyResult == input.LoyaltyResult ||
                    this.LoyaltyResult != null &&
                    input.LoyaltyResult != null &&
                    this.LoyaltyResult.SequenceEqual(input.LoyaltyResult)
                ) && 
                (
                    this.ReversedAmount == input.ReversedAmount ||
                    this.ReversedAmount.Equals(input.ReversedAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Response != null)
                {
                    hashCode = (hashCode * 59) + this.Response.GetHashCode();
                }
                if (this.SaleData != null)
                {
                    hashCode = (hashCode * 59) + this.SaleData.GetHashCode();
                }
                if (this.POIData != null)
                {
                    hashCode = (hashCode * 59) + this.POIData.GetHashCode();
                }
                if (this.PaymentResult != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentResult.GetHashCode();
                }
                if (this.LoyaltyResult != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyResult.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReversedAmount.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ReversedAmount (decimal) maximum
            if (this.ReversedAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReversedAmount, must be a value less than or equal to 99999999.999999.", new [] { "ReversedAmount" });
            }

            // ReversedAmount (decimal) minimum
            if (this.ReversedAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReversedAmount, must be a value greater than or equal to 0.0.", new [] { "ReversedAmount" });
            }

            yield break;
        }
    }

}
