/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Mobile phone is used as a payment instrument for the transaction. Information related to the mobile for the payment transaction.
    /// </summary>
    [DataContract(Name = "MobileData")]
    public partial class MobileData : IEquatable<MobileData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MobileData" /> class.
        /// </summary>
        /// <param name="mobileCountryCode">If data available..</param>
        /// <param name="mobileNetworkCode">If data available..</param>
        /// <param name="maskedMSISDN">If data available..</param>
        /// <param name="geolocation">geolocation.</param>
        /// <param name="protectedMobileData">SensitiveMobileData..</param>
        /// <param name="sensitiveMobileData">sensitiveMobileData.</param>
        public MobileData(int? mobileCountryCode = default(int?), int? mobileNetworkCode = default(int?), int? maskedMSISDN = default(int?), Geolocation geolocation = default(Geolocation), string protectedMobileData = default(string), SensitiveMobileData sensitiveMobileData = default(SensitiveMobileData))
        {
            this.MobileCountryCode = mobileCountryCode;
            this.MobileNetworkCode = mobileNetworkCode;
            this.MaskedMSISDN = maskedMSISDN;
            this.Geolocation = geolocation;
            this.ProtectedMobileData = protectedMobileData;
            this.SensitiveMobileData = sensitiveMobileData;
        }

        /// <summary>
        /// If data available.
        /// </summary>
        /// <value>If data available.</value>
        [DataMember(Name = "MobileCountryCode", EmitDefaultValue = false)]
        public int? MobileCountryCode { get; set; }

        /// <summary>
        /// If data available.
        /// </summary>
        /// <value>If data available.</value>
        [DataMember(Name = "MobileNetworkCode", EmitDefaultValue = false)]
        public int? MobileNetworkCode { get; set; }

        /// <summary>
        /// If data available.
        /// </summary>
        /// <value>If data available.</value>
        [DataMember(Name = "MaskedMSISDN", EmitDefaultValue = false)]
        public int? MaskedMSISDN { get; set; }

        /// <summary>
        /// Gets or Sets Geolocation
        /// </summary>
        [DataMember(Name = "Geolocation", EmitDefaultValue = false)]
        public Geolocation Geolocation { get; set; }

        /// <summary>
        /// SensitiveMobileData.
        /// </summary>
        /// <value>SensitiveMobileData.</value>
        [DataMember(Name = "ProtectedMobileData", EmitDefaultValue = false)]
        public string ProtectedMobileData { get; set; }

        /// <summary>
        /// Gets or Sets SensitiveMobileData
        /// </summary>
        [DataMember(Name = "SensitiveMobileData", EmitDefaultValue = false)]
        public SensitiveMobileData SensitiveMobileData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MobileData {\n");
            sb.Append("  MobileCountryCode: ").Append(MobileCountryCode).Append("\n");
            sb.Append("  MobileNetworkCode: ").Append(MobileNetworkCode).Append("\n");
            sb.Append("  MaskedMSISDN: ").Append(MaskedMSISDN).Append("\n");
            sb.Append("  Geolocation: ").Append(Geolocation).Append("\n");
            sb.Append("  ProtectedMobileData: ").Append(ProtectedMobileData).Append("\n");
            sb.Append("  SensitiveMobileData: ").Append(SensitiveMobileData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MobileData);
        }

        /// <summary>
        /// Returns true if MobileData instances are equal
        /// </summary>
        /// <param name="input">Instance of MobileData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MobileData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MobileCountryCode == input.MobileCountryCode ||
                    this.MobileCountryCode.Equals(input.MobileCountryCode)
                ) && 
                (
                    this.MobileNetworkCode == input.MobileNetworkCode ||
                    this.MobileNetworkCode.Equals(input.MobileNetworkCode)
                ) && 
                (
                    this.MaskedMSISDN == input.MaskedMSISDN ||
                    this.MaskedMSISDN.Equals(input.MaskedMSISDN)
                ) && 
                (
                    this.Geolocation == input.Geolocation ||
                    (this.Geolocation != null &&
                    this.Geolocation.Equals(input.Geolocation))
                ) && 
                (
                    this.ProtectedMobileData == input.ProtectedMobileData ||
                    (this.ProtectedMobileData != null &&
                    this.ProtectedMobileData.Equals(input.ProtectedMobileData))
                ) && 
                (
                    this.SensitiveMobileData == input.SensitiveMobileData ||
                    (this.SensitiveMobileData != null &&
                    this.SensitiveMobileData.Equals(input.SensitiveMobileData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MobileCountryCode.GetHashCode();
                hashCode = (hashCode * 59) + this.MobileNetworkCode.GetHashCode();
                hashCode = (hashCode * 59) + this.MaskedMSISDN.GetHashCode();
                if (this.Geolocation != null)
                {
                    hashCode = (hashCode * 59) + this.Geolocation.GetHashCode();
                }
                if (this.ProtectedMobileData != null)
                {
                    hashCode = (hashCode * 59) + this.ProtectedMobileData.GetHashCode();
                }
                if (this.SensitiveMobileData != null)
                {
                    hashCode = (hashCode * 59) + this.SensitiveMobileData.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // MobileCountryCode (int) maximum
            if (this.MobileCountryCode > (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MobileCountryCode, must be a value less than or equal to 3.", new [] { "MobileCountryCode" });
            }

            // MobileCountryCode (int) minimum
            if (this.MobileCountryCode < (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MobileCountryCode, must be a value greater than or equal to 3.", new [] { "MobileCountryCode" });
            }

            // MobileNetworkCode (int) maximum
            if (this.MobileNetworkCode > (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MobileNetworkCode, must be a value less than or equal to 3.", new [] { "MobileNetworkCode" });
            }

            // MobileNetworkCode (int) minimum
            if (this.MobileNetworkCode < (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MobileNetworkCode, must be a value greater than or equal to 2.", new [] { "MobileNetworkCode" });
            }

            yield break;
        }
    }

}
