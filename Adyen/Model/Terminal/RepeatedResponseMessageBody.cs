/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// RepeatedResponseMessageBody
    /// </summary>
    [DataContract(Name = "RepeatedResponseMessageBody")]
    public partial class RepeatedResponseMessageBody : IEquatable<RepeatedResponseMessageBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RepeatedResponseMessageBody" /> class.
        /// </summary>
        /// <param name="loyaltyResponse">loyaltyResponse.</param>
        /// <param name="paymentResponse">paymentResponse.</param>
        /// <param name="reversalResponse">reversalResponse.</param>
        /// <param name="storedValueResponse">storedValueResponse.</param>
        /// <param name="cardAcquisitionResponse">cardAcquisitionResponse.</param>
        /// <param name="cardReaderAPDUResponse">cardReaderAPDUResponse.</param>
        public RepeatedResponseMessageBody(LoyaltyResponse loyaltyResponse = default(LoyaltyResponse), PaymentResponse paymentResponse = default(PaymentResponse), ReversalResponse reversalResponse = default(ReversalResponse), StoredValueResponse storedValueResponse = default(StoredValueResponse), CardAcquisitionResponse cardAcquisitionResponse = default(CardAcquisitionResponse), CardReaderAPDUResponse cardReaderAPDUResponse = default(CardReaderAPDUResponse))
        {
            this.LoyaltyResponse = loyaltyResponse;
            this.PaymentResponse = paymentResponse;
            this.ReversalResponse = reversalResponse;
            this.StoredValueResponse = storedValueResponse;
            this.CardAcquisitionResponse = cardAcquisitionResponse;
            this.CardReaderAPDUResponse = cardReaderAPDUResponse;
        }

        /// <summary>
        /// Gets or Sets LoyaltyResponse
        /// </summary>
        [DataMember(Name = "LoyaltyResponse", EmitDefaultValue = false)]
        public LoyaltyResponse LoyaltyResponse { get; set; }

        /// <summary>
        /// Gets or Sets PaymentResponse
        /// </summary>
        [DataMember(Name = "PaymentResponse", EmitDefaultValue = false)]
        public PaymentResponse PaymentResponse { get; set; }

        /// <summary>
        /// Gets or Sets ReversalResponse
        /// </summary>
        [DataMember(Name = "ReversalResponse", EmitDefaultValue = false)]
        public ReversalResponse ReversalResponse { get; set; }

        /// <summary>
        /// Gets or Sets StoredValueResponse
        /// </summary>
        [DataMember(Name = "StoredValueResponse", EmitDefaultValue = false)]
        public StoredValueResponse StoredValueResponse { get; set; }

        /// <summary>
        /// Gets or Sets CardAcquisitionResponse
        /// </summary>
        [DataMember(Name = "CardAcquisitionResponse", EmitDefaultValue = false)]
        public CardAcquisitionResponse CardAcquisitionResponse { get; set; }

        /// <summary>
        /// Gets or Sets CardReaderAPDUResponse
        /// </summary>
        [DataMember(Name = "CardReaderAPDUResponse", EmitDefaultValue = false)]
        public CardReaderAPDUResponse CardReaderAPDUResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RepeatedResponseMessageBody {\n");
            sb.Append("  LoyaltyResponse: ").Append(LoyaltyResponse).Append("\n");
            sb.Append("  PaymentResponse: ").Append(PaymentResponse).Append("\n");
            sb.Append("  ReversalResponse: ").Append(ReversalResponse).Append("\n");
            sb.Append("  StoredValueResponse: ").Append(StoredValueResponse).Append("\n");
            sb.Append("  CardAcquisitionResponse: ").Append(CardAcquisitionResponse).Append("\n");
            sb.Append("  CardReaderAPDUResponse: ").Append(CardReaderAPDUResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RepeatedResponseMessageBody);
        }

        /// <summary>
        /// Returns true if RepeatedResponseMessageBody instances are equal
        /// </summary>
        /// <param name="input">Instance of RepeatedResponseMessageBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RepeatedResponseMessageBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LoyaltyResponse == input.LoyaltyResponse ||
                    (this.LoyaltyResponse != null &&
                    this.LoyaltyResponse.Equals(input.LoyaltyResponse))
                ) && 
                (
                    this.PaymentResponse == input.PaymentResponse ||
                    (this.PaymentResponse != null &&
                    this.PaymentResponse.Equals(input.PaymentResponse))
                ) && 
                (
                    this.ReversalResponse == input.ReversalResponse ||
                    (this.ReversalResponse != null &&
                    this.ReversalResponse.Equals(input.ReversalResponse))
                ) && 
                (
                    this.StoredValueResponse == input.StoredValueResponse ||
                    (this.StoredValueResponse != null &&
                    this.StoredValueResponse.Equals(input.StoredValueResponse))
                ) && 
                (
                    this.CardAcquisitionResponse == input.CardAcquisitionResponse ||
                    (this.CardAcquisitionResponse != null &&
                    this.CardAcquisitionResponse.Equals(input.CardAcquisitionResponse))
                ) && 
                (
                    this.CardReaderAPDUResponse == input.CardReaderAPDUResponse ||
                    (this.CardReaderAPDUResponse != null &&
                    this.CardReaderAPDUResponse.Equals(input.CardReaderAPDUResponse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoyaltyResponse != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyResponse.GetHashCode();
                }
                if (this.PaymentResponse != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentResponse.GetHashCode();
                }
                if (this.ReversalResponse != null)
                {
                    hashCode = (hashCode * 59) + this.ReversalResponse.GetHashCode();
                }
                if (this.StoredValueResponse != null)
                {
                    hashCode = (hashCode * 59) + this.StoredValueResponse.GetHashCode();
                }
                if (this.CardAcquisitionResponse != null)
                {
                    hashCode = (hashCode * 59) + this.CardAcquisitionResponse.GetHashCode();
                }
                if (this.CardReaderAPDUResponse != null)
                {
                    hashCode = (hashCode * 59) + this.CardReaderAPDUResponse.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
