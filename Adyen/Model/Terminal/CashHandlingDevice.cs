/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Indicate the status and the remaining coins and bill in a cash handling device. Status of cash handling device.
    /// </summary>
    [DataContract(Name = "CashHandlingDevice")]
    public partial class CashHandlingDevice : IEquatable<CashHandlingDevice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CashHandlingDevice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CashHandlingDevice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CashHandlingDevice" /> class.
        /// </summary>
        /// <param name="cashHandlingOKFlag">Indicates if the cash handling device is working and usable. (required).</param>
        /// <param name="currency">Currency of a monetary amount. (required).</param>
        /// <param name="coinsOrBills">coinsOrBills (required).</param>
        public CashHandlingDevice(bool? cashHandlingOKFlag = default(bool?), string currency = default(string), List<CoinsOrBills> coinsOrBills = default(List<CoinsOrBills>))
        {
            this.CashHandlingOKFlag = cashHandlingOKFlag;
            this.Currency = currency;
            this.CoinsOrBills = coinsOrBills;
        }

        /// <summary>
        /// Indicates if the cash handling device is working and usable.
        /// </summary>
        /// <value>Indicates if the cash handling device is working and usable.</value>
        [DataMember(Name = "CashHandlingOKFlag", IsRequired = false, EmitDefaultValue = false)]
        public bool? CashHandlingOKFlag { get; set; }

        /// <summary>
        /// Currency of a monetary amount.
        /// </summary>
        /// <value>Currency of a monetary amount.</value>
        [DataMember(Name = "Currency", IsRequired = false, EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets CoinsOrBills
        /// </summary>
        [DataMember(Name = "CoinsOrBills", IsRequired = false, EmitDefaultValue = false)]
        public List<CoinsOrBills> CoinsOrBills { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CashHandlingDevice {\n");
            sb.Append("  CashHandlingOKFlag: ").Append(CashHandlingOKFlag).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CoinsOrBills: ").Append(CoinsOrBills).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashHandlingDevice);
        }

        /// <summary>
        /// Returns true if CashHandlingDevice instances are equal
        /// </summary>
        /// <param name="input">Instance of CashHandlingDevice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashHandlingDevice input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CashHandlingOKFlag == input.CashHandlingOKFlag ||
                    this.CashHandlingOKFlag.Equals(input.CashHandlingOKFlag)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CoinsOrBills == input.CoinsOrBills ||
                    this.CoinsOrBills != null &&
                    input.CoinsOrBills != null &&
                    this.CoinsOrBills.SequenceEqual(input.CoinsOrBills)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CashHandlingOKFlag.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.CoinsOrBills != null)
                {
                    hashCode = (hashCode * 59) + this.CoinsOrBills.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Currency (string) pattern
            Regex regexCurrency = new Regex(@"^[A-Z]{3,3}$", RegexOptions.CultureInvariant);
            if (false == regexCurrency.Match(this.Currency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, must match a pattern of " + regexCurrency, new [] { "Currency" });
            }

            yield break;
        }
    }

}
