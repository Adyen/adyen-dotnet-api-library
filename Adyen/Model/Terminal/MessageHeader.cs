/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys Information related to the Sale to POI protocol management. Message header of the Sale to POI protocol message.
    /// </summary>
    [DataContract(Name = "MessageHeader")]
    public partial class MessageHeader : IEquatable<MessageHeader>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MessageClass
        /// </summary>
        [DataMember(Name = "MessageClass", IsRequired = false, EmitDefaultValue = false)]
        public MessageClass MessageClass { get; set; }

        /// <summary>
        /// Gets or Sets MessageCategory
        /// </summary>
        [DataMember(Name = "MessageCategory", IsRequired = false, EmitDefaultValue = false)]
        public MessageCategory MessageCategory { get; set; }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "MessageType", IsRequired = false, EmitDefaultValue = false)]
        public MessageType MessageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageHeader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageHeader" /> class.
        /// </summary>
        /// <param name="protocolVersion">If MessageCategory is Login or Diagnosis..</param>
        /// <param name="messageClass">messageClass (required).</param>
        /// <param name="messageCategory">messageCategory (required).</param>
        /// <param name="messageType">messageType (required).</param>
        /// <param name="serviceID">Required if Service or Event MessageClass message or if Device MessageClass and request from POI or response from Sale..</param>
        /// <param name="deviceID">If Device MessageClass..</param>
        /// <param name="saleID">Identification of a Sale System or a Sale Terminal for the Sale to POI protocol. (required).</param>
        /// <param name="pOIID">Identification of a POI System or a POI Terminal for the Sale to POI protocol. (required).</param>
        public MessageHeader(string protocolVersion = default(string), MessageClass messageClass = default(MessageClass), MessageCategory messageCategory = default(MessageCategory), MessageType messageType = default(MessageType), string serviceID = default(string), string deviceID = default(string), string saleID = default(string), string pOIID = default(string))
        {
            this.MessageClass = messageClass;
            this.MessageCategory = messageCategory;
            this.MessageType = messageType;
            this.SaleID = saleID;
            this.POIID = pOIID;
            this.ProtocolVersion = protocolVersion;
            this.ServiceID = serviceID;
            this.DeviceID = deviceID;
        }

        /// <summary>
        /// If MessageCategory is Login or Diagnosis.
        /// </summary>
        /// <value>If MessageCategory is Login or Diagnosis.</value>
        [DataMember(Name = "ProtocolVersion", EmitDefaultValue = false)]
        public string ProtocolVersion { get; set; }

        /// <summary>
        /// Required if Service or Event MessageClass message or if Device MessageClass and request from POI or response from Sale.
        /// </summary>
        /// <value>Required if Service or Event MessageClass message or if Device MessageClass and request from POI or response from Sale.</value>
        [DataMember(Name = "ServiceID", EmitDefaultValue = false)]
        public string ServiceID { get; set; }

        /// <summary>
        /// If Device MessageClass.
        /// </summary>
        /// <value>If Device MessageClass.</value>
        [DataMember(Name = "DeviceID", EmitDefaultValue = false)]
        public string DeviceID { get; set; }

        /// <summary>
        /// Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.
        /// </summary>
        /// <value>Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.</value>
        [DataMember(Name = "SaleID", IsRequired = false, EmitDefaultValue = false)]
        public string SaleID { get; set; }

        /// <summary>
        /// Identification of a POI System or a POI Terminal for the Sale to POI protocol.
        /// </summary>
        /// <value>Identification of a POI System or a POI Terminal for the Sale to POI protocol.</value>
        [DataMember(Name = "POIID", IsRequired = false, EmitDefaultValue = false)]
        public string POIID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageHeader {\n");
            sb.Append("  ProtocolVersion: ").Append(ProtocolVersion).Append("\n");
            sb.Append("  MessageClass: ").Append(MessageClass).Append("\n");
            sb.Append("  MessageCategory: ").Append(MessageCategory).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  ServiceID: ").Append(ServiceID).Append("\n");
            sb.Append("  DeviceID: ").Append(DeviceID).Append("\n");
            sb.Append("  SaleID: ").Append(SaleID).Append("\n");
            sb.Append("  POIID: ").Append(POIID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageHeader);
        }

        /// <summary>
        /// Returns true if MessageHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageHeader input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProtocolVersion == input.ProtocolVersion ||
                    (this.ProtocolVersion != null &&
                    this.ProtocolVersion.Equals(input.ProtocolVersion))
                ) && 
                (
                    this.MessageClass == input.MessageClass ||
                    this.MessageClass.Equals(input.MessageClass)
                ) && 
                (
                    this.MessageCategory == input.MessageCategory ||
                    this.MessageCategory.Equals(input.MessageCategory)
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    this.MessageType.Equals(input.MessageType)
                ) && 
                (
                    this.ServiceID == input.ServiceID ||
                    (this.ServiceID != null &&
                    this.ServiceID.Equals(input.ServiceID))
                ) && 
                (
                    this.DeviceID == input.DeviceID ||
                    (this.DeviceID != null &&
                    this.DeviceID.Equals(input.DeviceID))
                ) && 
                (
                    this.SaleID == input.SaleID ||
                    (this.SaleID != null &&
                    this.SaleID.Equals(input.SaleID))
                ) && 
                (
                    this.POIID == input.POIID ||
                    (this.POIID != null &&
                    this.POIID.Equals(input.POIID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProtocolVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ProtocolVersion.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MessageClass.GetHashCode();
                hashCode = (hashCode * 59) + this.MessageCategory.GetHashCode();
                hashCode = (hashCode * 59) + this.MessageType.GetHashCode();
                if (this.ServiceID != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceID.GetHashCode();
                }
                if (this.DeviceID != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceID.GetHashCode();
                }
                if (this.SaleID != null)
                {
                    hashCode = (hashCode * 59) + this.SaleID.GetHashCode();
                }
                if (this.POIID != null)
                {
                    hashCode = (hashCode * 59) + this.POIID.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ProtocolVersion (string) pattern
            Regex regexProtocolVersion = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexProtocolVersion.Match(this.ProtocolVersion).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProtocolVersion, must match a pattern of " + regexProtocolVersion, new [] { "ProtocolVersion" });
            }

            // ServiceID (string) pattern
            Regex regexServiceID = new Regex(@"^.{1,10}$", RegexOptions.CultureInvariant);
            if (false == regexServiceID.Match(this.ServiceID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceID, must match a pattern of " + regexServiceID, new [] { "ServiceID" });
            }

            // DeviceID (string) pattern
            Regex regexDeviceID = new Regex(@"^.{1,10}$", RegexOptions.CultureInvariant);
            if (false == regexDeviceID.Match(this.DeviceID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeviceID, must match a pattern of " + regexDeviceID, new [] { "DeviceID" });
            }

            // SaleID (string) pattern
            Regex regexSaleID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexSaleID.Match(this.SaleID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaleID, must match a pattern of " + regexSaleID, new [] { "SaleID" });
            }

            // POIID (string) pattern
            Regex regexPOIID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexPOIID.Match(this.POIID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for POIID, must match a pattern of " + regexPOIID, new [] { "POIID" });
            }

            yield break;
        }
    }

}
