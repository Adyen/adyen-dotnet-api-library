/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys Information related to the event, and possible action (maintenance, message to display). Content of the EventNotification message.
    /// </summary>
    [DataContract(Name = "EventNotification")]
    public partial class EventNotification : IEquatable<EventNotification>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EventToNotify
        /// </summary>
        [DataMember(Name = "EventToNotify", IsRequired = false, EmitDefaultValue = false)]
        public EventToNotify EventToNotify { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventNotification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventNotification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventNotification" /> class.
        /// </summary>
        /// <param name="timeStamp">Date and time of a transaction for the Sale System, the POI System or the Acquirer. (required).</param>
        /// <param name="eventToNotify">eventToNotify (required).</param>
        /// <param name="eventDetails">If present, the Sale logs it for further examination..</param>
        /// <param name="rejectedMessage">Mandatory if EventToNotify is Reject, absent in other cases..</param>
        /// <param name="maintenanceRequiredFlag">Indicates if the occurred event requires maintenance call or action. (default to false).</param>
        /// <param name="customerLanguage">If the language is selected by the Sale System before the request to the POI..</param>
        /// <param name="displayOutput">displayOutput.</param>
        public EventNotification(DateTime timeStamp = default(DateTime), EventToNotify eventToNotify = default(EventToNotify), string eventDetails = default(string), byte[] rejectedMessage = default(byte[]), bool? maintenanceRequiredFlag = false, string customerLanguage = default(string), List<DisplayOutput> displayOutput = default(List<DisplayOutput>))
        {
            this.TimeStamp = timeStamp;
            this.EventToNotify = eventToNotify;
            this.EventDetails = eventDetails;
            this.RejectedMessage = rejectedMessage;
            this.MaintenanceRequiredFlag = maintenanceRequiredFlag;
            this.CustomerLanguage = customerLanguage;
            this.DisplayOutput = displayOutput;
        }

        /// <summary>
        /// Date and time of a transaction for the Sale System, the POI System or the Acquirer.
        /// </summary>
        /// <value>Date and time of a transaction for the Sale System, the POI System or the Acquirer.</value>
        [DataMember(Name = "TimeStamp", IsRequired = false, EmitDefaultValue = false)]
        public DateTime TimeStamp { get; set; }

        /// <summary>
        /// If present, the Sale logs it for further examination.
        /// </summary>
        /// <value>If present, the Sale logs it for further examination.</value>
        [DataMember(Name = "EventDetails", EmitDefaultValue = false)]
        public string EventDetails { get; set; }

        /// <summary>
        /// Mandatory if EventToNotify is Reject, absent in other cases.
        /// </summary>
        /// <value>Mandatory if EventToNotify is Reject, absent in other cases.</value>
        [DataMember(Name = "RejectedMessage", EmitDefaultValue = false)]
        public byte[] RejectedMessage { get; set; }

        /// <summary>
        /// Indicates if the occurred event requires maintenance call or action.
        /// </summary>
        /// <value>Indicates if the occurred event requires maintenance call or action.</value>
        [DataMember(Name = "MaintenanceRequiredFlag", EmitDefaultValue = false)]
        public bool? MaintenanceRequiredFlag { get; set; }

        /// <summary>
        /// If the language is selected by the Sale System before the request to the POI.
        /// </summary>
        /// <value>If the language is selected by the Sale System before the request to the POI.</value>
        [DataMember(Name = "CustomerLanguage", EmitDefaultValue = false)]
        public string CustomerLanguage { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOutput
        /// </summary>
        [DataMember(Name = "DisplayOutput", EmitDefaultValue = false)]
        public List<DisplayOutput> DisplayOutput { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventNotification {\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  EventToNotify: ").Append(EventToNotify).Append("\n");
            sb.Append("  EventDetails: ").Append(EventDetails).Append("\n");
            sb.Append("  RejectedMessage: ").Append(RejectedMessage).Append("\n");
            sb.Append("  MaintenanceRequiredFlag: ").Append(MaintenanceRequiredFlag).Append("\n");
            sb.Append("  CustomerLanguage: ").Append(CustomerLanguage).Append("\n");
            sb.Append("  DisplayOutput: ").Append(DisplayOutput).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventNotification);
        }

        /// <summary>
        /// Returns true if EventNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of EventNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventNotification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TimeStamp == input.TimeStamp ||
                    (this.TimeStamp != null &&
                    this.TimeStamp.Equals(input.TimeStamp))
                ) && 
                (
                    this.EventToNotify == input.EventToNotify ||
                    this.EventToNotify.Equals(input.EventToNotify)
                ) && 
                (
                    this.EventDetails == input.EventDetails ||
                    (this.EventDetails != null &&
                    this.EventDetails.Equals(input.EventDetails))
                ) && 
                (
                    this.RejectedMessage == input.RejectedMessage ||
                    (this.RejectedMessage != null &&
                    this.RejectedMessage.Equals(input.RejectedMessage))
                ) && 
                (
                    this.MaintenanceRequiredFlag == input.MaintenanceRequiredFlag ||
                    this.MaintenanceRequiredFlag.Equals(input.MaintenanceRequiredFlag)
                ) && 
                (
                    this.CustomerLanguage == input.CustomerLanguage ||
                    (this.CustomerLanguage != null &&
                    this.CustomerLanguage.Equals(input.CustomerLanguage))
                ) && 
                (
                    this.DisplayOutput == input.DisplayOutput ||
                    this.DisplayOutput != null &&
                    input.DisplayOutput != null &&
                    this.DisplayOutput.SequenceEqual(input.DisplayOutput)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimeStamp != null)
                {
                    hashCode = (hashCode * 59) + this.TimeStamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EventToNotify.GetHashCode();
                if (this.EventDetails != null)
                {
                    hashCode = (hashCode * 59) + this.EventDetails.GetHashCode();
                }
                if (this.RejectedMessage != null)
                {
                    hashCode = (hashCode * 59) + this.RejectedMessage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaintenanceRequiredFlag.GetHashCode();
                if (this.CustomerLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerLanguage.GetHashCode();
                }
                if (this.DisplayOutput != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayOutput.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EventDetails (string) pattern
            Regex regexEventDetails = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexEventDetails.Match(this.EventDetails).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventDetails, must match a pattern of " + regexEventDetails, new [] { "EventDetails" });
            }

            // CustomerLanguage (string) pattern
            Regex regexCustomerLanguage = new Regex(@"^[a-z]{2,2}$", RegexOptions.CultureInvariant);
            if (false == regexCustomerLanguage.Match(this.CustomerLanguage).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerLanguage, must match a pattern of " + regexCustomerLanguage, new [] { "CustomerLanguage" });
            }

            yield break;
        }
    }

}
