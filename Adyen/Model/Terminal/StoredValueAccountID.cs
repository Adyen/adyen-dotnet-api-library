/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It contains the identifications of the stored value account or the stored value card, and the associated product sold by the Sale System for stored value requests. Identification of the stored value account or the stored value card.
    /// </summary>
    [DataContract(Name = "StoredValueAccountID")]
    public partial class StoredValueAccountID : IEquatable<StoredValueAccountID>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets StoredValueAccountType
        /// </summary>
        [DataMember(Name = "StoredValueAccountType", IsRequired = false, EmitDefaultValue = false)]
        public StoredValueAccountType StoredValueAccountType { get; set; }
        /// <summary>
        /// Defines EntryMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntryModeEnum
        {
            /// <summary>
            /// Enum Contactless for value: Contactless
            /// </summary>
            [EnumMember(Value = "Contactless")]
            Contactless = 1,

            /// <summary>
            /// Enum File for value: File
            /// </summary>
            [EnumMember(Value = "File")]
            File = 2,

            /// <summary>
            /// Enum ICC for value: ICC
            /// </summary>
            [EnumMember(Value = "ICC")]
            ICC = 3,

            /// <summary>
            /// Enum Keyed for value: Keyed
            /// </summary>
            [EnumMember(Value = "Keyed")]
            Keyed = 4,

            /// <summary>
            /// Enum MagStripe for value: MagStripe
            /// </summary>
            [EnumMember(Value = "MagStripe")]
            MagStripe = 5,

            /// <summary>
            /// Enum Manual for value: Manual
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual = 6,

            /// <summary>
            /// Enum Mobile for value: Mobile
            /// </summary>
            [EnumMember(Value = "Mobile")]
            Mobile = 7,

            /// <summary>
            /// Enum RFID for value: RFID
            /// </summary>
            [EnumMember(Value = "RFID")]
            RFID = 8,

            /// <summary>
            /// Enum Scanned for value: Scanned
            /// </summary>
            [EnumMember(Value = "Scanned")]
            Scanned = 9,

            /// <summary>
            /// Enum SynchronousICC for value: SynchronousICC
            /// </summary>
            [EnumMember(Value = "SynchronousICC")]
            SynchronousICC = 10,

            /// <summary>
            /// Enum Tapped for value: Tapped
            /// </summary>
            [EnumMember(Value = "Tapped")]
            Tapped = 11

        }


        /// <summary>
        /// Gets or Sets IdentificationType
        /// </summary>
        [DataMember(Name = "IdentificationType", IsRequired = false, EmitDefaultValue = false)]
        public IdentificationType IdentificationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredValueAccountID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoredValueAccountID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredValueAccountID" /> class.
        /// </summary>
        /// <param name="storedValueAccountType">storedValueAccountType (required).</param>
        /// <param name="storedValueProvider">storedValueProvider.</param>
        /// <param name="ownerName">ownerName.</param>
        /// <param name="expiryDate">expiryDate.</param>
        /// <param name="entryMode">entryMode (required).</param>
        /// <param name="identificationType">identificationType (required).</param>
        /// <param name="storedValueID">storedValueID (required).</param>
        public StoredValueAccountID(StoredValueAccountType storedValueAccountType = default(StoredValueAccountType), string storedValueProvider = default(string), string ownerName = default(string), int? expiryDate = default(int?), List<EntryModeEnum> entryMode = default(List<EntryModeEnum>), IdentificationType identificationType = default(IdentificationType), string storedValueID = default(string))
        {
            this.StoredValueAccountType = storedValueAccountType;
            this.EntryMode = entryMode;
            this.IdentificationType = identificationType;
            this.StoredValueID = storedValueID;
            this.StoredValueProvider = storedValueProvider;
            this.OwnerName = ownerName;
            this.ExpiryDate = expiryDate;
        }

        /// <summary>
        /// Gets or Sets StoredValueProvider
        /// </summary>
        [DataMember(Name = "StoredValueProvider", EmitDefaultValue = false)]
        public string StoredValueProvider { get; set; }

        /// <summary>
        /// Gets or Sets OwnerName
        /// </summary>
        [DataMember(Name = "OwnerName", EmitDefaultValue = false)]
        public string OwnerName { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name = "ExpiryDate", EmitDefaultValue = false)]
        public int? ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets EntryMode
        /// </summary>
        [DataMember(Name = "EntryMode", IsRequired = false, EmitDefaultValue = false)]
        public List<StoredValueAccountID.EntryModeEnum> EntryMode { get; set; }

        /// <summary>
        /// Gets or Sets StoredValueID
        /// </summary>
        [DataMember(Name = "StoredValueID", IsRequired = false, EmitDefaultValue = false)]
        public string StoredValueID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StoredValueAccountID {\n");
            sb.Append("  StoredValueAccountType: ").Append(StoredValueAccountType).Append("\n");
            sb.Append("  StoredValueProvider: ").Append(StoredValueProvider).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  EntryMode: ").Append(EntryMode).Append("\n");
            sb.Append("  IdentificationType: ").Append(IdentificationType).Append("\n");
            sb.Append("  StoredValueID: ").Append(StoredValueID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoredValueAccountID);
        }

        /// <summary>
        /// Returns true if StoredValueAccountID instances are equal
        /// </summary>
        /// <param name="input">Instance of StoredValueAccountID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoredValueAccountID input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StoredValueAccountType == input.StoredValueAccountType ||
                    this.StoredValueAccountType.Equals(input.StoredValueAccountType)
                ) && 
                (
                    this.StoredValueProvider == input.StoredValueProvider ||
                    (this.StoredValueProvider != null &&
                    this.StoredValueProvider.Equals(input.StoredValueProvider))
                ) && 
                (
                    this.OwnerName == input.OwnerName ||
                    (this.OwnerName != null &&
                    this.OwnerName.Equals(input.OwnerName))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    this.ExpiryDate.Equals(input.ExpiryDate)
                ) && 
                (
                    this.EntryMode == input.EntryMode ||
                    this.EntryMode != null &&
                    input.EntryMode != null &&
                    this.EntryMode.SequenceEqual(input.EntryMode)
                ) && 
                (
                    this.IdentificationType == input.IdentificationType ||
                    this.IdentificationType.Equals(input.IdentificationType)
                ) && 
                (
                    this.StoredValueID == input.StoredValueID ||
                    (this.StoredValueID != null &&
                    this.StoredValueID.Equals(input.StoredValueID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.StoredValueAccountType.GetHashCode();
                if (this.StoredValueProvider != null)
                {
                    hashCode = (hashCode * 59) + this.StoredValueProvider.GetHashCode();
                }
                if (this.OwnerName != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpiryDate.GetHashCode();
                if (this.EntryMode != null)
                {
                    hashCode = (hashCode * 59) + this.EntryMode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IdentificationType.GetHashCode();
                if (this.StoredValueID != null)
                {
                    hashCode = (hashCode * 59) + this.StoredValueID.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StoredValueProvider (string) pattern
            Regex regexStoredValueProvider = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexStoredValueProvider.Match(this.StoredValueProvider).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StoredValueProvider, must match a pattern of " + regexStoredValueProvider, new [] { "StoredValueProvider" });
            }

            // OwnerName (string) pattern
            Regex regexOwnerName = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexOwnerName.Match(this.OwnerName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwnerName, must match a pattern of " + regexOwnerName, new [] { "OwnerName" });
            }

            // ExpiryDate (int) maximum
            if (this.ExpiryDate > (int)4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryDate, must be a value less than or equal to 4.", new [] { "ExpiryDate" });
            }

            // ExpiryDate (int) minimum
            if (this.ExpiryDate < (int)4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryDate, must be a value greater than or equal to 4.", new [] { "ExpiryDate" });
            }

            // StoredValueID (string) pattern
            Regex regexStoredValueID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexStoredValueID.Match(this.StoredValueID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StoredValueID, must match a pattern of " + regexStoredValueID, new [] { "StoredValueID" });
            }

            yield break;
        }
    }

}
