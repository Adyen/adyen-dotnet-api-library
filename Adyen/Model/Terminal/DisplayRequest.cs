/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys the data to display and the way to process the display. It contains the complete content to display. It might contain an operation (the DisplayOutput element) per Display Device type. Content of the Display Request message.
    /// </summary>
    [DataContract(Name = "DisplayRequest")]
    public partial class DisplayRequest : IEquatable<DisplayRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DisplayRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayRequest" /> class.
        /// </summary>
        /// <param name="displayOutput">displayOutput (required).</param>
        public DisplayRequest(List<DisplayOutput> displayOutput = default(List<DisplayOutput>))
        {
            this.DisplayOutput = displayOutput;
        }

        /// <summary>
        /// Gets or Sets DisplayOutput
        /// </summary>
        [DataMember(Name = "DisplayOutput", IsRequired = false, EmitDefaultValue = false)]
        public List<DisplayOutput> DisplayOutput { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DisplayRequest {\n");
            sb.Append("  DisplayOutput: ").Append(DisplayOutput).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DisplayRequest);
        }

        /// <summary>
        /// Returns true if DisplayRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DisplayRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisplayRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayOutput == input.DisplayOutput ||
                    this.DisplayOutput != null &&
                    input.DisplayOutput != null &&
                    this.DisplayOutput.SequenceEqual(input.DisplayOutput)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayOutput != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayOutput.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
