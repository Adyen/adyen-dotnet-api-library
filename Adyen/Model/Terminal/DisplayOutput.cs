/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It contains a complete display operation for a Display or an Input Device type. For the Input Devices, Diagnosis and EnableService, ResponseRequiredFlag and MinimumDisplayTime shall be absent. Information to display and the way to process the display.
    /// </summary>
    [DataContract(Name = "DisplayOutput")]
    public partial class DisplayOutput : IEquatable<DisplayOutput>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name = "Device", IsRequired = false, EmitDefaultValue = false)]
        public Device Device { get; set; }

        /// <summary>
        /// Gets or Sets InfoQualify
        /// </summary>
        [DataMember(Name = "InfoQualify", IsRequired = false, EmitDefaultValue = false)]
        public InfoQualify InfoQualify { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayOutput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DisplayOutput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayOutput" /> class.
        /// </summary>
        /// <param name="responseRequiredFlag">Request of a message response. (default to true).</param>
        /// <param name="minimumDisplayTime">Number of seconds the message has to be displayed. (default to 0).</param>
        /// <param name="device">device (required).</param>
        /// <param name="infoQualify">infoQualify (required).</param>
        /// <param name="outputContent">outputContent (required).</param>
        /// <param name="menuEntry">menuEntry.</param>
        /// <param name="outputSignature">If protection has to be provided to the vendor on the text to display or print..</param>
        public DisplayOutput(bool? responseRequiredFlag = true, int? minimumDisplayTime = 0, Device device = default(Device), InfoQualify infoQualify = default(InfoQualify), OutputContent outputContent = default(OutputContent), List<MenuEntry> menuEntry = default(List<MenuEntry>), byte[] outputSignature = default(byte[]))
        {
            this.Device = device;
            this.InfoQualify = infoQualify;
            this.OutputContent = outputContent;
            this.ResponseRequiredFlag = responseRequiredFlag;
            this.MinimumDisplayTime = minimumDisplayTime;
            this.MenuEntry = menuEntry;
            this.OutputSignature = outputSignature;
        }

        /// <summary>
        /// Request of a message response.
        /// </summary>
        /// <value>Request of a message response.</value>
        [DataMember(Name = "ResponseRequiredFlag", EmitDefaultValue = false)]
        public bool? ResponseRequiredFlag { get; set; }

        /// <summary>
        /// Number of seconds the message has to be displayed.
        /// </summary>
        /// <value>Number of seconds the message has to be displayed.</value>
        [DataMember(Name = "MinimumDisplayTime", EmitDefaultValue = false)]
        public int? MinimumDisplayTime { get; set; }

        /// <summary>
        /// Gets or Sets OutputContent
        /// </summary>
        [DataMember(Name = "OutputContent", IsRequired = false, EmitDefaultValue = false)]
        public OutputContent OutputContent { get; set; }

        /// <summary>
        /// Gets or Sets MenuEntry
        /// </summary>
        [DataMember(Name = "MenuEntry", EmitDefaultValue = false)]
        public List<MenuEntry> MenuEntry { get; set; }

        /// <summary>
        /// If protection has to be provided to the vendor on the text to display or print.
        /// </summary>
        /// <value>If protection has to be provided to the vendor on the text to display or print.</value>
        [DataMember(Name = "OutputSignature", EmitDefaultValue = false)]
        public byte[] OutputSignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DisplayOutput {\n");
            sb.Append("  ResponseRequiredFlag: ").Append(ResponseRequiredFlag).Append("\n");
            sb.Append("  MinimumDisplayTime: ").Append(MinimumDisplayTime).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  InfoQualify: ").Append(InfoQualify).Append("\n");
            sb.Append("  OutputContent: ").Append(OutputContent).Append("\n");
            sb.Append("  MenuEntry: ").Append(MenuEntry).Append("\n");
            sb.Append("  OutputSignature: ").Append(OutputSignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DisplayOutput);
        }

        /// <summary>
        /// Returns true if DisplayOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of DisplayOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisplayOutput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ResponseRequiredFlag == input.ResponseRequiredFlag ||
                    this.ResponseRequiredFlag.Equals(input.ResponseRequiredFlag)
                ) && 
                (
                    this.MinimumDisplayTime == input.MinimumDisplayTime ||
                    this.MinimumDisplayTime.Equals(input.MinimumDisplayTime)
                ) && 
                (
                    this.Device == input.Device ||
                    this.Device.Equals(input.Device)
                ) && 
                (
                    this.InfoQualify == input.InfoQualify ||
                    this.InfoQualify.Equals(input.InfoQualify)
                ) && 
                (
                    this.OutputContent == input.OutputContent ||
                    (this.OutputContent != null &&
                    this.OutputContent.Equals(input.OutputContent))
                ) && 
                (
                    this.MenuEntry == input.MenuEntry ||
                    this.MenuEntry != null &&
                    input.MenuEntry != null &&
                    this.MenuEntry.SequenceEqual(input.MenuEntry)
                ) && 
                (
                    this.OutputSignature == input.OutputSignature ||
                    (this.OutputSignature != null &&
                    this.OutputSignature.Equals(input.OutputSignature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ResponseRequiredFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumDisplayTime.GetHashCode();
                hashCode = (hashCode * 59) + this.Device.GetHashCode();
                hashCode = (hashCode * 59) + this.InfoQualify.GetHashCode();
                if (this.OutputContent != null)
                {
                    hashCode = (hashCode * 59) + this.OutputContent.GetHashCode();
                }
                if (this.MenuEntry != null)
                {
                    hashCode = (hashCode * 59) + this.MenuEntry.GetHashCode();
                }
                if (this.OutputSignature != null)
                {
                    hashCode = (hashCode * 59) + this.OutputSignature.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // MinimumDisplayTime (int) maximum
            if (this.MinimumDisplayTime > (int)999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinimumDisplayTime, must be a value less than or equal to 999.", new [] { "MinimumDisplayTime" });
            }

            // MinimumDisplayTime (int) minimum
            if (this.MinimumDisplayTime < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinimumDisplayTime, must be a value greater than or equal to 0.", new [] { "MinimumDisplayTime" });
            }

            yield break;
        }
    }

}
