/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Data associated to the Sale System, with a particular value during the processing of the payment by the POI, including the cards acquisition. Data related to the Sale System.
    /// </summary>
    [DataContract(Name = "SaleData")]
    public partial class SaleData : IEquatable<SaleData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TokenRequestedType
        /// </summary>
        [DataMember(Name = "TokenRequestedType", EmitDefaultValue = false)]
        public TokenRequestedType? TokenRequestedType { get; set; }
        /// <summary>
        /// Defines CustomerOrderReq
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CustomerOrderReqEnum
        {
            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 1,

            /// <summary>
            /// Enum Closed for value: Closed
            /// </summary>
            [EnumMember(Value = "Closed")]
            Closed = 2,

            /// <summary>
            /// Enum Open for value: Open
            /// </summary>
            [EnumMember(Value = "Open")]
            Open = 3

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SaleData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SaleData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SaleData" /> class.
        /// </summary>
        /// <param name="operatorID">operatorID.</param>
        /// <param name="operatorLanguage">if different from the Login..</param>
        /// <param name="shiftNumber">if different from the Login and  see Login .SaleData..</param>
        /// <param name="saleTransactionID">saleTransactionID (required).</param>
        /// <param name="saleReferenceID">If payment reservation..</param>
        /// <param name="saleTerminalData">saleTerminalData.</param>
        /// <param name="tokenRequestedType">tokenRequestedType.</param>
        /// <param name="customerOrderID">Additional and optional identification of a customer order..</param>
        /// <param name="customerOrderReq">customerOrderReq.</param>
        /// <param name="saleToPOIData">Stored with the transaction..</param>
        /// <param name="saleToAcquirerData">Send to the Acquirer if present..</param>
        /// <param name="saleToIssuerData">saleToIssuerData.</param>
        public SaleData(string operatorID = default(string), string operatorLanguage = default(string), string shiftNumber = default(string), TransactionIDType saleTransactionID = default(TransactionIDType), string saleReferenceID = default(string), SaleTerminalData saleTerminalData = default(SaleTerminalData), TokenRequestedType? tokenRequestedType = default(TokenRequestedType?), string customerOrderID = default(string), List<CustomerOrderReqEnum> customerOrderReq = default(List<CustomerOrderReqEnum>), string saleToPOIData = default(string), string saleToAcquirerData = default(string), SaleToIssuerData saleToIssuerData = default(SaleToIssuerData))
        {
            this.SaleTransactionID = saleTransactionID;
            this.OperatorID = operatorID;
            this.OperatorLanguage = operatorLanguage;
            this.ShiftNumber = shiftNumber;
            this.SaleReferenceID = saleReferenceID;
            this.SaleTerminalData = saleTerminalData;
            this.TokenRequestedType = tokenRequestedType;
            this.CustomerOrderID = customerOrderID;
            this.CustomerOrderReq = customerOrderReq;
            this.SaleToPOIData = saleToPOIData;
            this.SaleToAcquirerData = saleToAcquirerData;
            this.SaleToIssuerData = saleToIssuerData;
        }

        /// <summary>
        /// Gets or Sets OperatorID
        /// </summary>
        [DataMember(Name = "OperatorID", EmitDefaultValue = false)]
        public string OperatorID { get; set; }

        /// <summary>
        /// if different from the Login.
        /// </summary>
        /// <value>if different from the Login.</value>
        [DataMember(Name = "OperatorLanguage", EmitDefaultValue = false)]
        public string OperatorLanguage { get; set; }

        /// <summary>
        /// if different from the Login and  see Login .SaleData.
        /// </summary>
        /// <value>if different from the Login and  see Login .SaleData.</value>
        [DataMember(Name = "ShiftNumber", EmitDefaultValue = false)]
        public string ShiftNumber { get; set; }

        /// <summary>
        /// Gets or Sets SaleTransactionID
        /// </summary>
        [DataMember(Name = "SaleTransactionID", IsRequired = false, EmitDefaultValue = false)]
        public TransactionIDType SaleTransactionID { get; set; }

        /// <summary>
        /// If payment reservation.
        /// </summary>
        /// <value>If payment reservation.</value>
        [DataMember(Name = "SaleReferenceID", EmitDefaultValue = false)]
        public string SaleReferenceID { get; set; }

        /// <summary>
        /// Gets or Sets SaleTerminalData
        /// </summary>
        [DataMember(Name = "SaleTerminalData", EmitDefaultValue = false)]
        public SaleTerminalData SaleTerminalData { get; set; }

        /// <summary>
        /// Additional and optional identification of a customer order.
        /// </summary>
        /// <value>Additional and optional identification of a customer order.</value>
        [DataMember(Name = "CustomerOrderID", EmitDefaultValue = false)]
        public string CustomerOrderID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerOrderReq
        /// </summary>
        [DataMember(Name = "CustomerOrderReq", EmitDefaultValue = false)]
        public List<SaleData.CustomerOrderReqEnum> CustomerOrderReq { get; set; }

        /// <summary>
        /// Stored with the transaction.
        /// </summary>
        /// <value>Stored with the transaction.</value>
        [DataMember(Name = "SaleToPOIData", EmitDefaultValue = false)]
        public string SaleToPOIData { get; set; }

        /// <summary>
        /// Send to the Acquirer if present.
        /// </summary>
        /// <value>Send to the Acquirer if present.</value>
        [DataMember(Name = "SaleToAcquirerData", EmitDefaultValue = false)]
        public string SaleToAcquirerData { get; set; }

        /// <summary>
        /// Gets or Sets SaleToIssuerData
        /// </summary>
        [DataMember(Name = "SaleToIssuerData", EmitDefaultValue = false)]
        public SaleToIssuerData SaleToIssuerData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SaleData {\n");
            sb.Append("  OperatorID: ").Append(OperatorID).Append("\n");
            sb.Append("  OperatorLanguage: ").Append(OperatorLanguage).Append("\n");
            sb.Append("  ShiftNumber: ").Append(ShiftNumber).Append("\n");
            sb.Append("  SaleTransactionID: ").Append(SaleTransactionID).Append("\n");
            sb.Append("  SaleReferenceID: ").Append(SaleReferenceID).Append("\n");
            sb.Append("  SaleTerminalData: ").Append(SaleTerminalData).Append("\n");
            sb.Append("  TokenRequestedType: ").Append(TokenRequestedType).Append("\n");
            sb.Append("  CustomerOrderID: ").Append(CustomerOrderID).Append("\n");
            sb.Append("  CustomerOrderReq: ").Append(CustomerOrderReq).Append("\n");
            sb.Append("  SaleToPOIData: ").Append(SaleToPOIData).Append("\n");
            sb.Append("  SaleToAcquirerData: ").Append(SaleToAcquirerData).Append("\n");
            sb.Append("  SaleToIssuerData: ").Append(SaleToIssuerData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SaleData);
        }

        /// <summary>
        /// Returns true if SaleData instances are equal
        /// </summary>
        /// <param name="input">Instance of SaleData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SaleData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OperatorID == input.OperatorID ||
                    (this.OperatorID != null &&
                    this.OperatorID.Equals(input.OperatorID))
                ) && 
                (
                    this.OperatorLanguage == input.OperatorLanguage ||
                    (this.OperatorLanguage != null &&
                    this.OperatorLanguage.Equals(input.OperatorLanguage))
                ) && 
                (
                    this.ShiftNumber == input.ShiftNumber ||
                    (this.ShiftNumber != null &&
                    this.ShiftNumber.Equals(input.ShiftNumber))
                ) && 
                (
                    this.SaleTransactionID == input.SaleTransactionID ||
                    (this.SaleTransactionID != null &&
                    this.SaleTransactionID.Equals(input.SaleTransactionID))
                ) && 
                (
                    this.SaleReferenceID == input.SaleReferenceID ||
                    (this.SaleReferenceID != null &&
                    this.SaleReferenceID.Equals(input.SaleReferenceID))
                ) && 
                (
                    this.SaleTerminalData == input.SaleTerminalData ||
                    (this.SaleTerminalData != null &&
                    this.SaleTerminalData.Equals(input.SaleTerminalData))
                ) && 
                (
                    this.TokenRequestedType == input.TokenRequestedType ||
                    this.TokenRequestedType.Equals(input.TokenRequestedType)
                ) && 
                (
                    this.CustomerOrderID == input.CustomerOrderID ||
                    (this.CustomerOrderID != null &&
                    this.CustomerOrderID.Equals(input.CustomerOrderID))
                ) && 
                (
                    this.CustomerOrderReq == input.CustomerOrderReq ||
                    this.CustomerOrderReq != null &&
                    input.CustomerOrderReq != null &&
                    this.CustomerOrderReq.SequenceEqual(input.CustomerOrderReq)
                ) && 
                (
                    this.SaleToPOIData == input.SaleToPOIData ||
                    (this.SaleToPOIData != null &&
                    this.SaleToPOIData.Equals(input.SaleToPOIData))
                ) && 
                (
                    this.SaleToAcquirerData == input.SaleToAcquirerData ||
                    (this.SaleToAcquirerData != null &&
                    this.SaleToAcquirerData.Equals(input.SaleToAcquirerData))
                ) && 
                (
                    this.SaleToIssuerData == input.SaleToIssuerData ||
                    (this.SaleToIssuerData != null &&
                    this.SaleToIssuerData.Equals(input.SaleToIssuerData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OperatorID != null)
                {
                    hashCode = (hashCode * 59) + this.OperatorID.GetHashCode();
                }
                if (this.OperatorLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.OperatorLanguage.GetHashCode();
                }
                if (this.ShiftNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ShiftNumber.GetHashCode();
                }
                if (this.SaleTransactionID != null)
                {
                    hashCode = (hashCode * 59) + this.SaleTransactionID.GetHashCode();
                }
                if (this.SaleReferenceID != null)
                {
                    hashCode = (hashCode * 59) + this.SaleReferenceID.GetHashCode();
                }
                if (this.SaleTerminalData != null)
                {
                    hashCode = (hashCode * 59) + this.SaleTerminalData.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TokenRequestedType.GetHashCode();
                if (this.CustomerOrderID != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerOrderID.GetHashCode();
                }
                if (this.CustomerOrderReq != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerOrderReq.GetHashCode();
                }
                if (this.SaleToPOIData != null)
                {
                    hashCode = (hashCode * 59) + this.SaleToPOIData.GetHashCode();
                }
                if (this.SaleToAcquirerData != null)
                {
                    hashCode = (hashCode * 59) + this.SaleToAcquirerData.GetHashCode();
                }
                if (this.SaleToIssuerData != null)
                {
                    hashCode = (hashCode * 59) + this.SaleToIssuerData.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // OperatorID (string) pattern
            Regex regexOperatorID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexOperatorID.Match(this.OperatorID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OperatorID, must match a pattern of " + regexOperatorID, new [] { "OperatorID" });
            }

            // OperatorLanguage (string) pattern
            Regex regexOperatorLanguage = new Regex(@"^[a-z]{2,2}$", RegexOptions.CultureInvariant);
            if (false == regexOperatorLanguage.Match(this.OperatorLanguage).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OperatorLanguage, must match a pattern of " + regexOperatorLanguage, new [] { "OperatorLanguage" });
            }

            // ShiftNumber (string) pattern
            Regex regexShiftNumber = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexShiftNumber.Match(this.ShiftNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiftNumber, must match a pattern of " + regexShiftNumber, new [] { "ShiftNumber" });
            }

            // SaleReferenceID (string) pattern
            Regex regexSaleReferenceID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexSaleReferenceID.Match(this.SaleReferenceID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaleReferenceID, must match a pattern of " + regexSaleReferenceID, new [] { "SaleReferenceID" });
            }

            // CustomerOrderID (string) pattern
            Regex regexCustomerOrderID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexCustomerOrderID.Match(this.CustomerOrderID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerOrderID, must match a pattern of " + regexCustomerOrderID, new [] { "CustomerOrderID" });
            }

            // SaleToPOIData (string) pattern
            Regex regexSaleToPOIData = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexSaleToPOIData.Match(this.SaleToPOIData).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaleToPOIData, must match a pattern of " + regexSaleToPOIData, new [] { "SaleToPOIData" });
            }

            // SaleToAcquirerData (string) pattern
            Regex regexSaleToAcquirerData = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexSaleToAcquirerData.Match(this.SaleToAcquirerData).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaleToAcquirerData, must match a pattern of " + regexSaleToAcquirerData, new [] { "SaleToAcquirerData" });
            }

            yield break;
        }
    }

}
