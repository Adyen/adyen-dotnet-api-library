/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys Information related to the session (period between a Login and the following Logout) to process. Content of the Login Request message.
    /// </summary>
    [DataContract(Name = "LoginRequest")]
    public partial class LoginRequest : IEquatable<LoginRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TokenRequestedType
        /// </summary>
        [DataMember(Name = "TokenRequestedType", EmitDefaultValue = false)]
        public TokenRequestedType? TokenRequestedType { get; set; }
        /// <summary>
        /// Defines CustomerOrderReq
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CustomerOrderReqEnum
        {
            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 1,

            /// <summary>
            /// Enum Closed for value: Closed
            /// </summary>
            [EnumMember(Value = "Closed")]
            Closed = 2,

            /// <summary>
            /// Enum Open for value: Open
            /// </summary>
            [EnumMember(Value = "Open")]
            Open = 3

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoginRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginRequest" /> class.
        /// </summary>
        /// <param name="dateTime">Date and Time. (required).</param>
        /// <param name="saleSoftware">saleSoftware (required).</param>
        /// <param name="saleTerminalData">saleTerminalData.</param>
        /// <param name="trainingModeFlag">The POI does not realise the transaction with the Acquirer. (default to false).</param>
        /// <param name="operatorLanguage">Default value for Device type displays. (required).</param>
        /// <param name="operatorID">4 conditions to send it: a) the Sale System wants the POI log it in the transaction log b) because of reconciliation..</param>
        /// <param name="shiftNumber">Same as OperatorID..</param>
        /// <param name="tokenRequestedType">tokenRequestedType.</param>
        /// <param name="customerOrderReq">customerOrderReq.</param>
        /// <param name="pOISerialNumber">If the login involve a POI Terminal and not the first Login to the POI System..</param>
        public LoginRequest(DateTime dateTime = default(DateTime), SaleSoftware saleSoftware = default(SaleSoftware), SaleTerminalData saleTerminalData = default(SaleTerminalData), bool? trainingModeFlag = false, string operatorLanguage = default(string), string operatorID = default(string), string shiftNumber = default(string), TokenRequestedType? tokenRequestedType = default(TokenRequestedType?), List<CustomerOrderReqEnum> customerOrderReq = default(List<CustomerOrderReqEnum>), string pOISerialNumber = default(string))
        {
            this.DateTime = dateTime;
            this.SaleSoftware = saleSoftware;
            this.OperatorLanguage = operatorLanguage;
            this.SaleTerminalData = saleTerminalData;
            this.TrainingModeFlag = trainingModeFlag;
            this.OperatorID = operatorID;
            this.ShiftNumber = shiftNumber;
            this.TokenRequestedType = tokenRequestedType;
            this.CustomerOrderReq = customerOrderReq;
            this.POISerialNumber = pOISerialNumber;
        }

        /// <summary>
        /// Date and Time.
        /// </summary>
        /// <value>Date and Time.</value>
        [DataMember(Name = "DateTime", IsRequired = false, EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Gets or Sets SaleSoftware
        /// </summary>
        [DataMember(Name = "SaleSoftware", IsRequired = false, EmitDefaultValue = false)]
        public SaleSoftware SaleSoftware { get; set; }

        /// <summary>
        /// Gets or Sets SaleTerminalData
        /// </summary>
        [DataMember(Name = "SaleTerminalData", EmitDefaultValue = false)]
        public SaleTerminalData SaleTerminalData { get; set; }

        /// <summary>
        /// The POI does not realise the transaction with the Acquirer.
        /// </summary>
        /// <value>The POI does not realise the transaction with the Acquirer.</value>
        [DataMember(Name = "TrainingModeFlag", EmitDefaultValue = false)]
        public bool? TrainingModeFlag { get; set; }

        /// <summary>
        /// Default value for Device type displays.
        /// </summary>
        /// <value>Default value for Device type displays.</value>
        [DataMember(Name = "OperatorLanguage", IsRequired = false, EmitDefaultValue = false)]
        public string OperatorLanguage { get; set; }

        /// <summary>
        /// 4 conditions to send it: a) the Sale System wants the POI log it in the transaction log b) because of reconciliation.
        /// </summary>
        /// <value>4 conditions to send it: a) the Sale System wants the POI log it in the transaction log b) because of reconciliation.</value>
        [DataMember(Name = "OperatorID", EmitDefaultValue = false)]
        public string OperatorID { get; set; }

        /// <summary>
        /// Same as OperatorID.
        /// </summary>
        /// <value>Same as OperatorID.</value>
        [DataMember(Name = "ShiftNumber", EmitDefaultValue = false)]
        public string ShiftNumber { get; set; }

        /// <summary>
        /// Gets or Sets CustomerOrderReq
        /// </summary>
        [DataMember(Name = "CustomerOrderReq", EmitDefaultValue = false)]
        public List<LoginRequest.CustomerOrderReqEnum> CustomerOrderReq { get; set; }

        /// <summary>
        /// If the login involve a POI Terminal and not the first Login to the POI System.
        /// </summary>
        /// <value>If the login involve a POI Terminal and not the first Login to the POI System.</value>
        [DataMember(Name = "POISerialNumber", EmitDefaultValue = false)]
        public string POISerialNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoginRequest {\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  SaleSoftware: ").Append(SaleSoftware).Append("\n");
            sb.Append("  SaleTerminalData: ").Append(SaleTerminalData).Append("\n");
            sb.Append("  TrainingModeFlag: ").Append(TrainingModeFlag).Append("\n");
            sb.Append("  OperatorLanguage: ").Append(OperatorLanguage).Append("\n");
            sb.Append("  OperatorID: ").Append(OperatorID).Append("\n");
            sb.Append("  ShiftNumber: ").Append(ShiftNumber).Append("\n");
            sb.Append("  TokenRequestedType: ").Append(TokenRequestedType).Append("\n");
            sb.Append("  CustomerOrderReq: ").Append(CustomerOrderReq).Append("\n");
            sb.Append("  POISerialNumber: ").Append(POISerialNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoginRequest);
        }

        /// <summary>
        /// Returns true if LoginRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LoginRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoginRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.SaleSoftware == input.SaleSoftware ||
                    (this.SaleSoftware != null &&
                    this.SaleSoftware.Equals(input.SaleSoftware))
                ) && 
                (
                    this.SaleTerminalData == input.SaleTerminalData ||
                    (this.SaleTerminalData != null &&
                    this.SaleTerminalData.Equals(input.SaleTerminalData))
                ) && 
                (
                    this.TrainingModeFlag == input.TrainingModeFlag ||
                    this.TrainingModeFlag.Equals(input.TrainingModeFlag)
                ) && 
                (
                    this.OperatorLanguage == input.OperatorLanguage ||
                    (this.OperatorLanguage != null &&
                    this.OperatorLanguage.Equals(input.OperatorLanguage))
                ) && 
                (
                    this.OperatorID == input.OperatorID ||
                    (this.OperatorID != null &&
                    this.OperatorID.Equals(input.OperatorID))
                ) && 
                (
                    this.ShiftNumber == input.ShiftNumber ||
                    (this.ShiftNumber != null &&
                    this.ShiftNumber.Equals(input.ShiftNumber))
                ) && 
                (
                    this.TokenRequestedType == input.TokenRequestedType ||
                    this.TokenRequestedType.Equals(input.TokenRequestedType)
                ) && 
                (
                    this.CustomerOrderReq == input.CustomerOrderReq ||
                    this.CustomerOrderReq != null &&
                    input.CustomerOrderReq != null &&
                    this.CustomerOrderReq.SequenceEqual(input.CustomerOrderReq)
                ) && 
                (
                    this.POISerialNumber == input.POISerialNumber ||
                    (this.POISerialNumber != null &&
                    this.POISerialNumber.Equals(input.POISerialNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                if (this.SaleSoftware != null)
                {
                    hashCode = (hashCode * 59) + this.SaleSoftware.GetHashCode();
                }
                if (this.SaleTerminalData != null)
                {
                    hashCode = (hashCode * 59) + this.SaleTerminalData.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TrainingModeFlag.GetHashCode();
                if (this.OperatorLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.OperatorLanguage.GetHashCode();
                }
                if (this.OperatorID != null)
                {
                    hashCode = (hashCode * 59) + this.OperatorID.GetHashCode();
                }
                if (this.ShiftNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ShiftNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TokenRequestedType.GetHashCode();
                if (this.CustomerOrderReq != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerOrderReq.GetHashCode();
                }
                if (this.POISerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.POISerialNumber.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // OperatorLanguage (string) pattern
            Regex regexOperatorLanguage = new Regex(@"^[a-z]{2,2}$", RegexOptions.CultureInvariant);
            if (false == regexOperatorLanguage.Match(this.OperatorLanguage).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OperatorLanguage, must match a pattern of " + regexOperatorLanguage, new [] { "OperatorLanguage" });
            }

            // OperatorID (string) pattern
            Regex regexOperatorID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexOperatorID.Match(this.OperatorID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OperatorID, must match a pattern of " + regexOperatorID, new [] { "OperatorID" });
            }

            // ShiftNumber (string) pattern
            Regex regexShiftNumber = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexShiftNumber.Match(this.ShiftNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiftNumber, must match a pattern of " + regexShiftNumber, new [] { "ShiftNumber" });
            }

            // POISerialNumber (string) pattern
            Regex regexPOISerialNumber = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexPOISerialNumber.Match(this.POISerialNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for POISerialNumber, must match a pattern of " + regexPOISerialNumber, new [] { "POISerialNumber" });
            }

            yield break;
        }
    }

}
