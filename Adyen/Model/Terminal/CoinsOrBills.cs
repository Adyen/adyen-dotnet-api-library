/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Indicates the remaining number of coins or bills of a given value in a cash handling device. When the cash handling machine does not have any more coins or bills of a certain value, the number must be equal to 0. Number of coins or bills of a given value.
    /// </summary>
    [DataContract(Name = "CoinsOrBills")]
    public partial class CoinsOrBills : IEquatable<CoinsOrBills>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoinsOrBills" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoinsOrBills() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoinsOrBills" /> class.
        /// </summary>
        /// <param name="unitValue">Value of a coin or bill. (required).</param>
        /// <param name="number">Number of elements. (required).</param>
        public CoinsOrBills(decimal? unitValue = default(decimal?), int? number = default(int?))
        {
            this.UnitValue = unitValue;
            this.Number = number;
        }

        /// <summary>
        /// Value of a coin or bill.
        /// </summary>
        /// <value>Value of a coin or bill.</value>
        [DataMember(Name = "UnitValue", IsRequired = false, EmitDefaultValue = false)]
        public decimal? UnitValue { get; set; }

        /// <summary>
        /// Number of elements.
        /// </summary>
        /// <value>Number of elements.</value>
        [DataMember(Name = "Number", IsRequired = false, EmitDefaultValue = false)]
        public int? Number { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoinsOrBills {\n");
            sb.Append("  UnitValue: ").Append(UnitValue).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CoinsOrBills);
        }

        /// <summary>
        /// Returns true if CoinsOrBills instances are equal
        /// </summary>
        /// <param name="input">Instance of CoinsOrBills to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoinsOrBills input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UnitValue == input.UnitValue ||
                    this.UnitValue.Equals(input.UnitValue)
                ) && 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UnitValue.GetHashCode();
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // UnitValue (decimal) maximum
            if (this.UnitValue > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitValue, must be a value less than or equal to 99999999.999999.", new [] { "UnitValue" });
            }

            // UnitValue (decimal) minimum
            if (this.UnitValue < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitValue, must be a value greater than or equal to 0.0.", new [] { "UnitValue" });
            }

            yield break;
        }
    }

}
