/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys Information requested for status of the last or current Payment, Loyalty or Reversal transaction. Content of the TransactionStatus Request message.
    /// </summary>
    [DataContract(Name = "TransactionStatusRequest")]
    public partial class TransactionStatusRequest : IEquatable<TransactionStatusRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionStatusRequest" /> class.
        /// </summary>
        /// <param name="messageReference">messageReference.</param>
        /// <param name="receiptReprintFlag">Request to reprint the POI receipt(s). (default to false).</param>
        /// <param name="documentQualifier">documentQualifier.</param>
        public TransactionStatusRequest(MessageReference messageReference = default(MessageReference), bool? receiptReprintFlag = false, List<DocumentQualifier> documentQualifier = default(List<DocumentQualifier>))
        {
            this.MessageReference = messageReference;
            this.ReceiptReprintFlag = receiptReprintFlag;
            this.DocumentQualifier = documentQualifier;
        }

        /// <summary>
        /// Gets or Sets MessageReference
        /// </summary>
        [DataMember(Name = "MessageReference", EmitDefaultValue = false)]
        public MessageReference MessageReference { get; set; }

        /// <summary>
        /// Request to reprint the POI receipt(s).
        /// </summary>
        /// <value>Request to reprint the POI receipt(s).</value>
        [DataMember(Name = "ReceiptReprintFlag", EmitDefaultValue = false)]
        public bool? ReceiptReprintFlag { get; set; }

        /// <summary>
        /// Gets or Sets DocumentQualifier
        /// </summary>
        [DataMember(Name = "DocumentQualifier", EmitDefaultValue = false)]
        public List<DocumentQualifier> DocumentQualifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionStatusRequest {\n");
            sb.Append("  MessageReference: ").Append(MessageReference).Append("\n");
            sb.Append("  ReceiptReprintFlag: ").Append(ReceiptReprintFlag).Append("\n");
            sb.Append("  DocumentQualifier: ").Append(DocumentQualifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionStatusRequest);
        }

        /// <summary>
        /// Returns true if TransactionStatusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionStatusRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MessageReference == input.MessageReference ||
                    (this.MessageReference != null &&
                    this.MessageReference.Equals(input.MessageReference))
                ) && 
                (
                    this.ReceiptReprintFlag == input.ReceiptReprintFlag ||
                    this.ReceiptReprintFlag.Equals(input.ReceiptReprintFlag)
                ) && 
                (
                    this.DocumentQualifier == input.DocumentQualifier ||
                    this.DocumentQualifier != null &&
                    input.DocumentQualifier != null &&
                    this.DocumentQualifier.SequenceEqual(input.DocumentQualifier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MessageReference != null)
                {
                    hashCode = (hashCode * 59) + this.MessageReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReceiptReprintFlag.GetHashCode();
                if (this.DocumentQualifier != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentQualifier.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
