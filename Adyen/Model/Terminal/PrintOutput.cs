/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// PrintOutput
    /// </summary>
    [DataContract(Name = "PrintOutput")]
    public partial class PrintOutput : IEquatable<PrintOutput>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DocumentQualifier
        /// </summary>
        [DataMember(Name = "DocumentQualifier", IsRequired = false, EmitDefaultValue = false)]
        public DocumentQualifier DocumentQualifier { get; set; }

        /// <summary>
        /// Gets or Sets ResponseMode
        /// </summary>
        [DataMember(Name = "ResponseMode", IsRequired = false, EmitDefaultValue = false)]
        public ResponseMode ResponseMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintOutput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrintOutput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintOutput" /> class.
        /// </summary>
        /// <param name="documentQualifier">documentQualifier (required).</param>
        /// <param name="responseMode">responseMode (required).</param>
        /// <param name="integratedPrintFlag">integratedPrintFlag (default to false).</param>
        /// <param name="requiredSignatureFlag">requiredSignatureFlag (default to false).</param>
        /// <param name="outputContent">outputContent (required).</param>
        public PrintOutput(DocumentQualifier documentQualifier = default(DocumentQualifier), ResponseMode responseMode = default(ResponseMode), bool? integratedPrintFlag = false, bool? requiredSignatureFlag = false, OutputContent outputContent = default(OutputContent))
        {
            this.DocumentQualifier = documentQualifier;
            this.ResponseMode = responseMode;
            this.OutputContent = outputContent;
            this.IntegratedPrintFlag = integratedPrintFlag;
            this.RequiredSignatureFlag = requiredSignatureFlag;
        }

        /// <summary>
        /// Gets or Sets IntegratedPrintFlag
        /// </summary>
        [DataMember(Name = "IntegratedPrintFlag", EmitDefaultValue = false)]
        public bool? IntegratedPrintFlag { get; set; }

        /// <summary>
        /// Gets or Sets RequiredSignatureFlag
        /// </summary>
        [DataMember(Name = "RequiredSignatureFlag", EmitDefaultValue = false)]
        public bool? RequiredSignatureFlag { get; set; }

        /// <summary>
        /// Gets or Sets OutputContent
        /// </summary>
        [DataMember(Name = "OutputContent", IsRequired = false, EmitDefaultValue = false)]
        public OutputContent OutputContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrintOutput {\n");
            sb.Append("  DocumentQualifier: ").Append(DocumentQualifier).Append("\n");
            sb.Append("  ResponseMode: ").Append(ResponseMode).Append("\n");
            sb.Append("  IntegratedPrintFlag: ").Append(IntegratedPrintFlag).Append("\n");
            sb.Append("  RequiredSignatureFlag: ").Append(RequiredSignatureFlag).Append("\n");
            sb.Append("  OutputContent: ").Append(OutputContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrintOutput);
        }

        /// <summary>
        /// Returns true if PrintOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of PrintOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrintOutput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DocumentQualifier == input.DocumentQualifier ||
                    this.DocumentQualifier.Equals(input.DocumentQualifier)
                ) && 
                (
                    this.ResponseMode == input.ResponseMode ||
                    this.ResponseMode.Equals(input.ResponseMode)
                ) && 
                (
                    this.IntegratedPrintFlag == input.IntegratedPrintFlag ||
                    this.IntegratedPrintFlag.Equals(input.IntegratedPrintFlag)
                ) && 
                (
                    this.RequiredSignatureFlag == input.RequiredSignatureFlag ||
                    this.RequiredSignatureFlag.Equals(input.RequiredSignatureFlag)
                ) && 
                (
                    this.OutputContent == input.OutputContent ||
                    (this.OutputContent != null &&
                    this.OutputContent.Equals(input.OutputContent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DocumentQualifier.GetHashCode();
                hashCode = (hashCode * 59) + this.ResponseMode.GetHashCode();
                hashCode = (hashCode * 59) + this.IntegratedPrintFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.RequiredSignatureFlag.GetHashCode();
                if (this.OutputContent != null)
                {
                    hashCode = (hashCode * 59) + this.OutputContent.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
