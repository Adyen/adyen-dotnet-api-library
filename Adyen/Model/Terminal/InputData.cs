/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// InputData
    /// </summary>
    [DataContract(Name = "InputData")]
    public partial class InputData : IEquatable<InputData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name = "Device", IsRequired = false, EmitDefaultValue = false)]
        public Device Device { get; set; }

        /// <summary>
        /// Gets or Sets InfoQualify
        /// </summary>
        [DataMember(Name = "InfoQualify", IsRequired = false, EmitDefaultValue = false)]
        public InfoQualify InfoQualify { get; set; }

        /// <summary>
        /// Gets or Sets InputCommand
        /// </summary>
        [DataMember(Name = "InputCommand", IsRequired = false, EmitDefaultValue = false)]
        public InputCommand InputCommand { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputData" /> class.
        /// </summary>
        /// <param name="device">device (required).</param>
        /// <param name="infoQualify">infoQualify (required).</param>
        /// <param name="inputCommand">inputCommand (required).</param>
        /// <param name="notifyCardInputFlag">notifyCardInputFlag (default to false).</param>
        /// <param name="maxInputTime">maxInputTime.</param>
        /// <param name="immediateResponseFlag">immediateResponseFlag (default to false).</param>
        /// <param name="minLength">minLength.</param>
        /// <param name="maxLength">maxLength.</param>
        /// <param name="maxDecimalLength">maxDecimalLength.</param>
        /// <param name="waitUserValidationFlag">waitUserValidationFlag (default to true).</param>
        /// <param name="defaultInputString">defaultInputString.</param>
        /// <param name="defaultLayoutString">defaultLayoutString.</param>
        /// <param name="stringMask">stringMask.</param>
        /// <param name="fromRightToLeftFlag">fromRightToLeftFlag (default to false).</param>
        /// <param name="maskCharactersFlag">maskCharactersFlag (default to false).</param>
        /// <param name="beepKeyFlag">beepKeyFlag (default to false).</param>
        /// <param name="globalCorrectionFlag">globalCorrectionFlag (default to false).</param>
        /// <param name="disableCancelFlag">disableCancelFlag (default to false).</param>
        /// <param name="disableCorrectFlag">disableCorrectFlag (default to false).</param>
        /// <param name="disableValidFlag">disableValidFlag (default to false).</param>
        /// <param name="menuBackFlag">menuBackFlag (default to false).</param>
        public InputData(Device device = default(Device), InfoQualify infoQualify = default(InfoQualify), InputCommand inputCommand = default(InputCommand), bool? notifyCardInputFlag = false, int? maxInputTime = default(int?), bool? immediateResponseFlag = false, int? minLength = default(int?), int? maxLength = default(int?), int? maxDecimalLength = default(int?), bool? waitUserValidationFlag = true, string defaultInputString = default(string), string defaultLayoutString = default(string), string stringMask = default(string), bool? fromRightToLeftFlag = false, bool? maskCharactersFlag = false, bool? beepKeyFlag = false, bool? globalCorrectionFlag = false, bool? disableCancelFlag = false, bool? disableCorrectFlag = false, bool? disableValidFlag = false, bool? menuBackFlag = false)
        {
            this.Device = device;
            this.InfoQualify = infoQualify;
            this.InputCommand = inputCommand;
            this.NotifyCardInputFlag = notifyCardInputFlag;
            this.MaxInputTime = maxInputTime;
            this.ImmediateResponseFlag = immediateResponseFlag;
            this.MinLength = minLength;
            this.MaxLength = maxLength;
            this.MaxDecimalLength = maxDecimalLength;
            this.WaitUserValidationFlag = waitUserValidationFlag;
            this.DefaultInputString = defaultInputString;
            this.DefaultLayoutString = defaultLayoutString;
            this.StringMask = stringMask;
            this.FromRightToLeftFlag = fromRightToLeftFlag;
            this.MaskCharactersFlag = maskCharactersFlag;
            this.BeepKeyFlag = beepKeyFlag;
            this.GlobalCorrectionFlag = globalCorrectionFlag;
            this.DisableCancelFlag = disableCancelFlag;
            this.DisableCorrectFlag = disableCorrectFlag;
            this.DisableValidFlag = disableValidFlag;
            this.MenuBackFlag = menuBackFlag;
        }

        /// <summary>
        /// Gets or Sets NotifyCardInputFlag
        /// </summary>
        [DataMember(Name = "NotifyCardInputFlag", EmitDefaultValue = false)]
        public bool? NotifyCardInputFlag { get; set; }

        /// <summary>
        /// Gets or Sets MaxInputTime
        /// </summary>
        [DataMember(Name = "MaxInputTime", EmitDefaultValue = false)]
        public int? MaxInputTime { get; set; }

        /// <summary>
        /// Gets or Sets ImmediateResponseFlag
        /// </summary>
        [DataMember(Name = "ImmediateResponseFlag", EmitDefaultValue = false)]
        public bool? ImmediateResponseFlag { get; set; }

        /// <summary>
        /// Gets or Sets MinLength
        /// </summary>
        [DataMember(Name = "MinLength", EmitDefaultValue = false)]
        public int? MinLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxLength
        /// </summary>
        [DataMember(Name = "MaxLength", EmitDefaultValue = false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxDecimalLength
        /// </summary>
        [DataMember(Name = "MaxDecimalLength", EmitDefaultValue = false)]
        public int? MaxDecimalLength { get; set; }

        /// <summary>
        /// Gets or Sets WaitUserValidationFlag
        /// </summary>
        [DataMember(Name = "WaitUserValidationFlag", EmitDefaultValue = false)]
        public bool? WaitUserValidationFlag { get; set; }

        /// <summary>
        /// Gets or Sets DefaultInputString
        /// </summary>
        [DataMember(Name = "DefaultInputString", EmitDefaultValue = false)]
        public string DefaultInputString { get; set; }

        /// <summary>
        /// Gets or Sets DefaultLayoutString
        /// </summary>
        [DataMember(Name = "DefaultLayoutString", EmitDefaultValue = false)]
        public string DefaultLayoutString { get; set; }

        /// <summary>
        /// Gets or Sets StringMask
        /// </summary>
        [DataMember(Name = "StringMask", EmitDefaultValue = false)]
        public string StringMask { get; set; }

        /// <summary>
        /// Gets or Sets FromRightToLeftFlag
        /// </summary>
        [DataMember(Name = "FromRightToLeftFlag", EmitDefaultValue = false)]
        public bool? FromRightToLeftFlag { get; set; }

        /// <summary>
        /// Gets or Sets MaskCharactersFlag
        /// </summary>
        [DataMember(Name = "MaskCharactersFlag", EmitDefaultValue = false)]
        public bool? MaskCharactersFlag { get; set; }

        /// <summary>
        /// Gets or Sets BeepKeyFlag
        /// </summary>
        [DataMember(Name = "BeepKeyFlag", EmitDefaultValue = false)]
        public bool? BeepKeyFlag { get; set; }

        /// <summary>
        /// Gets or Sets GlobalCorrectionFlag
        /// </summary>
        [DataMember(Name = "GlobalCorrectionFlag", EmitDefaultValue = false)]
        public bool? GlobalCorrectionFlag { get; set; }

        /// <summary>
        /// Gets or Sets DisableCancelFlag
        /// </summary>
        [DataMember(Name = "DisableCancelFlag", EmitDefaultValue = false)]
        public bool? DisableCancelFlag { get; set; }

        /// <summary>
        /// Gets or Sets DisableCorrectFlag
        /// </summary>
        [DataMember(Name = "DisableCorrectFlag", EmitDefaultValue = false)]
        public bool? DisableCorrectFlag { get; set; }

        /// <summary>
        /// Gets or Sets DisableValidFlag
        /// </summary>
        [DataMember(Name = "DisableValidFlag", EmitDefaultValue = false)]
        public bool? DisableValidFlag { get; set; }

        /// <summary>
        /// Gets or Sets MenuBackFlag
        /// </summary>
        [DataMember(Name = "MenuBackFlag", EmitDefaultValue = false)]
        public bool? MenuBackFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InputData {\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  InfoQualify: ").Append(InfoQualify).Append("\n");
            sb.Append("  InputCommand: ").Append(InputCommand).Append("\n");
            sb.Append("  NotifyCardInputFlag: ").Append(NotifyCardInputFlag).Append("\n");
            sb.Append("  MaxInputTime: ").Append(MaxInputTime).Append("\n");
            sb.Append("  ImmediateResponseFlag: ").Append(ImmediateResponseFlag).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MaxDecimalLength: ").Append(MaxDecimalLength).Append("\n");
            sb.Append("  WaitUserValidationFlag: ").Append(WaitUserValidationFlag).Append("\n");
            sb.Append("  DefaultInputString: ").Append(DefaultInputString).Append("\n");
            sb.Append("  DefaultLayoutString: ").Append(DefaultLayoutString).Append("\n");
            sb.Append("  StringMask: ").Append(StringMask).Append("\n");
            sb.Append("  FromRightToLeftFlag: ").Append(FromRightToLeftFlag).Append("\n");
            sb.Append("  MaskCharactersFlag: ").Append(MaskCharactersFlag).Append("\n");
            sb.Append("  BeepKeyFlag: ").Append(BeepKeyFlag).Append("\n");
            sb.Append("  GlobalCorrectionFlag: ").Append(GlobalCorrectionFlag).Append("\n");
            sb.Append("  DisableCancelFlag: ").Append(DisableCancelFlag).Append("\n");
            sb.Append("  DisableCorrectFlag: ").Append(DisableCorrectFlag).Append("\n");
            sb.Append("  DisableValidFlag: ").Append(DisableValidFlag).Append("\n");
            sb.Append("  MenuBackFlag: ").Append(MenuBackFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputData);
        }

        /// <summary>
        /// Returns true if InputData instances are equal
        /// </summary>
        /// <param name="input">Instance of InputData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Device == input.Device ||
                    this.Device.Equals(input.Device)
                ) && 
                (
                    this.InfoQualify == input.InfoQualify ||
                    this.InfoQualify.Equals(input.InfoQualify)
                ) && 
                (
                    this.InputCommand == input.InputCommand ||
                    this.InputCommand.Equals(input.InputCommand)
                ) && 
                (
                    this.NotifyCardInputFlag == input.NotifyCardInputFlag ||
                    this.NotifyCardInputFlag.Equals(input.NotifyCardInputFlag)
                ) && 
                (
                    this.MaxInputTime == input.MaxInputTime ||
                    this.MaxInputTime.Equals(input.MaxInputTime)
                ) && 
                (
                    this.ImmediateResponseFlag == input.ImmediateResponseFlag ||
                    this.ImmediateResponseFlag.Equals(input.ImmediateResponseFlag)
                ) && 
                (
                    this.MinLength == input.MinLength ||
                    this.MinLength.Equals(input.MinLength)
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    this.MaxLength.Equals(input.MaxLength)
                ) && 
                (
                    this.MaxDecimalLength == input.MaxDecimalLength ||
                    this.MaxDecimalLength.Equals(input.MaxDecimalLength)
                ) && 
                (
                    this.WaitUserValidationFlag == input.WaitUserValidationFlag ||
                    this.WaitUserValidationFlag.Equals(input.WaitUserValidationFlag)
                ) && 
                (
                    this.DefaultInputString == input.DefaultInputString ||
                    (this.DefaultInputString != null &&
                    this.DefaultInputString.Equals(input.DefaultInputString))
                ) && 
                (
                    this.DefaultLayoutString == input.DefaultLayoutString ||
                    (this.DefaultLayoutString != null &&
                    this.DefaultLayoutString.Equals(input.DefaultLayoutString))
                ) && 
                (
                    this.StringMask == input.StringMask ||
                    (this.StringMask != null &&
                    this.StringMask.Equals(input.StringMask))
                ) && 
                (
                    this.FromRightToLeftFlag == input.FromRightToLeftFlag ||
                    this.FromRightToLeftFlag.Equals(input.FromRightToLeftFlag)
                ) && 
                (
                    this.MaskCharactersFlag == input.MaskCharactersFlag ||
                    this.MaskCharactersFlag.Equals(input.MaskCharactersFlag)
                ) && 
                (
                    this.BeepKeyFlag == input.BeepKeyFlag ||
                    this.BeepKeyFlag.Equals(input.BeepKeyFlag)
                ) && 
                (
                    this.GlobalCorrectionFlag == input.GlobalCorrectionFlag ||
                    this.GlobalCorrectionFlag.Equals(input.GlobalCorrectionFlag)
                ) && 
                (
                    this.DisableCancelFlag == input.DisableCancelFlag ||
                    this.DisableCancelFlag.Equals(input.DisableCancelFlag)
                ) && 
                (
                    this.DisableCorrectFlag == input.DisableCorrectFlag ||
                    this.DisableCorrectFlag.Equals(input.DisableCorrectFlag)
                ) && 
                (
                    this.DisableValidFlag == input.DisableValidFlag ||
                    this.DisableValidFlag.Equals(input.DisableValidFlag)
                ) && 
                (
                    this.MenuBackFlag == input.MenuBackFlag ||
                    this.MenuBackFlag.Equals(input.MenuBackFlag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Device.GetHashCode();
                hashCode = (hashCode * 59) + this.InfoQualify.GetHashCode();
                hashCode = (hashCode * 59) + this.InputCommand.GetHashCode();
                hashCode = (hashCode * 59) + this.NotifyCardInputFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxInputTime.GetHashCode();
                hashCode = (hashCode * 59) + this.ImmediateResponseFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.MinLength.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxLength.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxDecimalLength.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitUserValidationFlag.GetHashCode();
                if (this.DefaultInputString != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultInputString.GetHashCode();
                }
                if (this.DefaultLayoutString != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultLayoutString.GetHashCode();
                }
                if (this.StringMask != null)
                {
                    hashCode = (hashCode * 59) + this.StringMask.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FromRightToLeftFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.MaskCharactersFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.BeepKeyFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.GlobalCorrectionFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableCancelFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableCorrectFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableValidFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.MenuBackFlag.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // DefaultInputString (string) pattern
            Regex regexDefaultInputString = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexDefaultInputString.Match(this.DefaultInputString).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultInputString, must match a pattern of " + regexDefaultInputString, new [] { "DefaultInputString" });
            }

            // DefaultLayoutString (string) pattern
            Regex regexDefaultLayoutString = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexDefaultLayoutString.Match(this.DefaultLayoutString).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultLayoutString, must match a pattern of " + regexDefaultLayoutString, new [] { "DefaultLayoutString" });
            }

            // StringMask (string) pattern
            Regex regexStringMask = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexStringMask.Match(this.StringMask).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StringMask, must match a pattern of " + regexStringMask, new [] { "StringMask" });
            }

            yield break;
        }
    }

}
