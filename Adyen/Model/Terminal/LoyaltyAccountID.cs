/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// In the Payment or the Loyalty Request message, it allows to identify the loyalty account by the Sale Terminal instead of the POI Terminal (e.g. because the account identification is a bar-code read by the Cashier on a scanner device). Identification of a Loyalty account.
    /// </summary>
    [DataContract(Name = "LoyaltyAccountID")]
    public partial class LoyaltyAccountID : IEquatable<LoyaltyAccountID>, IValidatableObject
    {
        /// <summary>
        /// Defines EntryMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntryModeEnum
        {
            /// <summary>
            /// Enum Contactless for value: Contactless
            /// </summary>
            [EnumMember(Value = "Contactless")]
            Contactless = 1,

            /// <summary>
            /// Enum File for value: File
            /// </summary>
            [EnumMember(Value = "File")]
            File = 2,

            /// <summary>
            /// Enum ICC for value: ICC
            /// </summary>
            [EnumMember(Value = "ICC")]
            ICC = 3,

            /// <summary>
            /// Enum Keyed for value: Keyed
            /// </summary>
            [EnumMember(Value = "Keyed")]
            Keyed = 4,

            /// <summary>
            /// Enum MagStripe for value: MagStripe
            /// </summary>
            [EnumMember(Value = "MagStripe")]
            MagStripe = 5,

            /// <summary>
            /// Enum Manual for value: Manual
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual = 6,

            /// <summary>
            /// Enum Mobile for value: Mobile
            /// </summary>
            [EnumMember(Value = "Mobile")]
            Mobile = 7,

            /// <summary>
            /// Enum RFID for value: RFID
            /// </summary>
            [EnumMember(Value = "RFID")]
            RFID = 8,

            /// <summary>
            /// Enum Scanned for value: Scanned
            /// </summary>
            [EnumMember(Value = "Scanned")]
            Scanned = 9,

            /// <summary>
            /// Enum SynchronousICC for value: SynchronousICC
            /// </summary>
            [EnumMember(Value = "SynchronousICC")]
            SynchronousICC = 10,

            /// <summary>
            /// Enum Tapped for value: Tapped
            /// </summary>
            [EnumMember(Value = "Tapped")]
            Tapped = 11

        }


        /// <summary>
        /// Gets or Sets IdentificationType
        /// </summary>
        [DataMember(Name = "IdentificationType", IsRequired = false, EmitDefaultValue = false)]
        public IdentificationType IdentificationType { get; set; }

        /// <summary>
        /// Gets or Sets IdentificationSupport
        /// </summary>
        [DataMember(Name = "IdentificationSupport", EmitDefaultValue = false)]
        public IdentificationSupport? IdentificationSupport { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyAccountID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoyaltyAccountID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyAccountID" /> class.
        /// </summary>
        /// <param name="entryMode">entryMode (required).</param>
        /// <param name="identificationType">identificationType (required).</param>
        /// <param name="identificationSupport">identificationSupport.</param>
        /// <param name="loyaltyID">loyaltyID (required).</param>
        public LoyaltyAccountID(List<EntryModeEnum> entryMode = default(List<EntryModeEnum>), IdentificationType identificationType = default(IdentificationType), IdentificationSupport? identificationSupport = default(IdentificationSupport?), string loyaltyID = default(string))
        {
            this.EntryMode = entryMode;
            this.IdentificationType = identificationType;
            this.LoyaltyID = loyaltyID;
            this.IdentificationSupport = identificationSupport;
        }

        /// <summary>
        /// Gets or Sets EntryMode
        /// </summary>
        [DataMember(Name = "EntryMode", IsRequired = false, EmitDefaultValue = false)]
        public List<LoyaltyAccountID.EntryModeEnum> EntryMode { get; set; }

        /// <summary>
        /// Gets or Sets LoyaltyID
        /// </summary>
        [DataMember(Name = "LoyaltyID", IsRequired = false, EmitDefaultValue = false)]
        public string LoyaltyID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyAccountID {\n");
            sb.Append("  EntryMode: ").Append(EntryMode).Append("\n");
            sb.Append("  IdentificationType: ").Append(IdentificationType).Append("\n");
            sb.Append("  IdentificationSupport: ").Append(IdentificationSupport).Append("\n");
            sb.Append("  LoyaltyID: ").Append(LoyaltyID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoyaltyAccountID);
        }

        /// <summary>
        /// Returns true if LoyaltyAccountID instances are equal
        /// </summary>
        /// <param name="input">Instance of LoyaltyAccountID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyAccountID input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryMode == input.EntryMode ||
                    this.EntryMode != null &&
                    input.EntryMode != null &&
                    this.EntryMode.SequenceEqual(input.EntryMode)
                ) && 
                (
                    this.IdentificationType == input.IdentificationType ||
                    this.IdentificationType.Equals(input.IdentificationType)
                ) && 
                (
                    this.IdentificationSupport == input.IdentificationSupport ||
                    this.IdentificationSupport.Equals(input.IdentificationSupport)
                ) && 
                (
                    this.LoyaltyID == input.LoyaltyID ||
                    (this.LoyaltyID != null &&
                    this.LoyaltyID.Equals(input.LoyaltyID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryMode != null)
                {
                    hashCode = (hashCode * 59) + this.EntryMode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IdentificationType.GetHashCode();
                hashCode = (hashCode * 59) + this.IdentificationSupport.GetHashCode();
                if (this.LoyaltyID != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyID.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
