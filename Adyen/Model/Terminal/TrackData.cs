/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// ISO 7813 - ISO 4909.  Generic data structure for a card track, used when the magstripe card reader is located on the Sale Terminal, or for magstripe Card Reader device request. The data structure is also used to store the line at the bottom of a bank check. Magnetic track or magnetic ink characters line.
    /// </summary>
    [DataContract(Name = "TrackData")]
    public partial class TrackData : IEquatable<TrackData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TrackFormat
        /// </summary>
        [DataMember(Name = "TrackFormat", EmitDefaultValue = false)]
        public TrackFormat? TrackFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrackData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackData" /> class.
        /// </summary>
        /// <param name="trackNumb">trackNumb (default to 2).</param>
        /// <param name="trackFormat">trackFormat.</param>
        /// <param name="trackValue">trackValue (required).</param>
        public TrackData(int? trackNumb = 2, TrackFormat? trackFormat = default(TrackFormat?), string trackValue = default(string))
        {
            this.TrackValue = trackValue;
            this.TrackNumb = trackNumb;
            this.TrackFormat = trackFormat;
        }

        /// <summary>
        /// Gets or Sets TrackNumb
        /// </summary>
        [DataMember(Name = "TrackNumb", EmitDefaultValue = false)]
        public int? TrackNumb { get; set; }

        /// <summary>
        /// Gets or Sets TrackValue
        /// </summary>
        [DataMember(Name = "TrackValue", IsRequired = false, EmitDefaultValue = false)]
        public string TrackValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackData {\n");
            sb.Append("  TrackNumb: ").Append(TrackNumb).Append("\n");
            sb.Append("  TrackFormat: ").Append(TrackFormat).Append("\n");
            sb.Append("  TrackValue: ").Append(TrackValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackData);
        }

        /// <summary>
        /// Returns true if TrackData instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TrackNumb == input.TrackNumb ||
                    this.TrackNumb.Equals(input.TrackNumb)
                ) && 
                (
                    this.TrackFormat == input.TrackFormat ||
                    this.TrackFormat.Equals(input.TrackFormat)
                ) && 
                (
                    this.TrackValue == input.TrackValue ||
                    (this.TrackValue != null &&
                    this.TrackValue.Equals(input.TrackValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TrackNumb.GetHashCode();
                hashCode = (hashCode * 59) + this.TrackFormat.GetHashCode();
                if (this.TrackValue != null)
                {
                    hashCode = (hashCode * 59) + this.TrackValue.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // TrackNumb (int) maximum
            if (this.TrackNumb > (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackNumb, must be a value less than or equal to 3.", new [] { "TrackNumb" });
            }

            // TrackNumb (int) minimum
            if (this.TrackNumb < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackNumb, must be a value greater than or equal to 1.", new [] { "TrackNumb" });
            }

            // TrackValue (string) pattern
            Regex regexTrackValue = new Regex(@"^.{1,104}$", RegexOptions.CultureInvariant);
            if (false == regexTrackValue.Match(this.TrackValue).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackValue, must match a pattern of " + regexTrackValue, new [] { "TrackValue" });
            }

            yield break;
        }
    }

}
