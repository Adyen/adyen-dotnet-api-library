/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Allows the check information to be provided by the Sale System before requesting the payment, or stored by the Sale System after processing of the payment. Information related to the paper check used for the transaction.
    /// </summary>
    [DataContract(Name = "CheckData")]
    public partial class CheckData : IEquatable<CheckData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TypeCode
        /// </summary>
        [DataMember(Name = "TypeCode", EmitDefaultValue = false)]
        public TypeCode? TypeCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckData" /> class.
        /// </summary>
        /// <param name="bankID">Mandatory if TrackData absent..</param>
        /// <param name="accountNumber">Mandatory if TrackData absent..</param>
        /// <param name="checkNumber">Mandatory if TrackData absent..</param>
        /// <param name="trackData">trackData.</param>
        /// <param name="checkCardNumber">If provided by the customer..</param>
        /// <param name="typeCode">typeCode.</param>
        /// <param name="country">Absent if country of the Sale system..</param>
        public CheckData(string bankID = default(string), string accountNumber = default(string), string checkNumber = default(string), TrackData trackData = default(TrackData), string checkCardNumber = default(string), TypeCode? typeCode = default(TypeCode?), string country = default(string))
        {
            this.BankID = bankID;
            this.AccountNumber = accountNumber;
            this.CheckNumber = checkNumber;
            this.TrackData = trackData;
            this.CheckCardNumber = checkCardNumber;
            this.TypeCode = typeCode;
            this.Country = country;
        }

        /// <summary>
        /// Mandatory if TrackData absent.
        /// </summary>
        /// <value>Mandatory if TrackData absent.</value>
        [DataMember(Name = "BankID", EmitDefaultValue = false)]
        public string BankID { get; set; }

        /// <summary>
        /// Mandatory if TrackData absent.
        /// </summary>
        /// <value>Mandatory if TrackData absent.</value>
        [DataMember(Name = "AccountNumber", EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Mandatory if TrackData absent.
        /// </summary>
        /// <value>Mandatory if TrackData absent.</value>
        [DataMember(Name = "CheckNumber", EmitDefaultValue = false)]
        public string CheckNumber { get; set; }

        /// <summary>
        /// Gets or Sets TrackData
        /// </summary>
        [DataMember(Name = "TrackData", EmitDefaultValue = false)]
        public TrackData TrackData { get; set; }

        /// <summary>
        /// If provided by the customer.
        /// </summary>
        /// <value>If provided by the customer.</value>
        [DataMember(Name = "CheckCardNumber", EmitDefaultValue = false)]
        public string CheckCardNumber { get; set; }

        /// <summary>
        /// Absent if country of the Sale system.
        /// </summary>
        /// <value>Absent if country of the Sale system.</value>
        [DataMember(Name = "Country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckData {\n");
            sb.Append("  BankID: ").Append(BankID).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  CheckNumber: ").Append(CheckNumber).Append("\n");
            sb.Append("  TrackData: ").Append(TrackData).Append("\n");
            sb.Append("  CheckCardNumber: ").Append(CheckCardNumber).Append("\n");
            sb.Append("  TypeCode: ").Append(TypeCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckData);
        }

        /// <summary>
        /// Returns true if CheckData instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BankID == input.BankID ||
                    (this.BankID != null &&
                    this.BankID.Equals(input.BankID))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.CheckNumber == input.CheckNumber ||
                    (this.CheckNumber != null &&
                    this.CheckNumber.Equals(input.CheckNumber))
                ) && 
                (
                    this.TrackData == input.TrackData ||
                    (this.TrackData != null &&
                    this.TrackData.Equals(input.TrackData))
                ) && 
                (
                    this.CheckCardNumber == input.CheckCardNumber ||
                    (this.CheckCardNumber != null &&
                    this.CheckCardNumber.Equals(input.CheckCardNumber))
                ) && 
                (
                    this.TypeCode == input.TypeCode ||
                    this.TypeCode.Equals(input.TypeCode)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankID != null)
                {
                    hashCode = (hashCode * 59) + this.BankID.GetHashCode();
                }
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                if (this.CheckNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CheckNumber.GetHashCode();
                }
                if (this.TrackData != null)
                {
                    hashCode = (hashCode * 59) + this.TrackData.GetHashCode();
                }
                if (this.CheckCardNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CheckCardNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TypeCode.GetHashCode();
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // BankID (string) pattern
            Regex regexBankID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexBankID.Match(this.BankID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankID, must match a pattern of " + regexBankID, new [] { "BankID" });
            }

            // AccountNumber (string) pattern
            Regex regexAccountNumber = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexAccountNumber.Match(this.AccountNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountNumber, must match a pattern of " + regexAccountNumber, new [] { "AccountNumber" });
            }

            // CheckNumber (string) pattern
            Regex regexCheckNumber = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexCheckNumber.Match(this.CheckNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CheckNumber, must match a pattern of " + regexCheckNumber, new [] { "CheckNumber" });
            }

            // CheckCardNumber (string) pattern
            Regex regexCheckCardNumber = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexCheckCardNumber.Match(this.CheckCardNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CheckCardNumber, must match a pattern of " + regexCheckCardNumber, new [] { "CheckCardNumber" });
            }

            // Country (string) pattern
            Regex regexCountry = new Regex(@"^[A-Z]{3,3}$", RegexOptions.CultureInvariant);
            if (false == regexCountry.Match(this.Country).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, must match a pattern of " + regexCountry, new [] { "Country" });
            }

            yield break;
        }
    }

}
