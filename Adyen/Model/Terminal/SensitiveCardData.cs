/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// This data structure could be CMS protected (EnvelopedData). In this case the data structure SensitiveCardData is replaced by the data structure ProtectedCardData of type ContentInformationType. When this data is protected, the exact content is unknown by the Sale System, and might include all the information which are required by an external backup POI Server to make a batch payment transaction in case of problem with the POI System. Sensitive information related to the payment card, entered or read by the Sale System.
    /// </summary>
    [DataContract(Name = "SensitiveCardData")]
    public partial class SensitiveCardData : IEquatable<SensitiveCardData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SensitiveCardData" /> class.
        /// </summary>
        /// <param name="pAN">pAN.</param>
        /// <param name="cardSeqNumb">if EntryMode is File, Keyed or Manual..</param>
        /// <param name="expiryDate">if EntryMode is File..</param>
        /// <param name="trackData">trackData.</param>
        public SensitiveCardData(int? pAN = default(int?), int? cardSeqNumb = default(int?), int? expiryDate = default(int?), List<TrackData> trackData = default(List<TrackData>))
        {
            this.PAN = pAN;
            this.CardSeqNumb = cardSeqNumb;
            this.ExpiryDate = expiryDate;
            this.TrackData = trackData;
        }

        /// <summary>
        /// Gets or Sets PAN
        /// </summary>
        [DataMember(Name = "PAN", EmitDefaultValue = false)]
        public int? PAN { get; set; }

        /// <summary>
        /// if EntryMode is File, Keyed or Manual.
        /// </summary>
        /// <value>if EntryMode is File, Keyed or Manual.</value>
        [DataMember(Name = "CardSeqNumb", EmitDefaultValue = false)]
        public int? CardSeqNumb { get; set; }

        /// <summary>
        /// if EntryMode is File.
        /// </summary>
        /// <value>if EntryMode is File.</value>
        [DataMember(Name = "ExpiryDate", EmitDefaultValue = false)]
        public int? ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets TrackData
        /// </summary>
        [DataMember(Name = "TrackData", EmitDefaultValue = false)]
        public List<TrackData> TrackData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SensitiveCardData {\n");
            sb.Append("  PAN: ").Append(PAN).Append("\n");
            sb.Append("  CardSeqNumb: ").Append(CardSeqNumb).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  TrackData: ").Append(TrackData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SensitiveCardData);
        }

        /// <summary>
        /// Returns true if SensitiveCardData instances are equal
        /// </summary>
        /// <param name="input">Instance of SensitiveCardData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SensitiveCardData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PAN == input.PAN ||
                    this.PAN.Equals(input.PAN)
                ) && 
                (
                    this.CardSeqNumb == input.CardSeqNumb ||
                    this.CardSeqNumb.Equals(input.CardSeqNumb)
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    this.ExpiryDate.Equals(input.ExpiryDate)
                ) && 
                (
                    this.TrackData == input.TrackData ||
                    this.TrackData != null &&
                    input.TrackData != null &&
                    this.TrackData.SequenceEqual(input.TrackData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PAN.GetHashCode();
                hashCode = (hashCode * 59) + this.CardSeqNumb.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpiryDate.GetHashCode();
                if (this.TrackData != null)
                {
                    hashCode = (hashCode * 59) + this.TrackData.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PAN (int) maximum
            if (this.PAN > (int)28)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PAN, must be a value less than or equal to 28.", new [] { "PAN" });
            }

            // PAN (int) minimum
            if (this.PAN < (int)8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PAN, must be a value greater than or equal to 8.", new [] { "PAN" });
            }

            // CardSeqNumb (int) maximum
            if (this.CardSeqNumb > (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardSeqNumb, must be a value less than or equal to 3.", new [] { "CardSeqNumb" });
            }

            // CardSeqNumb (int) minimum
            if (this.CardSeqNumb < (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardSeqNumb, must be a value greater than or equal to 2.", new [] { "CardSeqNumb" });
            }

            // ExpiryDate (int) maximum
            if (this.ExpiryDate > (int)4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryDate, must be a value less than or equal to 4.", new [] { "ExpiryDate" });
            }

            // ExpiryDate (int) minimum
            if (this.ExpiryDate < (int)4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryDate, must be a value greater than or equal to 4.", new [] { "ExpiryDate" });
            }

            yield break;
        }
    }

}
