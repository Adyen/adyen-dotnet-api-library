/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Instalment
    /// </summary>
    [DataContract(Name = "Instalment")]
    public partial class Instalment : IEquatable<Instalment>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets InstalmentType
        /// </summary>
        [DataMember(Name = "InstalmentType", EmitDefaultValue = false)]
        public InstalmentType? InstalmentType { get; set; }

        /// <summary>
        /// Gets or Sets PeriodUnit
        /// </summary>
        [DataMember(Name = "PeriodUnit", EmitDefaultValue = false)]
        public PeriodUnit? PeriodUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Instalment" /> class.
        /// </summary>
        /// <param name="instalmentType">instalmentType.</param>
        /// <param name="sequenceNumber">sequenceNumber.</param>
        /// <param name="planID">planID.</param>
        /// <param name="period">period.</param>
        /// <param name="periodUnit">periodUnit.</param>
        /// <param name="firstPaymentDate">firstPaymentDate.</param>
        /// <param name="totalNbOfPayments">totalNbOfPayments.</param>
        /// <param name="cumulativeAmount">cumulativeAmount.</param>
        /// <param name="firstAmount">firstAmount.</param>
        /// <param name="charges">charges.</param>
        public Instalment(InstalmentType? instalmentType = default(InstalmentType?), int? sequenceNumber = default(int?), string planID = default(string), int? period = default(int?), PeriodUnit? periodUnit = default(PeriodUnit?), DateTime firstPaymentDate = default(DateTime), int? totalNbOfPayments = default(int?), decimal? cumulativeAmount = default(decimal?), decimal? firstAmount = default(decimal?), decimal? charges = default(decimal?))
        {
            this.InstalmentType = instalmentType;
            this.SequenceNumber = sequenceNumber;
            this.PlanID = planID;
            this.Period = period;
            this.PeriodUnit = periodUnit;
            this.FirstPaymentDate = firstPaymentDate;
            this.TotalNbOfPayments = totalNbOfPayments;
            this.CumulativeAmount = cumulativeAmount;
            this.FirstAmount = firstAmount;
            this.Charges = charges;
        }

        /// <summary>
        /// Gets or Sets SequenceNumber
        /// </summary>
        [DataMember(Name = "SequenceNumber", EmitDefaultValue = false)]
        public int? SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets PlanID
        /// </summary>
        [DataMember(Name = "PlanID", EmitDefaultValue = false)]
        public string PlanID { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "Period", EmitDefaultValue = false)]
        public int? Period { get; set; }

        /// <summary>
        /// Gets or Sets FirstPaymentDate
        /// </summary>
        [DataMember(Name = "FirstPaymentDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime FirstPaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets TotalNbOfPayments
        /// </summary>
        [DataMember(Name = "TotalNbOfPayments", EmitDefaultValue = false)]
        public int? TotalNbOfPayments { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeAmount
        /// </summary>
        [DataMember(Name = "CumulativeAmount", EmitDefaultValue = false)]
        public decimal? CumulativeAmount { get; set; }

        /// <summary>
        /// Gets or Sets FirstAmount
        /// </summary>
        [DataMember(Name = "FirstAmount", EmitDefaultValue = false)]
        public decimal? FirstAmount { get; set; }

        /// <summary>
        /// Gets or Sets Charges
        /// </summary>
        [DataMember(Name = "Charges", EmitDefaultValue = false)]
        public decimal? Charges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Instalment {\n");
            sb.Append("  InstalmentType: ").Append(InstalmentType).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  PlanID: ").Append(PlanID).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PeriodUnit: ").Append(PeriodUnit).Append("\n");
            sb.Append("  FirstPaymentDate: ").Append(FirstPaymentDate).Append("\n");
            sb.Append("  TotalNbOfPayments: ").Append(TotalNbOfPayments).Append("\n");
            sb.Append("  CumulativeAmount: ").Append(CumulativeAmount).Append("\n");
            sb.Append("  FirstAmount: ").Append(FirstAmount).Append("\n");
            sb.Append("  Charges: ").Append(Charges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Instalment);
        }

        /// <summary>
        /// Returns true if Instalment instances are equal
        /// </summary>
        /// <param name="input">Instance of Instalment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Instalment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstalmentType == input.InstalmentType ||
                    this.InstalmentType.Equals(input.InstalmentType)
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.PlanID == input.PlanID ||
                    (this.PlanID != null &&
                    this.PlanID.Equals(input.PlanID))
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                ) && 
                (
                    this.PeriodUnit == input.PeriodUnit ||
                    this.PeriodUnit.Equals(input.PeriodUnit)
                ) && 
                (
                    this.FirstPaymentDate == input.FirstPaymentDate ||
                    (this.FirstPaymentDate != null &&
                    this.FirstPaymentDate.Equals(input.FirstPaymentDate))
                ) && 
                (
                    this.TotalNbOfPayments == input.TotalNbOfPayments ||
                    this.TotalNbOfPayments.Equals(input.TotalNbOfPayments)
                ) && 
                (
                    this.CumulativeAmount == input.CumulativeAmount ||
                    this.CumulativeAmount.Equals(input.CumulativeAmount)
                ) && 
                (
                    this.FirstAmount == input.FirstAmount ||
                    this.FirstAmount.Equals(input.FirstAmount)
                ) && 
                (
                    this.Charges == input.Charges ||
                    this.Charges.Equals(input.Charges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.InstalmentType.GetHashCode();
                hashCode = (hashCode * 59) + this.SequenceNumber.GetHashCode();
                if (this.PlanID != null)
                {
                    hashCode = (hashCode * 59) + this.PlanID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Period.GetHashCode();
                hashCode = (hashCode * 59) + this.PeriodUnit.GetHashCode();
                if (this.FirstPaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.FirstPaymentDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalNbOfPayments.GetHashCode();
                hashCode = (hashCode * 59) + this.CumulativeAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.FirstAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.Charges.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PlanID (string) pattern
            Regex regexPlanID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexPlanID.Match(this.PlanID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlanID, must match a pattern of " + regexPlanID, new [] { "PlanID" });
            }

            // CumulativeAmount (decimal) maximum
            if (this.CumulativeAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CumulativeAmount, must be a value less than or equal to 99999999.999999.", new [] { "CumulativeAmount" });
            }

            // CumulativeAmount (decimal) minimum
            if (this.CumulativeAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CumulativeAmount, must be a value greater than or equal to 0.0.", new [] { "CumulativeAmount" });
            }

            // FirstAmount (decimal) maximum
            if (this.FirstAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstAmount, must be a value less than or equal to 99999999.999999.", new [] { "FirstAmount" });
            }

            // FirstAmount (decimal) minimum
            if (this.FirstAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstAmount, must be a value greater than or equal to 0.0.", new [] { "FirstAmount" });
            }

            // Charges (decimal) maximum
            if (this.Charges > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Charges, must be a value less than or equal to 99999999.999999.", new [] { "Charges" });
            }

            // Charges (decimal) minimum
            if (this.Charges < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Charges, must be a value greater than or equal to 0.0.", new [] { "Charges" });
            }

            yield break;
        }
    }

}
