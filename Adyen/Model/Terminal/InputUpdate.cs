/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Definition: Content of the Input Update message. : It conveys     update of the display of an Input request in progress.
    /// </summary>
    [DataContract(Name = "InputUpdate")]
    public partial class InputUpdate : IEquatable<InputUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputUpdate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputUpdate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputUpdate" /> class.
        /// </summary>
        /// <param name="messageReference">messageReference (required).</param>
        /// <param name="outputContent">outputContent (required).</param>
        /// <param name="menuEntry">menuEntry.</param>
        /// <param name="outputSignature">outputSignature.</param>
        /// <param name="minLength">minLength.</param>
        /// <param name="maxLength">maxLength.</param>
        /// <param name="maxDecimalLength">maxDecimalLength.</param>
        public InputUpdate(MessageReference messageReference = default(MessageReference), OutputContent outputContent = default(OutputContent), List<MenuEntry> menuEntry = default(List<MenuEntry>), byte[] outputSignature = default(byte[]), int? minLength = default(int?), int? maxLength = default(int?), int? maxDecimalLength = default(int?))
        {
            this.MessageReference = messageReference;
            this.OutputContent = outputContent;
            this.MenuEntry = menuEntry;
            this.OutputSignature = outputSignature;
            this.MinLength = minLength;
            this.MaxLength = maxLength;
            this.MaxDecimalLength = maxDecimalLength;
        }

        /// <summary>
        /// Gets or Sets MessageReference
        /// </summary>
        [DataMember(Name = "MessageReference", IsRequired = false, EmitDefaultValue = false)]
        public MessageReference MessageReference { get; set; }

        /// <summary>
        /// Gets or Sets OutputContent
        /// </summary>
        [DataMember(Name = "OutputContent", IsRequired = false, EmitDefaultValue = false)]
        public OutputContent OutputContent { get; set; }

        /// <summary>
        /// Gets or Sets MenuEntry
        /// </summary>
        [DataMember(Name = "MenuEntry", EmitDefaultValue = false)]
        public List<MenuEntry> MenuEntry { get; set; }

        /// <summary>
        /// Gets or Sets OutputSignature
        /// </summary>
        [DataMember(Name = "OutputSignature", EmitDefaultValue = false)]
        public byte[] OutputSignature { get; set; }

        /// <summary>
        /// Gets or Sets MinLength
        /// </summary>
        [DataMember(Name = "MinLength", EmitDefaultValue = false)]
        public int? MinLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxLength
        /// </summary>
        [DataMember(Name = "MaxLength", EmitDefaultValue = false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxDecimalLength
        /// </summary>
        [DataMember(Name = "MaxDecimalLength", EmitDefaultValue = false)]
        public int? MaxDecimalLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InputUpdate {\n");
            sb.Append("  MessageReference: ").Append(MessageReference).Append("\n");
            sb.Append("  OutputContent: ").Append(OutputContent).Append("\n");
            sb.Append("  MenuEntry: ").Append(MenuEntry).Append("\n");
            sb.Append("  OutputSignature: ").Append(OutputSignature).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MaxDecimalLength: ").Append(MaxDecimalLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputUpdate);
        }

        /// <summary>
        /// Returns true if InputUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of InputUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputUpdate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MessageReference == input.MessageReference ||
                    (this.MessageReference != null &&
                    this.MessageReference.Equals(input.MessageReference))
                ) && 
                (
                    this.OutputContent == input.OutputContent ||
                    (this.OutputContent != null &&
                    this.OutputContent.Equals(input.OutputContent))
                ) && 
                (
                    this.MenuEntry == input.MenuEntry ||
                    this.MenuEntry != null &&
                    input.MenuEntry != null &&
                    this.MenuEntry.SequenceEqual(input.MenuEntry)
                ) && 
                (
                    this.OutputSignature == input.OutputSignature ||
                    (this.OutputSignature != null &&
                    this.OutputSignature.Equals(input.OutputSignature))
                ) && 
                (
                    this.MinLength == input.MinLength ||
                    this.MinLength.Equals(input.MinLength)
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    this.MaxLength.Equals(input.MaxLength)
                ) && 
                (
                    this.MaxDecimalLength == input.MaxDecimalLength ||
                    this.MaxDecimalLength.Equals(input.MaxDecimalLength)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MessageReference != null)
                {
                    hashCode = (hashCode * 59) + this.MessageReference.GetHashCode();
                }
                if (this.OutputContent != null)
                {
                    hashCode = (hashCode * 59) + this.OutputContent.GetHashCode();
                }
                if (this.MenuEntry != null)
                {
                    hashCode = (hashCode * 59) + this.MenuEntry.GetHashCode();
                }
                if (this.OutputSignature != null)
                {
                    hashCode = (hashCode * 59) + this.OutputSignature.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MinLength.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxLength.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxDecimalLength.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
