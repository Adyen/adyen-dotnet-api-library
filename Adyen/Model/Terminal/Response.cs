/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// If Result is Success, ErrorCondition is absent or not used in the processing of the message. In the other cases, the ErrorCondition has to be present and can refine the processing of the message response. AdditionalResponse gives more information about the success or the failure of the message request processing, for logging without real time involvements. Result of a message request processing.
    /// </summary>
    [DataContract(Name = "Response")]
    public partial class Response : IEquatable<Response>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "Result", IsRequired = false, EmitDefaultValue = false)]
        public Result Result { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCondition
        /// </summary>
        [DataMember(Name = "ErrorCondition", EmitDefaultValue = false)]
        public ErrorCondition? ErrorCondition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Response" /> class.
        /// </summary>
        /// <param name="result">result (required).</param>
        /// <param name="errorCondition">errorCondition.</param>
        /// <param name="additionalResponse">If present, the POI logs it for further examination..</param>
        public Response(Result result = default(Result), ErrorCondition? errorCondition = default(ErrorCondition?), string additionalResponse = default(string))
        {
            this.Result = result;
            this.ErrorCondition = errorCondition;
            this.AdditionalResponse = additionalResponse;
        }

        /// <summary>
        /// If present, the POI logs it for further examination.
        /// </summary>
        /// <value>If present, the POI logs it for further examination.</value>
        [DataMember(Name = "AdditionalResponse", EmitDefaultValue = false)]
        public string AdditionalResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Response {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  ErrorCondition: ").Append(ErrorCondition).Append("\n");
            sb.Append("  AdditionalResponse: ").Append(AdditionalResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Response);
        }

        /// <summary>
        /// Returns true if Response instances are equal
        /// </summary>
        /// <param name="input">Instance of Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Result == input.Result ||
                    this.Result.Equals(input.Result)
                ) && 
                (
                    this.ErrorCondition == input.ErrorCondition ||
                    this.ErrorCondition.Equals(input.ErrorCondition)
                ) && 
                (
                    this.AdditionalResponse == input.AdditionalResponse ||
                    (this.AdditionalResponse != null &&
                    this.AdditionalResponse.Equals(input.AdditionalResponse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Result.GetHashCode();
                hashCode = (hashCode * 59) + this.ErrorCondition.GetHashCode();
                if (this.AdditionalResponse != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalResponse.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // AdditionalResponse (string) pattern
            Regex regexAdditionalResponse = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexAdditionalResponse.Match(this.AdditionalResponse).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdditionalResponse, must match a pattern of " + regexAdditionalResponse, new [] { "AdditionalResponse" });
            }

            yield break;
        }
    }

}
