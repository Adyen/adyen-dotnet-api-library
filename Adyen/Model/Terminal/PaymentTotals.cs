/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Totals of the payment transaction during the reconciliation period.
    /// </summary>
    [DataContract(Name = "PaymentTotals")]
    public partial class PaymentTotals : IEquatable<PaymentTotals>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name = "TransactionType", IsRequired = false, EmitDefaultValue = false)]
        public TransactionType TransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTotals" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentTotals() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTotals" /> class.
        /// </summary>
        /// <param name="transactionType">transactionType (required).</param>
        /// <param name="transactionCount">Number of processed transaction during the period. (required).</param>
        /// <param name="transactionAmount">Sum of amount of processed transaction during the period. (required).</param>
        public PaymentTotals(TransactionType transactionType = default(TransactionType), int? transactionCount = default(int?), decimal? transactionAmount = default(decimal?))
        {
            this.TransactionType = transactionType;
            this.TransactionCount = transactionCount;
            this.TransactionAmount = transactionAmount;
        }

        /// <summary>
        /// Number of processed transaction during the period.
        /// </summary>
        /// <value>Number of processed transaction during the period.</value>
        [DataMember(Name = "TransactionCount", IsRequired = false, EmitDefaultValue = false)]
        public int? TransactionCount { get; set; }

        /// <summary>
        /// Sum of amount of processed transaction during the period.
        /// </summary>
        /// <value>Sum of amount of processed transaction during the period.</value>
        [DataMember(Name = "TransactionAmount", IsRequired = false, EmitDefaultValue = false)]
        public decimal? TransactionAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentTotals {\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  TransactionCount: ").Append(TransactionCount).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentTotals);
        }

        /// <summary>
        /// Returns true if PaymentTotals instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentTotals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentTotals input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionType == input.TransactionType ||
                    this.TransactionType.Equals(input.TransactionType)
                ) && 
                (
                    this.TransactionCount == input.TransactionCount ||
                    this.TransactionCount.Equals(input.TransactionCount)
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    this.TransactionAmount.Equals(input.TransactionAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TransactionType.GetHashCode();
                hashCode = (hashCode * 59) + this.TransactionCount.GetHashCode();
                hashCode = (hashCode * 59) + this.TransactionAmount.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // TransactionAmount (decimal) maximum
            if (this.TransactionAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionAmount, must be a value less than or equal to 99999999.999999.", new [] { "TransactionAmount" });
            }

            // TransactionAmount (decimal) minimum
            if (this.TransactionAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionAmount, must be a value greater than or equal to 0.0.", new [] { "TransactionAmount" });
            }

            yield break;
        }
    }

}
