/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// LoyaltyAccountStatus
    /// </summary>
    [DataContract(Name = "LoyaltyAccountStatus")]
    public partial class LoyaltyAccountStatus : IEquatable<LoyaltyAccountStatus>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LoyaltyUnit
        /// </summary>
        [DataMember(Name = "LoyaltyUnit", EmitDefaultValue = false)]
        public LoyaltyUnit? LoyaltyUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyAccountStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoyaltyAccountStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyAccountStatus" /> class.
        /// </summary>
        /// <param name="loyaltyAccount">loyaltyAccount (required).</param>
        /// <param name="currentBalance">currentBalance.</param>
        /// <param name="loyaltyUnit">loyaltyUnit.</param>
        /// <param name="currency">currency.</param>
        public LoyaltyAccountStatus(LoyaltyAccount loyaltyAccount = default(LoyaltyAccount), decimal? currentBalance = default(decimal?), LoyaltyUnit? loyaltyUnit = default(LoyaltyUnit?), string currency = default(string))
        {
            this.LoyaltyAccount = loyaltyAccount;
            this.CurrentBalance = currentBalance;
            this.LoyaltyUnit = loyaltyUnit;
            this.Currency = currency;
        }

        /// <summary>
        /// Gets or Sets LoyaltyAccount
        /// </summary>
        [DataMember(Name = "LoyaltyAccount", IsRequired = false, EmitDefaultValue = false)]
        public LoyaltyAccount LoyaltyAccount { get; set; }

        /// <summary>
        /// Gets or Sets CurrentBalance
        /// </summary>
        [DataMember(Name = "CurrentBalance", EmitDefaultValue = false)]
        public decimal? CurrentBalance { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyAccountStatus {\n");
            sb.Append("  LoyaltyAccount: ").Append(LoyaltyAccount).Append("\n");
            sb.Append("  CurrentBalance: ").Append(CurrentBalance).Append("\n");
            sb.Append("  LoyaltyUnit: ").Append(LoyaltyUnit).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoyaltyAccountStatus);
        }

        /// <summary>
        /// Returns true if LoyaltyAccountStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of LoyaltyAccountStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyAccountStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LoyaltyAccount == input.LoyaltyAccount ||
                    (this.LoyaltyAccount != null &&
                    this.LoyaltyAccount.Equals(input.LoyaltyAccount))
                ) && 
                (
                    this.CurrentBalance == input.CurrentBalance ||
                    this.CurrentBalance.Equals(input.CurrentBalance)
                ) && 
                (
                    this.LoyaltyUnit == input.LoyaltyUnit ||
                    this.LoyaltyUnit.Equals(input.LoyaltyUnit)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoyaltyAccount != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyAccount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentBalance.GetHashCode();
                hashCode = (hashCode * 59) + this.LoyaltyUnit.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CurrentBalance (decimal) maximum
            if (this.CurrentBalance > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentBalance, must be a value less than or equal to 99999999.999999.", new [] { "CurrentBalance" });
            }

            // CurrentBalance (decimal) minimum
            if (this.CurrentBalance < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentBalance, must be a value greater than or equal to 0.0.", new [] { "CurrentBalance" });
            }

            // Currency (string) pattern
            Regex regexCurrency = new Regex(@"^[A-Z]{3,3}$", RegexOptions.CultureInvariant);
            if (false == regexCurrency.Match(this.Currency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, must match a pattern of " + regexCurrency, new [] { "Currency" });
            }

            yield break;
        }
    }

}
