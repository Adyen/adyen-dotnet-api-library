/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Product that is payable by the payment card. Product codes that are payable by the payment card.
    /// </summary>
    [DataContract(Name = "AllowedProduct")]
    public partial class AllowedProduct : IEquatable<AllowedProduct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllowedProduct" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AllowedProduct() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AllowedProduct" /> class.
        /// </summary>
        /// <param name="productCode">Product code of item purchased with the transaction. (required).</param>
        /// <param name="eanUpc">Standard product code of item purchased with the transaction..</param>
        /// <param name="productLabel">Product name of an item purchased with the transaction..</param>
        /// <param name="additionalProductInfo">Additionl information related to the line item..</param>
        public AllowedProduct(int? productCode = default(int?), int? eanUpc = default(int?), string productLabel = default(string), string additionalProductInfo = default(string))
        {
            this.ProductCode = productCode;
            this.EanUpc = eanUpc;
            this.ProductLabel = productLabel;
            this.AdditionalProductInfo = additionalProductInfo;
        }

        /// <summary>
        /// Product code of item purchased with the transaction.
        /// </summary>
        /// <value>Product code of item purchased with the transaction.</value>
        [DataMember(Name = "ProductCode", IsRequired = false, EmitDefaultValue = false)]
        public int? ProductCode { get; set; }

        /// <summary>
        /// Standard product code of item purchased with the transaction.
        /// </summary>
        /// <value>Standard product code of item purchased with the transaction.</value>
        [DataMember(Name = "EanUpc", EmitDefaultValue = false)]
        public int? EanUpc { get; set; }

        /// <summary>
        /// Product name of an item purchased with the transaction.
        /// </summary>
        /// <value>Product name of an item purchased with the transaction.</value>
        [DataMember(Name = "ProductLabel", EmitDefaultValue = false)]
        public string ProductLabel { get; set; }

        /// <summary>
        /// Additionl information related to the line item.
        /// </summary>
        /// <value>Additionl information related to the line item.</value>
        [DataMember(Name = "AdditionalProductInfo", EmitDefaultValue = false)]
        public string AdditionalProductInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AllowedProduct {\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  EanUpc: ").Append(EanUpc).Append("\n");
            sb.Append("  ProductLabel: ").Append(ProductLabel).Append("\n");
            sb.Append("  AdditionalProductInfo: ").Append(AdditionalProductInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllowedProduct);
        }

        /// <summary>
        /// Returns true if AllowedProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of AllowedProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllowedProduct input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProductCode == input.ProductCode ||
                    this.ProductCode.Equals(input.ProductCode)
                ) && 
                (
                    this.EanUpc == input.EanUpc ||
                    this.EanUpc.Equals(input.EanUpc)
                ) && 
                (
                    this.ProductLabel == input.ProductLabel ||
                    (this.ProductLabel != null &&
                    this.ProductLabel.Equals(input.ProductLabel))
                ) && 
                (
                    this.AdditionalProductInfo == input.AdditionalProductInfo ||
                    (this.AdditionalProductInfo != null &&
                    this.AdditionalProductInfo.Equals(input.AdditionalProductInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                hashCode = (hashCode * 59) + this.EanUpc.GetHashCode();
                if (this.ProductLabel != null)
                {
                    hashCode = (hashCode * 59) + this.ProductLabel.GetHashCode();
                }
                if (this.AdditionalProductInfo != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProductInfo.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ProductCode (int) maximum
            if (this.ProductCode > (int)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, must be a value less than or equal to 20.", new [] { "ProductCode" });
            }

            // ProductCode (int) minimum
            if (this.ProductCode < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, must be a value greater than or equal to 1.", new [] { "ProductCode" });
            }

            // ProductLabel (string) pattern
            Regex regexProductLabel = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexProductLabel.Match(this.ProductLabel).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductLabel, must match a pattern of " + regexProductLabel, new [] { "ProductLabel" });
            }

            // AdditionalProductInfo (string) pattern
            Regex regexAdditionalProductInfo = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexAdditionalProductInfo.Match(this.AdditionalProductInfo).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdditionalProductInfo, must match a pattern of " + regexAdditionalProductInfo, new [] { "AdditionalProductInfo" });
            }

            yield break;
        }
    }

}
