/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It contains information related to the security of the message. SecurityTrailer as used by Adyen.
    /// </summary>
    [DataContract(Name = "SecurityTrailer")]
    public partial class SecurityTrailer : IEquatable<SecurityTrailer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityTrailer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecurityTrailer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityTrailer" /> class.
        /// </summary>
        /// <param name="adyenCryptoVersion">adyenCryptoVersion (required).</param>
        /// <param name="keyIdentifier">keyIdentifier (required).</param>
        /// <param name="keyVersion">keyVersion (required).</param>
        /// <param name="nonce">nonce (required).</param>
        /// <param name="hmac">hmac (required).</param>
        public SecurityTrailer(int? adyenCryptoVersion = default(int?), string keyIdentifier = default(string), int? keyVersion = default(int?), byte[] nonce = default(byte[]), byte[] hmac = default(byte[]))
        {
            this.AdyenCryptoVersion = adyenCryptoVersion;
            this.KeyIdentifier = keyIdentifier;
            this.KeyVersion = keyVersion;
            this.Nonce = nonce;
            this.Hmac = hmac;
        }

        /// <summary>
        /// Gets or Sets AdyenCryptoVersion
        /// </summary>
        [DataMember(Name = "AdyenCryptoVersion", IsRequired = false, EmitDefaultValue = false)]
        public int? AdyenCryptoVersion { get; set; }

        /// <summary>
        /// Gets or Sets KeyIdentifier
        /// </summary>
        [DataMember(Name = "KeyIdentifier", IsRequired = false, EmitDefaultValue = false)]
        public string KeyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets KeyVersion
        /// </summary>
        [DataMember(Name = "KeyVersion", IsRequired = false, EmitDefaultValue = false)]
        public int? KeyVersion { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name = "Nonce", IsRequired = false, EmitDefaultValue = false)]
        public byte[] Nonce { get; set; }

        /// <summary>
        /// Gets or Sets Hmac
        /// </summary>
        [DataMember(Name = "Hmac", IsRequired = false, EmitDefaultValue = false)]
        public byte[] Hmac { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityTrailer {\n");
            sb.Append("  AdyenCryptoVersion: ").Append(AdyenCryptoVersion).Append("\n");
            sb.Append("  KeyIdentifier: ").Append(KeyIdentifier).Append("\n");
            sb.Append("  KeyVersion: ").Append(KeyVersion).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Hmac: ").Append(Hmac).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityTrailer);
        }

        /// <summary>
        /// Returns true if SecurityTrailer instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityTrailer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityTrailer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdyenCryptoVersion == input.AdyenCryptoVersion ||
                    this.AdyenCryptoVersion.Equals(input.AdyenCryptoVersion)
                ) && 
                (
                    this.KeyIdentifier == input.KeyIdentifier ||
                    (this.KeyIdentifier != null &&
                    this.KeyIdentifier.Equals(input.KeyIdentifier))
                ) && 
                (
                    this.KeyVersion == input.KeyVersion ||
                    this.KeyVersion.Equals(input.KeyVersion)
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.Hmac == input.Hmac ||
                    (this.Hmac != null &&
                    this.Hmac.Equals(input.Hmac))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AdyenCryptoVersion.GetHashCode();
                if (this.KeyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.KeyIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.KeyVersion.GetHashCode();
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                if (this.Hmac != null)
                {
                    hashCode = (hashCode * 59) + this.Hmac.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // KeyIdentifier (string) pattern
            Regex regexKeyIdentifier = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexKeyIdentifier.Match(this.KeyIdentifier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for KeyIdentifier, must match a pattern of " + regexKeyIdentifier, new [] { "KeyIdentifier" });
            }

            yield break;
        }
    }

}
