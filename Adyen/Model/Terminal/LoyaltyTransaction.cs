/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// LoyaltyTransaction
    /// </summary>
    [DataContract(Name = "LoyaltyTransaction")]
    public partial class LoyaltyTransaction : IEquatable<LoyaltyTransaction>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LoyaltyTransactionType
        /// </summary>
        [DataMember(Name = "LoyaltyTransactionType", IsRequired = false, EmitDefaultValue = false)]
        public LoyaltyTransactionType LoyaltyTransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoyaltyTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyTransaction" /> class.
        /// </summary>
        /// <param name="loyaltyTransactionType">loyaltyTransactionType (required).</param>
        /// <param name="currency">currency.</param>
        /// <param name="totalAmount">totalAmount.</param>
        /// <param name="originalPOITransaction">originalPOITransaction.</param>
        /// <param name="transactionConditions">transactionConditions.</param>
        /// <param name="saleItem">saleItem.</param>
        public LoyaltyTransaction(LoyaltyTransactionType loyaltyTransactionType = default(LoyaltyTransactionType), string currency = default(string), decimal? totalAmount = default(decimal?), OriginalPOITransaction originalPOITransaction = default(OriginalPOITransaction), TransactionConditions transactionConditions = default(TransactionConditions), List<SaleItem> saleItem = default(List<SaleItem>))
        {
            this.LoyaltyTransactionType = loyaltyTransactionType;
            this.Currency = currency;
            this.TotalAmount = totalAmount;
            this.OriginalPOITransaction = originalPOITransaction;
            this.TransactionConditions = transactionConditions;
            this.SaleItem = saleItem;
        }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "TotalAmount", EmitDefaultValue = false)]
        public decimal? TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets OriginalPOITransaction
        /// </summary>
        [DataMember(Name = "OriginalPOITransaction", EmitDefaultValue = false)]
        public OriginalPOITransaction OriginalPOITransaction { get; set; }

        /// <summary>
        /// Gets or Sets TransactionConditions
        /// </summary>
        [DataMember(Name = "TransactionConditions", EmitDefaultValue = false)]
        public TransactionConditions TransactionConditions { get; set; }

        /// <summary>
        /// Gets or Sets SaleItem
        /// </summary>
        [DataMember(Name = "SaleItem", EmitDefaultValue = false)]
        public List<SaleItem> SaleItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyTransaction {\n");
            sb.Append("  LoyaltyTransactionType: ").Append(LoyaltyTransactionType).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  OriginalPOITransaction: ").Append(OriginalPOITransaction).Append("\n");
            sb.Append("  TransactionConditions: ").Append(TransactionConditions).Append("\n");
            sb.Append("  SaleItem: ").Append(SaleItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoyaltyTransaction);
        }

        /// <summary>
        /// Returns true if LoyaltyTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of LoyaltyTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyTransaction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LoyaltyTransactionType == input.LoyaltyTransactionType ||
                    this.LoyaltyTransactionType.Equals(input.LoyaltyTransactionType)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    this.TotalAmount.Equals(input.TotalAmount)
                ) && 
                (
                    this.OriginalPOITransaction == input.OriginalPOITransaction ||
                    (this.OriginalPOITransaction != null &&
                    this.OriginalPOITransaction.Equals(input.OriginalPOITransaction))
                ) && 
                (
                    this.TransactionConditions == input.TransactionConditions ||
                    (this.TransactionConditions != null &&
                    this.TransactionConditions.Equals(input.TransactionConditions))
                ) && 
                (
                    this.SaleItem == input.SaleItem ||
                    this.SaleItem != null &&
                    input.SaleItem != null &&
                    this.SaleItem.SequenceEqual(input.SaleItem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LoyaltyTransactionType.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                if (this.OriginalPOITransaction != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalPOITransaction.GetHashCode();
                }
                if (this.TransactionConditions != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionConditions.GetHashCode();
                }
                if (this.SaleItem != null)
                {
                    hashCode = (hashCode * 59) + this.SaleItem.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Currency (string) pattern
            Regex regexCurrency = new Regex(@"^[A-Z]{3,3}$", RegexOptions.CultureInvariant);
            if (false == regexCurrency.Match(this.Currency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, must match a pattern of " + regexCurrency, new [] { "Currency" });
            }

            // TotalAmount (decimal) maximum
            if (this.TotalAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalAmount, must be a value less than or equal to 99999999.999999.", new [] { "TotalAmount" });
            }

            // TotalAmount (decimal) minimum
            if (this.TotalAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalAmount, must be a value greater than or equal to 0.0.", new [] { "TotalAmount" });
            }

            yield break;
        }
    }

}
