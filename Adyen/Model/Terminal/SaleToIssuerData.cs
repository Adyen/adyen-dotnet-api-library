/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// The POI System receives this information and sends it to the Acquirer for the Issuer without any change. Sale information intended for the Issuer.
    /// </summary>
    [DataContract(Name = "SaleToIssuerData")]
    public partial class SaleToIssuerData : IEquatable<SaleToIssuerData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SaleToIssuerData" /> class.
        /// </summary>
        /// <param name="statementReference">Information to print on the bank statement..</param>
        public SaleToIssuerData(string statementReference = default(string))
        {
            this.StatementReference = statementReference;
        }

        /// <summary>
        /// Information to print on the bank statement.
        /// </summary>
        /// <value>Information to print on the bank statement.</value>
        [DataMember(Name = "StatementReference", EmitDefaultValue = false)]
        public string StatementReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SaleToIssuerData {\n");
            sb.Append("  StatementReference: ").Append(StatementReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SaleToIssuerData);
        }

        /// <summary>
        /// Returns true if SaleToIssuerData instances are equal
        /// </summary>
        /// <param name="input">Instance of SaleToIssuerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SaleToIssuerData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StatementReference == input.StatementReference ||
                    (this.StatementReference != null &&
                    this.StatementReference.Equals(input.StatementReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatementReference != null)
                {
                    hashCode = (hashCode * 59) + this.StatementReference.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StatementReference (string) pattern
            Regex regexStatementReference = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexStatementReference.Match(this.StatementReference).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StatementReference, must match a pattern of " + regexStatementReference, new [] { "StatementReference" });
            }

            yield break;
        }
    }

}
