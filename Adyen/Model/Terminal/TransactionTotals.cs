/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// If Result is Success, contains all the totals, classified as required by the Sale in the message request. At least, transaction totals are provided per Acquirer, Acquirer Settlement, and Card Brand. Result of the Sale to POI Reconciliation processing.
    /// </summary>
    [DataContract(Name = "TransactionTotals")]
    public partial class TransactionTotals : IEquatable<TransactionTotals>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PaymentInstrumentType
        /// </summary>
        [DataMember(Name = "PaymentInstrumentType", IsRequired = false, EmitDefaultValue = false)]
        public PaymentInstrumentType PaymentInstrumentType { get; set; }

        /// <summary>
        /// Gets or Sets LoyaltyUnit
        /// </summary>
        [DataMember(Name = "LoyaltyUnit", EmitDefaultValue = false)]
        public LoyaltyUnit? LoyaltyUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionTotals" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionTotals() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionTotals" /> class.
        /// </summary>
        /// <param name="paymentInstrumentType">paymentInstrumentType (required).</param>
        /// <param name="acquirerID">If available..</param>
        /// <param name="hostReconciliationID">If available..</param>
        /// <param name="cardBrand">If configured to present totals per card brand, and Response.Result is Success..</param>
        /// <param name="pOIID">If requested in the message request..</param>
        /// <param name="saleID">If requested in the message request..</param>
        /// <param name="operatorID">If requested in the message request..</param>
        /// <param name="shiftNumber">If requested in the message request..</param>
        /// <param name="totalsGroupID">If requested in the message request..</param>
        /// <param name="paymentCurrency">Currency of a monetary amount..</param>
        /// <param name="paymentTotals">paymentTotals.</param>
        /// <param name="loyaltyUnit">loyaltyUnit.</param>
        /// <param name="loyaltyCurrency">If LoyaltyUnit is Monetary..</param>
        /// <param name="loyaltyTotals">loyaltyTotals.</param>
        public TransactionTotals(PaymentInstrumentType paymentInstrumentType = default(PaymentInstrumentType), int? acquirerID = default(int?), string hostReconciliationID = default(string), string cardBrand = default(string), string pOIID = default(string), string saleID = default(string), string operatorID = default(string), string shiftNumber = default(string), string totalsGroupID = default(string), string paymentCurrency = default(string), List<PaymentTotals> paymentTotals = default(List<PaymentTotals>), LoyaltyUnit? loyaltyUnit = default(LoyaltyUnit?), string loyaltyCurrency = default(string), List<LoyaltyTotals> loyaltyTotals = default(List<LoyaltyTotals>))
        {
            this.PaymentInstrumentType = paymentInstrumentType;
            this.AcquirerID = acquirerID;
            this.HostReconciliationID = hostReconciliationID;
            this.CardBrand = cardBrand;
            this.POIID = pOIID;
            this.SaleID = saleID;
            this.OperatorID = operatorID;
            this.ShiftNumber = shiftNumber;
            this.TotalsGroupID = totalsGroupID;
            this.PaymentCurrency = paymentCurrency;
            this.PaymentTotals = paymentTotals;
            this.LoyaltyUnit = loyaltyUnit;
            this.LoyaltyCurrency = loyaltyCurrency;
            this.LoyaltyTotals = loyaltyTotals;
        }

        /// <summary>
        /// If available.
        /// </summary>
        /// <value>If available.</value>
        [DataMember(Name = "AcquirerID", EmitDefaultValue = false)]
        public int? AcquirerID { get; set; }

        /// <summary>
        /// If available.
        /// </summary>
        /// <value>If available.</value>
        [DataMember(Name = "HostReconciliationID", EmitDefaultValue = false)]
        public string HostReconciliationID { get; set; }

        /// <summary>
        /// If configured to present totals per card brand, and Response.Result is Success.
        /// </summary>
        /// <value>If configured to present totals per card brand, and Response.Result is Success.</value>
        [DataMember(Name = "CardBrand", EmitDefaultValue = false)]
        public string CardBrand { get; set; }

        /// <summary>
        /// If requested in the message request.
        /// </summary>
        /// <value>If requested in the message request.</value>
        [DataMember(Name = "POIID", EmitDefaultValue = false)]
        public string POIID { get; set; }

        /// <summary>
        /// If requested in the message request.
        /// </summary>
        /// <value>If requested in the message request.</value>
        [DataMember(Name = "SaleID", EmitDefaultValue = false)]
        public string SaleID { get; set; }

        /// <summary>
        /// If requested in the message request.
        /// </summary>
        /// <value>If requested in the message request.</value>
        [DataMember(Name = "OperatorID", EmitDefaultValue = false)]
        public string OperatorID { get; set; }

        /// <summary>
        /// If requested in the message request.
        /// </summary>
        /// <value>If requested in the message request.</value>
        [DataMember(Name = "ShiftNumber", EmitDefaultValue = false)]
        public string ShiftNumber { get; set; }

        /// <summary>
        /// If requested in the message request.
        /// </summary>
        /// <value>If requested in the message request.</value>
        [DataMember(Name = "TotalsGroupID", EmitDefaultValue = false)]
        public string TotalsGroupID { get; set; }

        /// <summary>
        /// Currency of a monetary amount.
        /// </summary>
        /// <value>Currency of a monetary amount.</value>
        [DataMember(Name = "PaymentCurrency", EmitDefaultValue = false)]
        public string PaymentCurrency { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTotals
        /// </summary>
        [DataMember(Name = "PaymentTotals", EmitDefaultValue = false)]
        public List<PaymentTotals> PaymentTotals { get; set; }

        /// <summary>
        /// If LoyaltyUnit is Monetary.
        /// </summary>
        /// <value>If LoyaltyUnit is Monetary.</value>
        [DataMember(Name = "LoyaltyCurrency", EmitDefaultValue = false)]
        public string LoyaltyCurrency { get; set; }

        /// <summary>
        /// Gets or Sets LoyaltyTotals
        /// </summary>
        [DataMember(Name = "LoyaltyTotals", EmitDefaultValue = false)]
        public List<LoyaltyTotals> LoyaltyTotals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionTotals {\n");
            sb.Append("  PaymentInstrumentType: ").Append(PaymentInstrumentType).Append("\n");
            sb.Append("  AcquirerID: ").Append(AcquirerID).Append("\n");
            sb.Append("  HostReconciliationID: ").Append(HostReconciliationID).Append("\n");
            sb.Append("  CardBrand: ").Append(CardBrand).Append("\n");
            sb.Append("  POIID: ").Append(POIID).Append("\n");
            sb.Append("  SaleID: ").Append(SaleID).Append("\n");
            sb.Append("  OperatorID: ").Append(OperatorID).Append("\n");
            sb.Append("  ShiftNumber: ").Append(ShiftNumber).Append("\n");
            sb.Append("  TotalsGroupID: ").Append(TotalsGroupID).Append("\n");
            sb.Append("  PaymentCurrency: ").Append(PaymentCurrency).Append("\n");
            sb.Append("  PaymentTotals: ").Append(PaymentTotals).Append("\n");
            sb.Append("  LoyaltyUnit: ").Append(LoyaltyUnit).Append("\n");
            sb.Append("  LoyaltyCurrency: ").Append(LoyaltyCurrency).Append("\n");
            sb.Append("  LoyaltyTotals: ").Append(LoyaltyTotals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionTotals);
        }

        /// <summary>
        /// Returns true if TransactionTotals instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionTotals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionTotals input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentInstrumentType == input.PaymentInstrumentType ||
                    this.PaymentInstrumentType.Equals(input.PaymentInstrumentType)
                ) && 
                (
                    this.AcquirerID == input.AcquirerID ||
                    this.AcquirerID.Equals(input.AcquirerID)
                ) && 
                (
                    this.HostReconciliationID == input.HostReconciliationID ||
                    (this.HostReconciliationID != null &&
                    this.HostReconciliationID.Equals(input.HostReconciliationID))
                ) && 
                (
                    this.CardBrand == input.CardBrand ||
                    (this.CardBrand != null &&
                    this.CardBrand.Equals(input.CardBrand))
                ) && 
                (
                    this.POIID == input.POIID ||
                    (this.POIID != null &&
                    this.POIID.Equals(input.POIID))
                ) && 
                (
                    this.SaleID == input.SaleID ||
                    (this.SaleID != null &&
                    this.SaleID.Equals(input.SaleID))
                ) && 
                (
                    this.OperatorID == input.OperatorID ||
                    (this.OperatorID != null &&
                    this.OperatorID.Equals(input.OperatorID))
                ) && 
                (
                    this.ShiftNumber == input.ShiftNumber ||
                    (this.ShiftNumber != null &&
                    this.ShiftNumber.Equals(input.ShiftNumber))
                ) && 
                (
                    this.TotalsGroupID == input.TotalsGroupID ||
                    (this.TotalsGroupID != null &&
                    this.TotalsGroupID.Equals(input.TotalsGroupID))
                ) && 
                (
                    this.PaymentCurrency == input.PaymentCurrency ||
                    (this.PaymentCurrency != null &&
                    this.PaymentCurrency.Equals(input.PaymentCurrency))
                ) && 
                (
                    this.PaymentTotals == input.PaymentTotals ||
                    this.PaymentTotals != null &&
                    input.PaymentTotals != null &&
                    this.PaymentTotals.SequenceEqual(input.PaymentTotals)
                ) && 
                (
                    this.LoyaltyUnit == input.LoyaltyUnit ||
                    this.LoyaltyUnit.Equals(input.LoyaltyUnit)
                ) && 
                (
                    this.LoyaltyCurrency == input.LoyaltyCurrency ||
                    (this.LoyaltyCurrency != null &&
                    this.LoyaltyCurrency.Equals(input.LoyaltyCurrency))
                ) && 
                (
                    this.LoyaltyTotals == input.LoyaltyTotals ||
                    this.LoyaltyTotals != null &&
                    input.LoyaltyTotals != null &&
                    this.LoyaltyTotals.SequenceEqual(input.LoyaltyTotals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PaymentInstrumentType.GetHashCode();
                hashCode = (hashCode * 59) + this.AcquirerID.GetHashCode();
                if (this.HostReconciliationID != null)
                {
                    hashCode = (hashCode * 59) + this.HostReconciliationID.GetHashCode();
                }
                if (this.CardBrand != null)
                {
                    hashCode = (hashCode * 59) + this.CardBrand.GetHashCode();
                }
                if (this.POIID != null)
                {
                    hashCode = (hashCode * 59) + this.POIID.GetHashCode();
                }
                if (this.SaleID != null)
                {
                    hashCode = (hashCode * 59) + this.SaleID.GetHashCode();
                }
                if (this.OperatorID != null)
                {
                    hashCode = (hashCode * 59) + this.OperatorID.GetHashCode();
                }
                if (this.ShiftNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ShiftNumber.GetHashCode();
                }
                if (this.TotalsGroupID != null)
                {
                    hashCode = (hashCode * 59) + this.TotalsGroupID.GetHashCode();
                }
                if (this.PaymentCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentCurrency.GetHashCode();
                }
                if (this.PaymentTotals != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentTotals.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LoyaltyUnit.GetHashCode();
                if (this.LoyaltyCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyCurrency.GetHashCode();
                }
                if (this.LoyaltyTotals != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyTotals.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // HostReconciliationID (string) pattern
            Regex regexHostReconciliationID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexHostReconciliationID.Match(this.HostReconciliationID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HostReconciliationID, must match a pattern of " + regexHostReconciliationID, new [] { "HostReconciliationID" });
            }

            // CardBrand (string) pattern
            Regex regexCardBrand = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexCardBrand.Match(this.CardBrand).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardBrand, must match a pattern of " + regexCardBrand, new [] { "CardBrand" });
            }

            // POIID (string) pattern
            Regex regexPOIID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexPOIID.Match(this.POIID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for POIID, must match a pattern of " + regexPOIID, new [] { "POIID" });
            }

            // SaleID (string) pattern
            Regex regexSaleID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexSaleID.Match(this.SaleID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaleID, must match a pattern of " + regexSaleID, new [] { "SaleID" });
            }

            // OperatorID (string) pattern
            Regex regexOperatorID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexOperatorID.Match(this.OperatorID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OperatorID, must match a pattern of " + regexOperatorID, new [] { "OperatorID" });
            }

            // ShiftNumber (string) pattern
            Regex regexShiftNumber = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexShiftNumber.Match(this.ShiftNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiftNumber, must match a pattern of " + regexShiftNumber, new [] { "ShiftNumber" });
            }

            // TotalsGroupID (string) pattern
            Regex regexTotalsGroupID = new Regex(@"^.{1,16}$", RegexOptions.CultureInvariant);
            if (false == regexTotalsGroupID.Match(this.TotalsGroupID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalsGroupID, must match a pattern of " + regexTotalsGroupID, new [] { "TotalsGroupID" });
            }

            // PaymentCurrency (string) pattern
            Regex regexPaymentCurrency = new Regex(@"^[A-Z]{3,3}$", RegexOptions.CultureInvariant);
            if (false == regexPaymentCurrency.Match(this.PaymentCurrency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentCurrency, must match a pattern of " + regexPaymentCurrency, new [] { "PaymentCurrency" });
            }

            // LoyaltyCurrency (string) pattern
            Regex regexLoyaltyCurrency = new Regex(@"^[A-Z]{3,3}$", RegexOptions.CultureInvariant);
            if (false == regexLoyaltyCurrency.Match(this.LoyaltyCurrency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoyaltyCurrency, must match a pattern of " + regexLoyaltyCurrency, new [] { "LoyaltyCurrency" });
            }

            yield break;
        }
    }

}
