/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Geolocation
    /// </summary>
    [DataContract(Name = "Geolocation")]
    public partial class Geolocation : IEquatable<Geolocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Geolocation" /> class.
        /// </summary>
        /// <param name="geographicCoordinates">geographicCoordinates.</param>
        /// <param name="uTMCoordinates">uTMCoordinates.</param>
        public Geolocation(GeographicCoordinates geographicCoordinates = default(GeographicCoordinates), UTMCoordinates uTMCoordinates = default(UTMCoordinates))
        {
            this.GeographicCoordinates = geographicCoordinates;
            this.UTMCoordinates = uTMCoordinates;
        }

        /// <summary>
        /// Gets or Sets GeographicCoordinates
        /// </summary>
        [DataMember(Name = "GeographicCoordinates", EmitDefaultValue = false)]
        public GeographicCoordinates GeographicCoordinates { get; set; }

        /// <summary>
        /// Gets or Sets UTMCoordinates
        /// </summary>
        [DataMember(Name = "UTMCoordinates", EmitDefaultValue = false)]
        public UTMCoordinates UTMCoordinates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Geolocation {\n");
            sb.Append("  GeographicCoordinates: ").Append(GeographicCoordinates).Append("\n");
            sb.Append("  UTMCoordinates: ").Append(UTMCoordinates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Geolocation);
        }

        /// <summary>
        /// Returns true if Geolocation instances are equal
        /// </summary>
        /// <param name="input">Instance of Geolocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Geolocation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GeographicCoordinates == input.GeographicCoordinates ||
                    (this.GeographicCoordinates != null &&
                    this.GeographicCoordinates.Equals(input.GeographicCoordinates))
                ) && 
                (
                    this.UTMCoordinates == input.UTMCoordinates ||
                    (this.UTMCoordinates != null &&
                    this.UTMCoordinates.Equals(input.UTMCoordinates))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GeographicCoordinates != null)
                {
                    hashCode = (hashCode * 59) + this.GeographicCoordinates.GetHashCode();
                }
                if (this.UTMCoordinates != null)
                {
                    hashCode = (hashCode * 59) + this.UTMCoordinates.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
