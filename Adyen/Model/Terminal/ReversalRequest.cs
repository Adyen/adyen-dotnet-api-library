/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It conveys Information related to the reversal of a previous payment or a loyalty transaction. Content of the Reversal Request message.
    /// </summary>
    [DataContract(Name = "ReversalRequest")]
    public partial class ReversalRequest : IEquatable<ReversalRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ReversalReason
        /// </summary>
        [DataMember(Name = "ReversalReason", IsRequired = false, EmitDefaultValue = false)]
        public ReversalReason ReversalReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReversalRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReversalRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReversalRequest" /> class.
        /// </summary>
        /// <param name="saleData">saleData.</param>
        /// <param name="originalPOITransaction">originalPOITransaction (required).</param>
        /// <param name="reversedAmount">ReversedAmount is implicitely the AuthorizedAmount if absent..</param>
        /// <param name="reversalReason">reversalReason (required).</param>
        /// <param name="customerOrder">customerOrder.</param>
        public ReversalRequest(SaleData saleData = default(SaleData), OriginalPOITransaction originalPOITransaction = default(OriginalPOITransaction), decimal? reversedAmount = default(decimal?), ReversalReason reversalReason = default(ReversalReason), CustomerOrder customerOrder = default(CustomerOrder))
        {
            this.OriginalPOITransaction = originalPOITransaction;
            this.ReversalReason = reversalReason;
            this.SaleData = saleData;
            this.ReversedAmount = reversedAmount;
            this.CustomerOrder = customerOrder;
        }

        /// <summary>
        /// Gets or Sets SaleData
        /// </summary>
        [DataMember(Name = "SaleData", EmitDefaultValue = false)]
        public SaleData SaleData { get; set; }

        /// <summary>
        /// Gets or Sets OriginalPOITransaction
        /// </summary>
        [DataMember(Name = "OriginalPOITransaction", IsRequired = false, EmitDefaultValue = false)]
        public OriginalPOITransaction OriginalPOITransaction { get; set; }

        /// <summary>
        /// ReversedAmount is implicitely the AuthorizedAmount if absent.
        /// </summary>
        /// <value>ReversedAmount is implicitely the AuthorizedAmount if absent.</value>
        [DataMember(Name = "ReversedAmount", EmitDefaultValue = false)]
        public decimal? ReversedAmount { get; set; }

        /// <summary>
        /// Gets or Sets CustomerOrder
        /// </summary>
        [DataMember(Name = "CustomerOrder", EmitDefaultValue = false)]
        public CustomerOrder CustomerOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReversalRequest {\n");
            sb.Append("  SaleData: ").Append(SaleData).Append("\n");
            sb.Append("  OriginalPOITransaction: ").Append(OriginalPOITransaction).Append("\n");
            sb.Append("  ReversedAmount: ").Append(ReversedAmount).Append("\n");
            sb.Append("  ReversalReason: ").Append(ReversalReason).Append("\n");
            sb.Append("  CustomerOrder: ").Append(CustomerOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReversalRequest);
        }

        /// <summary>
        /// Returns true if ReversalRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReversalRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReversalRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SaleData == input.SaleData ||
                    (this.SaleData != null &&
                    this.SaleData.Equals(input.SaleData))
                ) && 
                (
                    this.OriginalPOITransaction == input.OriginalPOITransaction ||
                    (this.OriginalPOITransaction != null &&
                    this.OriginalPOITransaction.Equals(input.OriginalPOITransaction))
                ) && 
                (
                    this.ReversedAmount == input.ReversedAmount ||
                    this.ReversedAmount.Equals(input.ReversedAmount)
                ) && 
                (
                    this.ReversalReason == input.ReversalReason ||
                    this.ReversalReason.Equals(input.ReversalReason)
                ) && 
                (
                    this.CustomerOrder == input.CustomerOrder ||
                    (this.CustomerOrder != null &&
                    this.CustomerOrder.Equals(input.CustomerOrder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SaleData != null)
                {
                    hashCode = (hashCode * 59) + this.SaleData.GetHashCode();
                }
                if (this.OriginalPOITransaction != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalPOITransaction.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReversedAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.ReversalReason.GetHashCode();
                if (this.CustomerOrder != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerOrder.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ReversedAmount (decimal) maximum
            if (this.ReversedAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReversedAmount, must be a value less than or equal to 99999999.999999.", new [] { "ReversedAmount" });
            }

            // ReversedAmount (decimal) minimum
            if (this.ReversedAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReversedAmount, must be a value greater than or equal to 0.0.", new [] { "ReversedAmount" });
            }

            yield break;
        }
    }

}
