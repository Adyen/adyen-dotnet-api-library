/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Sent in the result of the payment transaction. For a card, it could also be sent in the CardAcquisition response, to be processed by the Sale System. Data related to the instrument of payment for the transaction.
    /// </summary>
    [DataContract(Name = "PaymentInstrumentData")]
    public partial class PaymentInstrumentData : IEquatable<PaymentInstrumentData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PaymentInstrumentType
        /// </summary>
        [DataMember(Name = "PaymentInstrumentType", IsRequired = false, EmitDefaultValue = false)]
        public PaymentInstrumentType PaymentInstrumentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInstrumentData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentInstrumentData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInstrumentData" /> class.
        /// </summary>
        /// <param name="paymentInstrumentType">paymentInstrumentType (required).</param>
        /// <param name="protectedCardData">protectedCardData.</param>
        /// <param name="cardData">cardData.</param>
        /// <param name="checkData">checkData.</param>
        /// <param name="mobileData">mobileData.</param>
        /// <param name="storedValueAccountID">storedValueAccountID.</param>
        public PaymentInstrumentData(PaymentInstrumentType paymentInstrumentType = default(PaymentInstrumentType), string protectedCardData = default(string), CardData cardData = default(CardData), CheckData checkData = default(CheckData), MobileData mobileData = default(MobileData), StoredValueAccountID storedValueAccountID = default(StoredValueAccountID))
        {
            this.PaymentInstrumentType = paymentInstrumentType;
            this.ProtectedCardData = protectedCardData;
            this.CardData = cardData;
            this.CheckData = checkData;
            this.MobileData = mobileData;
            this.StoredValueAccountID = storedValueAccountID;
        }

        /// <summary>
        /// Gets or Sets ProtectedCardData
        /// </summary>
        [DataMember(Name = "ProtectedCardData", EmitDefaultValue = false)]
        public string ProtectedCardData { get; set; }

        /// <summary>
        /// Gets or Sets CardData
        /// </summary>
        [DataMember(Name = "CardData", EmitDefaultValue = false)]
        public CardData CardData { get; set; }

        /// <summary>
        /// Gets or Sets CheckData
        /// </summary>
        [DataMember(Name = "CheckData", EmitDefaultValue = false)]
        public CheckData CheckData { get; set; }

        /// <summary>
        /// Gets or Sets MobileData
        /// </summary>
        [DataMember(Name = "MobileData", EmitDefaultValue = false)]
        public MobileData MobileData { get; set; }

        /// <summary>
        /// Gets or Sets StoredValueAccountID
        /// </summary>
        [DataMember(Name = "StoredValueAccountID", EmitDefaultValue = false)]
        public StoredValueAccountID StoredValueAccountID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentInstrumentData {\n");
            sb.Append("  PaymentInstrumentType: ").Append(PaymentInstrumentType).Append("\n");
            sb.Append("  ProtectedCardData: ").Append(ProtectedCardData).Append("\n");
            sb.Append("  CardData: ").Append(CardData).Append("\n");
            sb.Append("  CheckData: ").Append(CheckData).Append("\n");
            sb.Append("  MobileData: ").Append(MobileData).Append("\n");
            sb.Append("  StoredValueAccountID: ").Append(StoredValueAccountID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentInstrumentData);
        }

        /// <summary>
        /// Returns true if PaymentInstrumentData instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentInstrumentData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentInstrumentData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentInstrumentType == input.PaymentInstrumentType ||
                    this.PaymentInstrumentType.Equals(input.PaymentInstrumentType)
                ) && 
                (
                    this.ProtectedCardData == input.ProtectedCardData ||
                    (this.ProtectedCardData != null &&
                    this.ProtectedCardData.Equals(input.ProtectedCardData))
                ) && 
                (
                    this.CardData == input.CardData ||
                    (this.CardData != null &&
                    this.CardData.Equals(input.CardData))
                ) && 
                (
                    this.CheckData == input.CheckData ||
                    (this.CheckData != null &&
                    this.CheckData.Equals(input.CheckData))
                ) && 
                (
                    this.MobileData == input.MobileData ||
                    (this.MobileData != null &&
                    this.MobileData.Equals(input.MobileData))
                ) && 
                (
                    this.StoredValueAccountID == input.StoredValueAccountID ||
                    (this.StoredValueAccountID != null &&
                    this.StoredValueAccountID.Equals(input.StoredValueAccountID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PaymentInstrumentType.GetHashCode();
                if (this.ProtectedCardData != null)
                {
                    hashCode = (hashCode * 59) + this.ProtectedCardData.GetHashCode();
                }
                if (this.CardData != null)
                {
                    hashCode = (hashCode * 59) + this.CardData.GetHashCode();
                }
                if (this.CheckData != null)
                {
                    hashCode = (hashCode * 59) + this.CheckData.GetHashCode();
                }
                if (this.MobileData != null)
                {
                    hashCode = (hashCode * 59) + this.MobileData.GetHashCode();
                }
                if (this.StoredValueAccountID != null)
                {
                    hashCode = (hashCode * 59) + this.StoredValueAccountID.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
