/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// In the Message Response, the result of each loyalty brand transaction. Data related to the result of a processed loyalty transaction.
    /// </summary>
    [DataContract(Name = "LoyaltyResult")]
    public partial class LoyaltyResult : IEquatable<LoyaltyResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoyaltyResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyResult" /> class.
        /// </summary>
        /// <param name="loyaltyAccount">loyaltyAccount (required).</param>
        /// <param name="currentBalance">if known (provided by the card or an external host)..</param>
        /// <param name="loyaltyAmount">loyaltyAmount.</param>
        /// <param name="loyaltyAcquirerData">loyaltyAcquirerData.</param>
        /// <param name="rebates">rebates.</param>
        public LoyaltyResult(LoyaltyAccount loyaltyAccount = default(LoyaltyAccount), decimal? currentBalance = default(decimal?), LoyaltyAmount loyaltyAmount = default(LoyaltyAmount), LoyaltyAcquirerData loyaltyAcquirerData = default(LoyaltyAcquirerData), Rebates rebates = default(Rebates))
        {
            this.LoyaltyAccount = loyaltyAccount;
            this.CurrentBalance = currentBalance;
            this.LoyaltyAmount = loyaltyAmount;
            this.LoyaltyAcquirerData = loyaltyAcquirerData;
            this.Rebates = rebates;
        }

        /// <summary>
        /// Gets or Sets LoyaltyAccount
        /// </summary>
        [DataMember(Name = "LoyaltyAccount", IsRequired = false, EmitDefaultValue = false)]
        public LoyaltyAccount LoyaltyAccount { get; set; }

        /// <summary>
        /// if known (provided by the card or an external host).
        /// </summary>
        /// <value>if known (provided by the card or an external host).</value>
        [DataMember(Name = "CurrentBalance", EmitDefaultValue = false)]
        public decimal? CurrentBalance { get; set; }

        /// <summary>
        /// Gets or Sets LoyaltyAmount
        /// </summary>
        [DataMember(Name = "LoyaltyAmount", EmitDefaultValue = false)]
        public LoyaltyAmount LoyaltyAmount { get; set; }

        /// <summary>
        /// Gets or Sets LoyaltyAcquirerData
        /// </summary>
        [DataMember(Name = "LoyaltyAcquirerData", EmitDefaultValue = false)]
        public LoyaltyAcquirerData LoyaltyAcquirerData { get; set; }

        /// <summary>
        /// Gets or Sets Rebates
        /// </summary>
        [DataMember(Name = "Rebates", EmitDefaultValue = false)]
        public Rebates Rebates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyResult {\n");
            sb.Append("  LoyaltyAccount: ").Append(LoyaltyAccount).Append("\n");
            sb.Append("  CurrentBalance: ").Append(CurrentBalance).Append("\n");
            sb.Append("  LoyaltyAmount: ").Append(LoyaltyAmount).Append("\n");
            sb.Append("  LoyaltyAcquirerData: ").Append(LoyaltyAcquirerData).Append("\n");
            sb.Append("  Rebates: ").Append(Rebates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoyaltyResult);
        }

        /// <summary>
        /// Returns true if LoyaltyResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LoyaltyResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LoyaltyAccount == input.LoyaltyAccount ||
                    (this.LoyaltyAccount != null &&
                    this.LoyaltyAccount.Equals(input.LoyaltyAccount))
                ) && 
                (
                    this.CurrentBalance == input.CurrentBalance ||
                    this.CurrentBalance.Equals(input.CurrentBalance)
                ) && 
                (
                    this.LoyaltyAmount == input.LoyaltyAmount ||
                    (this.LoyaltyAmount != null &&
                    this.LoyaltyAmount.Equals(input.LoyaltyAmount))
                ) && 
                (
                    this.LoyaltyAcquirerData == input.LoyaltyAcquirerData ||
                    (this.LoyaltyAcquirerData != null &&
                    this.LoyaltyAcquirerData.Equals(input.LoyaltyAcquirerData))
                ) && 
                (
                    this.Rebates == input.Rebates ||
                    (this.Rebates != null &&
                    this.Rebates.Equals(input.Rebates))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoyaltyAccount != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyAccount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentBalance.GetHashCode();
                if (this.LoyaltyAmount != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyAmount.GetHashCode();
                }
                if (this.LoyaltyAcquirerData != null)
                {
                    hashCode = (hashCode * 59) + this.LoyaltyAcquirerData.GetHashCode();
                }
                if (this.Rebates != null)
                {
                    hashCode = (hashCode * 59) + this.Rebates.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CurrentBalance (decimal) maximum
            if (this.CurrentBalance > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentBalance, must be a value less than or equal to 99999999.999999.", new [] { "CurrentBalance" });
            }

            // CurrentBalance (decimal) minimum
            if (this.CurrentBalance < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentBalance, must be a value greater than or equal to 0.0.", new [] { "CurrentBalance" });
            }

            yield break;
        }
    }

}
