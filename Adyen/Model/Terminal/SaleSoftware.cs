/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Information related to the software of the Sale System which manages the NEXO Sale to POI protocol.
    /// </summary>
    [DataContract(Name = "SaleSoftware")]
    public partial class SaleSoftware : IEquatable<SaleSoftware>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SaleSoftware" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SaleSoftware() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SaleSoftware" /> class.
        /// </summary>
        /// <param name="manufacturerID">manufacturerID (required).</param>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="softwareVersion">softwareVersion (required).</param>
        /// <param name="certificationCode">certificationCode (required).</param>
        public SaleSoftware(string manufacturerID = default(string), string applicationName = default(string), string softwareVersion = default(string), string certificationCode = default(string))
        {
            this.ManufacturerID = manufacturerID;
            this.ApplicationName = applicationName;
            this.SoftwareVersion = softwareVersion;
            this.CertificationCode = certificationCode;
        }

        /// <summary>
        /// Gets or Sets ManufacturerID
        /// </summary>
        [DataMember(Name = "ManufacturerID", IsRequired = false, EmitDefaultValue = false)]
        public string ManufacturerID { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name = "ApplicationName", IsRequired = false, EmitDefaultValue = false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets SoftwareVersion
        /// </summary>
        [DataMember(Name = "SoftwareVersion", IsRequired = false, EmitDefaultValue = false)]
        public string SoftwareVersion { get; set; }

        /// <summary>
        /// Gets or Sets CertificationCode
        /// </summary>
        [DataMember(Name = "CertificationCode", IsRequired = false, EmitDefaultValue = false)]
        public string CertificationCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SaleSoftware {\n");
            sb.Append("  ManufacturerID: ").Append(ManufacturerID).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  SoftwareVersion: ").Append(SoftwareVersion).Append("\n");
            sb.Append("  CertificationCode: ").Append(CertificationCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SaleSoftware);
        }

        /// <summary>
        /// Returns true if SaleSoftware instances are equal
        /// </summary>
        /// <param name="input">Instance of SaleSoftware to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SaleSoftware input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ManufacturerID == input.ManufacturerID ||
                    (this.ManufacturerID != null &&
                    this.ManufacturerID.Equals(input.ManufacturerID))
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.SoftwareVersion == input.SoftwareVersion ||
                    (this.SoftwareVersion != null &&
                    this.SoftwareVersion.Equals(input.SoftwareVersion))
                ) && 
                (
                    this.CertificationCode == input.CertificationCode ||
                    (this.CertificationCode != null &&
                    this.CertificationCode.Equals(input.CertificationCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ManufacturerID != null)
                {
                    hashCode = (hashCode * 59) + this.ManufacturerID.GetHashCode();
                }
                if (this.ApplicationName != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationName.GetHashCode();
                }
                if (this.SoftwareVersion != null)
                {
                    hashCode = (hashCode * 59) + this.SoftwareVersion.GetHashCode();
                }
                if (this.CertificationCode != null)
                {
                    hashCode = (hashCode * 59) + this.CertificationCode.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ManufacturerID (string) pattern
            Regex regexManufacturerID = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexManufacturerID.Match(this.ManufacturerID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ManufacturerID, must match a pattern of " + regexManufacturerID, new [] { "ManufacturerID" });
            }

            // ApplicationName (string) pattern
            Regex regexApplicationName = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexApplicationName.Match(this.ApplicationName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicationName, must match a pattern of " + regexApplicationName, new [] { "ApplicationName" });
            }

            // SoftwareVersion (string) pattern
            Regex regexSoftwareVersion = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexSoftwareVersion.Match(this.SoftwareVersion).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SoftwareVersion, must match a pattern of " + regexSoftwareVersion, new [] { "SoftwareVersion" });
            }

            // CertificationCode (string) pattern
            Regex regexCertificationCode = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexCertificationCode.Match(this.CertificationCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CertificationCode, must match a pattern of " + regexCertificationCode, new [] { "CertificationCode" });
            }

            yield break;
        }
    }

}
