/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// UTMCoordinates
    /// </summary>
    [DataContract(Name = "UTMCoordinates")]
    public partial class UTMCoordinates : IEquatable<UTMCoordinates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UTMCoordinates" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UTMCoordinates() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UTMCoordinates" /> class.
        /// </summary>
        /// <param name="uTMZone">uTMZone (required).</param>
        /// <param name="uTMEastward">uTMEastward (required).</param>
        /// <param name="uTMNorthward">uTMNorthward (required).</param>
        public UTMCoordinates(string uTMZone = default(string), string uTMEastward = default(string), string uTMNorthward = default(string))
        {
            this.UTMZone = uTMZone;
            this.UTMEastward = uTMEastward;
            this.UTMNorthward = uTMNorthward;
        }

        /// <summary>
        /// Gets or Sets UTMZone
        /// </summary>
        [DataMember(Name = "UTMZone", IsRequired = false, EmitDefaultValue = false)]
        public string UTMZone { get; set; }

        /// <summary>
        /// Gets or Sets UTMEastward
        /// </summary>
        [DataMember(Name = "UTMEastward", IsRequired = false, EmitDefaultValue = false)]
        public string UTMEastward { get; set; }

        /// <summary>
        /// Gets or Sets UTMNorthward
        /// </summary>
        [DataMember(Name = "UTMNorthward", IsRequired = false, EmitDefaultValue = false)]
        public string UTMNorthward { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UTMCoordinates {\n");
            sb.Append("  UTMZone: ").Append(UTMZone).Append("\n");
            sb.Append("  UTMEastward: ").Append(UTMEastward).Append("\n");
            sb.Append("  UTMNorthward: ").Append(UTMNorthward).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UTMCoordinates);
        }

        /// <summary>
        /// Returns true if UTMCoordinates instances are equal
        /// </summary>
        /// <param name="input">Instance of UTMCoordinates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UTMCoordinates input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UTMZone == input.UTMZone ||
                    (this.UTMZone != null &&
                    this.UTMZone.Equals(input.UTMZone))
                ) && 
                (
                    this.UTMEastward == input.UTMEastward ||
                    (this.UTMEastward != null &&
                    this.UTMEastward.Equals(input.UTMEastward))
                ) && 
                (
                    this.UTMNorthward == input.UTMNorthward ||
                    (this.UTMNorthward != null &&
                    this.UTMNorthward.Equals(input.UTMNorthward))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UTMZone != null)
                {
                    hashCode = (hashCode * 59) + this.UTMZone.GetHashCode();
                }
                if (this.UTMEastward != null)
                {
                    hashCode = (hashCode * 59) + this.UTMEastward.GetHashCode();
                }
                if (this.UTMNorthward != null)
                {
                    hashCode = (hashCode * 59) + this.UTMNorthward.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // UTMZone (string) pattern
            Regex regexUTMZone = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexUTMZone.Match(this.UTMZone).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UTMZone, must match a pattern of " + regexUTMZone, new [] { "UTMZone" });
            }

            // UTMEastward (string) pattern
            Regex regexUTMEastward = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexUTMEastward.Match(this.UTMEastward).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UTMEastward, must match a pattern of " + regexUTMEastward, new [] { "UTMEastward" });
            }

            // UTMNorthward (string) pattern
            Regex regexUTMNorthward = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexUTMNorthward.Match(this.UTMNorthward).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UTMNorthward, must match a pattern of " + regexUTMNorthward, new [] { "UTMNorthward" });
            }

            yield break;
        }
    }

}
