/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// POIProfile
    /// </summary>
    [DataContract(Name = "POIProfile")]
    public partial class POIProfile : IEquatable<POIProfile>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets GenericProfile
        /// </summary>
        [DataMember(Name = "GenericProfile", EmitDefaultValue = false)]
        public GenericProfile? GenericProfile { get; set; }
        /// <summary>
        /// Defines ServiceProfiles
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceProfilesEnum
        {
            /// <summary>
            /// Enum Batch for value: Batch
            /// </summary>
            [EnumMember(Value = "Batch")]
            Batch = 1,

            /// <summary>
            /// Enum CardReader for value: CardReader
            /// </summary>
            [EnumMember(Value = "CardReader")]
            CardReader = 2,

            /// <summary>
            /// Enum Communication for value: Communication
            /// </summary>
            [EnumMember(Value = "Communication")]
            Communication = 3,

            /// <summary>
            /// Enum Loyalty for value: Loyalty
            /// </summary>
            [EnumMember(Value = "Loyalty")]
            Loyalty = 4,

            /// <summary>
            /// Enum OneTimeRes for value: OneTimeRes
            /// </summary>
            [EnumMember(Value = "OneTimeRes")]
            OneTimeRes = 5,

            /// <summary>
            /// Enum PIN for value: PIN
            /// </summary>
            [EnumMember(Value = "PIN")]
            PIN = 6,

            /// <summary>
            /// Enum Reservation for value: Reservation
            /// </summary>
            [EnumMember(Value = "Reservation")]
            Reservation = 7,

            /// <summary>
            /// Enum Sound for value: Sound
            /// </summary>
            [EnumMember(Value = "Sound")]
            Sound = 8,

            /// <summary>
            /// Enum StoredValue for value: StoredValue
            /// </summary>
            [EnumMember(Value = "StoredValue")]
            StoredValue = 9,

            /// <summary>
            /// Enum Synchro for value: Synchro
            /// </summary>
            [EnumMember(Value = "Synchro")]
            Synchro = 10

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="POIProfile" /> class.
        /// </summary>
        /// <param name="genericProfile">genericProfile.</param>
        /// <param name="serviceProfiles">serviceProfiles.</param>
        public POIProfile(GenericProfile? genericProfile = default(GenericProfile?), List<ServiceProfilesEnum> serviceProfiles = default(List<ServiceProfilesEnum>))
        {
            this.GenericProfile = genericProfile;
            this.ServiceProfiles = serviceProfiles;
        }

        /// <summary>
        /// Gets or Sets ServiceProfiles
        /// </summary>
        [DataMember(Name = "ServiceProfiles", EmitDefaultValue = false)]
        public List<POIProfile.ServiceProfilesEnum> ServiceProfiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class POIProfile {\n");
            sb.Append("  GenericProfile: ").Append(GenericProfile).Append("\n");
            sb.Append("  ServiceProfiles: ").Append(ServiceProfiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as POIProfile);
        }

        /// <summary>
        /// Returns true if POIProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of POIProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(POIProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GenericProfile == input.GenericProfile ||
                    this.GenericProfile.Equals(input.GenericProfile)
                ) && 
                (
                    this.ServiceProfiles == input.ServiceProfiles ||
                    this.ServiceProfiles != null &&
                    input.ServiceProfiles != null &&
                    this.ServiceProfiles.SequenceEqual(input.ServiceProfiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.GenericProfile.GetHashCode();
                if (this.ServiceProfiles != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceProfiles.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
