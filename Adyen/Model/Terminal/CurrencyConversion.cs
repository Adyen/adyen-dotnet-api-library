/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// A currency conversion occurred in the payment, and the merchant needs to know information related to this conversion (e.g. to print on the sale receipt). Information related to a currency conversion.
    /// </summary>
    [DataContract(Name = "CurrencyConversion")]
    public partial class CurrencyConversion : IEquatable<CurrencyConversion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyConversion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CurrencyConversion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyConversion" /> class.
        /// </summary>
        /// <param name="customerApprovedFlag">Notify if the customer has approved something. Indicates if the customer has accepted a currency conversion. (default to true).</param>
        /// <param name="convertedAmount">convertedAmount (required).</param>
        /// <param name="rate">Rate of currency conversion..</param>
        /// <param name="markup">Markup of a currency conversion amount as a percentage..</param>
        /// <param name="commission">Commission for a currency conversion..</param>
        /// <param name="declaration">If a declaration has to be presented to the customer..</param>
        public CurrencyConversion(bool? customerApprovedFlag = true, ConvertedAmount convertedAmount = default(ConvertedAmount), string rate = default(string), string markup = default(string), decimal? commission = default(decimal?), string declaration = default(string))
        {
            this.ConvertedAmount = convertedAmount;
            this.CustomerApprovedFlag = customerApprovedFlag;
            this.Rate = rate;
            this.Markup = markup;
            this.Commission = commission;
            this.Declaration = declaration;
        }

        /// <summary>
        /// Notify if the customer has approved something. Indicates if the customer has accepted a currency conversion.
        /// </summary>
        /// <value>Notify if the customer has approved something. Indicates if the customer has accepted a currency conversion.</value>
        [DataMember(Name = "CustomerApprovedFlag", EmitDefaultValue = false)]
        public bool? CustomerApprovedFlag { get; set; }

        /// <summary>
        /// Gets or Sets ConvertedAmount
        /// </summary>
        [DataMember(Name = "ConvertedAmount", IsRequired = false, EmitDefaultValue = false)]
        public ConvertedAmount ConvertedAmount { get; set; }

        /// <summary>
        /// Rate of currency conversion.
        /// </summary>
        /// <value>Rate of currency conversion.</value>
        [DataMember(Name = "Rate", EmitDefaultValue = false)]
        public string Rate { get; set; }

        /// <summary>
        /// Markup of a currency conversion amount as a percentage.
        /// </summary>
        /// <value>Markup of a currency conversion amount as a percentage.</value>
        [DataMember(Name = "Markup", EmitDefaultValue = false)]
        public string Markup { get; set; }

        /// <summary>
        /// Commission for a currency conversion.
        /// </summary>
        /// <value>Commission for a currency conversion.</value>
        [DataMember(Name = "Commission", EmitDefaultValue = false)]
        public decimal? Commission { get; set; }

        /// <summary>
        /// If a declaration has to be presented to the customer.
        /// </summary>
        /// <value>If a declaration has to be presented to the customer.</value>
        [DataMember(Name = "Declaration", EmitDefaultValue = false)]
        public string Declaration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrencyConversion {\n");
            sb.Append("  CustomerApprovedFlag: ").Append(CustomerApprovedFlag).Append("\n");
            sb.Append("  ConvertedAmount: ").Append(ConvertedAmount).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Markup: ").Append(Markup).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  Declaration: ").Append(Declaration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyConversion);
        }

        /// <summary>
        /// Returns true if CurrencyConversion instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyConversion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyConversion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerApprovedFlag == input.CustomerApprovedFlag ||
                    this.CustomerApprovedFlag.Equals(input.CustomerApprovedFlag)
                ) && 
                (
                    this.ConvertedAmount == input.ConvertedAmount ||
                    (this.ConvertedAmount != null &&
                    this.ConvertedAmount.Equals(input.ConvertedAmount))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.Markup == input.Markup ||
                    (this.Markup != null &&
                    this.Markup.Equals(input.Markup))
                ) && 
                (
                    this.Commission == input.Commission ||
                    this.Commission.Equals(input.Commission)
                ) && 
                (
                    this.Declaration == input.Declaration ||
                    (this.Declaration != null &&
                    this.Declaration.Equals(input.Declaration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CustomerApprovedFlag.GetHashCode();
                if (this.ConvertedAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ConvertedAmount.GetHashCode();
                }
                if (this.Rate != null)
                {
                    hashCode = (hashCode * 59) + this.Rate.GetHashCode();
                }
                if (this.Markup != null)
                {
                    hashCode = (hashCode * 59) + this.Markup.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Commission.GetHashCode();
                if (this.Declaration != null)
                {
                    hashCode = (hashCode * 59) + this.Declaration.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Commission (decimal) maximum
            if (this.Commission > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Commission, must be a value less than or equal to 99999999.999999.", new [] { "Commission" });
            }

            // Commission (decimal) minimum
            if (this.Commission < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Commission, must be a value greater than or equal to 0.0.", new [] { "Commission" });
            }

            // Declaration (string) pattern
            Regex regexDeclaration = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexDeclaration.Match(this.Declaration).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Declaration, must match a pattern of " + regexDeclaration, new [] { "Declaration" });
            }

            yield break;
        }
    }

}
