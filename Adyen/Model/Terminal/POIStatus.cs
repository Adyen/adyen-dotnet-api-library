/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Indicate the availability of the POI Terminal components. The data element is absent if the component is not part of the POI Terminal. State of a POI Terminal.
    /// </summary>
    [DataContract(Name = "POIStatus")]
    public partial class POIStatus : IEquatable<POIStatus>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets GlobalStatus
        /// </summary>
        [DataMember(Name = "GlobalStatus", IsRequired = false, EmitDefaultValue = false)]
        public GlobalStatus GlobalStatus { get; set; }

        /// <summary>
        /// Gets or Sets PrinterStatus
        /// </summary>
        [DataMember(Name = "PrinterStatus", EmitDefaultValue = false)]
        public PrinterStatus? PrinterStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="POIStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected POIStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="POIStatus" /> class.
        /// </summary>
        /// <param name="globalStatus">globalStatus (required).</param>
        /// <param name="securityOKFlag">If security module present..</param>
        /// <param name="pEDOKFlag">If PED present..</param>
        /// <param name="cardReaderOKFlag">If card reader device present..</param>
        /// <param name="printerStatus">printerStatus.</param>
        /// <param name="communicationOKFlag">If communication infrastructure present..</param>
        /// <param name="cashHandlingDevice">cashHandlingDevice.</param>
        /// <param name="fraudPreventionFlag">default False..</param>
        public POIStatus(GlobalStatus globalStatus = default(GlobalStatus), bool? securityOKFlag = default(bool?), bool? pEDOKFlag = default(bool?), bool? cardReaderOKFlag = default(bool?), PrinterStatus? printerStatus = default(PrinterStatus?), bool? communicationOKFlag = default(bool?), List<CashHandlingDevice> cashHandlingDevice = default(List<CashHandlingDevice>), bool? fraudPreventionFlag = default(bool?))
        {
            this.GlobalStatus = globalStatus;
            this.SecurityOKFlag = securityOKFlag;
            this.PEDOKFlag = pEDOKFlag;
            this.CardReaderOKFlag = cardReaderOKFlag;
            this.PrinterStatus = printerStatus;
            this.CommunicationOKFlag = communicationOKFlag;
            this.CashHandlingDevice = cashHandlingDevice;
            this.FraudPreventionFlag = fraudPreventionFlag;
        }

        /// <summary>
        /// If security module present.
        /// </summary>
        /// <value>If security module present.</value>
        [DataMember(Name = "SecurityOKFlag", EmitDefaultValue = false)]
        public bool? SecurityOKFlag { get; set; }

        /// <summary>
        /// If PED present.
        /// </summary>
        /// <value>If PED present.</value>
        [DataMember(Name = "PEDOKFlag", EmitDefaultValue = false)]
        public bool? PEDOKFlag { get; set; }

        /// <summary>
        /// If card reader device present.
        /// </summary>
        /// <value>If card reader device present.</value>
        [DataMember(Name = "CardReaderOKFlag", EmitDefaultValue = false)]
        public bool? CardReaderOKFlag { get; set; }

        /// <summary>
        /// If communication infrastructure present.
        /// </summary>
        /// <value>If communication infrastructure present.</value>
        [DataMember(Name = "CommunicationOKFlag", EmitDefaultValue = false)]
        public bool? CommunicationOKFlag { get; set; }

        /// <summary>
        /// Gets or Sets CashHandlingDevice
        /// </summary>
        [DataMember(Name = "CashHandlingDevice", EmitDefaultValue = false)]
        public List<CashHandlingDevice> CashHandlingDevice { get; set; }

        /// <summary>
        /// default False.
        /// </summary>
        /// <value>default False.</value>
        [DataMember(Name = "FraudPreventionFlag", EmitDefaultValue = false)]
        public bool? FraudPreventionFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class POIStatus {\n");
            sb.Append("  GlobalStatus: ").Append(GlobalStatus).Append("\n");
            sb.Append("  SecurityOKFlag: ").Append(SecurityOKFlag).Append("\n");
            sb.Append("  PEDOKFlag: ").Append(PEDOKFlag).Append("\n");
            sb.Append("  CardReaderOKFlag: ").Append(CardReaderOKFlag).Append("\n");
            sb.Append("  PrinterStatus: ").Append(PrinterStatus).Append("\n");
            sb.Append("  CommunicationOKFlag: ").Append(CommunicationOKFlag).Append("\n");
            sb.Append("  CashHandlingDevice: ").Append(CashHandlingDevice).Append("\n");
            sb.Append("  FraudPreventionFlag: ").Append(FraudPreventionFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as POIStatus);
        }

        /// <summary>
        /// Returns true if POIStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of POIStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(POIStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GlobalStatus == input.GlobalStatus ||
                    this.GlobalStatus.Equals(input.GlobalStatus)
                ) && 
                (
                    this.SecurityOKFlag == input.SecurityOKFlag ||
                    this.SecurityOKFlag.Equals(input.SecurityOKFlag)
                ) && 
                (
                    this.PEDOKFlag == input.PEDOKFlag ||
                    this.PEDOKFlag.Equals(input.PEDOKFlag)
                ) && 
                (
                    this.CardReaderOKFlag == input.CardReaderOKFlag ||
                    this.CardReaderOKFlag.Equals(input.CardReaderOKFlag)
                ) && 
                (
                    this.PrinterStatus == input.PrinterStatus ||
                    this.PrinterStatus.Equals(input.PrinterStatus)
                ) && 
                (
                    this.CommunicationOKFlag == input.CommunicationOKFlag ||
                    this.CommunicationOKFlag.Equals(input.CommunicationOKFlag)
                ) && 
                (
                    this.CashHandlingDevice == input.CashHandlingDevice ||
                    this.CashHandlingDevice != null &&
                    input.CashHandlingDevice != null &&
                    this.CashHandlingDevice.SequenceEqual(input.CashHandlingDevice)
                ) && 
                (
                    this.FraudPreventionFlag == input.FraudPreventionFlag ||
                    this.FraudPreventionFlag.Equals(input.FraudPreventionFlag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.GlobalStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.SecurityOKFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.PEDOKFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.CardReaderOKFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.PrinterStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.CommunicationOKFlag.GetHashCode();
                if (this.CashHandlingDevice != null)
                {
                    hashCode = (hashCode * 59) + this.CashHandlingDevice.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FraudPreventionFlag.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
