/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// In the Login Request, if a Sale Terminal is involved in the login. In other messages, when a logical device is out of order (SaleCapabilites), or when the other data have changed since or were not in the Login. Information related to the software and hardware feature of the Sale Terminal.
    /// </summary>
    [DataContract(Name = "SaleTerminalData")]
    public partial class SaleTerminalData : IEquatable<SaleTerminalData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SaleTerminalData" /> class.
        /// </summary>
        /// <param name="totalsGroupID">If present, default value for all transaction..</param>
        public SaleTerminalData(string totalsGroupID = default(string))
        {
            this.TotalsGroupID = totalsGroupID;
        }

        /// <summary>
        /// If present, default value for all transaction.
        /// </summary>
        /// <value>If present, default value for all transaction.</value>
        [DataMember(Name = "TotalsGroupID", EmitDefaultValue = false)]
        public string TotalsGroupID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SaleTerminalData {\n");
            sb.Append("  TotalsGroupID: ").Append(TotalsGroupID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SaleTerminalData);
        }

        /// <summary>
        /// Returns true if SaleTerminalData instances are equal
        /// </summary>
        /// <param name="input">Instance of SaleTerminalData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SaleTerminalData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalsGroupID == input.TotalsGroupID ||
                    (this.TotalsGroupID != null &&
                    this.TotalsGroupID.Equals(input.TotalsGroupID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalsGroupID != null)
                {
                    hashCode = (hashCode * 59) + this.TotalsGroupID.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // TotalsGroupID (string) pattern
            Regex regexTotalsGroupID = new Regex(@"^.{1,16}$", RegexOptions.CultureInvariant);
            if (false == regexTotalsGroupID.Match(this.TotalsGroupID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalsGroupID, must match a pattern of " + regexTotalsGroupID, new [] { "TotalsGroupID" });
            }

            yield break;
        }
    }

}
