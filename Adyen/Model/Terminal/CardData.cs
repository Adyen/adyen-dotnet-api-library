/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// Allows acquisition of the card data by the Sale System before the Payment, CardAcquisition  or BalanceInquiry request to the POI. It could also be sent in the CardAcquisition response, to be processed by the Sale System. Information related to the payment card used for the transaction.
    /// </summary>
    [DataContract(Name = "CardData")]
    public partial class CardData : IEquatable<CardData>, IValidatableObject
    {
        /// <summary>
        /// Defines EntryMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntryModeEnum
        {
            /// <summary>
            /// Enum Contactless for value: Contactless
            /// </summary>
            [EnumMember(Value = "Contactless")]
            Contactless = 1,

            /// <summary>
            /// Enum File for value: File
            /// </summary>
            [EnumMember(Value = "File")]
            File = 2,

            /// <summary>
            /// Enum ICC for value: ICC
            /// </summary>
            [EnumMember(Value = "ICC")]
            ICC = 3,

            /// <summary>
            /// Enum Keyed for value: Keyed
            /// </summary>
            [EnumMember(Value = "Keyed")]
            Keyed = 4,

            /// <summary>
            /// Enum MagStripe for value: MagStripe
            /// </summary>
            [EnumMember(Value = "MagStripe")]
            MagStripe = 5,

            /// <summary>
            /// Enum Manual for value: Manual
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual = 6,

            /// <summary>
            /// Enum Mobile for value: Mobile
            /// </summary>
            [EnumMember(Value = "Mobile")]
            Mobile = 7,

            /// <summary>
            /// Enum RFID for value: RFID
            /// </summary>
            [EnumMember(Value = "RFID")]
            RFID = 8,

            /// <summary>
            /// Enum Scanned for value: Scanned
            /// </summary>
            [EnumMember(Value = "Scanned")]
            Scanned = 9,

            /// <summary>
            /// Enum SynchronousICC for value: SynchronousICC
            /// </summary>
            [EnumMember(Value = "SynchronousICC")]
            SynchronousICC = 10,

            /// <summary>
            /// Enum Tapped for value: Tapped
            /// </summary>
            [EnumMember(Value = "Tapped")]
            Tapped = 11

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardData" /> class.
        /// </summary>
        /// <param name="paymentBrand">If card PAN is readable ..</param>
        /// <param name="maskedPan">maskedPan.</param>
        /// <param name="paymentAccountRef">paymentAccountRef.</param>
        /// <param name="entryMode">entryMode.</param>
        /// <param name="cardCountryCode">If available in the card..</param>
        /// <param name="protectedCardData">SensitiveCardData protected by CMS EnvelopedData..</param>
        /// <param name="sensitiveCardData">sensitiveCardData.</param>
        /// <param name="allowedProductCode">allowedProductCode.</param>
        /// <param name="allowedProduct">allowedProduct.</param>
        /// <param name="paymentToken">paymentToken.</param>
        /// <param name="customerOrder">customerOrder.</param>
        public CardData(string paymentBrand = default(string), string maskedPan = default(string), string paymentAccountRef = default(string), List<EntryModeEnum> entryMode = default(List<EntryModeEnum>), int? cardCountryCode = default(int?), string protectedCardData = default(string), SensitiveCardData sensitiveCardData = default(SensitiveCardData), List<int> allowedProductCode = default(List<int>), List<AllowedProduct> allowedProduct = default(List<AllowedProduct>), PaymentToken paymentToken = default(PaymentToken), List<CustomerOrder> customerOrder = default(List<CustomerOrder>))
        {
            this.PaymentBrand = paymentBrand;
            this.MaskedPan = maskedPan;
            this.PaymentAccountRef = paymentAccountRef;
            this.EntryMode = entryMode;
            this.CardCountryCode = cardCountryCode;
            this.ProtectedCardData = protectedCardData;
            this.SensitiveCardData = sensitiveCardData;
            this.AllowedProductCode = allowedProductCode;
            this.AllowedProduct = allowedProduct;
            this.PaymentToken = paymentToken;
            this.CustomerOrder = customerOrder;
        }

        /// <summary>
        /// If card PAN is readable .
        /// </summary>
        /// <value>If card PAN is readable .</value>
        [DataMember(Name = "PaymentBrand", EmitDefaultValue = false)]
        public string PaymentBrand { get; set; }

        /// <summary>
        /// Gets or Sets MaskedPan
        /// </summary>
        [DataMember(Name = "MaskedPan", EmitDefaultValue = false)]
        public string MaskedPan { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAccountRef
        /// </summary>
        [DataMember(Name = "PaymentAccountRef", EmitDefaultValue = false)]
        public string PaymentAccountRef { get; set; }

        /// <summary>
        /// Gets or Sets EntryMode
        /// </summary>
        [DataMember(Name = "EntryMode", EmitDefaultValue = false)]
        public List<CardData.EntryModeEnum> EntryMode { get; set; }

        /// <summary>
        /// If available in the card.
        /// </summary>
        /// <value>If available in the card.</value>
        [DataMember(Name = "CardCountryCode", EmitDefaultValue = false)]
        public int? CardCountryCode { get; set; }

        /// <summary>
        /// SensitiveCardData protected by CMS EnvelopedData.
        /// </summary>
        /// <value>SensitiveCardData protected by CMS EnvelopedData.</value>
        [DataMember(Name = "ProtectedCardData", EmitDefaultValue = false)]
        public string ProtectedCardData { get; set; }

        /// <summary>
        /// Gets or Sets SensitiveCardData
        /// </summary>
        [DataMember(Name = "SensitiveCardData", EmitDefaultValue = false)]
        public SensitiveCardData SensitiveCardData { get; set; }

        /// <summary>
        /// Gets or Sets AllowedProductCode
        /// </summary>
        [DataMember(Name = "AllowedProductCode", EmitDefaultValue = false)]
        public List<int> AllowedProductCode { get; set; }

        /// <summary>
        /// Gets or Sets AllowedProduct
        /// </summary>
        [DataMember(Name = "AllowedProduct", EmitDefaultValue = false)]
        public List<AllowedProduct> AllowedProduct { get; set; }

        /// <summary>
        /// Gets or Sets PaymentToken
        /// </summary>
        [DataMember(Name = "PaymentToken", EmitDefaultValue = false)]
        public PaymentToken PaymentToken { get; set; }

        /// <summary>
        /// Gets or Sets CustomerOrder
        /// </summary>
        [DataMember(Name = "CustomerOrder", EmitDefaultValue = false)]
        public List<CustomerOrder> CustomerOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardData {\n");
            sb.Append("  PaymentBrand: ").Append(PaymentBrand).Append("\n");
            sb.Append("  MaskedPan: ").Append(MaskedPan).Append("\n");
            sb.Append("  PaymentAccountRef: ").Append(PaymentAccountRef).Append("\n");
            sb.Append("  EntryMode: ").Append(EntryMode).Append("\n");
            sb.Append("  CardCountryCode: ").Append(CardCountryCode).Append("\n");
            sb.Append("  ProtectedCardData: ").Append(ProtectedCardData).Append("\n");
            sb.Append("  SensitiveCardData: ").Append(SensitiveCardData).Append("\n");
            sb.Append("  AllowedProductCode: ").Append(AllowedProductCode).Append("\n");
            sb.Append("  AllowedProduct: ").Append(AllowedProduct).Append("\n");
            sb.Append("  PaymentToken: ").Append(PaymentToken).Append("\n");
            sb.Append("  CustomerOrder: ").Append(CustomerOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardData);
        }

        /// <summary>
        /// Returns true if CardData instances are equal
        /// </summary>
        /// <param name="input">Instance of CardData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentBrand == input.PaymentBrand ||
                    (this.PaymentBrand != null &&
                    this.PaymentBrand.Equals(input.PaymentBrand))
                ) && 
                (
                    this.MaskedPan == input.MaskedPan ||
                    (this.MaskedPan != null &&
                    this.MaskedPan.Equals(input.MaskedPan))
                ) && 
                (
                    this.PaymentAccountRef == input.PaymentAccountRef ||
                    (this.PaymentAccountRef != null &&
                    this.PaymentAccountRef.Equals(input.PaymentAccountRef))
                ) && 
                (
                    this.EntryMode == input.EntryMode ||
                    this.EntryMode != null &&
                    input.EntryMode != null &&
                    this.EntryMode.SequenceEqual(input.EntryMode)
                ) && 
                (
                    this.CardCountryCode == input.CardCountryCode ||
                    this.CardCountryCode.Equals(input.CardCountryCode)
                ) && 
                (
                    this.ProtectedCardData == input.ProtectedCardData ||
                    (this.ProtectedCardData != null &&
                    this.ProtectedCardData.Equals(input.ProtectedCardData))
                ) && 
                (
                    this.SensitiveCardData == input.SensitiveCardData ||
                    (this.SensitiveCardData != null &&
                    this.SensitiveCardData.Equals(input.SensitiveCardData))
                ) && 
                (
                    this.AllowedProductCode == input.AllowedProductCode ||
                    this.AllowedProductCode != null &&
                    input.AllowedProductCode != null &&
                    this.AllowedProductCode.SequenceEqual(input.AllowedProductCode)
                ) && 
                (
                    this.AllowedProduct == input.AllowedProduct ||
                    this.AllowedProduct != null &&
                    input.AllowedProduct != null &&
                    this.AllowedProduct.SequenceEqual(input.AllowedProduct)
                ) && 
                (
                    this.PaymentToken == input.PaymentToken ||
                    (this.PaymentToken != null &&
                    this.PaymentToken.Equals(input.PaymentToken))
                ) && 
                (
                    this.CustomerOrder == input.CustomerOrder ||
                    this.CustomerOrder != null &&
                    input.CustomerOrder != null &&
                    this.CustomerOrder.SequenceEqual(input.CustomerOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentBrand != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentBrand.GetHashCode();
                }
                if (this.MaskedPan != null)
                {
                    hashCode = (hashCode * 59) + this.MaskedPan.GetHashCode();
                }
                if (this.PaymentAccountRef != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAccountRef.GetHashCode();
                }
                if (this.EntryMode != null)
                {
                    hashCode = (hashCode * 59) + this.EntryMode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CardCountryCode.GetHashCode();
                if (this.ProtectedCardData != null)
                {
                    hashCode = (hashCode * 59) + this.ProtectedCardData.GetHashCode();
                }
                if (this.SensitiveCardData != null)
                {
                    hashCode = (hashCode * 59) + this.SensitiveCardData.GetHashCode();
                }
                if (this.AllowedProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedProductCode.GetHashCode();
                }
                if (this.AllowedProduct != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedProduct.GetHashCode();
                }
                if (this.PaymentToken != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentToken.GetHashCode();
                }
                if (this.CustomerOrder != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerOrder.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PaymentBrand (string) pattern
            Regex regexPaymentBrand = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexPaymentBrand.Match(this.PaymentBrand).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentBrand, must match a pattern of " + regexPaymentBrand, new [] { "PaymentBrand" });
            }

            // MaskedPan (string) pattern
            Regex regexMaskedPan = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexMaskedPan.Match(this.MaskedPan).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaskedPan, must match a pattern of " + regexMaskedPan, new [] { "MaskedPan" });
            }

            // PaymentAccountRef (string) pattern
            Regex regexPaymentAccountRef = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexPaymentAccountRef.Match(this.PaymentAccountRef).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentAccountRef, must match a pattern of " + regexPaymentAccountRef, new [] { "PaymentAccountRef" });
            }

            // CardCountryCode (int) maximum
            if (this.CardCountryCode > (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardCountryCode, must be a value less than or equal to 3.", new [] { "CardCountryCode" });
            }

            // CardCountryCode (int) minimum
            if (this.CardCountryCode < (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardCountryCode, must be a value greater than or equal to 3.", new [] { "CardCountryCode" });
            }

            yield break;
        }
    }

}
