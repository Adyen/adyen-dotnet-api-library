/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// It contains: - the identification of the stored value accounts or the stored value cards, if provided by the Sale System, and - the associated products sold by the Sale System.. Data related to the stored value card.
    /// </summary>
    [DataContract(Name = "StoredValueData")]
    public partial class StoredValueData : IEquatable<StoredValueData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets StoredValueTransactionType
        /// </summary>
        [DataMember(Name = "StoredValueTransactionType", IsRequired = false, EmitDefaultValue = false)]
        public StoredValueTransactionType StoredValueTransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredValueData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoredValueData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredValueData" /> class.
        /// </summary>
        /// <param name="storedValueProvider">If more than one provider to manage on the POI, and StoredValueAccountID absent..</param>
        /// <param name="storedValueTransactionType">storedValueTransactionType (required).</param>
        /// <param name="storedValueAccountID">storedValueAccountID.</param>
        /// <param name="originalPOITransaction">originalPOITransaction.</param>
        /// <param name="productCode">Product code of item purchased with the transaction..</param>
        /// <param name="eanUpc">Standard product code of item purchased with the transaction..</param>
        /// <param name="itemAmount">Total amount of the item line..</param>
        /// <param name="currency">Currency of a monetary amount..</param>
        public StoredValueData(string storedValueProvider = default(string), StoredValueTransactionType storedValueTransactionType = default(StoredValueTransactionType), StoredValueAccountID storedValueAccountID = default(StoredValueAccountID), OriginalPOITransaction originalPOITransaction = default(OriginalPOITransaction), int? productCode = default(int?), int? eanUpc = default(int?), decimal? itemAmount = default(decimal?), string currency = default(string))
        {
            this.StoredValueTransactionType = storedValueTransactionType;
            this.StoredValueProvider = storedValueProvider;
            this.StoredValueAccountID = storedValueAccountID;
            this.OriginalPOITransaction = originalPOITransaction;
            this.ProductCode = productCode;
            this.EanUpc = eanUpc;
            this.ItemAmount = itemAmount;
            this.Currency = currency;
        }

        /// <summary>
        /// If more than one provider to manage on the POI, and StoredValueAccountID absent.
        /// </summary>
        /// <value>If more than one provider to manage on the POI, and StoredValueAccountID absent.</value>
        [DataMember(Name = "StoredValueProvider", EmitDefaultValue = false)]
        public string StoredValueProvider { get; set; }

        /// <summary>
        /// Gets or Sets StoredValueAccountID
        /// </summary>
        [DataMember(Name = "StoredValueAccountID", EmitDefaultValue = false)]
        public StoredValueAccountID StoredValueAccountID { get; set; }

        /// <summary>
        /// Gets or Sets OriginalPOITransaction
        /// </summary>
        [DataMember(Name = "OriginalPOITransaction", EmitDefaultValue = false)]
        public OriginalPOITransaction OriginalPOITransaction { get; set; }

        /// <summary>
        /// Product code of item purchased with the transaction.
        /// </summary>
        /// <value>Product code of item purchased with the transaction.</value>
        [DataMember(Name = "ProductCode", EmitDefaultValue = false)]
        public int? ProductCode { get; set; }

        /// <summary>
        /// Standard product code of item purchased with the transaction.
        /// </summary>
        /// <value>Standard product code of item purchased with the transaction.</value>
        [DataMember(Name = "EanUpc", EmitDefaultValue = false)]
        public int? EanUpc { get; set; }

        /// <summary>
        /// Total amount of the item line.
        /// </summary>
        /// <value>Total amount of the item line.</value>
        [DataMember(Name = "ItemAmount", EmitDefaultValue = false)]
        public decimal? ItemAmount { get; set; }

        /// <summary>
        /// Currency of a monetary amount.
        /// </summary>
        /// <value>Currency of a monetary amount.</value>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StoredValueData {\n");
            sb.Append("  StoredValueProvider: ").Append(StoredValueProvider).Append("\n");
            sb.Append("  StoredValueTransactionType: ").Append(StoredValueTransactionType).Append("\n");
            sb.Append("  StoredValueAccountID: ").Append(StoredValueAccountID).Append("\n");
            sb.Append("  OriginalPOITransaction: ").Append(OriginalPOITransaction).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  EanUpc: ").Append(EanUpc).Append("\n");
            sb.Append("  ItemAmount: ").Append(ItemAmount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoredValueData);
        }

        /// <summary>
        /// Returns true if StoredValueData instances are equal
        /// </summary>
        /// <param name="input">Instance of StoredValueData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoredValueData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StoredValueProvider == input.StoredValueProvider ||
                    (this.StoredValueProvider != null &&
                    this.StoredValueProvider.Equals(input.StoredValueProvider))
                ) && 
                (
                    this.StoredValueTransactionType == input.StoredValueTransactionType ||
                    this.StoredValueTransactionType.Equals(input.StoredValueTransactionType)
                ) && 
                (
                    this.StoredValueAccountID == input.StoredValueAccountID ||
                    (this.StoredValueAccountID != null &&
                    this.StoredValueAccountID.Equals(input.StoredValueAccountID))
                ) && 
                (
                    this.OriginalPOITransaction == input.OriginalPOITransaction ||
                    (this.OriginalPOITransaction != null &&
                    this.OriginalPOITransaction.Equals(input.OriginalPOITransaction))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    this.ProductCode.Equals(input.ProductCode)
                ) && 
                (
                    this.EanUpc == input.EanUpc ||
                    this.EanUpc.Equals(input.EanUpc)
                ) && 
                (
                    this.ItemAmount == input.ItemAmount ||
                    this.ItemAmount.Equals(input.ItemAmount)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoredValueProvider != null)
                {
                    hashCode = (hashCode * 59) + this.StoredValueProvider.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StoredValueTransactionType.GetHashCode();
                if (this.StoredValueAccountID != null)
                {
                    hashCode = (hashCode * 59) + this.StoredValueAccountID.GetHashCode();
                }
                if (this.OriginalPOITransaction != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalPOITransaction.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                hashCode = (hashCode * 59) + this.EanUpc.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemAmount.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StoredValueProvider (string) pattern
            Regex regexStoredValueProvider = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexStoredValueProvider.Match(this.StoredValueProvider).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StoredValueProvider, must match a pattern of " + regexStoredValueProvider, new [] { "StoredValueProvider" });
            }

            // ProductCode (int) maximum
            if (this.ProductCode > (int)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, must be a value less than or equal to 20.", new [] { "ProductCode" });
            }

            // ProductCode (int) minimum
            if (this.ProductCode < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, must be a value greater than or equal to 1.", new [] { "ProductCode" });
            }

            // ItemAmount (decimal) maximum
            if (this.ItemAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ItemAmount, must be a value less than or equal to 99999999.999999.", new [] { "ItemAmount" });
            }

            // ItemAmount (decimal) minimum
            if (this.ItemAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ItemAmount, must be a value greater than or equal to 0.0.", new [] { "ItemAmount" });
            }

            // Currency (string) pattern
            Regex regexCurrency = new Regex(@"^[A-Z]{3,3}$", RegexOptions.CultureInvariant);
            if (false == regexCurrency.Match(this.Currency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, must match a pattern of " + regexCurrency, new [] { "Currency" });
            }

            yield break;
        }
    }

}
