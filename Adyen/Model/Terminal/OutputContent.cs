/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// This is a sequence of elements if they have different formats. Content to display or print.
    /// </summary>
    [DataContract(Name = "OutputContent")]
    public partial class OutputContent : IEquatable<OutputContent>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OutputFormat
        /// </summary>
        [DataMember(Name = "OutputFormat", IsRequired = false, EmitDefaultValue = false)]
        public OutputFormat OutputFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutputContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputContent" /> class.
        /// </summary>
        /// <param name="outputFormat">outputFormat (required).</param>
        /// <param name="predefinedContent">predefinedContent.</param>
        /// <param name="outputText">outputText.</param>
        /// <param name="outputXHTML">Mandatory, if OutputFormat is XHTML, not allowed otherwise..</param>
        /// <param name="outputBarcode">outputBarcode.</param>
        public OutputContent(OutputFormat outputFormat = default(OutputFormat), PredefinedContent predefinedContent = default(PredefinedContent), List<OutputText> outputText = default(List<OutputText>), byte[] outputXHTML = default(byte[]), OutputBarcode outputBarcode = default(OutputBarcode))
        {
            this.OutputFormat = outputFormat;
            this.PredefinedContent = predefinedContent;
            this.OutputText = outputText;
            this.OutputXHTML = outputXHTML;
            this.OutputBarcode = outputBarcode;
        }

        /// <summary>
        /// Gets or Sets PredefinedContent
        /// </summary>
        [DataMember(Name = "PredefinedContent", EmitDefaultValue = false)]
        public PredefinedContent PredefinedContent { get; set; }

        /// <summary>
        /// Gets or Sets OutputText
        /// </summary>
        [DataMember(Name = "OutputText", EmitDefaultValue = false)]
        public List<OutputText> OutputText { get; set; }

        /// <summary>
        /// Mandatory, if OutputFormat is XHTML, not allowed otherwise.
        /// </summary>
        /// <value>Mandatory, if OutputFormat is XHTML, not allowed otherwise.</value>
        [DataMember(Name = "OutputXHTML", EmitDefaultValue = false)]
        public byte[] OutputXHTML { get; set; }

        /// <summary>
        /// Gets or Sets OutputBarcode
        /// </summary>
        [DataMember(Name = "OutputBarcode", EmitDefaultValue = false)]
        public OutputBarcode OutputBarcode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutputContent {\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  PredefinedContent: ").Append(PredefinedContent).Append("\n");
            sb.Append("  OutputText: ").Append(OutputText).Append("\n");
            sb.Append("  OutputXHTML: ").Append(OutputXHTML).Append("\n");
            sb.Append("  OutputBarcode: ").Append(OutputBarcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutputContent);
        }

        /// <summary>
        /// Returns true if OutputContent instances are equal
        /// </summary>
        /// <param name="input">Instance of OutputContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutputContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OutputFormat == input.OutputFormat ||
                    this.OutputFormat.Equals(input.OutputFormat)
                ) && 
                (
                    this.PredefinedContent == input.PredefinedContent ||
                    (this.PredefinedContent != null &&
                    this.PredefinedContent.Equals(input.PredefinedContent))
                ) && 
                (
                    this.OutputText == input.OutputText ||
                    this.OutputText != null &&
                    input.OutputText != null &&
                    this.OutputText.SequenceEqual(input.OutputText)
                ) && 
                (
                    this.OutputXHTML == input.OutputXHTML ||
                    (this.OutputXHTML != null &&
                    this.OutputXHTML.Equals(input.OutputXHTML))
                ) && 
                (
                    this.OutputBarcode == input.OutputBarcode ||
                    (this.OutputBarcode != null &&
                    this.OutputBarcode.Equals(input.OutputBarcode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OutputFormat.GetHashCode();
                if (this.PredefinedContent != null)
                {
                    hashCode = (hashCode * 59) + this.PredefinedContent.GetHashCode();
                }
                if (this.OutputText != null)
                {
                    hashCode = (hashCode * 59) + this.OutputText.GetHashCode();
                }
                if (this.OutputXHTML != null)
                {
                    hashCode = (hashCode * 59) + this.OutputXHTML.GetHashCode();
                }
                if (this.OutputBarcode != null)
                {
                    hashCode = (hashCode * 59) + this.OutputBarcode.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
