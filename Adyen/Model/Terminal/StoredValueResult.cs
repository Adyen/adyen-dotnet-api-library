/*
* Adyen Terminal API
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Terminal
{
    /// <summary>
    /// For each stored value card loaded or reloaded, in the StoredValue response message. Result of loading/reloading a stored value card..
    /// </summary>
    [DataContract(Name = "StoredValueResult")]
    public partial class StoredValueResult : IEquatable<StoredValueResult>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets StoredValueTransactionType
        /// </summary>
        [DataMember(Name = "StoredValueTransactionType", IsRequired = false, EmitDefaultValue = false)]
        public StoredValueTransactionType StoredValueTransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredValueResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoredValueResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredValueResult" /> class.
        /// </summary>
        /// <param name="storedValueTransactionType">storedValueTransactionType (required).</param>
        /// <param name="productCode">Copy..</param>
        /// <param name="eanUpc">Copy..</param>
        /// <param name="itemAmount">Total amount of the item line..</param>
        /// <param name="currency">Copy..</param>
        /// <param name="storedValueAccountStatus">storedValueAccountStatus.</param>
        /// <param name="hostTransactionID">hostTransactionID.</param>
        public StoredValueResult(StoredValueTransactionType storedValueTransactionType = default(StoredValueTransactionType), int? productCode = default(int?), int? eanUpc = default(int?), decimal? itemAmount = default(decimal?), string currency = default(string), StoredValueAccountStatus storedValueAccountStatus = default(StoredValueAccountStatus), TransactionIDType hostTransactionID = default(TransactionIDType))
        {
            this.StoredValueTransactionType = storedValueTransactionType;
            this.ProductCode = productCode;
            this.EanUpc = eanUpc;
            this.ItemAmount = itemAmount;
            this.Currency = currency;
            this.StoredValueAccountStatus = storedValueAccountStatus;
            this.HostTransactionID = hostTransactionID;
        }

        /// <summary>
        /// Copy.
        /// </summary>
        /// <value>Copy.</value>
        [DataMember(Name = "ProductCode", EmitDefaultValue = false)]
        public int? ProductCode { get; set; }

        /// <summary>
        /// Copy.
        /// </summary>
        /// <value>Copy.</value>
        [DataMember(Name = "EanUpc", EmitDefaultValue = false)]
        public int? EanUpc { get; set; }

        /// <summary>
        /// Total amount of the item line.
        /// </summary>
        /// <value>Total amount of the item line.</value>
        [DataMember(Name = "ItemAmount", EmitDefaultValue = false)]
        public decimal? ItemAmount { get; set; }

        /// <summary>
        /// Copy.
        /// </summary>
        /// <value>Copy.</value>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets StoredValueAccountStatus
        /// </summary>
        [DataMember(Name = "StoredValueAccountStatus", EmitDefaultValue = false)]
        public StoredValueAccountStatus StoredValueAccountStatus { get; set; }

        /// <summary>
        /// Gets or Sets HostTransactionID
        /// </summary>
        [DataMember(Name = "HostTransactionID", EmitDefaultValue = false)]
        public TransactionIDType HostTransactionID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StoredValueResult {\n");
            sb.Append("  StoredValueTransactionType: ").Append(StoredValueTransactionType).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  EanUpc: ").Append(EanUpc).Append("\n");
            sb.Append("  ItemAmount: ").Append(ItemAmount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  StoredValueAccountStatus: ").Append(StoredValueAccountStatus).Append("\n");
            sb.Append("  HostTransactionID: ").Append(HostTransactionID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoredValueResult);
        }

        /// <summary>
        /// Returns true if StoredValueResult instances are equal
        /// </summary>
        /// <param name="input">Instance of StoredValueResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoredValueResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StoredValueTransactionType == input.StoredValueTransactionType ||
                    this.StoredValueTransactionType.Equals(input.StoredValueTransactionType)
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    this.ProductCode.Equals(input.ProductCode)
                ) && 
                (
                    this.EanUpc == input.EanUpc ||
                    this.EanUpc.Equals(input.EanUpc)
                ) && 
                (
                    this.ItemAmount == input.ItemAmount ||
                    this.ItemAmount.Equals(input.ItemAmount)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.StoredValueAccountStatus == input.StoredValueAccountStatus ||
                    (this.StoredValueAccountStatus != null &&
                    this.StoredValueAccountStatus.Equals(input.StoredValueAccountStatus))
                ) && 
                (
                    this.HostTransactionID == input.HostTransactionID ||
                    (this.HostTransactionID != null &&
                    this.HostTransactionID.Equals(input.HostTransactionID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.StoredValueTransactionType.GetHashCode();
                hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                hashCode = (hashCode * 59) + this.EanUpc.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemAmount.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.StoredValueAccountStatus != null)
                {
                    hashCode = (hashCode * 59) + this.StoredValueAccountStatus.GetHashCode();
                }
                if (this.HostTransactionID != null)
                {
                    hashCode = (hashCode * 59) + this.HostTransactionID.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ProductCode (int) maximum
            if (this.ProductCode > (int)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, must be a value less than or equal to 20.", new [] { "ProductCode" });
            }

            // ProductCode (int) minimum
            if (this.ProductCode < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, must be a value greater than or equal to 1.", new [] { "ProductCode" });
            }

            // ItemAmount (decimal) maximum
            if (this.ItemAmount > (decimal)99999999.999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ItemAmount, must be a value less than or equal to 99999999.999999.", new [] { "ItemAmount" });
            }

            // ItemAmount (decimal) minimum
            if (this.ItemAmount < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ItemAmount, must be a value greater than or equal to 0.0.", new [] { "ItemAmount" });
            }

            // Currency (string) pattern
            Regex regexCurrency = new Regex(@"^[A-Z]{3,3}$", RegexOptions.CultureInvariant);
            if (false == regexCurrency.Match(this.Currency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, must match a pattern of " + regexCurrency, new [] { "Currency" });
            }

            yield break;
        }
    }

}
