/*
* Adyen Payment API
*
*
* The version of the OpenAPI document: 68
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Payment
{
    /// <summary>
    /// AdditionalDataOpenInvoice
    /// </summary>
    [DataContract(Name = "AdditionalDataOpenInvoice")]
    public partial class AdditionalDataOpenInvoice : IEquatable<AdditionalDataOpenInvoice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataOpenInvoice" /> class.
        /// </summary>
        /// <param name="openinvoicedataMerchantData">Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.  The &#x60;merchantData&#x60; parameter needs to be added to the &#x60;openinvoicedata&#x60; signature at the end.  Since the field is optional, if it&#39;s not included it does not impact computing the merchant signature.  Applies only to Klarna.  You can contact Klarna for the format and structure of the string..</param>
        /// <param name="openinvoicedataNumberOfLines">The number of invoice lines included in &#x60;openinvoicedata&#x60;.  There needs to be at least one line, so &#x60;numberOfLines&#x60; needs to be at least 1..</param>
        /// <param name="openinvoicedataRecipientFirstName">First name of the recipient. If the delivery address and the billing address are different, specify the &#x60;recipientFirstName&#x60; and &#x60;recipientLastName&#x60; to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna..</param>
        /// <param name="openinvoicedataRecipientLastName">Last name of the recipient. If the delivery address and the billing address are different, specify the &#x60;recipientFirstName&#x60; and &#x60;recipientLastName&#x60; to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna..</param>
        /// <param name="openinvoicedataLineItemNrCurrencyCode">The three-character ISO currency code..</param>
        /// <param name="openinvoicedataLineItemNrDescription">A text description of the product the invoice line refers to..</param>
        /// <param name="openinvoicedataLineItemNrItemAmount">The price for one item in the invoice line, represented in minor units.  The due amount for the item, VAT excluded..</param>
        /// <param name="openinvoicedataLineItemNrItemId">A unique id for this item. Required for RatePay if the description of each item is not unique..</param>
        /// <param name="openinvoicedataLineItemNrItemVatAmount">The VAT due for one item in the invoice line, represented in minor units..</param>
        /// <param name="openinvoicedataLineItemNrItemVatPercentage">The VAT percentage for one item in the invoice line, represented in minor units.  For example, 19% VAT is specified as 1900..</param>
        /// <param name="openinvoicedataLineItemNrNumberOfItems">The number of units purchased of a specific product..</param>
        /// <param name="openinvoicedataLineItemNrReturnShippingCompany">Name of the shipping company handling the the return shipment..</param>
        /// <param name="openinvoicedataLineItemNrReturnTrackingNumber">The tracking number for the return of the shipment..</param>
        /// <param name="openinvoicedataLineItemNrReturnTrackingUri">URI where the customer can track the return of their shipment..</param>
        /// <param name="openinvoicedataLineItemNrShippingCompany">Name of the shipping company handling the delivery..</param>
        /// <param name="openinvoicedataLineItemNrShippingMethod">Shipping method..</param>
        /// <param name="openinvoicedataLineItemNrTrackingNumber">The tracking number for the shipment..</param>
        /// <param name="openinvoicedataLineItemNrTrackingUri">URI where the customer can track their shipment..</param>
        public AdditionalDataOpenInvoice(string openinvoicedataMerchantData = default(string), string openinvoicedataNumberOfLines = default(string), string openinvoicedataRecipientFirstName = default(string), string openinvoicedataRecipientLastName = default(string), string openinvoicedataLineItemNrCurrencyCode = default(string), string openinvoicedataLineItemNrDescription = default(string), string openinvoicedataLineItemNrItemAmount = default(string), string openinvoicedataLineItemNrItemId = default(string), string openinvoicedataLineItemNrItemVatAmount = default(string), string openinvoicedataLineItemNrItemVatPercentage = default(string), string openinvoicedataLineItemNrNumberOfItems = default(string), string openinvoicedataLineItemNrReturnShippingCompany = default(string), string openinvoicedataLineItemNrReturnTrackingNumber = default(string), string openinvoicedataLineItemNrReturnTrackingUri = default(string), string openinvoicedataLineItemNrShippingCompany = default(string), string openinvoicedataLineItemNrShippingMethod = default(string), string openinvoicedataLineItemNrTrackingNumber = default(string), string openinvoicedataLineItemNrTrackingUri = default(string))
        {
            this.OpeninvoicedataMerchantData = openinvoicedataMerchantData;
            this.OpeninvoicedataNumberOfLines = openinvoicedataNumberOfLines;
            this.OpeninvoicedataRecipientFirstName = openinvoicedataRecipientFirstName;
            this.OpeninvoicedataRecipientLastName = openinvoicedataRecipientLastName;
            this.OpeninvoicedataLineItemNrCurrencyCode = openinvoicedataLineItemNrCurrencyCode;
            this.OpeninvoicedataLineItemNrDescription = openinvoicedataLineItemNrDescription;
            this.OpeninvoicedataLineItemNrItemAmount = openinvoicedataLineItemNrItemAmount;
            this.OpeninvoicedataLineItemNrItemId = openinvoicedataLineItemNrItemId;
            this.OpeninvoicedataLineItemNrItemVatAmount = openinvoicedataLineItemNrItemVatAmount;
            this.OpeninvoicedataLineItemNrItemVatPercentage = openinvoicedataLineItemNrItemVatPercentage;
            this.OpeninvoicedataLineItemNrNumberOfItems = openinvoicedataLineItemNrNumberOfItems;
            this.OpeninvoicedataLineItemNrReturnShippingCompany = openinvoicedataLineItemNrReturnShippingCompany;
            this.OpeninvoicedataLineItemNrReturnTrackingNumber = openinvoicedataLineItemNrReturnTrackingNumber;
            this.OpeninvoicedataLineItemNrReturnTrackingUri = openinvoicedataLineItemNrReturnTrackingUri;
            this.OpeninvoicedataLineItemNrShippingCompany = openinvoicedataLineItemNrShippingCompany;
            this.OpeninvoicedataLineItemNrShippingMethod = openinvoicedataLineItemNrShippingMethod;
            this.OpeninvoicedataLineItemNrTrackingNumber = openinvoicedataLineItemNrTrackingNumber;
            this.OpeninvoicedataLineItemNrTrackingUri = openinvoicedataLineItemNrTrackingUri;
        }

        /// <summary>
        /// Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.  The &#x60;merchantData&#x60; parameter needs to be added to the &#x60;openinvoicedata&#x60; signature at the end.  Since the field is optional, if it&#39;s not included it does not impact computing the merchant signature.  Applies only to Klarna.  You can contact Klarna for the format and structure of the string.
        /// </summary>
        /// <value>Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.  The &#x60;merchantData&#x60; parameter needs to be added to the &#x60;openinvoicedata&#x60; signature at the end.  Since the field is optional, if it&#39;s not included it does not impact computing the merchant signature.  Applies only to Klarna.  You can contact Klarna for the format and structure of the string.</value>
        [DataMember(Name = "openinvoicedata.merchantData", EmitDefaultValue = false)]
        public string OpeninvoicedataMerchantData { get; set; }

        /// <summary>
        /// The number of invoice lines included in &#x60;openinvoicedata&#x60;.  There needs to be at least one line, so &#x60;numberOfLines&#x60; needs to be at least 1.
        /// </summary>
        /// <value>The number of invoice lines included in &#x60;openinvoicedata&#x60;.  There needs to be at least one line, so &#x60;numberOfLines&#x60; needs to be at least 1.</value>
        [DataMember(Name = "openinvoicedata.numberOfLines", EmitDefaultValue = false)]
        public string OpeninvoicedataNumberOfLines { get; set; }

        /// <summary>
        /// First name of the recipient. If the delivery address and the billing address are different, specify the &#x60;recipientFirstName&#x60; and &#x60;recipientLastName&#x60; to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.
        /// </summary>
        /// <value>First name of the recipient. If the delivery address and the billing address are different, specify the &#x60;recipientFirstName&#x60; and &#x60;recipientLastName&#x60; to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.</value>
        [DataMember(Name = "openinvoicedata.recipientFirstName", EmitDefaultValue = false)]
        public string OpeninvoicedataRecipientFirstName { get; set; }

        /// <summary>
        /// Last name of the recipient. If the delivery address and the billing address are different, specify the &#x60;recipientFirstName&#x60; and &#x60;recipientLastName&#x60; to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.
        /// </summary>
        /// <value>Last name of the recipient. If the delivery address and the billing address are different, specify the &#x60;recipientFirstName&#x60; and &#x60;recipientLastName&#x60; to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.</value>
        [DataMember(Name = "openinvoicedata.recipientLastName", EmitDefaultValue = false)]
        public string OpeninvoicedataRecipientLastName { get; set; }

        /// <summary>
        /// The three-character ISO currency code.
        /// </summary>
        /// <value>The three-character ISO currency code.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].currencyCode", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrCurrencyCode { get; set; }

        /// <summary>
        /// A text description of the product the invoice line refers to.
        /// </summary>
        /// <value>A text description of the product the invoice line refers to.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].description", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrDescription { get; set; }

        /// <summary>
        /// The price for one item in the invoice line, represented in minor units.  The due amount for the item, VAT excluded.
        /// </summary>
        /// <value>The price for one item in the invoice line, represented in minor units.  The due amount for the item, VAT excluded.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].itemAmount", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrItemAmount { get; set; }

        /// <summary>
        /// A unique id for this item. Required for RatePay if the description of each item is not unique.
        /// </summary>
        /// <value>A unique id for this item. Required for RatePay if the description of each item is not unique.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].itemId", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrItemId { get; set; }

        /// <summary>
        /// The VAT due for one item in the invoice line, represented in minor units.
        /// </summary>
        /// <value>The VAT due for one item in the invoice line, represented in minor units.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].itemVatAmount", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrItemVatAmount { get; set; }

        /// <summary>
        /// The VAT percentage for one item in the invoice line, represented in minor units.  For example, 19% VAT is specified as 1900.
        /// </summary>
        /// <value>The VAT percentage for one item in the invoice line, represented in minor units.  For example, 19% VAT is specified as 1900.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].itemVatPercentage", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrItemVatPercentage { get; set; }

        /// <summary>
        /// The number of units purchased of a specific product.
        /// </summary>
        /// <value>The number of units purchased of a specific product.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].numberOfItems", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrNumberOfItems { get; set; }

        /// <summary>
        /// Name of the shipping company handling the the return shipment.
        /// </summary>
        /// <value>Name of the shipping company handling the the return shipment.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].returnShippingCompany", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrReturnShippingCompany { get; set; }

        /// <summary>
        /// The tracking number for the return of the shipment.
        /// </summary>
        /// <value>The tracking number for the return of the shipment.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].returnTrackingNumber", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrReturnTrackingNumber { get; set; }

        /// <summary>
        /// URI where the customer can track the return of their shipment.
        /// </summary>
        /// <value>URI where the customer can track the return of their shipment.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].returnTrackingUri", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrReturnTrackingUri { get; set; }

        /// <summary>
        /// Name of the shipping company handling the delivery.
        /// </summary>
        /// <value>Name of the shipping company handling the delivery.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].shippingCompany", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrShippingCompany { get; set; }

        /// <summary>
        /// Shipping method.
        /// </summary>
        /// <value>Shipping method.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].shippingMethod", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrShippingMethod { get; set; }

        /// <summary>
        /// The tracking number for the shipment.
        /// </summary>
        /// <value>The tracking number for the shipment.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].trackingNumber", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrTrackingNumber { get; set; }

        /// <summary>
        /// URI where the customer can track their shipment.
        /// </summary>
        /// <value>URI where the customer can track their shipment.</value>
        [DataMember(Name = "openinvoicedataLine[itemNr].trackingUri", EmitDefaultValue = false)]
        public string OpeninvoicedataLineItemNrTrackingUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataOpenInvoice {\n");
            sb.Append("  OpeninvoicedataMerchantData: ").Append(OpeninvoicedataMerchantData).Append("\n");
            sb.Append("  OpeninvoicedataNumberOfLines: ").Append(OpeninvoicedataNumberOfLines).Append("\n");
            sb.Append("  OpeninvoicedataRecipientFirstName: ").Append(OpeninvoicedataRecipientFirstName).Append("\n");
            sb.Append("  OpeninvoicedataRecipientLastName: ").Append(OpeninvoicedataRecipientLastName).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrCurrencyCode: ").Append(OpeninvoicedataLineItemNrCurrencyCode).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrDescription: ").Append(OpeninvoicedataLineItemNrDescription).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrItemAmount: ").Append(OpeninvoicedataLineItemNrItemAmount).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrItemId: ").Append(OpeninvoicedataLineItemNrItemId).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrItemVatAmount: ").Append(OpeninvoicedataLineItemNrItemVatAmount).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrItemVatPercentage: ").Append(OpeninvoicedataLineItemNrItemVatPercentage).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrNumberOfItems: ").Append(OpeninvoicedataLineItemNrNumberOfItems).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrReturnShippingCompany: ").Append(OpeninvoicedataLineItemNrReturnShippingCompany).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrReturnTrackingNumber: ").Append(OpeninvoicedataLineItemNrReturnTrackingNumber).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrReturnTrackingUri: ").Append(OpeninvoicedataLineItemNrReturnTrackingUri).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrShippingCompany: ").Append(OpeninvoicedataLineItemNrShippingCompany).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrShippingMethod: ").Append(OpeninvoicedataLineItemNrShippingMethod).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrTrackingNumber: ").Append(OpeninvoicedataLineItemNrTrackingNumber).Append("\n");
            sb.Append("  OpeninvoicedataLineItemNrTrackingUri: ").Append(OpeninvoicedataLineItemNrTrackingUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalDataOpenInvoice);
        }

        /// <summary>
        /// Returns true if AdditionalDataOpenInvoice instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalDataOpenInvoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalDataOpenInvoice input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OpeninvoicedataMerchantData == input.OpeninvoicedataMerchantData ||
                    (this.OpeninvoicedataMerchantData != null &&
                    this.OpeninvoicedataMerchantData.Equals(input.OpeninvoicedataMerchantData))
                ) && 
                (
                    this.OpeninvoicedataNumberOfLines == input.OpeninvoicedataNumberOfLines ||
                    (this.OpeninvoicedataNumberOfLines != null &&
                    this.OpeninvoicedataNumberOfLines.Equals(input.OpeninvoicedataNumberOfLines))
                ) && 
                (
                    this.OpeninvoicedataRecipientFirstName == input.OpeninvoicedataRecipientFirstName ||
                    (this.OpeninvoicedataRecipientFirstName != null &&
                    this.OpeninvoicedataRecipientFirstName.Equals(input.OpeninvoicedataRecipientFirstName))
                ) && 
                (
                    this.OpeninvoicedataRecipientLastName == input.OpeninvoicedataRecipientLastName ||
                    (this.OpeninvoicedataRecipientLastName != null &&
                    this.OpeninvoicedataRecipientLastName.Equals(input.OpeninvoicedataRecipientLastName))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrCurrencyCode == input.OpeninvoicedataLineItemNrCurrencyCode ||
                    (this.OpeninvoicedataLineItemNrCurrencyCode != null &&
                    this.OpeninvoicedataLineItemNrCurrencyCode.Equals(input.OpeninvoicedataLineItemNrCurrencyCode))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrDescription == input.OpeninvoicedataLineItemNrDescription ||
                    (this.OpeninvoicedataLineItemNrDescription != null &&
                    this.OpeninvoicedataLineItemNrDescription.Equals(input.OpeninvoicedataLineItemNrDescription))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrItemAmount == input.OpeninvoicedataLineItemNrItemAmount ||
                    (this.OpeninvoicedataLineItemNrItemAmount != null &&
                    this.OpeninvoicedataLineItemNrItemAmount.Equals(input.OpeninvoicedataLineItemNrItemAmount))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrItemId == input.OpeninvoicedataLineItemNrItemId ||
                    (this.OpeninvoicedataLineItemNrItemId != null &&
                    this.OpeninvoicedataLineItemNrItemId.Equals(input.OpeninvoicedataLineItemNrItemId))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrItemVatAmount == input.OpeninvoicedataLineItemNrItemVatAmount ||
                    (this.OpeninvoicedataLineItemNrItemVatAmount != null &&
                    this.OpeninvoicedataLineItemNrItemVatAmount.Equals(input.OpeninvoicedataLineItemNrItemVatAmount))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrItemVatPercentage == input.OpeninvoicedataLineItemNrItemVatPercentage ||
                    (this.OpeninvoicedataLineItemNrItemVatPercentage != null &&
                    this.OpeninvoicedataLineItemNrItemVatPercentage.Equals(input.OpeninvoicedataLineItemNrItemVatPercentage))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrNumberOfItems == input.OpeninvoicedataLineItemNrNumberOfItems ||
                    (this.OpeninvoicedataLineItemNrNumberOfItems != null &&
                    this.OpeninvoicedataLineItemNrNumberOfItems.Equals(input.OpeninvoicedataLineItemNrNumberOfItems))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrReturnShippingCompany == input.OpeninvoicedataLineItemNrReturnShippingCompany ||
                    (this.OpeninvoicedataLineItemNrReturnShippingCompany != null &&
                    this.OpeninvoicedataLineItemNrReturnShippingCompany.Equals(input.OpeninvoicedataLineItemNrReturnShippingCompany))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrReturnTrackingNumber == input.OpeninvoicedataLineItemNrReturnTrackingNumber ||
                    (this.OpeninvoicedataLineItemNrReturnTrackingNumber != null &&
                    this.OpeninvoicedataLineItemNrReturnTrackingNumber.Equals(input.OpeninvoicedataLineItemNrReturnTrackingNumber))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrReturnTrackingUri == input.OpeninvoicedataLineItemNrReturnTrackingUri ||
                    (this.OpeninvoicedataLineItemNrReturnTrackingUri != null &&
                    this.OpeninvoicedataLineItemNrReturnTrackingUri.Equals(input.OpeninvoicedataLineItemNrReturnTrackingUri))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrShippingCompany == input.OpeninvoicedataLineItemNrShippingCompany ||
                    (this.OpeninvoicedataLineItemNrShippingCompany != null &&
                    this.OpeninvoicedataLineItemNrShippingCompany.Equals(input.OpeninvoicedataLineItemNrShippingCompany))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrShippingMethod == input.OpeninvoicedataLineItemNrShippingMethod ||
                    (this.OpeninvoicedataLineItemNrShippingMethod != null &&
                    this.OpeninvoicedataLineItemNrShippingMethod.Equals(input.OpeninvoicedataLineItemNrShippingMethod))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrTrackingNumber == input.OpeninvoicedataLineItemNrTrackingNumber ||
                    (this.OpeninvoicedataLineItemNrTrackingNumber != null &&
                    this.OpeninvoicedataLineItemNrTrackingNumber.Equals(input.OpeninvoicedataLineItemNrTrackingNumber))
                ) && 
                (
                    this.OpeninvoicedataLineItemNrTrackingUri == input.OpeninvoicedataLineItemNrTrackingUri ||
                    (this.OpeninvoicedataLineItemNrTrackingUri != null &&
                    this.OpeninvoicedataLineItemNrTrackingUri.Equals(input.OpeninvoicedataLineItemNrTrackingUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OpeninvoicedataMerchantData != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataMerchantData.GetHashCode();
                }
                if (this.OpeninvoicedataNumberOfLines != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataNumberOfLines.GetHashCode();
                }
                if (this.OpeninvoicedataRecipientFirstName != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataRecipientFirstName.GetHashCode();
                }
                if (this.OpeninvoicedataRecipientLastName != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataRecipientLastName.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrCurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrCurrencyCode.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrDescription != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrDescription.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrItemAmount != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrItemAmount.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrItemId != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrItemId.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrItemVatAmount != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrItemVatAmount.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrItemVatPercentage != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrItemVatPercentage.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrNumberOfItems != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrNumberOfItems.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrReturnShippingCompany != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrReturnShippingCompany.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrReturnTrackingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrReturnTrackingNumber.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrReturnTrackingUri != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrReturnTrackingUri.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrShippingCompany != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrShippingCompany.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrShippingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrShippingMethod.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrTrackingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrTrackingNumber.GetHashCode();
                }
                if (this.OpeninvoicedataLineItemNrTrackingUri != null)
                {
                    hashCode = (hashCode * 59) + this.OpeninvoicedataLineItemNrTrackingUri.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
