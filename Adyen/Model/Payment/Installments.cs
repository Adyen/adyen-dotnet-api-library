/*
* Adyen Payment API
*
*
* The version of the OpenAPI document: 68
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Payment
{
    /// <summary>
    /// Installments
    /// </summary>
    [DataContract(Name = "Installments")]
    public partial class Installments : IEquatable<Installments>, IValidatableObject
    {
        /// <summary>
        /// The installment plan, used for [card installments in Japan](https://docs.adyen.com/payment-methods/cards/credit-card-installments#make-a-payment-japan). and [Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico). By default, this is set to **regular**. 
        /// </summary>
        /// <value>The installment plan, used for [card installments in Japan](https://docs.adyen.com/payment-methods/cards/credit-card-installments#make-a-payment-japan). and [Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico). By default, this is set to **regular**. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlanEnum
        {
            /// <summary>
            /// Enum BuynowPaylater for value: buynow_paylater
            /// </summary>
            [EnumMember(Value = "buynow_paylater")]
            BuynowPaylater = 1,

            /// <summary>
            /// Enum InteresRefundPrctg for value: interes_refund_prctg
            /// </summary>
            [EnumMember(Value = "interes_refund_prctg")]
            InteresRefundPrctg = 2,

            /// <summary>
            /// Enum InterestBonus for value: interest_bonus
            /// </summary>
            [EnumMember(Value = "interest_bonus")]
            InterestBonus = 3,

            /// <summary>
            /// Enum NointeresRefundPrctg for value: nointeres_refund_prctg
            /// </summary>
            [EnumMember(Value = "nointeres_refund_prctg")]
            NointeresRefundPrctg = 4,

            /// <summary>
            /// Enum NointerestBonus for value: nointerest_bonus
            /// </summary>
            [EnumMember(Value = "nointerest_bonus")]
            NointerestBonus = 5,

            /// <summary>
            /// Enum RefundPrctg for value: refund_prctg
            /// </summary>
            [EnumMember(Value = "refund_prctg")]
            RefundPrctg = 6,

            /// <summary>
            /// Enum Regular for value: regular
            /// </summary>
            [EnumMember(Value = "regular")]
            Regular = 7,

            /// <summary>
            /// Enum Revolving for value: revolving
            /// </summary>
            [EnumMember(Value = "revolving")]
            Revolving = 8,

            /// <summary>
            /// Enum WithInterest for value: with_interest
            /// </summary>
            [EnumMember(Value = "with_interest")]
            WithInterest = 9

        }


        /// <summary>
        /// The installment plan, used for [card installments in Japan](https://docs.adyen.com/payment-methods/cards/credit-card-installments#make-a-payment-japan). and [Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico). By default, this is set to **regular**. 
        /// </summary>
        /// <value>The installment plan, used for [card installments in Japan](https://docs.adyen.com/payment-methods/cards/credit-card-installments#make-a-payment-japan). and [Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico). By default, this is set to **regular**. </value>
        [DataMember(Name = "plan", EmitDefaultValue = false)]
        public PlanEnum? Plan { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Installments" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Installments() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Installments" /> class.
        /// </summary>
        /// <param name="extra">Defines the bonus percentage, refund percentage or if the transaction is Buy now Pay later. Used for [card installments in Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico) .</param>
        /// <param name="plan">The installment plan, used for [card installments in Japan](https://docs.adyen.com/payment-methods/cards/credit-card-installments#make-a-payment-japan). and [Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico). By default, this is set to **regular**. .</param>
        /// <param name="value">Defines the number of installments. Usually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary. This value can be zero for Installments processed in Mexico. (required).</param>
        public Installments(int? extra = default(int?), PlanEnum? plan = default(PlanEnum?), int? value = default(int?))
        {
            this.Value = value;
            this.Extra = extra;
            this.Plan = plan;
        }

        /// <summary>
        /// Defines the bonus percentage, refund percentage or if the transaction is Buy now Pay later. Used for [card installments in Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico) 
        /// </summary>
        /// <value>Defines the bonus percentage, refund percentage or if the transaction is Buy now Pay later. Used for [card installments in Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico) </value>
        [DataMember(Name = "extra", EmitDefaultValue = false)]
        public int? Extra { get; set; }

        /// <summary>
        /// Defines the number of installments. Usually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary. This value can be zero for Installments processed in Mexico.
        /// </summary>
        /// <value>Defines the number of installments. Usually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary. This value can be zero for Installments processed in Mexico.</value>
        [DataMember(Name = "value", IsRequired = false, EmitDefaultValue = false)]
        public int? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Installments {\n");
            sb.Append("  Extra: ").Append(Extra).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Installments);
        }

        /// <summary>
        /// Returns true if Installments instances are equal
        /// </summary>
        /// <param name="input">Instance of Installments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Installments input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Extra == input.Extra ||
                    this.Extra.Equals(input.Extra)
                ) && 
                (
                    this.Plan == input.Plan ||
                    this.Plan.Equals(input.Plan)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Extra.GetHashCode();
                hashCode = (hashCode * 59) + this.Plan.GetHashCode();
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
