/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// Organization
    /// </summary>
    [DataContract(Name = "Organization")]
    public partial class Organization : IEquatable<Organization>, IValidatableObject
    {
        /// <summary>
        /// Type of organization.  Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.
        /// </summary>
        /// <value>Type of organization.  Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AssociationIncorporated for value: associationIncorporated
            /// </summary>
            [EnumMember(Value = "associationIncorporated")]
            AssociationIncorporated = 1,

            /// <summary>
            /// Enum GovernmentalOrganization for value: governmentalOrganization
            /// </summary>
            [EnumMember(Value = "governmentalOrganization")]
            GovernmentalOrganization = 2,

            /// <summary>
            /// Enum ListedPublicCompany for value: listedPublicCompany
            /// </summary>
            [EnumMember(Value = "listedPublicCompany")]
            ListedPublicCompany = 3,

            /// <summary>
            /// Enum NonProfit for value: nonProfit
            /// </summary>
            [EnumMember(Value = "nonProfit")]
            NonProfit = 4,

            /// <summary>
            /// Enum PartnershipIncorporated for value: partnershipIncorporated
            /// </summary>
            [EnumMember(Value = "partnershipIncorporated")]
            PartnershipIncorporated = 5,

            /// <summary>
            /// Enum PrivateCompany for value: privateCompany
            /// </summary>
            [EnumMember(Value = "privateCompany")]
            PrivateCompany = 6

        }


        /// <summary>
        /// Type of organization.  Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.
        /// </summary>
        /// <value>Type of organization.  Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// The reason the organization has not provided a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.
        /// </summary>
        /// <value>The reason the organization has not provided a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VatAbsenceReasonEnum
        {
            /// <summary>
            /// Enum IndustryExemption for value: industryExemption
            /// </summary>
            [EnumMember(Value = "industryExemption")]
            IndustryExemption = 1,

            /// <summary>
            /// Enum BelowTaxThreshold for value: belowTaxThreshold
            /// </summary>
            [EnumMember(Value = "belowTaxThreshold")]
            BelowTaxThreshold = 2

        }


        /// <summary>
        /// The reason the organization has not provided a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.
        /// </summary>
        /// <value>The reason the organization has not provided a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.</value>
        [DataMember(Name = "vatAbsenceReason", EmitDefaultValue = false)]
        public VatAbsenceReasonEnum? VatAbsenceReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Organization" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Organization() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Organization" /> class.
        /// </summary>
        /// <param name="countryOfGoverningLaw">The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country..</param>
        /// <param name="dateOfIncorporation">The date when the organization was incorporated in YYYY-MM-DD format..</param>
        /// <param name="description">Your description for the organization..</param>
        /// <param name="doingBusinessAs">The organization&#39;s trading name, if different from the registered legal name..</param>
        /// <param name="email">The email address of the legal entity..</param>
        /// <param name="legalName">The organization&#39;s legal name. (required).</param>
        /// <param name="phone">phone.</param>
        /// <param name="principalPlaceOfBusiness">principalPlaceOfBusiness.</param>
        /// <param name="registeredAddress">registeredAddress (required).</param>
        /// <param name="registrationNumber">The organization&#39;s registration number..</param>
        /// <param name="stockData">stockData.</param>
        /// <param name="taxInformation">The tax information of the organization..</param>
        /// <param name="taxReportingClassification">taxReportingClassification.</param>
        /// <param name="type">Type of organization.  Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**..</param>
        /// <param name="vatAbsenceReason">The reason the organization has not provided a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**..</param>
        /// <param name="vatNumber">The organization&#39;s VAT number..</param>
        /// <param name="webData">webData.</param>
        public Organization(string countryOfGoverningLaw = default(string), string dateOfIncorporation = default(string), string description = default(string), string doingBusinessAs = default(string), string email = default(string), string legalName = default(string), PhoneNumber phone = default(PhoneNumber), Address principalPlaceOfBusiness = default(Address), Address registeredAddress = default(Address), string registrationNumber = default(string), StockData stockData = default(StockData), List<TaxInformation> taxInformation = default(List<TaxInformation>), TaxReportingClassification taxReportingClassification = default(TaxReportingClassification), TypeEnum? type = default(TypeEnum?), VatAbsenceReasonEnum? vatAbsenceReason = default(VatAbsenceReasonEnum?), string vatNumber = default(string), WebData webData = default(WebData))
        {
            this.LegalName = legalName;
            this.RegisteredAddress = registeredAddress;
            this.CountryOfGoverningLaw = countryOfGoverningLaw;
            this.DateOfIncorporation = dateOfIncorporation;
            this.Description = description;
            this.DoingBusinessAs = doingBusinessAs;
            this.Email = email;
            this.Phone = phone;
            this.PrincipalPlaceOfBusiness = principalPlaceOfBusiness;
            this.RegistrationNumber = registrationNumber;
            this.StockData = stockData;
            this.TaxInformation = taxInformation;
            this.TaxReportingClassification = taxReportingClassification;
            this.Type = type;
            this.VatAbsenceReason = vatAbsenceReason;
            this.VatNumber = vatNumber;
            this.WebData = webData;
        }

        /// <summary>
        /// The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country.
        /// </summary>
        /// <value>The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country.</value>
        [DataMember(Name = "countryOfGoverningLaw", EmitDefaultValue = false)]
        public string CountryOfGoverningLaw { get; set; }

        /// <summary>
        /// The date when the organization was incorporated in YYYY-MM-DD format.
        /// </summary>
        /// <value>The date when the organization was incorporated in YYYY-MM-DD format.</value>
        [DataMember(Name = "dateOfIncorporation", EmitDefaultValue = false)]
        public string DateOfIncorporation { get; set; }

        /// <summary>
        /// Your description for the organization.
        /// </summary>
        /// <value>Your description for the organization.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The organization&#39;s trading name, if different from the registered legal name.
        /// </summary>
        /// <value>The organization&#39;s trading name, if different from the registered legal name.</value>
        [DataMember(Name = "doingBusinessAs", EmitDefaultValue = false)]
        public string DoingBusinessAs { get; set; }

        /// <summary>
        /// The email address of the legal entity.
        /// </summary>
        /// <value>The email address of the legal entity.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The organization&#39;s legal name.
        /// </summary>
        /// <value>The organization&#39;s legal name.</value>
        [DataMember(Name = "legalName", IsRequired = false, EmitDefaultValue = false)]
        public string LegalName { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public PhoneNumber Phone { get; set; }

        /// <summary>
        /// Gets or Sets PrincipalPlaceOfBusiness
        /// </summary>
        [DataMember(Name = "principalPlaceOfBusiness", EmitDefaultValue = false)]
        public Address PrincipalPlaceOfBusiness { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredAddress
        /// </summary>
        [DataMember(Name = "registeredAddress", IsRequired = false, EmitDefaultValue = false)]
        public Address RegisteredAddress { get; set; }

        /// <summary>
        /// The organization&#39;s registration number.
        /// </summary>
        /// <value>The organization&#39;s registration number.</value>
        [DataMember(Name = "registrationNumber", EmitDefaultValue = false)]
        public string RegistrationNumber { get; set; }

        /// <summary>
        /// Gets or Sets StockData
        /// </summary>
        [DataMember(Name = "stockData", EmitDefaultValue = false)]
        public StockData StockData { get; set; }

        /// <summary>
        /// The tax information of the organization.
        /// </summary>
        /// <value>The tax information of the organization.</value>
        [DataMember(Name = "taxInformation", EmitDefaultValue = false)]
        public List<TaxInformation> TaxInformation { get; set; }

        /// <summary>
        /// Gets or Sets TaxReportingClassification
        /// </summary>
        [DataMember(Name = "taxReportingClassification", EmitDefaultValue = false)]
        public TaxReportingClassification TaxReportingClassification { get; set; }

        /// <summary>
        /// The organization&#39;s VAT number.
        /// </summary>
        /// <value>The organization&#39;s VAT number.</value>
        [DataMember(Name = "vatNumber", EmitDefaultValue = false)]
        public string VatNumber { get; set; }

        /// <summary>
        /// Gets or Sets WebData
        /// </summary>
        [DataMember(Name = "webData", EmitDefaultValue = false)]
        public WebData WebData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Organization {\n");
            sb.Append("  CountryOfGoverningLaw: ").Append(CountryOfGoverningLaw).Append("\n");
            sb.Append("  DateOfIncorporation: ").Append(DateOfIncorporation).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DoingBusinessAs: ").Append(DoingBusinessAs).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PrincipalPlaceOfBusiness: ").Append(PrincipalPlaceOfBusiness).Append("\n");
            sb.Append("  RegisteredAddress: ").Append(RegisteredAddress).Append("\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("  StockData: ").Append(StockData).Append("\n");
            sb.Append("  TaxInformation: ").Append(TaxInformation).Append("\n");
            sb.Append("  TaxReportingClassification: ").Append(TaxReportingClassification).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VatAbsenceReason: ").Append(VatAbsenceReason).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  WebData: ").Append(WebData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Organization);
        }

        /// <summary>
        /// Returns true if Organization instances are equal
        /// </summary>
        /// <param name="input">Instance of Organization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Organization input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CountryOfGoverningLaw == input.CountryOfGoverningLaw ||
                    (this.CountryOfGoverningLaw != null &&
                    this.CountryOfGoverningLaw.Equals(input.CountryOfGoverningLaw))
                ) && 
                (
                    this.DateOfIncorporation == input.DateOfIncorporation ||
                    (this.DateOfIncorporation != null &&
                    this.DateOfIncorporation.Equals(input.DateOfIncorporation))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DoingBusinessAs == input.DoingBusinessAs ||
                    (this.DoingBusinessAs != null &&
                    this.DoingBusinessAs.Equals(input.DoingBusinessAs))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.LegalName == input.LegalName ||
                    (this.LegalName != null &&
                    this.LegalName.Equals(input.LegalName))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PrincipalPlaceOfBusiness == input.PrincipalPlaceOfBusiness ||
                    (this.PrincipalPlaceOfBusiness != null &&
                    this.PrincipalPlaceOfBusiness.Equals(input.PrincipalPlaceOfBusiness))
                ) && 
                (
                    this.RegisteredAddress == input.RegisteredAddress ||
                    (this.RegisteredAddress != null &&
                    this.RegisteredAddress.Equals(input.RegisteredAddress))
                ) && 
                (
                    this.RegistrationNumber == input.RegistrationNumber ||
                    (this.RegistrationNumber != null &&
                    this.RegistrationNumber.Equals(input.RegistrationNumber))
                ) && 
                (
                    this.StockData == input.StockData ||
                    (this.StockData != null &&
                    this.StockData.Equals(input.StockData))
                ) && 
                (
                    this.TaxInformation == input.TaxInformation ||
                    this.TaxInformation != null &&
                    input.TaxInformation != null &&
                    this.TaxInformation.SequenceEqual(input.TaxInformation)
                ) && 
                (
                    this.TaxReportingClassification == input.TaxReportingClassification ||
                    (this.TaxReportingClassification != null &&
                    this.TaxReportingClassification.Equals(input.TaxReportingClassification))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.VatAbsenceReason == input.VatAbsenceReason ||
                    this.VatAbsenceReason.Equals(input.VatAbsenceReason)
                ) && 
                (
                    this.VatNumber == input.VatNumber ||
                    (this.VatNumber != null &&
                    this.VatNumber.Equals(input.VatNumber))
                ) && 
                (
                    this.WebData == input.WebData ||
                    (this.WebData != null &&
                    this.WebData.Equals(input.WebData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryOfGoverningLaw != null)
                {
                    hashCode = (hashCode * 59) + this.CountryOfGoverningLaw.GetHashCode();
                }
                if (this.DateOfIncorporation != null)
                {
                    hashCode = (hashCode * 59) + this.DateOfIncorporation.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DoingBusinessAs != null)
                {
                    hashCode = (hashCode * 59) + this.DoingBusinessAs.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.LegalName != null)
                {
                    hashCode = (hashCode * 59) + this.LegalName.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.PrincipalPlaceOfBusiness != null)
                {
                    hashCode = (hashCode * 59) + this.PrincipalPlaceOfBusiness.GetHashCode();
                }
                if (this.RegisteredAddress != null)
                {
                    hashCode = (hashCode * 59) + this.RegisteredAddress.GetHashCode();
                }
                if (this.RegistrationNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationNumber.GetHashCode();
                }
                if (this.StockData != null)
                {
                    hashCode = (hashCode * 59) + this.StockData.GetHashCode();
                }
                if (this.TaxInformation != null)
                {
                    hashCode = (hashCode * 59) + this.TaxInformation.GetHashCode();
                }
                if (this.TaxReportingClassification != null)
                {
                    hashCode = (hashCode * 59) + this.TaxReportingClassification.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.VatAbsenceReason.GetHashCode();
                if (this.VatNumber != null)
                {
                    hashCode = (hashCode * 59) + this.VatNumber.GetHashCode();
                }
                if (this.WebData != null)
                {
                    hashCode = (hashCode * 59) + this.WebData.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
