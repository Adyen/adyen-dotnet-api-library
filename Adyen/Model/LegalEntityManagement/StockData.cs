/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// StockData
    /// </summary>
    [DataContract(Name = "StockData")]
    public partial class StockData : IEquatable<StockData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StockData" /> class.
        /// </summary>
        /// <param name="marketIdentifier">The four-digit [Market Identifier Code](https://en.wikipedia.org/wiki/Market_Identifier_Code) of the stock market where the organization&#39;s stocks are traded..</param>
        /// <param name="stockNumber">The 12-digit International Securities Identification Number (ISIN) of the company, without dashes (-)..</param>
        /// <param name="tickerSymbol">The stock ticker symbol..</param>
        public StockData(string marketIdentifier = default(string), string stockNumber = default(string), string tickerSymbol = default(string))
        {
            this.MarketIdentifier = marketIdentifier;
            this.StockNumber = stockNumber;
            this.TickerSymbol = tickerSymbol;
        }

        /// <summary>
        /// The four-digit [Market Identifier Code](https://en.wikipedia.org/wiki/Market_Identifier_Code) of the stock market where the organization&#39;s stocks are traded.
        /// </summary>
        /// <value>The four-digit [Market Identifier Code](https://en.wikipedia.org/wiki/Market_Identifier_Code) of the stock market where the organization&#39;s stocks are traded.</value>
        [DataMember(Name = "marketIdentifier", EmitDefaultValue = false)]
        public string MarketIdentifier { get; set; }

        /// <summary>
        /// The 12-digit International Securities Identification Number (ISIN) of the company, without dashes (-).
        /// </summary>
        /// <value>The 12-digit International Securities Identification Number (ISIN) of the company, without dashes (-).</value>
        [DataMember(Name = "stockNumber", EmitDefaultValue = false)]
        public string StockNumber { get; set; }

        /// <summary>
        /// The stock ticker symbol.
        /// </summary>
        /// <value>The stock ticker symbol.</value>
        [DataMember(Name = "tickerSymbol", EmitDefaultValue = false)]
        public string TickerSymbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StockData {\n");
            sb.Append("  MarketIdentifier: ").Append(MarketIdentifier).Append("\n");
            sb.Append("  StockNumber: ").Append(StockNumber).Append("\n");
            sb.Append("  TickerSymbol: ").Append(TickerSymbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StockData);
        }

        /// <summary>
        /// Returns true if StockData instances are equal
        /// </summary>
        /// <param name="input">Instance of StockData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StockData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MarketIdentifier == input.MarketIdentifier ||
                    (this.MarketIdentifier != null &&
                    this.MarketIdentifier.Equals(input.MarketIdentifier))
                ) && 
                (
                    this.StockNumber == input.StockNumber ||
                    (this.StockNumber != null &&
                    this.StockNumber.Equals(input.StockNumber))
                ) && 
                (
                    this.TickerSymbol == input.TickerSymbol ||
                    (this.TickerSymbol != null &&
                    this.TickerSymbol.Equals(input.TickerSymbol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.MarketIdentifier.GetHashCode();
                }
                if (this.StockNumber != null)
                {
                    hashCode = (hashCode * 59) + this.StockNumber.GetHashCode();
                }
                if (this.TickerSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.TickerSymbol.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
