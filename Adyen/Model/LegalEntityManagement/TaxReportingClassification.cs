/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// TaxReportingClassification
    /// </summary>
    [DataContract(Name = "TaxReportingClassification")]
    public partial class TaxReportingClassification : IEquatable<TaxReportingClassification>, IValidatableObject
    {
        /// <summary>
        /// The organization&#39;s business type.  Possible values: **other**, **listedPublicCompany**, **subsidiaryOfListedPublicCompany**, **governmentalOrganization**, **internationalOrganization**, **financialInstitution**.
        /// </summary>
        /// <value>The organization&#39;s business type.  Possible values: **other**, **listedPublicCompany**, **subsidiaryOfListedPublicCompany**, **governmentalOrganization**, **internationalOrganization**, **financialInstitution**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BusinessTypeEnum
        {
            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 1,

            /// <summary>
            /// Enum ListedPublicCompany for value: listedPublicCompany
            /// </summary>
            [EnumMember(Value = "listedPublicCompany")]
            ListedPublicCompany = 2,

            /// <summary>
            /// Enum SubsidiaryOfListedPublicCompany for value: subsidiaryOfListedPublicCompany
            /// </summary>
            [EnumMember(Value = "subsidiaryOfListedPublicCompany")]
            SubsidiaryOfListedPublicCompany = 3,

            /// <summary>
            /// Enum GovernmentalOrganization for value: governmentalOrganization
            /// </summary>
            [EnumMember(Value = "governmentalOrganization")]
            GovernmentalOrganization = 4,

            /// <summary>
            /// Enum InternationalOrganization for value: internationalOrganization
            /// </summary>
            [EnumMember(Value = "internationalOrganization")]
            InternationalOrganization = 5,

            /// <summary>
            /// Enum FinancialInstitution for value: financialInstitution
            /// </summary>
            [EnumMember(Value = "financialInstitution")]
            FinancialInstitution = 6

        }


        /// <summary>
        /// The organization&#39;s business type.  Possible values: **other**, **listedPublicCompany**, **subsidiaryOfListedPublicCompany**, **governmentalOrganization**, **internationalOrganization**, **financialInstitution**.
        /// </summary>
        /// <value>The organization&#39;s business type.  Possible values: **other**, **listedPublicCompany**, **subsidiaryOfListedPublicCompany**, **governmentalOrganization**, **internationalOrganization**, **financialInstitution**.</value>
        [DataMember(Name = "businessType", EmitDefaultValue = false)]
        public BusinessTypeEnum? BusinessType { get; set; }
        /// <summary>
        /// The organization&#39;s main source of income. Only required if &#x60;businessType&#x60; is **other**.  Possible values: **businessOperation**, **realEstateSales**, **investmentInterestOrRoyalty**, **propertyRental**, **other**.
        /// </summary>
        /// <value>The organization&#39;s main source of income. Only required if &#x60;businessType&#x60; is **other**.  Possible values: **businessOperation**, **realEstateSales**, **investmentInterestOrRoyalty**, **propertyRental**, **other**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MainSourceOfIncomeEnum
        {
            /// <summary>
            /// Enum BusinessOperation for value: businessOperation
            /// </summary>
            [EnumMember(Value = "businessOperation")]
            BusinessOperation = 1,

            /// <summary>
            /// Enum RealEstateSales for value: realEstateSales
            /// </summary>
            [EnumMember(Value = "realEstateSales")]
            RealEstateSales = 2,

            /// <summary>
            /// Enum InvestmentInterestOrRoyalty for value: investmentInterestOrRoyalty
            /// </summary>
            [EnumMember(Value = "investmentInterestOrRoyalty")]
            InvestmentInterestOrRoyalty = 3,

            /// <summary>
            /// Enum PropertyRental for value: propertyRental
            /// </summary>
            [EnumMember(Value = "propertyRental")]
            PropertyRental = 4,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 5

        }


        /// <summary>
        /// The organization&#39;s main source of income. Only required if &#x60;businessType&#x60; is **other**.  Possible values: **businessOperation**, **realEstateSales**, **investmentInterestOrRoyalty**, **propertyRental**, **other**.
        /// </summary>
        /// <value>The organization&#39;s main source of income. Only required if &#x60;businessType&#x60; is **other**.  Possible values: **businessOperation**, **realEstateSales**, **investmentInterestOrRoyalty**, **propertyRental**, **other**.</value>
        [DataMember(Name = "mainSourceOfIncome", EmitDefaultValue = false)]
        public MainSourceOfIncomeEnum? MainSourceOfIncome { get; set; }
        /// <summary>
        /// The tax reporting classification type.  Possible values: **nonFinancialNonReportable**, **financialNonReportable**, **nonFinancialActive**, **nonFinancialPassive**.
        /// </summary>
        /// <value>The tax reporting classification type.  Possible values: **nonFinancialNonReportable**, **financialNonReportable**, **nonFinancialActive**, **nonFinancialPassive**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum NonFinancialNonReportable for value: nonFinancialNonReportable
            /// </summary>
            [EnumMember(Value = "nonFinancialNonReportable")]
            NonFinancialNonReportable = 1,

            /// <summary>
            /// Enum FinancialNonReportable for value: financialNonReportable
            /// </summary>
            [EnumMember(Value = "financialNonReportable")]
            FinancialNonReportable = 2,

            /// <summary>
            /// Enum NonFinancialActive for value: nonFinancialActive
            /// </summary>
            [EnumMember(Value = "nonFinancialActive")]
            NonFinancialActive = 3,

            /// <summary>
            /// Enum NonFinancialPassive for value: nonFinancialPassive
            /// </summary>
            [EnumMember(Value = "nonFinancialPassive")]
            NonFinancialPassive = 4

        }


        /// <summary>
        /// The tax reporting classification type.  Possible values: **nonFinancialNonReportable**, **financialNonReportable**, **nonFinancialActive**, **nonFinancialPassive**.
        /// </summary>
        /// <value>The tax reporting classification type.  Possible values: **nonFinancialNonReportable**, **financialNonReportable**, **nonFinancialActive**, **nonFinancialPassive**.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxReportingClassification" /> class.
        /// </summary>
        /// <param name="businessType">The organization&#39;s business type.  Possible values: **other**, **listedPublicCompany**, **subsidiaryOfListedPublicCompany**, **governmentalOrganization**, **internationalOrganization**, **financialInstitution**..</param>
        /// <param name="financialInstitutionNumber">The Global Intermediary Identification Number (GIIN) required for FATCA. Only required if the organization is a US financial institution and the &#x60;businessType&#x60; is **financialInstitution**..</param>
        /// <param name="mainSourceOfIncome">The organization&#39;s main source of income. Only required if &#x60;businessType&#x60; is **other**.  Possible values: **businessOperation**, **realEstateSales**, **investmentInterestOrRoyalty**, **propertyRental**, **other**..</param>
        /// <param name="type">The tax reporting classification type.  Possible values: **nonFinancialNonReportable**, **financialNonReportable**, **nonFinancialActive**, **nonFinancialPassive**..</param>
        public TaxReportingClassification(BusinessTypeEnum? businessType = default(BusinessTypeEnum?), string financialInstitutionNumber = default(string), MainSourceOfIncomeEnum? mainSourceOfIncome = default(MainSourceOfIncomeEnum?), TypeEnum? type = default(TypeEnum?))
        {
            this.BusinessType = businessType;
            this.FinancialInstitutionNumber = financialInstitutionNumber;
            this.MainSourceOfIncome = mainSourceOfIncome;
            this.Type = type;
        }

        /// <summary>
        /// The Global Intermediary Identification Number (GIIN) required for FATCA. Only required if the organization is a US financial institution and the &#x60;businessType&#x60; is **financialInstitution**.
        /// </summary>
        /// <value>The Global Intermediary Identification Number (GIIN) required for FATCA. Only required if the organization is a US financial institution and the &#x60;businessType&#x60; is **financialInstitution**.</value>
        [DataMember(Name = "financialInstitutionNumber", EmitDefaultValue = false)]
        public string FinancialInstitutionNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaxReportingClassification {\n");
            sb.Append("  BusinessType: ").Append(BusinessType).Append("\n");
            sb.Append("  FinancialInstitutionNumber: ").Append(FinancialInstitutionNumber).Append("\n");
            sb.Append("  MainSourceOfIncome: ").Append(MainSourceOfIncome).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxReportingClassification);
        }

        /// <summary>
        /// Returns true if TaxReportingClassification instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxReportingClassification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxReportingClassification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BusinessType == input.BusinessType ||
                    this.BusinessType.Equals(input.BusinessType)
                ) && 
                (
                    this.FinancialInstitutionNumber == input.FinancialInstitutionNumber ||
                    (this.FinancialInstitutionNumber != null &&
                    this.FinancialInstitutionNumber.Equals(input.FinancialInstitutionNumber))
                ) && 
                (
                    this.MainSourceOfIncome == input.MainSourceOfIncome ||
                    this.MainSourceOfIncome.Equals(input.MainSourceOfIncome)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BusinessType.GetHashCode();
                if (this.FinancialInstitutionNumber != null)
                {
                    hashCode = (hashCode * 59) + this.FinancialInstitutionNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MainSourceOfIncome.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
