/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// LegalEntityAssociation
    /// </summary>
    [DataContract(Name = "LegalEntityAssociation")]
    public partial class LegalEntityAssociation : IEquatable<LegalEntityAssociation>, IValidatableObject
    {
        /// <summary>
        /// Defines the relationship of the legal entity to the current legal entity.  Possible value for individuals: **legalRepresentative**.  Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **director**, **signatory**, or **ultimateParentCompany**.  Possible values for sole proprietorships: **soleProprietorship**.  Possible value for trusts: **trust**.  Possible values for trust members: **definedBeneficiary**, **protector**, **secondaryTrustee**, **settlor**, **uboThroughControl**, or **uboThroughOwnership**.
        /// </summary>
        /// <value>Defines the relationship of the legal entity to the current legal entity.  Possible value for individuals: **legalRepresentative**.  Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **director**, **signatory**, or **ultimateParentCompany**.  Possible values for sole proprietorships: **soleProprietorship**.  Possible value for trusts: **trust**.  Possible values for trust members: **definedBeneficiary**, **protector**, **secondaryTrustee**, **settlor**, **uboThroughControl**, or **uboThroughOwnership**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum DefinedBeneficiary for value: definedBeneficiary
            /// </summary>
            [EnumMember(Value = "definedBeneficiary")]
            DefinedBeneficiary = 1,

            /// <summary>
            /// Enum Director for value: director
            /// </summary>
            [EnumMember(Value = "director")]
            Director = 2,

            /// <summary>
            /// Enum ImmediateParentCompany for value: immediateParentCompany
            /// </summary>
            [EnumMember(Value = "immediateParentCompany")]
            ImmediateParentCompany = 3,

            /// <summary>
            /// Enum LegalRepresentative for value: legalRepresentative
            /// </summary>
            [EnumMember(Value = "legalRepresentative")]
            LegalRepresentative = 4,

            /// <summary>
            /// Enum PciSignatory for value: pciSignatory
            /// </summary>
            [EnumMember(Value = "pciSignatory")]
            PciSignatory = 5,

            /// <summary>
            /// Enum Protector for value: protector
            /// </summary>
            [EnumMember(Value = "protector")]
            Protector = 6,

            /// <summary>
            /// Enum SecondaryTrustee for value: secondaryTrustee
            /// </summary>
            [EnumMember(Value = "secondaryTrustee")]
            SecondaryTrustee = 7,

            /// <summary>
            /// Enum Settlor for value: settlor
            /// </summary>
            [EnumMember(Value = "settlor")]
            Settlor = 8,

            /// <summary>
            /// Enum Signatory for value: signatory
            /// </summary>
            [EnumMember(Value = "signatory")]
            Signatory = 9,

            /// <summary>
            /// Enum SoleProprietorship for value: soleProprietorship
            /// </summary>
            [EnumMember(Value = "soleProprietorship")]
            SoleProprietorship = 10,

            /// <summary>
            /// Enum Trust for value: trust
            /// </summary>
            [EnumMember(Value = "trust")]
            Trust = 11,

            /// <summary>
            /// Enum TrustOwnership for value: trustOwnership
            /// </summary>
            [EnumMember(Value = "trustOwnership")]
            TrustOwnership = 12,

            /// <summary>
            /// Enum UboThroughControl for value: uboThroughControl
            /// </summary>
            [EnumMember(Value = "uboThroughControl")]
            UboThroughControl = 13,

            /// <summary>
            /// Enum UboThroughOwnership for value: uboThroughOwnership
            /// </summary>
            [EnumMember(Value = "uboThroughOwnership")]
            UboThroughOwnership = 14,

            /// <summary>
            /// Enum UltimateParentCompany for value: ultimateParentCompany
            /// </summary>
            [EnumMember(Value = "ultimateParentCompany")]
            UltimateParentCompany = 15,

            /// <summary>
            /// Enum UndefinedBeneficiary for value: undefinedBeneficiary
            /// </summary>
            [EnumMember(Value = "undefinedBeneficiary")]
            UndefinedBeneficiary = 16

        }


        /// <summary>
        /// Defines the relationship of the legal entity to the current legal entity.  Possible value for individuals: **legalRepresentative**.  Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **director**, **signatory**, or **ultimateParentCompany**.  Possible values for sole proprietorships: **soleProprietorship**.  Possible value for trusts: **trust**.  Possible values for trust members: **definedBeneficiary**, **protector**, **secondaryTrustee**, **settlor**, **uboThroughControl**, or **uboThroughOwnership**.
        /// </summary>
        /// <value>Defines the relationship of the legal entity to the current legal entity.  Possible value for individuals: **legalRepresentative**.  Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **director**, **signatory**, or **ultimateParentCompany**.  Possible values for sole proprietorships: **soleProprietorship**.  Possible value for trusts: **trust**.  Possible values for trust members: **definedBeneficiary**, **protector**, **secondaryTrustee**, **settlor**, **uboThroughControl**, or **uboThroughOwnership**.</value>
        [DataMember(Name = "type", IsRequired = false, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalEntityAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LegalEntityAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalEntityAssociation" /> class.
        /// </summary>
        /// <param name="jobTitle">The individual&#39;s job title if the &#x60;type&#x60; is **uboThroughControl** or **signatory**..</param>
        /// <param name="legalEntityId">The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id). (required).</param>
        /// <param name="relationship">The individual&#39;s relationship to a legal representative if the &#x60;type&#x60; is **legalRepresentative**. Possible values: **parent**, **guardian**..</param>
        /// <param name="type">Defines the relationship of the legal entity to the current legal entity.  Possible value for individuals: **legalRepresentative**.  Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **director**, **signatory**, or **ultimateParentCompany**.  Possible values for sole proprietorships: **soleProprietorship**.  Possible value for trusts: **trust**.  Possible values for trust members: **definedBeneficiary**, **protector**, **secondaryTrustee**, **settlor**, **uboThroughControl**, or **uboThroughOwnership**. (required).</param>
        public LegalEntityAssociation(string jobTitle = default(string), string legalEntityId = default(string), string relationship = default(string), TypeEnum type = default(TypeEnum))
        {
            this.LegalEntityId = legalEntityId;
            this.Type = type;
            this.JobTitle = jobTitle;
            this.Relationship = relationship;
        }

        /// <summary>
        /// The unique identifier of another legal entity with which the &#x60;legalEntityId&#x60; is associated. When the &#x60;legalEntityId&#x60; is associated to legal entities other than the current one, the response returns all the associations.
        /// </summary>
        /// <value>The unique identifier of another legal entity with which the &#x60;legalEntityId&#x60; is associated. When the &#x60;legalEntityId&#x60; is associated to legal entities other than the current one, the response returns all the associations.</value>
        [DataMember(Name = "associatorId", EmitDefaultValue = false)]
        public string AssociatorId { get; private set; }

        /// <summary>
        /// The legal entity type of associated legal entity.  For example, **organization**, **soleProprietorship** or **individual**.
        /// </summary>
        /// <value>The legal entity type of associated legal entity.  For example, **organization**, **soleProprietorship** or **individual**.</value>
        [DataMember(Name = "entityType", EmitDefaultValue = false)]
        public string EntityType { get; private set; }

        /// <summary>
        /// The individual&#39;s job title if the &#x60;type&#x60; is **uboThroughControl** or **signatory**.
        /// </summary>
        /// <value>The individual&#39;s job title if the &#x60;type&#x60; is **uboThroughControl** or **signatory**.</value>
        [DataMember(Name = "jobTitle", EmitDefaultValue = false)]
        public string JobTitle { get; set; }

        /// <summary>
        /// The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).
        /// </summary>
        /// <value>The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).</value>
        [DataMember(Name = "legalEntityId", IsRequired = false, EmitDefaultValue = false)]
        public string LegalEntityId { get; set; }

        /// <summary>
        /// The name of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).  - For **individual**, &#x60;name.firstName&#x60; and &#x60;name.lastName&#x60;. - For **organization**, &#x60;legalName&#x60;. - For **soleProprietorship**, &#x60;name&#x60;.
        /// </summary>
        /// <value>The name of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).  - For **individual**, &#x60;name.firstName&#x60; and &#x60;name.lastName&#x60;. - For **organization**, &#x60;legalName&#x60;. - For **soleProprietorship**, &#x60;name&#x60;.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// The individual&#39;s relationship to a legal representative if the &#x60;type&#x60; is **legalRepresentative**. Possible values: **parent**, **guardian**.
        /// </summary>
        /// <value>The individual&#39;s relationship to a legal representative if the &#x60;type&#x60; is **legalRepresentative**. Possible values: **parent**, **guardian**.</value>
        [DataMember(Name = "relationship", EmitDefaultValue = false)]
        public string Relationship { get; set; }

        /// <summary>
        /// Defines the Kyc Exemption Reason for a Settlor associated with a trust.  For example, **professionalServiceProvider**, **deceased**, or **contributionBelowThreshold**.
        /// </summary>
        /// <value>Defines the Kyc Exemption Reason for a Settlor associated with a trust.  For example, **professionalServiceProvider**, **deceased**, or **contributionBelowThreshold**.</value>
        [DataMember(Name = "settlorExemptionReason", EmitDefaultValue = false)]
        public List<string> SettlorExemptionReason { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LegalEntityAssociation {\n");
            sb.Append("  AssociatorId: ").Append(AssociatorId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  LegalEntityId: ").Append(LegalEntityId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("  SettlorExemptionReason: ").Append(SettlorExemptionReason).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LegalEntityAssociation);
        }

        /// <summary>
        /// Returns true if LegalEntityAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of LegalEntityAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegalEntityAssociation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AssociatorId == input.AssociatorId ||
                    (this.AssociatorId != null &&
                    this.AssociatorId.Equals(input.AssociatorId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.JobTitle == input.JobTitle ||
                    (this.JobTitle != null &&
                    this.JobTitle.Equals(input.JobTitle))
                ) && 
                (
                    this.LegalEntityId == input.LegalEntityId ||
                    (this.LegalEntityId != null &&
                    this.LegalEntityId.Equals(input.LegalEntityId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                ) && 
                (
                    this.SettlorExemptionReason == input.SettlorExemptionReason ||
                    this.SettlorExemptionReason != null &&
                    input.SettlorExemptionReason != null &&
                    this.SettlorExemptionReason.SequenceEqual(input.SettlorExemptionReason)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssociatorId != null)
                {
                    hashCode = (hashCode * 59) + this.AssociatorId.GetHashCode();
                }
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                if (this.JobTitle != null)
                {
                    hashCode = (hashCode * 59) + this.JobTitle.GetHashCode();
                }
                if (this.LegalEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.LegalEntityId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Relationship != null)
                {
                    hashCode = (hashCode * 59) + this.Relationship.GetHashCode();
                }
                if (this.SettlorExemptionReason != null)
                {
                    hashCode = (hashCode * 59) + this.SettlorExemptionReason.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
