/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 4
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// FinancialReport
    /// </summary>
    [DataContract(Name = "FinancialReport")]
    public partial class FinancialReport : IEquatable<FinancialReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialReport" /> class.
        /// </summary>
        /// <param name="annualTurnover">The annual turnover of the business..</param>
        /// <param name="balanceSheetTotal">The balance sheet total of the business..</param>
        /// <param name="currencyOfFinancialData">The currency used for the annual turnover, balance sheet total, and net assets..</param>
        /// <param name="dateOfFinancialData">The date the financial data were provided, in YYYY-MM-DD format..</param>
        /// <param name="employeeCount">The number of employees of the business..</param>
        /// <param name="netAssets">The net assets of the business..</param>
        public FinancialReport(string annualTurnover = default(string), string balanceSheetTotal = default(string), string currencyOfFinancialData = default(string), string dateOfFinancialData = default(string), string employeeCount = default(string), string netAssets = default(string))
        {
            this.AnnualTurnover = annualTurnover;
            this.BalanceSheetTotal = balanceSheetTotal;
            this.CurrencyOfFinancialData = currencyOfFinancialData;
            this.DateOfFinancialData = dateOfFinancialData;
            this.EmployeeCount = employeeCount;
            this.NetAssets = netAssets;
        }

        /// <summary>
        /// The annual turnover of the business.
        /// </summary>
        /// <value>The annual turnover of the business.</value>
        [DataMember(Name = "annualTurnover", EmitDefaultValue = false)]
        public string AnnualTurnover { get; set; }

        /// <summary>
        /// The balance sheet total of the business.
        /// </summary>
        /// <value>The balance sheet total of the business.</value>
        [DataMember(Name = "balanceSheetTotal", EmitDefaultValue = false)]
        public string BalanceSheetTotal { get; set; }

        /// <summary>
        /// The currency used for the annual turnover, balance sheet total, and net assets.
        /// </summary>
        /// <value>The currency used for the annual turnover, balance sheet total, and net assets.</value>
        [DataMember(Name = "currencyOfFinancialData", EmitDefaultValue = false)]
        public string CurrencyOfFinancialData { get; set; }

        /// <summary>
        /// The date the financial data were provided, in YYYY-MM-DD format.
        /// </summary>
        /// <value>The date the financial data were provided, in YYYY-MM-DD format.</value>
        [DataMember(Name = "dateOfFinancialData", EmitDefaultValue = false)]
        public string DateOfFinancialData { get; set; }

        /// <summary>
        /// The number of employees of the business.
        /// </summary>
        /// <value>The number of employees of the business.</value>
        [DataMember(Name = "employeeCount", EmitDefaultValue = false)]
        public string EmployeeCount { get; set; }

        /// <summary>
        /// The net assets of the business.
        /// </summary>
        /// <value>The net assets of the business.</value>
        [DataMember(Name = "netAssets", EmitDefaultValue = false)]
        public string NetAssets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FinancialReport {\n");
            sb.Append("  AnnualTurnover: ").Append(AnnualTurnover).Append("\n");
            sb.Append("  BalanceSheetTotal: ").Append(BalanceSheetTotal).Append("\n");
            sb.Append("  CurrencyOfFinancialData: ").Append(CurrencyOfFinancialData).Append("\n");
            sb.Append("  DateOfFinancialData: ").Append(DateOfFinancialData).Append("\n");
            sb.Append("  EmployeeCount: ").Append(EmployeeCount).Append("\n");
            sb.Append("  NetAssets: ").Append(NetAssets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialReport);
        }

        /// <summary>
        /// Returns true if FinancialReport instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialReport input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AnnualTurnover == input.AnnualTurnover ||
                    (this.AnnualTurnover != null &&
                    this.AnnualTurnover.Equals(input.AnnualTurnover))
                ) && 
                (
                    this.BalanceSheetTotal == input.BalanceSheetTotal ||
                    (this.BalanceSheetTotal != null &&
                    this.BalanceSheetTotal.Equals(input.BalanceSheetTotal))
                ) && 
                (
                    this.CurrencyOfFinancialData == input.CurrencyOfFinancialData ||
                    (this.CurrencyOfFinancialData != null &&
                    this.CurrencyOfFinancialData.Equals(input.CurrencyOfFinancialData))
                ) && 
                (
                    this.DateOfFinancialData == input.DateOfFinancialData ||
                    (this.DateOfFinancialData != null &&
                    this.DateOfFinancialData.Equals(input.DateOfFinancialData))
                ) && 
                (
                    this.EmployeeCount == input.EmployeeCount ||
                    (this.EmployeeCount != null &&
                    this.EmployeeCount.Equals(input.EmployeeCount))
                ) && 
                (
                    this.NetAssets == input.NetAssets ||
                    (this.NetAssets != null &&
                    this.NetAssets.Equals(input.NetAssets))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnnualTurnover != null)
                {
                    hashCode = (hashCode * 59) + this.AnnualTurnover.GetHashCode();
                }
                if (this.BalanceSheetTotal != null)
                {
                    hashCode = (hashCode * 59) + this.BalanceSheetTotal.GetHashCode();
                }
                if (this.CurrencyOfFinancialData != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyOfFinancialData.GetHashCode();
                }
                if (this.DateOfFinancialData != null)
                {
                    hashCode = (hashCode * 59) + this.DateOfFinancialData.GetHashCode();
                }
                if (this.EmployeeCount != null)
                {
                    hashCode = (hashCode * 59) + this.EmployeeCount.GetHashCode();
                }
                if (this.NetAssets != null)
                {
                    hashCode = (hashCode * 59) + this.NetAssets.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
