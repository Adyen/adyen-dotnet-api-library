/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// CalculateTermsOfServiceStatusResponse
    /// </summary>
    [DataContract(Name = "CalculateTermsOfServiceStatusResponse")]
    public partial class CalculateTermsOfServiceStatusResponse : IEquatable<CalculateTermsOfServiceStatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines TermsOfServiceTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TermsOfServiceTypesEnum
        {
            /// <summary>
            /// Enum AdyenAccount for value: adyenAccount
            /// </summary>
            [EnumMember(Value = "adyenAccount")]
            AdyenAccount = 1,

            /// <summary>
            /// Enum AdyenCapital for value: adyenCapital
            /// </summary>
            [EnumMember(Value = "adyenCapital")]
            AdyenCapital = 2,

            /// <summary>
            /// Enum AdyenCard for value: adyenCard
            /// </summary>
            [EnumMember(Value = "adyenCard")]
            AdyenCard = 3,

            /// <summary>
            /// Enum AdyenForPlatformsAdvanced for value: adyenForPlatformsAdvanced
            /// </summary>
            [EnumMember(Value = "adyenForPlatformsAdvanced")]
            AdyenForPlatformsAdvanced = 4,

            /// <summary>
            /// Enum AdyenForPlatformsManage for value: adyenForPlatformsManage
            /// </summary>
            [EnumMember(Value = "adyenForPlatformsManage")]
            AdyenForPlatformsManage = 5,

            /// <summary>
            /// Enum AdyenFranchisee for value: adyenFranchisee
            /// </summary>
            [EnumMember(Value = "adyenFranchisee")]
            AdyenFranchisee = 6,

            /// <summary>
            /// Enum AdyenIssuing for value: adyenIssuing
            /// </summary>
            [EnumMember(Value = "adyenIssuing")]
            AdyenIssuing = 7

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculateTermsOfServiceStatusResponse" /> class.
        /// </summary>
        /// <param name="termsOfServiceTypes">The type of Terms of Service that the legal entity needs to accept. If empty, no Terms of Service needs to be accepted..</param>
        public CalculateTermsOfServiceStatusResponse(List<TermsOfServiceTypesEnum> termsOfServiceTypes = default(List<TermsOfServiceTypesEnum>))
        {
            this.TermsOfServiceTypes = termsOfServiceTypes;
        }

        /// <summary>
        /// The type of Terms of Service that the legal entity needs to accept. If empty, no Terms of Service needs to be accepted.
        /// </summary>
        /// <value>The type of Terms of Service that the legal entity needs to accept. If empty, no Terms of Service needs to be accepted.</value>
        [DataMember(Name = "termsOfServiceTypes", EmitDefaultValue = false)]
        public List<CalculateTermsOfServiceStatusResponse.TermsOfServiceTypesEnum> TermsOfServiceTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CalculateTermsOfServiceStatusResponse {\n");
            sb.Append("  TermsOfServiceTypes: ").Append(TermsOfServiceTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalculateTermsOfServiceStatusResponse);
        }

        /// <summary>
        /// Returns true if CalculateTermsOfServiceStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CalculateTermsOfServiceStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalculateTermsOfServiceStatusResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TermsOfServiceTypes == input.TermsOfServiceTypes ||
                    this.TermsOfServiceTypes != null &&
                    input.TermsOfServiceTypes != null &&
                    this.TermsOfServiceTypes.SequenceEqual(input.TermsOfServiceTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TermsOfServiceTypes != null)
                {
                    hashCode = (hashCode * 59) + this.TermsOfServiceTypes.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
