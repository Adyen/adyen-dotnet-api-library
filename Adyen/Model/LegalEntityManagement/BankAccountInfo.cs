/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 2
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// BankAccountInfo
    /// </summary>
    [DataContract]
    public partial class BankAccountInfo :  IEquatable<BankAccountInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankAccountInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountInfo" /> class.
        /// </summary>
        /// <param name="accountNumber">The bank account number (without separators).   When this is provided, the &#x60;branchCode&#x60; is also required..</param>
        /// <param name="accountType">The type of bank account..</param>
        /// <param name="bankBicSwift">The bank&#39;s BIC or SWIFT code..</param>
        /// <param name="bankCity">The city where the bank is located..</param>
        /// <param name="bankCode">The bank code of the banking institution with which the bank account is registered..</param>
        /// <param name="bankName">The name of the banking institution where the bank account is held..</param>
        /// <param name="branchCode">The branch code of the branch under which the bank account is registered.  Required when you provide an &#x60;accountNumber&#x60;.   In the following countries, this value corresponds to:   * United States: routing number * United Kingdom: sort code * Germany: Bankleitzahl.</param>
        /// <param name="checkCode">The check code of the bank account..</param>
        /// <param name="countryCode">The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**. (required).</param>
        /// <param name="currencyCode">The account&#39;s three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **EUR**. (required).</param>
        /// <param name="iban">The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard..</param>
        public BankAccountInfo(string accountNumber = default(string), string accountType = default(string), string bankBicSwift = default(string), string bankCity = default(string), string bankCode = default(string), string bankName = default(string), string branchCode = default(string), string checkCode = default(string), string countryCode = default(string), string currencyCode = default(string), string iban = default(string))
        {
            this.AccountNumber = accountNumber;
            this.AccountType = accountType;
            this.BankBicSwift = bankBicSwift;
            this.BankCity = bankCity;
            this.BankCode = bankCode;
            this.BankName = bankName;
            this.BranchCode = branchCode;
            this.CheckCode = checkCode;
            this.CountryCode = countryCode;
            this.CurrencyCode = currencyCode;
            this.Iban = iban;
        }

        /// <summary>
        /// The bank account number (without separators).   When this is provided, the &#x60;branchCode&#x60; is also required.
        /// </summary>
        /// <value>The bank account number (without separators).   When this is provided, the &#x60;branchCode&#x60; is also required.</value>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The type of bank account.
        /// </summary>
        /// <value>The type of bank account.</value>
        [DataMember(Name="accountType", EmitDefaultValue=false)]
        [Obsolete]
        public string AccountType { get; set; }

        /// <summary>
        /// The bank&#39;s BIC or SWIFT code.
        /// </summary>
        /// <value>The bank&#39;s BIC or SWIFT code.</value>
        [DataMember(Name="bankBicSwift", EmitDefaultValue=false)]
        public string BankBicSwift { get; set; }

        /// <summary>
        /// The city where the bank is located.
        /// </summary>
        /// <value>The city where the bank is located.</value>
        [DataMember(Name="bankCity", EmitDefaultValue=false)]
        public string BankCity { get; set; }

        /// <summary>
        /// The bank code of the banking institution with which the bank account is registered.
        /// </summary>
        /// <value>The bank code of the banking institution with which the bank account is registered.</value>
        [DataMember(Name="bankCode", EmitDefaultValue=false)]
        public string BankCode { get; set; }

        /// <summary>
        /// The name of the banking institution where the bank account is held.
        /// </summary>
        /// <value>The name of the banking institution where the bank account is held.</value>
        [DataMember(Name="bankName", EmitDefaultValue=false)]
        public string BankName { get; set; }

        /// <summary>
        /// The branch code of the branch under which the bank account is registered.  Required when you provide an &#x60;accountNumber&#x60;.   In the following countries, this value corresponds to:   * United States: routing number * United Kingdom: sort code * Germany: Bankleitzahl
        /// </summary>
        /// <value>The branch code of the branch under which the bank account is registered.  Required when you provide an &#x60;accountNumber&#x60;.   In the following countries, this value corresponds to:   * United States: routing number * United Kingdom: sort code * Germany: Bankleitzahl</value>
        [DataMember(Name="branchCode", EmitDefaultValue=false)]
        public string BranchCode { get; set; }

        /// <summary>
        /// The check code of the bank account.
        /// </summary>
        /// <value>The check code of the bank account.</value>
        [DataMember(Name="checkCode", EmitDefaultValue=false)]
        public string CheckCode { get; set; }

        /// <summary>
        /// The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.
        /// </summary>
        /// <value>The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.</value>
        [DataMember(Name="countryCode", EmitDefaultValue=true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The account&#39;s three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **EUR**.
        /// </summary>
        /// <value>The account&#39;s three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **EUR**.</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
        /// </summary>
        /// <value>The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.</value>
        [DataMember(Name="iban", EmitDefaultValue=false)]
        public string Iban { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankAccountInfo {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  BankBicSwift: ").Append(BankBicSwift).Append("\n");
            sb.Append("  BankCity: ").Append(BankCity).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  CheckCode: ").Append(CheckCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankAccountInfo);
        }

        /// <summary>
        /// Returns true if BankAccountInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BankAccountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankAccountInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.BankBicSwift == input.BankBicSwift ||
                    (this.BankBicSwift != null &&
                    this.BankBicSwift.Equals(input.BankBicSwift))
                ) && 
                (
                    this.BankCity == input.BankCity ||
                    (this.BankCity != null &&
                    this.BankCity.Equals(input.BankCity))
                ) && 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BranchCode == input.BranchCode ||
                    (this.BranchCode != null &&
                    this.BranchCode.Equals(input.BranchCode))
                ) && 
                (
                    this.CheckCode == input.CheckCode ||
                    (this.CheckCode != null &&
                    this.CheckCode.Equals(input.CheckCode))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Iban == input.Iban ||
                    (this.Iban != null &&
                    this.Iban.Equals(input.Iban))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.BankBicSwift != null)
                    hashCode = hashCode * 59 + this.BankBicSwift.GetHashCode();
                if (this.BankCity != null)
                    hashCode = hashCode * 59 + this.BankCity.GetHashCode();
                if (this.BankCode != null)
                    hashCode = hashCode * 59 + this.BankCode.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BranchCode != null)
                    hashCode = hashCode * 59 + this.BranchCode.GetHashCode();
                if (this.CheckCode != null)
                    hashCode = hashCode * 59 + this.CheckCode.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Iban != null)
                    hashCode = hashCode * 59 + this.Iban.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
