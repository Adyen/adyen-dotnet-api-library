/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// GeneratePciDescriptionResponse
    /// </summary>
    [DataContract(Name = "GeneratePciDescriptionResponse")]
    public partial class GeneratePciDescriptionResponse : IEquatable<GeneratePciDescriptionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneratePciDescriptionResponse" /> class.
        /// </summary>
        /// <param name="content">The generated questionnaires in a base64 encoded format..</param>
        /// <param name="language">The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code for the questionnaire. For example, **en**..</param>
        /// <param name="pciTemplateReferences">The array of Adyen-generated unique identifiers for the questionnaires..</param>
        public GeneratePciDescriptionResponse(byte[] content = default(byte[]), string language = default(string), List<string> pciTemplateReferences = default(List<string>))
        {
            this.Content = content;
            this.Language = language;
            this.PciTemplateReferences = pciTemplateReferences;
        }

        /// <summary>
        /// The generated questionnaires in a base64 encoded format.
        /// </summary>
        /// <value>The generated questionnaires in a base64 encoded format.</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public byte[] Content { get; set; }

        /// <summary>
        /// The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code for the questionnaire. For example, **en**.
        /// </summary>
        /// <value>The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code for the questionnaire. For example, **en**.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// The array of Adyen-generated unique identifiers for the questionnaires.
        /// </summary>
        /// <value>The array of Adyen-generated unique identifiers for the questionnaires.</value>
        [DataMember(Name = "pciTemplateReferences", EmitDefaultValue = false)]
        public List<string> PciTemplateReferences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeneratePciDescriptionResponse {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  PciTemplateReferences: ").Append(PciTemplateReferences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeneratePciDescriptionResponse);
        }

        /// <summary>
        /// Returns true if GeneratePciDescriptionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GeneratePciDescriptionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneratePciDescriptionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.PciTemplateReferences == input.PciTemplateReferences ||
                    this.PciTemplateReferences != null &&
                    input.PciTemplateReferences != null &&
                    this.PciTemplateReferences.SequenceEqual(input.PciTemplateReferences)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.PciTemplateReferences != null)
                {
                    hashCode = (hashCode * 59) + this.PciTemplateReferences.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
