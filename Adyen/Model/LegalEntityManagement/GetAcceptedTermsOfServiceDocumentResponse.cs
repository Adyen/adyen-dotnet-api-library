/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// GetAcceptedTermsOfServiceDocumentResponse
    /// </summary>
    [DataContract(Name = "GetAcceptedTermsOfServiceDocumentResponse")]
    public partial class GetAcceptedTermsOfServiceDocumentResponse : IEquatable<GetAcceptedTermsOfServiceDocumentResponse>, IValidatableObject
    {
        /// <summary>
        /// The format of the Terms of Service document.
        /// </summary>
        /// <value>The format of the Terms of Service document.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TermsOfServiceDocumentFormatEnum
        {
            /// <summary>
            /// Enum JSON for value: JSON
            /// </summary>
            [EnumMember(Value = "JSON")]
            JSON = 1,

            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF = 2,

            /// <summary>
            /// Enum TXT for value: TXT
            /// </summary>
            [EnumMember(Value = "TXT")]
            TXT = 3

        }


        /// <summary>
        /// The format of the Terms of Service document.
        /// </summary>
        /// <value>The format of the Terms of Service document.</value>
        [DataMember(Name = "termsOfServiceDocumentFormat", EmitDefaultValue = false)]
        public TermsOfServiceDocumentFormatEnum? TermsOfServiceDocumentFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAcceptedTermsOfServiceDocumentResponse" /> class.
        /// </summary>
        /// <param name="document">The accepted Terms of Service document in the requested format represented as a Base64-encoded bytes array..</param>
        /// <param name="id">The unique identifier of the legal entity..</param>
        /// <param name="termsOfServiceAcceptanceReference">An Adyen-generated reference for the accepted Terms of Service..</param>
        /// <param name="termsOfServiceDocumentFormat">The format of the Terms of Service document..</param>
        public GetAcceptedTermsOfServiceDocumentResponse(byte[] document = default(byte[]), string id = default(string), string termsOfServiceAcceptanceReference = default(string), TermsOfServiceDocumentFormatEnum? termsOfServiceDocumentFormat = default(TermsOfServiceDocumentFormatEnum?))
        {
            this.Document = document;
            this.Id = id;
            this.TermsOfServiceAcceptanceReference = termsOfServiceAcceptanceReference;
            this.TermsOfServiceDocumentFormat = termsOfServiceDocumentFormat;
        }

        /// <summary>
        /// The accepted Terms of Service document in the requested format represented as a Base64-encoded bytes array.
        /// </summary>
        /// <value>The accepted Terms of Service document in the requested format represented as a Base64-encoded bytes array.</value>
        [DataMember(Name = "document", EmitDefaultValue = false)]
        public byte[] Document { get; set; }

        /// <summary>
        /// The unique identifier of the legal entity.
        /// </summary>
        /// <value>The unique identifier of the legal entity.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// An Adyen-generated reference for the accepted Terms of Service.
        /// </summary>
        /// <value>An Adyen-generated reference for the accepted Terms of Service.</value>
        [DataMember(Name = "termsOfServiceAcceptanceReference", EmitDefaultValue = false)]
        public string TermsOfServiceAcceptanceReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAcceptedTermsOfServiceDocumentResponse {\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TermsOfServiceAcceptanceReference: ").Append(TermsOfServiceAcceptanceReference).Append("\n");
            sb.Append("  TermsOfServiceDocumentFormat: ").Append(TermsOfServiceDocumentFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAcceptedTermsOfServiceDocumentResponse);
        }

        /// <summary>
        /// Returns true if GetAcceptedTermsOfServiceDocumentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAcceptedTermsOfServiceDocumentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAcceptedTermsOfServiceDocumentResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TermsOfServiceAcceptanceReference == input.TermsOfServiceAcceptanceReference ||
                    (this.TermsOfServiceAcceptanceReference != null &&
                    this.TermsOfServiceAcceptanceReference.Equals(input.TermsOfServiceAcceptanceReference))
                ) && 
                (
                    this.TermsOfServiceDocumentFormat == input.TermsOfServiceDocumentFormat ||
                    this.TermsOfServiceDocumentFormat.Equals(input.TermsOfServiceDocumentFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Document != null)
                {
                    hashCode = (hashCode * 59) + this.Document.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TermsOfServiceAcceptanceReference != null)
                {
                    hashCode = (hashCode * 59) + this.TermsOfServiceAcceptanceReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TermsOfServiceDocumentFormat.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
