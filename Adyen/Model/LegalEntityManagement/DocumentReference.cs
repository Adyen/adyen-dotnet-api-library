/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// DocumentReference
    /// </summary>
    [DataContract(Name = "DocumentReference")]
    public partial class DocumentReference : IEquatable<DocumentReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentReference" /> class.
        /// </summary>
        /// <param name="active">Identifies whether the document is active and used for checks..</param>
        /// <param name="description">Your description for the document..</param>
        /// <param name="fileName">Document name..</param>
        /// <param name="id">The unique identifier of the resource..</param>
        /// <param name="modificationDate">The modification date of the document..</param>
        /// <param name="pages">List of document pages.</param>
        /// <param name="type">Type of document, used when providing an ID number or uploading a document..</param>
        public DocumentReference(bool? active = default(bool?), string description = default(string), string fileName = default(string), string id = default(string), DateTime modificationDate = default(DateTime), List<DocumentPage> pages = default(List<DocumentPage>), string type = default(string))
        {
            this.Active = active;
            this.Description = description;
            this.FileName = fileName;
            this.Id = id;
            this.ModificationDate = modificationDate;
            this.Pages = pages;
            this.Type = type;
        }

        /// <summary>
        /// Identifies whether the document is active and used for checks.
        /// </summary>
        /// <value>Identifies whether the document is active and used for checks.</value>
        [DataMember(Name = "active", EmitDefaultValue = false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Your description for the document.
        /// </summary>
        /// <value>Your description for the document.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Document name.
        /// </summary>
        /// <value>Document name.</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// The unique identifier of the resource.
        /// </summary>
        /// <value>The unique identifier of the resource.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The modification date of the document.
        /// </summary>
        /// <value>The modification date of the document.</value>
        [DataMember(Name = "modificationDate", EmitDefaultValue = false)]
        public DateTime ModificationDate { get; set; }

        /// <summary>
        /// List of document pages
        /// </summary>
        /// <value>List of document pages</value>
        [DataMember(Name = "pages", EmitDefaultValue = false)]
        public List<DocumentPage> Pages { get; set; }

        /// <summary>
        /// Type of document, used when providing an ID number or uploading a document.
        /// </summary>
        /// <value>Type of document, used when providing an ID number or uploading a document.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentReference {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ModificationDate: ").Append(ModificationDate).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentReference);
        }

        /// <summary>
        /// Returns true if DocumentReference instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ModificationDate == input.ModificationDate ||
                    (this.ModificationDate != null &&
                    this.ModificationDate.Equals(input.ModificationDate))
                ) && 
                (
                    this.Pages == input.Pages ||
                    this.Pages != null &&
                    input.Pages != null &&
                    this.Pages.SequenceEqual(input.Pages)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ModificationDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModificationDate.GetHashCode();
                }
                if (this.Pages != null)
                {
                    hashCode = (hashCode * 59) + this.Pages.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
