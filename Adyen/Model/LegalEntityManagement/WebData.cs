/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// WebData
    /// </summary>
    [DataContract(Name = "WebData")]
    public partial class WebData : IEquatable<WebData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebData" /> class.
        /// </summary>
        /// <param name="webAddress">The URL of the website or the app store URL..</param>
        public WebData(string webAddress = default(string))
        {
            this.WebAddress = webAddress;
        }

        /// <summary>
        /// The URL of the website or the app store URL.
        /// </summary>
        /// <value>The URL of the website or the app store URL.</value>
        [DataMember(Name = "webAddress", EmitDefaultValue = false)]
        public string WebAddress { get; set; }

        /// <summary>
        /// The unique identifier of the web address.
        /// </summary>
        /// <value>The unique identifier of the web address.</value>
        [DataMember(Name = "webAddressId", EmitDefaultValue = false)]
        public string WebAddressId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebData {\n");
            sb.Append("  WebAddress: ").Append(WebAddress).Append("\n");
            sb.Append("  WebAddressId: ").Append(WebAddressId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebData);
        }

        /// <summary>
        /// Returns true if WebData instances are equal
        /// </summary>
        /// <param name="input">Instance of WebData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WebAddress == input.WebAddress ||
                    (this.WebAddress != null &&
                    this.WebAddress.Equals(input.WebAddress))
                ) && 
                (
                    this.WebAddressId == input.WebAddressId ||
                    (this.WebAddressId != null &&
                    this.WebAddressId.Equals(input.WebAddressId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WebAddress != null)
                {
                    hashCode = (hashCode * 59) + this.WebAddress.GetHashCode();
                }
                if (this.WebAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.WebAddressId.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
