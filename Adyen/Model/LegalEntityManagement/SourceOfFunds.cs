/*
* Legal Entity Management API
*
*
* The version of the OpenAPI document: 4
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.LegalEntityManagement
{
    /// <summary>
    /// SourceOfFunds
    /// </summary>
    [DataContract(Name = "SourceOfFunds")]
    public partial class SourceOfFunds : IEquatable<SourceOfFunds>, IValidatableObject
    {
        /// <summary>
        /// The type of the source of funds.    Possible values: *  **business** *  **employment** *  **donations** *  **inheritance** *  **financialAid** *  **rentalIncome** *  **dividendIncome** *  **royaltyIncome** *  **thirdPartyFunding** *  **pensionIncome** *  **insuranceSettlement** *  **cryptocurrencyIncome** *  **assetSale** *  **loans** *  **gamblingWinnings**  
        /// </summary>
        /// <value>The type of the source of funds.    Possible values: *  **business** *  **employment** *  **donations** *  **inheritance** *  **financialAid** *  **rentalIncome** *  **dividendIncome** *  **royaltyIncome** *  **thirdPartyFunding** *  **pensionIncome** *  **insuranceSettlement** *  **cryptocurrencyIncome** *  **assetSale** *  **loans** *  **gamblingWinnings**  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Business for value: business
            /// </summary>
            [EnumMember(Value = "business")]
            Business = 1,

            /// <summary>
            /// Enum Employment for value: employment
            /// </summary>
            [EnumMember(Value = "employment")]
            Employment = 2,

            /// <summary>
            /// Enum Donations for value: donations
            /// </summary>
            [EnumMember(Value = "donations")]
            Donations = 3,

            /// <summary>
            /// Enum Inheritance for value: inheritance
            /// </summary>
            [EnumMember(Value = "inheritance")]
            Inheritance = 4,

            /// <summary>
            /// Enum FinancialAid for value: financialAid
            /// </summary>
            [EnumMember(Value = "financialAid")]
            FinancialAid = 5,

            /// <summary>
            /// Enum RentalIncome for value: rentalIncome
            /// </summary>
            [EnumMember(Value = "rentalIncome")]
            RentalIncome = 6,

            /// <summary>
            /// Enum DividendIncome for value: dividendIncome
            /// </summary>
            [EnumMember(Value = "dividendIncome")]
            DividendIncome = 7,

            /// <summary>
            /// Enum RoyaltyIncome for value: royaltyIncome
            /// </summary>
            [EnumMember(Value = "royaltyIncome")]
            RoyaltyIncome = 8,

            /// <summary>
            /// Enum ThirdPartyFunding for value: thirdPartyFunding
            /// </summary>
            [EnumMember(Value = "thirdPartyFunding")]
            ThirdPartyFunding = 9,

            /// <summary>
            /// Enum PensionIncome for value: pensionIncome
            /// </summary>
            [EnumMember(Value = "pensionIncome")]
            PensionIncome = 10,

            /// <summary>
            /// Enum InsuranceSettlement for value: insuranceSettlement
            /// </summary>
            [EnumMember(Value = "insuranceSettlement")]
            InsuranceSettlement = 11,

            /// <summary>
            /// Enum CryptocurrencyIncome for value: cryptocurrencyIncome
            /// </summary>
            [EnumMember(Value = "cryptocurrencyIncome")]
            CryptocurrencyIncome = 12,

            /// <summary>
            /// Enum AssetSale for value: assetSale
            /// </summary>
            [EnumMember(Value = "assetSale")]
            AssetSale = 13,

            /// <summary>
            /// Enum Loans for value: loans
            /// </summary>
            [EnumMember(Value = "loans")]
            Loans = 14,

            /// <summary>
            /// Enum GamblingWinnings for value: gamblingWinnings
            /// </summary>
            [EnumMember(Value = "gamblingWinnings")]
            GamblingWinnings = 15

        }


        /// <summary>
        /// The type of the source of funds.    Possible values: *  **business** *  **employment** *  **donations** *  **inheritance** *  **financialAid** *  **rentalIncome** *  **dividendIncome** *  **royaltyIncome** *  **thirdPartyFunding** *  **pensionIncome** *  **insuranceSettlement** *  **cryptocurrencyIncome** *  **assetSale** *  **loans** *  **gamblingWinnings**  
        /// </summary>
        /// <value>The type of the source of funds.    Possible values: *  **business** *  **employment** *  **donations** *  **inheritance** *  **financialAid** *  **rentalIncome** *  **dividendIncome** *  **royaltyIncome** *  **thirdPartyFunding** *  **pensionIncome** *  **insuranceSettlement** *  **cryptocurrencyIncome** *  **assetSale** *  **loans** *  **gamblingWinnings**  </value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceOfFunds" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SourceOfFunds() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceOfFunds" /> class.
        /// </summary>
        /// <param name="adyenProcessedFunds">Indicates whether the funds are coming from transactions processed by Adyen. If **false**, the &#x60;type&#x60; is required. (required).</param>
        /// <param name="amount">amount.</param>
        /// <param name="assetMonthsHeld">The number of months that the asset has been in possession of the user.  For example, if the source of funds is of type **cryptocurrencyIncome** then &#x60;assetMonthsHeld&#x60; is the number of months the user has owned the cryptocurrency..</param>
        /// <param name="cryptocurrencyExchange">Required if &#x60;type&#x60; is **cryptocurrencyIncome**. The cryptocurrency exchange where the funds were acquired..</param>
        /// <param name="dateOfFundsReceived">Required if &#x60;type&#x60; is **donations** or **inheritance**. The date the funds were received, in YYYY-MM-DD format..</param>
        /// <param name="dateOfSourceEvent">Required if &#x60;type&#x60; is **assetSale** or **gamblingWinnings**. The date the funds were received, in YYYY-MM-DD format.  For example, if the source of funds is of type **assetSale**, the dateOfSourceEvent is the date of the sale. If the source of funds is of type **gamblingWinnings**, the dateOfSourceEvent is the date of winnings..</param>
        /// <param name="description">Required if &#x60;type&#x60; is **business** or **assetSale**. A description for the source of funds.  For example, for &#x60;type&#x60; **business**, provide a description of where the business transactions come from, such as payments through bank transfer. For &#x60;type&#x60; **assetSale**, provide a description of the asset. For example, the address of a residential property if it is a property sale..</param>
        /// <param name="financiers">Required if &#x60;type&#x60; is **thirdPartyFunding**. Information about the financiers..</param>
        /// <param name="originatorLegalEntityId">Required if &#x60;type&#x60; is **donations** or **inheritance**. The legal entity ID representing the originator of the source of funds.  For example, if the source of funds is **inheritance**, then &#x60;originatorOfFundsReference&#x60; should be the legal entity reference of the benefactor..</param>
        /// <param name="purpose">Required if &#x60;type&#x60; is **donations**. The reason for receiving the funds..</param>
        /// <param name="relationship">Required if &#x60;type&#x60; is **donations** or **inheritance**. The relationship of the originator of the funds to the recipient..</param>
        /// <param name="type">The type of the source of funds.    Possible values: *  **business** *  **employment** *  **donations** *  **inheritance** *  **financialAid** *  **rentalIncome** *  **dividendIncome** *  **royaltyIncome** *  **thirdPartyFunding** *  **pensionIncome** *  **insuranceSettlement** *  **cryptocurrencyIncome** *  **assetSale** *  **loans** *  **gamblingWinnings**  .</param>
        /// <param name="website">Required if &#x60;type&#x60; is **gamblingWinnings**. The location of the gambling site for the winnings.  For example, if the source of funds is online gambling, provide the website of the gambling company..</param>
        public SourceOfFunds(bool? adyenProcessedFunds = default(bool?), Amount amount = default(Amount), int? assetMonthsHeld = default(int?), string cryptocurrencyExchange = default(string), DateTime dateOfFundsReceived = default(DateTime), DateTime dateOfSourceEvent = default(DateTime), string description = default(string), List<Financier> financiers = default(List<Financier>), string originatorLegalEntityId = default(string), string purpose = default(string), string relationship = default(string), TypeEnum? type = default(TypeEnum?), string website = default(string))
        {
            this.AdyenProcessedFunds = adyenProcessedFunds;
            this.Amount = amount;
            this.AssetMonthsHeld = assetMonthsHeld;
            this.CryptocurrencyExchange = cryptocurrencyExchange;
            this.DateOfFundsReceived = dateOfFundsReceived;
            this.DateOfSourceEvent = dateOfSourceEvent;
            this.Description = description;
            this.Financiers = financiers;
            this.OriginatorLegalEntityId = originatorLegalEntityId;
            this.Purpose = purpose;
            this.Relationship = relationship;
            this.Type = type;
            this.Website = website;
        }

        /// <summary>
        /// Indicates whether the funds are coming from transactions processed by Adyen. If **false**, the &#x60;type&#x60; is required.
        /// </summary>
        /// <value>Indicates whether the funds are coming from transactions processed by Adyen. If **false**, the &#x60;type&#x60; is required.</value>
        [DataMember(Name = "adyenProcessedFunds", IsRequired = false, EmitDefaultValue = false)]
        public bool? AdyenProcessedFunds { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// The number of months that the asset has been in possession of the user.  For example, if the source of funds is of type **cryptocurrencyIncome** then &#x60;assetMonthsHeld&#x60; is the number of months the user has owned the cryptocurrency.
        /// </summary>
        /// <value>The number of months that the asset has been in possession of the user.  For example, if the source of funds is of type **cryptocurrencyIncome** then &#x60;assetMonthsHeld&#x60; is the number of months the user has owned the cryptocurrency.</value>
        [DataMember(Name = "assetMonthsHeld", EmitDefaultValue = false)]
        public int? AssetMonthsHeld { get; set; }

        /// <summary>
        /// Required if &#x60;type&#x60; is **cryptocurrencyIncome**. The cryptocurrency exchange where the funds were acquired.
        /// </summary>
        /// <value>Required if &#x60;type&#x60; is **cryptocurrencyIncome**. The cryptocurrency exchange where the funds were acquired.</value>
        [DataMember(Name = "cryptocurrencyExchange", EmitDefaultValue = false)]
        public string CryptocurrencyExchange { get; set; }

        /// <summary>
        /// Required if &#x60;type&#x60; is **donations** or **inheritance**. The date the funds were received, in YYYY-MM-DD format.
        /// </summary>
        /// <value>Required if &#x60;type&#x60; is **donations** or **inheritance**. The date the funds were received, in YYYY-MM-DD format.</value>
        [DataMember(Name = "dateOfFundsReceived", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateOfFundsReceived { get; set; }

        /// <summary>
        /// Required if &#x60;type&#x60; is **assetSale** or **gamblingWinnings**. The date the funds were received, in YYYY-MM-DD format.  For example, if the source of funds is of type **assetSale**, the dateOfSourceEvent is the date of the sale. If the source of funds is of type **gamblingWinnings**, the dateOfSourceEvent is the date of winnings.
        /// </summary>
        /// <value>Required if &#x60;type&#x60; is **assetSale** or **gamblingWinnings**. The date the funds were received, in YYYY-MM-DD format.  For example, if the source of funds is of type **assetSale**, the dateOfSourceEvent is the date of the sale. If the source of funds is of type **gamblingWinnings**, the dateOfSourceEvent is the date of winnings.</value>
        [DataMember(Name = "dateOfSourceEvent", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateOfSourceEvent { get; set; }

        /// <summary>
        /// Required if &#x60;type&#x60; is **business** or **assetSale**. A description for the source of funds.  For example, for &#x60;type&#x60; **business**, provide a description of where the business transactions come from, such as payments through bank transfer. For &#x60;type&#x60; **assetSale**, provide a description of the asset. For example, the address of a residential property if it is a property sale.
        /// </summary>
        /// <value>Required if &#x60;type&#x60; is **business** or **assetSale**. A description for the source of funds.  For example, for &#x60;type&#x60; **business**, provide a description of where the business transactions come from, such as payments through bank transfer. For &#x60;type&#x60; **assetSale**, provide a description of the asset. For example, the address of a residential property if it is a property sale.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Required if &#x60;type&#x60; is **thirdPartyFunding**. Information about the financiers.
        /// </summary>
        /// <value>Required if &#x60;type&#x60; is **thirdPartyFunding**. Information about the financiers.</value>
        [DataMember(Name = "financiers", EmitDefaultValue = false)]
        public List<Financier> Financiers { get; set; }

        /// <summary>
        /// Required if &#x60;type&#x60; is **donations** or **inheritance**. The legal entity ID representing the originator of the source of funds.  For example, if the source of funds is **inheritance**, then &#x60;originatorOfFundsReference&#x60; should be the legal entity reference of the benefactor.
        /// </summary>
        /// <value>Required if &#x60;type&#x60; is **donations** or **inheritance**. The legal entity ID representing the originator of the source of funds.  For example, if the source of funds is **inheritance**, then &#x60;originatorOfFundsReference&#x60; should be the legal entity reference of the benefactor.</value>
        [DataMember(Name = "originatorLegalEntityId", EmitDefaultValue = false)]
        public string OriginatorLegalEntityId { get; set; }

        /// <summary>
        /// Required if &#x60;type&#x60; is **donations**. The reason for receiving the funds.
        /// </summary>
        /// <value>Required if &#x60;type&#x60; is **donations**. The reason for receiving the funds.</value>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public string Purpose { get; set; }

        /// <summary>
        /// Required if &#x60;type&#x60; is **donations** or **inheritance**. The relationship of the originator of the funds to the recipient.
        /// </summary>
        /// <value>Required if &#x60;type&#x60; is **donations** or **inheritance**. The relationship of the originator of the funds to the recipient.</value>
        [DataMember(Name = "relationship", EmitDefaultValue = false)]
        public string Relationship { get; set; }

        /// <summary>
        /// Required if &#x60;type&#x60; is **gamblingWinnings**. The location of the gambling site for the winnings.  For example, if the source of funds is online gambling, provide the website of the gambling company.
        /// </summary>
        /// <value>Required if &#x60;type&#x60; is **gamblingWinnings**. The location of the gambling site for the winnings.  For example, if the source of funds is online gambling, provide the website of the gambling company.</value>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SourceOfFunds {\n");
            sb.Append("  AdyenProcessedFunds: ").Append(AdyenProcessedFunds).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AssetMonthsHeld: ").Append(AssetMonthsHeld).Append("\n");
            sb.Append("  CryptocurrencyExchange: ").Append(CryptocurrencyExchange).Append("\n");
            sb.Append("  DateOfFundsReceived: ").Append(DateOfFundsReceived).Append("\n");
            sb.Append("  DateOfSourceEvent: ").Append(DateOfSourceEvent).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Financiers: ").Append(Financiers).Append("\n");
            sb.Append("  OriginatorLegalEntityId: ").Append(OriginatorLegalEntityId).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SourceOfFunds);
        }

        /// <summary>
        /// Returns true if SourceOfFunds instances are equal
        /// </summary>
        /// <param name="input">Instance of SourceOfFunds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SourceOfFunds input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdyenProcessedFunds == input.AdyenProcessedFunds ||
                    this.AdyenProcessedFunds.Equals(input.AdyenProcessedFunds)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AssetMonthsHeld == input.AssetMonthsHeld ||
                    this.AssetMonthsHeld.Equals(input.AssetMonthsHeld)
                ) && 
                (
                    this.CryptocurrencyExchange == input.CryptocurrencyExchange ||
                    (this.CryptocurrencyExchange != null &&
                    this.CryptocurrencyExchange.Equals(input.CryptocurrencyExchange))
                ) && 
                (
                    this.DateOfFundsReceived == input.DateOfFundsReceived ||
                    (this.DateOfFundsReceived != null &&
                    this.DateOfFundsReceived.Equals(input.DateOfFundsReceived))
                ) && 
                (
                    this.DateOfSourceEvent == input.DateOfSourceEvent ||
                    (this.DateOfSourceEvent != null &&
                    this.DateOfSourceEvent.Equals(input.DateOfSourceEvent))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Financiers == input.Financiers ||
                    this.Financiers != null &&
                    input.Financiers != null &&
                    this.Financiers.SequenceEqual(input.Financiers)
                ) && 
                (
                    this.OriginatorLegalEntityId == input.OriginatorLegalEntityId ||
                    (this.OriginatorLegalEntityId != null &&
                    this.OriginatorLegalEntityId.Equals(input.OriginatorLegalEntityId))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AdyenProcessedFunds.GetHashCode();
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssetMonthsHeld.GetHashCode();
                if (this.CryptocurrencyExchange != null)
                {
                    hashCode = (hashCode * 59) + this.CryptocurrencyExchange.GetHashCode();
                }
                if (this.DateOfFundsReceived != null)
                {
                    hashCode = (hashCode * 59) + this.DateOfFundsReceived.GetHashCode();
                }
                if (this.DateOfSourceEvent != null)
                {
                    hashCode = (hashCode * 59) + this.DateOfSourceEvent.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Financiers != null)
                {
                    hashCode = (hashCode * 59) + this.Financiers.GetHashCode();
                }
                if (this.OriginatorLegalEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.OriginatorLegalEntityId.GetHashCode();
                }
                if (this.Purpose != null)
                {
                    hashCode = (hashCode * 59) + this.Purpose.GetHashCode();
                }
                if (this.Relationship != null)
                {
                    hashCode = (hashCode * 59) + this.Relationship.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Website != null)
                {
                    hashCode = (hashCode * 59) + this.Website.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
