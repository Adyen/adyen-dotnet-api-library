/*
* Configuration webhooks
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.ConfigurationWebhooks
{
    /// <summary>
    /// BankScoreSignalTriggeredData
    /// </summary>
    [DataContract(Name = "BankScoreSignalTriggeredData")]
    public partial class BankScoreSignalTriggeredData : IEquatable<BankScoreSignalTriggeredData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankScoreSignalTriggeredData" /> class.
        /// </summary>
        /// <param name="accountHolder">accountHolder.</param>
        /// <param name="accountHolderStatus">The status of the account holder..</param>
        /// <param name="automatedActions">The automated action(s) taken as a result of the score signals that were triggered..</param>
        /// <param name="balancePlatform">The unique identifier of the balance platform..</param>
        /// <param name="creationDate">The date and time when the event was triggered, in ISO 8601 extended format. For example, **2025-03-19T10:15:30+01:00**..</param>
        /// <param name="id">The ID of the resource..</param>
        /// <param name="riskScore">The score of the identity resulting from the signal(s) that were triggered..</param>
        /// <param name="scoreSignalsTriggered">The name(s) of the score signals that were triggered..</param>
        /// <param name="signalSourceTypes">The type(s) of the score signals that were triggered..</param>
        public BankScoreSignalTriggeredData(ResourceReference accountHolder = default(ResourceReference), string accountHolderStatus = default(string), List<string> automatedActions = default(List<string>), string balancePlatform = default(string), DateTime creationDate = default(DateTime), string id = default(string), int? riskScore = default(int?), List<string> scoreSignalsTriggered = default(List<string>), List<string> signalSourceTypes = default(List<string>))
        {
            this.AccountHolder = accountHolder;
            this.AccountHolderStatus = accountHolderStatus;
            this.AutomatedActions = automatedActions;
            this.BalancePlatform = balancePlatform;
            this.CreationDate = creationDate;
            this.Id = id;
            this.RiskScore = riskScore;
            this.ScoreSignalsTriggered = scoreSignalsTriggered;
            this.SignalSourceTypes = signalSourceTypes;
        }

        /// <summary>
        /// Gets or Sets AccountHolder
        /// </summary>
        [DataMember(Name = "accountHolder", EmitDefaultValue = false)]
        public ResourceReference AccountHolder { get; set; }

        /// <summary>
        /// The status of the account holder.
        /// </summary>
        /// <value>The status of the account holder.</value>
        [DataMember(Name = "accountHolderStatus", EmitDefaultValue = false)]
        public string AccountHolderStatus { get; set; }

        /// <summary>
        /// The automated action(s) taken as a result of the score signals that were triggered.
        /// </summary>
        /// <value>The automated action(s) taken as a result of the score signals that were triggered.</value>
        [DataMember(Name = "automatedActions", EmitDefaultValue = false)]
        public List<string> AutomatedActions { get; set; }

        /// <summary>
        /// The unique identifier of the balance platform.
        /// </summary>
        /// <value>The unique identifier of the balance platform.</value>
        [DataMember(Name = "balancePlatform", EmitDefaultValue = false)]
        public string BalancePlatform { get; set; }

        /// <summary>
        /// The date and time when the event was triggered, in ISO 8601 extended format. For example, **2025-03-19T10:15:30+01:00**.
        /// </summary>
        /// <value>The date and time when the event was triggered, in ISO 8601 extended format. For example, **2025-03-19T10:15:30+01:00**.</value>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// The ID of the resource.
        /// </summary>
        /// <value>The ID of the resource.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The score of the identity resulting from the signal(s) that were triggered.
        /// </summary>
        /// <value>The score of the identity resulting from the signal(s) that were triggered.</value>
        [DataMember(Name = "riskScore", EmitDefaultValue = false)]
        public int? RiskScore { get; set; }

        /// <summary>
        /// The name(s) of the score signals that were triggered.
        /// </summary>
        /// <value>The name(s) of the score signals that were triggered.</value>
        [DataMember(Name = "scoreSignalsTriggered", EmitDefaultValue = false)]
        public List<string> ScoreSignalsTriggered { get; set; }

        /// <summary>
        /// The type(s) of the score signals that were triggered.
        /// </summary>
        /// <value>The type(s) of the score signals that were triggered.</value>
        [DataMember(Name = "signalSourceTypes", EmitDefaultValue = false)]
        public List<string> SignalSourceTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankScoreSignalTriggeredData {\n");
            sb.Append("  AccountHolder: ").Append(AccountHolder).Append("\n");
            sb.Append("  AccountHolderStatus: ").Append(AccountHolderStatus).Append("\n");
            sb.Append("  AutomatedActions: ").Append(AutomatedActions).Append("\n");
            sb.Append("  BalancePlatform: ").Append(BalancePlatform).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RiskScore: ").Append(RiskScore).Append("\n");
            sb.Append("  ScoreSignalsTriggered: ").Append(ScoreSignalsTriggered).Append("\n");
            sb.Append("  SignalSourceTypes: ").Append(SignalSourceTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankScoreSignalTriggeredData);
        }

        /// <summary>
        /// Returns true if BankScoreSignalTriggeredData instances are equal
        /// </summary>
        /// <param name="input">Instance of BankScoreSignalTriggeredData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankScoreSignalTriggeredData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountHolder == input.AccountHolder ||
                    (this.AccountHolder != null &&
                    this.AccountHolder.Equals(input.AccountHolder))
                ) && 
                (
                    this.AccountHolderStatus == input.AccountHolderStatus ||
                    (this.AccountHolderStatus != null &&
                    this.AccountHolderStatus.Equals(input.AccountHolderStatus))
                ) && 
                (
                    this.AutomatedActions == input.AutomatedActions ||
                    this.AutomatedActions != null &&
                    input.AutomatedActions != null &&
                    this.AutomatedActions.SequenceEqual(input.AutomatedActions)
                ) && 
                (
                    this.BalancePlatform == input.BalancePlatform ||
                    (this.BalancePlatform != null &&
                    this.BalancePlatform.Equals(input.BalancePlatform))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RiskScore == input.RiskScore ||
                    this.RiskScore.Equals(input.RiskScore)
                ) && 
                (
                    this.ScoreSignalsTriggered == input.ScoreSignalsTriggered ||
                    this.ScoreSignalsTriggered != null &&
                    input.ScoreSignalsTriggered != null &&
                    this.ScoreSignalsTriggered.SequenceEqual(input.ScoreSignalsTriggered)
                ) && 
                (
                    this.SignalSourceTypes == input.SignalSourceTypes ||
                    this.SignalSourceTypes != null &&
                    input.SignalSourceTypes != null &&
                    this.SignalSourceTypes.SequenceEqual(input.SignalSourceTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountHolder != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolder.GetHashCode();
                }
                if (this.AccountHolderStatus != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolderStatus.GetHashCode();
                }
                if (this.AutomatedActions != null)
                {
                    hashCode = (hashCode * 59) + this.AutomatedActions.GetHashCode();
                }
                if (this.BalancePlatform != null)
                {
                    hashCode = (hashCode * 59) + this.BalancePlatform.GetHashCode();
                }
                if (this.CreationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreationDate.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RiskScore.GetHashCode();
                if (this.ScoreSignalsTriggered != null)
                {
                    hashCode = (hashCode * 59) + this.ScoreSignalsTriggered.GetHashCode();
                }
                if (this.SignalSourceTypes != null)
                {
                    hashCode = (hashCode * 59) + this.SignalSourceTypes.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
