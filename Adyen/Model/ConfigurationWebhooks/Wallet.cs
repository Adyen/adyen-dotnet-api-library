/*
* Configuration webhooks
*
*
* The version of the OpenAPI document: 2
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.ConfigurationWebhooks
{
    /// <summary>
    /// Wallet
    /// </summary>
    [DataContract(Name = "Wallet")]
    public partial class Wallet : IEquatable<Wallet>, IValidatableObject
    {
        /// <summary>
        /// Defines RecommendationReasons
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecommendationReasonsEnum
        {
            /// <summary>
            /// Enum AccountCardTooNew for value: accountCardTooNew
            /// </summary>
            [EnumMember(Value = "accountCardTooNew")]
            AccountCardTooNew = 1,

            /// <summary>
            /// Enum AccountHighRisk for value: accountHighRisk
            /// </summary>
            [EnumMember(Value = "accountHighRisk")]
            AccountHighRisk = 2,

            /// <summary>
            /// Enum AccountRecentlyChanged for value: accountRecentlyChanged
            /// </summary>
            [EnumMember(Value = "accountRecentlyChanged")]
            AccountRecentlyChanged = 3,

            /// <summary>
            /// Enum AccountTooNew for value: accountTooNew
            /// </summary>
            [EnumMember(Value = "accountTooNew")]
            AccountTooNew = 4,

            /// <summary>
            /// Enum AccountTooNewSinceLaunch for value: accountTooNewSinceLaunch
            /// </summary>
            [EnumMember(Value = "accountTooNewSinceLaunch")]
            AccountTooNewSinceLaunch = 5,

            /// <summary>
            /// Enum CardholderPanAssociatedToAccountWithinThresholdDays for value: cardholderPanAssociatedToAccountWithinThresholdDays
            /// </summary>
            [EnumMember(Value = "cardholderPanAssociatedToAccountWithinThresholdDays")]
            CardholderPanAssociatedToAccountWithinThresholdDays = 6,

            /// <summary>
            /// Enum ChangesMadeToAccountDataWithinThresholdDays for value: changesMadeToAccountDataWithinThresholdDays
            /// </summary>
            [EnumMember(Value = "changesMadeToAccountDataWithinThresholdDays")]
            ChangesMadeToAccountDataWithinThresholdDays = 7,

            /// <summary>
            /// Enum DeviceProvisioningLocationOutsideOfCardholdersWalletAccountHomeCountry for value: deviceProvisioningLocationOutsideOfCardholdersWalletAccountHomeCountry
            /// </summary>
            [EnumMember(Value = "deviceProvisioningLocationOutsideOfCardholdersWalletAccountHomeCountry")]
            DeviceProvisioningLocationOutsideOfCardholdersWalletAccountHomeCountry = 8,

            /// <summary>
            /// Enum DeviceRecentlyLost for value: deviceRecentlyLost
            /// </summary>
            [EnumMember(Value = "deviceRecentlyLost")]
            DeviceRecentlyLost = 9,

            /// <summary>
            /// Enum EncryptedPaymentInstrumentDataIsBeingPushedByTheIssuerToTheSameDeviceThatIssuerApplicationAuthenticatedButWithSuccessfulUpfrontAuthentication for value: encryptedPaymentInstrumentDataIsBeingPushedByTheIssuerToTheSameDeviceThatIssuerApplicationAuthenticatedButWithSuccessfulUpfrontAuthentication
            /// </summary>
            [EnumMember(Value = "encryptedPaymentInstrumentDataIsBeingPushedByTheIssuerToTheSameDeviceThatIssuerApplicationAuthenticatedButWithSuccessfulUpfrontAuthentication")]
            EncryptedPaymentInstrumentDataIsBeingPushedByTheIssuerToTheSameDeviceThatIssuerApplicationAuthenticatedButWithSuccessfulUpfrontAuthentication = 10,

            /// <summary>
            /// Enum EncryptedPaymentInstrumentDataIsBeingPushedByTheIssuerToTheSameDeviceThatIssuerApplicationAuthenticatedButWithoutAnyUpfrontAuthentication for value: encryptedPaymentInstrumentDataIsBeingPushedByTheIssuerToTheSameDeviceThatIssuerApplicationAuthenticatedButWithoutAnyUpfrontAuthentication
            /// </summary>
            [EnumMember(Value = "encryptedPaymentInstrumentDataIsBeingPushedByTheIssuerToTheSameDeviceThatIssuerApplicationAuthenticatedButWithoutAnyUpfrontAuthentication")]
            EncryptedPaymentInstrumentDataIsBeingPushedByTheIssuerToTheSameDeviceThatIssuerApplicationAuthenticatedButWithoutAnyUpfrontAuthentication = 11,

            /// <summary>
            /// Enum EncryptedPaymentInstrumentDataIsPushedToADifferentDeviceThanTheOneThatIssuerApplicationAuthenticated for value: encryptedPaymentInstrumentDataIsPushedToADifferentDeviceThanTheOneThatIssuerApplicationAuthenticated
            /// </summary>
            [EnumMember(Value = "encryptedPaymentInstrumentDataIsPushedToADifferentDeviceThanTheOneThatIssuerApplicationAuthenticated")]
            EncryptedPaymentInstrumentDataIsPushedToADifferentDeviceThanTheOneThatIssuerApplicationAuthenticated = 12,

            /// <summary>
            /// Enum EncryptedPaymentInstrumentDataIsPushedToADifferentUserThanTheCardHolder for value: encryptedPaymentInstrumentDataIsPushedToADifferentUserThanTheCardHolder
            /// </summary>
            [EnumMember(Value = "encryptedPaymentInstrumentDataIsPushedToADifferentUserThanTheCardHolder")]
            EncryptedPaymentInstrumentDataIsPushedToADifferentUserThanTheCardHolder = 13,

            /// <summary>
            /// Enum HasSuspendedTokens for value: hasSuspendedTokens
            /// </summary>
            [EnumMember(Value = "hasSuspendedTokens")]
            HasSuspendedTokens = 14,

            /// <summary>
            /// Enum InactiveAccount for value: inactiveAccount
            /// </summary>
            [EnumMember(Value = "inactiveAccount")]
            InactiveAccount = 15,

            /// <summary>
            /// Enum IssuerDeferredIDVDecision for value: issuerDeferredIDVDecision
            /// </summary>
            [EnumMember(Value = "issuerDeferredIDVDecision")]
            IssuerDeferredIDVDecision = 16,

            /// <summary>
            /// Enum IssuerEncryptedPaymentInstrumentDataExpired for value: issuerEncryptedPaymentInstrumentDataExpired
            /// </summary>
            [EnumMember(Value = "issuerEncryptedPaymentInstrumentDataExpired")]
            IssuerEncryptedPaymentInstrumentDataExpired = 17,

            /// <summary>
            /// Enum LowAccountScore for value: lowAccountScore
            /// </summary>
            [EnumMember(Value = "lowAccountScore")]
            LowAccountScore = 18,

            /// <summary>
            /// Enum LowDeviceScore for value: lowDeviceScore
            /// </summary>
            [EnumMember(Value = "lowDeviceScore")]
            LowDeviceScore = 19,

            /// <summary>
            /// Enum LowPhoneNumberScore for value: lowPhoneNumberScore
            /// </summary>
            [EnumMember(Value = "lowPhoneNumberScore")]
            LowPhoneNumberScore = 20,

            /// <summary>
            /// Enum NumberOfActiveTokensGreaterThanThreshold for value: numberOfActiveTokensGreaterThanThreshold
            /// </summary>
            [EnumMember(Value = "numberOfActiveTokensGreaterThanThreshold")]
            NumberOfActiveTokensGreaterThanThreshold = 21,

            /// <summary>
            /// Enum NumberOfActiveTokensOnAllDevicesIsGreaterThanThreshold for value: numberOfActiveTokensOnAllDevicesIsGreaterThanThreshold
            /// </summary>
            [EnumMember(Value = "numberOfActiveTokensOnAllDevicesIsGreaterThanThreshold")]
            NumberOfActiveTokensOnAllDevicesIsGreaterThanThreshold = 22,

            /// <summary>
            /// Enum NumberOfDaysSinceDeviceWasLastReportedLostIsLessThanThresholdDays for value: numberOfDaysSinceDeviceWasLastReportedLostIsLessThanThresholdDays
            /// </summary>
            [EnumMember(Value = "numberOfDaysSinceDeviceWasLastReportedLostIsLessThanThresholdDays")]
            NumberOfDaysSinceDeviceWasLastReportedLostIsLessThanThresholdDays = 23,

            /// <summary>
            /// Enum NumberOfDevicesWithSameUseridWithTokenIsGreaterThanThreshold for value: numberOfDevicesWithSameUseridWithTokenIsGreaterThanThreshold
            /// </summary>
            [EnumMember(Value = "numberOfDevicesWithSameUseridWithTokenIsGreaterThanThreshold")]
            NumberOfDevicesWithSameUseridWithTokenIsGreaterThanThreshold = 24,

            /// <summary>
            /// Enum NumberOfTransactionsInLast12MonthsLessThanThresholdNumber for value: numberOfTransactionsInLast12MonthsLessThanThresholdNumber
            /// </summary>
            [EnumMember(Value = "numberOfTransactionsInLast12MonthsLessThanThresholdNumber")]
            NumberOfTransactionsInLast12MonthsLessThanThresholdNumber = 25,

            /// <summary>
            /// Enum OutSideHomeTerritory for value: outSideHomeTerritory
            /// </summary>
            [EnumMember(Value = "outSideHomeTerritory")]
            OutSideHomeTerritory = 26,

            /// <summary>
            /// Enum SuspendedCardsInTheWALLETAccountIsGreaterThanThreshold for value: suspendedCardsInTheWALLETAccountIsGreaterThanThreshold
            /// </summary>
            [EnumMember(Value = "suspendedCardsInTheWALLETAccountIsGreaterThanThreshold")]
            SuspendedCardsInTheWALLETAccountIsGreaterThanThreshold = 27,

            /// <summary>
            /// Enum SuspiciousActivity for value: suspiciousActivity
            /// </summary>
            [EnumMember(Value = "suspiciousActivity")]
            SuspiciousActivity = 28,

            /// <summary>
            /// Enum TheNumberOfProvisioningAttemptsAcrossAllCardsOnThisDeviceInTheLast24HoursExceedsTheThreshold for value: theNumberOfProvisioningAttemptsAcrossAllCardsOnThisDeviceInTheLast24HoursExceedsTheThreshold
            /// </summary>
            [EnumMember(Value = "theNumberOfProvisioningAttemptsAcrossAllCardsOnThisDeviceInTheLast24HoursExceedsTheThreshold")]
            TheNumberOfProvisioningAttemptsAcrossAllCardsOnThisDeviceInTheLast24HoursExceedsTheThreshold = 29,

            /// <summary>
            /// Enum TheWALLETAccountIntoWhichTheCardIsBeingProvisionedContainDistinctNamesGreaterThanThreshold for value: theWALLETAccountIntoWhichTheCardIsBeingProvisionedContainDistinctNamesGreaterThanThreshold
            /// </summary>
            [EnumMember(Value = "theWALLETAccountIntoWhichTheCardIsBeingProvisionedContainDistinctNamesGreaterThanThreshold")]
            TheWALLETAccountIntoWhichTheCardIsBeingProvisionedContainDistinctNamesGreaterThanThreshold = 30,

            /// <summary>
            /// Enum ThisAccountHasNotHadActivityWithinThresholdPeriod for value: thisAccountHasNotHadActivityWithinThresholdPeriod
            /// </summary>
            [EnumMember(Value = "thisAccountHasNotHadActivityWithinThresholdPeriod")]
            ThisAccountHasNotHadActivityWithinThresholdPeriod = 31,

            /// <summary>
            /// Enum TooManyDifferentCardholders for value: tooManyDifferentCardholders
            /// </summary>
            [EnumMember(Value = "tooManyDifferentCardholders")]
            TooManyDifferentCardholders = 32,

            /// <summary>
            /// Enum TooManyRecentAttempts for value: tooManyRecentAttempts
            /// </summary>
            [EnumMember(Value = "tooManyRecentAttempts")]
            TooManyRecentAttempts = 33,

            /// <summary>
            /// Enum TooManyRecentTokens for value: tooManyRecentTokens
            /// </summary>
            [EnumMember(Value = "tooManyRecentTokens")]
            TooManyRecentTokens = 34,

            /// <summary>
            /// Enum UnableToAssess for value: unableToAssess
            /// </summary>
            [EnumMember(Value = "unableToAssess")]
            UnableToAssess = 35,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 36,

            /// <summary>
            /// Enum UserAccountWasCreatedWithinThresholdDays for value: userAccountWasCreatedWithinThresholdDays
            /// </summary>
            [EnumMember(Value = "userAccountWasCreatedWithinThresholdDays")]
            UserAccountWasCreatedWithinThresholdDays = 37,

            /// <summary>
            /// Enum UserDeviceReceivingEncryptedPaymentInstrumentDataIsDifferentThanTheOneThatIsProvisioningTheToken for value: userDeviceReceivingEncryptedPaymentInstrumentDataIsDifferentThanTheOneThatIsProvisioningTheToken
            /// </summary>
            [EnumMember(Value = "userDeviceReceivingEncryptedPaymentInstrumentDataIsDifferentThanTheOneThatIsProvisioningTheToken")]
            UserDeviceReceivingEncryptedPaymentInstrumentDataIsDifferentThanTheOneThatIsProvisioningTheToken = 38,

            /// <summary>
            /// Enum UsersAccountOnDeviceLessThanThresholdDays for value: usersAccountOnDeviceLessThanThresholdDays
            /// </summary>
            [EnumMember(Value = "usersAccountOnDeviceLessThanThresholdDays")]
            UsersAccountOnDeviceLessThanThresholdDays = 39,

            /// <summary>
            /// Enum WalletAccountCreatedWithinThresholdDays for value: walletAccountCreatedWithinThresholdDays
            /// </summary>
            [EnumMember(Value = "walletAccountCreatedWithinThresholdDays")]
            WalletAccountCreatedWithinThresholdDays = 40,

            /// <summary>
            /// Enum WalletAccountHolderNameOnFileDoesNotMatchCardholderEnteredName for value: walletAccountHolderNameOnFileDoesNotMatchCardholderEnteredName
            /// </summary>
            [EnumMember(Value = "walletAccountHolderNameOnFileDoesNotMatchCardholderEnteredName")]
            WalletAccountHolderNameOnFileDoesNotMatchCardholderEnteredName = 41

        }



        /// <summary>
        /// A list of risk indicators triggered at the time of provisioning the network token.  Some example values of risk indicators are:  * **accountTooNewSinceLaunch** * **tooManyRecentAttempts** * **lowDeviceScore** * **lowAccountScore** 
        /// </summary>
        /// <value>A list of risk indicators triggered at the time of provisioning the network token.  Some example values of risk indicators are:  * **accountTooNewSinceLaunch** * **tooManyRecentAttempts** * **lowDeviceScore** * **lowAccountScore** </value>
        [DataMember(Name = "recommendationReasons", EmitDefaultValue = false)]
        public List<RecommendationReasonsEnum> RecommendationReasons { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Wallet" /> class.
        /// </summary>
        /// <param name="accountScore">The confidence score of the wallet account, calculated by the wallet provider.  A high score means that account is considered trustworthy. A low score means that the account is considered suspicious.  Possible values: **1** to **5**..</param>
        /// <param name="device">device.</param>
        /// <param name="deviceScore">The confidence score of the device, calculated by the wallet provider.  A high score means that device is considered trustworthy. A low score means that the device is considered suspicious.  Possible values: **1** to **5**..</param>
        /// <param name="provisioningMethod">The method used for provisioning the network token.  Possible values: **push**, **manual**, **cof**, **unknown**..</param>
        /// <param name="recommendationReasons">A list of risk indicators triggered at the time of provisioning the network token.  Some example values of risk indicators are:  * **accountTooNewSinceLaunch** * **tooManyRecentAttempts** * **lowDeviceScore** * **lowAccountScore** .</param>
        /// <param name="type">The type of wallet that the network token is associated with.  Possible values: **applePay**, **googlePay**, **garminPay**..</param>
        public Wallet(string accountScore = default(string), Device device = default(Device), string deviceScore = default(string), string provisioningMethod = default(string), List<RecommendationReasonsEnum> recommendationReasons = default(List<RecommendationReasonsEnum>), string type = default(string))
        {
            this.AccountScore = accountScore;
            this.Device = device;
            this.DeviceScore = deviceScore;
            this.ProvisioningMethod = provisioningMethod;
            this.RecommendationReasons = recommendationReasons;
            this.Type = type;
        }

        /// <summary>
        /// The confidence score of the wallet account, calculated by the wallet provider.  A high score means that account is considered trustworthy. A low score means that the account is considered suspicious.  Possible values: **1** to **5**.
        /// </summary>
        /// <value>The confidence score of the wallet account, calculated by the wallet provider.  A high score means that account is considered trustworthy. A low score means that the account is considered suspicious.  Possible values: **1** to **5**.</value>
        [DataMember(Name = "accountScore", EmitDefaultValue = false)]
        public string AccountScore { get; set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name = "device", EmitDefaultValue = false)]
        public Device Device { get; set; }

        /// <summary>
        /// The confidence score of the device, calculated by the wallet provider.  A high score means that device is considered trustworthy. A low score means that the device is considered suspicious.  Possible values: **1** to **5**.
        /// </summary>
        /// <value>The confidence score of the device, calculated by the wallet provider.  A high score means that device is considered trustworthy. A low score means that the device is considered suspicious.  Possible values: **1** to **5**.</value>
        [DataMember(Name = "deviceScore", EmitDefaultValue = false)]
        public string DeviceScore { get; set; }

        /// <summary>
        /// The method used for provisioning the network token.  Possible values: **push**, **manual**, **cof**, **unknown**.
        /// </summary>
        /// <value>The method used for provisioning the network token.  Possible values: **push**, **manual**, **cof**, **unknown**.</value>
        [DataMember(Name = "provisioningMethod", EmitDefaultValue = false)]
        public string ProvisioningMethod { get; set; }

        /// <summary>
        /// The type of wallet that the network token is associated with.  Possible values: **applePay**, **googlePay**, **garminPay**.
        /// </summary>
        /// <value>The type of wallet that the network token is associated with.  Possible values: **applePay**, **googlePay**, **garminPay**.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        [Obsolete("Deprecated since Configuration webhooks v2. Use name of the `tokenRequestor` instead.")]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Wallet {\n");
            sb.Append("  AccountScore: ").Append(AccountScore).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  DeviceScore: ").Append(DeviceScore).Append("\n");
            sb.Append("  ProvisioningMethod: ").Append(ProvisioningMethod).Append("\n");
            sb.Append("  RecommendationReasons: ").Append(RecommendationReasons).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Wallet);
        }

        /// <summary>
        /// Returns true if Wallet instances are equal
        /// </summary>
        /// <param name="input">Instance of Wallet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Wallet input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountScore == input.AccountScore ||
                    (this.AccountScore != null &&
                    this.AccountScore.Equals(input.AccountScore))
                ) && 
                (
                    this.Device == input.Device ||
                    (this.Device != null &&
                    this.Device.Equals(input.Device))
                ) && 
                (
                    this.DeviceScore == input.DeviceScore ||
                    (this.DeviceScore != null &&
                    this.DeviceScore.Equals(input.DeviceScore))
                ) && 
                (
                    this.ProvisioningMethod == input.ProvisioningMethod ||
                    (this.ProvisioningMethod != null &&
                    this.ProvisioningMethod.Equals(input.ProvisioningMethod))
                ) && 
                (
                    this.RecommendationReasons == input.RecommendationReasons ||
                    this.RecommendationReasons.SequenceEqual(input.RecommendationReasons)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountScore != null)
                {
                    hashCode = (hashCode * 59) + this.AccountScore.GetHashCode();
                }
                if (this.Device != null)
                {
                    hashCode = (hashCode * 59) + this.Device.GetHashCode();
                }
                if (this.DeviceScore != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceScore.GetHashCode();
                }
                if (this.ProvisioningMethod != null)
                {
                    hashCode = (hashCode * 59) + this.ProvisioningMethod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RecommendationReasons.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
