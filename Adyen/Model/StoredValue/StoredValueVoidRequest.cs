/*
* Adyen Stored Value API
*
*
* The version of the OpenAPI document: 46
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.StoredValue
{
    /// <summary>
    /// StoredValueVoidRequest
    /// </summary>
    [DataContract(Name = "StoredValueVoidRequest")]
    public partial class StoredValueVoidRequest : IEquatable<StoredValueVoidRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredValueVoidRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoredValueVoidRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredValueVoidRequest" /> class.
        /// </summary>
        /// <param name="merchantAccount">The merchant account identifier, with which you want to process the transaction. (required).</param>
        /// <param name="originalReference">The original pspReference of the payment to modify. (required).</param>
        /// <param name="reference">Your reference for the payment modification. This reference is visible in Customer Area and in reports. Maximum length: 80 characters..</param>
        /// <param name="store">The physical store, for which this payment is processed..</param>
        /// <param name="tenderReference">The reference of the tender..</param>
        /// <param name="uniqueTerminalId">The unique ID of a POS terminal..</param>
        public StoredValueVoidRequest(string merchantAccount = default(string), string originalReference = default(string), string reference = default(string), string store = default(string), string tenderReference = default(string), string uniqueTerminalId = default(string))
        {
            this.MerchantAccount = merchantAccount;
            this.OriginalReference = originalReference;
            this.Reference = reference;
            this.Store = store;
            this.TenderReference = tenderReference;
            this.UniqueTerminalId = uniqueTerminalId;
        }

        /// <summary>
        /// The merchant account identifier, with which you want to process the transaction.
        /// </summary>
        /// <value>The merchant account identifier, with which you want to process the transaction.</value>
        [DataMember(Name = "merchantAccount", IsRequired = false, EmitDefaultValue = false)]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// The original pspReference of the payment to modify.
        /// </summary>
        /// <value>The original pspReference of the payment to modify.</value>
        [DataMember(Name = "originalReference", IsRequired = false, EmitDefaultValue = false)]
        public string OriginalReference { get; set; }

        /// <summary>
        /// Your reference for the payment modification. This reference is visible in Customer Area and in reports. Maximum length: 80 characters.
        /// </summary>
        /// <value>Your reference for the payment modification. This reference is visible in Customer Area and in reports. Maximum length: 80 characters.</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// The physical store, for which this payment is processed.
        /// </summary>
        /// <value>The physical store, for which this payment is processed.</value>
        [DataMember(Name = "store", EmitDefaultValue = false)]
        public string Store { get; set; }

        /// <summary>
        /// The reference of the tender.
        /// </summary>
        /// <value>The reference of the tender.</value>
        [DataMember(Name = "tenderReference", EmitDefaultValue = false)]
        public string TenderReference { get; set; }

        /// <summary>
        /// The unique ID of a POS terminal.
        /// </summary>
        /// <value>The unique ID of a POS terminal.</value>
        [DataMember(Name = "uniqueTerminalId", EmitDefaultValue = false)]
        public string UniqueTerminalId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StoredValueVoidRequest {\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  OriginalReference: ").Append(OriginalReference).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Store: ").Append(Store).Append("\n");
            sb.Append("  TenderReference: ").Append(TenderReference).Append("\n");
            sb.Append("  UniqueTerminalId: ").Append(UniqueTerminalId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoredValueVoidRequest);
        }

        /// <summary>
        /// Returns true if StoredValueVoidRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of StoredValueVoidRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoredValueVoidRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MerchantAccount == input.MerchantAccount ||
                    (this.MerchantAccount != null &&
                    this.MerchantAccount.Equals(input.MerchantAccount))
                ) && 
                (
                    this.OriginalReference == input.OriginalReference ||
                    (this.OriginalReference != null &&
                    this.OriginalReference.Equals(input.OriginalReference))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Store == input.Store ||
                    (this.Store != null &&
                    this.Store.Equals(input.Store))
                ) && 
                (
                    this.TenderReference == input.TenderReference ||
                    (this.TenderReference != null &&
                    this.TenderReference.Equals(input.TenderReference))
                ) && 
                (
                    this.UniqueTerminalId == input.UniqueTerminalId ||
                    (this.UniqueTerminalId != null &&
                    this.UniqueTerminalId.Equals(input.UniqueTerminalId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantAccount != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantAccount.GetHashCode();
                }
                if (this.OriginalReference != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalReference.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.Store != null)
                {
                    hashCode = (hashCode * 59) + this.Store.GetHashCode();
                }
                if (this.TenderReference != null)
                {
                    hashCode = (hashCode * 59) + this.TenderReference.GetHashCode();
                }
                if (this.UniqueTerminalId != null)
                {
                    hashCode = (hashCode * 59) + this.UniqueTerminalId.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Store (string) maxLength
            if (this.Store != null && this.Store.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Store, length must be less than 16.", new [] { "Store" });
            }

            // Store (string) minLength
            if (this.Store != null && this.Store.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Store, length must be greater than 1.", new [] { "Store" });
            }

            yield break;
        }
    }

}
