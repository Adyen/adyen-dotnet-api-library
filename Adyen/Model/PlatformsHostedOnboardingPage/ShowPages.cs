/*
* Hosted onboarding API
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsHostedOnboardingPage
{
    /// <summary>
    /// ShowPages
    /// </summary>
    [DataContract(Name = "ShowPages")]
    public partial class ShowPages : IEquatable<ShowPages>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowPages" /> class.
        /// </summary>
        /// <param name="bankDetailsSummaryPage">Indicates whether the page with bank account details must be shown. Defaults to **true**..</param>
        /// <param name="bankVerificationPage">Indicates whether the bank check instant verification&#39; details must be shown. Defaults to **true**..</param>
        /// <param name="businessDetailsSummaryPage">Indicates whether the page with the company&#39;s or organization&#39;s details must be shown. Defaults to **true**..</param>
        /// <param name="checksOverviewPage">Indicates whether the checks overview page must be shown. Defaults to **false**..</param>
        /// <param name="individualDetailsSummaryPage">Indicates whether the page with the individual&#39;s details must be shown. Defaults to **true**..</param>
        /// <param name="legalArrangementsDetailsSummaryPage">Indicates whether the page with the legal arrangements&#39; details must be shown. Defaults to **true**..</param>
        /// <param name="manualBankAccountPage">Indicates whether the page to manually add bank account&#39; details must be shown. Defaults to **true**..</param>
        /// <param name="shareholderDetailsSummaryPage">Indicates whether the page with the shareholders&#39; details must be shown. Defaults to **true**..</param>
        /// <param name="welcomePage">Indicates whether the welcome page must be shown. Defaults to **false**..</param>
        public ShowPages(bool? bankDetailsSummaryPage = default(bool?), bool? bankVerificationPage = default(bool?), bool? businessDetailsSummaryPage = default(bool?), bool? checksOverviewPage = default(bool?), bool? individualDetailsSummaryPage = default(bool?), bool? legalArrangementsDetailsSummaryPage = default(bool?), bool? manualBankAccountPage = default(bool?), bool? shareholderDetailsSummaryPage = default(bool?), bool? welcomePage = default(bool?))
        {
            this.BankDetailsSummaryPage = bankDetailsSummaryPage;
            this.BankVerificationPage = bankVerificationPage;
            this.BusinessDetailsSummaryPage = businessDetailsSummaryPage;
            this.ChecksOverviewPage = checksOverviewPage;
            this.IndividualDetailsSummaryPage = individualDetailsSummaryPage;
            this.LegalArrangementsDetailsSummaryPage = legalArrangementsDetailsSummaryPage;
            this.ManualBankAccountPage = manualBankAccountPage;
            this.ShareholderDetailsSummaryPage = shareholderDetailsSummaryPage;
            this.WelcomePage = welcomePage;
        }

        /// <summary>
        /// Indicates whether the page with bank account details must be shown. Defaults to **true**.
        /// </summary>
        /// <value>Indicates whether the page with bank account details must be shown. Defaults to **true**.</value>
        [DataMember(Name = "bankDetailsSummaryPage", EmitDefaultValue = false)]
        public bool? BankDetailsSummaryPage { get; set; }

        /// <summary>
        /// Indicates whether the bank check instant verification&#39; details must be shown. Defaults to **true**.
        /// </summary>
        /// <value>Indicates whether the bank check instant verification&#39; details must be shown. Defaults to **true**.</value>
        [DataMember(Name = "bankVerificationPage", EmitDefaultValue = false)]
        public bool? BankVerificationPage { get; set; }

        /// <summary>
        /// Indicates whether the page with the company&#39;s or organization&#39;s details must be shown. Defaults to **true**.
        /// </summary>
        /// <value>Indicates whether the page with the company&#39;s or organization&#39;s details must be shown. Defaults to **true**.</value>
        [DataMember(Name = "businessDetailsSummaryPage", EmitDefaultValue = false)]
        public bool? BusinessDetailsSummaryPage { get; set; }

        /// <summary>
        /// Indicates whether the checks overview page must be shown. Defaults to **false**.
        /// </summary>
        /// <value>Indicates whether the checks overview page must be shown. Defaults to **false**.</value>
        [DataMember(Name = "checksOverviewPage", EmitDefaultValue = false)]
        public bool? ChecksOverviewPage { get; set; }

        /// <summary>
        /// Indicates whether the page with the individual&#39;s details must be shown. Defaults to **true**.
        /// </summary>
        /// <value>Indicates whether the page with the individual&#39;s details must be shown. Defaults to **true**.</value>
        [DataMember(Name = "individualDetailsSummaryPage", EmitDefaultValue = false)]
        public bool? IndividualDetailsSummaryPage { get; set; }

        /// <summary>
        /// Indicates whether the page with the legal arrangements&#39; details must be shown. Defaults to **true**.
        /// </summary>
        /// <value>Indicates whether the page with the legal arrangements&#39; details must be shown. Defaults to **true**.</value>
        [DataMember(Name = "legalArrangementsDetailsSummaryPage", EmitDefaultValue = false)]
        public bool? LegalArrangementsDetailsSummaryPage { get; set; }

        /// <summary>
        /// Indicates whether the page to manually add bank account&#39; details must be shown. Defaults to **true**.
        /// </summary>
        /// <value>Indicates whether the page to manually add bank account&#39; details must be shown. Defaults to **true**.</value>
        [DataMember(Name = "manualBankAccountPage", EmitDefaultValue = false)]
        public bool? ManualBankAccountPage { get; set; }

        /// <summary>
        /// Indicates whether the page with the shareholders&#39; details must be shown. Defaults to **true**.
        /// </summary>
        /// <value>Indicates whether the page with the shareholders&#39; details must be shown. Defaults to **true**.</value>
        [DataMember(Name = "shareholderDetailsSummaryPage", EmitDefaultValue = false)]
        public bool? ShareholderDetailsSummaryPage { get; set; }

        /// <summary>
        /// Indicates whether the welcome page must be shown. Defaults to **false**.
        /// </summary>
        /// <value>Indicates whether the welcome page must be shown. Defaults to **false**.</value>
        [DataMember(Name = "welcomePage", EmitDefaultValue = false)]
        public bool? WelcomePage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowPages {\n");
            sb.Append("  BankDetailsSummaryPage: ").Append(BankDetailsSummaryPage).Append("\n");
            sb.Append("  BankVerificationPage: ").Append(BankVerificationPage).Append("\n");
            sb.Append("  BusinessDetailsSummaryPage: ").Append(BusinessDetailsSummaryPage).Append("\n");
            sb.Append("  ChecksOverviewPage: ").Append(ChecksOverviewPage).Append("\n");
            sb.Append("  IndividualDetailsSummaryPage: ").Append(IndividualDetailsSummaryPage).Append("\n");
            sb.Append("  LegalArrangementsDetailsSummaryPage: ").Append(LegalArrangementsDetailsSummaryPage).Append("\n");
            sb.Append("  ManualBankAccountPage: ").Append(ManualBankAccountPage).Append("\n");
            sb.Append("  ShareholderDetailsSummaryPage: ").Append(ShareholderDetailsSummaryPage).Append("\n");
            sb.Append("  WelcomePage: ").Append(WelcomePage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowPages);
        }

        /// <summary>
        /// Returns true if ShowPages instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowPages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowPages input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BankDetailsSummaryPage == input.BankDetailsSummaryPage ||
                    this.BankDetailsSummaryPage.Equals(input.BankDetailsSummaryPage)
                ) && 
                (
                    this.BankVerificationPage == input.BankVerificationPage ||
                    this.BankVerificationPage.Equals(input.BankVerificationPage)
                ) && 
                (
                    this.BusinessDetailsSummaryPage == input.BusinessDetailsSummaryPage ||
                    this.BusinessDetailsSummaryPage.Equals(input.BusinessDetailsSummaryPage)
                ) && 
                (
                    this.ChecksOverviewPage == input.ChecksOverviewPage ||
                    this.ChecksOverviewPage.Equals(input.ChecksOverviewPage)
                ) && 
                (
                    this.IndividualDetailsSummaryPage == input.IndividualDetailsSummaryPage ||
                    this.IndividualDetailsSummaryPage.Equals(input.IndividualDetailsSummaryPage)
                ) && 
                (
                    this.LegalArrangementsDetailsSummaryPage == input.LegalArrangementsDetailsSummaryPage ||
                    this.LegalArrangementsDetailsSummaryPage.Equals(input.LegalArrangementsDetailsSummaryPage)
                ) && 
                (
                    this.ManualBankAccountPage == input.ManualBankAccountPage ||
                    this.ManualBankAccountPage.Equals(input.ManualBankAccountPage)
                ) && 
                (
                    this.ShareholderDetailsSummaryPage == input.ShareholderDetailsSummaryPage ||
                    this.ShareholderDetailsSummaryPage.Equals(input.ShareholderDetailsSummaryPage)
                ) && 
                (
                    this.WelcomePage == input.WelcomePage ||
                    this.WelcomePage.Equals(input.WelcomePage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BankDetailsSummaryPage.GetHashCode();
                hashCode = (hashCode * 59) + this.BankVerificationPage.GetHashCode();
                hashCode = (hashCode * 59) + this.BusinessDetailsSummaryPage.GetHashCode();
                hashCode = (hashCode * 59) + this.ChecksOverviewPage.GetHashCode();
                hashCode = (hashCode * 59) + this.IndividualDetailsSummaryPage.GetHashCode();
                hashCode = (hashCode * 59) + this.LegalArrangementsDetailsSummaryPage.GetHashCode();
                hashCode = (hashCode * 59) + this.ManualBankAccountPage.GetHashCode();
                hashCode = (hashCode * 59) + this.ShareholderDetailsSummaryPage.GetHashCode();
                hashCode = (hashCode * 59) + this.WelcomePage.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
