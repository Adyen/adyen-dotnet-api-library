/*
* Account API
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsAccount
{
    /// <summary>
    /// ViasPersonalData
    /// </summary>
    [DataContract(Name = "ViasPersonalData")]
    public partial class ViasPersonalData : IEquatable<ViasPersonalData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ViasPersonalData" /> class.
        /// </summary>
        /// <param name="dateOfBirth">The person&#39;s date of birth, in ISO-8601 YYYY-MM-DD format. For example, **2000-01-31**..</param>
        /// <param name="documentData">Array that contains information about the person&#39;s identification document. You can submit only one entry per document type..</param>
        /// <param name="nationality">The nationality of the person represented by a two-character country code,  in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **NL**. .</param>
        public ViasPersonalData(string dateOfBirth = default(string), List<PersonalDocumentData> documentData = default(List<PersonalDocumentData>), string nationality = default(string))
        {
            this.DateOfBirth = dateOfBirth;
            this.DocumentData = documentData;
            this.Nationality = nationality;
        }

        /// <summary>
        /// The person&#39;s date of birth, in ISO-8601 YYYY-MM-DD format. For example, **2000-01-31**.
        /// </summary>
        /// <value>The person&#39;s date of birth, in ISO-8601 YYYY-MM-DD format. For example, **2000-01-31**.</value>
        [DataMember(Name = "dateOfBirth", EmitDefaultValue = false)]
        public string DateOfBirth { get; set; }

        /// <summary>
        /// Array that contains information about the person&#39;s identification document. You can submit only one entry per document type.
        /// </summary>
        /// <value>Array that contains information about the person&#39;s identification document. You can submit only one entry per document type.</value>
        [DataMember(Name = "documentData", EmitDefaultValue = false)]
        public List<PersonalDocumentData> DocumentData { get; set; }

        /// <summary>
        /// The nationality of the person represented by a two-character country code,  in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **NL**. 
        /// </summary>
        /// <value>The nationality of the person represented by a two-character country code,  in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **NL**. </value>
        [DataMember(Name = "nationality", EmitDefaultValue = false)]
        public string Nationality { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ViasPersonalData {\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DocumentData: ").Append(DocumentData).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ViasPersonalData);
        }

        /// <summary>
        /// Returns true if ViasPersonalData instances are equal
        /// </summary>
        /// <param name="input">Instance of ViasPersonalData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ViasPersonalData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.DocumentData == input.DocumentData ||
                    this.DocumentData != null &&
                    input.DocumentData != null &&
                    this.DocumentData.SequenceEqual(input.DocumentData)
                ) && 
                (
                    this.Nationality == input.Nationality ||
                    (this.Nationality != null &&
                    this.Nationality.Equals(input.Nationality))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.DateOfBirth.GetHashCode();
                }
                if (this.DocumentData != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentData.GetHashCode();
                }
                if (this.Nationality != null)
                {
                    hashCode = (hashCode * 59) + this.Nationality.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Nationality (string) maxLength
            if (this.Nationality != null && this.Nationality.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nationality, length must be less than 2.", new [] { "Nationality" });
            }

            // Nationality (string) minLength
            if (this.Nationality != null && this.Nationality.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nationality, length must be greater than 2.", new [] { "Nationality" });
            }

            yield break;
        }
    }

}
