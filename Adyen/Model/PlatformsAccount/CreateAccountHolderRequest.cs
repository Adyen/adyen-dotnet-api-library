/*
* Account API
*
*
* The version of the OpenAPI document: 6
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.PlatformsAccount
{
    /// <summary>
    /// CreateAccountHolderRequest
    /// </summary>
    [DataContract(Name = "CreateAccountHolderRequest")]
    public partial class CreateAccountHolderRequest : IEquatable<CreateAccountHolderRequest>, IValidatableObject
    {
        /// <summary>
        /// The legal entity type of the account holder. This determines the information that should be provided in the request.  Possible values: **Business**, **Individual**, or **NonProfit**.  * If set to **Business** or **NonProfit**, then &#x60;accountHolderDetails.businessDetails&#x60; must be provided, with at least one entry in the &#x60;accountHolderDetails.businessDetails.shareholders&#x60; list.  * If set to **Individual**, then &#x60;accountHolderDetails.individualDetails&#x60; must be provided.
        /// </summary>
        /// <value>The legal entity type of the account holder. This determines the information that should be provided in the request.  Possible values: **Business**, **Individual**, or **NonProfit**.  * If set to **Business** or **NonProfit**, then &#x60;accountHolderDetails.businessDetails&#x60; must be provided, with at least one entry in the &#x60;accountHolderDetails.businessDetails.shareholders&#x60; list.  * If set to **Individual**, then &#x60;accountHolderDetails.individualDetails&#x60; must be provided.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LegalEntityEnum
        {
            /// <summary>
            /// Enum Business for value: Business
            /// </summary>
            [EnumMember(Value = "Business")]
            Business = 1,

            /// <summary>
            /// Enum Individual for value: Individual
            /// </summary>
            [EnumMember(Value = "Individual")]
            Individual = 2,

            /// <summary>
            /// Enum NonProfit for value: NonProfit
            /// </summary>
            [EnumMember(Value = "NonProfit")]
            NonProfit = 3,

            /// <summary>
            /// Enum Partnership for value: Partnership
            /// </summary>
            [EnumMember(Value = "Partnership")]
            Partnership = 4,

            /// <summary>
            /// Enum PublicCompany for value: PublicCompany
            /// </summary>
            [EnumMember(Value = "PublicCompany")]
            PublicCompany = 5

        }


        /// <summary>
        /// The legal entity type of the account holder. This determines the information that should be provided in the request.  Possible values: **Business**, **Individual**, or **NonProfit**.  * If set to **Business** or **NonProfit**, then &#x60;accountHolderDetails.businessDetails&#x60; must be provided, with at least one entry in the &#x60;accountHolderDetails.businessDetails.shareholders&#x60; list.  * If set to **Individual**, then &#x60;accountHolderDetails.individualDetails&#x60; must be provided.
        /// </summary>
        /// <value>The legal entity type of the account holder. This determines the information that should be provided in the request.  Possible values: **Business**, **Individual**, or **NonProfit**.  * If set to **Business** or **NonProfit**, then &#x60;accountHolderDetails.businessDetails&#x60; must be provided, with at least one entry in the &#x60;accountHolderDetails.businessDetails.shareholders&#x60; list.  * If set to **Individual**, then &#x60;accountHolderDetails.individualDetails&#x60; must be provided.</value>
        [DataMember(Name = "legalEntity", IsRequired = false, EmitDefaultValue = false)]
        public LegalEntityEnum LegalEntity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAccountHolderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAccountHolderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAccountHolderRequest" /> class.
        /// </summary>
        /// <param name="accountHolderCode">Your unique identifier for the prospective account holder. The length must be between three (3) and fifty (50) characters long. Only letters, digits, and hyphens (-) are allowed. (required).</param>
        /// <param name="accountHolderDetails">accountHolderDetails (required).</param>
        /// <param name="createDefaultAccount">If set to **true**, an account with the default options is automatically created for the account holder. By default, this field is set to **true**..</param>
        /// <param name="description">A description of the prospective account holder, maximum 256 characters. You can use alphanumeric characters (A-Z, a-z, 0-9), white spaces, and underscores &#x60;_&#x60;..</param>
        /// <param name="legalEntity">The legal entity type of the account holder. This determines the information that should be provided in the request.  Possible values: **Business**, **Individual**, or **NonProfit**.  * If set to **Business** or **NonProfit**, then &#x60;accountHolderDetails.businessDetails&#x60; must be provided, with at least one entry in the &#x60;accountHolderDetails.businessDetails.shareholders&#x60; list.  * If set to **Individual**, then &#x60;accountHolderDetails.individualDetails&#x60; must be provided. (required).</param>
        /// <param name="primaryCurrency">The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes), with which the prospective account holder primarily deals..</param>
        /// <param name="processingTier">The starting [processing tier](https://docs.adyen.com/marketplaces-and-platforms/classic/onboarding-and-verification/precheck-kyc-information) for the prospective account holder..</param>
        /// <param name="verificationProfile">The identifier of the profile that applies to this entity..</param>
        public CreateAccountHolderRequest(string accountHolderCode = default(string), AccountHolderDetails accountHolderDetails = default(AccountHolderDetails), bool? createDefaultAccount = default(bool?), string description = default(string), LegalEntityEnum legalEntity = default(LegalEntityEnum), string primaryCurrency = default(string), int? processingTier = default(int?), string verificationProfile = default(string))
        {
            this.AccountHolderCode = accountHolderCode;
            this.AccountHolderDetails = accountHolderDetails;
            this.LegalEntity = legalEntity;
            this.CreateDefaultAccount = createDefaultAccount;
            this.Description = description;
            this.PrimaryCurrency = primaryCurrency;
            this.ProcessingTier = processingTier;
            this.VerificationProfile = verificationProfile;
        }

        /// <summary>
        /// Your unique identifier for the prospective account holder. The length must be between three (3) and fifty (50) characters long. Only letters, digits, and hyphens (-) are allowed.
        /// </summary>
        /// <value>Your unique identifier for the prospective account holder. The length must be between three (3) and fifty (50) characters long. Only letters, digits, and hyphens (-) are allowed.</value>
        [DataMember(Name = "accountHolderCode", IsRequired = false, EmitDefaultValue = false)]
        public string AccountHolderCode { get; set; }

        /// <summary>
        /// Gets or Sets AccountHolderDetails
        /// </summary>
        [DataMember(Name = "accountHolderDetails", IsRequired = false, EmitDefaultValue = false)]
        public AccountHolderDetails AccountHolderDetails { get; set; }

        /// <summary>
        /// If set to **true**, an account with the default options is automatically created for the account holder. By default, this field is set to **true**.
        /// </summary>
        /// <value>If set to **true**, an account with the default options is automatically created for the account holder. By default, this field is set to **true**.</value>
        [DataMember(Name = "createDefaultAccount", EmitDefaultValue = false)]
        public bool? CreateDefaultAccount { get; set; }

        /// <summary>
        /// A description of the prospective account holder, maximum 256 characters. You can use alphanumeric characters (A-Z, a-z, 0-9), white spaces, and underscores &#x60;_&#x60;.
        /// </summary>
        /// <value>A description of the prospective account holder, maximum 256 characters. You can use alphanumeric characters (A-Z, a-z, 0-9), white spaces, and underscores &#x60;_&#x60;.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes), with which the prospective account holder primarily deals.
        /// </summary>
        /// <value>The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes), with which the prospective account holder primarily deals.</value>
        [DataMember(Name = "primaryCurrency", EmitDefaultValue = false)]
        [Obsolete]
        public string PrimaryCurrency { get; set; }

        /// <summary>
        /// The starting [processing tier](https://docs.adyen.com/marketplaces-and-platforms/classic/onboarding-and-verification/precheck-kyc-information) for the prospective account holder.
        /// </summary>
        /// <value>The starting [processing tier](https://docs.adyen.com/marketplaces-and-platforms/classic/onboarding-and-verification/precheck-kyc-information) for the prospective account holder.</value>
        [DataMember(Name = "processingTier", EmitDefaultValue = false)]
        public int? ProcessingTier { get; set; }

        /// <summary>
        /// The identifier of the profile that applies to this entity.
        /// </summary>
        /// <value>The identifier of the profile that applies to this entity.</value>
        [DataMember(Name = "verificationProfile", EmitDefaultValue = false)]
        public string VerificationProfile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAccountHolderRequest {\n");
            sb.Append("  AccountHolderCode: ").Append(AccountHolderCode).Append("\n");
            sb.Append("  AccountHolderDetails: ").Append(AccountHolderDetails).Append("\n");
            sb.Append("  CreateDefaultAccount: ").Append(CreateDefaultAccount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LegalEntity: ").Append(LegalEntity).Append("\n");
            sb.Append("  PrimaryCurrency: ").Append(PrimaryCurrency).Append("\n");
            sb.Append("  ProcessingTier: ").Append(ProcessingTier).Append("\n");
            sb.Append("  VerificationProfile: ").Append(VerificationProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAccountHolderRequest);
        }

        /// <summary>
        /// Returns true if CreateAccountHolderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAccountHolderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAccountHolderRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountHolderCode == input.AccountHolderCode ||
                    (this.AccountHolderCode != null &&
                    this.AccountHolderCode.Equals(input.AccountHolderCode))
                ) && 
                (
                    this.AccountHolderDetails == input.AccountHolderDetails ||
                    (this.AccountHolderDetails != null &&
                    this.AccountHolderDetails.Equals(input.AccountHolderDetails))
                ) && 
                (
                    this.CreateDefaultAccount == input.CreateDefaultAccount ||
                    this.CreateDefaultAccount.Equals(input.CreateDefaultAccount)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LegalEntity == input.LegalEntity ||
                    this.LegalEntity.Equals(input.LegalEntity)
                ) && 
                (
                    this.PrimaryCurrency == input.PrimaryCurrency ||
                    (this.PrimaryCurrency != null &&
                    this.PrimaryCurrency.Equals(input.PrimaryCurrency))
                ) && 
                (
                    this.ProcessingTier == input.ProcessingTier ||
                    this.ProcessingTier.Equals(input.ProcessingTier)
                ) && 
                (
                    this.VerificationProfile == input.VerificationProfile ||
                    (this.VerificationProfile != null &&
                    this.VerificationProfile.Equals(input.VerificationProfile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountHolderCode != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolderCode.GetHashCode();
                }
                if (this.AccountHolderDetails != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolderDetails.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreateDefaultAccount.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LegalEntity.GetHashCode();
                if (this.PrimaryCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryCurrency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProcessingTier.GetHashCode();
                if (this.VerificationProfile != null)
                {
                    hashCode = (hashCode * 59) + this.VerificationProfile.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
