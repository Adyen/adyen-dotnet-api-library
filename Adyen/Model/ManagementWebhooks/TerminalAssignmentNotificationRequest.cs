/*
* Management Webhooks
*
*
* The version of the OpenAPI document: 3
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.ManagementWebhooks
{
    /// <summary>
    /// TerminalAssignmentNotificationRequest
    /// </summary>
    [DataContract(Name = "TerminalAssignmentNotificationRequest")]
    public partial class TerminalAssignmentNotificationRequest : IEquatable<TerminalAssignmentNotificationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalAssignmentNotificationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TerminalAssignmentNotificationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalAssignmentNotificationRequest" /> class.
        /// </summary>
        /// <param name="assignedToAccount">The unique identifier of the merchant/company account to which the terminal is assigned. (required).</param>
        /// <param name="assignedToStore">The unique identifier of the store to which the terminal is assigned..</param>
        /// <param name="eventDate">The date and time when an event has been completed. (required).</param>
        /// <param name="pspReference">The PSP reference of the request from which the notification originates. (required).</param>
        /// <param name="uniqueTerminalId">The unique identifier of the terminal. (required).</param>
        public TerminalAssignmentNotificationRequest(string assignedToAccount = default(string), string assignedToStore = default(string), string eventDate = default(string), string pspReference = default(string), string uniqueTerminalId = default(string))
        {
            this.AssignedToAccount = assignedToAccount;
            this.EventDate = eventDate;
            this.PspReference = pspReference;
            this.UniqueTerminalId = uniqueTerminalId;
            this.AssignedToStore = assignedToStore;
        }

        /// <summary>
        /// The unique identifier of the merchant/company account to which the terminal is assigned.
        /// </summary>
        /// <value>The unique identifier of the merchant/company account to which the terminal is assigned.</value>
        [DataMember(Name = "assignedToAccount", IsRequired = false, EmitDefaultValue = false)]
        public string AssignedToAccount { get; set; }

        /// <summary>
        /// The unique identifier of the store to which the terminal is assigned.
        /// </summary>
        /// <value>The unique identifier of the store to which the terminal is assigned.</value>
        [DataMember(Name = "assignedToStore", EmitDefaultValue = false)]
        public string AssignedToStore { get; set; }

        /// <summary>
        /// The date and time when an event has been completed.
        /// </summary>
        /// <value>The date and time when an event has been completed.</value>
        [DataMember(Name = "eventDate", IsRequired = false, EmitDefaultValue = false)]
        public string EventDate { get; set; }

        /// <summary>
        /// The PSP reference of the request from which the notification originates.
        /// </summary>
        /// <value>The PSP reference of the request from which the notification originates.</value>
        [DataMember(Name = "pspReference", IsRequired = false, EmitDefaultValue = false)]
        public string PspReference { get; set; }

        /// <summary>
        /// The unique identifier of the terminal.
        /// </summary>
        /// <value>The unique identifier of the terminal.</value>
        [DataMember(Name = "uniqueTerminalId", IsRequired = false, EmitDefaultValue = false)]
        public string UniqueTerminalId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TerminalAssignmentNotificationRequest {\n");
            sb.Append("  AssignedToAccount: ").Append(AssignedToAccount).Append("\n");
            sb.Append("  AssignedToStore: ").Append(AssignedToStore).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  UniqueTerminalId: ").Append(UniqueTerminalId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TerminalAssignmentNotificationRequest);
        }

        /// <summary>
        /// Returns true if TerminalAssignmentNotificationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TerminalAssignmentNotificationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TerminalAssignmentNotificationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AssignedToAccount == input.AssignedToAccount ||
                    (this.AssignedToAccount != null &&
                    this.AssignedToAccount.Equals(input.AssignedToAccount))
                ) && 
                (
                    this.AssignedToStore == input.AssignedToStore ||
                    (this.AssignedToStore != null &&
                    this.AssignedToStore.Equals(input.AssignedToStore))
                ) && 
                (
                    this.EventDate == input.EventDate ||
                    (this.EventDate != null &&
                    this.EventDate.Equals(input.EventDate))
                ) && 
                (
                    this.PspReference == input.PspReference ||
                    (this.PspReference != null &&
                    this.PspReference.Equals(input.PspReference))
                ) && 
                (
                    this.UniqueTerminalId == input.UniqueTerminalId ||
                    (this.UniqueTerminalId != null &&
                    this.UniqueTerminalId.Equals(input.UniqueTerminalId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssignedToAccount != null)
                {
                    hashCode = (hashCode * 59) + this.AssignedToAccount.GetHashCode();
                }
                if (this.AssignedToStore != null)
                {
                    hashCode = (hashCode * 59) + this.AssignedToStore.GetHashCode();
                }
                if (this.EventDate != null)
                {
                    hashCode = (hashCode * 59) + this.EventDate.GetHashCode();
                }
                if (this.PspReference != null)
                {
                    hashCode = (hashCode * 59) + this.PspReference.GetHashCode();
                }
                if (this.UniqueTerminalId != null)
                {
                    hashCode = (hashCode * 59) + this.UniqueTerminalId.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
