/*
* Transfers API
*
*
* The version of the OpenAPI document: 4
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Transfers
{
    /// <summary>
    /// CapitalGrantInfo
    /// </summary>
    [DataContract(Name = "CapitalGrantInfo")]
    public partial class CapitalGrantInfo : IEquatable<CapitalGrantInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CapitalGrantInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CapitalGrantInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CapitalGrantInfo" /> class.
        /// </summary>
        /// <param name="counterparty">counterparty.</param>
        /// <param name="grantAccountId">The identifier of the grant account used for the grant. (required).</param>
        /// <param name="grantOfferId">The identifier of the grant offer that has been selected and from which the grant details will be used. (required).</param>
        public CapitalGrantInfo(Counterparty counterparty = default(Counterparty), string grantAccountId = default(string), string grantOfferId = default(string))
        {
            this.GrantAccountId = grantAccountId;
            this.GrantOfferId = grantOfferId;
            this.Counterparty = counterparty;
        }

        /// <summary>
        /// Gets or Sets Counterparty
        /// </summary>
        [DataMember(Name = "counterparty", EmitDefaultValue = false)]
        public Counterparty Counterparty { get; set; }

        /// <summary>
        /// The identifier of the grant account used for the grant.
        /// </summary>
        /// <value>The identifier of the grant account used for the grant.</value>
        [DataMember(Name = "grantAccountId", IsRequired = false, EmitDefaultValue = false)]
        public string GrantAccountId { get; set; }

        /// <summary>
        /// The identifier of the grant offer that has been selected and from which the grant details will be used.
        /// </summary>
        /// <value>The identifier of the grant offer that has been selected and from which the grant details will be used.</value>
        [DataMember(Name = "grantOfferId", IsRequired = false, EmitDefaultValue = false)]
        public string GrantOfferId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CapitalGrantInfo {\n");
            sb.Append("  Counterparty: ").Append(Counterparty).Append("\n");
            sb.Append("  GrantAccountId: ").Append(GrantAccountId).Append("\n");
            sb.Append("  GrantOfferId: ").Append(GrantOfferId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CapitalGrantInfo);
        }

        /// <summary>
        /// Returns true if CapitalGrantInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CapitalGrantInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CapitalGrantInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Counterparty == input.Counterparty ||
                    (this.Counterparty != null &&
                    this.Counterparty.Equals(input.Counterparty))
                ) && 
                (
                    this.GrantAccountId == input.GrantAccountId ||
                    (this.GrantAccountId != null &&
                    this.GrantAccountId.Equals(input.GrantAccountId))
                ) && 
                (
                    this.GrantOfferId == input.GrantOfferId ||
                    (this.GrantOfferId != null &&
                    this.GrantOfferId.Equals(input.GrantOfferId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Counterparty != null)
                {
                    hashCode = (hashCode * 59) + this.Counterparty.GetHashCode();
                }
                if (this.GrantAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.GrantAccountId.GetHashCode();
                }
                if (this.GrantOfferId != null)
                {
                    hashCode = (hashCode * 59) + this.GrantOfferId.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
