/*
* Transfers API
*
*
* The version of the OpenAPI document: 4
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Transfers
{
    /// <summary>
    /// TransactionRulesResult
    /// </summary>
    [DataContract(Name = "TransactionRulesResult")]
    public partial class TransactionRulesResult : IEquatable<TransactionRulesResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRulesResult" /> class.
        /// </summary>
        /// <param name="advice">The advice given by the Risk analysis..</param>
        /// <param name="allHardBlockRulesPassed">Indicates whether the transaction passed the evaluation for all hardblock rules.</param>
        /// <param name="score">The score of the Risk analysis..</param>
        /// <param name="triggeredTransactionRules">Array containing all the transaction rules that the transaction triggered..</param>
        public TransactionRulesResult(string advice = default(string), bool? allHardBlockRulesPassed = default(bool?), int? score = default(int?), List<TransactionEventViolation> triggeredTransactionRules = default(List<TransactionEventViolation>))
        {
            this.Advice = advice;
            this.AllHardBlockRulesPassed = allHardBlockRulesPassed;
            this.Score = score;
            this.TriggeredTransactionRules = triggeredTransactionRules;
        }

        /// <summary>
        /// The advice given by the Risk analysis.
        /// </summary>
        /// <value>The advice given by the Risk analysis.</value>
        [DataMember(Name = "advice", EmitDefaultValue = false)]
        public string Advice { get; set; }

        /// <summary>
        /// Indicates whether the transaction passed the evaluation for all hardblock rules
        /// </summary>
        /// <value>Indicates whether the transaction passed the evaluation for all hardblock rules</value>
        [DataMember(Name = "allHardBlockRulesPassed", EmitDefaultValue = false)]
        public bool? AllHardBlockRulesPassed { get; set; }

        /// <summary>
        /// The score of the Risk analysis.
        /// </summary>
        /// <value>The score of the Risk analysis.</value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public int? Score { get; set; }

        /// <summary>
        /// Array containing all the transaction rules that the transaction triggered.
        /// </summary>
        /// <value>Array containing all the transaction rules that the transaction triggered.</value>
        [DataMember(Name = "triggeredTransactionRules", EmitDefaultValue = false)]
        public List<TransactionEventViolation> TriggeredTransactionRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionRulesResult {\n");
            sb.Append("  Advice: ").Append(Advice).Append("\n");
            sb.Append("  AllHardBlockRulesPassed: ").Append(AllHardBlockRulesPassed).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  TriggeredTransactionRules: ").Append(TriggeredTransactionRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionRulesResult);
        }

        /// <summary>
        /// Returns true if TransactionRulesResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionRulesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionRulesResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Advice == input.Advice ||
                    (this.Advice != null &&
                    this.Advice.Equals(input.Advice))
                ) && 
                (
                    this.AllHardBlockRulesPassed == input.AllHardBlockRulesPassed ||
                    this.AllHardBlockRulesPassed.Equals(input.AllHardBlockRulesPassed)
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.TriggeredTransactionRules == input.TriggeredTransactionRules ||
                    this.TriggeredTransactionRules != null &&
                    input.TriggeredTransactionRules != null &&
                    this.TriggeredTransactionRules.SequenceEqual(input.TriggeredTransactionRules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Advice != null)
                {
                    hashCode = (hashCode * 59) + this.Advice.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllHardBlockRulesPassed.GetHashCode();
                hashCode = (hashCode * 59) + this.Score.GetHashCode();
                if (this.TriggeredTransactionRules != null)
                {
                    hashCode = (hashCode * 59) + this.TriggeredTransactionRules.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
