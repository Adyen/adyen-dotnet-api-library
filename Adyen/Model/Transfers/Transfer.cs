/*
* Transfers API
*
*
* The version of the OpenAPI document: 3
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Transfers
{
    /// <summary>
    /// Transfer
    /// </summary>
    [DataContract(Name = "Transfer")]
    public partial class Transfer : IEquatable<Transfer>, IValidatableObject
    {
        /// <summary>
        /// The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.
        /// </summary>
        /// <value>The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum Bank for value: bank
            /// </summary>
            [EnumMember(Value = "bank")]
            Bank = 1,

            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 2,

            /// <summary>
            /// Enum IssuedCard for value: issuedCard
            /// </summary>
            [EnumMember(Value = "issuedCard")]
            IssuedCard = 3,

            /// <summary>
            /// Enum PlatformPayment for value: platformPayment
            /// </summary>
            [EnumMember(Value = "platformPayment")]
            PlatformPayment = 4

        }


        /// <summary>
        /// The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.
        /// </summary>
        /// <value>The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.</value>
        [DataMember(Name = "category", IsRequired = false, EmitDefaultValue = false)]
        public CategoryEnum Category { get; set; }
        /// <summary>
        /// The direction of the transfer.  Possible values: **incoming**, **outgoing**.
        /// </summary>
        /// <value>The direction of the transfer.  Possible values: **incoming**, **outgoing**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum Incoming for value: incoming
            /// </summary>
            [EnumMember(Value = "incoming")]
            Incoming = 1,

            /// <summary>
            /// Enum Outgoing for value: outgoing
            /// </summary>
            [EnumMember(Value = "outgoing")]
            Outgoing = 2

        }


        /// <summary>
        /// The direction of the transfer.  Possible values: **incoming**, **outgoing**.
        /// </summary>
        /// <value>The direction of the transfer.  Possible values: **incoming**, **outgoing**.</value>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with &#x60;category&#x60; **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).
        /// </summary>
        /// <value>The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with &#x60;category&#x60; **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum CrossBorder for value: crossBorder
            /// </summary>
            [EnumMember(Value = "crossBorder")]
            CrossBorder = 1,

            /// <summary>
            /// Enum DirectDebit for value: directDebit
            /// </summary>
            [EnumMember(Value = "directDebit")]
            DirectDebit = 2,

            /// <summary>
            /// Enum Fast for value: fast
            /// </summary>
            [EnumMember(Value = "fast")]
            Fast = 3,

            /// <summary>
            /// Enum Instant for value: instant
            /// </summary>
            [EnumMember(Value = "instant")]
            Instant = 4,

            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 5,

            /// <summary>
            /// Enum Regular for value: regular
            /// </summary>
            [EnumMember(Value = "regular")]
            Regular = 6,

            /// <summary>
            /// Enum Wire for value: wire
            /// </summary>
            [EnumMember(Value = "wire")]
            Wire = 7

        }


        /// <summary>
        /// The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with &#x60;category&#x60; **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).
        /// </summary>
        /// <value>The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with &#x60;category&#x60; **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Additional information about the status of the transfer.
        /// </summary>
        /// <value>Additional information about the status of the transfer.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum AmountLimitExceeded for value: amountLimitExceeded
            /// </summary>
            [EnumMember(Value = "amountLimitExceeded")]
            AmountLimitExceeded = 1,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved = 2,

            /// <summary>
            /// Enum CounterpartyAccountBlocked for value: counterpartyAccountBlocked
            /// </summary>
            [EnumMember(Value = "counterpartyAccountBlocked")]
            CounterpartyAccountBlocked = 3,

            /// <summary>
            /// Enum CounterpartyAccountClosed for value: counterpartyAccountClosed
            /// </summary>
            [EnumMember(Value = "counterpartyAccountClosed")]
            CounterpartyAccountClosed = 4,

            /// <summary>
            /// Enum CounterpartyAccountNotFound for value: counterpartyAccountNotFound
            /// </summary>
            [EnumMember(Value = "counterpartyAccountNotFound")]
            CounterpartyAccountNotFound = 5,

            /// <summary>
            /// Enum CounterpartyAddressRequired for value: counterpartyAddressRequired
            /// </summary>
            [EnumMember(Value = "counterpartyAddressRequired")]
            CounterpartyAddressRequired = 6,

            /// <summary>
            /// Enum CounterpartyBankTimedOut for value: counterpartyBankTimedOut
            /// </summary>
            [EnumMember(Value = "counterpartyBankTimedOut")]
            CounterpartyBankTimedOut = 7,

            /// <summary>
            /// Enum CounterpartyBankUnavailable for value: counterpartyBankUnavailable
            /// </summary>
            [EnumMember(Value = "counterpartyBankUnavailable")]
            CounterpartyBankUnavailable = 8,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 9,

            /// <summary>
            /// Enum NotEnoughBalance for value: notEnoughBalance
            /// </summary>
            [EnumMember(Value = "notEnoughBalance")]
            NotEnoughBalance = 10,

            /// <summary>
            /// Enum RefusedByCounterpartyBank for value: refusedByCounterpartyBank
            /// </summary>
            [EnumMember(Value = "refusedByCounterpartyBank")]
            RefusedByCounterpartyBank = 11,

            /// <summary>
            /// Enum RouteNotFound for value: routeNotFound
            /// </summary>
            [EnumMember(Value = "routeNotFound")]
            RouteNotFound = 12,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 13

        }


        /// <summary>
        /// Additional information about the status of the transfer.
        /// </summary>
        /// <value>Additional information about the status of the transfer.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// The result of the transfer.   For example, **authorised**, **refused**, or **error**.
        /// </summary>
        /// <value>The result of the transfer.   For example, **authorised**, **refused**, or **error**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ApprovalPending for value: approvalPending
            /// </summary>
            [EnumMember(Value = "approvalPending")]
            ApprovalPending = 1,

            /// <summary>
            /// Enum AtmWithdrawal for value: atmWithdrawal
            /// </summary>
            [EnumMember(Value = "atmWithdrawal")]
            AtmWithdrawal = 2,

            /// <summary>
            /// Enum AtmWithdrawalReversalPending for value: atmWithdrawalReversalPending
            /// </summary>
            [EnumMember(Value = "atmWithdrawalReversalPending")]
            AtmWithdrawalReversalPending = 3,

            /// <summary>
            /// Enum AtmWithdrawalReversed for value: atmWithdrawalReversed
            /// </summary>
            [EnumMember(Value = "atmWithdrawalReversed")]
            AtmWithdrawalReversed = 4,

            /// <summary>
            /// Enum AuthAdjustmentAuthorised for value: authAdjustmentAuthorised
            /// </summary>
            [EnumMember(Value = "authAdjustmentAuthorised")]
            AuthAdjustmentAuthorised = 5,

            /// <summary>
            /// Enum AuthAdjustmentError for value: authAdjustmentError
            /// </summary>
            [EnumMember(Value = "authAdjustmentError")]
            AuthAdjustmentError = 6,

            /// <summary>
            /// Enum AuthAdjustmentRefused for value: authAdjustmentRefused
            /// </summary>
            [EnumMember(Value = "authAdjustmentRefused")]
            AuthAdjustmentRefused = 7,

            /// <summary>
            /// Enum Authorised for value: authorised
            /// </summary>
            [EnumMember(Value = "authorised")]
            Authorised = 8,

            /// <summary>
            /// Enum BankTransfer for value: bankTransfer
            /// </summary>
            [EnumMember(Value = "bankTransfer")]
            BankTransfer = 9,

            /// <summary>
            /// Enum BankTransferPending for value: bankTransferPending
            /// </summary>
            [EnumMember(Value = "bankTransferPending")]
            BankTransferPending = 10,

            /// <summary>
            /// Enum Booked for value: booked
            /// </summary>
            [EnumMember(Value = "booked")]
            Booked = 11,

            /// <summary>
            /// Enum BookingPending for value: bookingPending
            /// </summary>
            [EnumMember(Value = "bookingPending")]
            BookingPending = 12,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 13,

            /// <summary>
            /// Enum CapturePending for value: capturePending
            /// </summary>
            [EnumMember(Value = "capturePending")]
            CapturePending = 14,

            /// <summary>
            /// Enum CaptureReversalPending for value: captureReversalPending
            /// </summary>
            [EnumMember(Value = "captureReversalPending")]
            CaptureReversalPending = 15,

            /// <summary>
            /// Enum CaptureReversed for value: captureReversed
            /// </summary>
            [EnumMember(Value = "captureReversed")]
            CaptureReversed = 16,

            /// <summary>
            /// Enum Captured for value: captured
            /// </summary>
            [EnumMember(Value = "captured")]
            Captured = 17,

            /// <summary>
            /// Enum Chargeback for value: chargeback
            /// </summary>
            [EnumMember(Value = "chargeback")]
            Chargeback = 18,

            /// <summary>
            /// Enum ChargebackPending for value: chargebackPending
            /// </summary>
            [EnumMember(Value = "chargebackPending")]
            ChargebackPending = 19,

            /// <summary>
            /// Enum ChargebackReversalPending for value: chargebackReversalPending
            /// </summary>
            [EnumMember(Value = "chargebackReversalPending")]
            ChargebackReversalPending = 20,

            /// <summary>
            /// Enum ChargebackReversed for value: chargebackReversed
            /// </summary>
            [EnumMember(Value = "chargebackReversed")]
            ChargebackReversed = 21,

            /// <summary>
            /// Enum Credited for value: credited
            /// </summary>
            [EnumMember(Value = "credited")]
            Credited = 22,

            /// <summary>
            /// Enum DepositCorrection for value: depositCorrection
            /// </summary>
            [EnumMember(Value = "depositCorrection")]
            DepositCorrection = 23,

            /// <summary>
            /// Enum DepositCorrectionPending for value: depositCorrectionPending
            /// </summary>
            [EnumMember(Value = "depositCorrectionPending")]
            DepositCorrectionPending = 24,

            /// <summary>
            /// Enum Dispute for value: dispute
            /// </summary>
            [EnumMember(Value = "dispute")]
            Dispute = 25,

            /// <summary>
            /// Enum DisputeClosed for value: disputeClosed
            /// </summary>
            [EnumMember(Value = "disputeClosed")]
            DisputeClosed = 26,

            /// <summary>
            /// Enum DisputeExpired for value: disputeExpired
            /// </summary>
            [EnumMember(Value = "disputeExpired")]
            DisputeExpired = 27,

            /// <summary>
            /// Enum DisputeNeedsReview for value: disputeNeedsReview
            /// </summary>
            [EnumMember(Value = "disputeNeedsReview")]
            DisputeNeedsReview = 28,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 29,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 30,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 31,

            /// <summary>
            /// Enum Fee for value: fee
            /// </summary>
            [EnumMember(Value = "fee")]
            Fee = 32,

            /// <summary>
            /// Enum FeePending for value: feePending
            /// </summary>
            [EnumMember(Value = "feePending")]
            FeePending = 33,

            /// <summary>
            /// Enum InternalTransfer for value: internalTransfer
            /// </summary>
            [EnumMember(Value = "internalTransfer")]
            InternalTransfer = 34,

            /// <summary>
            /// Enum InternalTransferPending for value: internalTransferPending
            /// </summary>
            [EnumMember(Value = "internalTransferPending")]
            InternalTransferPending = 35,

            /// <summary>
            /// Enum InvoiceDeduction for value: invoiceDeduction
            /// </summary>
            [EnumMember(Value = "invoiceDeduction")]
            InvoiceDeduction = 36,

            /// <summary>
            /// Enum InvoiceDeductionPending for value: invoiceDeductionPending
            /// </summary>
            [EnumMember(Value = "invoiceDeductionPending")]
            InvoiceDeductionPending = 37,

            /// <summary>
            /// Enum ManualCorrectionPending for value: manualCorrectionPending
            /// </summary>
            [EnumMember(Value = "manualCorrectionPending")]
            ManualCorrectionPending = 38,

            /// <summary>
            /// Enum ManuallyCorrected for value: manuallyCorrected
            /// </summary>
            [EnumMember(Value = "manuallyCorrected")]
            ManuallyCorrected = 39,

            /// <summary>
            /// Enum MatchedStatement for value: matchedStatement
            /// </summary>
            [EnumMember(Value = "matchedStatement")]
            MatchedStatement = 40,

            /// <summary>
            /// Enum MatchedStatementPending for value: matchedStatementPending
            /// </summary>
            [EnumMember(Value = "matchedStatementPending")]
            MatchedStatementPending = 41,

            /// <summary>
            /// Enum MerchantPayin for value: merchantPayin
            /// </summary>
            [EnumMember(Value = "merchantPayin")]
            MerchantPayin = 42,

            /// <summary>
            /// Enum MerchantPayinPending for value: merchantPayinPending
            /// </summary>
            [EnumMember(Value = "merchantPayinPending")]
            MerchantPayinPending = 43,

            /// <summary>
            /// Enum MerchantPayinReversed for value: merchantPayinReversed
            /// </summary>
            [EnumMember(Value = "merchantPayinReversed")]
            MerchantPayinReversed = 44,

            /// <summary>
            /// Enum MerchantPayinReversedPending for value: merchantPayinReversedPending
            /// </summary>
            [EnumMember(Value = "merchantPayinReversedPending")]
            MerchantPayinReversedPending = 45,

            /// <summary>
            /// Enum MiscCost for value: miscCost
            /// </summary>
            [EnumMember(Value = "miscCost")]
            MiscCost = 46,

            /// <summary>
            /// Enum MiscCostPending for value: miscCostPending
            /// </summary>
            [EnumMember(Value = "miscCostPending")]
            MiscCostPending = 47,

            /// <summary>
            /// Enum PaymentCost for value: paymentCost
            /// </summary>
            [EnumMember(Value = "paymentCost")]
            PaymentCost = 48,

            /// <summary>
            /// Enum PaymentCostPending for value: paymentCostPending
            /// </summary>
            [EnumMember(Value = "paymentCostPending")]
            PaymentCostPending = 49,

            /// <summary>
            /// Enum Received for value: received
            /// </summary>
            [EnumMember(Value = "received")]
            Received = 50,

            /// <summary>
            /// Enum RefundPending for value: refundPending
            /// </summary>
            [EnumMember(Value = "refundPending")]
            RefundPending = 51,

            /// <summary>
            /// Enum RefundReversalPending for value: refundReversalPending
            /// </summary>
            [EnumMember(Value = "refundReversalPending")]
            RefundReversalPending = 52,

            /// <summary>
            /// Enum RefundReversed for value: refundReversed
            /// </summary>
            [EnumMember(Value = "refundReversed")]
            RefundReversed = 53,

            /// <summary>
            /// Enum Refunded for value: refunded
            /// </summary>
            [EnumMember(Value = "refunded")]
            Refunded = 54,

            /// <summary>
            /// Enum Refused for value: refused
            /// </summary>
            [EnumMember(Value = "refused")]
            Refused = 55,

            /// <summary>
            /// Enum ReserveAdjustment for value: reserveAdjustment
            /// </summary>
            [EnumMember(Value = "reserveAdjustment")]
            ReserveAdjustment = 56,

            /// <summary>
            /// Enum ReserveAdjustmentPending for value: reserveAdjustmentPending
            /// </summary>
            [EnumMember(Value = "reserveAdjustmentPending")]
            ReserveAdjustmentPending = 57,

            /// <summary>
            /// Enum Returned for value: returned
            /// </summary>
            [EnumMember(Value = "returned")]
            Returned = 58,

            /// <summary>
            /// Enum SecondChargeback for value: secondChargeback
            /// </summary>
            [EnumMember(Value = "secondChargeback")]
            SecondChargeback = 59,

            /// <summary>
            /// Enum SecondChargebackPending for value: secondChargebackPending
            /// </summary>
            [EnumMember(Value = "secondChargebackPending")]
            SecondChargebackPending = 60,

            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 61

        }


        /// <summary>
        /// The result of the transfer.   For example, **authorised**, **refused**, or **error**.
        /// </summary>
        /// <value>The result of the transfer.   For example, **authorised**, **refused**, or **error**.</value>
        [DataMember(Name = "status", IsRequired = false, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transfer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Transfer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transfer" /> class.
        /// </summary>
        /// <param name="accountHolder">accountHolder.</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="balanceAccount">balanceAccount.</param>
        /// <param name="balanceAccountId">The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id)..</param>
        /// <param name="category">The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users. (required).</param>
        /// <param name="counterparty">counterparty (required).</param>
        /// <param name="description">Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , &#39; + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] &amp; $ % # @** **~ &#x3D; + - _ &#39; \&quot; ! ?**.</param>
        /// <param name="direction">The direction of the transfer.  Possible values: **incoming**, **outgoing**..</param>
        /// <param name="id">The ID of the resource..</param>
        /// <param name="paymentInstrument">paymentInstrument.</param>
        /// <param name="paymentInstrumentId">The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer..</param>
        /// <param name="priority">The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with &#x60;category&#x60; **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN)..</param>
        /// <param name="reason">Additional information about the status of the transfer..</param>
        /// <param name="reference">Your reference for the transfer, used internally within your platform. If you don&#39;t provide this in the request, Adyen generates a unique reference..</param>
        /// <param name="referenceForBeneficiary"> A reference that is sent to the recipient. This reference is also sent in all notification webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the &#x60;category&#x60;.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others..</param>
        /// <param name="status">The result of the transfer.   For example, **authorised**, **refused**, or **error**. (required).</param>
        public Transfer(ResourceReference accountHolder = default(ResourceReference), Amount amount = default(Amount), ResourceReference balanceAccount = default(ResourceReference), string balanceAccountId = default(string), CategoryEnum category = default(CategoryEnum), CounterpartyV3 counterparty = default(CounterpartyV3), string description = default(string), DirectionEnum? direction = default(DirectionEnum?), string id = default(string), PaymentInstrument paymentInstrument = default(PaymentInstrument), string paymentInstrumentId = default(string), PriorityEnum? priority = default(PriorityEnum?), ReasonEnum? reason = default(ReasonEnum?), string reference = default(string), string referenceForBeneficiary = default(string), StatusEnum status = default(StatusEnum))
        {
            this.Amount = amount;
            this.Category = category;
            this.Counterparty = counterparty;
            this.Status = status;
            this.AccountHolder = accountHolder;
            this.BalanceAccount = balanceAccount;
            this.BalanceAccountId = balanceAccountId;
            this.Description = description;
            this.Direction = direction;
            this.Id = id;
            this.PaymentInstrument = paymentInstrument;
            this.PaymentInstrumentId = paymentInstrumentId;
            this.Priority = priority;
            this.Reason = reason;
            this.Reference = reference;
            this.ReferenceForBeneficiary = referenceForBeneficiary;
        }

        /// <summary>
        /// Gets or Sets AccountHolder
        /// </summary>
        [DataMember(Name = "accountHolder", EmitDefaultValue = false)]
        public ResourceReference AccountHolder { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = false, EmitDefaultValue = false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets BalanceAccount
        /// </summary>
        [DataMember(Name = "balanceAccount", EmitDefaultValue = false)]
        public ResourceReference BalanceAccount { get; set; }

        /// <summary>
        /// The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
        /// </summary>
        /// <value>The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).</value>
        [DataMember(Name = "balanceAccountId", EmitDefaultValue = false)]
        [Obsolete]
        public string BalanceAccountId { get; set; }

        /// <summary>
        /// Gets or Sets Counterparty
        /// </summary>
        [DataMember(Name = "counterparty", IsRequired = false, EmitDefaultValue = false)]
        public CounterpartyV3 Counterparty { get; set; }

        /// <summary>
        /// Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , &#39; + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] &amp; $ % # @** **~ &#x3D; + - _ &#39; \&quot; ! ?**
        /// </summary>
        /// <value>Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , &#39; + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] &amp; $ % # @** **~ &#x3D; + - _ &#39; \&quot; ! ?**</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the resource.
        /// </summary>
        /// <value>The ID of the resource.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInstrument
        /// </summary>
        [DataMember(Name = "paymentInstrument", EmitDefaultValue = false)]
        public PaymentInstrument PaymentInstrument { get; set; }

        /// <summary>
        /// The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer.
        /// </summary>
        /// <value>The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer.</value>
        [DataMember(Name = "paymentInstrumentId", EmitDefaultValue = false)]
        [Obsolete]
        public string PaymentInstrumentId { get; set; }

        /// <summary>
        /// Your reference for the transfer, used internally within your platform. If you don&#39;t provide this in the request, Adyen generates a unique reference.
        /// </summary>
        /// <value>Your reference for the transfer, used internally within your platform. If you don&#39;t provide this in the request, Adyen generates a unique reference.</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        ///  A reference that is sent to the recipient. This reference is also sent in all notification webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the &#x60;category&#x60;.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.
        /// </summary>
        /// <value> A reference that is sent to the recipient. This reference is also sent in all notification webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the &#x60;category&#x60;.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.</value>
        [DataMember(Name = "referenceForBeneficiary", EmitDefaultValue = false)]
        public string ReferenceForBeneficiary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Transfer {\n");
            sb.Append("  AccountHolder: ").Append(AccountHolder).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BalanceAccount: ").Append(BalanceAccount).Append("\n");
            sb.Append("  BalanceAccountId: ").Append(BalanceAccountId).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Counterparty: ").Append(Counterparty).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PaymentInstrument: ").Append(PaymentInstrument).Append("\n");
            sb.Append("  PaymentInstrumentId: ").Append(PaymentInstrumentId).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReferenceForBeneficiary: ").Append(ReferenceForBeneficiary).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transfer);
        }

        /// <summary>
        /// Returns true if Transfer instances are equal
        /// </summary>
        /// <param name="input">Instance of Transfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transfer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountHolder == input.AccountHolder ||
                    (this.AccountHolder != null &&
                    this.AccountHolder.Equals(input.AccountHolder))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BalanceAccount == input.BalanceAccount ||
                    (this.BalanceAccount != null &&
                    this.BalanceAccount.Equals(input.BalanceAccount))
                ) && 
                (
                    this.BalanceAccountId == input.BalanceAccountId ||
                    (this.BalanceAccountId != null &&
                    this.BalanceAccountId.Equals(input.BalanceAccountId))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.Counterparty == input.Counterparty ||
                    (this.Counterparty != null &&
                    this.Counterparty.Equals(input.Counterparty))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Direction == input.Direction ||
                    this.Direction.Equals(input.Direction)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PaymentInstrument == input.PaymentInstrument ||
                    (this.PaymentInstrument != null &&
                    this.PaymentInstrument.Equals(input.PaymentInstrument))
                ) && 
                (
                    this.PaymentInstrumentId == input.PaymentInstrumentId ||
                    (this.PaymentInstrumentId != null &&
                    this.PaymentInstrumentId.Equals(input.PaymentInstrumentId))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.Reason == input.Reason ||
                    this.Reason.Equals(input.Reason)
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.ReferenceForBeneficiary == input.ReferenceForBeneficiary ||
                    (this.ReferenceForBeneficiary != null &&
                    this.ReferenceForBeneficiary.Equals(input.ReferenceForBeneficiary))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountHolder != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolder.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.BalanceAccount != null)
                {
                    hashCode = (hashCode * 59) + this.BalanceAccount.GetHashCode();
                }
                if (this.BalanceAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.BalanceAccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                if (this.Counterparty != null)
                {
                    hashCode = (hashCode * 59) + this.Counterparty.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Direction.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PaymentInstrument != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInstrument.GetHashCode();
                }
                if (this.PaymentInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInstrumentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.ReferenceForBeneficiary != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceForBeneficiary.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Reference (string) maxLength
            if (this.Reference != null && this.Reference.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, length must be less than 80.", new [] { "Reference" });
            }

            // ReferenceForBeneficiary (string) maxLength
            if (this.ReferenceForBeneficiary != null && this.ReferenceForBeneficiary.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferenceForBeneficiary, length must be less than 80.", new [] { "ReferenceForBeneficiary" });
            }

            yield break;
        }
    }

}
