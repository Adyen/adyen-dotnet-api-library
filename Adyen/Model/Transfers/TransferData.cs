/*
* Transfers API
*
*
* The version of the OpenAPI document: 4
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Transfers
{
    /// <summary>
    /// TransferData
    /// </summary>
    [DataContract(Name = "TransferData")]
    public partial class TransferData : IEquatable<TransferData>, IValidatableObject
    {
        /// <summary>
        /// The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.
        /// </summary>
        /// <value>The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum Bank for value: bank
            /// </summary>
            [EnumMember(Value = "bank")]
            Bank = 1,

            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 2,

            /// <summary>
            /// Enum IssuedCard for value: issuedCard
            /// </summary>
            [EnumMember(Value = "issuedCard")]
            IssuedCard = 3,

            /// <summary>
            /// Enum PlatformPayment for value: platformPayment
            /// </summary>
            [EnumMember(Value = "platformPayment")]
            PlatformPayment = 4

        }


        /// <summary>
        /// The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.
        /// </summary>
        /// <value>The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.</value>
        [DataMember(Name = "category", IsRequired = false, EmitDefaultValue = false)]
        public CategoryEnum Category { get; set; }
        /// <summary>
        /// The direction of the transfer.  Possible values: **incoming**, **outgoing**.
        /// </summary>
        /// <value>The direction of the transfer.  Possible values: **incoming**, **outgoing**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum Incoming for value: incoming
            /// </summary>
            [EnumMember(Value = "incoming")]
            Incoming = 1,

            /// <summary>
            /// Enum Outgoing for value: outgoing
            /// </summary>
            [EnumMember(Value = "outgoing")]
            Outgoing = 2

        }


        /// <summary>
        /// The direction of the transfer.  Possible values: **incoming**, **outgoing**.
        /// </summary>
        /// <value>The direction of the transfer.  Possible values: **incoming**, **outgoing**.</value>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Priority of the transfer.
        /// </summary>
        /// <value>Priority of the transfer.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum CrossBorder for value: crossBorder
            /// </summary>
            [EnumMember(Value = "crossBorder")]
            CrossBorder = 1,

            /// <summary>
            /// Enum DirectDebit for value: directDebit
            /// </summary>
            [EnumMember(Value = "directDebit")]
            DirectDebit = 2,

            /// <summary>
            /// Enum Fast for value: fast
            /// </summary>
            [EnumMember(Value = "fast")]
            Fast = 3,

            /// <summary>
            /// Enum Instant for value: instant
            /// </summary>
            [EnumMember(Value = "instant")]
            Instant = 4,

            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 5,

            /// <summary>
            /// Enum Regular for value: regular
            /// </summary>
            [EnumMember(Value = "regular")]
            Regular = 6,

            /// <summary>
            /// Enum Wire for value: wire
            /// </summary>
            [EnumMember(Value = "wire")]
            Wire = 7

        }


        /// <summary>
        /// Priority of the transfer.
        /// </summary>
        /// <value>Priority of the transfer.</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// The type of transfer or transaction. For example, **refund**, **payment**, **internalTransfer**, **bankTransfer**.
        /// </summary>
        /// <value>The type of transfer or transaction. For example, **refund**, **payment**, **internalTransfer**, **bankTransfer**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AtmWithdrawal for value: atmWithdrawal
            /// </summary>
            [EnumMember(Value = "atmWithdrawal")]
            AtmWithdrawal = 1,

            /// <summary>
            /// Enum AtmWithdrawalReversal for value: atmWithdrawalReversal
            /// </summary>
            [EnumMember(Value = "atmWithdrawalReversal")]
            AtmWithdrawalReversal = 2,

            /// <summary>
            /// Enum BalanceAdjustment for value: balanceAdjustment
            /// </summary>
            [EnumMember(Value = "balanceAdjustment")]
            BalanceAdjustment = 3,

            /// <summary>
            /// Enum BalanceRollover for value: balanceRollover
            /// </summary>
            [EnumMember(Value = "balanceRollover")]
            BalanceRollover = 4,

            /// <summary>
            /// Enum BankTransfer for value: bankTransfer
            /// </summary>
            [EnumMember(Value = "bankTransfer")]
            BankTransfer = 5,

            /// <summary>
            /// Enum Capture for value: capture
            /// </summary>
            [EnumMember(Value = "capture")]
            Capture = 6,

            /// <summary>
            /// Enum CaptureReversal for value: captureReversal
            /// </summary>
            [EnumMember(Value = "captureReversal")]
            CaptureReversal = 7,

            /// <summary>
            /// Enum CardTransfer for value: cardTransfer
            /// </summary>
            [EnumMember(Value = "cardTransfer")]
            CardTransfer = 8,

            /// <summary>
            /// Enum Chargeback for value: chargeback
            /// </summary>
            [EnumMember(Value = "chargeback")]
            Chargeback = 9,

            /// <summary>
            /// Enum ChargebackReversal for value: chargebackReversal
            /// </summary>
            [EnumMember(Value = "chargebackReversal")]
            ChargebackReversal = 10,

            /// <summary>
            /// Enum DepositCorrection for value: depositCorrection
            /// </summary>
            [EnumMember(Value = "depositCorrection")]
            DepositCorrection = 11,

            /// <summary>
            /// Enum Fee for value: fee
            /// </summary>
            [EnumMember(Value = "fee")]
            Fee = 12,

            /// <summary>
            /// Enum Grant for value: grant
            /// </summary>
            [EnumMember(Value = "grant")]
            Grant = 13,

            /// <summary>
            /// Enum Installment for value: installment
            /// </summary>
            [EnumMember(Value = "installment")]
            Installment = 14,

            /// <summary>
            /// Enum InstallmentReversal for value: installmentReversal
            /// </summary>
            [EnumMember(Value = "installmentReversal")]
            InstallmentReversal = 15,

            /// <summary>
            /// Enum InternalTransfer for value: internalTransfer
            /// </summary>
            [EnumMember(Value = "internalTransfer")]
            InternalTransfer = 16,

            /// <summary>
            /// Enum InvoiceDeduction for value: invoiceDeduction
            /// </summary>
            [EnumMember(Value = "invoiceDeduction")]
            InvoiceDeduction = 17,

            /// <summary>
            /// Enum Leftover for value: leftover
            /// </summary>
            [EnumMember(Value = "leftover")]
            Leftover = 18,

            /// <summary>
            /// Enum ManualCorrection for value: manualCorrection
            /// </summary>
            [EnumMember(Value = "manualCorrection")]
            ManualCorrection = 19,

            /// <summary>
            /// Enum MiscCost for value: miscCost
            /// </summary>
            [EnumMember(Value = "miscCost")]
            MiscCost = 20,

            /// <summary>
            /// Enum Payment for value: payment
            /// </summary>
            [EnumMember(Value = "payment")]
            Payment = 21,

            /// <summary>
            /// Enum PaymentCost for value: paymentCost
            /// </summary>
            [EnumMember(Value = "paymentCost")]
            PaymentCost = 22,

            /// <summary>
            /// Enum Refund for value: refund
            /// </summary>
            [EnumMember(Value = "refund")]
            Refund = 23,

            /// <summary>
            /// Enum RefundReversal for value: refundReversal
            /// </summary>
            [EnumMember(Value = "refundReversal")]
            RefundReversal = 24,

            /// <summary>
            /// Enum Repayment for value: repayment
            /// </summary>
            [EnumMember(Value = "repayment")]
            Repayment = 25,

            /// <summary>
            /// Enum ReserveAdjustment for value: reserveAdjustment
            /// </summary>
            [EnumMember(Value = "reserveAdjustment")]
            ReserveAdjustment = 26,

            /// <summary>
            /// Enum SecondChargeback for value: secondChargeback
            /// </summary>
            [EnumMember(Value = "secondChargeback")]
            SecondChargeback = 27

        }


        /// <summary>
        /// The type of transfer or transaction. For example, **refund**, **payment**, **internalTransfer**, **bankTransfer**.
        /// </summary>
        /// <value>The type of transfer or transaction. For example, **refund**, **payment**, **internalTransfer**, **bankTransfer**.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransferData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferData" /> class.
        /// </summary>
        /// <param name="amount">amount (required).</param>
        /// <param name="category">The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users. (required).</param>
        /// <param name="counterparty">counterparty.</param>
        /// <param name="description">The &#x60;description&#x60; from the &#x60;/transfers&#x60; request..</param>
        /// <param name="direction">The direction of the transfer.  Possible values: **incoming**, **outgoing**..</param>
        /// <param name="id">The ID of the resource..</param>
        /// <param name="paymentInstrumentId">Unique identifier of the payment instrument that was used for the transaction..</param>
        /// <param name="priority">Priority of the transfer..</param>
        /// <param name="reference">The [&#x60;reference&#x60;](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the &#x60;/transfers&#x60; request. If you haven&#39;t provided any, Adyen generates a unique reference. (required).</param>
        /// <param name="referenceForBeneficiary">The reference sent to or received from the counterparty.  * For outgoing funds, this is the [&#x60;referenceForBeneficiary&#x60;](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [&#x60;/transfers&#x60;](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.   * For incoming funds, this is the reference from the sender..</param>
        /// <param name="type">The type of transfer or transaction. For example, **refund**, **payment**, **internalTransfer**, **bankTransfer**..</param>
        public TransferData(Amount amount = default(Amount), CategoryEnum category = default(CategoryEnum), CounterpartyV3 counterparty = default(CounterpartyV3), string description = default(string), DirectionEnum? direction = default(DirectionEnum?), string id = default(string), string paymentInstrumentId = default(string), PriorityEnum? priority = default(PriorityEnum?), string reference = default(string), string referenceForBeneficiary = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this.Amount = amount;
            this.Category = category;
            this.Reference = reference;
            this.Counterparty = counterparty;
            this.Description = description;
            this.Direction = direction;
            this.Id = id;
            this.PaymentInstrumentId = paymentInstrumentId;
            this.Priority = priority;
            this.ReferenceForBeneficiary = referenceForBeneficiary;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = false, EmitDefaultValue = false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets Counterparty
        /// </summary>
        [DataMember(Name = "counterparty", EmitDefaultValue = false)]
        public CounterpartyV3 Counterparty { get; set; }

        /// <summary>
        /// The &#x60;description&#x60; from the &#x60;/transfers&#x60; request.
        /// </summary>
        /// <value>The &#x60;description&#x60; from the &#x60;/transfers&#x60; request.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the resource.
        /// </summary>
        /// <value>The ID of the resource.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier of the payment instrument that was used for the transaction.
        /// </summary>
        /// <value>Unique identifier of the payment instrument that was used for the transaction.</value>
        [DataMember(Name = "paymentInstrumentId", EmitDefaultValue = false)]
        public string PaymentInstrumentId { get; set; }

        /// <summary>
        /// The [&#x60;reference&#x60;](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the &#x60;/transfers&#x60; request. If you haven&#39;t provided any, Adyen generates a unique reference.
        /// </summary>
        /// <value>The [&#x60;reference&#x60;](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the &#x60;/transfers&#x60; request. If you haven&#39;t provided any, Adyen generates a unique reference.</value>
        [DataMember(Name = "reference", IsRequired = false, EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// The reference sent to or received from the counterparty.  * For outgoing funds, this is the [&#x60;referenceForBeneficiary&#x60;](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [&#x60;/transfers&#x60;](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.   * For incoming funds, this is the reference from the sender.
        /// </summary>
        /// <value>The reference sent to or received from the counterparty.  * For outgoing funds, this is the [&#x60;referenceForBeneficiary&#x60;](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [&#x60;/transfers&#x60;](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.   * For incoming funds, this is the reference from the sender.</value>
        [DataMember(Name = "referenceForBeneficiary", EmitDefaultValue = false)]
        public string ReferenceForBeneficiary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferData {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Counterparty: ").Append(Counterparty).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PaymentInstrumentId: ").Append(PaymentInstrumentId).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReferenceForBeneficiary: ").Append(ReferenceForBeneficiary).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferData);
        }

        /// <summary>
        /// Returns true if TransferData instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.Counterparty == input.Counterparty ||
                    (this.Counterparty != null &&
                    this.Counterparty.Equals(input.Counterparty))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Direction == input.Direction ||
                    this.Direction.Equals(input.Direction)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PaymentInstrumentId == input.PaymentInstrumentId ||
                    (this.PaymentInstrumentId != null &&
                    this.PaymentInstrumentId.Equals(input.PaymentInstrumentId))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.ReferenceForBeneficiary == input.ReferenceForBeneficiary ||
                    (this.ReferenceForBeneficiary != null &&
                    this.ReferenceForBeneficiary.Equals(input.ReferenceForBeneficiary))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                if (this.Counterparty != null)
                {
                    hashCode = (hashCode * 59) + this.Counterparty.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Direction.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PaymentInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInstrumentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.ReferenceForBeneficiary != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceForBeneficiary.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
