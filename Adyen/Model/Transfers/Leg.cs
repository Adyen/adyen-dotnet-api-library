/*
* Transfers API
*
*
* The version of the OpenAPI document: 4
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Transfers
{
    /// <summary>
    /// Leg
    /// </summary>
    [DataContract(Name = "Leg")]
    public partial class Leg : IEquatable<Leg>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Leg" /> class.
        /// </summary>
        /// <param name="arrivalAirportCode">The IATA 3-letter airport code of the destination airport. This field is required if the airline data includes leg details..</param>
        /// <param name="basicFareCode">The basic fare code for this leg..</param>
        /// <param name="carrierCode">IATA code of the carrier operating the flight..</param>
        /// <param name="departureAirportCode">The IATA three-letter airport code of the departure airport. This field is required if the airline data includes leg details.</param>
        /// <param name="departureDate">The flight departure date..</param>
        /// <param name="flightNumber">The flight identifier..</param>
        public Leg(string arrivalAirportCode = default(string), string basicFareCode = default(string), string carrierCode = default(string), string departureAirportCode = default(string), string departureDate = default(string), string flightNumber = default(string))
        {
            this.ArrivalAirportCode = arrivalAirportCode;
            this.BasicFareCode = basicFareCode;
            this.CarrierCode = carrierCode;
            this.DepartureAirportCode = departureAirportCode;
            this.DepartureDate = departureDate;
            this.FlightNumber = flightNumber;
        }

        /// <summary>
        /// The IATA 3-letter airport code of the destination airport. This field is required if the airline data includes leg details.
        /// </summary>
        /// <value>The IATA 3-letter airport code of the destination airport. This field is required if the airline data includes leg details.</value>
        [DataMember(Name = "arrivalAirportCode", EmitDefaultValue = false)]
        public string ArrivalAirportCode { get; set; }

        /// <summary>
        /// The basic fare code for this leg.
        /// </summary>
        /// <value>The basic fare code for this leg.</value>
        [DataMember(Name = "basicFareCode", EmitDefaultValue = false)]
        public string BasicFareCode { get; set; }

        /// <summary>
        /// IATA code of the carrier operating the flight.
        /// </summary>
        /// <value>IATA code of the carrier operating the flight.</value>
        [DataMember(Name = "carrierCode", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// The IATA three-letter airport code of the departure airport. This field is required if the airline data includes leg details
        /// </summary>
        /// <value>The IATA three-letter airport code of the departure airport. This field is required if the airline data includes leg details</value>
        [DataMember(Name = "departureAirportCode", EmitDefaultValue = false)]
        public string DepartureAirportCode { get; set; }

        /// <summary>
        /// The flight departure date.
        /// </summary>
        /// <value>The flight departure date.</value>
        [DataMember(Name = "departureDate", EmitDefaultValue = false)]
        public string DepartureDate { get; set; }

        /// <summary>
        /// The flight identifier.
        /// </summary>
        /// <value>The flight identifier.</value>
        [DataMember(Name = "flightNumber", EmitDefaultValue = false)]
        public string FlightNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Leg {\n");
            sb.Append("  ArrivalAirportCode: ").Append(ArrivalAirportCode).Append("\n");
            sb.Append("  BasicFareCode: ").Append(BasicFareCode).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  DepartureAirportCode: ").Append(DepartureAirportCode).Append("\n");
            sb.Append("  DepartureDate: ").Append(DepartureDate).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Leg);
        }

        /// <summary>
        /// Returns true if Leg instances are equal
        /// </summary>
        /// <param name="input">Instance of Leg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Leg input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ArrivalAirportCode == input.ArrivalAirportCode ||
                    (this.ArrivalAirportCode != null &&
                    this.ArrivalAirportCode.Equals(input.ArrivalAirportCode))
                ) && 
                (
                    this.BasicFareCode == input.BasicFareCode ||
                    (this.BasicFareCode != null &&
                    this.BasicFareCode.Equals(input.BasicFareCode))
                ) && 
                (
                    this.CarrierCode == input.CarrierCode ||
                    (this.CarrierCode != null &&
                    this.CarrierCode.Equals(input.CarrierCode))
                ) && 
                (
                    this.DepartureAirportCode == input.DepartureAirportCode ||
                    (this.DepartureAirportCode != null &&
                    this.DepartureAirportCode.Equals(input.DepartureAirportCode))
                ) && 
                (
                    this.DepartureDate == input.DepartureDate ||
                    (this.DepartureDate != null &&
                    this.DepartureDate.Equals(input.DepartureDate))
                ) && 
                (
                    this.FlightNumber == input.FlightNumber ||
                    (this.FlightNumber != null &&
                    this.FlightNumber.Equals(input.FlightNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArrivalAirportCode != null)
                {
                    hashCode = (hashCode * 59) + this.ArrivalAirportCode.GetHashCode();
                }
                if (this.BasicFareCode != null)
                {
                    hashCode = (hashCode * 59) + this.BasicFareCode.GetHashCode();
                }
                if (this.CarrierCode != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierCode.GetHashCode();
                }
                if (this.DepartureAirportCode != null)
                {
                    hashCode = (hashCode * 59) + this.DepartureAirportCode.GetHashCode();
                }
                if (this.DepartureDate != null)
                {
                    hashCode = (hashCode * 59) + this.DepartureDate.GetHashCode();
                }
                if (this.FlightNumber != null)
                {
                    hashCode = (hashCode * 59) + this.FlightNumber.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
