/*
* Authentication webhooks
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.AcsWebhooks
{
    /// <summary>
    /// AuthenticationInfo
    /// </summary>
    [DataContract(Name = "AuthenticationInfo")]
    public partial class AuthenticationInfo : IEquatable<AuthenticationInfo>, IValidatableObject
    {
        /// <summary>
        /// Specifies a preference for receiving a challenge. Possible values:  * **01**: No preference * **02**: No challenge requested * **03**: Challenge requested (preference) * **04**: Challenge requested (mandate) * **05**: No challenge requested (transactional risk analysis is already performed) * **07**: No challenge requested (SCA is already performed) * **08**: No challenge requested (trusted beneficiaries exemption of no challenge required) * **09**: Challenge requested (trusted beneficiaries prompt requested if challenge required) * **80**: No challenge requested (secure corporate payment with Mastercard) * **82**: No challenge requested (secure corporate payment with Visa) 
        /// </summary>
        /// <value>Specifies a preference for receiving a challenge. Possible values:  * **01**: No preference * **02**: No challenge requested * **03**: Challenge requested (preference) * **04**: Challenge requested (mandate) * **05**: No challenge requested (transactional risk analysis is already performed) * **07**: No challenge requested (SCA is already performed) * **08**: No challenge requested (trusted beneficiaries exemption of no challenge required) * **09**: Challenge requested (trusted beneficiaries prompt requested if challenge required) * **80**: No challenge requested (secure corporate payment with Mastercard) * **82**: No challenge requested (secure corporate payment with Visa) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChallengeIndicatorEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            [EnumMember(Value = "02")]
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            [EnumMember(Value = "03")]
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            [EnumMember(Value = "04")]
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            [EnumMember(Value = "05")]
            _05 = 5,

            /// <summary>
            /// Enum _07 for value: 07
            /// </summary>
            [EnumMember(Value = "07")]
            _07 = 6,

            /// <summary>
            /// Enum _08 for value: 08
            /// </summary>
            [EnumMember(Value = "08")]
            _08 = 7,

            /// <summary>
            /// Enum _09 for value: 09
            /// </summary>
            [EnumMember(Value = "09")]
            _09 = 8,

            /// <summary>
            /// Enum _80 for value: 80
            /// </summary>
            [EnumMember(Value = "80")]
            _80 = 9,

            /// <summary>
            /// Enum _82 for value: 82
            /// </summary>
            [EnumMember(Value = "82")]
            _82 = 10

        }


        /// <summary>
        /// Specifies a preference for receiving a challenge. Possible values:  * **01**: No preference * **02**: No challenge requested * **03**: Challenge requested (preference) * **04**: Challenge requested (mandate) * **05**: No challenge requested (transactional risk analysis is already performed) * **07**: No challenge requested (SCA is already performed) * **08**: No challenge requested (trusted beneficiaries exemption of no challenge required) * **09**: Challenge requested (trusted beneficiaries prompt requested if challenge required) * **80**: No challenge requested (secure corporate payment with Mastercard) * **82**: No challenge requested (secure corporate payment with Visa) 
        /// </summary>
        /// <value>Specifies a preference for receiving a challenge. Possible values:  * **01**: No preference * **02**: No challenge requested * **03**: Challenge requested (preference) * **04**: Challenge requested (mandate) * **05**: No challenge requested (transactional risk analysis is already performed) * **07**: No challenge requested (SCA is already performed) * **08**: No challenge requested (trusted beneficiaries exemption of no challenge required) * **09**: Challenge requested (trusted beneficiaries prompt requested if challenge required) * **80**: No challenge requested (secure corporate payment with Mastercard) * **82**: No challenge requested (secure corporate payment with Visa) </value>
        [DataMember(Name = "challengeIndicator", IsRequired = false, EmitDefaultValue = false)]
        public ChallengeIndicatorEnum ChallengeIndicator { get; set; }
        /// <summary>
        /// Indicates the type of channel interface being used to initiate the transaction. Possible values:  * **app** * **browser** * **3DSRequestorInitiated** (initiated by a merchant when the cardholder is not available)
        /// </summary>
        /// <value>Indicates the type of channel interface being used to initiate the transaction. Possible values:  * **app** * **browser** * **3DSRequestorInitiated** (initiated by a merchant when the cardholder is not available)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeviceChannelEnum
        {
            /// <summary>
            /// Enum App for value: app
            /// </summary>
            [EnumMember(Value = "app")]
            App = 1,

            /// <summary>
            /// Enum Browser for value: browser
            /// </summary>
            [EnumMember(Value = "browser")]
            Browser = 2,

            /// <summary>
            /// Enum ThreeDSRequestorInitiated for value: ThreeDSRequestorInitiated
            /// </summary>
            [EnumMember(Value = "ThreeDSRequestorInitiated")]
            ThreeDSRequestorInitiated = 3

        }


        /// <summary>
        /// Indicates the type of channel interface being used to initiate the transaction. Possible values:  * **app** * **browser** * **3DSRequestorInitiated** (initiated by a merchant when the cardholder is not available)
        /// </summary>
        /// <value>Indicates the type of channel interface being used to initiate the transaction. Possible values:  * **app** * **browser** * **3DSRequestorInitiated** (initiated by a merchant when the cardholder is not available)</value>
        [DataMember(Name = "deviceChannel", IsRequired = false, EmitDefaultValue = false)]
        public DeviceChannelEnum DeviceChannel { get; set; }
        /// <summary>
        /// Indicates the exemption type that was applied to the authentication by the issuer, if exemption applied. Possible values:  * **lowValue** * **secureCorporate** * **trustedBeneficiary** * **transactionRiskAnalysis** * **acquirerExemption** * **noExemptionApplied** * **visaDAFExemption** 
        /// </summary>
        /// <value>Indicates the exemption type that was applied to the authentication by the issuer, if exemption applied. Possible values:  * **lowValue** * **secureCorporate** * **trustedBeneficiary** * **transactionRiskAnalysis** * **acquirerExemption** * **noExemptionApplied** * **visaDAFExemption** </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExemptionIndicatorEnum
        {
            /// <summary>
            /// Enum LowValue for value: lowValue
            /// </summary>
            [EnumMember(Value = "lowValue")]
            LowValue = 1,

            /// <summary>
            /// Enum SecureCorporate for value: secureCorporate
            /// </summary>
            [EnumMember(Value = "secureCorporate")]
            SecureCorporate = 2,

            /// <summary>
            /// Enum TrustedBeneficiary for value: trustedBeneficiary
            /// </summary>
            [EnumMember(Value = "trustedBeneficiary")]
            TrustedBeneficiary = 3,

            /// <summary>
            /// Enum TransactionRiskAnalysis for value: transactionRiskAnalysis
            /// </summary>
            [EnumMember(Value = "transactionRiskAnalysis")]
            TransactionRiskAnalysis = 4,

            /// <summary>
            /// Enum AcquirerExemption for value: acquirerExemption
            /// </summary>
            [EnumMember(Value = "acquirerExemption")]
            AcquirerExemption = 5,

            /// <summary>
            /// Enum NoExemptionApplied for value: noExemptionApplied
            /// </summary>
            [EnumMember(Value = "noExemptionApplied")]
            NoExemptionApplied = 6,

            /// <summary>
            /// Enum VisaDAFExemption for value: visaDAFExemption
            /// </summary>
            [EnumMember(Value = "visaDAFExemption")]
            VisaDAFExemption = 7

        }


        /// <summary>
        /// Indicates the exemption type that was applied to the authentication by the issuer, if exemption applied. Possible values:  * **lowValue** * **secureCorporate** * **trustedBeneficiary** * **transactionRiskAnalysis** * **acquirerExemption** * **noExemptionApplied** * **visaDAFExemption** 
        /// </summary>
        /// <value>Indicates the exemption type that was applied to the authentication by the issuer, if exemption applied. Possible values:  * **lowValue** * **secureCorporate** * **trustedBeneficiary** * **transactionRiskAnalysis** * **acquirerExemption** * **noExemptionApplied** * **visaDAFExemption** </value>
        [DataMember(Name = "exemptionIndicator", EmitDefaultValue = false)]
        public ExemptionIndicatorEnum? ExemptionIndicator { get; set; }
        /// <summary>
        /// Identifies the category of the message for a specific use case. Possible values:  * **payment** * **nonPayment**
        /// </summary>
        /// <value>Identifies the category of the message for a specific use case. Possible values:  * **payment** * **nonPayment**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageCategoryEnum
        {
            /// <summary>
            /// Enum Payment for value: payment
            /// </summary>
            [EnumMember(Value = "payment")]
            Payment = 1,

            /// <summary>
            /// Enum NonPayment for value: nonPayment
            /// </summary>
            [EnumMember(Value = "nonPayment")]
            NonPayment = 2

        }


        /// <summary>
        /// Identifies the category of the message for a specific use case. Possible values:  * **payment** * **nonPayment**
        /// </summary>
        /// <value>Identifies the category of the message for a specific use case. Possible values:  * **payment** * **nonPayment**</value>
        [DataMember(Name = "messageCategory", IsRequired = false, EmitDefaultValue = false)]
        public MessageCategoryEnum MessageCategory { get; set; }
        /// <summary>
        /// The &#x60;transStatus&#x60; value as defined in the 3D Secure 2 specification. Possible values:  * **Y**: Authentication / Account verification successful. * **N**: Not Authenticated / Account not verified. Transaction denied. * **U**: Authentication / Account verification could not be performed. * **I**: Informational Only / 3D Secure Requestor challenge preference acknowledged. * **R**: Authentication / Account verification rejected by the Issuer. 
        /// </summary>
        /// <value>The &#x60;transStatus&#x60; value as defined in the 3D Secure 2 specification. Possible values:  * **Y**: Authentication / Account verification successful. * **N**: Not Authenticated / Account not verified. Transaction denied. * **U**: Authentication / Account verification could not be performed. * **I**: Informational Only / 3D Secure Requestor challenge preference acknowledged. * **R**: Authentication / Account verification rejected by the Issuer. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransStatusEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2,

            /// <summary>
            /// Enum R for value: R
            /// </summary>
            [EnumMember(Value = "R")]
            R = 3,

            /// <summary>
            /// Enum I for value: I
            /// </summary>
            [EnumMember(Value = "I")]
            I = 4,

            /// <summary>
            /// Enum U for value: U
            /// </summary>
            [EnumMember(Value = "U")]
            U = 5

        }


        /// <summary>
        /// The &#x60;transStatus&#x60; value as defined in the 3D Secure 2 specification. Possible values:  * **Y**: Authentication / Account verification successful. * **N**: Not Authenticated / Account not verified. Transaction denied. * **U**: Authentication / Account verification could not be performed. * **I**: Informational Only / 3D Secure Requestor challenge preference acknowledged. * **R**: Authentication / Account verification rejected by the Issuer. 
        /// </summary>
        /// <value>The &#x60;transStatus&#x60; value as defined in the 3D Secure 2 specification. Possible values:  * **Y**: Authentication / Account verification successful. * **N**: Not Authenticated / Account not verified. Transaction denied. * **U**: Authentication / Account verification could not be performed. * **I**: Informational Only / 3D Secure Requestor challenge preference acknowledged. * **R**: Authentication / Account verification rejected by the Issuer. </value>
        [DataMember(Name = "transStatus", IsRequired = false, EmitDefaultValue = false)]
        public TransStatusEnum TransStatus { get; set; }
        /// <summary>
        /// Provides information on why the &#x60;transStatus&#x60; field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).
        /// </summary>
        /// <value>Provides information on why the &#x60;transStatus&#x60; field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransStatusReasonEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            [EnumMember(Value = "02")]
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            [EnumMember(Value = "03")]
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            [EnumMember(Value = "04")]
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            [EnumMember(Value = "05")]
            _05 = 5,

            /// <summary>
            /// Enum _06 for value: 06
            /// </summary>
            [EnumMember(Value = "06")]
            _06 = 6,

            /// <summary>
            /// Enum _07 for value: 07
            /// </summary>
            [EnumMember(Value = "07")]
            _07 = 7,

            /// <summary>
            /// Enum _08 for value: 08
            /// </summary>
            [EnumMember(Value = "08")]
            _08 = 8,

            /// <summary>
            /// Enum _09 for value: 09
            /// </summary>
            [EnumMember(Value = "09")]
            _09 = 9,

            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 10,

            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")]
            _11 = 11,

            /// <summary>
            /// Enum _12 for value: 12
            /// </summary>
            [EnumMember(Value = "12")]
            _12 = 12,

            /// <summary>
            /// Enum _13 for value: 13
            /// </summary>
            [EnumMember(Value = "13")]
            _13 = 13,

            /// <summary>
            /// Enum _14 for value: 14
            /// </summary>
            [EnumMember(Value = "14")]
            _14 = 14,

            /// <summary>
            /// Enum _15 for value: 15
            /// </summary>
            [EnumMember(Value = "15")]
            _15 = 15,

            /// <summary>
            /// Enum _16 for value: 16
            /// </summary>
            [EnumMember(Value = "16")]
            _16 = 16,

            /// <summary>
            /// Enum _17 for value: 17
            /// </summary>
            [EnumMember(Value = "17")]
            _17 = 17,

            /// <summary>
            /// Enum _18 for value: 18
            /// </summary>
            [EnumMember(Value = "18")]
            _18 = 18,

            /// <summary>
            /// Enum _19 for value: 19
            /// </summary>
            [EnumMember(Value = "19")]
            _19 = 19,

            /// <summary>
            /// Enum _20 for value: 20
            /// </summary>
            [EnumMember(Value = "20")]
            _20 = 20,

            /// <summary>
            /// Enum _21 for value: 21
            /// </summary>
            [EnumMember(Value = "21")]
            _21 = 21,

            /// <summary>
            /// Enum _22 for value: 22
            /// </summary>
            [EnumMember(Value = "22")]
            _22 = 22,

            /// <summary>
            /// Enum _23 for value: 23
            /// </summary>
            [EnumMember(Value = "23")]
            _23 = 23,

            /// <summary>
            /// Enum _24 for value: 24
            /// </summary>
            [EnumMember(Value = "24")]
            _24 = 24,

            /// <summary>
            /// Enum _25 for value: 25
            /// </summary>
            [EnumMember(Value = "25")]
            _25 = 25,

            /// <summary>
            /// Enum _26 for value: 26
            /// </summary>
            [EnumMember(Value = "26")]
            _26 = 26,

            /// <summary>
            /// Enum _80 for value: 80
            /// </summary>
            [EnumMember(Value = "80")]
            _80 = 27,

            /// <summary>
            /// Enum _81 for value: 81
            /// </summary>
            [EnumMember(Value = "81")]
            _81 = 28,

            /// <summary>
            /// Enum _82 for value: 82
            /// </summary>
            [EnumMember(Value = "82")]
            _82 = 29,

            /// <summary>
            /// Enum _83 for value: 83
            /// </summary>
            [EnumMember(Value = "83")]
            _83 = 30,

            /// <summary>
            /// Enum _84 for value: 84
            /// </summary>
            [EnumMember(Value = "84")]
            _84 = 31,

            /// <summary>
            /// Enum _85 for value: 85
            /// </summary>
            [EnumMember(Value = "85")]
            _85 = 32,

            /// <summary>
            /// Enum _86 for value: 86
            /// </summary>
            [EnumMember(Value = "86")]
            _86 = 33,

            /// <summary>
            /// Enum _87 for value: 87
            /// </summary>
            [EnumMember(Value = "87")]
            _87 = 34,

            /// <summary>
            /// Enum _88 for value: 88
            /// </summary>
            [EnumMember(Value = "88")]
            _88 = 35

        }


        /// <summary>
        /// Provides information on why the &#x60;transStatus&#x60; field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).
        /// </summary>
        /// <value>Provides information on why the &#x60;transStatus&#x60; field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).</value>
        [DataMember(Name = "transStatusReason", EmitDefaultValue = false)]
        public TransStatusReasonEnum? TransStatusReason { get; set; }
        /// <summary>
        /// The type of authentication performed. Possible values:  * **frictionless** * **challenge**
        /// </summary>
        /// <value>The type of authentication performed. Possible values:  * **frictionless** * **challenge**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Frictionless for value: frictionless
            /// </summary>
            [EnumMember(Value = "frictionless")]
            Frictionless = 1,

            /// <summary>
            /// Enum Challenge for value: challenge
            /// </summary>
            [EnumMember(Value = "challenge")]
            Challenge = 2

        }


        /// <summary>
        /// The type of authentication performed. Possible values:  * **frictionless** * **challenge**
        /// </summary>
        /// <value>The type of authentication performed. Possible values:  * **frictionless** * **challenge**</value>
        [DataMember(Name = "type", IsRequired = false, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthenticationInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationInfo" /> class.
        /// </summary>
        /// <param name="acsTransId">Universally unique transaction identifier assigned by the Access Control Server (ACS) to identify a single transaction. (required).</param>
        /// <param name="challenge">challenge.</param>
        /// <param name="challengeIndicator">Specifies a preference for receiving a challenge. Possible values:  * **01**: No preference * **02**: No challenge requested * **03**: Challenge requested (preference) * **04**: Challenge requested (mandate) * **05**: No challenge requested (transactional risk analysis is already performed) * **07**: No challenge requested (SCA is already performed) * **08**: No challenge requested (trusted beneficiaries exemption of no challenge required) * **09**: Challenge requested (trusted beneficiaries prompt requested if challenge required) * **80**: No challenge requested (secure corporate payment with Mastercard) * **82**: No challenge requested (secure corporate payment with Visa)  (required).</param>
        /// <param name="createdAt">Date and time in UTC of the cardholder authentication.   [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**. (required).</param>
        /// <param name="deviceChannel">Indicates the type of channel interface being used to initiate the transaction. Possible values:  * **app** * **browser** * **3DSRequestorInitiated** (initiated by a merchant when the cardholder is not available) (required).</param>
        /// <param name="dsTransID">Universally unique transaction identifier assigned by the DS (card scheme) to identify a single transaction. (required).</param>
        /// <param name="exemptionIndicator">Indicates the exemption type that was applied to the authentication by the issuer, if exemption applied. Possible values:  * **lowValue** * **secureCorporate** * **trustedBeneficiary** * **transactionRiskAnalysis** * **acquirerExemption** * **noExemptionApplied** * **visaDAFExemption** .</param>
        /// <param name="inPSD2Scope">Indicates if the purchase was in the PSD2 scope. (required).</param>
        /// <param name="messageCategory">Identifies the category of the message for a specific use case. Possible values:  * **payment** * **nonPayment** (required).</param>
        /// <param name="messageVersion">The &#x60;messageVersion&#x60; value as defined in the 3D Secure 2 specification. (required).</param>
        /// <param name="riskScore">Risk score calculated from the transaction rules..</param>
        /// <param name="threeDSServerTransID">The &#x60;threeDSServerTransID&#x60; value as defined in the 3D Secure 2 specification. (required).</param>
        /// <param name="transStatus">The &#x60;transStatus&#x60; value as defined in the 3D Secure 2 specification. Possible values:  * **Y**: Authentication / Account verification successful. * **N**: Not Authenticated / Account not verified. Transaction denied. * **U**: Authentication / Account verification could not be performed. * **I**: Informational Only / 3D Secure Requestor challenge preference acknowledged. * **R**: Authentication / Account verification rejected by the Issuer.  (required).</param>
        /// <param name="transStatusReason">Provides information on why the &#x60;transStatus&#x60; field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values)..</param>
        /// <param name="type">The type of authentication performed. Possible values:  * **frictionless** * **challenge** (required).</param>
        public AuthenticationInfo(string acsTransId = default(string), ChallengeInfo challenge = default(ChallengeInfo), ChallengeIndicatorEnum challengeIndicator = default(ChallengeIndicatorEnum), DateTime createdAt = default(DateTime), DeviceChannelEnum deviceChannel = default(DeviceChannelEnum), string dsTransID = default(string), ExemptionIndicatorEnum? exemptionIndicator = default(ExemptionIndicatorEnum?), bool? inPSD2Scope = default(bool?), MessageCategoryEnum messageCategory = default(MessageCategoryEnum), string messageVersion = default(string), int? riskScore = default(int?), string threeDSServerTransID = default(string), TransStatusEnum transStatus = default(TransStatusEnum), TransStatusReasonEnum? transStatusReason = default(TransStatusReasonEnum?), TypeEnum type = default(TypeEnum))
        {
            this.AcsTransId = acsTransId;
            this.ChallengeIndicator = challengeIndicator;
            this.CreatedAt = createdAt;
            this.DeviceChannel = deviceChannel;
            this.DsTransID = dsTransID;
            this.InPSD2Scope = inPSD2Scope;
            this.MessageCategory = messageCategory;
            this.MessageVersion = messageVersion;
            this.ThreeDSServerTransID = threeDSServerTransID;
            this.TransStatus = transStatus;
            this.Type = type;
            this.Challenge = challenge;
            this.ExemptionIndicator = exemptionIndicator;
            this.RiskScore = riskScore;
            this.TransStatusReason = transStatusReason;
        }

        /// <summary>
        /// Universally unique transaction identifier assigned by the Access Control Server (ACS) to identify a single transaction.
        /// </summary>
        /// <value>Universally unique transaction identifier assigned by the Access Control Server (ACS) to identify a single transaction.</value>
        [DataMember(Name = "acsTransId", IsRequired = false, EmitDefaultValue = false)]
        public string AcsTransId { get; set; }

        /// <summary>
        /// Gets or Sets Challenge
        /// </summary>
        [DataMember(Name = "challenge", EmitDefaultValue = false)]
        public ChallengeInfo Challenge { get; set; }

        /// <summary>
        /// Date and time in UTC of the cardholder authentication.   [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.
        /// </summary>
        /// <value>Date and time in UTC of the cardholder authentication.   [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.</value>
        [DataMember(Name = "createdAt", IsRequired = false, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Universally unique transaction identifier assigned by the DS (card scheme) to identify a single transaction.
        /// </summary>
        /// <value>Universally unique transaction identifier assigned by the DS (card scheme) to identify a single transaction.</value>
        [DataMember(Name = "dsTransID", IsRequired = false, EmitDefaultValue = false)]
        public string DsTransID { get; set; }

        /// <summary>
        /// Indicates if the purchase was in the PSD2 scope.
        /// </summary>
        /// <value>Indicates if the purchase was in the PSD2 scope.</value>
        [DataMember(Name = "inPSD2Scope", IsRequired = false, EmitDefaultValue = false)]
        public bool? InPSD2Scope { get; set; }

        /// <summary>
        /// The &#x60;messageVersion&#x60; value as defined in the 3D Secure 2 specification.
        /// </summary>
        /// <value>The &#x60;messageVersion&#x60; value as defined in the 3D Secure 2 specification.</value>
        [DataMember(Name = "messageVersion", IsRequired = false, EmitDefaultValue = false)]
        public string MessageVersion { get; set; }

        /// <summary>
        /// Risk score calculated from the transaction rules.
        /// </summary>
        /// <value>Risk score calculated from the transaction rules.</value>
        [DataMember(Name = "riskScore", EmitDefaultValue = false)]
        public int? RiskScore { get; set; }

        /// <summary>
        /// The &#x60;threeDSServerTransID&#x60; value as defined in the 3D Secure 2 specification.
        /// </summary>
        /// <value>The &#x60;threeDSServerTransID&#x60; value as defined in the 3D Secure 2 specification.</value>
        [DataMember(Name = "threeDSServerTransID", IsRequired = false, EmitDefaultValue = false)]
        public string ThreeDSServerTransID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticationInfo {\n");
            sb.Append("  AcsTransId: ").Append(AcsTransId).Append("\n");
            sb.Append("  Challenge: ").Append(Challenge).Append("\n");
            sb.Append("  ChallengeIndicator: ").Append(ChallengeIndicator).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DeviceChannel: ").Append(DeviceChannel).Append("\n");
            sb.Append("  DsTransID: ").Append(DsTransID).Append("\n");
            sb.Append("  ExemptionIndicator: ").Append(ExemptionIndicator).Append("\n");
            sb.Append("  InPSD2Scope: ").Append(InPSD2Scope).Append("\n");
            sb.Append("  MessageCategory: ").Append(MessageCategory).Append("\n");
            sb.Append("  MessageVersion: ").Append(MessageVersion).Append("\n");
            sb.Append("  RiskScore: ").Append(RiskScore).Append("\n");
            sb.Append("  ThreeDSServerTransID: ").Append(ThreeDSServerTransID).Append("\n");
            sb.Append("  TransStatus: ").Append(TransStatus).Append("\n");
            sb.Append("  TransStatusReason: ").Append(TransStatusReason).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticationInfo);
        }

        /// <summary>
        /// Returns true if AuthenticationInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AcsTransId == input.AcsTransId ||
                    (this.AcsTransId != null &&
                    this.AcsTransId.Equals(input.AcsTransId))
                ) && 
                (
                    this.Challenge == input.Challenge ||
                    (this.Challenge != null &&
                    this.Challenge.Equals(input.Challenge))
                ) && 
                (
                    this.ChallengeIndicator == input.ChallengeIndicator ||
                    this.ChallengeIndicator.Equals(input.ChallengeIndicator)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DeviceChannel == input.DeviceChannel ||
                    this.DeviceChannel.Equals(input.DeviceChannel)
                ) && 
                (
                    this.DsTransID == input.DsTransID ||
                    (this.DsTransID != null &&
                    this.DsTransID.Equals(input.DsTransID))
                ) && 
                (
                    this.ExemptionIndicator == input.ExemptionIndicator ||
                    this.ExemptionIndicator.Equals(input.ExemptionIndicator)
                ) && 
                (
                    this.InPSD2Scope == input.InPSD2Scope ||
                    this.InPSD2Scope.Equals(input.InPSD2Scope)
                ) && 
                (
                    this.MessageCategory == input.MessageCategory ||
                    this.MessageCategory.Equals(input.MessageCategory)
                ) && 
                (
                    this.MessageVersion == input.MessageVersion ||
                    (this.MessageVersion != null &&
                    this.MessageVersion.Equals(input.MessageVersion))
                ) && 
                (
                    this.RiskScore == input.RiskScore ||
                    this.RiskScore.Equals(input.RiskScore)
                ) && 
                (
                    this.ThreeDSServerTransID == input.ThreeDSServerTransID ||
                    (this.ThreeDSServerTransID != null &&
                    this.ThreeDSServerTransID.Equals(input.ThreeDSServerTransID))
                ) && 
                (
                    this.TransStatus == input.TransStatus ||
                    this.TransStatus.Equals(input.TransStatus)
                ) && 
                (
                    this.TransStatusReason == input.TransStatusReason ||
                    this.TransStatusReason.Equals(input.TransStatusReason)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcsTransId != null)
                {
                    hashCode = (hashCode * 59) + this.AcsTransId.GetHashCode();
                }
                if (this.Challenge != null)
                {
                    hashCode = (hashCode * 59) + this.Challenge.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChallengeIndicator.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeviceChannel.GetHashCode();
                if (this.DsTransID != null)
                {
                    hashCode = (hashCode * 59) + this.DsTransID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExemptionIndicator.GetHashCode();
                hashCode = (hashCode * 59) + this.InPSD2Scope.GetHashCode();
                hashCode = (hashCode * 59) + this.MessageCategory.GetHashCode();
                if (this.MessageVersion != null)
                {
                    hashCode = (hashCode * 59) + this.MessageVersion.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RiskScore.GetHashCode();
                if (this.ThreeDSServerTransID != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSServerTransID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.TransStatusReason.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
