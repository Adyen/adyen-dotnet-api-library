/*
* Authentication webhooks
*
*
* The version of the OpenAPI document: 1
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.AcsWebhooks
{
    /// <summary>
    /// ChallengeInfo
    /// </summary>
    [DataContract(Name = "ChallengeInfo")]
    public partial class ChallengeInfo : IEquatable<ChallengeInfo>, IValidatableObject
    {
        /// <summary>
        /// Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).
        /// </summary>
        /// <value>Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChallengeCancelEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            [EnumMember(Value = "02")]
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            [EnumMember(Value = "03")]
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            [EnumMember(Value = "04")]
            _04 = 4,

            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            [EnumMember(Value = "05")]
            _05 = 5,

            /// <summary>
            /// Enum _06 for value: 06
            /// </summary>
            [EnumMember(Value = "06")]
            _06 = 6,

            /// <summary>
            /// Enum _07 for value: 07
            /// </summary>
            [EnumMember(Value = "07")]
            _07 = 7

        }


        /// <summary>
        /// Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).
        /// </summary>
        /// <value>Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).</value>
        [DataMember(Name = "challengeCancel", EmitDefaultValue = false)]
        public ChallengeCancelEnum? ChallengeCancel { get; set; }
        /// <summary>
        /// The flow used in the challenge. Possible values:  * **OTP_SMS**: one-time password (OTP) flow * **OOB**: out-of-band (OOB) flow
        /// </summary>
        /// <value>The flow used in the challenge. Possible values:  * **OTP_SMS**: one-time password (OTP) flow * **OOB**: out-of-band (OOB) flow</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlowEnum
        {
            /// <summary>
            /// Enum OTPSMS for value: OTP_SMS
            /// </summary>
            [EnumMember(Value = "OTP_SMS")]
            OTPSMS = 1,

            /// <summary>
            /// Enum OOB for value: OOB
            /// </summary>
            [EnumMember(Value = "OOB")]
            OOB = 2

        }


        /// <summary>
        /// The flow used in the challenge. Possible values:  * **OTP_SMS**: one-time password (OTP) flow * **OOB**: out-of-band (OOB) flow
        /// </summary>
        /// <value>The flow used in the challenge. Possible values:  * **OTP_SMS**: one-time password (OTP) flow * **OOB**: out-of-band (OOB) flow</value>
        [DataMember(Name = "flow", IsRequired = false, EmitDefaultValue = false)]
        public FlowEnum Flow { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengeInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChallengeInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengeInfo" /> class.
        /// </summary>
        /// <param name="challengeCancel">Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata)..</param>
        /// <param name="flow">The flow used in the challenge. Possible values:  * **OTP_SMS**: one-time password (OTP) flow * **OOB**: out-of-band (OOB) flow (required).</param>
        /// <param name="lastInteraction">The last time of interaction with the challenge. (required).</param>
        /// <param name="phoneNumber">The last four digits of the phone number used in the challenge..</param>
        /// <param name="resends">The number of times the one-time password (OTP) was resent during the challenge..</param>
        /// <param name="retries">The number of retries used in the challenge..</param>
        public ChallengeInfo(ChallengeCancelEnum? challengeCancel = default(ChallengeCancelEnum?), FlowEnum flow = default(FlowEnum), DateTime lastInteraction = default(DateTime), string phoneNumber = default(string), int? resends = default(int?), int? retries = default(int?))
        {
            this.Flow = flow;
            this.LastInteraction = lastInteraction;
            this.ChallengeCancel = challengeCancel;
            this.PhoneNumber = phoneNumber;
            this.Resends = resends;
            this.Retries = retries;
        }

        /// <summary>
        /// The last time of interaction with the challenge.
        /// </summary>
        /// <value>The last time of interaction with the challenge.</value>
        [DataMember(Name = "lastInteraction", IsRequired = false, EmitDefaultValue = false)]
        public DateTime LastInteraction { get; set; }

        /// <summary>
        /// The last four digits of the phone number used in the challenge.
        /// </summary>
        /// <value>The last four digits of the phone number used in the challenge.</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The number of times the one-time password (OTP) was resent during the challenge.
        /// </summary>
        /// <value>The number of times the one-time password (OTP) was resent during the challenge.</value>
        [DataMember(Name = "resends", EmitDefaultValue = false)]
        public int? Resends { get; set; }

        /// <summary>
        /// The number of retries used in the challenge.
        /// </summary>
        /// <value>The number of retries used in the challenge.</value>
        [DataMember(Name = "retries", EmitDefaultValue = false)]
        public int? Retries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChallengeInfo {\n");
            sb.Append("  ChallengeCancel: ").Append(ChallengeCancel).Append("\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("  LastInteraction: ").Append(LastInteraction).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Resends: ").Append(Resends).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChallengeInfo);
        }

        /// <summary>
        /// Returns true if ChallengeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ChallengeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChallengeInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChallengeCancel == input.ChallengeCancel ||
                    this.ChallengeCancel.Equals(input.ChallengeCancel)
                ) && 
                (
                    this.Flow == input.Flow ||
                    this.Flow.Equals(input.Flow)
                ) && 
                (
                    this.LastInteraction == input.LastInteraction ||
                    (this.LastInteraction != null &&
                    this.LastInteraction.Equals(input.LastInteraction))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Resends == input.Resends ||
                    this.Resends.Equals(input.Resends)
                ) && 
                (
                    this.Retries == input.Retries ||
                    this.Retries.Equals(input.Retries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ChallengeCancel.GetHashCode();
                hashCode = (hashCode * 59) + this.Flow.GetHashCode();
                if (this.LastInteraction != null)
                {
                    hashCode = (hashCode * 59) + this.LastInteraction.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Resends.GetHashCode();
                hashCode = (hashCode * 59) + this.Retries.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
