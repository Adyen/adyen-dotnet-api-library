/*
* Disputes API
*
*
* The version of the OpenAPI document: 30
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;

namespace Adyen.Model.Disputes
{
    /// <summary>
    /// DefenseReason
    /// </summary>
    [DataContract(Name = "DefenseReason")]
    public partial class DefenseReason : IEquatable<DefenseReason>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefenseReason" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DefenseReason() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DefenseReason" /> class.
        /// </summary>
        /// <param name="defenseDocumentTypes">Array of defense document types for a specific defense reason. Indicates the document types that you can submit to the schemes to defend this dispute, and whether they are required..</param>
        /// <param name="defenseReasonCode">The defense reason code that was selected to defend this dispute. (required).</param>
        /// <param name="satisfied">Indicates if sufficient defense material has been supplied. (required).</param>
        public DefenseReason(List<DefenseDocumentType> defenseDocumentTypes = default(List<DefenseDocumentType>), string defenseReasonCode = default(string), bool? satisfied = default(bool?))
        {
            this.DefenseReasonCode = defenseReasonCode;
            this.Satisfied = satisfied;
            this.DefenseDocumentTypes = defenseDocumentTypes;
        }

        /// <summary>
        /// Array of defense document types for a specific defense reason. Indicates the document types that you can submit to the schemes to defend this dispute, and whether they are required.
        /// </summary>
        /// <value>Array of defense document types for a specific defense reason. Indicates the document types that you can submit to the schemes to defend this dispute, and whether they are required.</value>
        [DataMember(Name = "defenseDocumentTypes", EmitDefaultValue = false)]
        public List<DefenseDocumentType> DefenseDocumentTypes { get; set; }

        /// <summary>
        /// The defense reason code that was selected to defend this dispute.
        /// </summary>
        /// <value>The defense reason code that was selected to defend this dispute.</value>
        [DataMember(Name = "defenseReasonCode", IsRequired = false, EmitDefaultValue = false)]
        public string DefenseReasonCode { get; set; }

        /// <summary>
        /// Indicates if sufficient defense material has been supplied.
        /// </summary>
        /// <value>Indicates if sufficient defense material has been supplied.</value>
        [DataMember(Name = "satisfied", IsRequired = false, EmitDefaultValue = false)]
        public bool? Satisfied { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DefenseReason {\n");
            sb.Append("  DefenseDocumentTypes: ").Append(DefenseDocumentTypes).Append("\n");
            sb.Append("  DefenseReasonCode: ").Append(DefenseReasonCode).Append("\n");
            sb.Append("  Satisfied: ").Append(Satisfied).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DefenseReason);
        }

        /// <summary>
        /// Returns true if DefenseReason instances are equal
        /// </summary>
        /// <param name="input">Instance of DefenseReason to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefenseReason input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DefenseDocumentTypes == input.DefenseDocumentTypes ||
                    this.DefenseDocumentTypes != null &&
                    input.DefenseDocumentTypes != null &&
                    this.DefenseDocumentTypes.SequenceEqual(input.DefenseDocumentTypes)
                ) && 
                (
                    this.DefenseReasonCode == input.DefenseReasonCode ||
                    (this.DefenseReasonCode != null &&
                    this.DefenseReasonCode.Equals(input.DefenseReasonCode))
                ) && 
                (
                    this.Satisfied == input.Satisfied ||
                    this.Satisfied.Equals(input.Satisfied)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefenseDocumentTypes != null)
                {
                    hashCode = (hashCode * 59) + this.DefenseDocumentTypes.GetHashCode();
                }
                if (this.DefenseReasonCode != null)
                {
                    hashCode = (hashCode * 59) + this.DefenseReasonCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Satisfied.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
