/*
* Adyen Payment API
*
*
* The version of the OpenAPI document: 68
* Contact: developer-experience@adyen.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Adyen.Model.Payments
{
    /// <summary>
    /// AdditionalDataLevel23
    /// </summary>
    [DataContract(Name = "AdditionalDataLevel23")]
    public partial class AdditionalDataLevel23 : IEquatable<AdditionalDataLevel23>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataLevel23" /> class.
        /// </summary>
        /// <param name="enhancedSchemeDataCustomerReference">Customer code, if supplied by a customer.  Encoding: ASCII.  Max length: 25 characters.  &gt; Required for Level 2 and Level 3 data..</param>
        /// <param name="enhancedSchemeDataDestinationCountryCode">Destination country code.  Encoding: ASCII.  Max length: 3 characters..</param>
        /// <param name="enhancedSchemeDataDestinationPostalCode">The postal code of a destination address.  Encoding: ASCII.  Max length: 10 characters.  &gt; Required for American Express..</param>
        /// <param name="enhancedSchemeDataDestinationStateProvinceCode">Destination state or province code.  Encoding: ASCII.Max length: 3 characters..</param>
        /// <param name="enhancedSchemeDataDutyAmount">Duty amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters..</param>
        /// <param name="enhancedSchemeDataFreightAmount">Shipping amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters..</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrCommodityCode">Item commodity code.  Encoding: ASCII.  Max length: 12 characters..</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrDescription">Item description.  Encoding: ASCII.  Max length: 26 characters..</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrDiscountAmount">Discount amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters..</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrProductCode">Product code.  Encoding: ASCII.  Max length: 12 characters..</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrQuantity">Quantity, specified as an integer value.  Value must be greater than 0.  Max length: 12 characters..</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrTotalAmount">Total amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters..</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrUnitOfMeasure">Item unit of measurement.  Encoding: ASCII.  Max length: 3 characters..</param>
        /// <param name="enhancedSchemeDataItemDetailLineItemNrUnitPrice">Unit price, specified in [minor units](https://docs.adyen.com/development-resources/currency-codes).  Max length: 12 characters..</param>
        /// <param name="enhancedSchemeDataOrderDate">Order date. * Format: &#x60;ddMMyy&#x60;  Encoding: ASCII.  Max length: 6 characters..</param>
        /// <param name="enhancedSchemeDataShipFromPostalCode">The postal code of a \&quot;ship-from\&quot; address.  Encoding: ASCII.  Max length: 10 characters..</param>
        /// <param name="enhancedSchemeDataTotalTaxAmount">Total tax amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters.  &gt; Required for Level 2 and Level 3 data..</param>
        public AdditionalDataLevel23(string enhancedSchemeDataCustomerReference = default(string), string enhancedSchemeDataDestinationCountryCode = default(string), string enhancedSchemeDataDestinationPostalCode = default(string), string enhancedSchemeDataDestinationStateProvinceCode = default(string), string enhancedSchemeDataDutyAmount = default(string), string enhancedSchemeDataFreightAmount = default(string), string enhancedSchemeDataItemDetailLineItemNrCommodityCode = default(string), string enhancedSchemeDataItemDetailLineItemNrDescription = default(string), string enhancedSchemeDataItemDetailLineItemNrDiscountAmount = default(string), string enhancedSchemeDataItemDetailLineItemNrProductCode = default(string), string enhancedSchemeDataItemDetailLineItemNrQuantity = default(string), string enhancedSchemeDataItemDetailLineItemNrTotalAmount = default(string), string enhancedSchemeDataItemDetailLineItemNrUnitOfMeasure = default(string), string enhancedSchemeDataItemDetailLineItemNrUnitPrice = default(string), string enhancedSchemeDataOrderDate = default(string), string enhancedSchemeDataShipFromPostalCode = default(string), string enhancedSchemeDataTotalTaxAmount = default(string))
        {
            this.EnhancedSchemeDataCustomerReference = enhancedSchemeDataCustomerReference;
            this.EnhancedSchemeDataDestinationCountryCode = enhancedSchemeDataDestinationCountryCode;
            this.EnhancedSchemeDataDestinationPostalCode = enhancedSchemeDataDestinationPostalCode;
            this.EnhancedSchemeDataDestinationStateProvinceCode = enhancedSchemeDataDestinationStateProvinceCode;
            this.EnhancedSchemeDataDutyAmount = enhancedSchemeDataDutyAmount;
            this.EnhancedSchemeDataFreightAmount = enhancedSchemeDataFreightAmount;
            this.EnhancedSchemeDataItemDetailLineItemNrCommodityCode = enhancedSchemeDataItemDetailLineItemNrCommodityCode;
            this.EnhancedSchemeDataItemDetailLineItemNrDescription = enhancedSchemeDataItemDetailLineItemNrDescription;
            this.EnhancedSchemeDataItemDetailLineItemNrDiscountAmount = enhancedSchemeDataItemDetailLineItemNrDiscountAmount;
            this.EnhancedSchemeDataItemDetailLineItemNrProductCode = enhancedSchemeDataItemDetailLineItemNrProductCode;
            this.EnhancedSchemeDataItemDetailLineItemNrQuantity = enhancedSchemeDataItemDetailLineItemNrQuantity;
            this.EnhancedSchemeDataItemDetailLineItemNrTotalAmount = enhancedSchemeDataItemDetailLineItemNrTotalAmount;
            this.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure = enhancedSchemeDataItemDetailLineItemNrUnitOfMeasure;
            this.EnhancedSchemeDataItemDetailLineItemNrUnitPrice = enhancedSchemeDataItemDetailLineItemNrUnitPrice;
            this.EnhancedSchemeDataOrderDate = enhancedSchemeDataOrderDate;
            this.EnhancedSchemeDataShipFromPostalCode = enhancedSchemeDataShipFromPostalCode;
            this.EnhancedSchemeDataTotalTaxAmount = enhancedSchemeDataTotalTaxAmount;
        }

        /// <summary>
        /// Customer code, if supplied by a customer.  Encoding: ASCII.  Max length: 25 characters.  &gt; Required for Level 2 and Level 3 data.
        /// </summary>
        /// <value>Customer code, if supplied by a customer.  Encoding: ASCII.  Max length: 25 characters.  &gt; Required for Level 2 and Level 3 data.</value>
        [DataMember(Name = "enhancedSchemeData.customerReference", EmitDefaultValue = false)]
        public string EnhancedSchemeDataCustomerReference { get; set; }

        /// <summary>
        /// Destination country code.  Encoding: ASCII.  Max length: 3 characters.
        /// </summary>
        /// <value>Destination country code.  Encoding: ASCII.  Max length: 3 characters.</value>
        [DataMember(Name = "enhancedSchemeData.destinationCountryCode", EmitDefaultValue = false)]
        public string EnhancedSchemeDataDestinationCountryCode { get; set; }

        /// <summary>
        /// The postal code of a destination address.  Encoding: ASCII.  Max length: 10 characters.  &gt; Required for American Express.
        /// </summary>
        /// <value>The postal code of a destination address.  Encoding: ASCII.  Max length: 10 characters.  &gt; Required for American Express.</value>
        [DataMember(Name = "enhancedSchemeData.destinationPostalCode", EmitDefaultValue = false)]
        public string EnhancedSchemeDataDestinationPostalCode { get; set; }

        /// <summary>
        /// Destination state or province code.  Encoding: ASCII.Max length: 3 characters.
        /// </summary>
        /// <value>Destination state or province code.  Encoding: ASCII.Max length: 3 characters.</value>
        [DataMember(Name = "enhancedSchemeData.destinationStateProvinceCode", EmitDefaultValue = false)]
        public string EnhancedSchemeDataDestinationStateProvinceCode { get; set; }

        /// <summary>
        /// Duty amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters.
        /// </summary>
        /// <value>Duty amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters.</value>
        [DataMember(Name = "enhancedSchemeData.dutyAmount", EmitDefaultValue = false)]
        public string EnhancedSchemeDataDutyAmount { get; set; }

        /// <summary>
        /// Shipping amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters.
        /// </summary>
        /// <value>Shipping amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters.</value>
        [DataMember(Name = "enhancedSchemeData.freightAmount", EmitDefaultValue = false)]
        public string EnhancedSchemeDataFreightAmount { get; set; }

        /// <summary>
        /// Item commodity code.  Encoding: ASCII.  Max length: 12 characters.
        /// </summary>
        /// <value>Item commodity code.  Encoding: ASCII.  Max length: 12 characters.</value>
        [DataMember(Name = "enhancedSchemeData.itemDetailLine[itemNr].commodityCode", EmitDefaultValue = false)]
        public string EnhancedSchemeDataItemDetailLineItemNrCommodityCode { get; set; }

        /// <summary>
        /// Item description.  Encoding: ASCII.  Max length: 26 characters.
        /// </summary>
        /// <value>Item description.  Encoding: ASCII.  Max length: 26 characters.</value>
        [DataMember(Name = "enhancedSchemeData.itemDetailLine[itemNr].description", EmitDefaultValue = false)]
        public string EnhancedSchemeDataItemDetailLineItemNrDescription { get; set; }

        /// <summary>
        /// Discount amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters.
        /// </summary>
        /// <value>Discount amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters.</value>
        [DataMember(Name = "enhancedSchemeData.itemDetailLine[itemNr].discountAmount", EmitDefaultValue = false)]
        public string EnhancedSchemeDataItemDetailLineItemNrDiscountAmount { get; set; }

        /// <summary>
        /// Product code.  Encoding: ASCII.  Max length: 12 characters.
        /// </summary>
        /// <value>Product code.  Encoding: ASCII.  Max length: 12 characters.</value>
        [DataMember(Name = "enhancedSchemeData.itemDetailLine[itemNr].productCode", EmitDefaultValue = false)]
        public string EnhancedSchemeDataItemDetailLineItemNrProductCode { get; set; }

        /// <summary>
        /// Quantity, specified as an integer value.  Value must be greater than 0.  Max length: 12 characters.
        /// </summary>
        /// <value>Quantity, specified as an integer value.  Value must be greater than 0.  Max length: 12 characters.</value>
        [DataMember(Name = "enhancedSchemeData.itemDetailLine[itemNr].quantity", EmitDefaultValue = false)]
        public string EnhancedSchemeDataItemDetailLineItemNrQuantity { get; set; }

        /// <summary>
        /// Total amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters.
        /// </summary>
        /// <value>Total amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters.</value>
        [DataMember(Name = "enhancedSchemeData.itemDetailLine[itemNr].totalAmount", EmitDefaultValue = false)]
        public string EnhancedSchemeDataItemDetailLineItemNrTotalAmount { get; set; }

        /// <summary>
        /// Item unit of measurement.  Encoding: ASCII.  Max length: 3 characters.
        /// </summary>
        /// <value>Item unit of measurement.  Encoding: ASCII.  Max length: 3 characters.</value>
        [DataMember(Name = "enhancedSchemeData.itemDetailLine[itemNr].unitOfMeasure", EmitDefaultValue = false)]
        public string EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure { get; set; }

        /// <summary>
        /// Unit price, specified in [minor units](https://docs.adyen.com/development-resources/currency-codes).  Max length: 12 characters.
        /// </summary>
        /// <value>Unit price, specified in [minor units](https://docs.adyen.com/development-resources/currency-codes).  Max length: 12 characters.</value>
        [DataMember(Name = "enhancedSchemeData.itemDetailLine[itemNr].unitPrice", EmitDefaultValue = false)]
        public string EnhancedSchemeDataItemDetailLineItemNrUnitPrice { get; set; }

        /// <summary>
        /// Order date. * Format: &#x60;ddMMyy&#x60;  Encoding: ASCII.  Max length: 6 characters.
        /// </summary>
        /// <value>Order date. * Format: &#x60;ddMMyy&#x60;  Encoding: ASCII.  Max length: 6 characters.</value>
        [DataMember(Name = "enhancedSchemeData.orderDate", EmitDefaultValue = false)]
        public string EnhancedSchemeDataOrderDate { get; set; }

        /// <summary>
        /// The postal code of a \&quot;ship-from\&quot; address.  Encoding: ASCII.  Max length: 10 characters.
        /// </summary>
        /// <value>The postal code of a \&quot;ship-from\&quot; address.  Encoding: ASCII.  Max length: 10 characters.</value>
        [DataMember(Name = "enhancedSchemeData.shipFromPostalCode", EmitDefaultValue = false)]
        public string EnhancedSchemeDataShipFromPostalCode { get; set; }

        /// <summary>
        /// Total tax amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters.  &gt; Required for Level 2 and Level 3 data.
        /// </summary>
        /// <value>Total tax amount, in minor units.  For example, 2000 means USD 20.00.  Max length: 12 characters.  &gt; Required for Level 2 and Level 3 data.</value>
        [DataMember(Name = "enhancedSchemeData.totalTaxAmount", EmitDefaultValue = false)]
        public string EnhancedSchemeDataTotalTaxAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDataLevel23 {\n");
            sb.Append("  EnhancedSchemeDataCustomerReference: ").Append(EnhancedSchemeDataCustomerReference).Append("\n");
            sb.Append("  EnhancedSchemeDataDestinationCountryCode: ").Append(EnhancedSchemeDataDestinationCountryCode).Append("\n");
            sb.Append("  EnhancedSchemeDataDestinationPostalCode: ").Append(EnhancedSchemeDataDestinationPostalCode).Append("\n");
            sb.Append("  EnhancedSchemeDataDestinationStateProvinceCode: ").Append(EnhancedSchemeDataDestinationStateProvinceCode).Append("\n");
            sb.Append("  EnhancedSchemeDataDutyAmount: ").Append(EnhancedSchemeDataDutyAmount).Append("\n");
            sb.Append("  EnhancedSchemeDataFreightAmount: ").Append(EnhancedSchemeDataFreightAmount).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrCommodityCode: ").Append(EnhancedSchemeDataItemDetailLineItemNrCommodityCode).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrDescription: ").Append(EnhancedSchemeDataItemDetailLineItemNrDescription).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrDiscountAmount: ").Append(EnhancedSchemeDataItemDetailLineItemNrDiscountAmount).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrProductCode: ").Append(EnhancedSchemeDataItemDetailLineItemNrProductCode).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrQuantity: ").Append(EnhancedSchemeDataItemDetailLineItemNrQuantity).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrTotalAmount: ").Append(EnhancedSchemeDataItemDetailLineItemNrTotalAmount).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure: ").Append(EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure).Append("\n");
            sb.Append("  EnhancedSchemeDataItemDetailLineItemNrUnitPrice: ").Append(EnhancedSchemeDataItemDetailLineItemNrUnitPrice).Append("\n");
            sb.Append("  EnhancedSchemeDataOrderDate: ").Append(EnhancedSchemeDataOrderDate).Append("\n");
            sb.Append("  EnhancedSchemeDataShipFromPostalCode: ").Append(EnhancedSchemeDataShipFromPostalCode).Append("\n");
            sb.Append("  EnhancedSchemeDataTotalTaxAmount: ").Append(EnhancedSchemeDataTotalTaxAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalDataLevel23);
        }

        /// <summary>
        /// Returns true if AdditionalDataLevel23 instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalDataLevel23 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalDataLevel23 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EnhancedSchemeDataCustomerReference == input.EnhancedSchemeDataCustomerReference ||
                    (this.EnhancedSchemeDataCustomerReference != null &&
                    this.EnhancedSchemeDataCustomerReference.Equals(input.EnhancedSchemeDataCustomerReference))
                ) && 
                (
                    this.EnhancedSchemeDataDestinationCountryCode == input.EnhancedSchemeDataDestinationCountryCode ||
                    (this.EnhancedSchemeDataDestinationCountryCode != null &&
                    this.EnhancedSchemeDataDestinationCountryCode.Equals(input.EnhancedSchemeDataDestinationCountryCode))
                ) && 
                (
                    this.EnhancedSchemeDataDestinationPostalCode == input.EnhancedSchemeDataDestinationPostalCode ||
                    (this.EnhancedSchemeDataDestinationPostalCode != null &&
                    this.EnhancedSchemeDataDestinationPostalCode.Equals(input.EnhancedSchemeDataDestinationPostalCode))
                ) && 
                (
                    this.EnhancedSchemeDataDestinationStateProvinceCode == input.EnhancedSchemeDataDestinationStateProvinceCode ||
                    (this.EnhancedSchemeDataDestinationStateProvinceCode != null &&
                    this.EnhancedSchemeDataDestinationStateProvinceCode.Equals(input.EnhancedSchemeDataDestinationStateProvinceCode))
                ) && 
                (
                    this.EnhancedSchemeDataDutyAmount == input.EnhancedSchemeDataDutyAmount ||
                    (this.EnhancedSchemeDataDutyAmount != null &&
                    this.EnhancedSchemeDataDutyAmount.Equals(input.EnhancedSchemeDataDutyAmount))
                ) && 
                (
                    this.EnhancedSchemeDataFreightAmount == input.EnhancedSchemeDataFreightAmount ||
                    (this.EnhancedSchemeDataFreightAmount != null &&
                    this.EnhancedSchemeDataFreightAmount.Equals(input.EnhancedSchemeDataFreightAmount))
                ) && 
                (
                    this.EnhancedSchemeDataItemDetailLineItemNrCommodityCode == input.EnhancedSchemeDataItemDetailLineItemNrCommodityCode ||
                    (this.EnhancedSchemeDataItemDetailLineItemNrCommodityCode != null &&
                    this.EnhancedSchemeDataItemDetailLineItemNrCommodityCode.Equals(input.EnhancedSchemeDataItemDetailLineItemNrCommodityCode))
                ) && 
                (
                    this.EnhancedSchemeDataItemDetailLineItemNrDescription == input.EnhancedSchemeDataItemDetailLineItemNrDescription ||
                    (this.EnhancedSchemeDataItemDetailLineItemNrDescription != null &&
                    this.EnhancedSchemeDataItemDetailLineItemNrDescription.Equals(input.EnhancedSchemeDataItemDetailLineItemNrDescription))
                ) && 
                (
                    this.EnhancedSchemeDataItemDetailLineItemNrDiscountAmount == input.EnhancedSchemeDataItemDetailLineItemNrDiscountAmount ||
                    (this.EnhancedSchemeDataItemDetailLineItemNrDiscountAmount != null &&
                    this.EnhancedSchemeDataItemDetailLineItemNrDiscountAmount.Equals(input.EnhancedSchemeDataItemDetailLineItemNrDiscountAmount))
                ) && 
                (
                    this.EnhancedSchemeDataItemDetailLineItemNrProductCode == input.EnhancedSchemeDataItemDetailLineItemNrProductCode ||
                    (this.EnhancedSchemeDataItemDetailLineItemNrProductCode != null &&
                    this.EnhancedSchemeDataItemDetailLineItemNrProductCode.Equals(input.EnhancedSchemeDataItemDetailLineItemNrProductCode))
                ) && 
                (
                    this.EnhancedSchemeDataItemDetailLineItemNrQuantity == input.EnhancedSchemeDataItemDetailLineItemNrQuantity ||
                    (this.EnhancedSchemeDataItemDetailLineItemNrQuantity != null &&
                    this.EnhancedSchemeDataItemDetailLineItemNrQuantity.Equals(input.EnhancedSchemeDataItemDetailLineItemNrQuantity))
                ) && 
                (
                    this.EnhancedSchemeDataItemDetailLineItemNrTotalAmount == input.EnhancedSchemeDataItemDetailLineItemNrTotalAmount ||
                    (this.EnhancedSchemeDataItemDetailLineItemNrTotalAmount != null &&
                    this.EnhancedSchemeDataItemDetailLineItemNrTotalAmount.Equals(input.EnhancedSchemeDataItemDetailLineItemNrTotalAmount))
                ) && 
                (
                    this.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure == input.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure ||
                    (this.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure != null &&
                    this.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure.Equals(input.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure))
                ) && 
                (
                    this.EnhancedSchemeDataItemDetailLineItemNrUnitPrice == input.EnhancedSchemeDataItemDetailLineItemNrUnitPrice ||
                    (this.EnhancedSchemeDataItemDetailLineItemNrUnitPrice != null &&
                    this.EnhancedSchemeDataItemDetailLineItemNrUnitPrice.Equals(input.EnhancedSchemeDataItemDetailLineItemNrUnitPrice))
                ) && 
                (
                    this.EnhancedSchemeDataOrderDate == input.EnhancedSchemeDataOrderDate ||
                    (this.EnhancedSchemeDataOrderDate != null &&
                    this.EnhancedSchemeDataOrderDate.Equals(input.EnhancedSchemeDataOrderDate))
                ) && 
                (
                    this.EnhancedSchemeDataShipFromPostalCode == input.EnhancedSchemeDataShipFromPostalCode ||
                    (this.EnhancedSchemeDataShipFromPostalCode != null &&
                    this.EnhancedSchemeDataShipFromPostalCode.Equals(input.EnhancedSchemeDataShipFromPostalCode))
                ) && 
                (
                    this.EnhancedSchemeDataTotalTaxAmount == input.EnhancedSchemeDataTotalTaxAmount ||
                    (this.EnhancedSchemeDataTotalTaxAmount != null &&
                    this.EnhancedSchemeDataTotalTaxAmount.Equals(input.EnhancedSchemeDataTotalTaxAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnhancedSchemeDataCustomerReference != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataCustomerReference.GetHashCode();
                }
                if (this.EnhancedSchemeDataDestinationCountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataDestinationCountryCode.GetHashCode();
                }
                if (this.EnhancedSchemeDataDestinationPostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataDestinationPostalCode.GetHashCode();
                }
                if (this.EnhancedSchemeDataDestinationStateProvinceCode != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataDestinationStateProvinceCode.GetHashCode();
                }
                if (this.EnhancedSchemeDataDutyAmount != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataDutyAmount.GetHashCode();
                }
                if (this.EnhancedSchemeDataFreightAmount != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataFreightAmount.GetHashCode();
                }
                if (this.EnhancedSchemeDataItemDetailLineItemNrCommodityCode != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataItemDetailLineItemNrCommodityCode.GetHashCode();
                }
                if (this.EnhancedSchemeDataItemDetailLineItemNrDescription != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataItemDetailLineItemNrDescription.GetHashCode();
                }
                if (this.EnhancedSchemeDataItemDetailLineItemNrDiscountAmount != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataItemDetailLineItemNrDiscountAmount.GetHashCode();
                }
                if (this.EnhancedSchemeDataItemDetailLineItemNrProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataItemDetailLineItemNrProductCode.GetHashCode();
                }
                if (this.EnhancedSchemeDataItemDetailLineItemNrQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataItemDetailLineItemNrQuantity.GetHashCode();
                }
                if (this.EnhancedSchemeDataItemDetailLineItemNrTotalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataItemDetailLineItemNrTotalAmount.GetHashCode();
                }
                if (this.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataItemDetailLineItemNrUnitOfMeasure.GetHashCode();
                }
                if (this.EnhancedSchemeDataItemDetailLineItemNrUnitPrice != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataItemDetailLineItemNrUnitPrice.GetHashCode();
                }
                if (this.EnhancedSchemeDataOrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataOrderDate.GetHashCode();
                }
                if (this.EnhancedSchemeDataShipFromPostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataShipFromPostalCode.GetHashCode();
                }
                if (this.EnhancedSchemeDataTotalTaxAmount != null)
                {
                    hashCode = (hashCode * 59) + this.EnhancedSchemeDataTotalTaxAmount.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
