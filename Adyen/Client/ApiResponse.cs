// <auto-generated>
/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Net;

namespace Adyen.Client
{
    /// <summary>
    /// Provides a non-generic contract for the ApiResponse wrapper.
    /// </summary>
    public partial interface IApiResponse
    {
        /// <summary>
        /// The IsSuccessStatusCode from the api response
        /// </summary>
        bool IsSuccessStatusCode { get; }

        /// <summary>
        /// Gets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        HttpStatusCode StatusCode { get; }

        /// <summary>
        /// The raw content of this response.
        /// </summary>
        string RawContent { get; }

        /// <summary>
        /// The DateTime when the request was retrieved.
        /// </summary>
        DateTime DownloadedAt { get; }

        /// <summary>
        /// The headers contained in the api response
        /// </summary>
        System.Net.Http.Headers.HttpResponseHeaders Headers { get; }

        /// <summary>
        /// The path used when making the request.
        /// </summary>
        string Path { get; }

        /// <summary>
        /// The reason phrase contained in the api response
        /// </summary>
        string ReasonPhrase { get; }

        /// <summary>
        /// The DateTime when the request was sent.
        /// </summary>
        DateTime RequestedAt { get; }

        /// <summary>
        /// The Uri used when making the request.
        /// </summary>
        Uri RequestUri { get; }
    }

    /// <summary>
    /// API Response
    /// </summary>
    public partial class ApiResponse : IApiResponse
    {
        /// <summary>
        /// Gets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        public HttpStatusCode StatusCode { get; }

        /// <summary>
        /// The raw data
        /// </summary>
        public string RawContent { get; protected set; }

        /// <summary>
        /// The IsSuccessStatusCode from the api response
        /// </summary>
        public bool IsSuccessStatusCode { get; }

        /// <summary>
        /// The reason phrase contained in the api response
        /// </summary>
        public string ReasonPhrase { get; }

        /// <summary>
        /// The headers contained in the api response
        /// </summary>
        public System.Net.Http.Headers.HttpResponseHeaders Headers { get; }

        /// <summary>
        /// The DateTime when the request was retrieved.
        /// </summary>
        public DateTime DownloadedAt { get; } = DateTime.UtcNow;

        /// <summary>
        /// The DateTime when the request was sent.
        /// </summary>
        public DateTime RequestedAt { get; }

        /// <summary>
        /// The path used when making the request.
        /// </summary>
        public string Path { get; }

        /// <summary>
        /// The Uri used when making the request.
        /// </summary>
        public Uri RequestUri { get; }

        /// <summary>
        /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
        /// </summary>
        protected System.Text.Json.JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// Construct the response using an HttpResponseMessage
        /// </summary>
        /// <param name="httpRequestMessage"></param>
        /// <param name="httpResponseMessage"></param>
        /// <param name="rawContent"></param>
        /// <param name="path"></param>
        /// <param name="requestedAt"></param>
        /// <param name="jsonSerializerOptions"></param>
        public ApiResponse(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
        {
            StatusCode = httpResponseMessage.StatusCode;
            Headers = httpResponseMessage.Headers;
            IsSuccessStatusCode = httpResponseMessage.IsSuccessStatusCode;
            ReasonPhrase = httpResponseMessage.ReasonPhrase;
            RawContent = rawContent;
            Path = path;
            RequestUri = httpRequestMessage.RequestUri;
            RequestedAt = requestedAt;
            _jsonSerializerOptions = jsonSerializerOptions;
            OnCreated(httpRequestMessage, httpResponseMessage);
        }

        partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
    }

    /// <summary>
    /// An interface for responses of type 
    /// </summary>
    /// <typeparam name="TType"></typeparam>
    public interface IBadRequest<TType> : IApiResponse
    {
        /// <summary>
        /// Deserializes the response if the response is BadRequest
        /// </summary>
        /// <returns></returns>
        TType BadRequest();

        /// <summary>
        /// Returns true if the response is BadRequest and the deserialized response is not null
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        bool TryBadRequest(out TType result);
    }

    /// <summary>
    /// An interface for responses of type 
    /// </summary>
    /// <typeparam name="TType"></typeparam>
    public interface IUnauthorized<TType> : IApiResponse
    {
        /// <summary>
        /// Deserializes the response if the response is Unauthorized
        /// </summary>
        /// <returns></returns>
        TType Unauthorized();

        /// <summary>
        /// Returns true if the response is Unauthorized and the deserialized response is not null
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        bool TryUnauthorized(out TType result);
    }

    /// <summary>
    /// An interface for responses of type 
    /// </summary>
    /// <typeparam name="TType"></typeparam>
    public interface IForbidden<TType> : IApiResponse
    {
        /// <summary>
        /// Deserializes the response if the response is Forbidden
        /// </summary>
        /// <returns></returns>
        TType Forbidden();

        /// <summary>
        /// Returns true if the response is Forbidden and the deserialized response is not null
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        bool TryForbidden(out TType result);
    }

    /// <summary>
    /// An interface for responses of type 
    /// </summary>
    /// <typeparam name="TType"></typeparam>
    public interface IOk<TType> : IApiResponse
    {
        /// <summary>
        /// Deserializes the response if the response is Ok
        /// </summary>
        /// <returns></returns>
        TType Ok();

        /// <summary>
        /// Returns true if the response is Ok and the deserialized response is not null
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        bool TryOk(out TType result);
    }

    /// <summary>
    /// An interface for responses of type 
    /// </summary>
    /// <typeparam name="TType"></typeparam>
    public interface IUnprocessableContent<TType> : IApiResponse
    {
        /// <summary>
        /// Deserializes the response if the response is UnprocessableContent
        /// </summary>
        /// <returns></returns>
        TType UnprocessableContent();

        /// <summary>
        /// Returns true if the response is UnprocessableContent and the deserialized response is not null
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        bool TryUnprocessableContent(out TType result);
    }

    /// <summary>
    /// An interface for responses of type 
    /// </summary>
    /// <typeparam name="TType"></typeparam>
    public interface IInternalServerError<TType> : IApiResponse
    {
        /// <summary>
        /// Deserializes the response if the response is InternalServerError
        /// </summary>
        /// <returns></returns>
        TType InternalServerError();

        /// <summary>
        /// Returns true if the response is InternalServerError and the deserialized response is not null
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        bool TryInternalServerError(out TType result);
    }

    /// <summary>
    /// An interface for responses of type 
    /// </summary>
    /// <typeparam name="TType"></typeparam>
    public interface ICreated<TType> : IApiResponse
    {
        /// <summary>
        /// Deserializes the response if the response is Created
        /// </summary>
        /// <returns></returns>
        TType Created();

        /// <summary>
        /// Returns true if the response is Created and the deserialized response is not null
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        bool TryCreated(out TType result);
    }
}
