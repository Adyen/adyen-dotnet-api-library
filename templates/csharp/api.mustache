{{>partial_header}}
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Adyen.Constants;
using Adyen.Model;
using Adyen.Service.Resource;
{{#hasImport}}using Adyen.{{modelPackage}};
{{/hasImport}}

namespace {{packageName}}.{{apiPackage}}
{
{{#operations}}
    /// <summary>
    /// {{classname}} Interface
    /// </summary>
    public interface I{{classname}}
    {
        {{#operation}}
{{>method_documentation}}
        {{#returnType}}
        /// <returns><see cref="{{{returnType}}}"/>.</returns>
        {{/returnType}}
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        {{{returnType}}}{{^returnType}}void{{/returnType}} {{#lambda.pascalcase}}{{vendorExtensions.x-methodName}}{{/lambda.pascalcase}}({{>api_parameters}});
        
        {{#supportsAsync}}
{{>method_documentation}}
        /// <param name="cancellationToken"> A CancellationToken enables cooperative cancellation between threads, thread pool work items, or Task objects.</param>{{#returnType}}
        /// <returns>Task of <see cref="{{{returnType}}}{{^returnType}}void{{/returnType}}"/>.</returns>{{/returnType}}
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        {{#returnType}}Task<{{{.}}}>{{/returnType}}{{^returnType}}Task{{/returnType}} {{#lambda.pascalcase}}{{vendorExtensions.x-methodName}}{{/lambda.pascalcase}}Async({{>api_parameters_async}});
        
        {{/supportsAsync}}
        {{/operation}}
    }
    {{/operations}}
    
    {{#operations}}
    /// <summary>
    /// Represents a collection of functions to interact with the {{classname}} API endpoints
    /// </summary>
    {{>visibility}} class {{classname}} : AbstractService, I{{classname}}
    {
        private readonly string _baseUrl;
        
        public {{classname}}(Client client) : base(client)
        {
            _baseUrl = CreateBaseUrl("{{{basePath}}}");
        }
        {{#operation}}
        
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        public {{{returnType}}}{{^returnType}}void{{/returnType}} {{#lambda.pascalcase}}{{vendorExtensions.x-methodName}}{{/lambda.pascalcase}}({{>api_parameters}})
        {
            {{#returnType}}return {{/returnType}}{{#lambda.pascalcase}}{{vendorExtensions.x-methodName}}{{/lambda.pascalcase}}Async({{>api_invoke}}).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        {{#supportsAsync}}
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        {{#returnType}}public async Task<{{{.}}}>{{/returnType}}{{^returnType}}public async Task{{/returnType}} {{#lambda.pascalcase}}{{vendorExtensions.x-methodName}}{{/lambda.pascalcase}}Async({{>api_parameters_async}})
        {
            {{#hasQueryParams}}
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            {{#queryParams}}
            if ({{paramName}} != null) queryParams.Add("{{baseName}}", {{paramName}}{{^isString}}.ToString(){{/isString}});
            {{/queryParams}}
            {{/hasQueryParams}}
            var endpoint = _baseUrl + {{#hasPathParams}}${{/hasPathParams}}"{{{path}}}"{{#hasQueryParams}} + ToQueryString(queryParams){{/hasQueryParams}};
            var resource = new ServiceResource(this, endpoint);
            {{#returnType}}return {{/returnType}}await resource.RequestAsync{{#returnType}}<{{returnType}}>{{/returnType}}({{#bodyParam}}{{paramName}}.ToJson(){{/bodyParam}}{{^bodyParam}}null{{/bodyParam}}, requestOptions, new HttpMethod("{{httpMethod}}"), cancellationToken).ConfigureAwait(false);
        }
        {{/supportsAsync}}
        {{/operation}}
    }
    {{/operations}}
}