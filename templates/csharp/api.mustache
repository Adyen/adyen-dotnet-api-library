{{>partial_header}}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Adyen.Service.Resource;
{{#hasImport}}using Adyen.{{modelPackage}};
{{/hasImport}}

namespace {{packageName}}.{{apiPackage}}
{
    {{#operations}}
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} class {{classname}} : AbstractService
    {
        public {{classname}}(Client client) : base(client) {}
    
        {{#operation}}
        /// <summary>
        /// {{{summary}}} {{{notes}}}
        /// </summary>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}/// <returns>{{{returnType}}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        public {{{returnType}}}{{^returnType}}void{{/returnType}} {{operationId}}({{>api_parameters}})
        {
            {{#returnType}}return {{/returnType}}{{operationId}}Async({{>api_invoke}}){{#returnType}}.GetAwaiter().GetResult(){{/returnType}};
        }

        {{#supportsAsync}}
        /// <summary>
        /// {{{summary}}} {{{notes}}}
        /// </summary>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}/// <returns>Task of {{{returnType}}}{{^returnType}}void{{/returnType}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        {{#returnType}}public async Task<{{{.}}}>{{/returnType}}{{^returnType}}public async Task{{/returnType}} {{operationId}}Async({{>api_parameters}})
        {
            var endpoint = {{#hasPathParams}}${{/hasPathParams}}"{{{path}}}";
            {{#hasQueryParams}}
            // Build the query string
            var queryParams = new Dictionary<string, string>();
            {{#queryParams}}
            if ({{paramName}} != null) queryParams.Add("{{baseName}}", {{paramName}}.ToString());
            {{/queryParams}}
            var queryString = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={kvp.Value}"));
            if (!string.IsNullOrEmpty(queryString)) endpoint += "?" + queryString;

            {{/hasQueryParams}}
            string jsonRequest = {{#bodyParam}}{{paramName}}.ToJson(){{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
            var resource = new {{#lambda.titlecase}}{{serviceName}}{{/lambda.titlecase}}Resource(this, endpoint);
            {{#returnType}}var jsonResult = {{/returnType}}await resource.RequestAsync(jsonRequest, null, new HttpMethod("{{httpMethod}}"));
            {{#returnType}}
            return JsonConvert.DeserializeObject<{{returnType}}>(jsonResult);
            {{/returnType}}
        }

        {{/supportsAsync}}
        {{/operation}}
    }
    {{/operations}}
}
