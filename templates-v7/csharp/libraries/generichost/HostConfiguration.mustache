{{>partial_header}}
{{#nrt}}
#nullable enable

{{/nrt}}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using {{packageName}}.{{apiPackage}};
using {{packageName}}.{{apiName}}.{{clientPackage}};
{{#models}}
{{#-first}}
using {{packageName}}.{{modelPackage}};
{{/-first}}
{{/models}}
using {{packageName}}.{{corePackageName}};
using {{packageName}}.{{corePackageName}}.Auth;
using {{packageName}}.{{corePackageName}}.Client;
using {{packageName}}.{{corePackageName}}.Options;
using {{packageName}}.{{corePackageName}}.Converters;

namespace {{packageName}}.{{apiName}}.{{clientPackage}}
{
    /// <summary>
    /// Provides hosting configuration for {{apiName}}
    /// </summary>
    {{>visibility}} class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();
        private readonly AdyenOptions _adyenOptions = new AdyenOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the HostConfiguration (custom JsonConverters, Events, HttpClient) with the necessary dependencies to communicate with the API.
        /// </summary>
        /// <param name="services"><see cref="IServiceCollection"/></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            if (_jsonOptions.Converters.FirstOrDefault(x => x.GetType() == typeof(JsonStringEnumConverter)) == null)
                _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            if (_jsonOptions.Converters.FirstOrDefault(x => x.GetType() == typeof(DateTimeJsonConverter)) == null)
                _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            if (_jsonOptions.Converters.FirstOrDefault(x => x.GetType() == typeof(DateTimeNullableJsonConverter)) == null)
                _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            {{#supportsDateOnly}}
            if (_jsonOptions.Converters.FirstOrDefault(x => x.GetType() == typeof(DateOnlyJsonConverter)) == null)
                _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            if (_jsonOptions.Converters.FirstOrDefault(x => x.GetType() == typeof(DateOnlyNullableJsonConverter)) == null)
                _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            {{/supportsDateOnly}}
            {{#models}}
            {{#model}}
            {{#isEnum}}
            _jsonOptions.Converters.Add(new {{datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}JsonConverter());
            _jsonOptions.Converters.Add(new {{datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}NullableJsonConverter());
            {{/isEnum}}
            {{^isEnum}}
            _jsonOptions.Converters.Add(new {{classname}}JsonConverter());
            {{/isEnum}}
            {{/model}}
            {{/models}}
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new{{^net60OrLater}} JsonSerializerOptionsProvider{{/net60OrLater}}(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            {{#useSourceGeneration}}

            {{#models}}
            {{#-first}}
            _jsonOptions.TypeInfoResolver = System.Text.Json.Serialization.Metadata.JsonTypeInfoResolver.Combine(
            {{/-first}}
            {{/models}}
                {{#lambda.joinLinesWithComma}}
                {{#models}}
                {{#model}}
                new {{datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}SerializationContext(){{#-last}},{{/-last}}
                {{/model}}
                {{/models}}
                {{/lambda.joinLinesWithComma}}
            {{#models}}
            {{#-last}}

                new System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver()
            );
            {{/-last}}
            {{/models}}

            {{/useSourceGeneration}}
            _services.AddSingleton<{{interfacePrefix}}ApiFactory, ApiFactory>();{{#apiInfo}}{{#apis}}
            _services.AddSingleton<{{classname}}Events>();{{/apis}}{{/apiInfo}}
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="clientAction"></param>
        /// <param name="buildeAction"></param>
        /// <returns><see cref="HostConfiguration"/></returns>
        public HostConfiguration Add{{apiName}}HttpClients(Action<System.Net.Http.HttpClient>{{nrt?}} clientAction = null, Action<IHttpClientBuilder>{{nrt?}} builderAction = null)
        {
            if (clientAction == null)
                clientAction = httpClient => httpClient.BaseAddress = new Uri(ClientUtils.GetHostUrl(_adyenOptions));

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            {{#apiInfo}}{{#apis}}builders.Add(_services.AddHttpClient<{{interfacePrefix}}{{classname}}, {{classname}}>(clientAction));
            {{/apis}}{{/apiInfo}}
            if (builderAction != null)
                foreach (IHttpClientBuilder instance in builders)
                    builderAction(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the <see cref="JsonSerializerOptions"/>.
        /// </summary>
        /// <param name="optionsAction"></param>
        /// <returns><see cref="HostConfiguration"/></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> optionsAction)
        {
            optionsAction(_jsonOptions);
            return this;
        }

        /// <summary>
        /// Configures the Adyen Settings, e.g. Environment, LiveEndpointPrefix and more.
        /// </summary>
        /// <param name="optionsAction"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureAdyenOptions(Action<AdyenOptions> optionsAction)
        {
            optionsAction(_adyenOptions);
            return this;
        }
                
        /// <summary>
        /// Adds tokens to the <see cref="IServiceCollection"/>.
        /// </summary>
        /// <typeparam name="TTokenBase"><see cref="TTokenBase"/></typeparam>
        /// <param name="token"><see cref="TTokenBase"/></param>
        /// <returns><see cref="HostConfiguration"/></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {            
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(new TTokenBase[]{ token });
            _services.AddSingleton(container);
            return this;
        }
        
        /// <summary>
        /// Adds the <see cref="ApiKeyToken"/> to the <see cref="IServiceCollection"/>.
        /// </summary>
        /// <param name="apiKey"><see cref="ApiKeyToken"/></param>
        /// <returns></returns>
        public HostConfiguration AddApiKey(ApiKeyToken apiKey)
        {
            return AddTokens(apiKey);
        }
        
        /// <summary>
        /// Adds the <see cref="TTokenProvider"/> to the <see cref="IServiceCollection"/>, used to retrieve the <see cref="TTokenBase"/>.
        /// </summary>
        /// <typeparam name="TTokenProvider"><see cref="TTokenProvider"/></typeparam>
        /// <typeparam name="TTokenBase"><see cref="TTokenBase"/></typeparam>
        /// <returns><see cref="HostConfiguration"/></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());
            return this;
        }
    }
}
