{{>partial_header}}
{{#nrt}}
#nullable enable

{{/nrt}}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using {{packageName}}.{{apiPackage}};
using {{packageName}}.{{apiName}}.{{clientPackage}};
{{#models}}
{{#-first}}
using {{packageName}}.{{modelPackage}};
{{/-first}}
{{/models}}
using {{packageName}}.{{corePackageName}};
using {{packageName}}.{{corePackageName}}.Auth;
using {{packageName}}.{{corePackageName}}.Client;
using {{packageName}}.{{corePackageName}}.Options;
using {{packageName}}.{{corePackageName}}.Converters;

namespace {{packageName}}.{{apiName}}.{{clientPackage}}
{
    /// <summary>
    /// Provides hosting configuration for {{apiName}}
    /// </summary>
    {{>visibility}} class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();
        private readonly AdyenOptions _adyenOptions = new AdyenOptions();

        internal bool HttpClientsAdded { get; private set; }
        
        /// <summary>
        /// The base path of the API, it includes the http(s)-scheme, the host domain name, and the base path.
        /// This value can change when `ConfigureAdyenOptions` is called in <see cref="HostConfiguration"/>). The new value will be based on the <see cref="AdyenOptions"/>.<see cref="AdyenEnvironment"/>.
        /// </summary>
        public static string BASE_URL = "{{{basePath}}}";

        /// <summary>
        /// The relative path of the API after the `.com`.
        /// </summary>
        public static string RELATIVE_URL = "{{contextPath}}";
        
        /// <summary>
        /// Instantiates the HostConfiguration (custom JsonConverters, Events, HttpClient) with the necessary dependencies to communicate with the API.
        /// </summary>
        /// <param name="services"><see cref="IServiceCollection"/></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            if (_jsonOptions.Converters.FirstOrDefault(x => x.GetType() == typeof(JsonStringEnumConverter)) == null)
                _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            if (_jsonOptions.Converters.FirstOrDefault(x => x.GetType() == typeof(DateTimeJsonConverter)) == null)
                _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            if (_jsonOptions.Converters.FirstOrDefault(x => x.GetType() == typeof(DateTimeNullableJsonConverter)) == null)
                _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            {{#supportsDateOnly}}
            if (_jsonOptions.Converters.FirstOrDefault(x => x.GetType() == typeof(DateOnlyJsonConverter)) == null)
                _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            if (_jsonOptions.Converters.FirstOrDefault(x => x.GetType() == typeof(DateOnlyNullableJsonConverter)) == null)
                _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            {{/supportsDateOnly}}
            {{#models}}
            {{#model}}
            {{#isEnum}}
            _jsonOptions.Converters.Add(new {{datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}JsonConverter());
            _jsonOptions.Converters.Add(new {{datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}NullableJsonConverter());
            {{/isEnum}}
            {{^isEnum}}
            _jsonOptions.Converters.Add(new {{classname}}JsonConverter());
            {{/isEnum}}
            {{/model}}
            {{/models}}
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new{{^net60OrLater}} JsonSerializerOptionsProvider{{/net60OrLater}}(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            {{#useSourceGeneration}}

            {{#models}}
            {{#-first}}
            _jsonOptions.TypeInfoResolver = System.Text.Json.Serialization.Metadata.JsonTypeInfoResolver.Combine(
            {{/-first}}
            {{/models}}
                {{#lambda.joinLinesWithComma}}
                {{#models}}
                {{#model}}
                new {{datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}SerializationContext(){{#-last}},{{/-last}}
                {{/model}}
                {{/models}}
                {{/lambda.joinLinesWithComma}}
            {{#models}}
            {{#-last}}

                new System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver()
            );
            {{/-last}}
            {{/models}}

            {{/useSourceGeneration}}
            _services.AddSingleton<{{interfacePrefix}}ApiFactory, ApiFactory>();{{#apiInfo}}{{#apis}}
            _services.AddSingleton<{{classname}}Events>();{{/apis}}{{/apiInfo}}
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="clientAction"></param>
        /// <param name="buildeAction"></param>
        /// <returns><see cref="HostConfiguration"/></returns>
        public HostConfiguration Add{{apiName}}HttpClients(Action<System.Net.Http.HttpClient>{{nrt?}} clientAction = null, Action<IHttpClientBuilder>{{nrt?}} builderAction = null)
        {
            if (clientAction == null)
                clientAction = httpClient => httpClient.BaseAddress = new Uri(ConstructHostUrl());

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            {{#apiInfo}}{{#apis}}builders.Add(_services.AddHttpClient<{{interfacePrefix}}{{classname}}, {{classname}}>(clientAction));
            {{/apis}}{{/apiInfo}}
            if (builderAction != null)
                foreach (IHttpClientBuilder instance in builders)
                    builderAction(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the <see cref="JsonSerializerOptions"/>.
        /// </summary>
        /// <param name="optionsAction"></param>
        /// <returns><see cref="HostConfiguration"/></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> optionsAction)
        {
            optionsAction(_jsonOptions);
            
            return this;
        }

        /// <summary>
        /// Configures the Adyen Settings, e.g. Environment, LiveEndpointPrefix and more.
        /// </summary>
        /// <param name="optionsAction"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureAdyenOptions(Action<AdyenOptions> optionsAction)
        {
            optionsAction(_adyenOptions);
            {{#hasApiKeyMethods}}
            _services.AddSingleton<ITokenProvider<ApiKeyToken>>(
                new TokenProvider<ApiKeyToken>(
                    new ApiKeyToken(_adyenOptions.AdyenApiKey, ClientUtils.ApiKeyHeader.X_API_Key, "")
                )
            );
            {{/hasApiKeyMethods}}
            return this;
        }

        /// <summary>
        /// Constructs the Host URL based on the selected <see cref="AdyenEnvironment"/>, used to populate the `HttpClient.BaseAddress`.
        /// </summary>
        /// <returns>String with the Host URL.</returns>
        /// <exception cref="ArgumentOutOfRangeException"></exception>
        private string ConstructHostUrl()
        {
            if (_adyenOptions.Environment == {{packageName}}Environment.Live)
                return ConstructLiveUrl(_adyenOptions.LiveEndpointUrlPrefix, BASE_URL);
            
            // Some Adyen OpenApi Specifications use the live-url, instead of the test-url, this line replaces "-live" with "-test".
            // If you need to override this URL, you can do so by replacing the BASE_URL in ClientUtils.cs.
            if (_adyenOptions.Environment == {{packageName}}Environment.Test)
                return BASE_URL.Replace("-live", "-test");
            
            throw new ArgumentOutOfRangeException(_adyenOptions.Environment.ToString());
        }
        
        /// <summary>
        /// Construct LIVE BaseUrl, add the liveEndpointUrlPrefix it's the Checkout API or the Classic Payment API.
        /// This helper function can be removed when all URLs (test & live) are included in the Adyen OpenApi Specifications: https://github.com/Adyen/adyen-openapi.
        /// </summary>
        /// <param name="liveEndpointUrlPrefix">The Live EndpointUrlPrefix.</param>
        /// <param name="url">The Base URL <see cref="BASE_URL"/>.</param>
        /// <returns>baseUrl</returns>
        /// <exception cref="InvalidOperationException"></exception>
        private string ConstructLiveUrl(string liveEndpointUrlPrefix, string url)
        {
            // Change base url for Live environment
            if (url.Contains("pal-")) // Payment API prefix
            {
                if (liveEndpointUrlPrefix == null)
                {
                    throw new InvalidOperationException("LiveEndpointUrlPrefix is null - please configure your AdyenOptions.LiveEndpointUrlPrefix");
                }
                
                url = url.Replace("https://pal-test.adyen.com/pal/servlet/",
                    "https://" + liveEndpointUrlPrefix + "-pal-live.adyenpayments.com/pal/servlet/");
            }
            else if (url.Contains("checkout-")) // Checkout API prefix
            {
                if (liveEndpointUrlPrefix == null)
                {
                    throw new InvalidOperationException("LiveEndpointUrlPrefix is null - please configure your AdyenOptions.LiveEndpointUrlPrefix");
                }

                if (url.Contains("possdk"))
                {
                    url = url.Replace("https://checkout-test.adyen.com/",
                        "https://" + liveEndpointUrlPrefix + "-checkout-live.adyenpayments.com/");   
                }
                else
                {
                    url = url.Replace("https://checkout-test.adyen.com/",
                        "https://" + liveEndpointUrlPrefix + "-checkout-live.adyenpayments.com/checkout/");
                }
            }
            
            // If no prefix is required, we replace "test" -> "live"
            url = url.Replace("-test", "-live");
            return url;
        }
    }
}
