{{>partial_header}}
{{#nrt}}
#nullable enable

{{/nrt}}
using System;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using {{packageName}}.{{apiName}};
using {{packageName}}.{{apiName}}.{{clientPackage}};

namespace {{packageName}}.{{apiName}}.Extensions
{
    /// <summary>
    /// Extension methods for IHostBuilder.
    /// </summary>
    {{>visibility}} static class HostBuilderExtensions
    {
        {{^hasAuthMethods}}
        /// <summary>
        /// Add the API services to your host builder.
        /// </summary>
        /// <param name="builder"></param>
        public static IHostBuilder Configure{{apiName}}(this IHostBuilder builder)
        {
            builder.ConfigureServices((context, services) => 
            {
                HostConfiguration config = new HostConfiguration(services);

                ServiceCollectionExtensions.Add{{apiName}}Services(services, config);
            });

            return builder;
        }

        {{/hasAuthMethods}}
        /// <summary>
        /// Add the API services to your host builder.
        /// </summary>
        /// <param name="builder"></param>
        /// <param name="options"></param>
        public static IHostBuilder Configure{{apiName}}(this IHostBuilder builder, Action<HostBuilderContext, IServiceCollection, HostConfiguration> options)
        {
            builder.ConfigureServices((context, services) => 
            {
                HostConfiguration config = new HostConfiguration(services);

                options(context, services, config);

                ServiceCollectionExtensions.Add{{apiName}}Services(services, config);
            });

            return builder;
        }
    }
}
