{{#lambda.trimLineBreaks}}
// <auto-generated>
{{>partial_header}}

{{#nrt}}
#nullable enable

{{/nrt}}
using System;
using System.Collections.Generic;
{{#net80OrLater}}
{{#lambda.uniqueLines}}
{{#operations}}
{{#operation}}
{{#vendorExtensions.x-set-cookie}}
using System.Linq;
{{/vendorExtensions.x-set-cookie}}
{{/operation}}
{{/operations}}
{{/lambda.uniqueLines}}
{{/net80OrLater}}
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using {{packageName}}.{{corePackageName}};
using {{packageName}}.{{corePackageName}}.Auth;
using {{packageName}}.{{corePackageName}}.Client;
using {{packageName}}.{{apiName}}.{{clientPackage}};
{{#hasImport}}
using {{packageName}}.{{modelPackage}};
{{/hasImport}}
{{^netStandard}}
using System.Diagnostics.CodeAnalysis;
{{/netStandard}}

namespace {{packageName}}.{{apiPackage}}
{
    {{#operations}}
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    {{>visibility}} interface {{interfacePrefix}}{{classname}} : {{interfacePrefix}}{{packageName}}ApiService
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        {{classname}}Events Events { get; }

        {{#operation}}
        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}
        /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="{{interfacePrefix}}{{operationId}}ApiResponse"/>&gt;</returns>
        {{#isDeprecated}}
        [Obsolete("{{#vendorExtensions.x-deprecatedInVersion}}Deprecated since {{#appName}}{{{.}}}{{/appName}} v{{#vendorExtensions.x-deprecatedInVersion}}{{.}}{{/vendorExtensions.x-deprecatedInVersion}}.{{/vendorExtensions.x-deprecatedInVersion}}{{#vendorExtensions.x-deprecatedMessage}} {{{.}}}{{/vendorExtensions.x-deprecatedMessage}}")]
        {{/isDeprecated}}
        Task<{{interfacePrefix}}{{operationId}}ApiResponse> {{operationId}}Async({{>OperationSignature}});

        {{/operation}}
    }
    {{#operation}}
    {{^vendorExtensions.x-duplicates}}
    {{#responses}}
    {{#-first}}

    /// <summary>
    /// The <see cref="{{interfacePrefix}}{{operationId}}ApiResponse"/>
    /// </summary>
    {{>visibility}} interface {{interfacePrefix}}{{operationId}}ApiResponse : {{#lambda.joinWithComma}}{{packageName}}.{{corePackageName}}.{{clientPackage}}.{{interfacePrefix}}ApiResponse  {{#responses}}{{#dataType}}{{interfacePrefix}}{{vendorExtensions.x-http-status}}<{{#isModel}}{{^containerType}}{{packageName}}.{{modelPackage}}.{{/containerType}}{{/isModel}}{{{dataType}}}{{#nrt}}?{{/nrt}}{{^nrt}}{{#vendorExtensions.x-is-value-type}}?{{/vendorExtensions.x-is-value-type}}{{/nrt}}>  {{/dataType}}{{/responses}}{{/lambda.joinWithComma}}
    {
        {{#responses}}
        {{#vendorExtensions.x-http-status-is-default}}
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool Is{{vendorExtensions.x-http-status}} { get; }
        {{/vendorExtensions.x-http-status-is-default}}
        {{^vendorExtensions.x-http-status-is-default}}
        /// <summary>
        /// Returns true if the response is {{code}} {{vendorExtensions.x-http-status}}
        /// </summary>
        /// <returns></returns>
        bool Is{{vendorExtensions.x-http-status}} { get; }
        {{/vendorExtensions.x-http-status-is-default}}
        {{^-last}}

        {{/-last}}
        {{/responses}}
    }
    {{/-first}}
    {{/responses}}
    {{/vendorExtensions.x-duplicates}}
    {{/operation}}

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} class {{classname}}Events
    {
        {{#lambda.trimTrailingWithNewLine}}
        {{#operation}}
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>{{nrt?}} On{{operationId}};

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>{{nrt?}} OnError{{operationId}};

        internal void ExecuteOn{{operationId}}({{#vendorExtensions.x-duplicates}}{{.}}{{/vendorExtensions.x-duplicates}}{{^vendorExtensions.x-duplicates}}{{classname}}{{/vendorExtensions.x-duplicates}}.{{operationId}}ApiResponse apiResponse)
        {
            On{{operationId}}?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnError{{operationId}}(Exception exception)
        {
            OnError{{operationId}}?.Invoke(this, new ExceptionEventArgs(exception));
        }

        {{/operation}}
        {{/lambda.trimTrailingWithNewLine}}
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} sealed partial class {{classname}} : {{interfacePrefix}}{{classname}}
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<{{classname}}> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public System.Net.Http.HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public {{classname}}Events Events { get; }{{#hasApiKeyMethods}}

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }{{/hasApiKeyMethods}}{{#hasHttpBearerMethods}}

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }{{/hasHttpBearerMethods}}{{#hasHttpSignatureMethods}}

        /// <summary>
        /// A token provider of type <see cref="HttpSignatureTokenProvider"/>
        /// </summary>
        public TokenProvider<HttpSignatureToken> HttpSignatureTokenProvider { get; }{{/hasHttpSignatureMethods}}{{#hasOAuthMethods}}

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }{{/hasOAuthMethods}}

        {{#net80OrLater}}
        {{#lambda.unique}}
        {{#operation}}
        {{#vendorExtensions.x-set-cookie}}
        /// <summary>
        /// The token cookie container
        /// </summary>
        public {{packageName}}.{{corePackageName}}.Auth.CookieContainer CookieContainer { get; }

        {{/vendorExtensions.x-set-cookie}}
        {{/operation}}
        {{/lambda.unique}}
        {{/net80OrLater}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class.
        /// </summary>
        /// <returns></returns>
        public {{classname}}(ILogger<{{classname}}> logger, ILoggerFactory loggerFactory, System.Net.Http.HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, {{classname}}Events {{#lambda.camelcase_sanitize_param}}{{classname}}Events{{/lambda.camelcase_sanitize_param}}{{#hasApiKeyMethods}},
            TokenProvider<ApiKeyToken> apiKeyProvider{{/hasApiKeyMethods}}{{#hasHttpBearerMethods}},
            TokenProvider<BearerToken> bearerTokenProvider{{/hasHttpBearerMethods}}{{#hasHttpSignatureMethods}},
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider{{/hasHttpSignatureMethods}}{{#hasOAuthMethods}},
            TokenProvider<OAuthToken> oauthTokenProvider{{/hasOAuthMethods}}{{#net80OrLater}}{{#operation}}{{#lambda.uniqueLines}}{{#vendorExtensions.x-set-cookie}},
            {{packageName}}.{{clientPackage}}.CookieContainer cookieContainer{{/vendorExtensions.x-set-cookie}}{{/lambda.uniqueLines}}{{/operation}}{{/net80OrLater}})
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<{{classname}}>();
            HttpClient = httpClient;
            Events = {{#lambda.camelcase_sanitize_param}}{{classname}}Events{{/lambda.camelcase_sanitize_param}};{{#hasApiKeyMethods}}
            ApiKeyProvider = apiKeyProvider;{{/hasApiKeyMethods}}{{#hasHttpBearerMethods}}
            BearerTokenProvider = bearerTokenProvider;{{/hasHttpBearerMethods}}{{#hasHttpSignatureMethods}}
            HttpSignatureTokenProvider = httpSignatureTokenProvider;{{/hasHttpSignatureMethods}}{{#hasOAuthMethods}}
            OauthTokenProvider = oauthTokenProvider;{{/hasOAuthMethods}}{{#net80OrLater}}{{#operation}}{{#lambda.uniqueLines}}{{#vendorExtensions.x-set-cookie}}
            CookieContainer = cookieContainer;{{/vendorExtensions.x-set-cookie}}{{/lambda.uniqueLines}}{{/operation}}{{/net80OrLater}}
        }
        {{#operation}}

        {{#allParams}}
        {{#-first}}
        partial void Format{{operationId}}({{#allParams}}{{#isPrimitiveType}}ref {{/isPrimitiveType}}{{^required}}Option<{{/required}}{{{dataType}}}{{>NullConditionalParameter}}{{^required}}>{{/required}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}});

        {{/-first}}
        {{/allParams}}
        {{#vendorExtensions.x-has-not-nullable-reference-types}}
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        {{#vendorExtensions.x-not-nullable-reference-types}}
        /// <param name="{{paramName}}"></param>
        {{/vendorExtensions.x-not-nullable-reference-types}}
        /// <returns></returns>
        private void Validate{{operationId}}({{#vendorExtensions.x-not-nullable-reference-types}}{{^required}}Option<{{/required}}{{{dataType}}}{{>NullConditionalParameter}}{{^required}}>{{/required}} {{paramName}}{{^-last}}, {{/-last}}{{/vendorExtensions.x-not-nullable-reference-types}})
        {
            {{#lambda.trimTrailingWithNewLine}}
            {{#vendorExtensions.x-not-nullable-reference-types}}
            {{#required}}
            {{^vendorExtensions.x-is-value-type}}
            if ({{paramName}} == null)
                throw new ArgumentNullException(nameof({{paramName}}));

            {{/vendorExtensions.x-is-value-type}}
            {{/required}}
            {{^required}}
            {{^vendorExtensions.x-is-value-type}}
            if ({{paramName}}.IsSet && {{paramName}}.Value == null)
                throw new ArgumentNullException(nameof({{paramName}}));

            {{/vendorExtensions.x-is-value-type}}
            {{/required}}
            {{/vendorExtensions.x-not-nullable-reference-types}}
            {{/lambda.trimTrailingWithNewLine}}
        }

        {{/vendorExtensions.x-has-not-nullable-reference-types}}
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        {{#allParams}}
        /// <param name="{{paramName}}"></param>
        {{/allParams}}
        private void After{{operationId}}DefaultImplementation({{#lambda.joinWithComma}}{{interfacePrefix}}{{operationId}}ApiResponse apiResponse  {{#allParams}}{{^required}}Option<{{/required}}{{{dataType}}}{{>NullConditionalParameter}}{{^required}}>{{/required}} {{paramName}}  {{/allParams}}{{/lambda.joinWithComma}})
        {
            bool suppressDefaultLog = false;
            After{{operationId}}({{#lambda.joinWithComma}}ref suppressDefaultLog  apiResponse  {{#allParams}}{{paramName}}  {{/allParams}}{{/lambda.joinWithComma}});
{{>AfterOperationDefaultImplementation}}
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponse"></param>
        {{#allParams}}
        /// <param name="{{paramName}}"></param>
        {{/allParams}}
        partial void After{{operationId}}({{#lambda.joinWithComma}}ref bool suppressDefaultLog  {{interfacePrefix}}{{operationId}}ApiResponse apiResponse  {{#allParams}}{{^required}}Option<{{/required}}{{{dataType}}}{{>NullConditionalParameter}}{{^required}}>{{/required}} {{paramName}}  {{/allParams}}{{/lambda.joinWithComma}});

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        {{#allParams}}
        /// <param name="{{paramName}}"></param>
        {{/allParams}}
        private void OnError{{operationId}}DefaultImplementation({{#lambda.joinWithComma}}Exception exception  string pathFormat  string path  {{#allParams}}{{^required}}Option<{{/required}}{{{dataType}}}{{>NullConditionalParameter}}{{^required}}>{{/required}} {{paramName}}  {{/allParams}}{{/lambda.joinWithComma}})
        {
            bool suppressDefaultLog = false;
            OnError{{operationId}}({{#lambda.joinWithComma}}ref suppressDefaultLog  exception  pathFormat  path  {{#allParams}}{{paramName}}  {{/allParams}}{{/lambda.joinWithComma}});
{{>OnErrorDefaultImplementation}}

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        {{#allParams}}
        /// <param name="{{paramName}}"></param>
        {{/allParams}}
        partial void OnError{{operationId}}({{#lambda.joinWithComma}}ref bool suppressDefaultLog  Exception exception  string pathFormat  string path  {{#allParams}}{{^required}}Option<{{/required}}{{{dataType}}}{{>NullConditionalParameter}}{{^required}}>{{/required}} {{paramName}}  {{/allParams}}{{/lambda.joinWithComma}});

        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}
        /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="{{interfacePrefix}}{{operationId}}ApiResponse"/>&gt;</returns>
        public async Task<{{interfacePrefix}}{{operationId}}ApiResponse> {{operationId}}Async({{>OperationSignature}})
        {
            {{#lambda.trimLineBreaks}}
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                {{#vendorExtensions.x-has-not-nullable-reference-types}}
                Validate{{operationId}}({{#vendorExtensions.x-not-nullable-reference-types}}{{paramName}}{{^-last}}, {{/-last}}{{/vendorExtensions.x-not-nullable-reference-types}});

                {{/vendorExtensions.x-has-not-nullable-reference-types}}
                {{#allParams}}
                {{#-first}}
                Format{{operationId}}({{#allParams}}{{#isPrimitiveType}}ref {{/isPrimitiveType}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});

                {{/-first}}
                {{/allParams}}
                using (HttpRequestMessage httpRequestMessage = new HttpRequestMessage())
                {
                    {{^servers}}
                    uriBuilder.Host = HttpClient.BaseAddress{{nrt!}}.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "{{{path}}}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "{{{path}}}");
                    {{/servers}}
                    {{#servers}}
                    {{#-first}}
                    Uri url = httpRequestMessage.RequestUri = new Uri("{{url}}");
                    uriBuilder.Host = url.Authority;
                    uriBuilder.Scheme = url.Scheme;
                    uriBuilder.Path = url.AbsolutePath;
                    {{/-first}}
                    {{/servers}}
                    {{#constantParams}}
                    {{#isPathParam}}
                    // Set client side default value of Path Param "{{baseName}}".
                    uriBuilder.Path = uriBuilder.Path.Replace("%7B{{baseName}}%7D", Uri.EscapeDataString(ClientUtils.ParameterToString({{#_enum}}"{{{.}}}"{{/_enum}}))); // Constant path parameter
                    {{/isPathParam}}
                    {{/constantParams}}
                    {{#pathParams}}
                    uriBuilder.Path = uriBuilder.Path.Replace("%7B{{baseName}}%7D", Uri.EscapeDataString({{paramName}}.ToString()));
                    {{#-last}}

                    {{/-last}}
                    {{/pathParams}}
                    {{#queryParams}}
                    {{#-first}}

                    System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                    {{/-first}}
                    {{/queryParams}}
                    {{^queryParams}}
                    {{#authMethods}}
                    {{#isApiKey}}
                    {{#isKeyInQuery}}

                    System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                    {{/isKeyInQuery}}
                    {{/isApiKey}}
                    {{/authMethods}}
                    {{/queryParams}}
                    {{#queryParams}}
                    {{#required}}
                    {{#-first}}

                    {{/-first}}
                    parseQueryString["{{baseName}}"] = ClientUtils.ParameterToString({{paramName}});
                    {{/required}}
                    {{/queryParams}}

                    {{#constantParams}}
                    {{#isQueryParam}}
                    // Set client side default value of Query Param "{{baseName}}".
                    parseQueryString["{{baseName}}"] = ClientUtils.ParameterToString({{#_enum}}"{{{.}}}"{{/_enum}}); // Constant query parameter
                    {{/isQueryParam}}
                    {{/constantParams}}
                    {{#queryParams}}
                    {{^required}}
                    if ({{paramName}}.IsSet)
                        parseQueryString["{{baseName}}"] = ClientUtils.ParameterToString({{paramName}}.Value);

                    {{/required}}
                    {{#-last}}
                    uriBuilder.Query = parseQueryString.ToString();

                    {{/-last}}
                    {{/queryParams}}
                    {{#constantParams}}
                    {{#isHeaderParam}}
                    // Set client side default value of Header Param "{{baseName}}".
                    httpRequestMessage.Headers.Add("{{baseName}}", ClientUtils.ParameterToString({{#_enum}}"{{{.}}}"{{/_enum}})); // Constant header parameter
                    {{/isHeaderParam}}
                    {{/constantParams}}
                    {{#headerParams}}
                    {{#required}}
                    httpRequestMessage.Headers.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}}));

                    {{/required}}
                    {{^required}}
                    if ({{paramName}}.IsSet)
                        httpRequestMessage.Headers.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}}.Value));

                    {{/required}}
                    {{/headerParams}}
                    {{#formParams}}
                    {{#-first}}
                    MultipartContent multipartContent = new MultipartContent();

                    httpRequestMessage.Content = multipartContent;

                    List<KeyValuePair<string{{nrt?}}, string{{nrt?}}>> formParameters = new List<KeyValuePair<string{{nrt?}}, string{{nrt?}}>>();

                    multipartContent.Add(new FormUrlEncodedContent(formParameters));{{/-first}}{{^isFile}}{{#required}}

                    formParameters.Add(new KeyValuePair<string{{nrt?}}, string{{nrt?}}>("{{baseName}}", ClientUtils.ParameterToString({{paramName}})));

                    {{/required}}
                    {{^required}}
                    if ({{paramName}}.IsSet)
                        formParameters.Add(new KeyValuePair<string{{nrt?}}, string{{nrt?}}>("{{baseName}}", ClientUtils.ParameterToString({{paramName}}.Value)));

                    {{/required}}
                    {{/isFile}}
                    {{#isFile}}
                    {{#required}}
                    multipartContent.Add(new StreamContent({{paramName}}));

                    {{/required}}
                    {{^required}}
                    if ({{paramName}}.IsSet)
                        multipartContent.Add(new StreamContent({{paramName}}.Value));

                    {{/required}}
                    {{/isFile}}
                    {{/formParams}}
                    {{#bodyParam}}
                    {{#required}}
                    httpRequestMessage.Content = ({{paramName}}{{^required}}.Value{{/required}} as object) is System.IO.Stream stream
                        ? httpRequestMessage.Content = new StreamContent(stream)
                        : httpRequestMessage.Content = new StringContent(JsonSerializer.Serialize({{paramName}}{{^required}}.Value{{/required}}, _jsonSerializerOptions));
                    {{/required}}
                    {{^required}}
                    if ({{paramName}}.IsSet)
                        httpRequestMessage.Content = ({{paramName}}{{^required}}.Value{{/required}} as object) is System.IO.Stream stream
                            ? httpRequestMessage.Content = new StreamContent(stream)
                            : httpRequestMessage.Content = new StringContent(JsonSerializer.Serialize({{paramName}}{{^required}}.Value{{/required}}, _jsonSerializerOptions));
                    {{/required}}

                    {{/bodyParam}}
                    {{#authMethods}}
                    {{#-first}}
                    List<TokenBase> tokenBases = new List<TokenBase>();
                    {{/-first}}
                    {{#isApiKey}}
                    {{! Only use API Keys that are appended to the HTTP-headers }}
                    {{^isKeyInCookie}}
                    {{#isKeyInHeader}}
                    ApiKeyToken apiKeyToken{{-index}} = (ApiKeyToken) await ApiKeyProvider.GetAsync("{{keyParamName}}", cancellationToken).ConfigureAwait(false);
                    tokenBases.Add(apiKeyToken{{-index}});
                    apiKeyToken{{-index}}.UseInHeader(httpRequestMessage);
                    {{/isKeyInHeader}}
                    {{/isKeyInCookie}}
                    {{/isApiKey}}
                    {{/authMethods}}
                    httpRequestMessage.RequestUri = uriBuilder.Uri;
                    {{#authMethods}}
                    {{#isBasicBearer}}
                    BearerToken bearerToken{{-index}} = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                    tokenBases.Add(bearerToken{{-index}});
                    bearerToken{{-index}}.UseInHeader(httpRequestMessage, "{{keyParamName}}");
                    {{/isBasicBearer}}
                    {{#isOAuth}}
                    OAuthToken oauthToken{{-index}} = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                    tokenBases.Add(oauthToken{{-index}});
                    oauthToken{{-index}}.UseInHeader(httpRequestMessage, "{{keyParamName}}");
                    {{/isOAuth}}
                    {{#isHttpSignature}}

                    HttpSignatureToken httpSignatureToken{{-index}} = (HttpSignatureToken) await HttpSignatureTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBases.Add(httpSignatureToken{{-index}});

                    if (httpRequestMessage.Content != null) {
                        string requestBody = await httpRequestMessage.Content.ReadAsStringAsync({{#net60OrLater}}cancellationToken{{/net60OrLater}}).ConfigureAwait(false);

                        httpSignatureToken{{-index}}.UseInHeader(httpRequestMessage, requestBody, cancellationToken);
                    }
                    {{/isHttpSignature}}
                    {{/authMethods}}
                    {{#consumes}}
                    {{#-first}}

                    {{=<% %>=}}
                    string[] contentTypes = new string[] {<%/-first%>
                    <%={{ }}=%>
                        "{{{mediaType}}}"{{^-last}},{{/-last}}{{#-last}}
                    };
                    {{/-last}}
                    {{/consumes}}
                    {{#consumes}}
                    {{#-first}}

                    string{{nrt?}} contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null && httpRequestMessage.Content != null)
                        httpRequestMessage.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);

                    {{/-first}}
                    {{/consumes}}
                    {{#produces}}
                    {{#-first}}

                    {{=<% %>=}}
                    string[] accepts = new string[] {<%/-first%>
                    <%={{ }}=%>
                        "{{{mediaType}}}"{{^-last}},{{/-last}}{{#-last}}
                    };
                    {{/-last}}
                    {{/produces}}
                    {{#produces}}
                    {{#-first}}

                    string{{nrt?}} accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        httpRequestMessage.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    {{/-first}}
                    {{/produces}}
                    {{#net60OrLater}}

                    httpRequestMessage.Method = HttpMethod.{{#lambda.titlecase}}{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{/lambda.titlecase}};
                    {{/net60OrLater}}
                    {{^net60OrLater}}
                    httpRequestMessage.Method = new HttpMethod("{{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}}");
                    {{/net60OrLater}}

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessage = await HttpClient.SendAsync(httpRequestMessage, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<{{#vendorExtensions.x-duplicates}}{{.}}.{{/vendorExtensions.x-duplicates}}{{operationId}}ApiResponse> apiResponseLogger = LoggerFactory.CreateLogger<{{#vendorExtensions.x-duplicates}}{{.}}.{{/vendorExtensions.x-duplicates}}{{operationId}}ApiResponse>();
                        {{#vendorExtensions.x-duplicates}}{{.}}.{{/vendorExtensions.x-duplicates}}{{operationId}}ApiResponse apiResponse;

                        switch ((int)httpResponseMessage.StatusCode) {
                            {{#responses}}
                            {{#isBinary}}
                            case ({{code}}):
                            {{/isBinary}}
                            {{/responses}}
                            {{#responses}}
                            {{#isBinary}}
                            {{#-first}}
                            {
                                byte[] responseBytesArray = await httpResponseMessage.Content.ReadAsByteArrayAsync({{#net60OrLater}}cancellationToken{{/net60OrLater}}).ConfigureAwait(false);
                                System.IO.Stream responseContentStream = new System.IO.MemoryStream(responseBytesArray);
                                apiResponse = new{{^net60OrLater}} {{operationId}}ApiResponse{{/net60OrLater}}(apiResponseLogger, httpRequestMessage, httpResponseMessage, responseContentStream, "{{{path}}}", requestedAt, _jsonSerializerOptions);

                                break;
                            }
                            {{/-first}}
                            {{/isBinary}}
                            {{/responses}}
                            default: {
                                string responseContent = await httpResponseMessage.Content.ReadAsStringAsync({{#net60OrLater}}cancellationToken{{/net60OrLater}}).ConfigureAwait(false);
                                apiResponse = new{{^net60OrLater}} {{operationId}}ApiResponse{{/net60OrLater}}(apiResponseLogger, httpRequestMessage, httpResponseMessage, responseContent, "{{{path}}}", requestedAt, _jsonSerializerOptions);

                                break;
                            }
                        }

                        After{{operationId}}DefaultImplementation({{#lambda.joinWithComma}}apiResponse  {{#allParams}}{{paramName}}  {{/allParams}}{{/lambda.joinWithComma}});

                        Events.ExecuteOn{{operationId}}(apiResponse);

                        {{#authMethods}}
                        {{#-first}}
                        if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBase in tokenBases)
                                tokenBase.BeginRateLimit();

                        {{/-first}}
                        {{/authMethods}}
                        {{#net80OrLater}}
                        {{#responses}}
                        {{#vendorExtensions.x-set-cookie}}
                        if (httpResponseMessage.StatusCode == (HttpStatusCode) {{code}} && httpResponseMessage.Headers.TryGetValues("Set-Cookie", out var cookieHeaders))
                        {
                            foreach(string cookieHeader in cookieHeaders)
                            {
                                IList<Microsoft.Net.Http.Headers.SetCookieHeaderValue> setCookieHeaderValues = Microsoft.Net.Http.Headers.SetCookieHeaderValue.ParseList(cookieHeaders.ToArray());

                                foreach(Microsoft.Net.Http.Headers.SetCookieHeaderValue setCookieHeaderValue in setCookieHeaderValues)
                                {
                                    Cookie cookie = new Cookie(setCookieHeaderValue.Name.ToString(), setCookieHeaderValue.Value.ToString())
                                    {
                                        HttpOnly = setCookieHeaderValue.HttpOnly
                                    };

                                    if (setCookieHeaderValue.Expires.HasValue)
                                        cookie.Expires = setCookieHeaderValue.Expires.Value.UtcDateTime;

                                    if (setCookieHeaderValue.Path.HasValue)
                                        cookie.Path = setCookieHeaderValue.Path.Value;

                                    if (setCookieHeaderValue.Domain.HasValue)
                                        cookie.Domain = setCookieHeaderValue.Domain.Value;

                                    CookieContainer.Value.Add(new Uri($"{uriBuilder.Scheme}://{uriBuilder.Host}"), cookie);
                                }
                            }
                        }

                        {{/vendorExtensions.x-set-cookie}}
                        {{/responses}}
                        {{/net80OrLater}}
                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnError{{operationId}}DefaultImplementation({{#lambda.joinWithComma}}e  "{{{path}}}"  uriBuilder.Path  {{#allParams}}{{paramName}}  {{/allParams}}{{/lambda.joinWithComma}});
                Events.ExecuteOnError{{operationId}}(e);
                throw;
            }
            {{/lambda.trimLineBreaks}}
        }
        {{^vendorExtensions.x-duplicates}}
        {{#responses}}
        {{#-first}}

        /// <summary>
        /// The <see cref="{{operationId}}ApiResponse"/>
        /// </summary>
        {{>visibility}} partial class {{operationId}}ApiResponse : {{packageName}}.{{corePackageName}}.{{clientPackage}}.ApiResponse, {{interfacePrefix}}{{operationId}}ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<{{operationId}}ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="{{operationId}}ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public {{operationId}}ApiResponse(ILogger<{{operationId}}ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="{{operationId}}ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public {{operationId}}ApiResponse(ILogger<{{operationId}}ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            {{#responses}}

            {{#vendorExtensions.x-http-status-is-default}}
            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool Is{{vendorExtensions.x-http-status}} => {{#vendorExtensions.x-only-default}}true{{/vendorExtensions.x-only-default}}{{^vendorExtensions.x-only-default}}{{#lambda.joinConditions}}{{#responses}}{{^vendorExtensions.x-http-status-is-default}}!Is{{vendorExtensions.x-http-status}}  {{/vendorExtensions.x-http-status-is-default}}{{/responses}}{{/lambda.joinConditions}}{{/vendorExtensions.x-only-default}};
            {{/vendorExtensions.x-http-status-is-default}}
            {{^vendorExtensions.x-http-status-is-default}}
            /// <summary>
            /// Returns true if the response is {{code}} {{vendorExtensions.x-http-status}}
            /// </summary>
            /// <returns></returns>
            {{#vendorExtensions.x-http-status-range}}
            public bool Is{{vendorExtensions.x-http-status}}
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return {{vendorExtensions.x-http-status-range}}00 >= statusCode && {{vendorExtensions.x-http-status-range}}99 <= statusCode;
                }
            }
            {{/vendorExtensions.x-http-status-range}}
            {{^vendorExtensions.x-http-status-range}}
            public bool Is{{vendorExtensions.x-http-status}} => {{code}} == (int)StatusCode;
            {{/vendorExtensions.x-http-status-range}}
            {{/vendorExtensions.x-http-status-is-default}}
            {{#dataType}}

            /// <summary>
            /// Deserializes the response if the response is {{code}} {{vendorExtensions.x-http-status}}
            /// </summary>
            /// <returns></returns>
            public {{#isModel}}{{^containerType}}{{packageName}}.{{modelPackage}}.{{/containerType}}{{/isModel}}{{{dataType}}}{{#nrt}}?{{/nrt}}{{^nrt}}{{#vendorExtensions.x-is-value-type}}?{{/vendorExtensions.x-is-value-type}}{{/nrt}} {{vendorExtensions.x-http-status}}()
            {
                {{#lambda.trimTrailingWithNewLine}}
                {{#lambda.indent4}}
                {{>AsModel}}{{! prevent indent}}
                {{/lambda.indent4}}
                {{/lambda.trimTrailingWithNewLine}}
            }

            /// <summary>
            /// Returns true if the response is {{code}} {{vendorExtensions.x-http-status}} and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDeserialize{{vendorExtensions.x-http-status}}Response({{#net60OrLater}}[NotNullWhen(true)]{{/net60OrLater}}out {{#isModel}}{{^containerType}}{{packageName}}.{{modelPackage}}.{{/containerType}}{{/isModel}}{{{dataType}}}{{#nrt}}?{{/nrt}}{{^nrt}}{{#vendorExtensions.x-is-value-type}}?{{/vendorExtensions.x-is-value-type}}{{/nrt}} result)
            {
                result = null;

                try
                {
                    result = {{vendorExtensions.x-http-status}}();
                } 
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode){{#vendorExtensions.x-http-status-range}}{{.}}{{/vendorExtensions.x-http-status-range}}{{^vendorExtensions.x-http-status-range}}{{code}}{{/vendorExtensions.x-http-status-range}});
                }

                return result != null;
            }
            {{/dataType}}
            {{#-last}}

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                {{#lambda.trimTrailingWithNewLine}}
                {{#lambda.indent4}}
                {{>OnDeserializationError}}{{! prevent indent}}
                {{/lambda.indent4}}
                {{/lambda.trimTrailingWithNewLine}}
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
            {{/-last}}
            {{/responses}}
        }
        {{/-first}}
        {{/responses}}
        {{/vendorExtensions.x-duplicates}}
        {{/operation}}
    }
    {{/operations}}
}
{{/lambda.trimLineBreaks}}
