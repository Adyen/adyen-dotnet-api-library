{{>partial_header}}
{{#nrt}}
#nullable enable

{{/nrt}}
using System;
using System.Linq;
using Microsoft.Extensions.DependencyInjection;
using {{packageName}}.{{corePackageName}}.Auth;
using {{packageName}}.{{apiName}}.{{clientPackage}};

namespace {{packageName}}.{{apiName}}.Extensions
{
    /// <summary>
    /// Extension methods for ServiceCollection
    /// </summary>
    {{>visibility}} static class ServiceCollectionExtensions
    {
        {{^hasAuthMethods}}
        /// <summary>
        /// Add the {{packageName}} {{apiName}} API services to your host builder.
        /// </summary>
        /// <param name="services"></param>
        public static void Add{{apiName}}Services(this IServiceCollection services)
        {
            HostConfiguration config = new{{^net70OrLater}} HostConfiguration{{/net70OrLater}}(services);
            Add{{apiName}}Services(services, config);
        }

        {{/hasAuthMethods}}

        /// <summary>
        /// Add the {{packageName}} {{apiName}} API services to your host builder.
        /// </summary>
        /// <param name="services"></param>
        /// <param name="options"></param>
        public static void Add{{apiName}}Services(this IServiceCollection services, Action<HostConfiguration> options)
        {
            HostConfiguration config = new{{^net70OrLater}} HostConfiguration{{/net70OrLater}}(services);
            options(config);
            Add{{apiName}}Services(services, config);
        }

        internal static void Add{{apiName}}Services(IServiceCollection services, HostConfiguration host)
        {
            if (!host.HttpClientsAdded)
                host.Add{{apiName}}HttpClients();
        }
    }
}
