diff --git a/Adyen.Test/PaymentMethodDetailsTest.cs b/Adyen.Test/PaymentMethodDetailsTest.cs
index a6a7b1f6..2612d880 100644
--- a/Adyen.Test/PaymentMethodDetailsTest.cs
+++ b/Adyen.Test/PaymentMethodDetailsTest.cs
@@ -63,24 +63,6 @@ namespace Adyen.Test
             Assert.AreEqual(paymentRequest.ReturnUrl, "https://your-company.com/checkout?shopperOrder=12xy..");
         }
 
-        [TestMethod]
-        public void TestGiropayPaymentMethod()
-        {
-            var paymentRequest = new PaymentRequest
-            {
-                MerchantAccount = "YOUR_MERCHANT_ACCOUNT",
-                Amount = new Amount("EUR", 1000),
-                Reference = "giro pay test",
-                PaymentMethod = new CheckoutPaymentMethod(new GiropayDetails()),
-                ReturnUrl = "https://your-company.com/checkout?shopperOrder=12xy.."
-            };
-            var paymentMethodDetails = (GiropayDetails)paymentRequest.PaymentMethod.ActualInstance;
-            Assert.AreEqual(paymentMethodDetails.Type, GiropayDetails.TypeEnum.Giropay);
-            Assert.AreEqual(paymentRequest.MerchantAccount, "YOUR_MERCHANT_ACCOUNT");
-            Assert.AreEqual(paymentRequest.Reference, "giro pay test");
-            Assert.AreEqual(paymentRequest.ReturnUrl, "https://your-company.com/checkout?shopperOrder=12xy..");
-        }
-
         [TestMethod]
         public void TestGooglePayPaymentMethod()
         {
diff --git a/Adyen/Model/Checkout/AdditionalDataAirline.cs b/Adyen/Model/Checkout/AdditionalDataAirline.cs
index 2eaaba38..76180793 100644
--- a/Adyen/Model/Checkout/AdditionalDataAirline.cs
+++ b/Adyen/Model/Checkout/AdditionalDataAirline.cs
@@ -42,33 +42,33 @@ namespace Adyen.Model.Checkout
         /// </summary>
         /// <param name="airlineAgencyInvoiceNumber">The reference number for the invoice, issued by the agency. * Encoding: ASCII * minLength: 1 character * maxLength: 6 characters.</param>
         /// <param name="airlineAgencyPlanName">The two-letter agency plan identifier. * Encoding: ASCII * minLength: 2 characters * maxLength: 2 characters.</param>
-        /// <param name="airlineAirlineCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros..</param>
-        /// <param name="airlineAirlineDesignatorCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros..</param>
+        /// <param name="airlineAirlineCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros..</param>
+        /// <param name="airlineAirlineDesignatorCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces * Must not be all zeros..</param>
         /// <param name="airlineBoardingFee">The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 18 characters.</param>
         /// <param name="airlineComputerizedReservationSystem">The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters.</param>
         /// <param name="airlineCustomerReferenceNumber">The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not be all spaces.</param>
         /// <param name="airlineDocumentType">A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket &#x3D; 01 * minLength: 2 characters * maxLength: 2 characters.</param>
         /// <param name="airlineFlightDate">The flight departure date. Local time &#x60;(HH:mm)&#x60; is optional. * Date format: &#x60;yyyy-MM-dd&#x60; * Date and time format: &#x60;yyyy-MM-dd HH:mm&#x60; * minLength: 10 characters * maxLength: 16 characters.</param>
         /// <param name="airlineIssueDate">The date that the ticket was issued to the passenger. * minLength: 6 characters * maxLength: 6 characters * Date format: YYMMDD.</param>
-        /// <param name="airlineLegCarrierCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros..</param>
-        /// <param name="airlineLegClassOfTravel">A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces *Must not be all zeros..</param>
+        /// <param name="airlineLegCarrierCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces * Must not be all zeros..</param>
+        /// <param name="airlineLegClassOfTravel">A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces * Must not be all zeros..</param>
         /// <param name="airlineLegDateOfTravel">  Date and time of travel in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format &#x60;yyyy-MM-dd HH:mm&#x60;. * Encoding: ASCII * minLength: 16 characters * maxLength: 16 characters.</param>
-        /// <param name="airlineLegDepartAirport">The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros..</param>
-        /// <param name="airlineLegDepartTax">The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 *Must not be all zeros..</param>
-        /// <param name="airlineLegDestinationCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros..</param>
-        /// <param name="airlineLegFareBaseCode">The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces *Must not be all zeros..</param>
-        /// <param name="airlineLegFlightNumber">The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces *Must not be all zeros..</param>
+        /// <param name="airlineLegDepartAirport">The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros..</param>
+        /// <param name="airlineLegDepartTax">The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 * Must not be all zeros..</param>
+        /// <param name="airlineLegDestinationCode">The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros..</param>
+        /// <param name="airlineLegFareBaseCode">The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces * Must not be all zeros..</param>
+        /// <param name="airlineLegFlightNumber">The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces * Must not be all zeros..</param>
         /// <param name="airlineLegStopOverCode">A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character.</param>
         /// <param name="airlinePassengerDateOfBirth">The passenger&#39;s date of birth.  Date format: &#x60;yyyy-MM-dd&#x60; * minLength: 10 * maxLength: 10.</param>
         /// <param name="airlinePassengerFirstName">The passenger&#39;s first name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII.</param>
         /// <param name="airlinePassengerLastName">The passenger&#39;s last name. &gt; This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII.</param>
         /// <param name="airlinePassengerPhoneNumber">The passenger&#39;s phone number, including country code. This is an alphanumeric field that can include the &#39;+&#39; and &#39;-&#39; signs. * Encoding: ASCII * minLength: 3 characters * maxLength: 30 characters.</param>
         /// <param name="airlinePassengerTravellerType">The IATA passenger type code (PTC). * Encoding: ASCII * minLength: 3 characters * maxLength: 6 characters.</param>
-        /// <param name="airlinePassengerName">The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  *Must not be all zeros. (required).</param>
+        /// <param name="airlinePassengerName">The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  * Must not be all zeros. (required).</param>
         /// <param name="airlineTicketIssueAddress">The address of the organization that issued the ticket. * minLength: 0 characters * maxLength: 16 characters.</param>
-        /// <param name="airlineTicketNumber">The ticket&#39;s unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces *Must not be all zeros..</param>
-        /// <param name="airlineTravelAgencyCode">The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces *Must not be all zeros..</param>
-        /// <param name="airlineTravelAgencyName">The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces *Must not be all zeros..</param>
+        /// <param name="airlineTicketNumber">The ticket&#39;s unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces * Must not be all zeros..</param>
+        /// <param name="airlineTravelAgencyCode">The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces * Must not be all zeros..</param>
+        /// <param name="airlineTravelAgencyName">The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces * Must not be all zeros..</param>
         public AdditionalDataAirline(string airlineAgencyInvoiceNumber = default(string), string airlineAgencyPlanName = default(string), string airlineAirlineCode = default(string), string airlineAirlineDesignatorCode = default(string), string airlineBoardingFee = default(string), string airlineComputerizedReservationSystem = default(string), string airlineCustomerReferenceNumber = default(string), string airlineDocumentType = default(string), string airlineFlightDate = default(string), string airlineIssueDate = default(string), string airlineLegCarrierCode = default(string), string airlineLegClassOfTravel = default(string), string airlineLegDateOfTravel = default(string), string airlineLegDepartAirport = default(string), string airlineLegDepartTax = default(string), string airlineLegDestinationCode = default(string), string airlineLegFareBaseCode = default(string), string airlineLegFlightNumber = default(string), string airlineLegStopOverCode = default(string), string airlinePassengerDateOfBirth = default(string), string airlinePassengerFirstName = default(string), string airlinePassengerLastName = default(string), string airlinePassengerPhoneNumber = default(string), string airlinePassengerTravellerType = default(string), string airlinePassengerName = default(string), string airlineTicketIssueAddress = default(string), string airlineTicketNumber = default(string), string airlineTravelAgencyCode = default(string), string airlineTravelAgencyName = default(string))
         {
             this.AirlinePassengerName = airlinePassengerName;
@@ -117,16 +117,16 @@ namespace Adyen.Model.Checkout
         public string AirlineAgencyPlanName { get; set; }
 
         /// <summary>
-        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.
+        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.
         /// </summary>
-        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.</value>
+        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM &#x3D; 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.</value>
         [DataMember(Name = "airline.airline_code", EmitDefaultValue = false)]
         public string AirlineAirlineCode { get; set; }
 
         /// <summary>
-        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros.
+        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces * Must not be all zeros.
         /// </summary>
-        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros.</value>
+        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces * Must not be all zeros.</value>
         [DataMember(Name = "airline.airline_designator_code", EmitDefaultValue = false)]
         public string AirlineAirlineDesignatorCode { get; set; }
 
@@ -173,16 +173,16 @@ namespace Adyen.Model.Checkout
         public string AirlineIssueDate { get; set; }
 
         /// <summary>
-        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros.
+        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces * Must not be all zeros.
         /// </summary>
-        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros.</value>
+        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM &#x3D; KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces * Must not be all zeros.</value>
         [DataMember(Name = "airline.leg.carrier_code", EmitDefaultValue = false)]
         public string AirlineLegCarrierCode { get; set; }
 
         /// <summary>
-        /// A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces *Must not be all zeros.
+        /// A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces * Must not be all zeros.
         /// </summary>
-        /// <value>A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces *Must not be all zeros.</value>
+        /// <value>A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces * Must not be all zeros.</value>
         [DataMember(Name = "airline.leg.class_of_travel", EmitDefaultValue = false)]
         public string AirlineLegClassOfTravel { get; set; }
 
@@ -194,37 +194,37 @@ namespace Adyen.Model.Checkout
         public string AirlineLegDateOfTravel { get; set; }
 
         /// <summary>
-        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.
+        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.
         /// </summary>
-        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.</value>
+        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam &#x3D; AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.</value>
         [DataMember(Name = "airline.leg.depart_airport", EmitDefaultValue = false)]
         public string AirlineLegDepartAirport { get; set; }
 
         /// <summary>
-        /// The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 *Must not be all zeros.
+        /// The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 * Must not be all zeros.
         /// </summary>
-        /// <value>The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 *Must not be all zeros.</value>
+        /// <value>The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 * Must not be all zeros.</value>
         [DataMember(Name = "airline.leg.depart_tax", EmitDefaultValue = false)]
         public string AirlineLegDepartTax { get; set; }
 
         /// <summary>
-        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.
+        /// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.
         /// </summary>
-        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.</value>
+        /// <value>The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam &#x3D; AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces * Must not be all zeros.</value>
         [DataMember(Name = "airline.leg.destination_code", EmitDefaultValue = false)]
         public string AirlineLegDestinationCode { get; set; }
 
         /// <summary>
-        /// The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces *Must not be all zeros.
+        /// The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces * Must not be all zeros.
         /// </summary>
-        /// <value>The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces *Must not be all zeros.</value>
+        /// <value>The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces * Must not be all zeros.</value>
         [DataMember(Name = "airline.leg.fare_base_code", EmitDefaultValue = false)]
         public string AirlineLegFareBaseCode { get; set; }
 
         /// <summary>
-        /// The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces *Must not be all zeros.
+        /// The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces * Must not be all zeros.
         /// </summary>
-        /// <value>The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces *Must not be all zeros.</value>
+        /// <value>The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces * Must not be all zeros.</value>
         [DataMember(Name = "airline.leg.flight_number", EmitDefaultValue = false)]
         public string AirlineLegFlightNumber { get; set; }
 
@@ -271,9 +271,9 @@ namespace Adyen.Model.Checkout
         public string AirlinePassengerTravellerType { get; set; }
 
         /// <summary>
-        /// The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  *Must not be all zeros.
+        /// The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  * Must not be all zeros.
         /// </summary>
-        /// <value>The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  *Must not be all zeros.</value>
+        /// <value>The passenger&#39;s name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  * Must not be all zeros.</value>
         [DataMember(Name = "airline.passenger_name", IsRequired = false, EmitDefaultValue = false)]
         public string AirlinePassengerName { get; set; }
 
@@ -285,23 +285,23 @@ namespace Adyen.Model.Checkout
         public string AirlineTicketIssueAddress { get; set; }
 
         /// <summary>
-        /// The ticket&#39;s unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces *Must not be all zeros.
+        /// The ticket&#39;s unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces * Must not be all zeros.
         /// </summary>
-        /// <value>The ticket&#39;s unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces *Must not be all zeros.</value>
+        /// <value>The ticket&#39;s unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces * Must not be all zeros.</value>
         [DataMember(Name = "airline.ticket_number", EmitDefaultValue = false)]
         public string AirlineTicketNumber { get; set; }
 
         /// <summary>
-        /// The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces *Must not be all zeros.
+        /// The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces * Must not be all zeros.
         /// </summary>
-        /// <value>The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces *Must not be all zeros.</value>
+        /// <value>The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces * Must not be all zeros.</value>
         [DataMember(Name = "airline.travel_agency_code", EmitDefaultValue = false)]
         public string AirlineTravelAgencyCode { get; set; }
 
         /// <summary>
-        /// The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces *Must not be all zeros.
+        /// The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces * Must not be all zeros.
         /// </summary>
-        /// <value>The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces *Must not be all zeros.</value>
+        /// <value>The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces * Must not be all zeros.</value>
         [DataMember(Name = "airline.travel_agency_name", EmitDefaultValue = false)]
         public string AirlineTravelAgencyName { get; set; }
 
diff --git a/Adyen/Model/Checkout/AdditionalDataCommon.cs b/Adyen/Model/Checkout/AdditionalDataCommon.cs
index 56c6d0df..3d17a1c2 100644
--- a/Adyen/Model/Checkout/AdditionalDataCommon.cs
+++ b/Adyen/Model/Checkout/AdditionalDataCommon.cs
@@ -63,6 +63,7 @@ namespace Adyen.Model.Checkout
         /// <summary>
         /// Initializes a new instance of the <see cref="AdditionalDataCommon" /> class.
         /// </summary>
+        /// <param name="requestedTestAcquirerResponseCode">Triggers test scenarios that allow to replicate certain acquirer response codes. See [Testing result codes and refusal reasons](https://docs.adyen.com/development-resources/testing/result-codes/) to learn about the possible values, and the &#x60;refusalReason&#x60; values you can trigger. .</param>
         /// <param name="requestedTestErrorResponseCode">Triggers test scenarios that allow to replicate certain communication errors.  Allowed values: * **NO_CONNECTION_AVAILABLE** – There wasn&#39;t a connection available to service the outgoing communication. This is a transient, retriable error since no messaging could be initiated to an issuing system (or third-party acquiring system). Therefore, the header Transient-Error: true is returned in the response. A subsequent request using the same idempotency key will be processed as if it was the first request. * **IOEXCEPTION_RECEIVED** – Something went wrong during transmission of the message or receiving the response. This is a classified as non-transient because the message could have been received by the issuing party and been acted upon. No transient error header is returned. If using idempotency, the (error) response is stored as the final result for the idempotency key. Subsequent messages with the same idempotency key not be processed beyond returning the stored response..</param>
         /// <param name="allowPartialAuth">Set to true to authorise a part of the requested amount in case the cardholder does not have enough funds on their account.  If a payment was partially authorised, the response includes resultCode: PartiallyAuthorised and the authorised amount in additionalData.authorisedAmountValue. To enable this functionality, contact our Support Team..</param>
         /// <param name="authorisationType">Flags a card payment request for either pre-authorisation or final authorisation. For more information, refer to [Authorisation types](https://docs.adyen.com/online-payments/adjust-authorisation#authorisation-types).  Allowed values: * **PreAuth** – flags the payment request to be handled as a pre-authorisation. * **FinalAuth** – flags the payment request to be handled as a final authorisation..</param>
@@ -75,14 +76,17 @@ namespace Adyen.Model.Checkout
         /// <param name="overwriteBrand">Boolean indicator that can be optionally used for performing debit transactions on combo cards (for example, combo cards in Brazil). This is not mandatory but we recommend that you set this to true if you want to use the &#x60;selectedBrand&#x60; value to specify how to process the transaction..</param>
         /// <param name="subMerchantCity">This field is required if the transaction is performed by a registered payment facilitator. This field must contain the city of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 13 characters..</param>
         /// <param name="subMerchantCountry">This field is required if the transaction is performed by a registered payment facilitator. This field must contain the three-letter country code of the actual merchant&#39;s address. * Format: alpha-numeric. * Fixed length: 3 characters..</param>
+        /// <param name="subMerchantEmail">This field is required for transactions performed by registered payment facilitators. This field contains the email address of the sub-merchant. * Format: Alphanumeric * Maximum length: 40 characters.</param>
         /// <param name="subMerchantID">This field contains an identifier of the actual merchant when a transaction is submitted via a payment facilitator. The payment facilitator must send in this unique ID.  A unique identifier per submerchant that is required if the transaction is performed by a registered payment facilitator. * Format: alpha-numeric. * Fixed length: 15 characters..</param>
         /// <param name="subMerchantName">This field is required if the transaction is performed by a registered payment facilitator. This field must contain the name of the actual merchant. * Format: alpha-numeric. * Maximum length: 22 characters..</param>
+        /// <param name="subMerchantPhoneNumber">This field is required for transactions performed by registered payment facilitators. This field contains the phone number of the sub-merchant.* Format: Alphanumeric * Maximum length: 20 characters.</param>
         /// <param name="subMerchantPostalCode">This field is required if the transaction is performed by a registered payment facilitator. This field must contain the postal code of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 10 characters..</param>
         /// <param name="subMerchantState">This field is required if the transaction is performed by a registered payment facilitator, and if applicable to the country. This field must contain the state code of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 3 characters..</param>
         /// <param name="subMerchantStreet">This field is required if the transaction is performed by a registered payment facilitator. This field must contain the street of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 60 characters..</param>
         /// <param name="subMerchantTaxId">This field is required if the transaction is performed by a registered payment facilitator. This field must contain the tax ID of the actual merchant. * Format: alpha-numeric. * Fixed length: 11 or 14 characters..</param>
-        public AdditionalDataCommon(string requestedTestErrorResponseCode = default(string), string allowPartialAuth = default(string), string authorisationType = default(string), string autoRescue = default(string), string customRoutingFlag = default(string), IndustryUsageEnum? industryUsage = default(IndustryUsageEnum?), string manualCapture = default(string), string maxDaysToRescue = default(string), string networkTxReference = default(string), string overwriteBrand = default(string), string subMerchantCity = default(string), string subMerchantCountry = default(string), string subMerchantID = default(string), string subMerchantName = default(string), string subMerchantPostalCode = default(string), string subMerchantState = default(string), string subMerchantStreet = default(string), string subMerchantTaxId = default(string))
+        public AdditionalDataCommon(string requestedTestAcquirerResponseCode = default(string), string requestedTestErrorResponseCode = default(string), string allowPartialAuth = default(string), string authorisationType = default(string), string autoRescue = default(string), string customRoutingFlag = default(string), IndustryUsageEnum? industryUsage = default(IndustryUsageEnum?), string manualCapture = default(string), string maxDaysToRescue = default(string), string networkTxReference = default(string), string overwriteBrand = default(string), string subMerchantCity = default(string), string subMerchantCountry = default(string), string subMerchantEmail = default(string), string subMerchantID = default(string), string subMerchantName = default(string), string subMerchantPhoneNumber = default(string), string subMerchantPostalCode = default(string), string subMerchantState = default(string), string subMerchantStreet = default(string), string subMerchantTaxId = default(string))
         {
+            this.RequestedTestAcquirerResponseCode = requestedTestAcquirerResponseCode;
             this.RequestedTestErrorResponseCode = requestedTestErrorResponseCode;
             this.AllowPartialAuth = allowPartialAuth;
             this.AuthorisationType = authorisationType;
@@ -95,14 +99,23 @@ namespace Adyen.Model.Checkout
             this.OverwriteBrand = overwriteBrand;
             this.SubMerchantCity = subMerchantCity;
             this.SubMerchantCountry = subMerchantCountry;
+            this.SubMerchantEmail = subMerchantEmail;
             this.SubMerchantID = subMerchantID;
             this.SubMerchantName = subMerchantName;
+            this.SubMerchantPhoneNumber = subMerchantPhoneNumber;
             this.SubMerchantPostalCode = subMerchantPostalCode;
             this.SubMerchantState = subMerchantState;
             this.SubMerchantStreet = subMerchantStreet;
             this.SubMerchantTaxId = subMerchantTaxId;
         }
 
+        /// <summary>
+        /// Triggers test scenarios that allow to replicate certain acquirer response codes. See [Testing result codes and refusal reasons](https://docs.adyen.com/development-resources/testing/result-codes/) to learn about the possible values, and the &#x60;refusalReason&#x60; values you can trigger. 
+        /// </summary>
+        /// <value>Triggers test scenarios that allow to replicate certain acquirer response codes. See [Testing result codes and refusal reasons](https://docs.adyen.com/development-resources/testing/result-codes/) to learn about the possible values, and the &#x60;refusalReason&#x60; values you can trigger. </value>
+        [DataMember(Name = "RequestedTestAcquirerResponseCode", EmitDefaultValue = false)]
+        public string RequestedTestAcquirerResponseCode { get; set; }
+
         /// <summary>
         /// Triggers test scenarios that allow to replicate certain communication errors.  Allowed values: * **NO_CONNECTION_AVAILABLE** – There wasn&#39;t a connection available to service the outgoing communication. This is a transient, retriable error since no messaging could be initiated to an issuing system (or third-party acquiring system). Therefore, the header Transient-Error: true is returned in the response. A subsequent request using the same idempotency key will be processed as if it was the first request. * **IOEXCEPTION_RECEIVED** – Something went wrong during transmission of the message or receiving the response. This is a classified as non-transient because the message could have been received by the issuing party and been acted upon. No transient error header is returned. If using idempotency, the (error) response is stored as the final result for the idempotency key. Subsequent messages with the same idempotency key not be processed beyond returning the stored response.
         /// </summary>
@@ -180,6 +193,13 @@ namespace Adyen.Model.Checkout
         [DataMember(Name = "subMerchantCountry", EmitDefaultValue = false)]
         public string SubMerchantCountry { get; set; }
 
+        /// <summary>
+        /// This field is required for transactions performed by registered payment facilitators. This field contains the email address of the sub-merchant. * Format: Alphanumeric * Maximum length: 40 characters
+        /// </summary>
+        /// <value>This field is required for transactions performed by registered payment facilitators. This field contains the email address of the sub-merchant. * Format: Alphanumeric * Maximum length: 40 characters</value>
+        [DataMember(Name = "subMerchantEmail", EmitDefaultValue = false)]
+        public string SubMerchantEmail { get; set; }
+
         /// <summary>
         /// This field contains an identifier of the actual merchant when a transaction is submitted via a payment facilitator. The payment facilitator must send in this unique ID.  A unique identifier per submerchant that is required if the transaction is performed by a registered payment facilitator. * Format: alpha-numeric. * Fixed length: 15 characters.
         /// </summary>
@@ -194,6 +214,13 @@ namespace Adyen.Model.Checkout
         [DataMember(Name = "subMerchantName", EmitDefaultValue = false)]
         public string SubMerchantName { get; set; }
 
+        /// <summary>
+        /// This field is required for transactions performed by registered payment facilitators. This field contains the phone number of the sub-merchant.* Format: Alphanumeric * Maximum length: 20 characters
+        /// </summary>
+        /// <value>This field is required for transactions performed by registered payment facilitators. This field contains the phone number of the sub-merchant.* Format: Alphanumeric * Maximum length: 20 characters</value>
+        [DataMember(Name = "subMerchantPhoneNumber", EmitDefaultValue = false)]
+        public string SubMerchantPhoneNumber { get; set; }
+
         /// <summary>
         /// This field is required if the transaction is performed by a registered payment facilitator. This field must contain the postal code of the actual merchant&#39;s address. * Format: alpha-numeric. * Maximum length: 10 characters.
         /// </summary>
@@ -230,6 +257,7 @@ namespace Adyen.Model.Checkout
         {
             StringBuilder sb = new StringBuilder();
             sb.Append("class AdditionalDataCommon {\n");
+            sb.Append("  RequestedTestAcquirerResponseCode: ").Append(RequestedTestAcquirerResponseCode).Append("\n");
             sb.Append("  RequestedTestErrorResponseCode: ").Append(RequestedTestErrorResponseCode).Append("\n");
             sb.Append("  AllowPartialAuth: ").Append(AllowPartialAuth).Append("\n");
             sb.Append("  AuthorisationType: ").Append(AuthorisationType).Append("\n");
@@ -242,8 +270,10 @@ namespace Adyen.Model.Checkout
             sb.Append("  OverwriteBrand: ").Append(OverwriteBrand).Append("\n");
             sb.Append("  SubMerchantCity: ").Append(SubMerchantCity).Append("\n");
             sb.Append("  SubMerchantCountry: ").Append(SubMerchantCountry).Append("\n");
+            sb.Append("  SubMerchantEmail: ").Append(SubMerchantEmail).Append("\n");
             sb.Append("  SubMerchantID: ").Append(SubMerchantID).Append("\n");
             sb.Append("  SubMerchantName: ").Append(SubMerchantName).Append("\n");
+            sb.Append("  SubMerchantPhoneNumber: ").Append(SubMerchantPhoneNumber).Append("\n");
             sb.Append("  SubMerchantPostalCode: ").Append(SubMerchantPostalCode).Append("\n");
             sb.Append("  SubMerchantState: ").Append(SubMerchantState).Append("\n");
             sb.Append("  SubMerchantStreet: ").Append(SubMerchantStreet).Append("\n");
@@ -283,6 +313,11 @@ namespace Adyen.Model.Checkout
                 return false;
             }
             return 
+                (
+                    this.RequestedTestAcquirerResponseCode == input.RequestedTestAcquirerResponseCode ||
+                    (this.RequestedTestAcquirerResponseCode != null &&
+                    this.RequestedTestAcquirerResponseCode.Equals(input.RequestedTestAcquirerResponseCode))
+                ) && 
                 (
                     this.RequestedTestErrorResponseCode == input.RequestedTestErrorResponseCode ||
                     (this.RequestedTestErrorResponseCode != null &&
@@ -342,6 +377,11 @@ namespace Adyen.Model.Checkout
                     (this.SubMerchantCountry != null &&
                     this.SubMerchantCountry.Equals(input.SubMerchantCountry))
                 ) && 
+                (
+                    this.SubMerchantEmail == input.SubMerchantEmail ||
+                    (this.SubMerchantEmail != null &&
+                    this.SubMerchantEmail.Equals(input.SubMerchantEmail))
+                ) && 
                 (
                     this.SubMerchantID == input.SubMerchantID ||
                     (this.SubMerchantID != null &&
@@ -352,6 +392,11 @@ namespace Adyen.Model.Checkout
                     (this.SubMerchantName != null &&
                     this.SubMerchantName.Equals(input.SubMerchantName))
                 ) && 
+                (
+                    this.SubMerchantPhoneNumber == input.SubMerchantPhoneNumber ||
+                    (this.SubMerchantPhoneNumber != null &&
+                    this.SubMerchantPhoneNumber.Equals(input.SubMerchantPhoneNumber))
+                ) && 
                 (
                     this.SubMerchantPostalCode == input.SubMerchantPostalCode ||
                     (this.SubMerchantPostalCode != null &&
@@ -383,6 +428,10 @@ namespace Adyen.Model.Checkout
             unchecked // Overflow is fine, just wrap
             {
                 int hashCode = 41;
+                if (this.RequestedTestAcquirerResponseCode != null)
+                {
+                    hashCode = (hashCode * 59) + this.RequestedTestAcquirerResponseCode.GetHashCode();
+                }
                 if (this.RequestedTestErrorResponseCode != null)
                 {
                     hashCode = (hashCode * 59) + this.RequestedTestErrorResponseCode.GetHashCode();
@@ -428,6 +477,10 @@ namespace Adyen.Model.Checkout
                 {
                     hashCode = (hashCode * 59) + this.SubMerchantCountry.GetHashCode();
                 }
+                if (this.SubMerchantEmail != null)
+                {
+                    hashCode = (hashCode * 59) + this.SubMerchantEmail.GetHashCode();
+                }
                 if (this.SubMerchantID != null)
                 {
                     hashCode = (hashCode * 59) + this.SubMerchantID.GetHashCode();
@@ -436,6 +489,10 @@ namespace Adyen.Model.Checkout
                 {
                     hashCode = (hashCode * 59) + this.SubMerchantName.GetHashCode();
                 }
+                if (this.SubMerchantPhoneNumber != null)
+                {
+                    hashCode = (hashCode * 59) + this.SubMerchantPhoneNumber.GetHashCode();
+                }
                 if (this.SubMerchantPostalCode != null)
                 {
                     hashCode = (hashCode * 59) + this.SubMerchantPostalCode.GetHashCode();
diff --git a/Adyen/Model/Checkout/AdditionalDataSubMerchant.cs b/Adyen/Model/Checkout/AdditionalDataSubMerchant.cs
index 93780bb5..883cfbb5 100644
--- a/Adyen/Model/Checkout/AdditionalDataSubMerchant.cs
+++ b/Adyen/Model/Checkout/AdditionalDataSubMerchant.cs
@@ -38,21 +38,25 @@ namespace Adyen.Model.Checkout
         /// <param name="subMerchantNumberOfSubSellers">Required for transactions performed by registered payment facilitators. Indicates the number of sub-merchants contained in the request. For example, **3**..</param>
         /// <param name="subMerchantSubSellerSubSellerNrCity">Required for transactions performed by registered payment facilitators. The city of the sub-merchant&#39;s address. * Format: Alphanumeric * Maximum length: 13 characters.</param>
         /// <param name="subMerchantSubSellerSubSellerNrCountry">Required for transactions performed by registered payment facilitators. The three-letter country code of the sub-merchant&#39;s address. For example, **BRA** for Brazil.  * Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) * Fixed length: 3 characters.</param>
+        /// <param name="subMerchantSubSellerSubSellerNrEmail">Required for transactions performed by registered payment facilitators. The email address of the sub-merchant. * Format: Alphanumeric * Maximum length: 40 characters.</param>
         /// <param name="subMerchantSubSellerSubSellerNrId">Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant.  * Format: Alphanumeric * Maximum length: 15 characters.</param>
         /// <param name="subMerchantSubSellerSubSellerNrMcc">Required for transactions performed by registered payment facilitators. The sub-merchant&#39;s 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits.</param>
         /// <param name="subMerchantSubSellerSubSellerNrName">Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters.</param>
+        /// <param name="subMerchantSubSellerSubSellerNrPhoneNumber">Required for transactions performed by registered payment facilitators. The phone number of the sub-merchant.* Format: Alphanumeric * Maximum length: 20 characters.</param>
         /// <param name="subMerchantSubSellerSubSellerNrPostalCode">Required for transactions performed by registered payment facilitators. The postal code of the sub-merchant&#39;s address, without dashes. * Format: Numeric * Fixed length: 8 digits.</param>
         /// <param name="subMerchantSubSellerSubSellerNrState">Required for transactions performed by registered payment facilitators. The state code of the sub-merchant&#39;s address, if applicable to the country. * Format: Alphanumeric * Maximum length: 2 characters.</param>
         /// <param name="subMerchantSubSellerSubSellerNrStreet">Required for transactions performed by registered payment facilitators. The street name and house number of the sub-merchant&#39;s address. * Format: Alphanumeric * Maximum length: 60 characters.</param>
         /// <param name="subMerchantSubSellerSubSellerNrTaxId">Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ.</param>
-        public AdditionalDataSubMerchant(string subMerchantNumberOfSubSellers = default(string), string subMerchantSubSellerSubSellerNrCity = default(string), string subMerchantSubSellerSubSellerNrCountry = default(string), string subMerchantSubSellerSubSellerNrId = default(string), string subMerchantSubSellerSubSellerNrMcc = default(string), string subMerchantSubSellerSubSellerNrName = default(string), string subMerchantSubSellerSubSellerNrPostalCode = default(string), string subMerchantSubSellerSubSellerNrState = default(string), string subMerchantSubSellerSubSellerNrStreet = default(string), string subMerchantSubSellerSubSellerNrTaxId = default(string))
+        public AdditionalDataSubMerchant(string subMerchantNumberOfSubSellers = default(string), string subMerchantSubSellerSubSellerNrCity = default(string), string subMerchantSubSellerSubSellerNrCountry = default(string), string subMerchantSubSellerSubSellerNrEmail = default(string), string subMerchantSubSellerSubSellerNrId = default(string), string subMerchantSubSellerSubSellerNrMcc = default(string), string subMerchantSubSellerSubSellerNrName = default(string), string subMerchantSubSellerSubSellerNrPhoneNumber = default(string), string subMerchantSubSellerSubSellerNrPostalCode = default(string), string subMerchantSubSellerSubSellerNrState = default(string), string subMerchantSubSellerSubSellerNrStreet = default(string), string subMerchantSubSellerSubSellerNrTaxId = default(string))
         {
             this.SubMerchantNumberOfSubSellers = subMerchantNumberOfSubSellers;
             this.SubMerchantSubSellerSubSellerNrCity = subMerchantSubSellerSubSellerNrCity;
             this.SubMerchantSubSellerSubSellerNrCountry = subMerchantSubSellerSubSellerNrCountry;
+            this.SubMerchantSubSellerSubSellerNrEmail = subMerchantSubSellerSubSellerNrEmail;
             this.SubMerchantSubSellerSubSellerNrId = subMerchantSubSellerSubSellerNrId;
             this.SubMerchantSubSellerSubSellerNrMcc = subMerchantSubSellerSubSellerNrMcc;
             this.SubMerchantSubSellerSubSellerNrName = subMerchantSubSellerSubSellerNrName;
+            this.SubMerchantSubSellerSubSellerNrPhoneNumber = subMerchantSubSellerSubSellerNrPhoneNumber;
             this.SubMerchantSubSellerSubSellerNrPostalCode = subMerchantSubSellerSubSellerNrPostalCode;
             this.SubMerchantSubSellerSubSellerNrState = subMerchantSubSellerSubSellerNrState;
             this.SubMerchantSubSellerSubSellerNrStreet = subMerchantSubSellerSubSellerNrStreet;
@@ -80,6 +84,13 @@ namespace Adyen.Model.Checkout
         [DataMember(Name = "subMerchant.subSeller[subSellerNr].country", EmitDefaultValue = false)]
         public string SubMerchantSubSellerSubSellerNrCountry { get; set; }
 
+        /// <summary>
+        /// Required for transactions performed by registered payment facilitators. The email address of the sub-merchant. * Format: Alphanumeric * Maximum length: 40 characters
+        /// </summary>
+        /// <value>Required for transactions performed by registered payment facilitators. The email address of the sub-merchant. * Format: Alphanumeric * Maximum length: 40 characters</value>
+        [DataMember(Name = "subMerchant.subSeller[subSellerNr].email", EmitDefaultValue = false)]
+        public string SubMerchantSubSellerSubSellerNrEmail { get; set; }
+
         /// <summary>
         /// Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant.  * Format: Alphanumeric * Maximum length: 15 characters
         /// </summary>
@@ -101,6 +112,13 @@ namespace Adyen.Model.Checkout
         [DataMember(Name = "subMerchant.subSeller[subSellerNr].name", EmitDefaultValue = false)]
         public string SubMerchantSubSellerSubSellerNrName { get; set; }
 
+        /// <summary>
+        /// Required for transactions performed by registered payment facilitators. The phone number of the sub-merchant.* Format: Alphanumeric * Maximum length: 20 characters
+        /// </summary>
+        /// <value>Required for transactions performed by registered payment facilitators. The phone number of the sub-merchant.* Format: Alphanumeric * Maximum length: 20 characters</value>
+        [DataMember(Name = "subMerchant.subSeller[subSellerNr].phoneNumber", EmitDefaultValue = false)]
+        public string SubMerchantSubSellerSubSellerNrPhoneNumber { get; set; }
+
         /// <summary>
         /// Required for transactions performed by registered payment facilitators. The postal code of the sub-merchant&#39;s address, without dashes. * Format: Numeric * Fixed length: 8 digits
         /// </summary>
@@ -140,9 +158,11 @@ namespace Adyen.Model.Checkout
             sb.Append("  SubMerchantNumberOfSubSellers: ").Append(SubMerchantNumberOfSubSellers).Append("\n");
             sb.Append("  SubMerchantSubSellerSubSellerNrCity: ").Append(SubMerchantSubSellerSubSellerNrCity).Append("\n");
             sb.Append("  SubMerchantSubSellerSubSellerNrCountry: ").Append(SubMerchantSubSellerSubSellerNrCountry).Append("\n");
+            sb.Append("  SubMerchantSubSellerSubSellerNrEmail: ").Append(SubMerchantSubSellerSubSellerNrEmail).Append("\n");
             sb.Append("  SubMerchantSubSellerSubSellerNrId: ").Append(SubMerchantSubSellerSubSellerNrId).Append("\n");
             sb.Append("  SubMerchantSubSellerSubSellerNrMcc: ").Append(SubMerchantSubSellerSubSellerNrMcc).Append("\n");
             sb.Append("  SubMerchantSubSellerSubSellerNrName: ").Append(SubMerchantSubSellerSubSellerNrName).Append("\n");
+            sb.Append("  SubMerchantSubSellerSubSellerNrPhoneNumber: ").Append(SubMerchantSubSellerSubSellerNrPhoneNumber).Append("\n");
             sb.Append("  SubMerchantSubSellerSubSellerNrPostalCode: ").Append(SubMerchantSubSellerSubSellerNrPostalCode).Append("\n");
             sb.Append("  SubMerchantSubSellerSubSellerNrState: ").Append(SubMerchantSubSellerSubSellerNrState).Append("\n");
             sb.Append("  SubMerchantSubSellerSubSellerNrStreet: ").Append(SubMerchantSubSellerSubSellerNrStreet).Append("\n");
@@ -197,6 +217,11 @@ namespace Adyen.Model.Checkout
                     (this.SubMerchantSubSellerSubSellerNrCountry != null &&
                     this.SubMerchantSubSellerSubSellerNrCountry.Equals(input.SubMerchantSubSellerSubSellerNrCountry))
                 ) && 
+                (
+                    this.SubMerchantSubSellerSubSellerNrEmail == input.SubMerchantSubSellerSubSellerNrEmail ||
+                    (this.SubMerchantSubSellerSubSellerNrEmail != null &&
+                    this.SubMerchantSubSellerSubSellerNrEmail.Equals(input.SubMerchantSubSellerSubSellerNrEmail))
+                ) && 
                 (
                     this.SubMerchantSubSellerSubSellerNrId == input.SubMerchantSubSellerSubSellerNrId ||
                     (this.SubMerchantSubSellerSubSellerNrId != null &&
@@ -212,6 +237,11 @@ namespace Adyen.Model.Checkout
                     (this.SubMerchantSubSellerSubSellerNrName != null &&
                     this.SubMerchantSubSellerSubSellerNrName.Equals(input.SubMerchantSubSellerSubSellerNrName))
                 ) && 
+                (
+                    this.SubMerchantSubSellerSubSellerNrPhoneNumber == input.SubMerchantSubSellerSubSellerNrPhoneNumber ||
+                    (this.SubMerchantSubSellerSubSellerNrPhoneNumber != null &&
+                    this.SubMerchantSubSellerSubSellerNrPhoneNumber.Equals(input.SubMerchantSubSellerSubSellerNrPhoneNumber))
+                ) && 
                 (
                     this.SubMerchantSubSellerSubSellerNrPostalCode == input.SubMerchantSubSellerSubSellerNrPostalCode ||
                     (this.SubMerchantSubSellerSubSellerNrPostalCode != null &&
@@ -255,6 +285,10 @@ namespace Adyen.Model.Checkout
                 {
                     hashCode = (hashCode * 59) + this.SubMerchantSubSellerSubSellerNrCountry.GetHashCode();
                 }
+                if (this.SubMerchantSubSellerSubSellerNrEmail != null)
+                {
+                    hashCode = (hashCode * 59) + this.SubMerchantSubSellerSubSellerNrEmail.GetHashCode();
+                }
                 if (this.SubMerchantSubSellerSubSellerNrId != null)
                 {
                     hashCode = (hashCode * 59) + this.SubMerchantSubSellerSubSellerNrId.GetHashCode();
@@ -267,6 +301,10 @@ namespace Adyen.Model.Checkout
                 {
                     hashCode = (hashCode * 59) + this.SubMerchantSubSellerSubSellerNrName.GetHashCode();
                 }
+                if (this.SubMerchantSubSellerSubSellerNrPhoneNumber != null)
+                {
+                    hashCode = (hashCode * 59) + this.SubMerchantSubSellerSubSellerNrPhoneNumber.GetHashCode();
+                }
                 if (this.SubMerchantSubSellerSubSellerNrPostalCode != null)
                 {
                     hashCode = (hashCode * 59) + this.SubMerchantSubSellerSubSellerNrPostalCode.GetHashCode();
diff --git a/Adyen/Model/Checkout/BalanceCheckRequest.cs b/Adyen/Model/Checkout/BalanceCheckRequest.cs
index 8a83e101..e15c595f 100644
--- a/Adyen/Model/Checkout/BalanceCheckRequest.cs
+++ b/Adyen/Model/Checkout/BalanceCheckRequest.cs
@@ -129,7 +129,7 @@ namespace Adyen.Model.Checkout
         /// <param name="deviceFingerprint">A string containing the shopper&#39;s device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting)..</param>
         /// <param name="fraudOffset">An integer value that is added to the normal fraud score. The value can be either positive or negative..</param>
         /// <param name="installments">installments.</param>
-        /// <param name="localizedShopperStatement">The &#x60;localizedShopperStatement&#x60; field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana character set for Visa and Mastercard payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, capital letters, numbers and special characters.  * Half-width or full-width characters..</param>
+        /// <param name="localizedShopperStatement">The &#x60;localizedShopperStatement&#x60; field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana and ja-Hani character set for Visa, Mastercard and JCB payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, Kanji, capital letters, numbers and special characters.  * Half-width or full-width characters..</param>
         /// <param name="mcc">The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant..</param>
         /// <param name="merchantAccount">The merchant account identifier, with which you want to process the transaction. (required).</param>
         /// <param name="merchantOrderReference">This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. &gt; We strongly recommend you send the &#x60;merchantOrderReference&#x60; value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide &#x60;retry.orderAttemptNumber&#x60;, &#x60;retry.chainAttemptNumber&#x60;, and &#x60;retry.skipRetry&#x60; values in &#x60;PaymentRequest.additionalData&#x60;..</param>
@@ -304,9 +304,9 @@ namespace Adyen.Model.Checkout
         public Installments Installments { get; set; }
 
         /// <summary>
-        /// The &#x60;localizedShopperStatement&#x60; field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana character set for Visa and Mastercard payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, capital letters, numbers and special characters.  * Half-width or full-width characters.
+        /// The &#x60;localizedShopperStatement&#x60; field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana and ja-Hani character set for Visa, Mastercard and JCB payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, Kanji, capital letters, numbers and special characters.  * Half-width or full-width characters.
         /// </summary>
-        /// <value>The &#x60;localizedShopperStatement&#x60; field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana character set for Visa and Mastercard payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, capital letters, numbers and special characters.  * Half-width or full-width characters.</value>
+        /// <value>The &#x60;localizedShopperStatement&#x60; field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana and ja-Hani character set for Visa, Mastercard and JCB payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, Kanji, capital letters, numbers and special characters.  * Half-width or full-width characters.</value>
         [DataMember(Name = "localizedShopperStatement", EmitDefaultValue = false)]
         public Dictionary<string, string> LocalizedShopperStatement { get; set; }
 
diff --git a/Adyen/Model/Checkout/CheckoutPaymentMethod.cs b/Adyen/Model/Checkout/CheckoutPaymentMethod.cs
index e95ad61b..36e4632a 100644
--- a/Adyen/Model/Checkout/CheckoutPaymentMethod.cs
+++ b/Adyen/Model/Checkout/CheckoutPaymentMethod.cs
@@ -202,18 +202,6 @@ namespace Adyen.Model.Checkout
             this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
         }
 
-        /// <summary>
-        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
-        /// with the <see cref="DotpayDetails" /> class
-        /// </summary>
-        /// <param name="actualInstance">An instance of DotpayDetails.</param>
-        public CheckoutPaymentMethod(DotpayDetails actualInstance)
-        {
-            this.IsNullable = false;
-            this.SchemaType= "oneOf";
-            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
-        }
-
         /// <summary>
         /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
         /// with the <see cref="DragonpayDetails" /> class
@@ -286,18 +274,6 @@ namespace Adyen.Model.Checkout
             this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
         }
 
-        /// <summary>
-        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
-        /// with the <see cref="GiropayDetails" /> class
-        /// </summary>
-        /// <param name="actualInstance">An instance of GiropayDetails.</param>
-        public CheckoutPaymentMethod(GiropayDetails actualInstance)
-        {
-            this.IsNullable = false;
-            this.SchemaType= "oneOf";
-            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
-        }
-
         /// <summary>
         /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
         /// with the <see cref="GooglePayDetails" /> class
@@ -514,6 +490,18 @@ namespace Adyen.Model.Checkout
             this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
         }
 
+        /// <summary>
+        /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
+        /// with the <see cref="RakutenPayDetails" /> class
+        /// </summary>
+        /// <param name="actualInstance">An instance of RakutenPayDetails.</param>
+        public CheckoutPaymentMethod(RakutenPayDetails actualInstance)
+        {
+            this.IsNullable = false;
+            this.SchemaType= "oneOf";
+            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
+        }
+
         /// <summary>
         /// Initializes a new instance of the <see cref="CheckoutPaymentMethod" /> class
         /// with the <see cref="RatepayDetails" /> class
@@ -740,10 +728,6 @@ namespace Adyen.Model.Checkout
                 {
                     this._actualInstance = value;
                 }
-                else if (value.GetType() == typeof(DotpayDetails))
-                {
-                    this._actualInstance = value;
-                }
                 else if (value.GetType() == typeof(DragonpayDetails))
                 {
                     this._actualInstance = value;
@@ -768,10 +752,6 @@ namespace Adyen.Model.Checkout
                 {
                     this._actualInstance = value;
                 }
-                else if (value.GetType() == typeof(GiropayDetails))
-                {
-                    this._actualInstance = value;
-                }
                 else if (value.GetType() == typeof(GooglePayDetails))
                 {
                     this._actualInstance = value;
@@ -844,6 +824,10 @@ namespace Adyen.Model.Checkout
                 {
                     this._actualInstance = value;
                 }
+                else if (value.GetType() == typeof(RakutenPayDetails))
+                {
+                    this._actualInstance = value;
+                }
                 else if (value.GetType() == typeof(RatepayDetails))
                 {
                     this._actualInstance = value;
@@ -898,7 +882,7 @@ namespace Adyen.Model.Checkout
                 }
                 else
                 {
-                    throw new ArgumentException("Invalid instance found. Must be the following types: AchDetails, AffirmDetails, AfterpayDetails, AmazonPayDetails, AncvDetails, AndroidPayDetails, ApplePayDetails, BacsDirectDebitDetails, BillDeskDetails, BlikDetails, CardDetails, CashAppDetails, CellulantDetails, DokuDetails, DotpayDetails, DragonpayDetails, EBankingFinlandDetails, EcontextVoucherDetails, EftDetails, FastlaneDetails, GenericIssuerPaymentMethodDetails, GiropayDetails, GooglePayDetails, IdealDetails, KlarnaDetails, MasterpassDetails, MbwayDetails, MobilePayDetails, MolPayDetails, OpenInvoiceDetails, PayByBankAISDirectDebitDetails, PayByBankDetails, PayPalDetails, PayPayDetails, PayToDetails, PayUUpiDetails, PayWithGoogleDetails, PaymentDetails, PixDetails, PseDetails, RatepayDetails, RivertyDetails, SamsungPayDetails, SepaDirectDebitDetails, StoredPaymentMethodDetails, TwintDetails, UpiCollectDetails, UpiIntentDetails, VippsDetails, VisaCheckoutDetails, WeChatPayDetails, WeChatPayMiniProgramDetails, ZipDetails");
+                    throw new ArgumentException("Invalid instance found. Must be the following types: AchDetails, AffirmDetails, AfterpayDetails, AmazonPayDetails, AncvDetails, AndroidPayDetails, ApplePayDetails, BacsDirectDebitDetails, BillDeskDetails, BlikDetails, CardDetails, CashAppDetails, CellulantDetails, DokuDetails, DragonpayDetails, EBankingFinlandDetails, EcontextVoucherDetails, EftDetails, FastlaneDetails, GenericIssuerPaymentMethodDetails, GooglePayDetails, IdealDetails, KlarnaDetails, MasterpassDetails, MbwayDetails, MobilePayDetails, MolPayDetails, OpenInvoiceDetails, PayByBankAISDirectDebitDetails, PayByBankDetails, PayPalDetails, PayPayDetails, PayToDetails, PayUUpiDetails, PayWithGoogleDetails, PaymentDetails, PixDetails, PseDetails, RakutenPayDetails, RatepayDetails, RivertyDetails, SamsungPayDetails, SepaDirectDebitDetails, StoredPaymentMethodDetails, TwintDetails, UpiCollectDetails, UpiIntentDetails, VippsDetails, VisaCheckoutDetails, WeChatPayDetails, WeChatPayMiniProgramDetails, ZipDetails");
                 }
             }
         }
@@ -1043,16 +1027,6 @@ namespace Adyen.Model.Checkout
             return (DokuDetails)this.ActualInstance;
         }
 
-        /// <summary>
-        /// Get the actual instance of `DotpayDetails`. If the actual instance is not `DotpayDetails`,
-        /// the InvalidClassException will be thrown
-        /// </summary>
-        /// <returns>An instance of DotpayDetails</returns>
-        public DotpayDetails GetDotpayDetails()
-        {
-            return (DotpayDetails)this.ActualInstance;
-        }
-
         /// <summary>
         /// Get the actual instance of `DragonpayDetails`. If the actual instance is not `DragonpayDetails`,
         /// the InvalidClassException will be thrown
@@ -1113,16 +1087,6 @@ namespace Adyen.Model.Checkout
             return (GenericIssuerPaymentMethodDetails)this.ActualInstance;
         }
 
-        /// <summary>
-        /// Get the actual instance of `GiropayDetails`. If the actual instance is not `GiropayDetails`,
-        /// the InvalidClassException will be thrown
-        /// </summary>
-        /// <returns>An instance of GiropayDetails</returns>
-        public GiropayDetails GetGiropayDetails()
-        {
-            return (GiropayDetails)this.ActualInstance;
-        }
-
         /// <summary>
         /// Get the actual instance of `GooglePayDetails`. If the actual instance is not `GooglePayDetails`,
         /// the InvalidClassException will be thrown
@@ -1303,6 +1267,16 @@ namespace Adyen.Model.Checkout
             return (PseDetails)this.ActualInstance;
         }
 
+        /// <summary>
+        /// Get the actual instance of `RakutenPayDetails`. If the actual instance is not `RakutenPayDetails`,
+        /// the InvalidClassException will be thrown
+        /// </summary>
+        /// <returns>An instance of RakutenPayDetails</returns>
+        public RakutenPayDetails GetRakutenPayDetails()
+        {
+            return (RakutenPayDetails)this.ActualInstance;
+        }
+
         /// <summary>
         /// Get the actual instance of `RatepayDetails`. If the actual instance is not `RatepayDetails`,
         /// the InvalidClassException will be thrown
@@ -1577,13 +1551,6 @@ namespace Adyen.Model.Checkout
                     matchedTypes.Add("DokuDetails");
                     match++;
                 }
-                // Check if the jsonString type enum matches the DotpayDetails type enums
-                if (ContainsValue<DotpayDetails.TypeEnum>(type))
-                {
-                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<DotpayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
-                    matchedTypes.Add("DotpayDetails");
-                    match++;
-                }
                 // Check if the jsonString type enum matches the DragonpayDetails type enums
                 if (ContainsValue<DragonpayDetails.TypeEnum>(type))
                 {
@@ -1626,13 +1593,6 @@ namespace Adyen.Model.Checkout
                     matchedTypes.Add("GenericIssuerPaymentMethodDetails");
                     match++;
                 }
-                // Check if the jsonString type enum matches the GiropayDetails type enums
-                if (ContainsValue<GiropayDetails.TypeEnum>(type))
-                {
-                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<GiropayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
-                    matchedTypes.Add("GiropayDetails");
-                    match++;
-                }
                 // Check if the jsonString type enum matches the GooglePayDetails type enums
                 if (ContainsValue<GooglePayDetails.TypeEnum>(type))
                 {
@@ -1759,6 +1719,13 @@ namespace Adyen.Model.Checkout
                     matchedTypes.Add("PseDetails");
                     match++;
                 }
+                // Check if the jsonString type enum matches the RakutenPayDetails type enums
+                if (ContainsValue<RakutenPayDetails.TypeEnum>(type))
+                {
+                    newCheckoutPaymentMethod = new CheckoutPaymentMethod(JsonConvert.DeserializeObject<RakutenPayDetails>(jsonString, CheckoutPaymentMethod.SerializerSettings));
+                    matchedTypes.Add("RakutenPayDetails");
+                    match++;
+                }
                 // Check if the jsonString type enum matches the RatepayDetails type enums
                 if (ContainsValue<RatepayDetails.TypeEnum>(type))
                 {
diff --git a/Adyen/Model/Checkout/CheckoutSessionInstallmentOption.cs b/Adyen/Model/Checkout/CheckoutSessionInstallmentOption.cs
index 83f1b0df..5a945925 100644
--- a/Adyen/Model/Checkout/CheckoutSessionInstallmentOption.cs
+++ b/Adyen/Model/Checkout/CheckoutSessionInstallmentOption.cs
@@ -38,74 +38,80 @@ namespace Adyen.Model.Checkout
         [JsonConverter(typeof(StringEnumConverter))]
         public enum PlansEnum
         {
+            /// <summary>
+            /// Enum Bonus for value: bonus
+            /// </summary>
+            [EnumMember(Value = "bonus")]
+            Bonus = 1,
+
             /// <summary>
             /// Enum BuynowPaylater for value: buynow_paylater
             /// </summary>
             [EnumMember(Value = "buynow_paylater")]
-            BuynowPaylater = 1,
+            BuynowPaylater = 2,
 
             /// <summary>
             /// Enum InteresRefundPrctg for value: interes_refund_prctg
             /// </summary>
             [EnumMember(Value = "interes_refund_prctg")]
-            InteresRefundPrctg = 2,
+            InteresRefundPrctg = 3,
 
             /// <summary>
             /// Enum InterestBonus for value: interest_bonus
             /// </summary>
             [EnumMember(Value = "interest_bonus")]
-            InterestBonus = 3,
+            InterestBonus = 4,
 
             /// <summary>
             /// Enum NointeresRefundPrctg for value: nointeres_refund_prctg
             /// </summary>
             [EnumMember(Value = "nointeres_refund_prctg")]
-            NointeresRefundPrctg = 4,
+            NointeresRefundPrctg = 5,
 
             /// <summary>
             /// Enum NointerestBonus for value: nointerest_bonus
             /// </summary>
             [EnumMember(Value = "nointerest_bonus")]
-            NointerestBonus = 5,
+            NointerestBonus = 6,
 
             /// <summary>
             /// Enum RefundPrctg for value: refund_prctg
             /// </summary>
             [EnumMember(Value = "refund_prctg")]
-            RefundPrctg = 6,
+            RefundPrctg = 7,
 
             /// <summary>
             /// Enum Regular for value: regular
             /// </summary>
             [EnumMember(Value = "regular")]
-            Regular = 7,
+            Regular = 8,
 
             /// <summary>
             /// Enum Revolving for value: revolving
             /// </summary>
             [EnumMember(Value = "revolving")]
-            Revolving = 8,
+            Revolving = 9,
 
             /// <summary>
             /// Enum WithInterest for value: with_interest
             /// </summary>
             [EnumMember(Value = "with_interest")]
-            WithInterest = 9
+            WithInterest = 10
 
         }
 
 
 
         /// <summary>
-        /// Defines the type of installment plan. If not set, defaults to **regular**.  Possible values: * **regular** * **revolving**
+        /// Defines the type of installment plan. If not set, defaults to **regular**.  Possible values: * **regular** * **revolving*** **bonus** * **with_interest** * **buynow_paylater** * **nointerest_bonus** * **interest_bonus** * **refund_prctg** * **nointeres_refund_prctg** * **interes_refund_prctg**
         /// </summary>
-        /// <value>Defines the type of installment plan. If not set, defaults to **regular**.  Possible values: * **regular** * **revolving**</value>
+        /// <value>Defines the type of installment plan. If not set, defaults to **regular**.  Possible values: * **regular** * **revolving*** **bonus** * **with_interest** * **buynow_paylater** * **nointerest_bonus** * **interest_bonus** * **refund_prctg** * **nointeres_refund_prctg** * **interes_refund_prctg**</value>
         [DataMember(Name = "plans", EmitDefaultValue = false)]
         public List<PlansEnum> Plans { get; set; }
         /// <summary>
         /// Initializes a new instance of the <see cref="CheckoutSessionInstallmentOption" /> class.
         /// </summary>
-        /// <param name="plans">Defines the type of installment plan. If not set, defaults to **regular**.  Possible values: * **regular** * **revolving**.</param>
+        /// <param name="plans">Defines the type of installment plan. If not set, defaults to **regular**.  Possible values: * **regular** * **revolving*** **bonus** * **with_interest** * **buynow_paylater** * **nointerest_bonus** * **interest_bonus** * **refund_prctg** * **nointeres_refund_prctg** * **interes_refund_prctg**.</param>
         /// <param name="preselectedValue">Preselected number of installments offered for this payment method..</param>
         /// <param name="values">An array of the number of installments that the shopper can choose from. For example, **[2,3,5]**. This cannot be specified simultaneously with &#x60;maxValue&#x60;..</param>
         public CheckoutSessionInstallmentOption(List<PlansEnum> plans = default(List<PlansEnum>), int? preselectedValue = default(int?), List<int> values = default(List<int>))
diff --git a/Adyen/Model/Checkout/CreateCheckoutSessionRequest.cs b/Adyen/Model/Checkout/CreateCheckoutSessionRequest.cs
index 9dc7a6d0..8ea96dc0 100644
--- a/Adyen/Model/Checkout/CreateCheckoutSessionRequest.cs
+++ b/Adyen/Model/Checkout/CreateCheckoutSessionRequest.cs
@@ -247,12 +247,12 @@ namespace Adyen.Model.Checkout
         /// <param name="accountInfo">accountInfo.</param>
         /// <param name="additionalAmount">additionalAmount.</param>
         /// <param name="additionalData">This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value..</param>
-        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;.</param>
+        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;.</param>
         /// <param name="amount">amount (required).</param>
         /// <param name="applicationInfo">applicationInfo.</param>
         /// <param name="authenticationData">authenticationData.</param>
         /// <param name="billingAddress">billingAddress.</param>
-        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;.</param>
+        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;.</param>
         /// <param name="captureDelayHours">The delay between the authorisation and scheduled auto-capture, specified in hours..</param>
         /// <param name="channel">The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * **iOS** * **Android** * **Web**.</param>
         /// <param name="company">company.</param>
@@ -390,9 +390,9 @@ namespace Adyen.Model.Checkout
         public Dictionary<string, string> AdditionalData { get; set; }
 
         /// <summary>
-        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;
+        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
         /// </summary>
-        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;</value>
+        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
         [DataMember(Name = "allowedPaymentMethods", EmitDefaultValue = false)]
         public List<string> AllowedPaymentMethods { get; set; }
 
@@ -421,9 +421,9 @@ namespace Adyen.Model.Checkout
         public BillingAddress BillingAddress { get; set; }
 
         /// <summary>
-        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;
+        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
         /// </summary>
-        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;</value>
+        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
         [DataMember(Name = "blockedPaymentMethods", EmitDefaultValue = false)]
         public List<string> BlockedPaymentMethods { get; set; }
 
diff --git a/Adyen/Model/Checkout/CreateCheckoutSessionResponse.cs b/Adyen/Model/Checkout/CreateCheckoutSessionResponse.cs
index 4ed256ea..b1db134a 100644
--- a/Adyen/Model/Checkout/CreateCheckoutSessionResponse.cs
+++ b/Adyen/Model/Checkout/CreateCheckoutSessionResponse.cs
@@ -247,12 +247,12 @@ namespace Adyen.Model.Checkout
         /// <param name="accountInfo">accountInfo.</param>
         /// <param name="additionalAmount">additionalAmount.</param>
         /// <param name="additionalData">This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value..</param>
-        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;.</param>
+        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;.</param>
         /// <param name="amount">amount (required).</param>
         /// <param name="applicationInfo">applicationInfo.</param>
         /// <param name="authenticationData">authenticationData.</param>
         /// <param name="billingAddress">billingAddress.</param>
-        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;.</param>
+        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;.</param>
         /// <param name="captureDelayHours">The delay between the authorisation and scheduled auto-capture, specified in hours..</param>
         /// <param name="channel">The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * **iOS** * **Android** * **Web**.</param>
         /// <param name="company">company.</param>
@@ -394,9 +394,9 @@ namespace Adyen.Model.Checkout
         public Dictionary<string, string> AdditionalData { get; set; }
 
         /// <summary>
-        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;
+        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
         /// </summary>
-        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;</value>
+        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
         [DataMember(Name = "allowedPaymentMethods", EmitDefaultValue = false)]
         public List<string> AllowedPaymentMethods { get; set; }
 
@@ -425,9 +425,9 @@ namespace Adyen.Model.Checkout
         public BillingAddress BillingAddress { get; set; }
 
         /// <summary>
-        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;
+        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
         /// </summary>
-        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;</value>
+        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
         [DataMember(Name = "blockedPaymentMethods", EmitDefaultValue = false)]
         public List<string> BlockedPaymentMethods { get; set; }
 
diff --git a/Adyen/Model/Checkout/Donation.cs b/Adyen/Model/Checkout/Donation.cs
index f6b3acfa..5f360c5e 100644
--- a/Adyen/Model/Checkout/Donation.cs
+++ b/Adyen/Model/Checkout/Donation.cs
@@ -43,11 +43,13 @@ namespace Adyen.Model.Checkout
         /// <param name="currency">The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes/). (required).</param>
         /// <param name="donationType">The [type of donation](https://docs.adyen.com/online-payments/donations/#donation-types).  Possible values: * **roundup**: a donation where the original transaction amount is rounded up as a donation. * **fixedAmounts**: a donation where you show fixed donations amounts that the shopper can select from. (required).</param>
         /// <param name="maxRoundupAmount">The maximum amount a transaction can be rounded up to make a donation. This field is only present when &#x60;donationType&#x60; is **roundup**..</param>
+        /// <param name="type">The [type of donation](https://docs.adyen.com/online-payments/donations/#donation-types).  Possible values: * **roundup**: a donation where the original transaction amount is rounded up as a donation. * **fixedAmounts**: a donation where you show fixed donation amounts that the shopper can select from. (required).</param>
         /// <param name="values">The fixed donation amounts in [minor units](https://docs.adyen.com/development-resources/currency-codes//#minor-units). This field is only present when &#x60;donationType&#x60; is **fixedAmounts**..</param>
-        public Donation(string currency = default(string), string donationType = default(string), long? maxRoundupAmount = default(long?), List<long> values = default(List<long>))
+        public Donation(string currency = default(string), string donationType = default(string), long? maxRoundupAmount = default(long?), string type = default(string), List<long> values = default(List<long>))
         {
             this.Currency = currency;
             this.DonationType = donationType;
+            this.Type = type;
             this.MaxRoundupAmount = maxRoundupAmount;
             this.Values = values;
         }
@@ -73,6 +75,13 @@ namespace Adyen.Model.Checkout
         [DataMember(Name = "maxRoundupAmount", EmitDefaultValue = false)]
         public long? MaxRoundupAmount { get; set; }
 
+        /// <summary>
+        /// The [type of donation](https://docs.adyen.com/online-payments/donations/#donation-types).  Possible values: * **roundup**: a donation where the original transaction amount is rounded up as a donation. * **fixedAmounts**: a donation where you show fixed donation amounts that the shopper can select from.
+        /// </summary>
+        /// <value>The [type of donation](https://docs.adyen.com/online-payments/donations/#donation-types).  Possible values: * **roundup**: a donation where the original transaction amount is rounded up as a donation. * **fixedAmounts**: a donation where you show fixed donation amounts that the shopper can select from.</value>
+        [DataMember(Name = "type", IsRequired = false, EmitDefaultValue = false)]
+        public string Type { get; set; }
+
         /// <summary>
         /// The fixed donation amounts in [minor units](https://docs.adyen.com/development-resources/currency-codes//#minor-units). This field is only present when &#x60;donationType&#x60; is **fixedAmounts**.
         /// </summary>
@@ -91,6 +100,7 @@ namespace Adyen.Model.Checkout
             sb.Append("  Currency: ").Append(Currency).Append("\n");
             sb.Append("  DonationType: ").Append(DonationType).Append("\n");
             sb.Append("  MaxRoundupAmount: ").Append(MaxRoundupAmount).Append("\n");
+            sb.Append("  Type: ").Append(Type).Append("\n");
             sb.Append("  Values: ").Append(Values).Append("\n");
             sb.Append("}\n");
             return sb.ToString();
@@ -141,6 +151,11 @@ namespace Adyen.Model.Checkout
                     this.MaxRoundupAmount == input.MaxRoundupAmount ||
                     this.MaxRoundupAmount.Equals(input.MaxRoundupAmount)
                 ) && 
+                (
+                    this.Type == input.Type ||
+                    (this.Type != null &&
+                    this.Type.Equals(input.Type))
+                ) && 
                 (
                     this.Values == input.Values ||
                     this.Values != null &&
@@ -167,6 +182,10 @@ namespace Adyen.Model.Checkout
                     hashCode = (hashCode * 59) + this.DonationType.GetHashCode();
                 }
                 hashCode = (hashCode * 59) + this.MaxRoundupAmount.GetHashCode();
+                if (this.Type != null)
+                {
+                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
+                }
                 if (this.Values != null)
                 {
                     hashCode = (hashCode * 59) + this.Values.GetHashCode();
diff --git a/Adyen/Model/Checkout/DotpayDetails.cs b/Adyen/Model/Checkout/DotpayDetails.cs
deleted file mode 100644
index 1ad22a68..00000000
--- a/Adyen/Model/Checkout/DotpayDetails.cs
+++ /dev/null
@@ -1,183 +0,0 @@
-/*
-* Adyen Checkout API
-*
-*
-* The version of the OpenAPI document: 71
-*
-* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
-* https://openapi-generator.tech
-* Do not edit the class manually.
-*/
-
-using System;
-using System.Collections;
-using System.Collections.Generic;
-using System.Collections.ObjectModel;
-using System.Linq;
-using System.IO;
-using System.Runtime.Serialization;
-using System.Text;
-using System.Text.RegularExpressions;
-using Newtonsoft.Json;
-using Newtonsoft.Json.Converters;
-using Newtonsoft.Json.Linq;
-using System.ComponentModel.DataAnnotations;
-using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;
-
-namespace Adyen.Model.Checkout
-{
-    /// <summary>
-    /// DotpayDetails
-    /// </summary>
-    [DataContract(Name = "DotpayDetails")]
-    public partial class DotpayDetails : IEquatable<DotpayDetails>, IValidatableObject
-    {
-        /// <summary>
-        /// **dotpay**
-        /// </summary>
-        /// <value>**dotpay**</value>
-        [JsonConverter(typeof(StringEnumConverter))]
-        public enum TypeEnum
-        {
-            /// <summary>
-            /// Enum Dotpay for value: dotpay
-            /// </summary>
-            [EnumMember(Value = "dotpay")]
-            Dotpay = 1
-
-        }
-
-
-        /// <summary>
-        /// **dotpay**
-        /// </summary>
-        /// <value>**dotpay**</value>
-        [DataMember(Name = "type", EmitDefaultValue = false)]
-        public TypeEnum? Type { get; set; }
-        /// <summary>
-        /// Initializes a new instance of the <see cref="DotpayDetails" /> class.
-        /// </summary>
-        [JsonConstructorAttribute]
-        protected DotpayDetails() { }
-        /// <summary>
-        /// Initializes a new instance of the <see cref="DotpayDetails" /> class.
-        /// </summary>
-        /// <param name="checkoutAttemptId">The checkout attempt identifier..</param>
-        /// <param name="issuer">The Dotpay issuer value of the shopper&#39;s selected bank. Set this to an **id** of a Dotpay issuer to preselect it. (required).</param>
-        /// <param name="type">**dotpay** (default to TypeEnum.Dotpay).</param>
-        public DotpayDetails(string checkoutAttemptId = default(string), string issuer = default(string), TypeEnum? type = TypeEnum.Dotpay)
-        {
-            this.Issuer = issuer;
-            this.CheckoutAttemptId = checkoutAttemptId;
-            this.Type = type;
-        }
-
-        /// <summary>
-        /// The checkout attempt identifier.
-        /// </summary>
-        /// <value>The checkout attempt identifier.</value>
-        [DataMember(Name = "checkoutAttemptId", EmitDefaultValue = false)]
-        public string CheckoutAttemptId { get; set; }
-
-        /// <summary>
-        /// The Dotpay issuer value of the shopper&#39;s selected bank. Set this to an **id** of a Dotpay issuer to preselect it.
-        /// </summary>
-        /// <value>The Dotpay issuer value of the shopper&#39;s selected bank. Set this to an **id** of a Dotpay issuer to preselect it.</value>
-        [DataMember(Name = "issuer", IsRequired = false, EmitDefaultValue = false)]
-        public string Issuer { get; set; }
-
-        /// <summary>
-        /// Returns the string presentation of the object
-        /// </summary>
-        /// <returns>String presentation of the object</returns>
-        public override string ToString()
-        {
-            StringBuilder sb = new StringBuilder();
-            sb.Append("class DotpayDetails {\n");
-            sb.Append("  CheckoutAttemptId: ").Append(CheckoutAttemptId).Append("\n");
-            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
-            sb.Append("  Type: ").Append(Type).Append("\n");
-            sb.Append("}\n");
-            return sb.ToString();
-        }
-
-        /// <summary>
-        /// Returns the JSON string presentation of the object
-        /// </summary>
-        /// <returns>JSON string presentation of the object</returns>
-        public virtual string ToJson()
-        {
-            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
-        }
-
-        /// <summary>
-        /// Returns true if objects are equal
-        /// </summary>
-        /// <param name="input">Object to be compared</param>
-        /// <returns>Boolean</returns>
-        public override bool Equals(object input)
-        {
-            return this.Equals(input as DotpayDetails);
-        }
-
-        /// <summary>
-        /// Returns true if DotpayDetails instances are equal
-        /// </summary>
-        /// <param name="input">Instance of DotpayDetails to be compared</param>
-        /// <returns>Boolean</returns>
-        public bool Equals(DotpayDetails input)
-        {
-            if (input == null)
-            {
-                return false;
-            }
-            return 
-                (
-                    this.CheckoutAttemptId == input.CheckoutAttemptId ||
-                    (this.CheckoutAttemptId != null &&
-                    this.CheckoutAttemptId.Equals(input.CheckoutAttemptId))
-                ) && 
-                (
-                    this.Issuer == input.Issuer ||
-                    (this.Issuer != null &&
-                    this.Issuer.Equals(input.Issuer))
-                ) && 
-                (
-                    this.Type == input.Type ||
-                    this.Type.Equals(input.Type)
-                );
-        }
-
-        /// <summary>
-        /// Gets the hash code
-        /// </summary>
-        /// <returns>Hash code</returns>
-        public override int GetHashCode()
-        {
-            unchecked // Overflow is fine, just wrap
-            {
-                int hashCode = 41;
-                if (this.CheckoutAttemptId != null)
-                {
-                    hashCode = (hashCode * 59) + this.CheckoutAttemptId.GetHashCode();
-                }
-                if (this.Issuer != null)
-                {
-                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
-                }
-                hashCode = (hashCode * 59) + this.Type.GetHashCode();
-                return hashCode;
-            }
-        }
-        /// <summary>
-        /// To validate all properties of the instance
-        /// </summary>
-        /// <param name="validationContext">Validation context</param>
-        /// <returns>Validation Result</returns>
-        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
-        {
-            yield break;
-        }
-    }
-
-}
diff --git a/Adyen/Model/Checkout/GiropayDetails.cs b/Adyen/Model/Checkout/GiropayDetails.cs
deleted file mode 100644
index 08f4a637..00000000
--- a/Adyen/Model/Checkout/GiropayDetails.cs
+++ /dev/null
@@ -1,204 +0,0 @@
-/*
-* Adyen Checkout API
-*
-*
-* The version of the OpenAPI document: 71
-*
-* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
-* https://openapi-generator.tech
-* Do not edit the class manually.
-*/
-
-using System;
-using System.Collections;
-using System.Collections.Generic;
-using System.Collections.ObjectModel;
-using System.Linq;
-using System.IO;
-using System.Runtime.Serialization;
-using System.Text;
-using System.Text.RegularExpressions;
-using Newtonsoft.Json;
-using Newtonsoft.Json.Converters;
-using Newtonsoft.Json.Linq;
-using System.ComponentModel.DataAnnotations;
-using OpenAPIDateConverter = Adyen.ApiSerialization.OpenAPIDateConverter;
-
-namespace Adyen.Model.Checkout
-{
-    /// <summary>
-    /// GiropayDetails
-    /// </summary>
-    [DataContract(Name = "GiropayDetails")]
-    public partial class GiropayDetails : IEquatable<GiropayDetails>, IValidatableObject
-    {
-        /// <summary>
-        /// **giropay**
-        /// </summary>
-        /// <value>**giropay**</value>
-        [JsonConverter(typeof(StringEnumConverter))]
-        public enum TypeEnum
-        {
-            /// <summary>
-            /// Enum Giropay for value: giropay
-            /// </summary>
-            [EnumMember(Value = "giropay")]
-            Giropay = 1
-
-        }
-
-
-        /// <summary>
-        /// **giropay**
-        /// </summary>
-        /// <value>**giropay**</value>
-        [DataMember(Name = "type", EmitDefaultValue = false)]
-        public TypeEnum? Type { get; set; }
-        /// <summary>
-        /// Initializes a new instance of the <see cref="GiropayDetails" /> class.
-        /// </summary>
-        /// <param name="checkoutAttemptId">The checkout attempt identifier..</param>
-        /// <param name="recurringDetailReference">This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token..</param>
-        /// <param name="storedPaymentMethodId">This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token..</param>
-        /// <param name="type">**giropay** (default to TypeEnum.Giropay).</param>
-        public GiropayDetails(string checkoutAttemptId = default(string), string recurringDetailReference = default(string), string storedPaymentMethodId = default(string), TypeEnum? type = TypeEnum.Giropay)
-        {
-            this.CheckoutAttemptId = checkoutAttemptId;
-            this.RecurringDetailReference = recurringDetailReference;
-            this.StoredPaymentMethodId = storedPaymentMethodId;
-            this.Type = type;
-        }
-
-        /// <summary>
-        /// The checkout attempt identifier.
-        /// </summary>
-        /// <value>The checkout attempt identifier.</value>
-        [DataMember(Name = "checkoutAttemptId", EmitDefaultValue = false)]
-        public string CheckoutAttemptId { get; set; }
-
-        /// <summary>
-        /// This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.
-        /// </summary>
-        /// <value>This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</value>
-        [DataMember(Name = "recurringDetailReference", EmitDefaultValue = false)]
-        [Obsolete("Deprecated since Adyen Checkout API v49. Use `storedPaymentMethodId` instead.")]
-        public string RecurringDetailReference { get; set; }
-
-        /// <summary>
-        /// This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.
-        /// </summary>
-        /// <value>This is the &#x60;recurringDetailReference&#x60; returned in the response when you created the token.</value>
-        [DataMember(Name = "storedPaymentMethodId", EmitDefaultValue = false)]
-        public string StoredPaymentMethodId { get; set; }
-
-        /// <summary>
-        /// Returns the string presentation of the object
-        /// </summary>
-        /// <returns>String presentation of the object</returns>
-        public override string ToString()
-        {
-            StringBuilder sb = new StringBuilder();
-            sb.Append("class GiropayDetails {\n");
-            sb.Append("  CheckoutAttemptId: ").Append(CheckoutAttemptId).Append("\n");
-            sb.Append("  RecurringDetailReference: ").Append(RecurringDetailReference).Append("\n");
-            sb.Append("  StoredPaymentMethodId: ").Append(StoredPaymentMethodId).Append("\n");
-            sb.Append("  Type: ").Append(Type).Append("\n");
-            sb.Append("}\n");
-            return sb.ToString();
-        }
-
-        /// <summary>
-        /// Returns the JSON string presentation of the object
-        /// </summary>
-        /// <returns>JSON string presentation of the object</returns>
-        public virtual string ToJson()
-        {
-            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
-        }
-
-        /// <summary>
-        /// Returns true if objects are equal
-        /// </summary>
-        /// <param name="input">Object to be compared</param>
-        /// <returns>Boolean</returns>
-        public override bool Equals(object input)
-        {
-            return this.Equals(input as GiropayDetails);
-        }
-
-        /// <summary>
-        /// Returns true if GiropayDetails instances are equal
-        /// </summary>
-        /// <param name="input">Instance of GiropayDetails to be compared</param>
-        /// <returns>Boolean</returns>
-        public bool Equals(GiropayDetails input)
-        {
-            if (input == null)
-            {
-                return false;
-            }
-            return 
-                (
-                    this.CheckoutAttemptId == input.CheckoutAttemptId ||
-                    (this.CheckoutAttemptId != null &&
-                    this.CheckoutAttemptId.Equals(input.CheckoutAttemptId))
-                ) && 
-                (
-                    this.RecurringDetailReference == input.RecurringDetailReference ||
-                    (this.RecurringDetailReference != null &&
-                    this.RecurringDetailReference.Equals(input.RecurringDetailReference))
-                ) && 
-                (
-                    this.StoredPaymentMethodId == input.StoredPaymentMethodId ||
-                    (this.StoredPaymentMethodId != null &&
-                    this.StoredPaymentMethodId.Equals(input.StoredPaymentMethodId))
-                ) && 
-                (
-                    this.Type == input.Type ||
-                    this.Type.Equals(input.Type)
-                );
-        }
-
-        /// <summary>
-        /// Gets the hash code
-        /// </summary>
-        /// <returns>Hash code</returns>
-        public override int GetHashCode()
-        {
-            unchecked // Overflow is fine, just wrap
-            {
-                int hashCode = 41;
-                if (this.CheckoutAttemptId != null)
-                {
-                    hashCode = (hashCode * 59) + this.CheckoutAttemptId.GetHashCode();
-                }
-                if (this.RecurringDetailReference != null)
-                {
-                    hashCode = (hashCode * 59) + this.RecurringDetailReference.GetHashCode();
-                }
-                if (this.StoredPaymentMethodId != null)
-                {
-                    hashCode = (hashCode * 59) + this.StoredPaymentMethodId.GetHashCode();
-                }
-                hashCode = (hashCode * 59) + this.Type.GetHashCode();
-                return hashCode;
-            }
-        }
-        /// <summary>
-        /// To validate all properties of the instance
-        /// </summary>
-        /// <param name="validationContext">Validation context</param>
-        /// <returns>Validation Result</returns>
-        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
-        {
-            // StoredPaymentMethodId (string) maxLength
-            if (this.StoredPaymentMethodId != null && this.StoredPaymentMethodId.Length > 64)
-            {
-                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StoredPaymentMethodId, length must be less than 64.", new [] { "StoredPaymentMethodId" });
-            }
-
-            yield break;
-        }
-    }
-
-}
diff --git a/Adyen/Model/Checkout/InstallmentOption.cs b/Adyen/Model/Checkout/InstallmentOption.cs
index 13e0ea1d..e3fbf4b0 100644
--- a/Adyen/Model/Checkout/InstallmentOption.cs
+++ b/Adyen/Model/Checkout/InstallmentOption.cs
@@ -38,59 +38,65 @@ namespace Adyen.Model.Checkout
         [JsonConverter(typeof(StringEnumConverter))]
         public enum PlansEnum
         {
+            /// <summary>
+            /// Enum Bonus for value: bonus
+            /// </summary>
+            [EnumMember(Value = "bonus")]
+            Bonus = 1,
+
             /// <summary>
             /// Enum BuynowPaylater for value: buynow_paylater
             /// </summary>
             [EnumMember(Value = "buynow_paylater")]
-            BuynowPaylater = 1,
+            BuynowPaylater = 2,
 
             /// <summary>
             /// Enum InteresRefundPrctg for value: interes_refund_prctg
             /// </summary>
             [EnumMember(Value = "interes_refund_prctg")]
-            InteresRefundPrctg = 2,
+            InteresRefundPrctg = 3,
 
             /// <summary>
             /// Enum InterestBonus for value: interest_bonus
             /// </summary>
             [EnumMember(Value = "interest_bonus")]
-            InterestBonus = 3,
+            InterestBonus = 4,
 
             /// <summary>
             /// Enum NointeresRefundPrctg for value: nointeres_refund_prctg
             /// </summary>
             [EnumMember(Value = "nointeres_refund_prctg")]
-            NointeresRefundPrctg = 4,
+            NointeresRefundPrctg = 5,
 
             /// <summary>
             /// Enum NointerestBonus for value: nointerest_bonus
             /// </summary>
             [EnumMember(Value = "nointerest_bonus")]
-            NointerestBonus = 5,
+            NointerestBonus = 6,
 
             /// <summary>
             /// Enum RefundPrctg for value: refund_prctg
             /// </summary>
             [EnumMember(Value = "refund_prctg")]
-            RefundPrctg = 6,
+            RefundPrctg = 7,
 
             /// <summary>
             /// Enum Regular for value: regular
             /// </summary>
             [EnumMember(Value = "regular")]
-            Regular = 7,
+            Regular = 8,
 
             /// <summary>
             /// Enum Revolving for value: revolving
             /// </summary>
             [EnumMember(Value = "revolving")]
-            Revolving = 8,
+            Revolving = 9,
 
             /// <summary>
             /// Enum WithInterest for value: with_interest
             /// </summary>
             [EnumMember(Value = "with_interest")]
-            WithInterest = 9
+            WithInterest = 10
 
         }
 
diff --git a/Adyen/Model/Checkout/Installments.cs b/Adyen/Model/Checkout/Installments.cs
index afda81fe..9d589e83 100644
--- a/Adyen/Model/Checkout/Installments.cs
+++ b/Adyen/Model/Checkout/Installments.cs
@@ -39,59 +39,65 @@ namespace Adyen.Model.Checkout
         [JsonConverter(typeof(StringEnumConverter))]
         public enum PlanEnum
         {
+            /// <summary>
+            /// Enum Bonus for value: bonus
+            /// </summary>
+            [EnumMember(Value = "bonus")]
+            Bonus = 1,
+
             /// <summary>
             /// Enum BuynowPaylater for value: buynow_paylater
             /// </summary>
             [EnumMember(Value = "buynow_paylater")]
-            BuynowPaylater = 1,
+            BuynowPaylater = 2,
 
             /// <summary>
             /// Enum InteresRefundPrctg for value: interes_refund_prctg
             /// </summary>
             [EnumMember(Value = "interes_refund_prctg")]
-            InteresRefundPrctg = 2,
+            InteresRefundPrctg = 3,
 
             /// <summary>
             /// Enum InterestBonus for value: interest_bonus
             /// </summary>
             [EnumMember(Value = "interest_bonus")]
-            InterestBonus = 3,
+            InterestBonus = 4,
 
             /// <summary>
             /// Enum NointeresRefundPrctg for value: nointeres_refund_prctg
             /// </summary>
             [EnumMember(Value = "nointeres_refund_prctg")]
-            NointeresRefundPrctg = 4,
+            NointeresRefundPrctg = 5,
 
             /// <summary>
             /// Enum NointerestBonus for value: nointerest_bonus
             /// </summary>
             [EnumMember(Value = "nointerest_bonus")]
-            NointerestBonus = 5,
+            NointerestBonus = 6,
 
             /// <summary>
             /// Enum RefundPrctg for value: refund_prctg
             /// </summary>
             [EnumMember(Value = "refund_prctg")]
-            RefundPrctg = 6,
+            RefundPrctg = 7,
 
             /// <summary>
             /// Enum Regular for value: regular
             /// </summary>
             [EnumMember(Value = "regular")]
-            Regular = 7,
+            Regular = 8,
 
             /// <summary>
             /// Enum Revolving for value: revolving
             /// </summary>
             [EnumMember(Value = "revolving")]
-            Revolving = 8,
+            Revolving = 9,
 
             /// <summary>
             /// Enum WithInterest for value: with_interest
             /// </summary>
             [EnumMember(Value = "with_interest")]
-            WithInterest = 9
+            WithInterest = 10
 
         }
 
diff --git a/Adyen/Model/Checkout/PaymentCaptureRequest.cs b/Adyen/Model/Checkout/PaymentCaptureRequest.cs
index 3363e601..7b9a3c0b 100644
--- a/Adyen/Model/Checkout/PaymentCaptureRequest.cs
+++ b/Adyen/Model/Checkout/PaymentCaptureRequest.cs
@@ -42,17 +42,19 @@ namespace Adyen.Model.Checkout
         /// </summary>
         /// <param name="amount">amount (required).</param>
         /// <param name="applicationInfo">applicationInfo.</param>
+        /// <param name="enhancedSchemeData">enhancedSchemeData.</param>
         /// <param name="lineItems">Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). &gt; This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip..</param>
         /// <param name="merchantAccount">The merchant account that is used to process the payment. (required).</param>
         /// <param name="platformChargebackLogic">platformChargebackLogic.</param>
         /// <param name="reference">Your reference for the capture request. Maximum length: 80 characters..</param>
         /// <param name="splits">An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/split-payments) or [platforms](https://docs.adyen.com/platforms/online-payments/split-payments/)..</param>
         /// <param name="subMerchants">A List of sub-merchants..</param>
-        public PaymentCaptureRequest(Amount amount = default(Amount), ApplicationInfo applicationInfo = default(ApplicationInfo), List<LineItem> lineItems = default(List<LineItem>), string merchantAccount = default(string), PlatformChargebackLogic platformChargebackLogic = default(PlatformChargebackLogic), string reference = default(string), List<Split> splits = default(List<Split>), List<SubMerchantInfo> subMerchants = default(List<SubMerchantInfo>))
+        public PaymentCaptureRequest(Amount amount = default(Amount), ApplicationInfo applicationInfo = default(ApplicationInfo), EnhancedSchemeData enhancedSchemeData = default(EnhancedSchemeData), List<LineItem> lineItems = default(List<LineItem>), string merchantAccount = default(string), PlatformChargebackLogic platformChargebackLogic = default(PlatformChargebackLogic), string reference = default(string), List<Split> splits = default(List<Split>), List<SubMerchantInfo> subMerchants = default(List<SubMerchantInfo>))
         {
             this.Amount = amount;
             this.MerchantAccount = merchantAccount;
             this.ApplicationInfo = applicationInfo;
+            this.EnhancedSchemeData = enhancedSchemeData;
             this.LineItems = lineItems;
             this.PlatformChargebackLogic = platformChargebackLogic;
             this.Reference = reference;
@@ -72,6 +74,12 @@ namespace Adyen.Model.Checkout
         [DataMember(Name = "applicationInfo", EmitDefaultValue = false)]
         public ApplicationInfo ApplicationInfo { get; set; }
 
+        /// <summary>
+        /// Gets or Sets EnhancedSchemeData
+        /// </summary>
+        [DataMember(Name = "enhancedSchemeData", EmitDefaultValue = false)]
+        public EnhancedSchemeData EnhancedSchemeData { get; set; }
+
         /// <summary>
         /// Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). &gt; This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.
         /// </summary>
@@ -123,6 +131,7 @@ namespace Adyen.Model.Checkout
             sb.Append("class PaymentCaptureRequest {\n");
             sb.Append("  Amount: ").Append(Amount).Append("\n");
             sb.Append("  ApplicationInfo: ").Append(ApplicationInfo).Append("\n");
+            sb.Append("  EnhancedSchemeData: ").Append(EnhancedSchemeData).Append("\n");
             sb.Append("  LineItems: ").Append(LineItems).Append("\n");
             sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
             sb.Append("  PlatformChargebackLogic: ").Append(PlatformChargebackLogic).Append("\n");
@@ -174,6 +183,11 @@ namespace Adyen.Model.Checkout
                     (this.ApplicationInfo != null &&
                     this.ApplicationInfo.Equals(input.ApplicationInfo))
                 ) && 
+                (
+                    this.EnhancedSchemeData == input.EnhancedSchemeData ||
+                    (this.EnhancedSchemeData != null &&
+                    this.EnhancedSchemeData.Equals(input.EnhancedSchemeData))
+                ) && 
                 (
                     this.LineItems == input.LineItems ||
                     this.LineItems != null &&
@@ -226,6 +240,10 @@ namespace Adyen.Model.Checkout
                 {
                     hashCode = (hashCode * 59) + this.ApplicationInfo.GetHashCode();
                 }
+                if (this.EnhancedSchemeData != null)
+                {
+                    hashCode = (hashCode * 59) + this.EnhancedSchemeData.GetHashCode();
+                }
                 if (this.LineItems != null)
                 {
                     hashCode = (hashCode * 59) + this.LineItems.GetHashCode();
diff --git a/Adyen/Model/Checkout/PaymentDetails.cs b/Adyen/Model/Checkout/PaymentDetails.cs
index 628e137b..bbb87300 100644
--- a/Adyen/Model/Checkout/PaymentDetails.cs
+++ b/Adyen/Model/Checkout/PaymentDetails.cs
@@ -309,263 +309,257 @@ namespace Adyen.Model.Checkout
             [EnumMember(Value = "neteller")]
             Neteller = 45,
 
-            /// <summary>
-            /// Enum Paysafecard for value: paysafecard
-            /// </summary>
-            [EnumMember(Value = "paysafecard")]
-            Paysafecard = 46,
-
             /// <summary>
             /// Enum Cashticket for value: cashticket
             /// </summary>
             [EnumMember(Value = "cashticket")]
-            Cashticket = 47,
+            Cashticket = 46,
 
             /// <summary>
             /// Enum Ikano for value: ikano
             /// </summary>
             [EnumMember(Value = "ikano")]
-            Ikano = 48,
+            Ikano = 47,
 
             /// <summary>
             /// Enum Karenmillen for value: karenmillen
             /// </summary>
             [EnumMember(Value = "karenmillen")]
-            Karenmillen = 49,
+            Karenmillen = 48,
 
             /// <summary>
             /// Enum Oasis for value: oasis
             /// </summary>
             [EnumMember(Value = "oasis")]
-            Oasis = 50,
+            Oasis = 49,
 
             /// <summary>
             /// Enum Warehouse for value: warehouse
             /// </summary>
             [EnumMember(Value = "warehouse")]
-            Warehouse = 51,
+            Warehouse = 50,
 
             /// <summary>
             /// Enum PrimeiropayBoleto for value: primeiropay_boleto
             /// </summary>
             [EnumMember(Value = "primeiropay_boleto")]
-            PrimeiropayBoleto = 52,
+            PrimeiropayBoleto = 51,
 
             /// <summary>
             /// Enum Mada for value: mada
             /// </summary>
             [EnumMember(Value = "mada")]
-            Mada = 53,
+            Mada = 52,
 
             /// <summary>
             /// Enum Benefit for value: benefit
             /// </summary>
             [EnumMember(Value = "benefit")]
-            Benefit = 54,
+            Benefit = 53,
 
             /// <summary>
             /// Enum Knet for value: knet
             /// </summary>
             [EnumMember(Value = "knet")]
-            Knet = 55,
+            Knet = 54,
 
             /// <summary>
             /// Enum Omannet for value: omannet
             /// </summary>
             [EnumMember(Value = "omannet")]
-            Omannet = 56,
+            Omannet = 55,
 
             /// <summary>
             /// Enum GopayWallet for value: gopay_wallet
             /// </summary>
             [EnumMember(Value = "gopay_wallet")]
-            GopayWallet = 57,
+            GopayWallet = 56,
 
             /// <summary>
             /// Enum KcpNaverpay for value: kcp_naverpay
             /// </summary>
             [EnumMember(Value = "kcp_naverpay")]
-            KcpNaverpay = 58,
+            KcpNaverpay = 57,
 
             /// <summary>
             /// Enum OnlinebankingIN for value: onlinebanking_IN
             /// </summary>
             [EnumMember(Value = "onlinebanking_IN")]
-            OnlinebankingIN = 59,
+            OnlinebankingIN = 58,
 
             /// <summary>
             /// Enum Fawry for value: fawry
             /// </summary>
             [EnumMember(Value = "fawry")]
-            Fawry = 60,
+            Fawry = 59,
 
             /// <summary>
             /// Enum Atome for value: atome
             /// </summary>
             [EnumMember(Value = "atome")]
-            Atome = 61,
+            Atome = 60,
 
             /// <summary>
             /// Enum Moneybookers for value: moneybookers
             /// </summary>
             [EnumMember(Value = "moneybookers")]
-            Moneybookers = 62,
+            Moneybookers = 61,
 
             /// <summary>
             /// Enum Naps for value: naps
             /// </summary>
             [EnumMember(Value = "naps")]
-            Naps = 63,
+            Naps = 62,
 
             /// <summary>
             /// Enum Nordea for value: nordea
             /// </summary>
             [EnumMember(Value = "nordea")]
-            Nordea = 64,
+            Nordea = 63,
 
             /// <summary>
             /// Enum BoletobancarioBradesco for value: boletobancario_bradesco
             /// </summary>
             [EnumMember(Value = "boletobancario_bradesco")]
-            BoletobancarioBradesco = 65,
+            BoletobancarioBradesco = 64,
 
             /// <summary>
             /// Enum BoletobancarioItau for value: boletobancario_itau
             /// </summary>
             [EnumMember(Value = "boletobancario_itau")]
-            BoletobancarioItau = 66,
+            BoletobancarioItau = 65,
 
             /// <summary>
             /// Enum BoletobancarioSantander for value: boletobancario_santander
             /// </summary>
             [EnumMember(Value = "boletobancario_santander")]
-            BoletobancarioSantander = 67,
+            BoletobancarioSantander = 66,
 
             /// <summary>
             /// Enum BoletobancarioBancodobrasil for value: boletobancario_bancodobrasil
             /// </summary>
             [EnumMember(Value = "boletobancario_bancodobrasil")]
-            BoletobancarioBancodobrasil = 68,
+            BoletobancarioBancodobrasil = 67,
 
             /// <summary>
             /// Enum BoletobancarioHsbc for value: boletobancario_hsbc
             /// </summary>
             [EnumMember(Value = "boletobancario_hsbc")]
-            BoletobancarioHsbc = 69,
+            BoletobancarioHsbc = 68,
 
             /// <summary>
             /// Enum MolpayMaybank2u for value: molpay_maybank2u
             /// </summary>
             [EnumMember(Value = "molpay_maybank2u")]
-            MolpayMaybank2u = 70,
+            MolpayMaybank2u = 69,
 
             /// <summary>
             /// Enum MolpayCimb for value: molpay_cimb
             /// </summary>
             [EnumMember(Value = "molpay_cimb")]
-            MolpayCimb = 71,
+            MolpayCimb = 70,
 
             /// <summary>
             /// Enum MolpayRhb for value: molpay_rhb
             /// </summary>
             [EnumMember(Value = "molpay_rhb")]
-            MolpayRhb = 72,
+            MolpayRhb = 71,
 
             /// <summary>
             /// Enum MolpayAmb for value: molpay_amb
             /// </summary>
             [EnumMember(Value = "molpay_amb")]
-            MolpayAmb = 73,
+            MolpayAmb = 72,
 
             /// <summary>
             /// Enum MolpayHlb for value: molpay_hlb
             /// </summary>
             [EnumMember(Value = "molpay_hlb")]
-            MolpayHlb = 74,
+            MolpayHlb = 73,
 
             /// <summary>
             /// Enum MolpayAffinEpg for value: molpay_affin_epg
             /// </summary>
             [EnumMember(Value = "molpay_affin_epg")]
-            MolpayAffinEpg = 75,
+            MolpayAffinEpg = 74,
 
             /// <summary>
             /// Enum MolpayBankislam for value: molpay_bankislam
             /// </summary>
             [EnumMember(Value = "molpay_bankislam")]
-            MolpayBankislam = 76,
+            MolpayBankislam = 75,
 
             /// <summary>
             /// Enum MolpayPublicbank for value: molpay_publicbank
             /// </summary>
             [EnumMember(Value = "molpay_publicbank")]
-            MolpayPublicbank = 77,
+            MolpayPublicbank = 76,
 
             /// <summary>
             /// Enum FpxAgrobank for value: fpx_agrobank
             /// </summary>
             [EnumMember(Value = "fpx_agrobank")]
-            FpxAgrobank = 78,
+            FpxAgrobank = 77,
 
             /// <summary>
             /// Enum Touchngo for value: touchngo
             /// </summary>
             [EnumMember(Value = "touchngo")]
-            Touchngo = 79,
+            Touchngo = 78,
 
             /// <summary>
             /// Enum Maybank2uMae for value: maybank2u_mae
             /// </summary>
             [EnumMember(Value = "maybank2u_mae")]
-            Maybank2uMae = 80,
+            Maybank2uMae = 79,
 
             /// <summary>
             /// Enum Duitnow for value: duitnow
             /// </summary>
             [EnumMember(Value = "duitnow")]
-            Duitnow = 81,
+            Duitnow = 80,
 
             /// <summary>
             /// Enum Promptpay for value: promptpay
             /// </summary>
             [EnumMember(Value = "promptpay")]
-            Promptpay = 82,
+            Promptpay = 81,
 
             /// <summary>
             /// Enum TwintPos for value: twint_pos
             /// </summary>
             [EnumMember(Value = "twint_pos")]
-            TwintPos = 83,
+            TwintPos = 82,
 
             /// <summary>
             /// Enum AlipayHk for value: alipay_hk
             /// </summary>
             [EnumMember(Value = "alipay_hk")]
-            AlipayHk = 84,
+            AlipayHk = 83,
 
             /// <summary>
             /// Enum AlipayHkWeb for value: alipay_hk_web
             /// </summary>
             [EnumMember(Value = "alipay_hk_web")]
-            AlipayHkWeb = 85,
+            AlipayHkWeb = 84,
 
             /// <summary>
             /// Enum AlipayHkWap for value: alipay_hk_wap
             /// </summary>
             [EnumMember(Value = "alipay_hk_wap")]
-            AlipayHkWap = 86,
+            AlipayHkWap = 85,
 
             /// <summary>
             /// Enum AlipayWap for value: alipay_wap
             /// </summary>
             [EnumMember(Value = "alipay_wap")]
-            AlipayWap = 87,
+            AlipayWap = 86,
 
             /// <summary>
             /// Enum Balanceplatform for value: balanceplatform
             /// </summary>
             [EnumMember(Value = "balanceplatform")]
-            Balanceplatform = 88
+            Balanceplatform = 87
 
         }
 
diff --git a/Adyen/Model/Checkout/PaymentLinkRequest.cs b/Adyen/Model/Checkout/PaymentLinkRequest.cs
index c7e3ebea..2053acec 100644
--- a/Adyen/Model/Checkout/PaymentLinkRequest.cs
+++ b/Adyen/Model/Checkout/PaymentLinkRequest.cs
@@ -154,11 +154,11 @@ namespace Adyen.Model.Checkout
         /// <summary>
         /// Initializes a new instance of the <see cref="PaymentLinkRequest" /> class.
         /// </summary>
-        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;.</param>
+        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;.</param>
         /// <param name="amount">amount (required).</param>
         /// <param name="applicationInfo">applicationInfo.</param>
         /// <param name="billingAddress">billingAddress.</param>
-        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;.</param>
+        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;.</param>
         /// <param name="captureDelayHours">The delay between the authorisation and scheduled auto-capture, specified in hours..</param>
         /// <param name="countryCode">The shopper&#39;s two-letter country code..</param>
         /// <param name="dateOfBirth">The shopper&#39;s date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD.</param>
@@ -243,9 +243,9 @@ namespace Adyen.Model.Checkout
         }
 
         /// <summary>
-        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;
+        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
         /// </summary>
-        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;</value>
+        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
         [DataMember(Name = "allowedPaymentMethods", EmitDefaultValue = false)]
         public List<string> AllowedPaymentMethods { get; set; }
 
@@ -268,9 +268,9 @@ namespace Adyen.Model.Checkout
         public Address BillingAddress { get; set; }
 
         /// <summary>
-        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;
+        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
         /// </summary>
-        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;</value>
+        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
         [DataMember(Name = "blockedPaymentMethods", EmitDefaultValue = false)]
         public List<string> BlockedPaymentMethods { get; set; }
 
diff --git a/Adyen/Model/Checkout/PaymentLinkResponse.cs b/Adyen/Model/Checkout/PaymentLinkResponse.cs
index 003774ba..ad21bf01 100644
--- a/Adyen/Model/Checkout/PaymentLinkResponse.cs
+++ b/Adyen/Model/Checkout/PaymentLinkResponse.cs
@@ -200,11 +200,11 @@ namespace Adyen.Model.Checkout
         /// <summary>
         /// Initializes a new instance of the <see cref="PaymentLinkResponse" /> class.
         /// </summary>
-        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;.</param>
+        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;.</param>
         /// <param name="amount">amount (required).</param>
         /// <param name="applicationInfo">applicationInfo.</param>
         /// <param name="billingAddress">billingAddress.</param>
-        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;.</param>
+        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;.</param>
         /// <param name="captureDelayHours">The delay between the authorisation and scheduled auto-capture, specified in hours..</param>
         /// <param name="countryCode">The shopper&#39;s two-letter country code..</param>
         /// <param name="dateOfBirth">The shopper&#39;s date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD.</param>
@@ -293,9 +293,9 @@ namespace Adyen.Model.Checkout
         }
 
         /// <summary>
-        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;
+        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
         /// </summary>
-        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;</value>
+        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
         [DataMember(Name = "allowedPaymentMethods", EmitDefaultValue = false)]
         public List<string> AllowedPaymentMethods { get; set; }
 
@@ -318,9 +318,9 @@ namespace Adyen.Model.Checkout
         public Address BillingAddress { get; set; }
 
         /// <summary>
-        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;
+        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
         /// </summary>
-        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;</value>
+        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
         [DataMember(Name = "blockedPaymentMethods", EmitDefaultValue = false)]
         public List<string> BlockedPaymentMethods { get; set; }
 
diff --git a/Adyen/Model/Checkout/PaymentMethodToStore.cs b/Adyen/Model/Checkout/PaymentMethodToStore.cs
index 1599a18f..a42d81f9 100644
--- a/Adyen/Model/Checkout/PaymentMethodToStore.cs
+++ b/Adyen/Model/Checkout/PaymentMethodToStore.cs
@@ -37,6 +37,7 @@ namespace Adyen.Model.Checkout
         /// </summary>
         /// <param name="brand">Secondary brand of the card. For example: **plastix**, **hmclub**..</param>
         /// <param name="cvc">The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)..</param>
+        /// <param name="encryptedCard">The encrypted card..</param>
         /// <param name="encryptedCardNumber">The encrypted card number..</param>
         /// <param name="encryptedExpiryMonth">The encrypted card expiry month..</param>
         /// <param name="encryptedExpiryYear">The encrypted card expiry year..</param>
@@ -46,10 +47,11 @@ namespace Adyen.Model.Checkout
         /// <param name="holderName">The name of the card holder..</param>
         /// <param name="number">The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)..</param>
         /// <param name="type">Set to **scheme**..</param>
-        public PaymentMethodToStore(string brand = default(string), string cvc = default(string), string encryptedCardNumber = default(string), string encryptedExpiryMonth = default(string), string encryptedExpiryYear = default(string), string encryptedSecurityCode = default(string), string expiryMonth = default(string), string expiryYear = default(string), string holderName = default(string), string number = default(string), string type = default(string))
+        public PaymentMethodToStore(string brand = default(string), string cvc = default(string), string encryptedCard = default(string), string encryptedCardNumber = default(string), string encryptedExpiryMonth = default(string), string encryptedExpiryYear = default(string), string encryptedSecurityCode = default(string), string expiryMonth = default(string), string expiryYear = default(string), string holderName = default(string), string number = default(string), string type = default(string))
         {
             this.Brand = brand;
             this.Cvc = cvc;
+            this.EncryptedCard = encryptedCard;
             this.EncryptedCardNumber = encryptedCardNumber;
             this.EncryptedExpiryMonth = encryptedExpiryMonth;
             this.EncryptedExpiryYear = encryptedExpiryYear;
@@ -75,6 +77,13 @@ namespace Adyen.Model.Checkout
         [DataMember(Name = "cvc", EmitDefaultValue = false)]
         public string Cvc { get; set; }
 
+        /// <summary>
+        /// The encrypted card.
+        /// </summary>
+        /// <value>The encrypted card.</value>
+        [DataMember(Name = "encryptedCard", EmitDefaultValue = false)]
+        public string EncryptedCard { get; set; }
+
         /// <summary>
         /// The encrypted card number.
         /// </summary>
@@ -148,6 +157,7 @@ namespace Adyen.Model.Checkout
             sb.Append("class PaymentMethodToStore {\n");
             sb.Append("  Brand: ").Append(Brand).Append("\n");
             sb.Append("  Cvc: ").Append(Cvc).Append("\n");
+            sb.Append("  EncryptedCard: ").Append(EncryptedCard).Append("\n");
             sb.Append("  EncryptedCardNumber: ").Append(EncryptedCardNumber).Append("\n");
             sb.Append("  EncryptedExpiryMonth: ").Append(EncryptedExpiryMonth).Append("\n");
             sb.Append("  EncryptedExpiryYear: ").Append(EncryptedExpiryYear).Append("\n");
@@ -202,6 +212,11 @@ namespace Adyen.Model.Checkout
                     (this.Cvc != null &&
                     this.Cvc.Equals(input.Cvc))
                 ) && 
+                (
+                    this.EncryptedCard == input.EncryptedCard ||
+                    (this.EncryptedCard != null &&
+                    this.EncryptedCard.Equals(input.EncryptedCard))
+                ) && 
                 (
                     this.EncryptedCardNumber == input.EncryptedCardNumber ||
                     (this.EncryptedCardNumber != null &&
@@ -266,6 +281,10 @@ namespace Adyen.Model.Checkout
                 {
                     hashCode = (hashCode * 59) + this.Cvc.GetHashCode();
                 }
+                if (this.EncryptedCard != null)
+                {
+                    hashCode = (hashCode * 59) + this.EncryptedCard.GetHashCode();
+                }
                 if (this.EncryptedCardNumber != null)
                 {
                     hashCode = (hashCode * 59) + this.EncryptedCardNumber.GetHashCode();
@@ -312,6 +331,12 @@ namespace Adyen.Model.Checkout
         /// <returns>Validation Result</returns>
         public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
         {
+            // EncryptedCard (string) maxLength
+            if (this.EncryptedCard != null && this.EncryptedCard.Length > 40000)
+            {
+                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EncryptedCard, length must be less than 40000.", new [] { "EncryptedCard" });
+            }
+
             // EncryptedCardNumber (string) maxLength
             if (this.EncryptedCardNumber != null && this.EncryptedCardNumber.Length > 15000)
             {
diff --git a/Adyen/Model/Checkout/PaymentMethodsRequest.cs b/Adyen/Model/Checkout/PaymentMethodsRequest.cs
index 758d9779..5ea97d52 100644
--- a/Adyen/Model/Checkout/PaymentMethodsRequest.cs
+++ b/Adyen/Model/Checkout/PaymentMethodsRequest.cs
@@ -109,9 +109,9 @@ namespace Adyen.Model.Checkout
         /// Initializes a new instance of the <see cref="PaymentMethodsRequest" /> class.
         /// </summary>
         /// <param name="additionalData">This field contains additional data, which may be required for a particular payment request.  The &#x60;additionalData&#x60; object consists of entries, each of which includes the key and value..</param>
-        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;.</param>
+        /// <param name="allowedPaymentMethods">List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;.</param>
         /// <param name="amount">amount.</param>
-        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;.</param>
+        /// <param name="blockedPaymentMethods">List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;.</param>
         /// <param name="channel">The platform where a payment transaction takes place. This field can be used for filtering out payment methods that are only available on specific platforms. Possible values: * iOS * Android * Web.</param>
         /// <param name="countryCode">The shopper&#39;s country code..</param>
         /// <param name="merchantAccount">The merchant account identifier, with which you want to process the transaction. (required).</param>
@@ -148,9 +148,9 @@ namespace Adyen.Model.Checkout
         public Dictionary<string, string> AdditionalData { get; set; }
 
         /// <summary>
-        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;
+        /// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
         /// </summary>
-        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;</value>
+        /// <value>List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
         [DataMember(Name = "allowedPaymentMethods", EmitDefaultValue = false)]
         public List<string> AllowedPaymentMethods { get; set; }
 
@@ -161,9 +161,9 @@ namespace Adyen.Model.Checkout
         public Amount Amount { get; set; }
 
         /// <summary>
-        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;
+        /// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;
         /// </summary>
-        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;</value>
+        /// <value>List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;applepay\&quot;]&#x60;</value>
         [DataMember(Name = "blockedPaymentMethods", EmitDefaultValue = false)]
         public List<string> BlockedPaymentMethods { get; set; }
 
diff --git a/Adyen/Model/Checkout/PaymentRequest.cs b/Adyen/Model/Checkout/PaymentRequest.cs
index c96ecef1..5f198378 100644
--- a/Adyen/Model/Checkout/PaymentRequest.cs
+++ b/Adyen/Model/Checkout/PaymentRequest.cs
@@ -234,6 +234,7 @@ namespace Adyen.Model.Checkout
         /// <param name="enableOneClick">When true and &#x60;shopperReference&#x60; is provided, the shopper will be asked if the payment details should be stored for future [one-click payments](https://docs.adyen.com/get-started-with-adyen/payment-glossary/#one-click-payments-definition)..</param>
         /// <param name="enablePayOut">When true and &#x60;shopperReference&#x60; is provided, the payment details will be tokenized for payouts..</param>
         /// <param name="enableRecurring">When true and &#x60;shopperReference&#x60; is provided, the payment details will be stored for [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types) where the shopper is not present, such as subscription or automatic top-up payments..</param>
+        /// <param name="enhancedSchemeData">enhancedSchemeData.</param>
         /// <param name="entityType">The type of the entity the payment is processed for..</param>
         /// <param name="fraudOffset">An integer value that is added to the normal fraud score. The value can be either positive or negative..</param>
         /// <param name="fundOrigin">fundOrigin.</param>
@@ -260,7 +261,7 @@ namespace Adyen.Model.Checkout
         /// <param name="redirectFromIssuerMethod">Specifies the redirect method (GET or POST) when redirecting back from the issuer..</param>
         /// <param name="redirectToIssuerMethod">Specifies the redirect method (GET or POST) when redirecting to the issuer..</param>
         /// <param name="reference">The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\&quot;-\&quot;). Maximum length: 80 characters. (required).</param>
-        /// <param name="returnUrl">The URL to return to in case of a redirection. The format depends on the channel.  * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;  If the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value. &gt; The URL must not include personally identifiable information (PII), for example name or email address. (required).</param>
+        /// <param name="returnUrl">The URL to return to in case of a redirection. The format depends on the channel.  * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.example.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;  If the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value. &gt; The URL must not include personally identifiable information (PII), for example name or email address. (required).</param>
         /// <param name="riskData">riskData.</param>
         /// <param name="sessionValidity">The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00.</param>
         /// <param name="shopperConversionId">A unique ID that can be used to associate &#x60;/paymentMethods&#x60; and &#x60;/payments&#x60; requests with the same shopper transaction, offering insights into conversion rates..</param>
@@ -280,7 +281,7 @@ namespace Adyen.Model.Checkout
         /// <param name="threeDS2RequestData">threeDS2RequestData.</param>
         /// <param name="threeDSAuthenticationOnly">If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. (default to false).</param>
         /// <param name="trustedShopper">Set to true if the payment should be routed to a trusted MID..</param>
-        public PaymentRequest(AccountInfo accountInfo = default(AccountInfo), Amount additionalAmount = default(Amount), Dictionary<string, string> additionalData = default(Dictionary<string, string>), Amount amount = default(Amount), ApplicationInfo applicationInfo = default(ApplicationInfo), AuthenticationData authenticationData = default(AuthenticationData), CheckoutBankAccount bankAccount = default(CheckoutBankAccount), BillingAddress billingAddress = default(BillingAddress), BrowserInfo browserInfo = default(BrowserInfo), int? captureDelayHours = default(int?), ChannelEnum? channel = default(ChannelEnum?), string checkoutAttemptId = default(string), Company company = default(Company), string conversionId = default(string), string countryCode = default(string), DateTime dateOfBirth = default(DateTime), ForexQuote dccQuote = default(ForexQuote), DateTime deliverAt = default(DateTime), DeliveryAddress deliveryAddress = default(DeliveryAddress), DateTime deliveryDate = default(DateTime), string deviceFingerprint = default(string), bool? enableOneClick = default(bool?), bool? enablePayOut = default(bool?), bool? enableRecurring = default(bool?), EntityTypeEnum? entityType = default(EntityTypeEnum?), int? fraudOffset = default(int?), FundOrigin fundOrigin = default(FundOrigin), FundRecipient fundRecipient = default(FundRecipient), IndustryUsageEnum? industryUsage = default(IndustryUsageEnum?), Installments installments = default(Installments), List<LineItem> lineItems = default(List<LineItem>), Dictionary<string, string> localizedShopperStatement = default(Dictionary<string, string>), Mandate mandate = default(Mandate), string mcc = default(string), string merchantAccount = default(string), string merchantOrderReference = default(string), MerchantRiskIndicator merchantRiskIndicator = default(MerchantRiskIndicator), Dictionary<string, string> metadata = default(Dictionary<string, string>), ThreeDSecureData mpiData = default(ThreeDSecureData), EncryptedOrderData order = default(EncryptedOrderData), string orderReference = default(string), string origin = default(string), CheckoutPaymentMethod paymentMethod = default(CheckoutPaymentMethod), PlatformChargebackLogic platformChargebackLogic = default(PlatformChargebackLogic), string recurringExpiry = default(string), string recurringFrequency = default(string), RecurringProcessingModelEnum? recurringProcessingModel = default(RecurringProcessingModelEnum?), string redirectFromIssuerMethod = default(string), string redirectToIssuerMethod = default(string), string reference = default(string), string returnUrl = default(string), RiskData riskData = default(RiskData), string sessionValidity = default(string), string shopperConversionId = default(string), string shopperEmail = default(string), string shopperIP = default(string), ShopperInteractionEnum? shopperInteraction = default(ShopperInteractionEnum?), string shopperLocale = default(string), Name shopperName = default(Name), string shopperReference = default(string), string shopperStatement = default(string), string socialSecurityNumber = default(string), List<Split> splits = default(List<Split>), string store = default(string), bool? storePaymentMethod = default(bool?), List<SubMerchantInfo> subMerchants = default(List<SubMerchantInfo>), string telephoneNumber = default(string), ThreeDS2RequestFields threeDS2RequestData = default(ThreeDS2RequestFields), bool? threeDSAuthenticationOnly = false, bool? trustedShopper = default(bool?))
+        public PaymentRequest(AccountInfo accountInfo = default(AccountInfo), Amount additionalAmount = default(Amount), Dictionary<string, string> additionalData = default(Dictionary<string, string>), Amount amount = default(Amount), ApplicationInfo applicationInfo = default(ApplicationInfo), AuthenticationData authenticationData = default(AuthenticationData), CheckoutBankAccount bankAccount = default(CheckoutBankAccount), BillingAddress billingAddress = default(BillingAddress), BrowserInfo browserInfo = default(BrowserInfo), int? captureDelayHours = default(int?), ChannelEnum? channel = default(ChannelEnum?), string checkoutAttemptId = default(string), Company company = default(Company), string conversionId = default(string), string countryCode = default(string), DateTime dateOfBirth = default(DateTime), ForexQuote dccQuote = default(ForexQuote), DateTime deliverAt = default(DateTime), DeliveryAddress deliveryAddress = default(DeliveryAddress), DateTime deliveryDate = default(DateTime), string deviceFingerprint = default(string), bool? enableOneClick = default(bool?), bool? enablePayOut = default(bool?), bool? enableRecurring = default(bool?), EnhancedSchemeData enhancedSchemeData = default(EnhancedSchemeData), EntityTypeEnum? entityType = default(EntityTypeEnum?), int? fraudOffset = default(int?), FundOrigin fundOrigin = default(FundOrigin), FundRecipient fundRecipient = default(FundRecipient), IndustryUsageEnum? industryUsage = default(IndustryUsageEnum?), Installments installments = default(Installments), List<LineItem> lineItems = default(List<LineItem>), Dictionary<string, string> localizedShopperStatement = default(Dictionary<string, string>), Mandate mandate = default(Mandate), string mcc = default(string), string merchantAccount = default(string), string merchantOrderReference = default(string), MerchantRiskIndicator merchantRiskIndicator = default(MerchantRiskIndicator), Dictionary<string, string> metadata = default(Dictionary<string, string>), ThreeDSecureData mpiData = default(ThreeDSecureData), EncryptedOrderData order = default(EncryptedOrderData), string orderReference = default(string), string origin = default(string), CheckoutPaymentMethod paymentMethod = default(CheckoutPaymentMethod), PlatformChargebackLogic platformChargebackLogic = default(PlatformChargebackLogic), string recurringExpiry = default(string), string recurringFrequency = default(string), RecurringProcessingModelEnum? recurringProcessingModel = default(RecurringProcessingModelEnum?), string redirectFromIssuerMethod = default(string), string redirectToIssuerMethod = default(string), string reference = default(string), string returnUrl = default(string), RiskData riskData = default(RiskData), string sessionValidity = default(string), string shopperConversionId = default(string), string shopperEmail = default(string), string shopperIP = default(string), ShopperInteractionEnum? shopperInteraction = default(ShopperInteractionEnum?), string shopperLocale = default(string), Name shopperName = default(Name), string shopperReference = default(string), string shopperStatement = default(string), string socialSecurityNumber = default(string), List<Split> splits = default(List<Split>), string store = default(string), bool? storePaymentMethod = default(bool?), List<SubMerchantInfo> subMerchants = default(List<SubMerchantInfo>), string telephoneNumber = default(string), ThreeDS2RequestFields threeDS2RequestData = default(ThreeDS2RequestFields), bool? threeDSAuthenticationOnly = false, bool? trustedShopper = default(bool?))
         {
             this.Amount = amount;
             this.MerchantAccount = merchantAccount;
@@ -310,6 +311,7 @@ namespace Adyen.Model.Checkout
             this.EnableOneClick = enableOneClick;
             this.EnablePayOut = enablePayOut;
             this.EnableRecurring = enableRecurring;
+            this.EnhancedSchemeData = enhancedSchemeData;
             this.EntityType = entityType;
             this.FraudOffset = fraudOffset;
             this.FundOrigin = fundOrigin;
@@ -506,6 +508,12 @@ namespace Adyen.Model.Checkout
         [DataMember(Name = "enableRecurring", EmitDefaultValue = false)]
         public bool? EnableRecurring { get; set; }
 
+        /// <summary>
+        /// Gets or Sets EnhancedSchemeData
+        /// </summary>
+        [DataMember(Name = "enhancedSchemeData", EmitDefaultValue = false)]
+        public EnhancedSchemeData EnhancedSchemeData { get; set; }
+
         /// <summary>
         /// An integer value that is added to the normal fraud score. The value can be either positive or negative.
         /// </summary>
@@ -659,9 +667,9 @@ namespace Adyen.Model.Checkout
         public string Reference { get; set; }
 
         /// <summary>
-        /// The URL to return to in case of a redirection. The format depends on the channel.  * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;  If the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value. &gt; The URL must not include personally identifiable information (PII), for example name or email address.
+        /// The URL to return to in case of a redirection. The format depends on the channel.  * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.example.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;  If the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value. &gt; The URL must not include personally identifiable information (PII), for example name or email address.
         /// </summary>
-        /// <value>The URL to return to in case of a redirection. The format depends on the channel.  * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;  If the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value. &gt; The URL must not include personally identifiable information (PII), for example name or email address.</value>
+        /// <value>The URL to return to in case of a redirection. The format depends on the channel.  * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.example.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;  If the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value. &gt; The URL must not include personally identifiable information (PII), for example name or email address.</value>
         [DataMember(Name = "returnUrl", IsRequired = false, EmitDefaultValue = false)]
         public string ReturnUrl { get; set; }
 
@@ -821,6 +829,7 @@ namespace Adyen.Model.Checkout
             sb.Append("  EnableOneClick: ").Append(EnableOneClick).Append("\n");
             sb.Append("  EnablePayOut: ").Append(EnablePayOut).Append("\n");
             sb.Append("  EnableRecurring: ").Append(EnableRecurring).Append("\n");
+            sb.Append("  EnhancedSchemeData: ").Append(EnhancedSchemeData).Append("\n");
             sb.Append("  EntityType: ").Append(EntityType).Append("\n");
             sb.Append("  FraudOffset: ").Append(FraudOffset).Append("\n");
             sb.Append("  FundOrigin: ").Append(FundOrigin).Append("\n");
@@ -1018,6 +1027,11 @@ namespace Adyen.Model.Checkout
                     this.EnableRecurring == input.EnableRecurring ||
                     this.EnableRecurring.Equals(input.EnableRecurring)
                 ) && 
+                (
+                    this.EnhancedSchemeData == input.EnhancedSchemeData ||
+                    (this.EnhancedSchemeData != null &&
+                    this.EnhancedSchemeData.Equals(input.EnhancedSchemeData))
+                ) && 
                 (
                     this.EntityType == input.EntityType ||
                     this.EntityType.Equals(input.EntityType)
@@ -1337,6 +1351,10 @@ namespace Adyen.Model.Checkout
                 hashCode = (hashCode * 59) + this.EnableOneClick.GetHashCode();
                 hashCode = (hashCode * 59) + this.EnablePayOut.GetHashCode();
                 hashCode = (hashCode * 59) + this.EnableRecurring.GetHashCode();
+                if (this.EnhancedSchemeData != null)
+                {
+                    hashCode = (hashCode * 59) + this.EnhancedSchemeData.GetHashCode();
+                }
                 hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                 hashCode = (hashCode * 59) + this.FraudOffset.GetHashCode();
                 if (this.FundOrigin != null)
diff --git a/Adyen/Model/Checkout/ResponseAdditionalDataCommon.cs b/Adyen/Model/Checkout/ResponseAdditionalDataCommon.cs
index 11cfeab4..1ce2d62c 100644
--- a/Adyen/Model/Checkout/ResponseAdditionalDataCommon.cs
+++ b/Adyen/Model/Checkout/ResponseAdditionalDataCommon.cs
@@ -61,6 +61,52 @@ namespace Adyen.Model.Checkout
         [DataMember(Name = "fraudResultType", EmitDefaultValue = false)]
         public FraudResultTypeEnum? FraudResultType { get; set; }
         /// <summary>
+        /// The risk level of the payment as determined by the FDM machine learning model.
+        /// </summary>
+        /// <value>The risk level of the payment as determined by the FDM machine learning model.</value>
+        [JsonConverter(typeof(StringEnumConverter))]
+        public enum FraudRiskLevelEnum
+        {
+            /// <summary>
+            /// Enum VeryLow for value: Very low
+            /// </summary>
+            [EnumMember(Value = "Very low")]
+            VeryLow = 1,
+
+            /// <summary>
+            /// Enum Low for value: Low
+            /// </summary>
+            [EnumMember(Value = "Low")]
+            Low = 2,
+
+            /// <summary>
+            /// Enum Medium for value: Medium
+            /// </summary>
+            [EnumMember(Value = "Medium")]
+            Medium = 3,
+
+            /// <summary>
+            /// Enum High for value: High
+            /// </summary>
+            [EnumMember(Value = "High")]
+            High = 4,
+
+            /// <summary>
+            /// Enum VeryHigh for value: Very high
+            /// </summary>
+            [EnumMember(Value = "Very high")]
+            VeryHigh = 5
+
+        }
+
+
+        /// <summary>
+        /// The risk level of the payment as determined by the FDM machine learning model.
+        /// </summary>
+        /// <value>The risk level of the payment as determined by the FDM machine learning model.</value>
+        [DataMember(Name = "fraudRiskLevel", EmitDefaultValue = false)]
+        public FraudRiskLevelEnum? FraudRiskLevel { get; set; }
+        /// <summary>
         /// The processing model used for the recurring transaction.
         /// </summary>
         /// <value>The processing model used for the recurring transaction.</value>
@@ -154,6 +200,7 @@ namespace Adyen.Model.Checkout
         /// <param name="fraudCheckItemNrFraudCheckname">The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair..</param>
         /// <param name="fraudManualReview">Indicates if the payment is sent to manual review..</param>
         /// <param name="fraudResultType">The fraud result properties of the payment..</param>
+        /// <param name="fraudRiskLevel">The risk level of the payment as determined by the FDM machine learning model..</param>
         /// <param name="fundingSource">Information regarding the funding type of the card. The possible return values are: * CHARGE * CREDIT * DEBIT * PREPAID * PREPAID_RELOADABLE  * PREPAID_NONRELOADABLE * DEFFERED_DEBIT  &gt; This functionality requires additional configuration on Adyen&#39;s end. To enable it, contact the Support Team.  For receiving this field in the notification, enable **Include Funding Source** in **Notifications** &gt; **Additional settings**..</param>
         /// <param name="fundsAvailability">Indicates availability of funds.  Visa: * \&quot;I\&quot; (fast funds are supported) * \&quot;N\&quot; (otherwise)  Mastercard: * \&quot;I\&quot; (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \&quot;N\&quot; (otherwise)  &gt; Returned when you verify a card BIN or estimate costs, and only if payoutEligible is \&quot;Y\&quot; or \&quot;D\&quot;..</param>
         /// <param name="inferredRefusalReason">Provides the more granular indication of why a transaction was refused. When a transaction fails with either \&quot;Refused\&quot;, \&quot;Restricted Card\&quot;, \&quot;Transaction Not Permitted\&quot;, \&quot;Not supported\&quot; or \&quot;DeclinedNon Generic\&quot; refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the &#x60;inferredRefusalReason&#x60;, field is populated and the &#x60;refusalReason&#x60;, is set to \&quot;Not Supported\&quot;.  Possible values:  * 3D Secure Mandated * Closed Account * ContAuth Not Supported * CVC Mandated * Ecommerce Not Allowed * Crossborder Not Supported * Card Updated  * Low Authrate Bin * Non-reloadable prepaid card.</param>
@@ -193,7 +240,7 @@ namespace Adyen.Model.Checkout
         /// <param name="tokenizationStoredPaymentMethodId">The reference that uniquely identifies tokenized payment details..</param>
         /// <param name="visaTransactionId">The &#x60;visaTransactionId&#x60;, has a fixed length of 15 numeric characters.  &gt; Contact Support Team to enable this field..</param>
         /// <param name="xid">The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse &#39;N&#39; or &#39;Y&#39;.   Example: ODgxNDc2MDg2MDExODk5MAAAAAA&#x3D;.</param>
-        public ResponseAdditionalDataCommon(string acquirerAccountCode = default(string), string acquirerCode = default(string), string acquirerReference = default(string), string alias = default(string), string aliasType = default(string), string authCode = default(string), string authorisationMid = default(string), string authorisedAmountCurrency = default(string), string authorisedAmountValue = default(string), string avsResult = default(string), string avsResultRaw = default(string), string bic = default(string), string coBrandedWith = default(string), string cvcResult = default(string), string cvcResultRaw = default(string), string dsTransID = default(string), string eci = default(string), string expiryDate = default(string), string extraCostsCurrency = default(string), string extraCostsValue = default(string), string fraudCheckItemNrFraudCheckname = default(string), string fraudManualReview = default(string), FraudResultTypeEnum? fraudResultType = default(FraudResultTypeEnum?), string fundingSource = default(string), string fundsAvailability = default(string), string inferredRefusalReason = default(string), string isCardCommercial = default(string), string issuerCountry = default(string), string liabilityShift = default(string), string mcBankNetReferenceNumber = default(string), string merchantAdviceCode = default(string), string merchantReference = default(string), string networkTxReference = default(string), string ownerName = default(string), string paymentAccountReference = default(string), string paymentMethod = default(string), string paymentMethodVariant = default(string), string payoutEligible = default(string), string realtimeAccountUpdaterStatus = default(string), string receiptFreeText = default(string), string recurringContractTypes = default(string), string recurringFirstPspReference = default(string), string recurringRecurringDetailReference = default(string), string recurringShopperReference = default(string), RecurringProcessingModelEnum? recurringProcessingModel = default(RecurringProcessingModelEnum?), string referred = default(string), string refusalReasonRaw = default(string), string requestAmount = default(string), string requestCurrencyCode = default(string), string shopperInteraction = default(string), string shopperReference = default(string), string terminalId = default(string), string threeDAuthenticated = default(string), string threeDAuthenticatedResponse = default(string), string threeDOffered = default(string), string threeDOfferedResponse = default(string), string threeDSVersion = default(string), string tokenizationShopperReference = default(string), TokenizationStoreOperationTypeEnum? tokenizationStoreOperationType = default(TokenizationStoreOperationTypeEnum?), string tokenizationStoredPaymentMethodId = default(string), string visaTransactionId = default(string), string xid = default(string))
+        public ResponseAdditionalDataCommon(string acquirerAccountCode = default(string), string acquirerCode = default(string), string acquirerReference = default(string), string alias = default(string), string aliasType = default(string), string authCode = default(string), string authorisationMid = default(string), string authorisedAmountCurrency = default(string), string authorisedAmountValue = default(string), string avsResult = default(string), string avsResultRaw = default(string), string bic = default(string), string coBrandedWith = default(string), string cvcResult = default(string), string cvcResultRaw = default(string), string dsTransID = default(string), string eci = default(string), string expiryDate = default(string), string extraCostsCurrency = default(string), string extraCostsValue = default(string), string fraudCheckItemNrFraudCheckname = default(string), string fraudManualReview = default(string), FraudResultTypeEnum? fraudResultType = default(FraudResultTypeEnum?), FraudRiskLevelEnum? fraudRiskLevel = default(FraudRiskLevelEnum?), string fundingSource = default(string), string fundsAvailability = default(string), string inferredRefusalReason = default(string), string isCardCommercial = default(string), string issuerCountry = default(string), string liabilityShift = default(string), string mcBankNetReferenceNumber = default(string), string merchantAdviceCode = default(string), string merchantReference = default(string), string networkTxReference = default(string), string ownerName = default(string), string paymentAccountReference = default(string), string paymentMethod = default(string), string paymentMethodVariant = default(string), string payoutEligible = default(string), string realtimeAccountUpdaterStatus = default(string), string receiptFreeText = default(string), string recurringContractTypes = default(string), string recurringFirstPspReference = default(string), string recurringRecurringDetailReference = default(string), string recurringShopperReference = default(string), RecurringProcessingModelEnum? recurringProcessingModel = default(RecurringProcessingModelEnum?), string referred = default(string), string refusalReasonRaw = default(string), string requestAmount = default(string), string requestCurrencyCode = default(string), string shopperInteraction = default(string), string shopperReference = default(string), string terminalId = default(string), string threeDAuthenticated = default(string), string threeDAuthenticatedResponse = default(string), string threeDOffered = default(string), string threeDOfferedResponse = default(string), string threeDSVersion = default(string), string tokenizationShopperReference = default(string), TokenizationStoreOperationTypeEnum? tokenizationStoreOperationType = default(TokenizationStoreOperationTypeEnum?), string tokenizationStoredPaymentMethodId = default(string), string visaTransactionId = default(string), string xid = default(string))
         {
             this.AcquirerAccountCode = acquirerAccountCode;
             this.AcquirerCode = acquirerCode;
@@ -218,6 +265,7 @@ namespace Adyen.Model.Checkout
             this.FraudCheckItemNrFraudCheckname = fraudCheckItemNrFraudCheckname;
             this.FraudManualReview = fraudManualReview;
             this.FraudResultType = fraudResultType;
+            this.FraudRiskLevel = fraudRiskLevel;
             this.FundingSource = fundingSource;
             this.FundsAvailability = fundsAvailability;
             this.InferredRefusalReason = inferredRefusalReason;
@@ -705,6 +753,7 @@ namespace Adyen.Model.Checkout
             sb.Append("  FraudCheckItemNrFraudCheckname: ").Append(FraudCheckItemNrFraudCheckname).Append("\n");
             sb.Append("  FraudManualReview: ").Append(FraudManualReview).Append("\n");
             sb.Append("  FraudResultType: ").Append(FraudResultType).Append("\n");
+            sb.Append("  FraudRiskLevel: ").Append(FraudRiskLevel).Append("\n");
             sb.Append("  FundingSource: ").Append(FundingSource).Append("\n");
             sb.Append("  FundsAvailability: ").Append(FundsAvailability).Append("\n");
             sb.Append("  InferredRefusalReason: ").Append(InferredRefusalReason).Append("\n");
@@ -893,6 +942,10 @@ namespace Adyen.Model.Checkout
                     this.FraudResultType == input.FraudResultType ||
                     this.FraudResultType.Equals(input.FraudResultType)
                 ) && 
+                (
+                    this.FraudRiskLevel == input.FraudRiskLevel ||
+                    this.FraudRiskLevel.Equals(input.FraudRiskLevel)
+                ) && 
                 (
                     this.FundingSource == input.FundingSource ||
                     (this.FundingSource != null &&
@@ -1186,6 +1239,7 @@ namespace Adyen.Model.Checkout
                     hashCode = (hashCode * 59) + this.FraudManualReview.GetHashCode();
                 }
                 hashCode = (hashCode * 59) + this.FraudResultType.GetHashCode();
+                hashCode = (hashCode * 59) + this.FraudRiskLevel.GetHashCode();
                 if (this.FundingSource != null)
                 {
                     hashCode = (hashCode * 59) + this.FundingSource.GetHashCode();
diff --git a/Adyen/Model/Checkout/SessionResultResponse.cs b/Adyen/Model/Checkout/SessionResultResponse.cs
index 76441eaa..d93c1199 100644
--- a/Adyen/Model/Checkout/SessionResultResponse.cs
+++ b/Adyen/Model/Checkout/SessionResultResponse.cs
@@ -33,9 +33,9 @@ namespace Adyen.Model.Checkout
     public partial class SessionResultResponse : IEquatable<SessionResultResponse>, IValidatableObject
     {
         /// <summary>
-        /// The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values:           * **completed** – The shopper completed the payment. This means that the payment was authorized.          * **paymentPending** – The shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow.          * **refused** – The session has been refused, due to too many refused payment attempts. Shoppers can no longer complete the payment with this session.          * **canceled** – The shopper canceled the payment.          * **active** – The session is still active and can be paid.          * **expired** – The session expired (default: 1 hour after session creation). Shoppers can no longer complete the payment with this session. 
+        /// The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values: * **completed**: the shopper completed the payment, and the payment was authorized. * **paymentPending**: the shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow, like voucher payments where the shopper completes the payment in a physical shop. * **refused**: the session has been refused, because of too many refused payment attempts. The shopper can no longer complete the payment with this session. * **canceled**: the shopper canceled the payment. * **expired**: the session expired. The shopper can no longer complete the payment with this session. By default, the session expires one hour after it is created.
         /// </summary>
-        /// <value>The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values:           * **completed** – The shopper completed the payment. This means that the payment was authorized.          * **paymentPending** – The shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow.          * **refused** – The session has been refused, due to too many refused payment attempts. Shoppers can no longer complete the payment with this session.          * **canceled** – The shopper canceled the payment.          * **active** – The session is still active and can be paid.          * **expired** – The session expired (default: 1 hour after session creation). Shoppers can no longer complete the payment with this session. </value>
+        /// <value>The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values: * **completed**: the shopper completed the payment, and the payment was authorized. * **paymentPending**: the shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow, like voucher payments where the shopper completes the payment in a physical shop. * **refused**: the session has been refused, because of too many refused payment attempts. The shopper can no longer complete the payment with this session. * **canceled**: the shopper canceled the payment. * **expired**: the session expired. The shopper can no longer complete the payment with this session. By default, the session expires one hour after it is created.</value>
         [JsonConverter(typeof(StringEnumConverter))]
         public enum StatusEnum
         {
@@ -79,16 +79,16 @@ namespace Adyen.Model.Checkout
 
 
         /// <summary>
-        /// The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values:           * **completed** – The shopper completed the payment. This means that the payment was authorized.          * **paymentPending** – The shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow.          * **refused** – The session has been refused, due to too many refused payment attempts. Shoppers can no longer complete the payment with this session.          * **canceled** – The shopper canceled the payment.          * **active** – The session is still active and can be paid.          * **expired** – The session expired (default: 1 hour after session creation). Shoppers can no longer complete the payment with this session. 
+        /// The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values: * **completed**: the shopper completed the payment, and the payment was authorized. * **paymentPending**: the shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow, like voucher payments where the shopper completes the payment in a physical shop. * **refused**: the session has been refused, because of too many refused payment attempts. The shopper can no longer complete the payment with this session. * **canceled**: the shopper canceled the payment. * **expired**: the session expired. The shopper can no longer complete the payment with this session. By default, the session expires one hour after it is created.
         /// </summary>
-        /// <value>The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values:           * **completed** – The shopper completed the payment. This means that the payment was authorized.          * **paymentPending** – The shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow.          * **refused** – The session has been refused, due to too many refused payment attempts. Shoppers can no longer complete the payment with this session.          * **canceled** – The shopper canceled the payment.          * **active** – The session is still active and can be paid.          * **expired** – The session expired (default: 1 hour after session creation). Shoppers can no longer complete the payment with this session. </value>
+        /// <value>The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values: * **completed**: the shopper completed the payment, and the payment was authorized. * **paymentPending**: the shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow, like voucher payments where the shopper completes the payment in a physical shop. * **refused**: the session has been refused, because of too many refused payment attempts. The shopper can no longer complete the payment with this session. * **canceled**: the shopper canceled the payment. * **expired**: the session expired. The shopper can no longer complete the payment with this session. By default, the session expires one hour after it is created.</value>
         [DataMember(Name = "status", EmitDefaultValue = false)]
         public StatusEnum? Status { get; set; }
         /// <summary>
         /// Initializes a new instance of the <see cref="SessionResultResponse" /> class.
         /// </summary>
         /// <param name="id">A unique identifier of the session..</param>
-        /// <param name="status">The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values:           * **completed** – The shopper completed the payment. This means that the payment was authorized.          * **paymentPending** – The shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow.          * **refused** – The session has been refused, due to too many refused payment attempts. Shoppers can no longer complete the payment with this session.          * **canceled** – The shopper canceled the payment.          * **active** – The session is still active and can be paid.          * **expired** – The session expired (default: 1 hour after session creation). Shoppers can no longer complete the payment with this session. .</param>
+        /// <param name="status">The status of the session. The status included in the response doesn&#39;t get updated. Don&#39;t make the request again to check for payment status updates.  Possible values: * **completed**: the shopper completed the payment, and the payment was authorized. * **paymentPending**: the shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow, like voucher payments where the shopper completes the payment in a physical shop. * **refused**: the session has been refused, because of too many refused payment attempts. The shopper can no longer complete the payment with this session. * **canceled**: the shopper canceled the payment. * **expired**: the session expired. The shopper can no longer complete the payment with this session. By default, the session expires one hour after it is created..</param>
         public SessionResultResponse(string id = default(string), StatusEnum? status = default(StatusEnum?))
         {
             this.Id = id;
diff --git a/Adyen/Model/Checkout/StoredPaymentMethod.cs b/Adyen/Model/Checkout/StoredPaymentMethod.cs
index 4b138616..eee21753 100644
--- a/Adyen/Model/Checkout/StoredPaymentMethod.cs
+++ b/Adyen/Model/Checkout/StoredPaymentMethod.cs
@@ -38,7 +38,7 @@ namespace Adyen.Model.Checkout
         /// <param name="bankAccountNumber">The bank account number (without separators)..</param>
         /// <param name="bankLocationId">The location id of the bank. The field value is &#x60;nil&#x60; in most cases..</param>
         /// <param name="brand">The brand of the card..</param>
-        /// <param name="expiryMonth">The month the card expires..</param>
+        /// <param name="expiryMonth">The two-digit month when the card expires.</param>
         /// <param name="expiryYear">The last two digits of the year the card expires. For example, **22** for the year 2022..</param>
         /// <param name="holderName">The unique payment method code..</param>
         /// <param name="iban">The IBAN of the bank account..</param>
@@ -95,9 +95,9 @@ namespace Adyen.Model.Checkout
         public string Brand { get; set; }
 
         /// <summary>
-        /// The month the card expires.
+        /// The two-digit month when the card expires
         /// </summary>
-        /// <value>The month the card expires.</value>
+        /// <value>The two-digit month when the card expires</value>
         [DataMember(Name = "expiryMonth", EmitDefaultValue = false)]
         public string ExpiryMonth { get; set; }
 
diff --git a/Adyen/Model/Checkout/StoredPaymentMethodDetails.cs b/Adyen/Model/Checkout/StoredPaymentMethodDetails.cs
index c70a3321..fb8f4885 100644
--- a/Adyen/Model/Checkout/StoredPaymentMethodDetails.cs
+++ b/Adyen/Model/Checkout/StoredPaymentMethodDetails.cs
@@ -139,7 +139,13 @@ namespace Adyen.Model.Checkout
             /// Enum Truemoney for value: truemoney
             /// </summary>
             [EnumMember(Value = "truemoney")]
-            Truemoney = 17
+            Truemoney = 17,
+
+            /// <summary>
+            /// Enum Paysafecard for value: paysafecard
+            /// </summary>
+            [EnumMember(Value = "paysafecard")]
+            Paysafecard = 18
 
         }
 
